// Class WTL.EQSTest_AwayFromAllPawns
// Size: 0x1f8 (Inherited: 0x1f8)
struct UEQSTest_AwayFromAllPawns : UEnvQueryTest {
};

// Class WTL.EQSTest_IsAlive
// Size: 0x200 (Inherited: 0x1f8)
struct UEQSTest_IsAlive : UEnvQueryTest {
	bool IsAITargetInterface; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
};

// Class WTL.EQSTest_IsOnTheGround
// Size: 0x1f8 (Inherited: 0x1f8)
struct UEQSTest_IsOnTheGround : UEnvQueryTest {
};

// Class WTL.EQSTest_PointBehindTheEnemy
// Size: 0x1f8 (Inherited: 0x1f8)
struct UEQSTest_PointBehindTheEnemy : UEnvQueryTest {
};

// Class WTL.EQSTest_TraceChannel
// Size: 0x2d8 (Inherited: 0x1f8)
struct UEQSTest_TraceChannel : UEnvQueryTest {
	struct FEnvTraceData TraceData; // 0x1f8(0x30)
	struct FAIDataProviderBoolValue TraceFromContext; // 0x228(0x38)
	struct FAIDataProviderFloatValue ItemHeightOffset; // 0x260(0x38)
	struct FAIDataProviderFloatValue ContextHeightOffset; // 0x298(0x38)
	struct UEnvQueryContext* Context; // 0x2d0(0x08)
};

// Class WTL.EQSTest_VisibilityCone
// Size: 0x1f8 (Inherited: 0x1f8)
struct UEQSTest_VisibilityCone : UEnvQueryTest {
};

// Class WTL.WTL3DActorHealth
// Size: 0x298 (Inherited: 0x260)
struct UWTL3DActorHealth : UUserWidget {
	struct UProgressBar* pbActorHealth; // 0x260(0x08)
	struct FLinearColor HealthBarFillNormalColor; // 0x268(0x10)
	struct FLinearColor HealthBarFillWarningColor; // 0x278(0x10)
	struct FLinearColor HealthBarFillDangerColor; // 0x288(0x10)

	void SetActorHealth(float CurrentHealth, float MaxHealth); // Function WTL.WTL3DActorHealth.SetActorHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x1772f20
};

// Class WTL.WTL3DActorName
// Size: 0x270 (Inherited: 0x260)
struct UWTL3DActorName : UUserWidget {
	struct UTextBlock* tbActorName; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)

	void SetActorNameText(struct FString ActorName); // Function WTL.WTL3DActorName.SetActorNameText // (Final|Native|Public|BlueprintCallable) // @ game+0x1773250
};

// Class WTL.WTL3DMobileStartPointParameters
// Size: 0x268 (Inherited: 0x260)
struct UWTL3DMobileStartPointParameters : UUserWidget {
	struct UProgressBar* pbPoint; // 0x260(0x08)
};

// Class WTL.WTL3DMonsterIdentity
// Size: 0x288 (Inherited: 0x270)
struct UWTL3DMonsterIdentity : UWTL3DActorName {
	struct UImage* imgIndicator; // 0x270(0x08)
	struct UProgressBar* pbHealth; // 0x278(0x08)
	struct UTextBlock* tbLevel; // 0x280(0x08)
};

// Class WTL.WTL3DMonsterName
// Size: 0x270 (Inherited: 0x270)
struct UWTL3DMonsterName : UWTL3DActorName {

	void SetMonsterLevelText(int32_t MonsterLevel); // Function WTL.WTL3DMonsterName.SetMonsterLevelText // (Final|Native|Public|BlueprintCallable) // @ game+0x17736c0
};

// Class WTL.WTL3DPlayerIdentity
// Size: 0x298 (Inherited: 0x270)
struct UWTL3DPlayerIdentity : UWTL3DActorName {
	char pad_270[0x8]; // 0x270(0x08)
	struct UImage* imgTeamLead; // 0x278(0x08)
	struct UProgressBar* pbHealth; // 0x280(0x08)
	struct UTextBlock* tbLevel; // 0x288(0x08)
	struct UBorder* bHealth; // 0x290(0x08)
};

// Class WTL.WTLAchievementSystem
// Size: 0x30 (Inherited: 0x28)
struct UWTLAchievementSystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class WTL.WTLActionGameplayActivity
// Size: 0x250 (Inherited: 0x220)
struct AWTLActionGameplayActivity : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct TSoftClassPtr<UObject> ItemPreview; // 0x228(0x28)
};

// Class WTL.WTLFortificationObject
// Size: 0x270 (Inherited: 0x220)
struct AWTLFortificationObject : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	int32_t ID; // 0x240(0x04)
	enum class EWTLFortificationObjectType Type; // 0x244(0x01)
	char SlotCount; // 0x245(0x01)
	bool NeedSaveState; // 0x246(0x01)
	char pad_247[0x1]; // 0x247(0x01)
	float SaveInterval; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	uint64_t CharacterID; // 0x250(0x08)
	uint64_t CharacterGroupID; // 0x258(0x08)
	uint16_t CharacterClanID; // 0x260(0x02)
	enum class EWTLFaction Faction; // 0x262(0x01)
	char pad_263[0x1]; // 0x263(0x01)
	int32_t Condition; // 0x264(0x04)
	float Energy; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
};

// Class WTL.WTLActionGameplayMachinegun
// Size: 0x400 (Inherited: 0x270)
struct AWTLActionGameplayMachinegun : AWTLFortificationObject {
	char pad_270[0x10]; // 0x270(0x10)
	struct FWTLStorageContent m_StorageContent; // 0x280(0xa8)
	struct FRotator MachinegunRotation; // 0x328(0x0c)
	char pad_334[0x4]; // 0x334(0x04)
	struct UStaticMeshComponent* StandMesh; // 0x338(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x340(0x08)
	struct UFMODAudioComponent* ShootAudioComponent; // 0x348(0x08)
	struct FText MachinegunName; // 0x350(0x18)
	int32_t WeaponID; // 0x368(0x04)
	int32_t FireRate; // 0x36c(0x04)
	float TemperatureIncreasingPerShot; // 0x370(0x04)
	float OverheatTemperature; // 0x374(0x04)
	float TemperatureToStartFire; // 0x378(0x04)
	float TemperatureCooldownPerSecond; // 0x37c(0x04)
	float OverheatAccuracy; // 0x380(0x04)
	float RotationSpeed; // 0x384(0x04)
	int32_t MaxAmmoWeight; // 0x388(0x04)
	struct FWTLCameraLimits CameraLimits; // 0x38c(0x0c)
	char pad_398[0x10]; // 0x398(0x10)
	struct AWTLCharacter* m_CurrentCharacter; // 0x3a8(0x08)
	char pad_3B0[0x10]; // 0x3b0(0x10)
	float m_CurrentTemperatureOverheat; // 0x3c0(0x04)
	bool m_bIsCoolingDown; // 0x3c4(0x01)
	char pad_3C5[0x13]; // 0x3c5(0x13)
	bool bIsInUse; // 0x3d8(0x01)
	bool bIsInAction; // 0x3d9(0x01)
	char pad_3DA[0x26]; // 0x3da(0x26)

	void SetEnabled(bool Value); // Function WTL.WTLActionGameplayMachinegun.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void OnUse(); // Function WTL.WTLActionGameplayMachinegun.OnUse // (Final|Native|Private) // @ game+0x1773ed0
	void OnStorageCheck(); // Function WTL.WTLActionGameplayMachinegun.OnStorageCheck // (Final|Native|Private) // @ game+0x1773d70
	void OnRep_StorageContent(); // Function WTL.WTLActionGameplayMachinegun.OnRep_StorageContent // (Final|Native|Private) // @ game+0x1774050
	void OnRep_MachinegunRortation(); // Function WTL.WTLActionGameplayMachinegun.OnRep_MachinegunRortation // (Final|Native|Private) // @ game+0xe77850
	void OnRep_IsInUse(); // Function WTL.WTLActionGameplayMachinegun.OnRep_IsInUse // (Final|Native|Private) // @ game+0xe77850
	void OnRep_bIsAction(); // Function WTL.WTLActionGameplayMachinegun.OnRep_bIsAction // (Final|Native|Private) // @ game+0x1773d50
	void OnLocalClientAcion(); // Function WTL.WTLActionGameplayMachinegun.OnLocalClientAcion // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnClientUsageStop(); // Function WTL.WTLActionGameplayMachinegun.OnClientUsageStop // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnClientUsageStart(); // Function WTL.WTLActionGameplayMachinegun.OnClientUsageStart // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	float GetPauseBetweenShots(); // Function WTL.WTLActionGameplayMachinegun.GetPauseBetweenShots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773c50
	float GetOverheatSafeTemperature(); // Function WTL.WTLActionGameplayMachinegun.GetOverheatSafeTemperature // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773c90
	float GetOverheatPercent(); // Function WTL.WTLActionGameplayMachinegun.GetOverheatPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773cc0
	struct USkeletalMeshComponent* GetMesh(); // Function WTL.WTLActionGameplayMachinegun.GetMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773d30
	bool GetIsInAction(); // Function WTL.WTLActionGameplayMachinegun.GetIsInAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773cf0
	bool GetIsCoolingDown(); // Function WTL.WTLActionGameplayMachinegun.GetIsCoolingDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773c70
	struct AWTLCharacter* GetCurrentCharacter(); // Function WTL.WTLActionGameplayMachinegun.GetCurrentCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773a30
	void FillAmmo(int32_t AmmoID, int32_t Count); // Function WTL.WTLActionGameplayMachinegun.FillAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x1773a50
};

// Class WTL.WTLActionGameplayObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLActionGameplayObjectInterface : UInterface {

	void SelectPreviousSlot(struct AWTLCharacter* Character); // Function WTL.WTLActionGameplayObjectInterface.SelectPreviousSlot // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774ab0
	void SelectNextSlot(struct AWTLCharacter* Character); // Function WTL.WTLActionGameplayObjectInterface.SelectNextSlot // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774b90
	void OnCharacterStartActionWithGameplayObject(struct AWTLCharacter* Character); // Function WTL.WTLActionGameplayObjectInterface.OnCharacterStartActionWithGameplayObject // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774ec0
	void OnCharacterFinishActionWithGameplayObject(struct AWTLCharacter* Character); // Function WTL.WTLActionGameplayObjectInterface.OnCharacterFinishActionWithGameplayObject // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774de0
	void MainUseStart(struct AWTLCharacter* Character); // Function WTL.WTLActionGameplayObjectInterface.MainUseStart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774c70
	float GetDesiredFOV(); // Function WTL.WTLActionGameplayObjectInterface.GetDesiredFOV // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1774d80
	bool CanStopAction(); // Function WTL.WTLActionGameplayObjectInterface.CanStopAction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774fa0
	bool CanStartActionWithItemInHands(struct AWTLUsable* ItemInHands); // Function WTL.WTLActionGameplayObjectInterface.CanStartActionWithItemInHands // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1775000
	bool CanStartActionRightNow(); // Function WTL.WTLActionGameplayObjectInterface.CanStartActionRightNow // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774fd0
	bool CanDrawDotPointer(); // Function WTL.WTLActionGameplayObjectInterface.CanDrawDotPointer // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1774d50
	bool CanChangeItemInArmsWhenActionInProgress(); // Function WTL.WTLActionGameplayObjectInterface.CanChangeItemInArmsWhenActionInProgress // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1774db0
};

// Class WTL.WTLAnomaly
// Size: 0x230 (Inherited: 0x220)
struct AWTLAnomaly : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	bool CharacterCanUseVehicleInside; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)

	void TeleportCharacterToRandomPointInRange(struct AWTLCharacter* Character, float MinRange, float MaxRange, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.TeleportCharacterToRandomPointInRange // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x177e610
	void TeleportCharacterToRandomPointArray(struct AWTLCharacter* Character, struct TArray<struct FVector> Locations, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.TeleportCharacterToRandomPointArray // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x177e850
	void TeleportCharacterToPoint(struct AWTLCharacter* Character, struct FVector Location, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.TeleportCharacterToPoint // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x177eac0
	void OnEMPGrenadeExplosion(); // Function WTL.WTLAnomaly.OnEMPGrenadeExplosion // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void IsCharacterHoldingBreath(struct AWTLCharacter* Character, enum class EWTLAnomalyCheckResult& Result); // Function WTL.WTLAnomaly.IsCharacterHoldingBreath // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x177fd60
	void ApplyRadialDamage(float DamageValue, struct FVector DamageOrigin, float DamageRadius, struct UDamageType* DamageTypeClass, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x177ec80
	void AddEffectToCharacterWithFalloff(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType, float EffectValue, struct FVector Origin, float FalloffRadius, float MinEffectValue, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.AddEffectToCharacterWithFalloff // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x177f460
	void AddEffectToCharactersWithFalloff(struct TArray<struct AWTLCharacter*> Characters, enum class EWTLCharacterEffectType EffectType, float EffectValue, struct FVector Origin, float FalloffRadius, float MinEffectValue, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.AddEffectToCharactersWithFalloff // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x177f010
	void AddEffectToCharacters(struct TArray<struct AWTLCharacter*> Characters, enum class EWTLCharacterEffectType EffectType, float EffectValue, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.AddEffectToCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x177f820
	void AddEffectToCharacter(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType, float EffectValue, enum class EWTLAnomalyActionResult& Result); // Function WTL.WTLAnomaly.AddEffectToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x177fb10
};

// Class WTL.WTLStaticAnomaly
// Size: 0x260 (Inherited: 0x230)
struct AWTLStaticAnomaly : AWTLAnomaly {
	char pad_230[0x28]; // 0x230(0x28)
	struct UStaticMeshComponent* ActivationVolume; // 0x258(0x08)

	void OnThrowingDeviceProjectileEnter(struct AWTLThrowingDeviceProjectile* ThrowingDeviceProjectile); // Function WTL.WTLStaticAnomaly.OnThrowingDeviceProjectileEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnNutLeave(struct AWTLNut* Nut); // Function WTL.WTLStaticAnomaly.OnNutLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnNutEnter(struct AWTLNut* Nut); // Function WTL.WTLStaticAnomaly.OnNutEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnMonsterLeave(struct AWTLMonsterPawn* Monster); // Function WTL.WTLStaticAnomaly.OnMonsterLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnMonsterEnter(struct AWTLMonsterPawn* Monster); // Function WTL.WTLStaticAnomaly.OnMonsterEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLStaticAnomaly.OnEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnCharacterLeave(struct AWTLCharacter* Character); // Function WTL.WTLStaticAnomaly.OnCharacterLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterEnter(struct AWTLCharacter* Character); // Function WTL.WTLStaticAnomaly.OnCharacterEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLStaticAnomaly.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	struct TArray<struct AWTLMonsterPawn*> GetMonstersInVolume(); // Function WTL.WTLStaticAnomaly.GetMonstersInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1864d80
	struct TArray<struct AWTLCharacter*> GetCharactersInVolume(); // Function WTL.WTLStaticAnomaly.GetCharactersInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1864e40
};

// Class WTL.WTLActivatableAnomaly
// Size: 0x298 (Inherited: 0x260)
struct AWTLActivatableAnomaly : AWTLStaticAnomaly {
	char pad_260[0x10]; // 0x260(0x10)
	float MinEnergy; // 0x270(0x04)
	float MaxEnergy; // 0x274(0x04)
	float EnergyPerSecond; // 0x278(0x04)
	float Energy; // 0x27c(0x04)
	enum class EWTLActivatableAnomalyState State; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float EnergyToActivate; // 0x284(0x04)
	float ActivationDelay; // 0x288(0x04)
	float StayActivatedTime; // 0x28c(0x04)
	float EnergyDecrementAfterActivation; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)

	void ServerOnActivated(); // Function WTL.WTLActivatableAnomaly.ServerOnActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnRep_State(); // Function WTL.WTLActivatableAnomaly.OnRep_State // (Final|Native|Private) // @ game+0x17756e0
	void OnRep_Energy(); // Function WTL.WTLActivatableAnomaly.OnRep_Energy // (Final|Native|Private) // @ game+0x1775750
	void OnEnergyChanged(float EnergyValue); // Function WTL.WTLActivatableAnomaly.OnEnergyChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void ClientOnBeginActivate(); // Function WTL.WTLActivatableAnomaly.ClientOnBeginActivate // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void ClientOnActivated(); // Function WTL.WTLActivatableAnomaly.ClientOnActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMovingAnomaly
// Size: 0x2c8 (Inherited: 0x230)
struct AWTLMovingAnomaly : AWTLAnomaly {
	char pad_230[0x40]; // 0x230(0x40)
	struct TArray<struct FVector> WayPoints; // 0x270(0x10)
	struct AWTLAnomalyWayPoint* StartWayPoint; // 0x280(0x08)
	enum class EWTLWayPointMovingType MovingType; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float MinSpeed; // 0x28c(0x04)
	float MaxSpeed; // 0x290(0x04)
	float PositionSynchronizationInterval; // 0x294(0x04)
	char pad_298[0x8]; // 0x298(0x08)
	struct FVector_NetQuantize m_CurrentWayPointPosition; // 0x2a0(0x0c)
	float m_CurrentSpeed; // 0x2ac(0x04)
	struct FVector m_SynchronizationPosition; // 0x2b0(0x0c)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct UStaticMeshComponent* ActivationVolume; // 0x2c0(0x08)

	void OnRep_SynchronizationPosition(); // Function WTL.WTLMovingAnomaly.OnRep_SynchronizationPosition // (Final|Native|Protected) // @ game+0x1864f00
	void OnNutLeave(struct AWTLNut* Nut); // Function WTL.WTLMovingAnomaly.OnNutLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnNutEnter(struct AWTLNut* Nut); // Function WTL.WTLMovingAnomaly.OnNutEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnNPCLeave(struct AWTLEnemyNPC* NPC); // Function WTL.WTLMovingAnomaly.OnNPCLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnNPCEnter(struct AWTLEnemyNPC* NPC); // Function WTL.WTLMovingAnomaly.OnNPCEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnMonsterLeave(struct AWTLMonsterPawn* Monster); // Function WTL.WTLMovingAnomaly.OnMonsterLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnMonsterEnter(struct AWTLMonsterPawn* Monster); // Function WTL.WTLMovingAnomaly.OnMonsterEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLMovingAnomaly.OnEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnCharacterLeave(struct AWTLCharacter* Character); // Function WTL.WTLMovingAnomaly.OnCharacterLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterEnter(struct AWTLCharacter* Character); // Function WTL.WTLMovingAnomaly.OnCharacterEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLMovingAnomaly.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	struct TArray<struct AWTLEnemyNPC*> GetNPCInVolume(); // Function WTL.WTLMovingAnomaly.GetNPCInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1864cc0
	struct TArray<struct AWTLMonsterPawn*> GetMonstersInVolume(); // Function WTL.WTLMovingAnomaly.GetMonstersInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1864d80
	struct TArray<struct AWTLCharacter*> GetCharactersInVolume(); // Function WTL.WTLMovingAnomaly.GetCharactersInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1864e40
	struct TArray<struct AActor*> GetActorsInVolume(); // Function WTL.WTLMovingAnomaly.GetActorsInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1864c00
};

// Class WTL.WTLActivatableMovingAnomaly
// Size: 0x300 (Inherited: 0x2c8)
struct AWTLActivatableMovingAnomaly : AWTLMovingAnomaly {
	char pad_2C8[0x10]; // 0x2c8(0x10)
	float MinEnergy; // 0x2d8(0x04)
	float MaxEnergy; // 0x2dc(0x04)
	float EnergyPerSecond; // 0x2e0(0x04)
	float Energy; // 0x2e4(0x04)
	enum class EWTLActivatableAnomalyState State; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	float EnergyToActivate; // 0x2ec(0x04)
	float ActivationDelay; // 0x2f0(0x04)
	float StayActivatedTime; // 0x2f4(0x04)
	float EnergyDecrementAfterActivation; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void ServerOnActivated(); // Function WTL.WTLActivatableMovingAnomaly.ServerOnActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnRep_State(); // Function WTL.WTLActivatableMovingAnomaly.OnRep_State // (Final|Native|Private) // @ game+0x1775af0
	void OnRep_Energy(); // Function WTL.WTLActivatableMovingAnomaly.OnRep_Energy // (Final|Native|Private) // @ game+0x1775b60
	void OnEnergyChanged(float EnergyValue); // Function WTL.WTLActivatableMovingAnomaly.OnEnergyChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void ClientOnBeginActivate(); // Function WTL.WTLActivatableMovingAnomaly.ClientOnBeginActivate // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void ClientOnActivated(); // Function WTL.WTLActivatableMovingAnomaly.ClientOnActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLActivatableObject
// Size: 0x240 (Inherited: 0x220)
struct AWTLActivatableObject : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	float PostActivationCooldown; // 0x238(0x04)
	float ActivationDelay; // 0x23c(0x04)

	void BP_NotifyActivationStarted(struct AWTLCharacter* Activator); // Function WTL.WTLActivatableObject.BP_NotifyActivationStarted // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BP_DeactivateObject(struct AWTLCharacter* Activator); // Function WTL.WTLActivatableObject.BP_DeactivateObject // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool BP_CanBeActivated(); // Function WTL.WTLActivatableObject.BP_CanBeActivated // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1775fb0
	void BP_ActivateObject(struct AWTLCharacter* Activator); // Function WTL.WTLActivatableObject.BP_ActivateObject // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLActivatableObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLActivatableObjectInterface : UInterface {
};

// Class WTL.WTLActivatorVolume
// Size: 0x280 (Inherited: 0x258)
struct AWTLActivatorVolume : AVolume {
	struct TArray<struct AWTLActivatableObject*> ObjectsToActivate; // 0x258(0x10)
	int32_t CharactersCountToActivate; // 0x268(0x04)
	char pad_26C[0x14]; // 0x26c(0x14)

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLActivatorVolume.OnEndOverlap // (Final|Native|Private) // @ game+0x1776210
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLActivatorVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1776590
};

// Class WTL.WTLAIAnimInstance
// Size: 0x300 (Inherited: 0x2c0)
struct UWTLAIAnimInstance : UAnimInstance {
	float VelocitySpeed; // 0x2c0(0x04)
	float ForwardSpeed; // 0x2c4(0x04)
	float RightSpeed; // 0x2c8(0x04)
	float UpSpeed; // 0x2cc(0x04)
	struct FVector Direction; // 0x2d0(0x0c)
	struct FRotator RotationDelta; // 0x2dc(0x0c)
	struct FVector VectorDelta; // 0x2e8(0x0c)
	char pad_2F4[0xc]; // 0x2f4(0x0c)
};

// Class WTL.WTLAICharacter
// Size: 0x970 (Inherited: 0x4c0)
struct AWTLAICharacter : ACharacter {
	char pad_4C0[0x1d8]; // 0x4c0(0x1d8)
	struct TMap<enum class EWTLWeaponType, float> WeaponTypeDamageMultipliers; // 0x698(0x50)
	enum class EPhysicalSurface PhysicalSurface; // 0x6e8(0x01)
	char Level; // 0x6e9(0x01)
	char pad_6EA[0x2]; // 0x6ea(0x02)
	float HeadArmor; // 0x6ec(0x04)
	float BodyArmor; // 0x6f0(0x04)
	float ArmsArmor; // 0x6f4(0x04)
	float LegsArmor; // 0x6f8(0x04)
	float FeetArmor; // 0x6fc(0x04)
	float LifespanAfterDeath; // 0x700(0x04)
	bool IsBurst; // 0x704(0x01)
	char PercentDamageBurst; // 0x705(0x01)
	char pad_706[0x2]; // 0x706(0x02)
	float TakeDamageBurst; // 0x708(0x04)
	char MinLevelBurst; // 0x70c(0x01)
	char MaxLevelBurst; // 0x70d(0x01)
	char pad_70E[0x2]; // 0x70e(0x02)
	struct FWTLStorageContent m_PublicStorageContent; // 0x710(0xa8)
	struct FWTLStorageContent m_SummaryStorageContent; // 0x7b8(0xa8)
	struct FWTLStorageContent m_PrivateStorageContent; // 0x860(0xa8)
	struct TArray<struct FWTLItemDropInfo> AdditionalLoot; // 0x908(0x10)
	char MaxLevel; // 0x918(0x01)
	char pad_919[0x3]; // 0x919(0x03)
	float ExperienceDropCountMultiplierDelta; // 0x91c(0x04)
	float ExperienceDropChanceMultiplierDelta; // 0x920(0x04)
	float m_MultiplierParameters; // 0x924(0x04)
	struct FVector m_LocationDead; // 0x928(0x0c)
	float m_Health; // 0x934(0x04)
	bool m_bIsInStealthMode; // 0x938(0x01)
	char pad_939[0x3]; // 0x939(0x03)
	int32_t AICharacterID; // 0x93c(0x04)
	char IDIcon; // 0x940(0x01)
	char pad_941[0x7]; // 0x941(0x07)
	struct UPhysicsAsset* MeshPhysicsAsset; // 0x948(0x08)
	struct FRotator OffsetRotationMesh; // 0x950(0x0c)
	float DangerLevel; // 0x95c(0x04)
	float KillZ; // 0x960(0x04)
	char pad_964[0xc]; // 0x964(0x0c)

	void SetStealthMode(bool Value); // Function WTL.WTLAICharacter.SetStealthMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1777f60
	void SetSpawn(struct AWTLSpawnAICharacter* Value); // Function WTL.WTLAICharacter.SetSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x17775a0
	void SetLifetime(float Delta); // Function WTL.WTLAICharacter.SetLifetime // (Final|Native|Public|BlueprintCallable) // @ game+0x17776a0
	void SetLifespanAfterDeath(float Value); // Function WTL.WTLAICharacter.SetLifespanAfterDeath // (Final|Native|Public|BlueprintCallable) // @ game+0x17774d0
	void SetApplyWeaponTypeDamageMultipliers(bool Value); // Function WTL.WTLAICharacter.SetApplyWeaponTypeDamageMultipliers // (Final|Native|Public|BlueprintCallable) // @ game+0x1777830
	void OnRep_StorageContent(); // Function WTL.WTLAICharacter.OnRep_StorageContent // (Final|Native|Public) // @ game+0x1778070
	void OnRep_IsInStealthMode(); // Function WTL.WTLAICharacter.OnRep_IsInStealthMode // (Final|Native|Public) // @ game+0x1778090
	void OnRep_Health(); // Function WTL.WTLAICharacter.OnRep_Health // (Final|Native|Public) // @ game+0xe77850
	void NetMulticast_OnToDeath(struct FVector DeathPosition, struct FVector_NetQuantize ActorRotation, struct FVector_NetQuantize MeshRotation, struct FWTLAICharacterDeathData DeathData); // Function WTL.WTLAICharacter.NetMulticast_OnToDeath // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1777940
	void NetMulticast_OnDeath(struct FVector DeathPosition, struct FVector_NetQuantize ActorRotation, struct FVector_NetQuantize MeshRotation, struct FWTLAICharacterDeathData DeathData); // Function WTL.WTLAICharacter.NetMulticast_OnDeath // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1777c20
	void KillAiCharacter(); // Function WTL.WTLAICharacter.KillAiCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1777f00
	void K2_OnToDeathEvent(struct FVector& DeathPosition, struct FVector_NetQuantize ActorRotation, struct FVector_NetQuantize MeshRotation, struct FWTLAICharacterDeathData DeathData); // Function WTL.WTLAICharacter.K2_OnToDeathEvent // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnStealthModeChanged(bool Value); // Function WTL.WTLAICharacter.K2_OnStealthModeChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnDeathEvent(struct FWTLAICharacterDeathData DeathData); // Function WTL.WTLAICharacter.K2_OnDeathEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnBurst(struct FWTLAICharacterDeathData DeathData); // Function WTL.WTLAICharacter.K2_OnBurst // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool IsVisible(); // Function WTL.WTLAICharacter.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1777910
	bool IsApplyWeaponTypeDamageMultipliers(); // Function WTL.WTLAICharacter.IsApplyWeaponTypeDamageMultipliers // (Final|Native|Public|BlueprintCallable) // @ game+0x1777810
	bool IsAlive(); // Function WTL.WTLAICharacter.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17777e0
	struct AWTLSpawnAICharacter* GetSpawn(); // Function WTL.WTLAICharacter.GetSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1777680
	float GetMaxHealth(); // Function WTL.WTLAICharacter.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1186200
	float GetHealth(); // Function WTL.WTLAICharacter.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1777780
	float GetDangerLevel(); // Function WTL.WTLAICharacter.GetDangerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17777a0
	int32_t GetAICharacterID(); // Function WTL.WTLAICharacter.GetAICharacterID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17777c0
};

// Class WTL.WTLAICharacterController
// Size: 0x520 (Inherited: 0x328)
struct AWTLAICharacterController : AAIController {
	char pad_328[0x8]; // 0x328(0x08)
	enum class ETraceTypeQuery CollisionTraceQuery; // 0x330(0x01)
	char pad_331[0x3]; // 0x331(0x03)
	float PredictionUpdatePeriod; // 0x334(0x04)
	char pad_338[0x1e8]; // 0x338(0x1e8)

	void OnTouchSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLAICharacterController.OnTouchSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnTeamSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLAICharacterController.OnTeamSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnSightSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLAICharacterController.OnSightSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnPredictionUpdate(); // Function WTL.WTLAICharacterController.OnPredictionUpdate // (Final|Native|Public) // @ game+0x17794e0
	void OnPredictionSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLAICharacterController.OnPredictionSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnPerceptionUpdated(struct TArray<struct AActor*>& UpdatedActors); // Function WTL.WTLAICharacterController.OnPerceptionUpdated // (Final|Native|Public|HasOutParms) // @ game+0x1779410
	void OnHearingSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLAICharacterController.OnHearingSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnDamageSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State, float Value); // Function WTL.WTLAICharacterController.OnDamageSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnActorPerceptionUpdated(struct AActor* Actor, struct FAIStimulus Stimulus); // Function WTL.WTLAICharacterController.OnActorPerceptionUpdated // (Final|Native|Public) // @ game+0x17791f0
	struct AWTLAICharacter* GetMyPawn(); // Function WTL.WTLAICharacterController.GetMyPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1779500
};

// Class WTL.WTLAIDestroyObject
// Size: 0x240 (Inherited: 0x220)
struct AWTLAIDestroyObject : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	float m_Condition; // 0x230(0x04)
	float m_MaxCondition; // 0x234(0x04)
	bool m_ObjectIsDestroyed; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	float ActivationTime; // 0x23c(0x04)

	void OnChangeCondition(float DeltaCondition); // Function WTL.WTLAIDestroyObject.OnChangeCondition // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPUse(struct AWTLCharacter* Character); // Function WTL.WTLAIDestroyObject.BPUse // (Native|Event|Public|BlueprintEvent) // @ game+0x1779a60
	void BPSetHighlightState(bool Value); // Function WTL.WTLAIDestroyObject.BPSetHighlightState // (Native|Event|Public|BlueprintEvent) // @ game+0x1779890
	struct FString BPGetDisplayText(struct AWTLCharacter* Character); // Function WTL.WTLAIDestroyObject.BPGetDisplayText // (Native|Event|Public|BlueprintEvent) // @ game+0x1779760
	bool BPCanBeUsed(struct AWTLCharacter* Character); // Function WTL.WTLAIDestroyObject.BPCanBeUsed // (Native|Event|Public|BlueprintEvent) // @ game+0x1779970
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLAIDestroyObject.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1779c20
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLAIDestroyObject.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1779b40
	bool AIInterface_IsAlive(); // Function WTL.WTLAIDestroyObject.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1779d30
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLAIDestroyObject.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1779ca0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLAIDestroyObject.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1779cf0
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLAIDestroyObject.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1779c60
};

// Class WTL.WTLAIFlying
// Size: 0x970 (Inherited: 0x970)
struct AWTLAIFlying : AWTLAICharacter {
};

// Class WTL.WTLAIFlyingController
// Size: 0x520 (Inherited: 0x520)
struct AWTLAIFlyingController : AWTLAICharacterController {
};

// Class WTL.WTLAIMonsterPawn
// Size: 0x4c0 (Inherited: 0x4c0)
struct AWTLAIMonsterPawn : ACharacter {
};

// Class WTL.WTLAIPerceptionComponent
// Size: 0x190 (Inherited: 0x190)
struct UWTLAIPerceptionComponent : UAIPerceptionComponent {

	void SetSightVisionHalfAngle(float Angle); // Function WTL.WTLAIPerceptionComponent.SetSightVisionHalfAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x177aae0
	void SetSightRadius(float Radius); // Function WTL.WTLAIPerceptionComponent.SetSightRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x177ac20
	float GetSightRadius(); // Function WTL.WTLAIPerceptionComponent.GetSightRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x177ad80
	float GetSenseHearingRange(); // Function WTL.WTLAIPerceptionComponent.GetSenseHearingRange // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x177ae30
	struct FVector GetSeenLocation(struct AActor* Actor); // Function WTL.WTLAIPerceptionComponent.GetSeenLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x177a7d0
	struct FVector GetPredictionLocation(struct AActor* Actor, float TimeSec); // Function WTL.WTLAIPerceptionComponent.GetPredictionLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x177a4e0
	bool GetIsSenseEnabled(struct UAISense* SenseClass); // Function WTL.WTLAIPerceptionComponent.GetIsSenseEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x177a8d0
};

// Class WTL.WTLAIPerceptionSystem
// Size: 0x130 (Inherited: 0x130)
struct UWTLAIPerceptionSystem : UAIPerceptionSystem {
};

// Class WTL.WTLInteractiveObject
// Size: 0x260 (Inherited: 0x220)
struct AWTLInteractiveObject : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct FText m_LocalizationDisplayText; // 0x228(0x18)
	struct FString m_DisplayText; // 0x240(0x10)
	float ActivationTime; // 0x250(0x04)
	float MaxDistanceToStartUse; // 0x254(0x04)
	struct UAnimMontage* CharacterUsingAnimMontage; // 0x258(0x08)

	void BPUse(struct AWTLCharacter* Character); // Function WTL.WTLInteractiveObject.BPUse // (Native|Event|Public|BlueprintEvent) // @ game+0x1779a60
	void BPSetHighlightState(bool Value); // Function WTL.WTLInteractiveObject.BPSetHighlightState // (Native|Event|Public|BlueprintEvent) // @ game+0x1779890
	struct FString BPGetDisplayText(struct AWTLCharacter* Character); // Function WTL.WTLInteractiveObject.BPGetDisplayText // (Native|Event|Public|BlueprintEvent) // @ game+0x1779760
	bool BPCanBeUsed(struct AWTLCharacter* Character); // Function WTL.WTLInteractiveObject.BPCanBeUsed // (Native|Event|Public|BlueprintEvent) // @ game+0x1779970
};

// Class WTL.WTLStorageBox
// Size: 0x630 (Inherited: 0x260)
struct AWTLStorageBox : AWTLInteractiveObject {
	char pad_260[0x8]; // 0x260(0x08)
	struct UStaticMeshComponent* Mesh; // 0x268(0x08)
	char pad_270[0x170]; // 0x270(0x170)
	struct FWTLStorageContent m_PublicStorageContent; // 0x3e0(0xa8)
	struct FWTLStorageContent m_PrivateStorageContent; // 0x488(0xa8)
	struct FWTLStorageContent m_SummaryStorageContent; // 0x530(0xa8)
	char pad_5D8[0x20]; // 0x5d8(0x20)
	struct FText Name; // 0x5f8(0x18)
	char SlotsCount; // 0x610(0x01)
	bool CanStoreItems; // 0x611(0x01)
	char pad_612[0x6]; // 0x612(0x06)
	struct TArray<struct FWTLItemSpawnInfo> SpawnItems; // 0x618(0x10)
	bool CanUseLocationItemsSpawn; // 0x628(0x01)
	char pad_629[0x3]; // 0x629(0x03)
	int32_t MaxLocationItemsSpawnQuality; // 0x62c(0x04)

	void SetCharacterDropChanceMultiplier(struct AWTLCharacter* Character, float Multiplier); // Function WTL.WTLStorageBox.SetCharacterDropChanceMultiplier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x192d740
	void OnRep_StorageContent(); // Function WTL.WTLStorageBox.OnRep_StorageContent // (Final|Native|Protected) // @ game+0x192db20
	void AllowSpecialLootForCharacter(struct AWTLCharacter* Character, float SpecialValue); // Function WTL.WTLStorageBox.AllowSpecialLootForCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x192d360
};

// Class WTL.WTLAirDropStorage
// Size: 0x6d0 (Inherited: 0x630)
struct AWTLAirDropStorage : AWTLStorageBox {
	struct UWTLRadialForceComponent* RadialForce; // 0x630(0x08)
	struct UParticleSystemComponent* Highlighting; // 0x638(0x08)
	char pad_640[0x10]; // 0x640(0x10)
	float m_NewLifeTime; // 0x650(0x04)
	char pad_654[0x28]; // 0x654(0x28)
	bool m_bShowAll; // 0x67c(0x01)
	bool m_bShowPositionOnLocation; // 0x67d(0x01)
	bool m_bSpawned; // 0x67e(0x01)
	bool UseCameraShake; // 0x67f(0x01)
	struct UMatineeCameraShake* CameraShake; // 0x680(0x08)
	float MaxDistance; // 0x688(0x04)
	float CameraShakeValue; // 0x68c(0x04)
	bool HideUsableItem; // 0x690(0x01)
	bool RemoveAiming; // 0x691(0x01)
	bool NeedToKillCharacters; // 0x692(0x01)
	char pad_693[0x1]; // 0x693(0x01)
	float KillCharactersMaxDistance; // 0x694(0x04)
	struct TSoftClassPtr<UObject> DestroyFX; // 0x698(0x28)
	float TimeBeforeShowBox; // 0x6c0(0x04)
	float LocationHighlightingTime; // 0x6c4(0x04)
	bool CanSpawnGuard; // 0x6c8(0x01)
	char pad_6C9[0x7]; // 0x6c9(0x07)

	void OnRep_NewLifeTime(); // Function WTL.WTLAirDropStorage.OnRep_NewLifeTime // (Final|Native|Private) // @ game+0x177b2f0
	void OnRep_bShowPosition(); // Function WTL.WTLAirDropStorage.OnRep_bShowPosition // (Final|Native|Private) // @ game+0x177b290
	void OnRep_bShowAll(); // Function WTL.WTLAirDropStorage.OnRep_bShowAll // (Final|Native|Private) // @ game+0x177b2d0
	void NetMulsticast_Destroy(); // Function WTL.WTLAirDropStorage.NetMulsticast_Destroy // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x177b270
	void BPShowAll(bool ShowAll); // Function WTL.WTLAirDropStorage.BPShowAll // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDestroy(); // Function WTL.WTLAirDropStorage.BPDestroy // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLAITargetInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLAITargetInterface : UInterface {

	bool AIInterface_IsInSafeZone(); // Function WTL.WTLAITargetInterface.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x177b940
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLAITargetInterface.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x177b860
	bool AIInterface_IsAlive(); // Function WTL.WTLAITargetInterface.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x177b9e0
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLAITargetInterface.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x177b970
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLAITargetInterface.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x177b9b0
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLAITargetInterface.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1774db0
};

// Class WTL.WTLAmbientSound
// Size: 0x238 (Inherited: 0x228)
struct AWTLAmbientSound : AAmbientSound {
	char pad_228[0xc]; // 0x228(0x0c)
	enum class EWTLAmbientSoundLocationType LocationType; // 0x234(0x01)
	enum class EWTLAmbientSoundDayTimeType DayTimeType; // 0x235(0x01)
	char pad_236[0x2]; // 0x236(0x02)
};

// Class WTL.WTLAmmoCase
// Size: 0x260 (Inherited: 0x220)
struct AWTLAmmoCase : AActor {
	struct UCapsuleComponent* CollisionComp; // 0x220(0x08)
	struct UStaticMeshComponent* Mesh; // 0x228(0x08)
	float DropLifeSpan; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TSoftObjectPtr<UFMODEvent> DropSoundEvent; // 0x238(0x28)

	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLAmmoCase.OnHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x177be60
};

// Class WTL.WTLAnimalBase
// Size: 0x220 (Inherited: 0x220)
struct AWTLAnimalBase : AActor {

	void OnRepReplicatedMovement(struct FVector Location, struct FRotator Rotation); // Function WTL.WTLAnimalBase.OnRepReplicatedMovement // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLAnimNotifyAmmoCaseEject
// Size: 0x80 (Inherited: 0x38)
struct UWTLAnimNotifyAmmoCaseEject : UAnimNotify {
	struct TSoftClassPtr<UObject> AmmoCaseClass; // 0x38(0x28)
	float AmmoCaseForce; // 0x60(0x04)
	float ForceRandomMultiplierValue; // 0x64(0x04)
	struct FVector AngularImpulse; // 0x68(0x0c)
	float RandomRotationHalfCone; // 0x74(0x04)
	struct FName SocketName; // 0x78(0x08)
};

// Class WTL.WTLAnimNotifyParticleAmmoCaseEject
// Size: 0x50 (Inherited: 0x38)
struct UWTLAnimNotifyParticleAmmoCaseEject : UAnimNotify {
	struct FVector AmmoCaseInitialVelocity; // 0x38(0x0c)
	struct FName InitialVelocityParamName; // 0x44(0x08)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class WTL.WTLAnimNotifyParticleEffect
// Size: 0xb0 (Inherited: 0x38)
struct UWTLAnimNotifyParticleEffect : UAnimNotify {
	struct TSoftObjectPtr<UParticleSystem> PSTemplate; // 0x38(0x28)
	struct FVector LocationOffset; // 0x60(0x0c)
	struct FRotator RotationOffset; // 0x6c(0x0c)
	struct FVector EmitterScale; // 0x78(0x0c)
	char pad_84[0x1c]; // 0x84(0x1c)
	char Attached : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	struct FName SocketName; // 0xa4(0x08)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class WTL.WTLAnimNotifyGunshot
// Size: 0x98 (Inherited: 0x38)
struct UWTLAnimNotifyGunshot : UAnimNotify {
	struct TSoftObjectPtr<UFMODEvent> EditorEvent; // 0x38(0x28)
	struct TSoftObjectPtr<UParticleSystem> EditParticleSystem; // 0x60(0x28)
	struct FVector EditorParticlesScale; // 0x88(0x0c)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class WTL.WTLAnimNotifyFootstep
// Size: 0x60 (Inherited: 0x38)
struct UWTLAnimNotifyFootstep : UAnimNotify {
	struct TSoftObjectPtr<UFMODEvent> EditorEvent; // 0x38(0x28)
};

// Class WTL.WTLAnimNotifyCharacterBreath
// Size: 0x60 (Inherited: 0x38)
struct UWTLAnimNotifyCharacterBreath : UAnimNotify {
	struct TSoftObjectPtr<UFMODEvent> EditorEvent; // 0x38(0x28)
};

// Class WTL.WTLAnimNotifyPlayCharacterSound
// Size: 0x58 (Inherited: 0x58)
struct UWTLAnimNotifyPlayCharacterSound : UAnimNotify_PlaySound {
};

// Class WTL.WTLCharacterAdditionalMeshNotifyState
// Size: 0xa0 (Inherited: 0x30)
struct UWTLCharacterAdditionalMeshNotifyState : UAnimNotifyState {
	char pad_30[0x8]; // 0x30(0x08)
	struct FName MeshComponentName; // 0x38(0x08)
	struct TSoftObjectPtr<UStaticMesh> Mesh; // 0x40(0x28)
	struct FName AttachBoneName; // 0x68(0x08)
	struct FTransform MeshRelativeTransform; // 0x70(0x30)
};

// Class WTL.WTLCharacterAddStaticMeshNotify
// Size: 0xb0 (Inherited: 0x38)
struct UWTLCharacterAddStaticMeshNotify : UAnimNotify {
	struct UStaticMeshComponent* m_MeshComponent; // 0x38(0x08)
	struct FName MeshComponentName; // 0x40(0x08)
	struct TSoftObjectPtr<UStaticMesh> Mesh; // 0x48(0x28)
	struct FName AttachBoneName; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
	struct FTransform MeshRelativeTransform; // 0x80(0x30)
};

// Class WTL.WTLCharacterRemoveStaticMeshNotify
// Size: 0x40 (Inherited: 0x38)
struct UWTLCharacterRemoveStaticMeshNotify : UAnimNotify {
	struct FName MeshComponentName; // 0x38(0x08)
};

// Class WTL.WTLCharacterHandsNotifyState
// Size: 0x38 (Inherited: 0x30)
struct UWTLCharacterHandsNotifyState : UAnimNotifyState {
	enum class EWTLHandsState StartHandsState; // 0x30(0x01)
	enum class EWTLHandsState EndHandsState; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
};

// Class WTL.WTLCharacterHandsStateChange
// Size: 0x40 (Inherited: 0x38)
struct UWTLCharacterHandsStateChange : UAnimNotify {
	enum class EWTLHandsState HandsState; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class WTL.WTLReloadingStateChange
// Size: 0x40 (Inherited: 0x38)
struct UWTLReloadingStateChange : UAnimNotify {
	enum class EWTLReloadingNotifyType NotifyType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class WTL.WTLUsableItemStateChange
// Size: 0x40 (Inherited: 0x38)
struct UWTLUsableItemStateChange : UAnimNotify {
	enum class EWTLUsableItemState State; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class WTL.WTLUsableItemCustomTrigger
// Size: 0x40 (Inherited: 0x38)
struct UWTLUsableItemCustomTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
};

// Class WTL.WTLVehicleStateChange
// Size: 0x40 (Inherited: 0x38)
struct UWTLVehicleStateChange : UAnimNotify {
	enum class EWTLVehicleState State; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class WTL.WTLVehicleCustomTrigger
// Size: 0x40 (Inherited: 0x38)
struct UWTLVehicleCustomTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
};

// Class WTL.WTLPlaceableStuffCustomTrigger
// Size: 0x40 (Inherited: 0x38)
struct UWTLPlaceableStuffCustomTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
};

// Class WTL.WTLNPCCustomTrigger
// Size: 0x40 (Inherited: 0x38)
struct UWTLNPCCustomTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
};

// Class WTL.WTLMonsterActionTrigger
// Size: 0x40 (Inherited: 0x38)
struct UWTLMonsterActionTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
};

// Class WTL.WTLMonsterAnimationTrigger
// Size: 0x48 (Inherited: 0x38)
struct UWTLMonsterAnimationTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
	bool Value; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t ID; // 0x44(0x04)
};

// Class WTL.WTLNPCActionTrigger
// Size: 0x40 (Inherited: 0x38)
struct UWTLNPCActionTrigger : UAnimNotify {
	struct FName TriggerName; // 0x38(0x08)
};

// Class WTL.WTLMonsterEffect
// Size: 0x88 (Inherited: 0x38)
struct UWTLMonsterEffect : UAnimNotify {
	struct TMap<uint16_t, struct FWTLMonsterAction> ActionsPerMonsterID; // 0x38(0x50)
};

// Class WTL.WTLAnomalyWayPoint
// Size: 0x228 (Inherited: 0x220)
struct AWTLAnomalyWayPoint : AActor {
	struct AWTLAnomalyWayPoint* NextWayPoint; // 0x220(0x08)
};

// Class WTL.WTLArenaState
// Size: 0x2c8 (Inherited: 0x220)
struct AWTLArenaState : AInfo {
	char pad_220[0x28]; // 0x220(0x28)
	enum class EWTLArenaMatchState m_MatchState; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	float m_NextMatchStateChangeServerTime; // 0x24c(0x04)
	struct TArray<struct FWTLArenaFactionScore> m_FactionScores; // 0x250(0x10)
	char pad_260[0x10]; // 0x260(0x10)
	struct TArray<struct FWTLArenaLeaderboardRecord> m_Leaderboard; // 0x270(0x10)
	struct TArray<struct FWTLArenaReward> Rewards; // 0x280(0x10)
	char pad_290[0x20]; // 0x290(0x20)
	struct FTimespan MatchWaitDuration; // 0x2b0(0x08)
	struct FTimespan MatchDuration; // 0x2b8(0x08)
	struct FTimespan MatchDoneDuration; // 0x2c0(0x08)

	void OnRep_MatchState(); // Function WTL.WTLArenaState.OnRep_MatchState // (Final|Native|Protected) // @ game+0x17802d0
};

// Class WTL.WTLBallisticsSystem
// Size: 0x180 (Inherited: 0x28)
struct UWTLBallisticsSystem : UObject {
	char pad_28[0x148]; // 0x28(0x148)
	bool bDrawActualTrajectory; // 0x170(0x01)
	char pad_171[0x3]; // 0x171(0x03)
	float DebugInfoLifetime; // 0x174(0x04)
	float ActualTrajectoryThickness; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
};

// Class WTL.WTLBPLibraryCharacter
// Size: 0x28 (Inherited: 0x28)
struct UWTLBPLibraryCharacter : UBlueprintFunctionLibrary {

	void TeleportCharacterToRandomPointInRange(struct AWTLCharacter* Character, struct FVector OriginLocation, float MinRange, float MaxRange, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.TeleportCharacterToRandomPointInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1789c40
	void TeleportCharacterToRandomPointArray(struct AWTLCharacter* Character, struct TArray<struct FVector> Locations, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.TeleportCharacterToRandomPointArray // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1789ef0
	void TeleportCharacterToPoint(struct AWTLCharacter* Character, struct FVector Location, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.TeleportCharacterToPoint // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x178a100
	void TakeItemInContainerFromCharacter(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.TakeItemInContainerFromCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1784480
	void TakeItemInArms(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, char SlotNumber, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.TakeItemInArms // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1782480
	void TakeItemFromCharacter(struct AWTLCharacter* Character, struct TArray<struct FWTLBPIdentityItemType> Items, bool CheckInContainers, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.TakeItemFromCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17881b0
	void TakeArtefactWithInteactiveObjectIDFromCharacter(struct AWTLCharacter* Character, int32_t ArtefactID, int32_t InteractiveObjectID, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.TakeArtefactWithInteactiveObjectIDFromCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17872c0
	void TakeAllItemsFromCharacter(struct AWTLCharacter* Character, struct TArray<struct FWTLBPIdentityItemType> Items, bool CheckInContainers); // Function WTL.WTLBPLibraryCharacter.TakeAllItemsFromCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1787c50
	void SwitchCharacterSex(struct AWTLCharacter* Character, int32_t ArtefactID, int32_t InteractiveObjectID, enum class EWTLSex& Result); // Function WTL.WTLBPLibraryCharacter.SwitchCharacterSex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1786330
	void SwitchCharacterFaction(struct AWTLCharacter* Character, enum class EWTLFaction& Result); // Function WTL.WTLBPLibraryCharacter.SwitchCharacterFaction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1783be0
	void SetCharacterThirstValue(struct AWTLCharacter* Character, char Value); // Function WTL.WTLBPLibraryCharacter.SetCharacterThirstValue // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1780fd0
	void SetCharacterReputation(struct AWTLCharacter* Character, char Reputation, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.SetCharacterReputation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1783a20
	void SetCharacterHungerValue(struct AWTLCharacter* Character, char Value); // Function WTL.WTLBPLibraryCharacter.SetCharacterHungerValue // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1780fd0
	void RecoverCharacterStaminaByPercent(struct AWTLCharacter* Character, float PercentValue); // Function WTL.WTLBPLibraryCharacter.RecoverCharacterStaminaByPercent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178a2b0
	void RecoverCharacterStamina(struct AWTLCharacter* Character, float Value); // Function WTL.WTLBPLibraryCharacter.RecoverCharacterStamina // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178a2b0
	void KillCharacter(struct AWTLCharacter* Character, struct UDamageType* DamageTypeClass); // Function WTL.WTLBPLibraryCharacter.KillCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178b020
	void IsPointNearLocalCharacter(struct UObject* WorldContextObject, struct FVector Position, float MaxDistance, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.IsPointNearLocalCharacter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1781360
	bool IsPlayedCurrentEmotion(struct AWTLCharacter* Character, int32_t EmotionTypeID, int32_t EmotionID); // Function WTL.WTLBPLibraryCharacter.IsPlayedCurrentEmotion // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x17818d0
	bool IsCharacterRegularPlayer(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.IsCharacterRegularPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1787110
	bool IsCharacterModerator(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.IsCharacterModerator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1787030
	void IsCharacterHoldingBreath(struct AWTLCharacter* Character, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.IsCharacterHoldingBreath // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	bool IsCharacterAdministator(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.IsCharacterAdministator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1786f50
	void IsActorNearLocalCharacter(struct AActor* Actor, float MaxDistance, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.IsActorNearLocalCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1781120
	void InstallPDAModule(struct AWTLCharacter* Character, int32_t ModuleID, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.InstallPDAModule // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1787aa0
	void IncCharacterThirstValue(struct AWTLCharacter* Character, int32_t Delta); // Function WTL.WTLBPLibraryCharacter.IncCharacterThirstValue // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1780e90
	void IncCharacterHungerValue(struct AWTLCharacter* Character, int32_t Delta); // Function WTL.WTLBPLibraryCharacter.IncCharacterHungerValue // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1780e90
	void HealCharacterByPercentRet(struct AWTLCharacter* Character, float PercentValue, float& RestoredHealth); // Function WTL.WTLBPLibraryCharacter.HealCharacterByPercentRet // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x178ae50
	void HealCharacterByPercent(struct AWTLCharacter* Character, float PercentValue); // Function WTL.WTLBPLibraryCharacter.HealCharacterByPercent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178a2b0
	void HealCharacter(struct AWTLCharacter* Character, float Value); // Function WTL.WTLBPLibraryCharacter.HealCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178a2b0
	void GiveExperienceToCharacter(struct AWTLCharacter* Character, int32_t ExperienceAmount); // Function WTL.WTLBPLibraryCharacter.GiveExperienceToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1784920
	struct AWTLCharacter* GetLocalCharacter(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCharacter.GetLocalCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1781800
	float GetDistanceToLocalCharacter(struct UObject* WorldContextObject, struct FVector Position); // Function WTL.WTLBPLibraryCharacter.GetDistanceToLocalCharacter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x17815d0
	char GetCharacterStrength(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterStrength // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17860c0
	float GetCharacterStaminaValue(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterStaminaValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x178a660
	float GetCharacterStaminaPercent(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterStaminaPercent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x178a400
	char GetCharacterStamina(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterStamina // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1785be0
	struct TArray<struct AWTLCharacter*> GetCharactersInVolume(struct UObject* WorldContextObject, struct UStaticMeshComponent* Volume); // Function WTL.WTLBPLibraryCharacter.GetCharactersInVolume // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x178d750
	struct TArray<struct AWTLCharacter*> GetCharactersInRange(struct UObject* WorldContextObject, struct FVector Origin, float Range); // Function WTL.WTLBPLibraryCharacter.GetCharactersInRange // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x178da30
	enum class EWTLSex GetCharacterSex(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterSex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1786750
	float GetCharacterRepurtationPercent(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterRepurtationPercent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1784f60
	char GetCharacterRepurtation(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterRepurtation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17851f0
	enum class EWTLPlayerType GetCharacterPlayerType(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterPlayerType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17871f0
	float GetCharacterParameterValue(struct AWTLCharacter* Character, enum class EWTLCharacterParameter Parameter); // Function WTL.WTLBPLibraryCharacter.GetCharacterParameterValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1784e00
	struct FString GetCharacterName(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1786c40
	char GetCharacterLevel(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17869f0
	int32_t GetCharacterInventoryWeight(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterInventoryWeight // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1784190
	char GetCharacterIntelligence(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterIntelligence // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1785700
	float GetCharacterHealthValue(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterHealthValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x178ab80
	float GetCharacterHealthPercent(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterHealthPercent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x178a8b0
	char GetCharacterFortune(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterFortune // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1785490
	enum class EWTLFaction GetCharacterFaction(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterFaction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1783ef0
	float GetCharacterEffectValue(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLBPLibraryCharacter.GetCharacterEffectValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x178d450
	char GetCharacterDexterity(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterDexterity // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1785e50
	void GetCharacterClanMemberType(struct AWTLCharacter* Character, enum class EWTLClanMemberType& Result); // Function WTL.WTLBPLibraryCharacter.GetCharacterClanMemberType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1783590
	char GetCharacterAccuracy(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.GetCharacterAccuracy // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1785970
	void DecrementInventoryItem(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, bool CheckInContainers, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.DecrementInventoryItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1787e80
	void DecrementCharacterStaminaByPercent(struct AWTLCharacter* Character, float PercentValue); // Function WTL.WTLBPLibraryCharacter.DecrementCharacterStaminaByPercent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178a2b0
	void DecrementCharacterStamina(struct AWTLCharacter* Character, float Value); // Function WTL.WTLBPLibraryCharacter.DecrementCharacterStamina // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178a2b0
	void DecrementCharactersHealthToPercentInRange(struct UObject* WorldContextObject, struct FVector Origin, float Range, float HealthPercent, bool KillIfLessOrEqual, struct UDamageType* DamageTypeClass, struct AController* EventInstigator, struct AActor* DamageCauser); // Function WTL.WTLBPLibraryCharacter.DecrementCharactersHealthToPercentInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x178b170
	void DecrementCharacterHealthToPercent(struct AWTLCharacter* Character, float HealthPercent, bool KillIfLessOrEqual, struct UDamageType* DamageTypeClass, struct AController* EventInstigator, struct AActor* DamageCauser); // Function WTL.WTLBPLibraryCharacter.DecrementCharacterHealthToPercent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178b5e0
	void ClearCameraLimits(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.ClearCameraLimits // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x17809a0
	void CheckCharacterHaveEnoughAvailableInventorySlots(struct AWTLCharacter* Character, int32_t Count, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.CheckCharacterHaveEnoughAvailableInventorySlots // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1781ee0
	void CheckCharacterHaveArtefactWithInteactiveObjectID(struct AWTLCharacter* Character, int32_t ArtefactID, int32_t InteractiveObjectID, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.CheckCharacterHaveArtefactWithInteactiveObjectID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17874f0
	void CharacterTravel(struct AWTLCharacter* Character, int32_t LocationID, int32_t PortalID, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.CharacterTravel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1782240
	void CharacterShowNote(struct AWTLCharacter* Character, struct FText& NoteName, int32_t NoteID); // Function WTL.WTLBPLibraryCharacter.CharacterShowNote // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1780c70
	char CharacterRandomDropItem(struct AWTLCharacter* Character, struct FVector Location); // Function WTL.WTLBPLibraryCharacter.CharacterRandomDropItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1784ca0
	void CharacterLeaveClan(struct AWTLCharacter* Character, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.CharacterLeaveClan // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17838e0
	bool CharacterIsInvulnerable(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.CharacterIsInvulnerable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x17899d0
	bool CharacterHaveEquipedDevice(struct AWTLCharacter* Character, int32_t StuffID); // Function WTL.WTLBPLibraryCharacter.CharacterHaveEquipedDevice // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1783200
	void CharacterHaveAnyItemsExcept(struct AWTLCharacter* Character, struct TArray<struct FWTLBPIdentityItemType> AllowedItems, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.CharacterHaveAnyItemsExcept // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1789370
	void CharacterHaveAnyItemOfTypeExcept(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, struct TArray<int32_t> ExceptIDList, bool CheckInContainers, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.CharacterHaveAnyItemOfTypeExcept // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1788440
	void CharacterHaveAnyItemFromList(struct AWTLCharacter* Character, struct TArray<struct FWTLBPIdentityItemType> Items, bool CheckInContainers, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.CharacterHaveAnyItemFromList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1788d70
	void CharacterHaveAllItemsFromList(struct AWTLCharacter* Character, struct TArray<struct FWTLBPIdentityItemType> Items, bool CheckInContainers, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCharacter.CharacterHaveAllItemsFromList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1788770
	bool CharacterHaveActiveNDPDetector(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.CharacterHaveActiveNDPDetector // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1782cc0
	bool CharacterHaveActiveMetalDetector(struct AWTLCharacter* Character); // Function WTL.WTLBPLibraryCharacter.CharacterHaveActiveMetalDetector // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1782a60
	bool CharacterHaveActiveEquipment(struct AWTLCharacter* Character, int32_t StuffID); // Function WTL.WTLBPLibraryCharacter.CharacterHaveActiveEquipment // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1782f20
	void BeginInformationDialog(struct AWTLCharacter* Character, int32_t InformationDialogID, struct FText Title); // Function WTL.WTLBPLibraryCharacter.BeginInformationDialog // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1781ab0
	void AssignItemToFastAccessSlot(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, char SlotNumber, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.AssignItemToFastAccessSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1782780
	void ApplyRandomPercentDamage(struct AWTLCharacter* Character, float MinPercent, float MaxPercent, struct UDamageType* DamageTypeClass, struct AController* EventInstigator, struct AActor* DamageCauser); // Function WTL.WTLBPLibraryCharacter.ApplyRandomPercentDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x178b940
	void ApplyRadialDamage(struct UObject* WorldContextObject, float DamageValue, struct FVector DamageOrigin, float DamageRadius, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*> IgnoreActors, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x178bc90
	void ApplyHearingDamageToCharacter(struct AWTLCharacter* Character, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.ApplyHearingDamageToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	void ApplyCameraLimits(struct AWTLCharacter* Character, struct FWTLCameraLimits CameraLimits, struct FRotator& ViewOrigin); // Function WTL.WTLBPLibraryCharacter.ApplyCameraLimits // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1780a70
	void AddEffectToCharacterWithFalloff(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType, float EffectValue, struct FVector Origin, float FalloffRadius, float MinEffectValue, enum class EWTLBPActionResult& Result, bool UseStuffProtection, float MaxEffectValue); // Function WTL.WTLBPLibraryCharacter.AddEffectToCharacterWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x178c8f0
	void AddEffectToCharactersWithFalloff(struct TArray<struct AWTLCharacter*> Characters, enum class EWTLCharacterEffectType EffectType, float EffectValue, struct FVector Origin, float FalloffRadius, float MinEffectValue, enum class EWTLBPActionResult& Result, bool UseStuffProtection, float MaxEffectValue); // Function WTL.WTLBPLibraryCharacter.AddEffectToCharactersWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x178c3f0
	void AddEffectToCharacters(struct TArray<struct AWTLCharacter*> Characters, enum class EWTLCharacterEffectType EffectType, float EffectValue, enum class EWTLBPActionResult& Result, bool UseStuffProtection, float MaxEffectValue); // Function WTL.WTLBPLibraryCharacter.AddEffectToCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x178cd90
	void AddEffectToCharacterOnNextSpawn(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType, float EffectValue, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCharacter.AddEffectToCharacterOnNextSpawn // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x178c1c0
	void AddEffectToCharacter(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType, float EffectValue, enum class EWTLBPActionResult& Result, bool UseStuffProtection, float MaxEffectValue); // Function WTL.WTLBPLibraryCharacter.AddEffectToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x178d110
};

// Class WTL.WTLBPLibraryCommon
// Size: 0x28 (Inherited: 0x28)
struct UWTLBPLibraryCommon : UBlueprintFunctionLibrary {

	void WTLSwitchHasAuthority(struct UObject* WorldContextObject, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.WTLSwitchHasAuthority // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179b810
	void WriteLog(struct UObject* WorldContextObject, enum class EWTLBPLogVerbosity Verbosity, struct FString Text, struct FString MethodName); // Function WTL.WTLBPLibraryCommon.WriteLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179be10
	void UpdateReflectionSphere(struct UObject* WorldContextObject, struct UReflectionCaptureComponent* CaptureComponent); // Function WTL.WTLBPLibraryCommon.UpdateReflectionSphere // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179a400
	void TakeMoneyFromCharacter(struct AWTLCharacter* Character, int32_t MoneyAmount, struct FString Reason, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCommon.TakeMoneyFromCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1798740
	void SwitchIsValidActor(struct AActor* Actor, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.SwitchIsValidActor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179b980
	void SpawnWeaponProjectile(struct UObject* WorldContextObject, struct APawn* Instigator, struct AActor* Owner, int32_t WeaponID, int32_t AmmoID, struct FTransform SpawnTransform, float MinDamage, float MaxDamage); // Function WTL.WTLBPLibraryCommon.SpawnWeaponProjectile // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1796e40
	struct AWTLMonsterPawn* SpawnMonster(struct UObject* WorldContextObject, struct AWTLMonsterPawn* MonsterClass, struct AActor* Owner, int32_t MinLevel, int32_t MaxLevel, struct FTransform Transform, struct FWTLMonsterBurst Burst, enum class EWTLFaction MonsterFaction, bool ReactionOnElectronicBait, float LifespanAfterDeath, bool IsSpawnDefaultController); // Function WTL.WTLBPLibraryCommon.SpawnMonster // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1799a60
	struct AWTLEnemyNPC* SpawnEnemyNPC(struct UObject* WorldContextObject, struct AWTLEnemyNPC* NPCClass, struct AActor* Owner, int32_t MinLevel, int32_t MaxLevel, struct FTransform Transform); // Function WTL.WTLBPLibraryCommon.SpawnEnemyNPC // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1798ac0
	void SpawnAirDrop(struct UObject* WorldContextObject, struct FVector SpawnLocation, int32_t DropID, int32_t MaxUseCount, float LifeSpan, bool CanSpawnGuard, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.SpawnAirDrop // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1791200
	struct AWTLAIFlying* SpawnAIFlying(struct UObject* WorldContextObject, struct AWTLAIFlying* AIFlyingClass, struct AActor* Owner, int32_t MinLevel, int32_t MaxLevel, struct FTransform Transform, struct FWTLMonsterBurst Burst, bool ReactionOnElectronicBait, float LifespanAfterDeath); // Function WTL.WTLBPLibraryCommon.SpawnAIFlying // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1798ea0
	struct AWTLAICharacter* SpawnAICharacter(struct UObject* WorldContextObject, struct AWTLAICharacter* AICharacterClass, struct AActor* Owner, int32_t MinLevel, int32_t MaxLevel, struct FTransform Transform, struct FWTLMonsterBurst Burst, bool ReactionOnElectronicBait, float LifespanAfterDeath); // Function WTL.WTLBPLibraryCommon.SpawnAICharacter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1798ea0
	void ShowItemStoreOverlay(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.ShowItemStoreOverlay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1798980
	void SetServerEventInfo(struct UObject* WorldContextObject, enum class EWTLServerEventType Type, float MinutesToEvent, struct FString Comment); // Function WTL.WTLBPLibraryCommon.SetServerEventInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1796150
	void SendDedicatedServerMessage(struct UObject* WorldContextObject, int32_t LocationID, struct FString MessageType, struct FString MessageData); // Function WTL.WTLBPLibraryCommon.SendDedicatedServerMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1793790
	void ReportCrime(struct UObject* WorldContextObject, struct APawn* Instigator, struct APawn* Victim, bool bIsLethal); // Function WTL.WTLBPLibraryCommon.ReportCrime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179a6a0
	struct USkeletalMesh* MergeMeshes(struct FSkeletalMeshMergeParams& Params); // Function WTL.WTLBPLibraryCommon.MergeMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1793b90
	struct AWTLMonsterPawn* K2_SpawnMonster(struct UObject* WorldContextObject, struct AWTLMonsterPawn* MonsterClass, struct AActor* Owner, int32_t MinLevel, int32_t MaxLevel, struct FTransform Transform, struct FWTLMonsterBurst Burst, enum class EWTLFaction MonsterFaction, bool ReactionOnElectronicBait, float LifespanAfterDeath, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.K2_SpawnMonster // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x17993e0
	bool IsWithEditor(); // Function WTL.WTLBPLibraryCommon.IsWithEditor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0xe5dd90
	bool IsValidVectorAI(struct FVector Vector); // Function WTL.WTLBPLibraryCommon.IsValidVectorAI // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x179bc40
	bool IsValidActor(struct AActor* Actor); // Function WTL.WTLBPLibraryCommon.IsValidActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x179bd40
	void IsDay(struct UObject* WorldContextObject, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.IsDay // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179a210
	void HasItemInCharacterInventoryResult(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCommon.HasItemInCharacterInventoryResult // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1797870
	bool HasItemInCharacterInventory(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID); // Function WTL.WTLBPLibraryCommon.HasItemInCharacterInventory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1797ad0
	void GiveMoneyToCharacter(struct AWTLCharacter* Character, int32_t MoneyAmount, struct FString Reason, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCommon.GiveMoneyToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1798740
	void GiveItemToCharacterEx(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, int32_t Condition, char CustomizationScalar, char CustomizationColor, struct FString CustomizationName, struct FString ModificationData, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCommon.GiveItemToCharacterEx // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1797ec0
	void GiveItemToCharacter(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, int32_t Condition, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCommon.GiveItemToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1798410
	void GiveItemsToCharacter(struct AWTLCharacter* Character, struct TArray<struct FWTLGiveItemInfo> ItemsToGive, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryCommon.GiveItemsToCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1797cb0
	struct FWTLSettings GetSettings(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.GetSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1791730
	float GetServerTimeSeconds(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.GetServerTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1793a80
	struct FVector GetRandomPointInRange(struct UObject* WorldContextObject, struct FVector OriginLocation, float MinRange, float MaxRange); // Function WTL.WTLBPLibraryCommon.GetRandomPointInRange // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1793ed0
	void GetRandomCharactersInRange(struct UObject* WorldContextObject, struct FVector ObserverLocation, struct FVector ObserverForwardVector, enum class EWTLFaction ObserverFaction, float InRange, bool AsEnemy, float HalfAnglePitch, float HalfAngleYaw, int32_t MaxCount, struct TArray<struct AWTLCharacter*>& ResultList, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetRandomCharactersInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1795b60
	float GetMouseSensitivityInMiniGames(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.GetMouseSensitivityInMiniGames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1791610
	int32_t GetMonsterLevelByCharactersInfo(struct UObject* WorldContextObject, int32_t NumCharactersToIncreaseLevel, bool ApplyAverageLevel, int32_t MinLevel, int32_t MaxLevel, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetMonsterLevelByCharactersInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1790ca0
	struct FWTLMonsterItemData GetMonsterInfo_LoadSynch(struct UObject* WorldContextObject, int32_t MonsterID, struct AWTLMonsterPawn*& MonsterClass, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetMonsterInfo_LoadSynch // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1794260
	struct FWTLMonsterItemData GetMonsterInfo(struct UObject* WorldContextObject, int32_t MonsterID, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetMonsterInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17949a0
	float GetLocationSkyDayTime(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.GetLocationSkyDayTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1793da0
	void GetListPlaceableStuffInRange(struct UObject* WorldContextObject, struct FVector ObserverLocation, struct FVector ObserverForwardVector, enum class EWTLFaction ObserverFaction, float InRange, bool AsEnemy, float HalfAnglePitch, float HalfAngleYaw, struct TArray<int32_t> ListIgnoreID, struct TArray<struct AWTLPlaceableStuff*>& ResultList, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetListPlaceableStuffInRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1795120
	void GetListMonstersInRange(struct UObject* WorldContextObject, struct FVector ObserverLocation, struct FVector ObserverForwardVector, enum class EWTLFaction ObserverFaction, float InRange, bool AsEnemy, float HalfAnglePitch, float HalfAngleYaw, struct TArray<struct AWTLMonsterPawn*>& ResultList, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetListMonstersInRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1794bb0
	void GetListCharactersInRange(struct UObject* WorldContextObject, struct FVector ObserverLocation, struct FVector ObserverForwardVector, enum class EWTLFaction ObserverFaction, float InRange, bool AsEnemy, float HalfAnglePitch, float HalfAngleYaw, struct TArray<struct AWTLCharacter*>& ResultList, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetListCharactersInRange // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1794bb0
	struct FKey GetKeyFromAction(struct FName ActionName); // Function WTL.WTLBPLibraryCommon.GetKeyFromAction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1792370
	struct FString GetItemDisplayName(struct UGameInstance* GameInstance, enum class EWTLItemType ItemType, int32_t ItemTypeID); // Function WTL.WTLBPLibraryCommon.GetItemDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1797600
	struct FInputAxisKeyMapping GetInputAxisKeyMappingFromKey(struct FKey Key); // Function WTL.WTLBPLibraryCommon.GetInputAxisKeyMappingFromKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1792830
	struct FInputActionKeyMapping GetInputActionKeyMappingFromKey(struct FKey Key); // Function WTL.WTLBPLibraryCommon.GetInputActionKeyMappingFromKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1792540
	float GetCurrentLevelTime(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.GetCurrentLevelTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x179a0a0
	struct AWTLCharacter* GetClosestCharacterForMonster(struct UObject* WorldContextObject, struct AWTLMonsterPawn* Monster, struct TArray<struct AActor*> CharacterList, struct FVector ObserverLocation, enum class EWTLBPCheckResult& Result, float InRadiusSquare); // Function WTL.WTLBPLibraryCommon.GetClosestCharacterForMonster // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1796870
	struct AActor* GetClosestAITargetInterfaceForMonster(struct UObject* WorldContextObject, struct TArray<struct AActor*> ActorList, struct FVector ObserverLocation, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetClosestAITargetInterfaceForMonster // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x17965b0
	void GetAllCharactersForMonster(struct UObject* WorldContextObject, struct TArray<struct AWTLCharacter*>& Characters, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.GetAllCharactersForMonster // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17963c0
	struct TArray<struct AActor*> GetActorsInRadius(struct UObject* WorldContextObject, struct UObject* ActorClass, struct FVector Origin, float Distance); // Function WTL.WTLBPLibraryCommon.GetActorsInRadius // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1797310
	float DistanceSSE2D(struct FVector From, struct FVector To); // Function WTL.WTLBPLibraryCommon.DistanceSSE2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x179a900
	float DistanceSSE(struct FVector From, struct FVector To); // Function WTL.WTLBPLibraryCommon.DistanceSSE // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x179aa70
	void DelayedSpawnActor(struct UObject* WorldContextObject, struct FWTLDelayedSpawnActorInfo Info); // Function WTL.WTLBPLibraryCommon.DelayedSpawnActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1793190
	void DelayedDamage(struct UObject* WorldContextObject, struct FWTLDelayedDamageInfo Info); // Function WTL.WTLBPLibraryCommon.DelayedDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1793450
	void ClientShowWarningText(struct AWTLCharacter* Character, struct FText Text); // Function WTL.WTLBPLibraryCommon.ClientShowWarningText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179b5e0
	void ClientShowTutorialMessagesByIDs(struct AWTLCharacter* Character, struct TArray<int32_t>& TutorialMessagesIDs); // Function WTL.WTLBPLibraryCommon.ClientShowTutorialMessagesByIDs // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179b1c0
	void ClientShowTutorialMessages(struct AWTLCharacter* Character, struct TArray<enum class EWTLTutorialMessage>& TutorialMessages); // Function WTL.WTLBPLibraryCommon.ClientShowTutorialMessages // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179ae10
	void ClientShowTutorialMessageByID(struct AWTLCharacter* Character, int32_t TutorialMessageID); // Function WTL.WTLBPLibraryCommon.ClientShowTutorialMessageByID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179b440
	void ClientShowTutorialMessage(struct AWTLCharacter* Character, enum class EWTLTutorialMessage TutorialMessage); // Function WTL.WTLBPLibraryCommon.ClientShowTutorialMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179b020
	void ClientDestoryActor(struct AActor* Actor); // Function WTL.WTLBPLibraryCommon.ClientDestoryActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x179ac00
	void CheckNPC(struct UObject* WorldContextObject); // Function WTL.WTLBPLibraryCommon.CheckNPC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x17941a0
	struct AWTLControlledMonsterPawn* CharactersInToAControllMonster(struct UObject* WorldContextObject, struct AWTLCharacter* Character, int32_t MonsterID, int32_t MonsterLevel, float MonsterLifeSpan, enum class EWTLFaction MonsterFaction, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.CharactersInToAControllMonster // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1795780
	struct FVector CalculationOfTheLead(struct FVector SelfLocation, struct FVector TargetLocation, struct FVector TargetVelocity, float ProjectileSpeed); // Function WTL.WTLBPLibraryCommon.CalculationOfTheLead // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1792e20
	void BranchMonsterCanUseBrains(struct APawn* Pawn, enum class EWTLBPCheckResult& Result); // Function WTL.WTLBPLibraryCommon.BranchMonsterCanUseBrains // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1792af0
};

// Class WTL.WTLBPLibraryQuestSystem
// Size: 0x28 (Inherited: 0x28)
struct UWTLBPLibraryQuestSystem : UBlueprintFunctionLibrary {

	void SetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState State, enum class EWTLNPCActionResult& Result); // Function WTL.WTLBPLibraryQuestSystem.SetQuestState // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17a0d50
	void SetCharacterQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState State, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryQuestSystem.SetCharacterQuestState // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17a1150
	void SetCharacterQuestProgressBits(struct AWTLCharacter* Character, int32_t QuestID, int32_t BitMask, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryQuestSystem.SetCharacterQuestProgressBits // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179f7b0
	void SetCharacterQuestProgress(struct AWTLCharacter* Character, int32_t QuestID, char Progress1, char Progress2, char Progress3, char Progress4, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryQuestSystem.SetCharacterQuestProgress // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17a07c0
	void IsCharacterQuestInState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState QuestState, bool& Result); // Function WTL.WTLBPLibraryQuestSystem.IsCharacterQuestInState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179ecc0
	void IncrementCharacterQuestProgress(struct AWTLCharacter* Character, int32_t QuestID, char Progress1Delta, char Progress2Delta, char Progress3Delta, char Progress4Delta, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryQuestSystem.IncrementCharacterQuestProgress // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17a07c0
	void GetCharacterQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState& QuestState); // Function WTL.WTLBPLibraryQuestSystem.GetCharacterQuestState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179f280
	void GetCharacterQuestProgressDescription(struct AWTLCharacter* Character, int32_t QuestID, struct TArray<struct FWTLMonsterKillRequirementState>& MonsterKills, struct TArray<struct FWTLEnemyNPCKillRequirementState>& EnemyNPCKills, struct TArray<struct FWTLCustomQuestRequirementState>& CustomRequirements, enum class EWTLBPActionResult& Result); // Function WTL.WTLBPLibraryQuestSystem.GetCharacterQuestProgressDescription // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17a0190
	void GetCharacterQuestProgress(struct AWTLCharacter* Character, int32_t QuestID, char ProgressNumber, char& ProgressValue); // Function WTL.WTLBPLibraryQuestSystem.GetCharacterQuestProgress // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179fbb0
	void CharacterHasAvailableInventorySlotsForCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLBPLibraryQuestSystem.CharacterHasAvailableInventorySlotsForCompleteQuest // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179dc30
	void CharacterHasAndReturnAvailableInventorySlotsForCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result, int32_t& InventoryRequiredSlotCount, int32_t& InventoryAvailableSlotCount); // Function WTL.WTLBPLibraryQuestSystem.CharacterHasAndReturnAvailableInventorySlotsForCompleteQuest // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179d730
	void CharacterCanTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLBPLibraryQuestSystem.CharacterCanTakeQuest // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179e3b0
	void CharacterCanCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLBPLibraryQuestSystem.CharacterCanCompleteQuest // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x179dff0
};

// Class WTL.WTLBTService_AICheckForAttack
// Size: 0x98 (Inherited: 0x98)
struct UWTLBTService_AICheckForAttack : UBTService_BlackboardBase {
};

// Class WTL.WTLBTService_BlueprintBase
// Size: 0x98 (Inherited: 0x98)
struct UWTLBTService_BlueprintBase : UBTService_BlueprintBase {
};

// Class WTL.WTLBTService_CheckEnemy
// Size: 0xb0 (Inherited: 0x98)
struct UWTLBTService_CheckEnemy : UBTService_BlackboardBase {
	char pad_98[0x14]; // 0x98(0x14)
	enum class EWTLMonsterState SetState; // 0xac(0x01)
	bool ClearKeyVisibleEnemy; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)
};

// Class WTL.WTLBTService_CheckForFarAttack
// Size: 0x98 (Inherited: 0x98)
struct UWTLBTService_CheckForFarAttack : UBTService_BlackboardBase {
};

// Class WTL.WTLBTService_CheckForJump
// Size: 0xa0 (Inherited: 0x98)
struct UWTLBTService_CheckForJump : UBTService_BlackboardBase {
	enum class EWTLMonsterState SetState; // 0x98(0x01)
	enum class EWTLMonsterStateFollowTarget SetStateFollowTarget; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
};

// Class WTL.WTLBTService_Enemy_Sensing
// Size: 0xe0 (Inherited: 0x70)
struct UWTLBTService_Enemy_Sensing : UBTService {
	bool bSensePlayers; // 0x70(0x01)
	bool bSenseOtherEnemies; // 0x71(0x01)
	bool bHearNoises; // 0x72(0x01)
	bool bInterruptCurrentTaskOnSpotted; // 0x73(0x01)
	float SightRadius; // 0x74(0x04)
	float PeripheralVisionAngle; // 0x78(0x04)
	float HearingMaxSoundAge; // 0x7c(0x04)
	float HearingThreshold; // 0x80(0x04)
	float LOSHearingThreshold; // 0x84(0x04)
	enum class ECollisionChannel SoundOcclusionChannel; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FBlackboardKeySelector TargetSpottedKey; // 0x90(0x28)
	struct FBlackboardKeySelector RemoteLocationListenedKey; // 0xb8(0x28)
};

// Class WTL.WTLBTService_FrightRadius
// Size: 0xb0 (Inherited: 0x98)
struct UWTLBTService_FrightRadius : UBTService_BlackboardBase {
	enum class EWTLMonsterState SetState; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float ApplyRadius; // 0x9c(0x04)
	float DelayExecution; // 0xa0(0x04)
	float RandomDelayExecution; // 0xa4(0x04)
	float m_CurrentDelayExecution; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class WTL.WTLBTService_MonsterMovementMode
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTService_MonsterMovementMode : UBTService {
	enum class EWTLMonsterMovementMode MovementMode; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class WTL.WTLBTService_SightAI
// Size: 0xa0 (Inherited: 0x98)
struct UWTLBTService_SightAI : UBTService_BlackboardBase {
	enum class EWTLMonsterState SetState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class WTL.WTLBTService_StateIfHealthLess
// Size: 0xa8 (Inherited: 0x98)
struct UWTLBTService_StateIfHealthLess : UBTService_BlackboardBase {
	enum class EWTLMonsterState SetState; // 0x98(0x01)
	enum class EWTMonsterSecondaryState SetSecondaryState; // 0x99(0x01)
	char pad_9A[0x2]; // 0x9a(0x02)
	float HealthPercent; // 0x9c(0x04)
	bool InverseCondition; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class WTL.WTLBTTask_ActionFromBlackBoard
// Size: 0x98 (Inherited: 0x98)
struct UWTLBTTask_ActionFromBlackBoard : UBTTask_BlackboardBase {
};

// Class WTL.WTLBTTask_AvailableAction
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_AvailableAction : UBTTaskNode {
	bool bExceptMainAction; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class WTL.WTLBTTask_BlueprintBase
// Size: 0xa8 (Inherited: 0xa8)
struct UWTLBTTask_BlueprintBase : UBTTask_BlueprintBase {
};

// Class WTL.WTLBTTask_EnemyNPC_MoveTo
// Size: 0xd8 (Inherited: 0x98)
struct UWTLBTTask_EnemyNPC_MoveTo : UBTTask_BlackboardBase {
	float AcceptableRadius; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct UNavigationQueryFilter* FilterClass; // 0xa0(0x08)
	float ObservedBlackboardValueTolerance; // 0xa8(0x04)
	char bObserveBlackboardValue : 1; // 0xac(0x01)
	char bAllowStrafe : 1; // 0xac(0x01)
	char bAllowPartialPath : 1; // 0xac(0x01)
	char bTrackMovingGoal : 1; // 0xac(0x01)
	char bProjectGoalLocation : 1; // 0xac(0x01)
	char bReachTestIncludesAgentRadius : 1; // 0xac(0x01)
	char bReachTestIncludesGoalRadius : 1; // 0xac(0x01)
	char bStopOnOverlap : 1; // 0xac(0x01)
	char bStopOnOverlapNeedsUpdate : 1; // 0xad(0x01)
	char pad_AD_1 : 7; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)
	struct FBlackboardKeySelector AcceptableRadiusKey; // 0xb0(0x28)
};

// Class WTL.WTLBTTask_FindClosestMonster
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_FindClosestMonster : UBTTaskNode {
	float ApplyRadius; // 0x70(0x04)
	bool EdibleForMonster; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
};

// Class WTL.WTLBTTask_FrightRadius
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_FrightRadius : UBTTaskNode {
	float ApplyRadius; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class WTL.WTLBTTask_Idle
// Size: 0x70 (Inherited: 0x70)
struct UWTLBTTask_Idle : UBTTaskNode {
};

// Class WTL.WTLBTTask_MonsterAction
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_MonsterAction : UBTTaskNode {
	enum class EWTLMonsterActionType Action; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class WTL.WTLBTTask_MoveDirectlyToward
// Size: 0xe8 (Inherited: 0xb8)
struct UWTLBTTask_MoveDirectlyToward : UBTTask_MoveDirectlyToward {
	bool bUseAcceptableRadiusFromBlackboard; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FBlackboardKeySelector AcceptableRadiusBlackboardKey; // 0xc0(0x28)
};

// Class WTL.WTLBTTask_RunBehaviorStealth
// Size: 0x88 (Inherited: 0x78)
struct UWTLBTTask_RunBehaviorStealth : UBTTask_RunBehavior {
	struct TArray<enum class EWTLMonsterState> StatesForExecute; // 0x78(0x10)
};

// Class WTL.WTLBTTask_SetAIState
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_SetAIState : UBTTaskNode {
	enum class EWTLMonsterState SetState; // 0x70(0x01)
	enum class EWTMonsterSecondaryState SetSecondaryState; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)
};

// Class WTL.WTLBTTask_SetMovementMode
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_SetMovementMode : UBTTaskNode {
	enum class EWTLMonsterMovementMode MovementMode; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class WTL.WTLBTTask_SetStealthMode
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_SetStealthMode : UBTTaskNode {
	bool Value; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class WTL.WTLBTTask_WTLMoveTo
// Size: 0xe0 (Inherited: 0xb0)
struct UWTLBTTask_WTLMoveTo : UBTTask_MoveTo {
	bool bUseAcceptableRadiusFromBlackboard; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FBlackboardKeySelector AcceptableRadiusBlackboardKey; // 0xb8(0x28)
};

// Class WTL.WTLBulletHellBase
// Size: 0x440 (Inherited: 0x220)
struct AWTLBulletHellBase : AActor {
	char pad_220[0x100]; // 0x220(0x100)
	struct UProceduralMeshComponent* m_ProcMesh; // 0x320(0x08)
	bool UseBillboard; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct UMaterialInterface* Material; // 0x330(0x08)
	struct UStaticMesh* RenderMesh; // 0x338(0x08)
	struct UMaterialInterface* TailMaterial; // 0x340(0x08)
	bool AutoDestroy; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	int32_t AttackMode; // 0x34c(0x04)
	struct FVector SpawnAxisX; // 0x350(0x0c)
	float PhysicsFps; // 0x35c(0x04)
	float ServerStartDelay; // 0x360(0x04)
	float ClientStartDelay; // 0x364(0x04)
	float MeshUpdateRate; // 0x368(0x04)
	float LoopDuration; // 0x36c(0x04)
	float SpawnRate; // 0x370(0x04)
	struct FRotator RotateSpawnAxisX; // 0x374(0x0c)
	float SpawnCountBurst; // 0x380(0x04)
	bool IsLinearSpawn; // 0x384(0x01)
	char pad_385[0x3]; // 0x385(0x03)
	struct FVector2D BulletSpeed; // 0x388(0x08)
	struct FVector2D LifeTime; // 0x390(0x08)
	struct FVector2D BounceCount; // 0x398(0x08)
	bool OnlyNegativeZ; // 0x3a0(0x01)
	bool UseConeSpread; // 0x3a1(0x01)
	char pad_3A2[0x2]; // 0x3a2(0x02)
	struct FVector2D ConeSpread; // 0x3a4(0x08)
	struct FVector2D ConeSpreadRadius; // 0x3ac(0x08)
	struct FVector Drag; // 0x3b4(0x0c)
	struct FVector Gravity; // 0x3c0(0x0c)
	bool UseCurveBulletSpeed; // 0x3cc(0x01)
	char pad_3CD[0x3]; // 0x3cd(0x03)
	struct UCurveFloat* CurveBulletSpeed; // 0x3d0(0x08)
	bool UseCurveScaleLocation; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct UCurveVector* CurveScaleLocation; // 0x3e0(0x08)
	float CurveSpeedScale; // 0x3e8(0x04)
	bool UseTail; // 0x3ec(0x01)
	char pad_3ED[0x3]; // 0x3ed(0x03)
	float DistFromVelocity; // 0x3f0(0x04)
	struct FVector2D Damage; // 0x3f4(0x08)
	float CollisionTime; // 0x3fc(0x04)
	float SphereTraceRadius; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct TArray<enum class EObjectTypeQuery> CollisionTraceQuery; // 0x408(0x10)
	bool SpawnActorOnHit; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct AActor* SpawnActor; // 0x420(0x08)
	float DrawDebugTime; // 0x428(0x04)
	enum class EDrawDebugTrace ServerDrawDebugTrace; // 0x42c(0x01)
	enum class EDrawDebugTrace ClientDrawDebugTrace; // 0x42d(0x01)
	char pad_42E[0x2]; // 0x42e(0x02)
	float BulletRadius; // 0x430(0x04)
	float StartTime; // 0x434(0x04)
	char pad_438[0x8]; // 0x438(0x08)
};

// Class WTL.WTLBulletHellBillboardComponent
// Size: 0x480 (Inherited: 0x470)
struct UWTLBulletHellBillboardComponent : UMeshComponent {
	struct TArray<struct FWTLMaterialSpriteElement> Elements; // 0x468(0x10)

	void SetElements(struct TArray<struct FWTLMaterialSpriteElement>& NewElements); // Function WTL.WTLBulletHellBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17a40a0
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function WTL.WTLBulletHellBillboardComponent.AddElement // (Final|Native|Public|BlueprintCallable) // @ game+0x17a3ca0
};

// Class WTL.WTLBulletinBoard
// Size: 0x2d8 (Inherited: 0x220)
struct AWTLBulletinBoard : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	struct UStaticMeshComponent* Mesh; // 0x240(0x08)
	struct UStaticMeshComponent* BulletinMesh1; // 0x248(0x08)
	struct UStaticMeshComponent* BulletinMesh2; // 0x250(0x08)
	struct UStaticMeshComponent* BulletinMesh3; // 0x258(0x08)
	struct FVector Bulletin1CenterLocation; // 0x260(0x0c)
	struct FVector Bulletin2CenterLocation; // 0x26c(0x0c)
	struct FVector Bulletin3CenterLocation; // 0x278(0x0c)
	float BulletinHorizontalLocationDelta; // 0x284(0x04)
	float BulletinVerticalLocationDelta; // 0x288(0x04)
	float BulletinRotationDelta; // 0x28c(0x04)
	struct FVector BulletinOriginalScale; // 0x290(0x0c)
	float BulletinScaleDelta; // 0x29c(0x04)
	struct TArray<struct UMaterialInstance*> BulletinMaterials; // 0x2a0(0x10)
	struct TArray<int32_t> QuestList; // 0x2b0(0x10)
	enum class EWTLFaction Faction; // 0x2c0(0x01)
	bool m_IsActive; // 0x2c1(0x01)
	char pad_2C2[0x16]; // 0x2c2(0x16)

	void SetIsActive(bool Value); // Function WTL.WTLBulletinBoard.SetIsActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void OnRep_IsActive(); // Function WTL.WTLBulletinBoard.OnRep_IsActive // (Final|Native|Private) // @ game+0x17a5a70
	void OnIsActiveChanged(bool IsActive); // Function WTL.WTLBulletinBoard.OnIsActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool GetIsActive(); // Function WTL.WTLBulletinBoard.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a5a50
};

// Class WTL.WTLProjectile
// Size: 0x248 (Inherited: 0x220)
struct AWTLProjectile : AActor {
	struct USphereComponent* CollisionComp; // 0x220(0x08)
	struct UWTLProjectileMovementComponent* ProjectileMovement; // 0x228(0x08)
	enum class EProjectileType Type; // 0x230(0x01)
	bool bShowDebugInfo; // 0x231(0x01)
	bool bDrawAimingTrajectory; // 0x232(0x01)
	char pad_233[0x1]; // 0x233(0x01)
	struct FColor AimingTrajectoryColor; // 0x234(0x04)
	float AimingTrajectoryThickness; // 0x238(0x04)
	bool bDrawActualTrajectory; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float ActualTrajectoryThickness; // 0x240(0x04)
	float DebugInfoLifetime; // 0x244(0x04)
};

// Class WTL.WTLBulletProjectile
// Size: 0x338 (Inherited: 0x248)
struct AWTLBulletProjectile : AWTLProjectile {
	char pad_248[0xb1]; // 0x248(0xb1)
	bool CanRicochet; // 0x2f9(0x01)
	char RicochetChance; // 0x2fa(0x01)
	char MaxRicochetCount; // 0x2fb(0x01)
	float MinRicochetAngle; // 0x2fc(0x04)
	float MinRicochetVelocity; // 0x300(0x04)
	float MinRicochetVelocityDelta; // 0x304(0x04)
	float MaxRicochetVelocityDelta; // 0x308(0x04)
	float PenetrationEndRandomHalfCone; // 0x30c(0x04)
	float InitialDamage; // 0x310(0x04)
	bool bDrawHitPoints; // 0x314(0x01)
	char pad_315[0x3]; // 0x315(0x03)
	struct FColor HitPointsColor; // 0x318(0x04)
	bool bDrawPenetrationExitPoints; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	struct FColor PenetrationExitPointsColor; // 0x320(0x04)
	bool bDrawRicochetPoints; // 0x324(0x01)
	char pad_325[0x3]; // 0x325(0x03)
	struct FColor RicochetPointsColor; // 0x328(0x04)
	bool bDrawDestroyPoint; // 0x32c(0x01)
	char pad_32D[0x3]; // 0x32d(0x03)
	struct FColor DestroyPointColor; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)

	void OnProjectileBounce(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function WTL.WTLBulletProjectile.OnProjectileBounce // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x17a5d20
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLBulletProjectile.OnHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x17a5ef0
};

// Class WTL.WTLBulletTracer
// Size: 0x2b0 (Inherited: 0x220)
struct AWTLBulletTracer : AActor {
	char pad_220[0x60]; // 0x220(0x60)
	struct UWTLProjectileMovementComponent* ProjectileMovement; // 0x280(0x08)
	float InitialVelocity; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct UCurveFloat* VelocityCurve; // 0x290(0x08)
	struct UCurveFloat* GravityCurve; // 0x298(0x08)
	bool DrawDebugInfo; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float DebugInfoLifetime; // 0x2a4(0x04)
	float DebugInfoLineThickness; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)

	void OnTracerDestroyed(struct AActor* DestroyedActor); // Function WTL.WTLBulletTracer.OnTracerDestroyed // (Final|Native|Private) // @ game+0x17a6330
};

// Class WTL.WTLUsable
// Size: 0x3c0 (Inherited: 0x220)
struct AWTLUsable : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	int64_t m_ItemID; // 0x238(0x08)
	int16_t m_ItemTypeID; // 0x240(0x02)
	char pad_242[0x50]; // 0x242(0x50)
	bool m_bIsSnuggled; // 0x292(0x01)
	char pad_293[0x25]; // 0x293(0x25)
	float PauseBetweenUse; // 0x2b8(0x04)
	int32_t m_FastAccessSlotIndex; // 0x2bc(0x04)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)
	bool HideFastAccessSlots; // 0x2d0(0x01)
	char pad_2D1[0xf]; // 0x2d1(0x0f)
	struct FItemAnimationSet EquipSequenceSet; // 0x2e0(0x18)
	float EquipTimeWithoutAnimation; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct FItemAnimationSet UnequipSequenceSet; // 0x300(0x18)
	float UnequipTimeWithoutAnimation; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct UAnimationAsset* MaleIdleStateAnimation; // 0x320(0x08)
	struct UAnimationAsset* FemaleIdleStateAnimation; // 0x328(0x08)
	struct UAnimationAsset* MaleSnuggleAnimation; // 0x330(0x08)
	struct UAnimationAsset* FemaleSnuggleAnimation; // 0x338(0x08)
	struct UAimOffsetBlendSpace1D* MaleAimOffsetBlendSpace; // 0x340(0x08)
	struct UAimOffsetBlendSpace1D* FemaleAimOffsetBlendSpace; // 0x348(0x08)
	struct TArray<struct FItemAnimationSet> IdleSequenceSetArray; // 0x350(0x10)
	float IdleAnimationTimeoutMin; // 0x360(0x04)
	float IdleAnimationTimeoutMax; // 0x364(0x04)
	bool bCanBeSnuggled; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float SnuggleTraceRange; // 0x36c(0x04)
	struct TArray<float> AnimationFloatParameters; // 0x370(0x10)
	struct TArray<struct FVector> AnimationVectorParameters; // 0x380(0x10)
	struct TArray<float> FemaleAnimationFloatParameters; // 0x390(0x10)
	struct TArray<struct FVector> FemaleAnimationVectorParameters; // 0x3a0(0x10)
	struct FVector HandsOffset; // 0x3b0(0x0c)
	char pad_3BC[0x4]; // 0x3bc(0x04)

	void NetMulticast_PutToInventory(); // Function WTL.WTLUsable.NetMulticast_PutToInventory // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ee270
	struct USkeletalMeshComponent* GetMesh(); // Function WTL.WTLUsable.GetMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19461e0
	void BP_CustomActionTrigger(struct FName Name); // Function WTL.WTLUsable.BP_CustomActionTrigger // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLStuff
// Size: 0x458 (Inherited: 0x3c0)
struct AWTLStuff : AWTLUsable {
	char pad_3C0[0x28]; // 0x3c0(0x28)
	struct FItemAnimationSet UseSequenceSet; // 0x3e8(0x18)
	struct FItemAnimationSet AlternateUseSequenceSet; // 0x400(0x18)
	struct FItemAnimationSet RechargeSequenceSet; // 0x418(0x18)
	char pad_430[0x4]; // 0x430(0x04)
	bool UseActivity; // 0x434(0x01)
	char pad_435[0x3]; // 0x435(0x03)
	float ActivityUpInterpSpeed; // 0x438(0x04)
	float ActivityDownInterpSpeed; // 0x43c(0x04)
	struct FVector AimingHandsTranslationMale; // 0x440(0x0c)
	struct FVector AimingHandsTranslationFemale; // 0x44c(0x0c)

	void Server_OnCharge(); // Function WTL.WTLStuff.Server_OnCharge // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x192dd70
	void OnReload(); // Function WTL.WTLStuff.OnReload // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10fc6a0
	void NetMulticast_Recharge(); // Function WTL.WTLStuff.NetMulticast_Recharge // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x191d950
};

// Class WTL.WTLCameraDisplay
// Size: 0x4d8 (Inherited: 0x458)
struct AWTLCameraDisplay : AWTLStuff {
	char pad_458[0x10]; // 0x458(0x10)
	float DesiredFOV; // 0x468(0x04)
	float FOVChangeSpeed; // 0x46c(0x04)
	struct UWidgetComponent* ScreenWidget; // 0x470(0x08)
	float CameraPitchDesiredValue; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct TArray<struct FWTLDisplayAnimationSet> AnimationsList; // 0x480(0x10)
	char pad_490[0x20]; // 0x490(0x20)
	struct UAnimMontage* CharacterUsingMontage; // 0x4b0(0x08)
	struct UAnimMontage* TabletUsingMontage; // 0x4b8(0x08)
	struct UAnimMontage* CharacterButtonMontage; // 0x4c0(0x08)
	struct UAnimMontage* TabletButtonMontage; // 0x4c8(0x08)
	struct UAnimationAsset* TabletWithOpenedAntennasAnim; // 0x4d0(0x08)

	void K2_StickInputDirection(float InputUp, float InputRight); // Function WTL.WTLCameraDisplay.K2_StickInputDirection // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLStaticReplicatedActor
// Size: 0x220 (Inherited: 0x220)
struct AWTLStaticReplicatedActor : AActor {
};

// Class WTL.WTLPlaceableStuff
// Size: 0x398 (Inherited: 0x220)
struct AWTLPlaceableStuff : AWTLStaticReplicatedActor {
	char pad_220[0x70]; // 0x220(0x70)
	uint64_t m_CharacterID; // 0x290(0x08)
	struct FString m_CharacterName; // 0x298(0x10)
	uint64_t m_CharacterGroupID; // 0x2a8(0x08)
	uint16_t m_CharacterClanID; // 0x2b0(0x02)
	enum class EWTLFaction m_CharacterFaction; // 0x2b2(0x01)
	char pad_2B3[0xad]; // 0x2b3(0xad)
	bool CanTakeDamageFromFactionMembers; // 0x360(0x01)
	char pad_361[0x3]; // 0x361(0x03)
	float DamageToConditionMultiplier; // 0x364(0x04)
	float ExplosionDamageMultiplier; // 0x368(0x04)
	uint32_t m_Condition; // 0x36c(0x04)
	int32_t StuffID; // 0x370(0x04)
	bool SaveStateToDB; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	float SaveStateToDBInterval; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct FText FullStuffName; // 0x380(0x18)

	void OnTakedBack(struct AWTLCharacter* EventInstigator); // Function WTL.WTLPlaceableStuff.OnTakedBack // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnRep_Condition(); // Function WTL.WTLPlaceableStuff.OnRep_Condition // (Native|Protected) // @ game+0xba4570
	void OnPlaced(struct AWTLCharacter* EventInstigator); // Function WTL.WTLPlaceableStuff.OnPlaced // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnEnergyChanged(float EnergyValue); // Function WTL.WTLPlaceableStuff.OnEnergyChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnConditionChanged(float ConditionValue); // Function WTL.WTLPlaceableStuff.OnConditionChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetMulticast_OnDestroyed(); // Function WTL.WTLPlaceableStuff.NetMulticast_OnDestroyed // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x17ee270
	void K2_OnDestroyed(); // Function WTL.WTLPlaceableStuff.K2_OnDestroyed // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
	void BPCustomAnimTrigger(struct FName TriggerName); // Function WTL.WTLPlaceableStuff.BPCustomAnimTrigger // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
	int32_t BP_GetMaxCondition(); // Function WTL.WTLPlaceableStuff.BP_GetMaxCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1898480
	int32_t BP_GetCondition(); // Function WTL.WTLPlaceableStuff.BP_GetCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18984a0
};

// Class WTL.WTLCampfire
// Size: 0x550 (Inherited: 0x398)
struct AWTLCampfire : AWTLPlaceableStuff {
	char pad_398[0xa8]; // 0x398(0xa8)
	float m_Energy; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct FWTLStorageContent m_StorageContent; // 0x448(0xa8)
	char pad_4F0[0x30]; // 0x4f0(0x30)
	struct UStaticMeshComponent* Mesh; // 0x520(0x08)
	struct TArray<enum class EObjectTypeQuery> WarmzoneObjectTypes; // 0x528(0x10)
	float WarmzoneRadius; // 0x538(0x04)
	float WarmzoneHealingPercentPerSecond; // 0x53c(0x04)
	float StartEnergy; // 0x540(0x04)
	float MaxEnergy; // 0x544(0x04)
	float EnergyDecrementPerSecond; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)

	void OnRep_StorageContent(); // Function WTL.WTLCampfire.OnRep_StorageContent // (Final|Native|Private) // @ game+0x17a6930
	void OnRep_Energy(); // Function WTL.WTLCampfire.OnRep_Energy // (Final|Native|Private) // @ game+0x17a68b0
};

// Class WTL.WTLCanvasDrawableInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLCanvasDrawableInterface : UInterface {
};

// Class WTL.WTLCaptureComponent2D
// Size: 0x8b0 (Inherited: 0x8b0)
struct UWTLCaptureComponent2D : USceneCaptureComponent2D {
};

// Class WTL.WTLCharacter
// Size: 0x19d0 (Inherited: 0x4c0)
struct AWTLCharacter : ACharacter {
	char pad_4C0[0x70]; // 0x4c0(0x70)
	bool bIsMovementEnabled; // 0x530(0x01)
	char pad_531[0x1f]; // 0x531(0x1f)
	float m_ReplicatedStamina; // 0x550(0x04)
	char pad_554[0x4]; // 0x554(0x04)
	float m_ReplicatedOxygen; // 0x558(0x04)
	char pad_55C[0xbc]; // 0x55c(0xbc)
	bool m_FlashlightEnabled; // 0x618(0x01)
	bool m_IsInvulnerable; // 0x619(0x01)
	bool m_IsInSafeZone; // 0x61a(0x01)
	bool m_CanSpawnOnSafeZone; // 0x61b(0x01)
	bool m_IsInMobileResurectionPointWorkZone; // 0x61c(0x01)
	bool m_IsInPVPZone; // 0x61d(0x01)
	bool m_IsTraveling; // 0x61e(0x01)
	char pad_61F[0x61]; // 0x61f(0x61)
	struct AWTLEventPoint* m_LastEventPoint; // 0x680(0x08)
	bool m_AdminSprintMode; // 0x688(0x01)
	char pad_689[0x2f]; // 0x689(0x2f)
	bool m_IsHoldingBreath; // 0x6b8(0x01)
	char pad_6B9[0x1f]; // 0x6b9(0x1f)
	bool m_AgressorFlag; // 0x6d8(0x01)
	char pad_6D9[0x17]; // 0x6d9(0x17)
	bool bIsInFishingZone; // 0x6f0(0x01)
	bool bIsPlacingItem; // 0x6f1(0x01)
	char pad_6F2[0x1]; // 0x6f2(0x01)
	bool m_bIsInQuickThrowingState; // 0x6f3(0x01)
	char pad_6F4[0x24]; // 0x6f4(0x24)
	float m_CurrentRadiationLevel; // 0x718(0x04)
	char pad_71C[0xbc]; // 0x71c(0xbc)
	struct FSpeedModifiers m_SpeedModifiers; // 0x7d8(0x08)
	float ScopeOccluderDelta; // 0x7e0(0x04)
	float MonocularOccluderDelta; // 0x7e4(0x04)
	struct TSoftObjectPtr<UFMODEvent> DeathBreathSoundEvent; // 0x7e8(0x28)
	struct TSoftObjectPtr<UFMODEvent> StartHoldingBreathSoundEvent; // 0x810(0x28)
	struct TSoftObjectPtr<UFMODEvent> StopHoldingBreathSoundEvent; // 0x838(0x28)
	struct TSoftObjectPtr<UFMODEvent> TeleportSoundEvent; // 0x860(0x28)
	struct TSoftObjectPtr<UFMODEvent> HearingDamageEvent; // 0x888(0x28)
	struct TSoftObjectPtr<USoundMix> DrunkSoundMix; // 0x8b0(0x28)
	float WalkFootstepMinInterval; // 0x8d8(0x04)
	float WalkFootstepVolume; // 0x8dc(0x04)
	float SprintFootstepMinInterval; // 0x8e0(0x04)
	float SprintFootstepVolume; // 0x8e4(0x04)
	float CrouchFootstepMinInterval; // 0x8e8(0x04)
	float CrouchFootstepVolume; // 0x8ec(0x04)
	float AimFootstepVolumeMultiplier; // 0x8f0(0x04)
	char pad_8F4[0xc]; // 0x8f4(0x0c)
	struct USkeletalMeshComponent* MeshTorso; // 0x900(0x08)
	struct USkeletalMeshComponent* MeshLegs; // 0x908(0x08)
	struct USkeletalMeshComponent* MeshFeet; // 0x910(0x08)
	struct USkeletalMeshComponent* MeshHead; // 0x918(0x08)
	struct USkeletalMeshComponent* MeshNeck; // 0x920(0x08)
	struct USkeletalMeshComponent* MeshHeadSlot; // 0x928(0x08)
	struct USkeletalMeshComponent* MeshTorsoSlot; // 0x930(0x08)
	struct USkeletalMeshComponent* MeshLegsSlot; // 0x938(0x08)
	struct USkeletalMeshComponent* MeshFeetSlot; // 0x940(0x08)
	struct USkeletalMeshComponent* BackpackSlot; // 0x948(0x08)
	struct USkeletalMeshComponent* GlassesSlot; // 0x950(0x08)
	struct USkeletalMeshComponent* WatchesSlot; // 0x958(0x08)
	struct USkeletalMeshComponent* EquipmentSlot1; // 0x960(0x08)
	struct USkeletalMeshComponent* EquipmentSlot2; // 0x968(0x08)
	struct USkeletalMeshComponent* EquipmentSlot3; // 0x970(0x08)
	struct USkeletalMeshComponent* EquipmentSlot4; // 0x978(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0; // 0x980(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0MuzzleMount; // 0x988(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0MuzzleAttachment; // 0x990(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0FlashlightMount; // 0x998(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0FlashlightAttachment; // 0x9a0(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0ScopeMount; // 0x9a8(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot0ScopeAttachment; // 0x9b0(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1; // 0x9b8(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1MuzzleMount; // 0x9c0(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1MuzzleAttachment; // 0x9c8(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1FlashlightMount; // 0x9d0(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1FlashlightAttachment; // 0x9d8(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1ScopeMount; // 0x9e0(0x08)
	struct UStaticMeshComponent* EquippedWeaponPreviewSlot1ScopeAttachment; // 0x9e8(0x08)
	struct UStaticMeshComponent* EquippedStuffPreviewSlot5; // 0x9f0(0x08)
	struct UStaticMeshComponent* HolsterSlot; // 0x9f8(0x08)
	struct UStaticMeshComponent* EquippedPistolPreviewSlot; // 0xa00(0x08)
	struct UStaticMeshComponent* SheathSlot; // 0xa08(0x08)
	struct UStaticMeshComponent* SheathPreviewSlot; // 0xa10(0x08)
	struct UWTLFlashlightMountComponent* FlashlightComponent; // 0xa18(0x08)
	struct USpotLightComponent* LightComponent; // 0xa20(0x08)
	struct UStaticMeshComponent* FlashlightMesh; // 0xa28(0x08)
	struct UStaticMeshComponent* ScopeOccluderMesh; // 0xa30(0x08)
	struct USphereComponent* BulletFlyNearVolume; // 0xa38(0x08)
	struct UAudioComponent* HeartbeatAudioComponent; // 0xa40(0x08)
	struct UFMODAudioComponent* CharacterVoiceComponent; // 0xa48(0x08)
	struct UFMODAudioComponent* NDPDetectorAudioComponent; // 0xa50(0x08)
	struct UFMODAudioComponent* RadiationDetectorAudioComponent; // 0xa58(0x08)
	struct UWTLFMODCharacterVoiceComponent* VOIPComponent; // 0xa60(0x08)
	struct UWTLCharacterIdentityComponent* IdentityComponent; // 0xa68(0x08)
	struct UMaterialBillboardComponent* VOIPIndicatorSprite; // 0xa70(0x08)
	char pad_A78[0x8]; // 0xa78(0x08)
	struct UPawnNoiseEmitterComponent* NoiseEmitterComponent; // 0xa80(0x08)
	struct UWidgetInteractionComponent* WidgetInteraction; // 0xa88(0x08)
	char pad_A90[0x4]; // 0xa90(0x04)
	bool bIsDying; // 0xa94(0x01)
	bool bIsAimToggle; // 0xa95(0x01)
	bool bIsCrouchToggle; // 0xa96(0x01)
	bool bIsSprintToggle; // 0xa97(0x01)
	bool bAllowRebasing; // 0xa98(0x01)
	char pad_A99[0x3]; // 0xa99(0x03)
	float RebasingDistance; // 0xa9c(0x04)
	struct FTakeHitInfo LastTakeHitInfo; // 0xaa0(0x220)
	char pad_CC0[0x21]; // 0xcc0(0x21)
	enum class EWTLHandsState HandsState; // 0xce1(0x01)
	char pad_CE2[0x6]; // 0xce2(0x06)
	struct AWTLUsable* UsableItemInHands; // 0xce8(0x08)
	struct AWTLUsable* QuickItemInHands; // 0xcf0(0x08)
	bool bIsAiming; // 0xcf8(0x01)
	bool bIsSprinting; // 0xcf9(0x01)
	char pad_CFA[0x2]; // 0xcfa(0x02)
	bool bIsJumping; // 0xcfc(0x01)
	enum class EWTLCharacterPose CurrentPose; // 0xcfd(0x01)
	char pad_CFE[0x2]; // 0xcfe(0x02)
	float SprintSpeed; // 0xd00(0x04)
	float WalkSpeed; // 0xd04(0x04)
	float CrouchSpeed; // 0xd08(0x04)
	float ProneSpeed; // 0xd0c(0x04)
	float SwimSpeed; // 0xd10(0x04)
	float AimSpeedMultiplier; // 0xd14(0x04)
	float MaxStamina; // 0xd18(0x04)
	float StaminaNotMovingIncrement; // 0xd1c(0x04)
	float StaminaMovingIncrement; // 0xd20(0x04)
	float StaminaSprintDecrement; // 0xd24(0x04)
	float StaminaPercentSprintAvailability; // 0xd28(0x04)
	float StaminaJumpDecrementPercent; // 0xd2c(0x04)
	float StaminaHoldingBreathDecrement; // 0xd30(0x04)
	float StaminaWaterMovementDecrement; // 0xd34(0x04)
	float StaminaUnderwaterDecrement; // 0xd38(0x04)
	float MaxOxygen; // 0xd3c(0x04)
	float OxygenNoBreatheDecrement; // 0xd40(0x04)
	float OxygenBreatheIncrement; // 0xd44(0x04)
	float StandMinPitchAngle; // 0xd48(0x04)
	float StandMaxPitchAngle; // 0xd4c(0x04)
	float CrouchMinPitchAngle; // 0xd50(0x04)
	float CrouchMaxPitchAngle; // 0xd54(0x04)
	float ProneMinPitchAngle; // 0xd58(0x04)
	float ProneMaxPitchAngle; // 0xd5c(0x04)
	float SwimMinPitchAngle; // 0xd60(0x04)
	float SwimMaxPitchAngle; // 0xd64(0x04)
	float GravityScaleInWater; // 0xd68(0x04)
	float GravityScaleUnderWater; // 0xd6c(0x04)
	float GravityScaleOnLand; // 0xd70(0x04)
	char pad_D74[0x18]; // 0xd74(0x18)
	float m_CameraOffsetInterpSpeed; // 0xd8c(0x04)
	char pad_D90[0x1a8]; // 0xd90(0x1a8)
	struct AActor* m_InteractiveObjectInFocus; // 0xf38(0x08)
	char pad_F40[0x10]; // 0xf40(0x10)
	struct TArray<enum class EObjectTypeQuery> InterestObjectTypes; // 0xf50(0x10)
	float InterestTraceRadius; // 0xf60(0x04)
	char pad_F64[0x24]; // 0xf64(0x24)
	bool bEnableHandsStateDebugging; // 0xf88(0x01)
	char pad_F89[0x1f]; // 0xf89(0x1f)
	bool m_bIsUnderWater; // 0xfa8(0x01)
	bool m_bIsInWater; // 0xfa9(0x01)
	bool m_bMovesOnWater; // 0xfaa(0x01)
	char pad_FAB[0x5]; // 0xfab(0x05)
	struct TSoftObjectPtr<UTexture2D> m_CharacterEffectsTexture; // 0xfb0(0x28)
	struct TMap<enum class EWTLCharacterEffectType, struct FVector2D> m_CharacterEffectIconsCoords; // 0xfd8(0x50)
	struct TMap<enum class EWTLCharacterStateIndicatorType, struct FVector2D> m_CharacterIndicatorIconsCoords; // 0x1028(0x50)
	struct TSoftObjectPtr<UFont> Font; // 0x1078(0x28)
	struct TSoftObjectPtr<UTexture2D> DotPointerTexture; // 0x10a0(0x28)
	char pad_10C8[0x5c]; // 0x10c8(0x5c)
	float m_DesiredTiltValue; // 0x1124(0x04)
	struct TSoftObjectPtr<UMaterialInterface> m_PlacementPreviewItemMaterial; // 0x1128(0x28)
	struct FLinearColor m_RightPlacementColor; // 0x1150(0x10)
	struct FLinearColor m_WrongPlacementColor; // 0x1160(0x10)
	char pad_1170[0x10]; // 0x1170(0x10)
	struct AStaticMeshActor* M_PlacementPointer; // 0x1180(0x08)
	char pad_1188[0x10]; // 0x1188(0x10)
	struct UMaterialInstanceDynamic* m_PlacementPreviewMaterialInstance; // 0x1198(0x08)
	char pad_11A0[0xc]; // 0x11a0(0x0c)
	float UndergroundFlashlightIntensityMultiplier; // 0x11ac(0x04)
	float OtherCharacterFlashlightIntensityMultiplier; // 0x11b0(0x04)
	char pad_11B4[0x1c]; // 0x11b4(0x1c)
	bool m_bIsFishing; // 0x11d0(0x01)
	char pad_11D1[0x3]; // 0x11d1(0x03)
	struct FWTLQTEState QTEState; // 0x11d4(0x10)
	char pad_11E4[0x74]; // 0x11e4(0x74)
	enum class EWTLSex BlueprintSex; // 0x1258(0x01)
	char pad_1259[0x87]; // 0x1259(0x87)
	struct AActor* m_CurrentActionGameplayActor; // 0x12e0(0x08)
	char pad_12E8[0x2]; // 0x12e8(0x02)
	uint16_t m_CurrentEmotionKey; // 0x12ea(0x02)
	char pad_12EC[0x9]; // 0x12ec(0x09)
	bool m_LeavingFromVehicle; // 0x12f5(0x01)
	char pad_12F6[0x23]; // 0x12f6(0x23)
	bool PersonalEnergyShieldState; // 0x1319(0x01)
	char pad_131A[0xe]; // 0x131a(0x0e)
	struct AWTLDrone* m_Drone; // 0x1328(0x08)
	struct AWTLCameraDisplay* m_DroneCameraDisplay; // 0x1330(0x08)
	struct FMulticastInlineDelegate OnCharacterDestroy; // 0x1338(0x10)
	struct FMulticastInlineDelegate OnTravelingResult; // 0x1348(0x10)
	struct FMulticastInlineDelegate OnCharacterDied; // 0x1358(0x10)
	struct FMulticastInlineDelegate OnCoreHackngResult; // 0x1368(0x10)
	struct FMulticastInlineDelegate OnCharacterLeavedFishingZone; // 0x1378(0x10)
	struct FMulticastInlineDelegate OnCharacterEnteredInFishingZone; // 0x1388(0x10)
	struct FMulticastInlineDelegate OnGameplayActionStarted; // 0x1398(0x10)
	struct FMulticastInlineDelegate OnGameplayActionFinished; // 0x13a8(0x10)
	char pad_13B8[0x1]; // 0x13b8(0x01)
	bool m_bCanUseVehicleInAnomaly; // 0x13b9(0x01)
	char pad_13BA[0x26]; // 0x13ba(0x26)
	struct TSoftClassPtr<UObject> MaleAnimBlueprint; // 0x13e0(0x28)
	struct TSoftClassPtr<UObject> MaleWatchesAnimBlueprint; // 0x1408(0x28)
	struct TSoftClassPtr<UObject> FemaleAnimBlueprint; // 0x1430(0x28)
	struct TSoftClassPtr<UObject> FemaleWatchesAnimBlueprint; // 0x1458(0x28)
	struct FWTLLowerBodyAnimation StandLowerBodyRotation; // 0x1480(0x10)
	struct FWTLLowerBodyAnimation CrouchLowerBodyRotation; // 0x1490(0x10)
	struct UAnimMontage* MaleTimeCheckAnimationMontage; // 0x14a0(0x08)
	struct UAnimMontage* FemaleTimeCheckAnimationMontage; // 0x14a8(0x08)
	struct UAnimMontage* LadderUpStartMontage; // 0x14b0(0x08)
	struct UAnimMontage* LadderUpEndMontage; // 0x14b8(0x08)
	struct UAnimMontage* LadderDownStartMontage; // 0x14c0(0x08)
	struct UAnimMontage* LadderDownEndMontage; // 0x14c8(0x08)
	struct UAnimMontage* ThrowNutMontage; // 0x14d0(0x08)
	struct UAnimMontage* PickItemMontage; // 0x14d8(0x08)
	struct TMap<enum class EWTLCharacterStunhitDirection, struct UAnimMontage*> StunhitAnimations; // 0x14e0(0x50)
	struct TArray<enum class EWTLCharacterStunhitDirection> DrunkAnimationStunhitSet; // 0x1530(0x10)
	struct TSoftObjectPtr<USkeletalMesh> MaleNeckMesh; // 0x1540(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleNeckMesh; // 0x1568(0x28)
	struct TSoftObjectPtr<USkeletalMesh> MaleTorsoMeshFullArms; // 0x1590(0x28)
	struct TSoftObjectPtr<USkeletalMesh> MaleTorsoMeshHalfArms; // 0x15b8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> MaleTorsoMeshHandsOnly; // 0x15e0(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleTorsoMeshFullArms; // 0x1608(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleTorsoMeshHalfArms; // 0x1630(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleTorsoMeshHandsOnly; // 0x1658(0x28)
	struct TSoftClassPtr<UObject> CameraShakeMoveForward; // 0x1680(0x28)
	struct TSoftClassPtr<UObject> CameraShakeMoveForwardAiming; // 0x16a8(0x28)
	struct TSoftClassPtr<UObject> CameraShakeMoveRight; // 0x16d0(0x28)
	struct TSoftClassPtr<UObject> CameraShakeMoveRightAiming; // 0x16f8(0x28)
	struct TSoftClassPtr<UObject> CameraShakeSprint; // 0x1720(0x28)
	struct TSoftClassPtr<UObject> CameraShakeConsternation; // 0x1748(0x28)
	struct TSoftClassPtr<UObject> NutClass; // 0x1770(0x28)
	float NutThrowForce; // 0x1798(0x04)
	char pad_179C[0x4]; // 0x179c(0x04)
	struct FTransform AdditionalNutTransform; // 0x17a0(0x30)
	struct FVector AdditionalNutRotation; // 0x17d0(0x0c)
	bool bIsDead; // 0x17dc(0x01)
	char pad_17DD[0x3]; // 0x17dd(0x03)
	float NormalFOV; // 0x17e0(0x04)
	float SprintFOV; // 0x17e4(0x04)
	float NormalFOVChangeSpeed; // 0x17e8(0x04)
	float OpticsFOVChangeSpeed; // 0x17ec(0x04)
	struct FName CameraBoneName; // 0x17f0(0x08)
	char pad_17F8[0x4]; // 0x17f8(0x04)
	float DissolveLifespanTrigger; // 0x17fc(0x04)
	char pad_1800[0x10]; // 0x1800(0x10)
	bool bIsClimbingLadder; // 0x1810(0x01)
	char pad_1811[0xb7]; // 0x1811(0xb7)
	char m_ChickenStatus; // 0x18c8(0x01)
	char pad_18C9[0xf]; // 0x18c9(0x0f)
	float BaseTurnRate; // 0x18d8(0x04)
	float BaseLookUpRate; // 0x18dc(0x04)
	float MouseSensivityMultiplier; // 0x18e0(0x04)
	char pad_18E4[0x4]; // 0x18e4(0x04)
	struct UDataTable* WeaponDataTable; // 0x18e8(0x08)
	struct FVector IKFloorTraceOffset; // 0x18f0(0x0c)
	float IKFloorTraceLenth; // 0x18fc(0x04)
	bool bIKIsEnabled; // 0x1900(0x01)
	bool bIKIsDebug; // 0x1901(0x01)
	char pad_1902[0x2]; // 0x1902(0x02)
	float IKTraceDistance; // 0x1904(0x04)
	struct FName IKRightFootSocketName; // 0x1908(0x08)
	struct FName IKLeftFootSocketName; // 0x1910(0x08)
	float IKScale; // 0x1918(0x04)
	float PronedEyeHeight; // 0x191c(0x04)
	char bIsProned : 1; // 0x1920(0x01)
	char pad_1920_1 : 7; // 0x1920(0x01)
	char pad_1921[0x3]; // 0x1921(0x03)
	bool bIsQuickItemChange; // 0x1924(0x01)
	char pad_1925[0x7]; // 0x1925(0x07)
	float DissolveInterpSpeed; // 0x192c(0x04)
	char pad_1930[0xd]; // 0x1930(0x0d)
	bool m_bLockCameraRotation; // 0x193d(0x01)
	char pad_193E[0x5a]; // 0x193e(0x5a)
	struct AWTLLadder* CurrentLadder; // 0x1998(0x08)
	char RemoteViewYaw; // 0x19a0(0x01)
	char pad_19A1[0x7]; // 0x19a1(0x07)
	uint64_t StandaloneCharacterID; // 0x19a8(0x08)
	char pad_19B0[0x8]; // 0x19b0(0x08)
	bool bIsMonstersFollowing; // 0x19b8(0x01)
	char pad_19B9[0x3]; // 0x19b9(0x03)
	int32_t MaxNumMonstersFollowing; // 0x19bc(0x04)
	float RadiusMonsterNear; // 0x19c0(0x04)
	char pad_19C4[0xc]; // 0x19c4(0x0c)

	void UpdateEquipmentItemStates(); // Function WTL.WTLCharacter.UpdateEquipmentItemStates // (Final|Native|Private) // @ game+0x17acb60
	void StopEmotion(); // Function WTL.WTLCharacter.StopEmotion // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8410
	void StopCameraShake(struct UMatineeCameraShake* CameraShake); // Function WTL.WTLCharacter.StopCameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9660
	void StartQTE(struct AActor* QTEInstigator); // Function WTL.WTLCharacter.StartQTE // (Native|Public|BlueprintCallable) // @ game+0x17aa910
	void StartInteractionWithActionGameplayObject(struct AActor* ActionGameplayActor); // Function WTL.WTLCharacter.StartInteractionWithActionGameplayObject // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8690
	void SpawnVehicle(uint64_t ItemId, uint16_t VehicleID); // Function WTL.WTLCharacter.SpawnVehicle // (Final|Native|Private) // @ game+0x17b08b0
	void ShowSteamStoreInterface(); // Function WTL.WTLCharacter.ShowSteamStoreInterface // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8620
	void ShowDeathScreen(); // Function WTL.WTLCharacter.ShowDeathScreen // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
	void ShowAllMeshesVisibleOnClient(bool bVisible); // Function WTL.WTLCharacter.ShowAllMeshesVisibleOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8c30
	void SetShowAllMeshes(bool ShowAllMeshes); // Function WTL.WTLCharacter.SetShowAllMeshes // (Final|Native|Private|BlueprintCallable) // @ game+0x17ad470
	void SetDeathFromAnomaly(bool DeathFromAnomaly, bool ShowAllMeshes, bool DeathSimulatePhysics); // Function WTL.WTLCharacter.SetDeathFromAnomaly // (Final|Native|Private|BlueprintCallable) // @ game+0x17ad980
	void SetDeathByTimer(float DelayValue, struct UDamageType* DamageTypeClass, enum class EWTLCharacterEffectType EffectType, struct AController* DeathInstigator, struct AActor* DeathCauser); // Function WTL.WTLCharacter.SetDeathByTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x17a7d90
	void SetCurrentPose(enum class EWTLCharacterPose Value); // Function WTL.WTLCharacter.SetCurrentPose // (Final|Native|Private|BlueprintCallable) // @ game+0x17adb80
	void SetAllMeshesVisible(bool bVisible); // Function WTL.WTLCharacter.SetAllMeshesVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void Server_UseEquipmentSlot(char SlotNumber); // Function WTL.WTLCharacter.Server_UseEquipmentSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ab600
	void Server_Use(struct AActor* Actor); // Function WTL.WTLCharacter.Server_Use // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ab490
	void Server_ThrowNut(); // Function WTL.WTLCharacter.Server_ThrowNut // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ab700
	void Server_SwitchFireMode(); // Function WTL.WTLCharacter.Server_SwitchFireMode // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17afd50
	void Server_Suicide(); // Function WTL.WTLCharacter.Server_Suicide // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b1130
	void Server_StopItemPlacement(); // Function WTL.WTLCharacter.Server_StopItemPlacement // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17acd70
	void Server_StopEmotion(); // Function WTL.WTLCharacter.Server_StopEmotion // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17a8430
	void Server_StartItemPlacement(); // Function WTL.WTLCharacter.Server_StartItemPlacement // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17acdd0
	void Server_SetSprintMode(bool Value); // Function WTL.WTLCharacter.Server_SetSprintMode // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b1020
	void Server_SetHoldingBreath(bool Value); // Function WTL.WTLCharacter.Server_SetHoldingBreath // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b0d50
	void Server_SetFlashlightEnabled(bool Value); // Function WTL.WTLCharacter.Server_SetFlashlightEnabled // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17a7940
	void Server_SetDeathFromAnomaly(bool DeathFromAnomaly, bool ShowAllMeshes, bool DeathSimulatePhysics); // Function WTL.WTLCharacter.Server_SetDeathFromAnomaly // (Final|Native|Private|BlueprintCallable) // @ game+0x17ad750
	void Server_SetCurrentPose(enum class EWTLCharacterPose Value); // Function WTL.WTLCharacter.Server_SetCurrentPose // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17adc80
	void Server_SetAppearanceProcessed(); // Function WTL.WTLCharacter.Server_SetAppearanceProcessed // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b13a0
	void Server_SetAimMode(bool Value, bool IgnoreHandsState); // Function WTL.WTLCharacter.Server_SetAimMode // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b0e80
	void Server_SendQTEAction(char ActionID); // Function WTL.WTLCharacter.Server_SendQTEAction // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b1280
	void Server_SelectSlot(char SlotNumber, bool AllowReselect, bool Force); // Function WTL.WTLCharacter.Server_SelectSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17b0680
	void Server_RequestStuffPlacement(uint64_t StuffItemID); // Function WTL.WTLCharacter.Server_RequestStuffPlacement // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17ad080
	void Server_RequestSpecialStuffPlacement(uint16_t StuffID); // Function WTL.WTLCharacter.Server_RequestSpecialStuffPlacement // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17acf70
	void Server_RequestActionGameplayActorToUse(struct AActor* ActionGameplayActor); // Function WTL.WTLCharacter.Server_RequestActionGameplayActorToUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17ac840
	void Server_RequestActionGameplayActorToStopUse(); // Function WTL.WTLCharacter.Server_RequestActionGameplayActorToStopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17ac7e0
	void Server_QuickThrow(); // Function WTL.WTLCharacter.Server_QuickThrow // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ab430
	void Server_QuickMeleeHit(); // Function WTL.WTLCharacter.Server_QuickMeleeHit // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ab5a0
	void Server_ProcessBulletFlyNear(struct FVector_NetQuantize Location, enum class EWTLCaliber Caliber); // Function WTL.WTLCharacter.Server_ProcessBulletFlyNear // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ab190
	void Server_PlayEmotion(int32_t EmotionTypeID, int32_t EmotionID); // Function WTL.WTLCharacter.Server_PlayEmotion // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17a8490
	void Server_PlaceStuff(); // Function WTL.WTLCharacter.Server_PlaceStuff // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17acd10
	void Server_OnUse(struct AActor* InteractiveActor); // Function WTL.WTLCharacter.Server_OnUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17affb0
	void Server_OnTiltRight(); // Function WTL.WTLCharacter.Server_OnTiltRight // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17afcf0
	void Server_OnTiltLeft(); // Function WTL.WTLCharacter.Server_OnTiltLeft // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17afc90
	void Server_OnStopTilt(); // Function WTL.WTLCharacter.Server_OnStopTilt // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17afc30
	void Server_OnStartUse(); // Function WTL.WTLCharacter.Server_OnStartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17aff50
	void Server_OnFinishUse(struct AActor* InteractiveObject, bool Success); // Function WTL.WTLCharacter.Server_OnFinishUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17afdb0
	void Server_NotifyClientCheatState(enum class EWTLCheatType CheatType, struct FString Info); // Function WTL.WTLCharacter.Server_NotifyClientCheatState // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b1400
	void Server_MainUseStop(int32_t OptionalValue1, int32_t OptionalValue2); // Function WTL.WTLCharacter.Server_MainUseStop // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b0ac0
	void Server_MainUseStart(struct FVector2D AimOffset); // Function WTL.WTLCharacter.Server_MainUseStart // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate) // @ game+0x17b0c50
	void Server_HideItem(bool Force); // Function WTL.WTLCharacter.Server_HideItem // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17ad270
	void Server_HideDrone(); // Function WTL.WTLCharacter.Server_HideDrone // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17accb0
	void Server_CoreHacking_Process(char InputValue, struct AWTLFortificationCommandCore* CommandCore); // Function WTL.WTLCharacter.Server_CoreHacking_Process // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x17aa660
	void Server_ClearCurrentSlot(); // Function WTL.WTLCharacter.Server_ClearCurrentSlot // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b0620
	void Server_CancelStuffPlacementMode(); // Function WTL.WTLCharacter.Server_CancelStuffPlacementMode // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17acf10
	void Server_CancelQTE(); // Function WTL.WTLCharacter.Server_CancelQTE // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b1220
	void Server_AssignItemToFastAccessSlot(char SlotNumber, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLCharacter.Server_AssignItemToFastAccessSlot // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b03f0
	void Server_AlternativeUseStop(); // Function WTL.WTLCharacter.Server_AlternativeUseStop // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b0a00
	void Server_AlternativeUseStart(); // Function WTL.WTLCharacter.Server_AlternativeUseStart // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17b0a60
	void ResetIdleTimer(); // Function WTL.WTLCharacter.ResetIdleTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x17a6fc0
	void PostDeath(); // Function WTL.WTLCharacter.PostDeath // (Native|Public) // @ game+0x17ac3e0
	void PlayStunhit(enum class EWTLCharacterStunhitDirection StunhitDirection, bool IsHideUsableItem); // Function WTL.WTLCharacter.PlayStunhit // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9280
	void PlaySoundEventAttached(struct UFMODEvent* Sound); // Function WTL.WTLCharacter.PlaySoundEventAttached // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9a50
	void PlaySoundEvent2D(struct UFMODEvent* Sound); // Function WTL.WTLCharacter.PlaySoundEvent2D // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9b30
	void PlayMontage(struct UAnimMontage* MontageToPlay, bool BlockInput); // Function WTL.WTLCharacter.PlayMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9070
	void PlayCameraShake(struct UMatineeCameraShake* CameraShake, float Value, bool IsHideUsableItem, bool RemoveAiming); // Function WTL.WTLCharacter.PlayCameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0x17a97b0
	void OnUnmuteCharacter(); // Function WTL.WTLCharacter.OnUnmuteCharacter // (Final|Native|Private) // @ game+0x17ae260
	void OnTextChatUnmuteCharacter(); // Function WTL.WTLCharacter.OnTextChatUnmuteCharacter // (Final|Native|Private) // @ game+0x17ae0c0
	void OnTextChatMuteCharacter(); // Function WTL.WTLCharacter.OnTextChatMuteCharacter // (Final|Native|Private) // @ game+0x17ae240
	void OnShowInformationAboutCharacter(); // Function WTL.WTLCharacter.OnShowInformationAboutCharacter // (Final|Native|Private) // @ game+0x17ae720
	void OnShortCharacterInfoChanged(); // Function WTL.WTLCharacter.OnShortCharacterInfoChanged // (Final|Native|Private) // @ game+0x17ad190
	void OnSendTextChatMessageToCharacter(); // Function WTL.WTLCharacter.OnSendTextChatMessageToCharacter // (Final|Native|Private) // @ game+0x17ae700
	void OnReportCharacter(); // Function WTL.WTLCharacter.OnReportCharacter // (Final|Native|Private) // @ game+0x17adf60
	void OnRep_UsableItemInHands(); // Function WTL.WTLCharacter.OnRep_UsableItemInHands // (Final|Native|Private) // @ game+0x17afa90
	void OnRep_Stamina(); // Function WTL.WTLCharacter.OnRep_Stamina // (Final|Native|Private) // @ game+0x17af620
	void OnRep_QTEState(); // Function WTL.WTLCharacter.OnRep_QTEState // (Final|Native|Private) // @ game+0x17b1380
	void OnRep_PersonalEnergyShieldState(); // Function WTL.WTLCharacter.OnRep_PersonalEnergyShieldState // (Final|Native|Private) // @ game+0x17b1a70
	void OnRep_Oxygen(); // Function WTL.WTLCharacter.OnRep_Oxygen // (Final|Native|Private) // @ game+0x17af580
	void OnRep_LastTakeHitInfo(); // Function WTL.WTLCharacter.OnRep_LastTakeHitInfo // (Final|Native|Private) // @ game+0x17afa70
	void OnRep_LastEventPoint(); // Function WTL.WTLCharacter.OnRep_LastEventPoint // (Final|Native|Private) // @ game+0x17af420
	void OnRep_IsTraveling(); // Function WTL.WTLCharacter.OnRep_IsTraveling // (Final|Native|Private) // @ game+0x17af960
	void OnRep_IsProned(); // Function WTL.WTLCharacter.OnRep_IsProned // (Native|Public) // @ game+0x17ac6e0
	void OnRep_IsPlacingItem(); // Function WTL.WTLCharacter.OnRep_IsPlacingItem // (Final|Native|Private) // @ game+0x17af440
	void OnRep_IsInvulnerable(); // Function WTL.WTLCharacter.OnRep_IsInvulnerable // (Final|Native|Private) // @ game+0x17afa50
	void OnRep_IsInSafeZone(); // Function WTL.WTLCharacter.OnRep_IsInSafeZone // (Final|Native|Private) // @ game+0x17afa30
	void OnRep_IsInPVPZone(); // Function WTL.WTLCharacter.OnRep_IsInPVPZone // (Final|Native|Private) // @ game+0x17af9c0
	void OnRep_IsInMobileResurectionPointWorkZone(); // Function WTL.WTLCharacter.OnRep_IsInMobileResurectionPointWorkZone // (Final|Native|Private) // @ game+0x17af9c0
	void OnRep_IsInFishingZone(); // Function WTL.WTLCharacter.OnRep_IsInFishingZone // (Final|Native|Private) // @ game+0x17af560
	void OnRep_IsHoldingBreath(); // Function WTL.WTLCharacter.OnRep_IsHoldingBreath // (Final|Native|Private) // @ game+0x17af7e0
	void OnRep_IsClimbingLadder(); // Function WTL.WTLCharacter.OnRep_IsClimbingLadder // (Final|Native|Public) // @ game+0x17ac650
	void OnRep_HandsState(enum class EWTLHandsState PreviousHandsState); // Function WTL.WTLCharacter.OnRep_HandsState // (Final|Native|Private) // @ game+0x17af710
	void OnRep_FlashlightEnabled(); // Function WTL.WTLCharacter.OnRep_FlashlightEnabled // (Final|Native|Private) // @ game+0x17af3e0
	void OnRep_DroneRenderTargetActor(); // Function WTL.WTLCharacter.OnRep_DroneRenderTargetActor // (Final|Native|Private) // @ game+0xe77850
	void OnRep_Drone(); // Function WTL.WTLCharacter.OnRep_Drone // (Final|Native|Private) // @ game+0x17b1ac0
	void OnRep_CurrentRadiationLevel(); // Function WTL.WTLCharacter.OnRep_CurrentRadiationLevel // (Final|Native|Private) // @ game+0x17af400
	void OnRep_CurrentPose(enum class EWTLCharacterPose PrevValue); // Function WTL.WTLCharacter.OnRep_CurrentPose // (Final|Native|Private) // @ game+0x17afab0
	void OnRep_CurrentEmotionKey(); // Function WTL.WTLCharacter.OnRep_CurrentEmotionKey // (Final|Native|Private) // @ game+0x17b15c0
	void OnRep_CurrentActionGameplayActor(struct AActor* PrevActor); // Function WTL.WTLCharacter.OnRep_CurrentActionGameplayActor // (Final|Native|Private) // @ game+0x17b15e0
	void OnRep_bIsSprinting(); // Function WTL.WTLCharacter.OnRep_bIsSprinting // (Final|Native|Private) // @ game+0x17afbf0
	void OnRep_bIsJumping(); // Function WTL.WTLCharacter.OnRep_bIsJumping // (Final|Native|Private) // @ game+0x17afb80
	void OnRep_bIsAiming(); // Function WTL.WTLCharacter.OnRep_bIsAiming // (Final|Native|Private) // @ game+0x17afc10
	void OnPickupPlaceableStuffConfirmed(); // Function WTL.WTLCharacter.OnPickupPlaceableStuffConfirmed // (Final|Native|Private) // @ game+0x17ade60
	void OnPickupPlaceableStuff(); // Function WTL.WTLCharacter.OnPickupPlaceableStuff // (Final|Native|Private) // @ game+0x17adf40
	void OnOfferBarterToCharacter(); // Function WTL.WTLCharacter.OnOfferBarterToCharacter // (Final|Native|Private) // @ game+0x17ae600
	void OnOfferBarter(struct FString Message); // Function WTL.WTLCharacter.OnOfferBarter // (Final|Native|Private) // @ game+0x17ae510
	void OnMuteCharacter(); // Function WTL.WTLCharacter.OnMuteCharacter // (Final|Native|Private) // @ game+0x17ae380
	void OnMontageStarted(struct UAnimMontage* Montage); // Function WTL.WTLCharacter.OnMontageStarted // (Final|Native|Private) // @ game+0x17ae8f0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function WTL.WTLCharacter.OnMontageEnded // (Final|Native|Private) // @ game+0x17ae9d0
	void OnInviteCharacterToGroup(); // Function WTL.WTLCharacter.OnInviteCharacterToGroup // (Final|Native|Private) // @ game+0x17ae4f0
	void OnGiveTokensToCharacter(); // Function WTL.WTLCharacter.OnGiveTokensToCharacter // (Final|Native|Private) // @ game+0x17ae620
	void OnCommendCharacter(); // Function WTL.WTLCharacter.OnCommendCharacter // (Final|Native|Private) // @ game+0xe77850
	void OnChargePlaceableStuff(); // Function WTL.WTLCharacter.OnChargePlaceableStuff // (Final|Native|Private) // @ game+0x17add80
	void OnCharacterInfoChanged(); // Function WTL.WTLCharacter.OnCharacterInfoChanged // (Final|Native|Private) // @ game+0x17ad1f0
	void OnCapsuleEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLCharacter.OnCapsuleEndOverlap // (Final|Native|Public) // @ game+0x17abdc0
	void OnCapsuleBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLCharacter.OnCapsuleBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x17ac030
	void OnBulletFlyNearVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLCharacter.OnBulletFlyNearVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17b16c0
	void NetMulticast_ThrowNut(); // Function WTL.WTLCharacter.NetMulticast_ThrowNut // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ab9e0
	void NetMulticast_ShowTeleportationDeviceEffect(); // Function WTL.WTLCharacter.NetMulticast_ShowTeleportationDeviceEffect // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ab780
	void NetMulticast_SetBrokenLight(bool Value); // Function WTL.WTLCharacter.NetMulticast_SetBrokenLight // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17a7a50
	void NetMulticast_PlayPickupAnimation(float Rate); // Function WTL.WTLCharacter.NetMulticast_PlayPickupAnimation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ab910
	void NetMulticast_PlayAnimMontage(struct UAnimMontage* Montage, float Rate); // Function WTL.WTLCharacter.NetMulticast_PlayAnimMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ab7a0
	void NetMulticast_OnTeleportedWithDevice(); // Function WTL.WTLCharacter.NetMulticast_OnTeleportedWithDevice // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ab760
	void NetMulticast_OnStuffEquipmentStateChanged(uint64_t CharacterID, uint16_t StuffID, bool State); // Function WTL.WTLCharacter.NetMulticast_OnStuffEquipmentStateChanged // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x17ac950
	void LevelLoadedAtStart(); // Function WTL.WTLCharacter.LevelLoadedAtStart // (Final|Native|Private) // @ game+0x17b11f0
	void Kill(struct AController* Killer, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass, enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLCharacter.Kill // (Final|Native|Public|BlueprintCallable) // @ game+0x17ac400
	void K2_ShowTeleportationDeviceEffect(); // Function WTL.WTLCharacter.K2_ShowTeleportationDeviceEffect // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
	void K2_ShowExplosionEffectsAfterDeath(); // Function WTL.WTLCharacter.K2_ShowExplosionEffectsAfterDeath // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
	void K2_ShowEffectsAfterDeath(); // Function WTL.WTLCharacter.K2_ShowEffectsAfterDeath // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetMovementEnabled(bool Value); // Function WTL.WTLCharacter.K2_SetMovementEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x17a72a0
	void K2_OnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function WTL.WTLCharacter.K2_OnStartProne // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function WTL.WTLCharacter.K2_OnEndProne // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnEffectRemoved(enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLCharacter.K2_OnEffectRemoved // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnEffectAdded(enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLCharacter.K2_OnEffectAdded // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnDeath(); // Function WTL.WTLCharacter.K2_OnDeath // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
	void K2_LockCameraRotation(bool Value); // Function WTL.WTLCharacter.K2_LockCameraRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x17a71c0
	struct FGenericTeamId K2_GetGenericTeamID(); // Function WTL.WTLCharacter.K2_GetGenericTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa550
	enum class EWTLCharacterClass K2_GetCharacterClass(); // Function WTL.WTLCharacter.K2_GetCharacterClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa2c0
	bool K2_CanBeSeenFrom(struct FVector& ObserverLocation, struct FVector& OutSeenLocation, int32_t& NumberOfLoSChecksPerformed, float& OutSightStrength, struct AActor* IgnoreActor); // Function WTL.WTLCharacter.K2_CanBeSeenFrom // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x17a8070
	bool IsReadyToSpawnVehicle(); // Function WTL.WTLCharacter.IsReadyToSpawnVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a74d0
	bool IsPVPEnabled(); // Function WTL.WTLCharacter.IsPVPEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa0f0
	bool IsPlayingEmotion(); // Function WTL.WTLCharacter.IsPlayingEmotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a83e0
	bool IsInSafeZone(); // Function WTL.WTLCharacter.IsInSafeZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa1c0
	bool IsInPVPZone(); // Function WTL.WTLCharacter.IsInPVPZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa120
	bool IsInMobileResurectionPointWorkZone(); // Function WTL.WTLCharacter.IsInMobileResurectionPointWorkZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa180
	bool IsInFortificationScoreZone(); // Function WTL.WTLCharacter.IsInFortificationScoreZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa160
	bool IsInFishingZone(); // Function WTL.WTLCharacter.IsInFishingZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a7d70
	bool IsInExactSafeZone(struct AWTLSafeZone* SafeZone); // Function WTL.WTLCharacter.IsInExactSafeZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a9ff0
	bool IsInAir(); // Function WTL.WTLCharacter.IsInAir // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a7120
	void IncrementMonstersNear(int32_t Value); // Function WTL.WTLCharacter.IncrementMonstersNear // (Final|Native|Public|BlueprintCallable) // @ game+0x17a7790
	void IncrementMonstersFollowing(int32_t Value); // Function WTL.WTLCharacter.IncrementMonstersFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x17a7860
	void HideAllMeshes(); // Function WTL.WTLCharacter.HideAllMeshes // (Final|Native|Private|BlueprintCallable) // @ game+0x17ad380
	void GetSkeletalMeshComponentsByRef(struct TArray<struct USkeletalMeshComponent*>& Meshes); // Function WTL.WTLCharacter.GetSkeletalMeshComponentsByRef // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17a7b30
	struct TArray<struct USkeletalMeshComponent*> GetSkeletalMeshComponents(); // Function WTL.WTLCharacter.GetSkeletalMeshComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x17a7cb0
	float GetPercentHealth(); // Function WTL.WTLCharacter.GetPercentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa4a0
	struct AWTLEventPoint* GetLastEventPoint(); // Function WTL.WTLCharacter.GetLastEventPoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a8770
	bool GetIsInQTE(); // Function WTL.WTLCharacter.GetIsInQTE // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a9e40
	struct AWTLHUD* GetHUD(); // Function WTL.WTLCharacter.GetHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa4d0
	bool GetDeathFromAnomaly(); // Function WTL.WTLCharacter.GetDeathFromAnomaly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a71a0
	enum class EWTLCharacterPose GetCurrentPose(); // Function WTL.WTLCharacter.GetCurrentPose // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa500
	struct AActor* GetCurrentActionGameplayObject(); // Function WTL.WTLCharacter.GetCurrentActionGameplayObject // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8660
	char GetComplexion(); // Function WTL.WTLCharacter.GetComplexion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17abd50
	float GetChickenStatusAlpha(); // Function WTL.WTLCharacter.GetChickenStatusAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a70c0
	char GetChickenStatus(); // Function WTL.WTLCharacter.GetChickenStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a7100
	struct FString GetCharacterRankName(); // Function WTL.WTLCharacter.GetCharacterRankName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aab50
	char GetCharacterRank(); // Function WTL.WTLCharacter.GetCharacterRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aabd0
	char GetCharacterLevel(); // Function WTL.WTLCharacter.GetCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aac00
	enum class EWTLAITeam GetAITeam(); // Function WTL.WTLCharacter.GetAITeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa520
	void FinishInteractionWithActionGameplayObject(); // Function WTL.WTLCharacter.FinishInteractionWithActionGameplayObject // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8640
	void FailQTE(); // Function WTL.WTLCharacter.FailQTE // (Final|Native|Public|BlueprintCallable) // @ game+0x17aa7f0
	void DecrementMonstersNear(int32_t Value); // Function WTL.WTLCharacter.DecrementMonstersNear // (Final|Native|Public|BlueprintCallable) // @ game+0x17a75a0
	void DecrementMonstersFollowing(int32_t Value); // Function WTL.WTLCharacter.DecrementMonstersFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x17a7690
	void Client_WrongPlacementSpotMessage(struct FText Message); // Function WTL.WTLCharacter.Client_WrongPlacementSpotMessage // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17acb80
	void Client_UpdateEquipmentItemStates(); // Function WTL.WTLCharacter.Client_UpdateEquipmentItemStates // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17acb40
	void Client_ShowWarningText(struct FText WarningText, bool IsPlaySound); // Function WTL.WTLCharacter.Client_ShowWarningText // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x17aba00
	void Client_ShowWarning(enum class EWTLWarningTitleWidgetType WarningTitleWidgetType, bool IsPlaySound); // Function WTL.WTLCharacter.Client_ShowWarning // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x17abbd0
	void Client_ShowTeleportationDeviceWindowWidget(uint64_t TeleportationDeviceItemID); // Function WTL.WTLCharacter.Client_ShowTeleportationDeviceWindowWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ac700
	void Client_ShowSteamStoreInterface(); // Function WTL.WTLCharacter.Client_ShowSteamStoreInterface // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x17abd30
	void Client_ShowContentInventory(struct AActor* Actor); // Function WTL.WTLCharacter.Client_ShowContentInventory // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17ab350
	void Client_ShowActionTimerWidget(float Timeout, enum class EWTLActionTimerWidgetType Type, enum class EWTLCountdownSliderWidgetFillingType FillingType); // Function WTL.WTLCharacter.Client_ShowActionTimerWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17aefb0
	void Client_SetDeathFromAnomaly(bool DeathFromAnomaly, bool ShowAllMeshes, bool DeathSimulatePhysics); // Function WTL.WTLCharacter.Client_SetDeathFromAnomaly // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17ad550
	void Client_SetAllMeshesVisible(bool bVisible); // Function WTL.WTLCharacter.Client_SetAllMeshesVisible // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a8d50
	void Client_SetAdminGodMode(bool Value); // Function WTL.WTLCharacter.Client_SetAdminGodMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a9d60
	void Client_SetAdminDropMode(bool Value); // Function WTL.WTLCharacter.Client_SetAdminDropMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a9c80
	void Client_SelectSlot(char SlotNumber, bool AllowReselect, bool Force); // Function WTL.WTLCharacter.Client_SelectSlot // (Final|Net|NetReliableNative|Event|Private|NetClient|NetValidate) // @ game+0x17b01c0
	void Client_ResetCurrentInteractiveObjetHighlight(); // Function WTL.WTLCharacter.Client_ResetCurrentInteractiveObjetHighlight // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x17a8c10
	void Client_ResetAimMode(); // Function WTL.WTLCharacter.Client_ResetAimMode // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17b0e60
	void Client_RadiationDetectorSignal(float Power); // Function WTL.WTLCharacter.Client_RadiationDetectorSignal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a8a70
	void Client_OnUsePortalError(); // Function WTL.WTLCharacter.Client_OnUsePortalError // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17aaf20
	void Client_OnUsePortal(); // Function WTL.WTLCharacter.Client_OnUsePortal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17aaf40
	void Client_OnStuffPlacementMode(uint16_t StuffID); // Function WTL.WTLCharacter.Client_OnStuffPlacementMode // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ace30
	void Client_OnPostSelectSlot(char SlotNumber); // Function WTL.WTLCharacter.Client_OnPostSelectSlot // (Final|Net|NetReliableNative|Event|Private|NetClient|NetValidate) // @ game+0x17b00c0
	void Client_OnPosses(uint64_t PossesedCharacterID); // Function WTL.WTLCharacter.Client_OnPosses // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17af300
	void Client_OnPlaceableStuffUsed(struct AActor* Actor); // Function WTL.WTLCharacter.Client_OnPlaceableStuffUsed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17ae7f0
	void Client_OnMedicineApplied(uint16_t MedicineID); // Function WTL.WTLCharacter.Client_OnMedicineApplied // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a8990
	void Client_OnItemUnequipped(); // Function WTL.WTLCharacter.Client_OnItemUnequipped // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ad210
	void Client_OnItemEquipped(); // Function WTL.WTLCharacter.Client_OnItemEquipped // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ad230
	void Client_OnHideItem(); // Function WTL.WTLCharacter.Client_OnHideItem // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ad250
	void Client_OnEventZoneLeave(struct AWTLEventPoint* EventPoint); // Function WTL.WTLCharacter.Client_OnEventZoneLeave // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17aec90
	void Client_OnEventZoneFinished(struct AWTLEventPoint* EventPoint, bool Successful); // Function WTL.WTLCharacter.Client_OnEventZoneFinished // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17aeb30
	void Client_OnEventZoneEnter(struct AWTLEventPoint* EventPoint, bool ShowInformer); // Function WTL.WTLCharacter.Client_OnEventZoneEnter // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17aed70
	void Client_OnEquipmentItemStateChanged(uint16_t StuffID, bool bIsEnabled); // Function WTL.WTLCharacter.Client_OnEquipmentItemStateChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17aa9f0
	void Client_OnEffectRemoved(enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLCharacter.Client_OnEffectRemoved // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17aac30
	void Client_OnEffectAdded(enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLCharacter.Client_OnEffectAdded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17aad00
	void Client_OnCharacterUsed(); // Function WTL.WTLCharacter.Client_OnCharacterUsed // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ae8d0
	void Client_OnBulletFlyNear(struct FVector_NetQuantize Position, enum class EWTLCaliber Caliber); // Function WTL.WTLCharacter.Client_OnBulletFlyNear // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17af190
	void Client_NDPDetectorSignal(float Power); // Function WTL.WTLCharacter.Client_NDPDetectorSignal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a8b40
	void Client_LockInputUnequipUsableItemAndUse(); // Function WTL.WTLCharacter.Client_LockInputUnequipUsableItemAndUse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a9e60
	void Client_HideActionTimerWidget(bool Success); // Function WTL.WTLCharacter.Client_HideActionTimerWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17aeed0
	void Client_EffectCameraManager(float AddVingette, float AddFringe, bool IsHideUsableItem, bool RemoveAiming); // Function WTL.WTLCharacter.Client_EffectCameraManager // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x17a93d0
	void Client_CoreHacking_Result(char Result); // Function WTL.WTLCharacter.Client_CoreHacking_Result // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17aa590
	void Client_ClearChat(); // Function WTL.WTLCharacter.Client_ClearChat // (Net|Native|Event|Public|NetClient) // @ game+0x17a6fe0
	void Client_ApplyHearingDamage(float Duration, float Falloff); // Function WTL.WTLCharacter.Client_ApplyHearingDamage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a9e80
	void Client_AddMarkers(struct TArray<struct FWTLMarkerMemoryElement> Markers); // Function WTL.WTLCharacter.Client_AddMarkers // (Net|Native|Event|Public|NetClient) // @ game+0x17a7380
	void CleanMotionVector(); // Function WTL.WTLCharacter.CleanMotionVector // (Final|Native|Public|BlueprintCallable) // @ game+0x17a8790
	void ChickenStatusDelta(int32_t Delta); // Function WTL.WTLCharacter.ChickenStatusDelta // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17a7000
	bool CharacterStunned(); // Function WTL.WTLCharacter.CharacterStunned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a74f0
	bool CanSpawnOnSafeZone(); // Function WTL.WTLCharacter.CanSpawnOnSafeZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa1a0
	void CancelQTE(bool bIsFromClientside); // Function WTL.WTLCharacter.CancelQTE // (Final|Native|Public|BlueprintCallable) // @ game+0x17aa810
	void Broadcast_SetAllMeshesVisible(bool bVisible); // Function WTL.WTLCharacter.Broadcast_SetAllMeshesVisible // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17a8e30
	void Broadcast_PlayMontage(struct UAnimMontage* MontageToPlay, bool BlockInput); // Function WTL.WTLCharacter.Broadcast_PlayMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17a8f10
	void Broadcast_OnStunhit(enum class EWTLCharacterStunhitDirection StunhitDirection); // Function WTL.WTLCharacter.Broadcast_OnStunhit // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17a91b0
	bool BPHavePremium(); // Function WTL.WTLCharacter.BPHavePremium // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa1e0
	struct FString BPGetCharacterName(); // Function WTL.WTLCharacter.BPGetCharacterName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa330
	int64_t BPGetCharacterID(); // Function WTL.WTLCharacter.BPGetCharacterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aa420
	bool AvailableNear(); // Function WTL.WTLCharacter.AvailableNear // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a7520
	bool AvailableForPursuit(); // Function WTL.WTLCharacter.AvailableForPursuit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17a7560
	void ApplyHearingDamage(float Duration, float Falloff); // Function WTL.WTLCharacter.ApplyHearingDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9e80
	void ApplyEffectToCharacter(enum class EWTLCharacterEffectType EffectType, float Value); // Function WTL.WTLCharacter.ApplyEffectToCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x17aadd0
	void AllLevelsLoadedAtStart(); // Function WTL.WTLCharacter.AllLevelsLoadedAtStart // (Final|Native|Private) // @ game+0x17b1190
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLCharacter.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ab040
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLCharacter.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17aaf60
	bool AIInterface_IsAlive(); // Function WTL.WTLCharacter.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ab150
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLCharacter.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ab0c0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLCharacter.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ab110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLCharacter.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ab080
};

// Class WTL.WTLAnimationMetaData
// Size: 0x30 (Inherited: 0x28)
struct UWTLAnimationMetaData : UAnimMetaData {
	bool bShouldReplaceAnimInstance; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float RagdollBlendWeight; // 0x2c(0x04)
};

// Class WTL.WTLRootMotionAnimationMetaData
// Size: 0x30 (Inherited: 0x28)
struct UWTLRootMotionAnimationMetaData : UAnimMetaData {
	enum class EWTLRootMotionControlLockingType RootMotionControllerLockingType; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class WTL.WTLCameraLimitsAnimationMetaData
// Size: 0x38 (Inherited: 0x28)
struct UWTLCameraLimitsAnimationMetaData : UAnimMetaData {
	float YawLimit; // 0x28(0x04)
	float MinPitchLimit; // 0x2c(0x04)
	float MaxPitchLimit; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class WTL.WTLCameraStyleAnimationMetaData
// Size: 0x38 (Inherited: 0x28)
struct UWTLCameraStyleAnimationMetaData : UAnimMetaData {
	struct FName CameraStyle; // 0x28(0x08)
	float FreeCameraDistance; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class WTL.WTLPawnRotationLockingAnimationMetaData
// Size: 0x30 (Inherited: 0x28)
struct UWTLPawnRotationLockingAnimationMetaData : UAnimMetaData {
	bool bOverrideUseControllerPitch; // 0x28(0x01)
	bool bNewUseControllerPitchValue; // 0x29(0x01)
	bool bOverrideUseControllerYaw; // 0x2a(0x01)
	bool bNewUseControllerYawValue; // 0x2b(0x01)
	bool bOverrideUseControllerRoll; // 0x2c(0x01)
	bool bNewUseControllerRollValue; // 0x2d(0x01)
	char pad_2E[0x2]; // 0x2e(0x02)
};

// Class WTL.WTLSpecialStatesAnimationMetaData
// Size: 0x30 (Inherited: 0x28)
struct UWTLSpecialStatesAnimationMetaData : UAnimMetaData {
	bool bOverrideCrouchState; // 0x28(0x01)
	bool bNewCrouchState; // 0x29(0x01)
	bool bLockMovement; // 0x2a(0x01)
	bool BlockCameraRotation; // 0x2b(0x01)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class WTL.WTLPawnCapsuleCollisionRemover
// Size: 0x28 (Inherited: 0x28)
struct UWTLPawnCapsuleCollisionRemover : UAnimMetaData {
};

// Class WTL.WTLPawnInVehicleMetaData
// Size: 0x30 (Inherited: 0x28)
struct UWTLPawnInVehicleMetaData : UAnimMetaData {
	bool bShowCharacterMesh; // 0x28(0x01)
	bool bHideMeshIfMontageEnded; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)
};

// Class WTL.WTLResetLowerBodyRotationAnimationMetaData
// Size: 0x28 (Inherited: 0x28)
struct UWTLResetLowerBodyRotationAnimationMetaData : UAnimMetaData {
};

// Class WTL.WTLCharacterBodyAnimInstance
// Size: 0xfa0 (Inherited: 0x2c0)
struct UWTLCharacterBodyAnimInstance : UAnimInstance {
	char pad_2C0[0x40]; // 0x2c0(0x40)
	struct FWTLCharacterAnimInstanceProxy CharacterProxy; // 0x300(0x770)
	struct TMap<uint16_t, uint16_t> WeaponItemRemap; // 0xa70(0x50)
	struct TMap<uint16_t, uint16_t> StuffItemRemap; // 0xac0(0x50)
	bool IsFirstPerson; // 0xb10(0x01)
	enum class EWTLSex CharacterSex; // 0xb11(0x01)
	char pad_B12[0x2]; // 0xb12(0x02)
	struct FVector LookDirection; // 0xb14(0x0c)
	float CameraAimOffset; // 0xb20(0x04)
	float CameraAimOffsetInterpSpeedMultiplier; // 0xb24(0x04)
	float MoveDirection; // 0xb28(0x04)
	float SnuggleValue; // 0xb2c(0x04)
	float MovementSpeed; // 0xb30(0x04)
	float VelocityZ; // 0xb34(0x04)
	float BodyTilt; // 0xb38(0x04)
	bool bIsInAir; // 0xb3c(0x01)
	bool bIsUnderWater; // 0xb3d(0x01)
	bool bIsInWater; // 0xb3e(0x01)
	bool bMovesOnWater; // 0xb3f(0x01)
	bool bIsAiming; // 0xb40(0x01)
	bool bIsCrouch; // 0xb41(0x01)
	bool bIsProne; // 0xb42(0x01)
	bool bIsJumping; // 0xb43(0x01)
	bool bIsSprinting; // 0xb44(0x01)
	bool bIsLadderClimbing; // 0xb45(0x01)
	char pad_B46[0x2]; // 0xb46(0x02)
	struct FVector InputVector; // 0xb48(0x0c)
	float MoveSpeedValue; // 0xb54(0x04)
	float MoveTurnValue; // 0xb58(0x04)
	enum class EWTLCharacterMoveState MovementState; // 0xb5c(0x01)
	char pad_B5D[0x3]; // 0xb5d(0x03)
	float HoldingBreath; // 0xb60(0x04)
	float StaminaValue; // 0xb64(0x04)
	float TirednessValue; // 0xb68(0x04)
	float TirednessValueMultiplier; // 0xb6c(0x04)
	struct UCurveVector* AnimationCurve; // 0xb70(0x08)
	struct FRotator CurrentWeaponRotation; // 0xb78(0x0c)
	enum class EWTLHandsState HandsState; // 0xb84(0x01)
	char pad_B85[0x3]; // 0xb85(0x03)
	float ItemEquipTime; // 0xb88(0x04)
	float ItemUnequipTime; // 0xb8c(0x04)
	float LeftHandThumbInputUp; // 0xb90(0x04)
	float LeftHandThumbInputRight; // 0xb94(0x04)
	bool CanUseHandsLocomotion; // 0xb98(0x01)
	char pad_B99[0x3]; // 0xb99(0x03)
	struct FName IKRightFootAlphaCurveName; // 0xb9c(0x08)
	struct FName IKLeftFootAlphaCurveName; // 0xba4(0x08)
	struct FName IKRightKneeSocketName; // 0xbac(0x08)
	struct FName IKLeftKneeSocketName; // 0xbb4(0x08)
	float IKHipInterpSpeed; // 0xbbc(0x04)
	float IKEffectorPositionInterpSpeed; // 0xbc0(0x04)
	float IKAlphaInterpSpeed; // 0xbc4(0x04)
	float IKFootNormalInterpSpeed; // 0xbc8(0x04)
	float IKHipOffset; // 0xbcc(0x04)
	char pad_BD0[0x4]; // 0xbd0(0x04)
	float IKFloorTraceValue; // 0xbd4(0x04)
	struct FVector IKHipTarget; // 0xbd8(0x0c)
	struct FVector IKRightFootEffectorPosition; // 0xbe4(0x0c)
	char pad_BF0[0xc]; // 0xbf0(0x0c)
	struct FVector IKLeftFootEffectorPosition; // 0xbfc(0x0c)
	char pad_C08[0xc]; // 0xc08(0x0c)
	struct FVector IKRightKneePosition; // 0xc14(0x0c)
	struct FVector IKLeftKneePosition; // 0xc20(0x0c)
	struct FVector IKRightFootNormal; // 0xc2c(0x0c)
	char pad_C38[0xc]; // 0xc38(0x0c)
	struct FVector IKLeftFootNormal; // 0xc44(0x0c)
	char pad_C50[0xc]; // 0xc50(0x0c)
	bool bIKRightFootHit; // 0xc5c(0x01)
	bool bIKLeftFootHit; // 0xc5d(0x01)
	char pad_C5E[0x2]; // 0xc5e(0x02)
	float IKRightFootAlpha; // 0xc60(0x04)
	float IKLeftFootAlpha; // 0xc64(0x04)
	struct FName IKHandsOffsetBoneName; // 0xc68(0x08)
	struct FTransform IKHandsOffsetBoneTransform; // 0xc70(0x30)
	int32_t UsableItemID; // 0xca0(0x04)
	int32_t LastUsableItemID; // 0xca4(0x04)
	enum class EWTLItemType UsableItemType; // 0xca8(0x01)
	char pad_CA9[0x7]; // 0xca9(0x07)
	struct TArray<float> UsableItemAnimationFloatParameters; // 0xcb0(0x10)
	struct TArray<struct FVector> UsableItemAnimationVectorParameters; // 0xcc0(0x10)
	struct FVector HandsOffset; // 0xcd0(0x0c)
	enum class EWTLWeaponType CurrentWeaponType; // 0xcdc(0x01)
	char pad_CDD[0x3]; // 0xcdd(0x03)
	float RotationSpeedVertical; // 0xce0(0x04)
	struct FVector RecoilTranslation; // 0xce4(0x0c)
	struct FRotator RecoilRotation; // 0xcf0(0x0c)
	char pad_CFC[0x4]; // 0xcfc(0x04)
	struct UAnimSequence* IdleAnimation; // 0xd00(0x08)
	struct UAnimSequence* SnuggleAnimation; // 0xd08(0x08)
	struct UAimOffsetBlendSpace1D* AimOffsetBlendSpace; // 0xd10(0x08)
	struct FVector AimingHandsTranslation; // 0xd18(0x0c)
	struct FVector AimingHandsOffset; // 0xd24(0x0c)
	struct FVector MissileSocketOffset; // 0xd30(0x0c)
	struct FVector ThumbLOffset; // 0xd3c(0x0c)
	struct FVector ThumbROffset; // 0xd48(0x0c)
	float FirstSwingingAnimAlphaScaleParameter; // 0xd54(0x04)
	float SecondSwingingAnimAlphaScaleParameter; // 0xd58(0x04)
	float ThirdPersonSwingingAnimAlphaParameter; // 0xd5c(0x04)
	float FirstPersonSwingingAnimAlphaParameter; // 0xd60(0x04)
	float CombatBreathAnimPlayRateScaleParameter; // 0xd64(0x04)
	float CombatBreathAnimPlayRateMaxValueParameter; // 0xd68(0x04)
	float CombatBreathAnimPlayRateMinValueParameter; // 0xd6c(0x04)
	float ThirdPersonCombatBreathAnimAimingAlphaMaxValueParameter; // 0xd70(0x04)
	float ThirdPersonCombatBreathAnimAimingAlphaMinValueParameter; // 0xd74(0x04)
	float FirstPersonCombatBreathAnimAlphaParameter; // 0xd78(0x04)
	float ThirdPersonWeaponRotationAnimAlphaParameter; // 0xd7c(0x04)
	float FirstPersonWeaponRotationAnimStaminaAlphaMinValueParameter; // 0xd80(0x04)
	float FirstPersonWeaponRotationAnimStaminaAlphaMaxValueParameter; // 0xd84(0x04)
	float FirstPersonWeaponRotationAnimAimingAlphaMinValueParameter; // 0xd88(0x04)
	float FirstPersonWeaponRotationAnimAimingAlphaMaxValueParameter; // 0xd8c(0x04)
	float WeaponRotationLocomotionAimingAlphaMinValueParameter; // 0xd90(0x04)
	float WeaponRotationLocomotionAimingAlphaMaxValueParameter; // 0xd94(0x04)
	float WeaponRotationLocomotionHoldingBreathAlphaMinValueParameter; // 0xd98(0x04)
	float WeaponRotationLocomotionHoldingBreathAlphaMaxValueParameter; // 0xd9c(0x04)
	struct FName RightPocketLocationSocketName; // 0xda0(0x08)
	struct FName LeftPocketLocationSocketName; // 0xda8(0x08)
	struct FName LeftJointTargetSocketName; // 0xdb0(0x08)
	struct FName RightJointTargetSocketName; // 0xdb8(0x08)
	float AimingRecoilAlphaMinValueParameter; // 0xdc0(0x04)
	float AimingRecoilAlphaMaxValueParameter; // 0xdc4(0x04)
	float ThirdPersonStaminaValueAnimPlayRateMinValueParameter; // 0xdc8(0x04)
	float ThirdPersonStaminaValueAnimPlayRateMaxValueParameter; // 0xdcc(0x04)
	float WeaponRotationAimOffsetVelocityMinValueParameter; // 0xdd0(0x04)
	float WeaponRotationAimOffsetVelocityMaxValueParameter; // 0xdd4(0x04)
	float StaminaInterpolationSpeed; // 0xdd8(0x04)
	float NonSprintingSpeedTreshold; // 0xddc(0x04)
	struct FVector FloorNormal; // 0xde0(0x0c)
	float DotPCapsule; // 0xdec(0x04)
	float DotPRightFoot; // 0xdf0(0x04)
	float DotPLeftFoot; // 0xdf4(0x04)
	float ForwardVelocity; // 0xdf8(0x04)
	float SideVelocity; // 0xdfc(0x04)
	float LowerBodyRelativeAngle; // 0xe00(0x04)
	float LowerBodyFixedRelativeAngle; // 0xe04(0x04)
	enum class EWTLCharacterAnimationInstanceMovementState LocomotionState; // 0xe08(0x01)
	char pad_E09[0x3]; // 0xe09(0x03)
	float RotationSpeedHorizontalWithDirection; // 0xe0c(0x04)
	float OneMinusIsNoMovementCurveValue; // 0xe10(0x04)
	float OneMinusEmptyHandsCurveValue; // 0xe14(0x04)
	float AimingRecoilAlpha; // 0xe18(0x04)
	float ThirdPersonStaminaValueAnimPlayRate; // 0xe1c(0x04)
	float IsNotFirstPersonAlpha; // 0xe20(0x04)
	float WeaponRotationAimOffsetForwardVelocity; // 0xe24(0x04)
	float WeaponRotationAimOffsetSideVelocity; // 0xe28(0x04)
	float CombatBreathAnimPlayRate; // 0xe2c(0x04)
	float CombatBreathAnimAlpha; // 0xe30(0x04)
	float WeaponRotationAnimAlpha; // 0xe34(0x04)
	float WeaponRotationLocomotionAlpha; // 0xe38(0x04)
	struct FRotator AimOffsetBoneRotation; // 0xe3c(0x0c)
	float AimingAlphaCurveValue; // 0xe48(0x04)
	bool bIsInCombatMode; // 0xe4c(0x01)
	char pad_E4D[0x3]; // 0xe4d(0x03)
	float FirstSwingAnimAlpha; // 0xe50(0x04)
	float SecondSwingAnimAlpha; // 0xe54(0x04)
	float AimOffsetBoneRotationAlpha; // 0xe58(0x04)
	struct FVector HandsTranslationOffset; // 0xe5c(0x0c)
	float OneMinusAimingAlphaCurveValue; // 0xe68(0x04)
	struct FVector AimingHandsTranslationOffset; // 0xe6c(0x0c)
	struct FVector HandsAimOffsetDownTranslationOffset; // 0xe78(0x0c)
	float HandsAimOffsetDownAlpha; // 0xe84(0x04)
	struct FVector RightPocketLocation; // 0xe88(0x0c)
	struct FVector LeftPocketLocation; // 0xe94(0x0c)
	struct FVector LeftJointTargetLocation; // 0xea0(0x0c)
	struct FVector RightJointTargetLocation; // 0xeac(0x0c)
	float RightHandAlphaCurveValue; // 0xeb8(0x04)
	float LeftHandAlphaCurveValue; // 0xebc(0x04)
	struct FRotator LowerBodyRotation; // 0xec0(0x0c)
	struct FRotator IKFootRootBoneRotation; // 0xecc(0x0c)
	struct FVector PelvisOffset; // 0xed8(0x0c)
	struct FRotator RightFootRotation; // 0xee4(0x0c)
	struct FRotator LeftFootRotation; // 0xef0(0x0c)
	float LadderLoopAnimPlayRate; // 0xefc(0x04)
	bool IsLadderNoMovement; // 0xf00(0x01)
	char pad_F01[0x3]; // 0xf01(0x03)
	struct FVector ScaleRibCageVector; // 0xf04(0x0c)
	struct FVector InvertScaleRibCageVector; // 0xf10(0x0c)
	struct FVector ScaleNeckVector; // 0xf1c(0x0c)
	struct FVector ScaleHeadVector; // 0xf28(0x0c)
	struct FVector ScaleHandsVector; // 0xf34(0x0c)
	struct FVector InvertScaleHandsVector; // 0xf40(0x0c)
	struct FVector ScaleFeetVector; // 0xf4c(0x0c)
	struct FVector InvertScaleFeetVector; // 0xf58(0x0c)
	bool bIsUnequip; // 0xf64(0x01)
	char pad_F65[0x3]; // 0xf65(0x03)
	float FIsUnequip; // 0xf68(0x04)
	float FScaleNeck; // 0xf6c(0x04)
	float FScaleHead; // 0xf70(0x04)
	float FScaleRibCage; // 0xf74(0x04)
	float FScaleBody; // 0xf78(0x04)
	float FScaleHands; // 0xf7c(0x04)
	float FScaleFeet; // 0xf80(0x04)
	float FTiltXWithFishingRod; // 0xf84(0x04)
	float FTiltYWithFishingRod; // 0xf88(0x04)
	float FRodResistanceValue; // 0xf8c(0x04)
	bool InFishingMode; // 0xf90(0x01)
	bool NowIsFishing; // 0xf91(0x01)
	bool ShowCathedFish; // 0xf92(0x01)
	char pad_F93[0x1]; // 0xf93(0x01)
	int32_t Complexion; // 0xf94(0x04)
	char pad_F98[0x8]; // 0xf98(0x08)

	void UpdateComplexity(); // Function WTL.WTLCharacterBodyAnimInstance.UpdateComplexity // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x17b8d20
	bool K2_MortarLoadingInProccess(); // Function WTL.WTLCharacterBodyAnimInstance.K2_MortarLoadingInProccess // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b8680
	struct FVector K2_GetMortarSocketLocationInComponentSpace(struct FName Socket); // Function WTL.WTLCharacterBodyAnimInstance.K2_GetMortarSocketLocationInComponentSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b8a00
	struct FVector K2_GetMortarSocketLocationInBoneSpace(struct FName Bone, struct FName Socket); // Function WTL.WTLCharacterBodyAnimInstance.K2_GetMortarSocketLocationInBoneSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b87c0
	struct FVector K2_GetMortarSocketLocation(struct FName Socket); // Function WTL.WTLCharacterBodyAnimInstance.K2_GetMortarSocketLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b8bd0
	float K2_GetMortarInclineAlpha(); // Function WTL.WTLCharacterBodyAnimInstance.K2_GetMortarInclineAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b8710
	struct FVector GetUsableItemAnimationVectorParameter(int32_t Index); // Function WTL.WTLCharacterBodyAnimInstance.GetUsableItemAnimationVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b8e40
	float GetUsableItemAnimationFloatParameter(int32_t Index); // Function WTL.WTLCharacterBodyAnimInstance.GetUsableItemAnimationFloatParameter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17b8d40
};

// Class WTL.WTLCharacterCameraComponent
// Size: 0x7d0 (Inherited: 0x7c0)
struct UWTLCharacterCameraComponent : UCameraComponent {
	char pad_7C0[0x10]; // 0x7c0(0x10)
};

// Class WTL.WTLCharacterCustomizationHelper
// Size: 0x28 (Inherited: 0x28)
struct UWTLCharacterCustomizationHelper : UObject {
};

// Class WTL.WTLCharacterDrop
// Size: 0x368 (Inherited: 0x260)
struct AWTLCharacterDrop : AWTLInteractiveObject {
	char pad_260[0x10]; // 0x260(0x10)
	uint64_t m_CharacterID; // 0x270(0x08)
	uint64_t m_CharacterGroupID; // 0x278(0x08)
	uint16_t m_CharacterClanID; // 0x280(0x02)
	enum class EWTLFaction m_CharacterFaction; // 0x282(0x01)
	char pad_283[0x1]; // 0x283(0x01)
	int32_t m_SlotsCount; // 0x284(0x04)
	struct FWTLStorageContent m_StorageContent; // 0x288(0xa8)
	struct USceneComponent* m_SceneComponent; // 0x330(0x08)
	struct UStaticMeshComponent* m_StaticMeshComponent; // 0x338(0x08)
	bool IsHighLighted; // 0x340(0x01)
	char pad_341[0x27]; // 0x341(0x27)

	void OnRep_StorageContent(); // Function WTL.WTLCharacterDrop.OnRep_StorageContent // (Final|Native|Public) // @ game+0x17b94c0
};

// Class WTL.WTLCharacterEffectsSystem
// Size: 0x40 (Inherited: 0x28)
struct UWTLCharacterEffectsSystem : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class WTL.WTLCharacterIdentityComponent
// Size: 0x880 (Inherited: 0xb0)
struct UWTLCharacterIdentityComponent : UActorComponent {
	char pad_B0[0x448]; // 0xb0(0x448)
	struct TMap<struct AActor*, struct FWTLIdentificationMemoryElement> m_IdentificationMemory; // 0x4f8(0x50)
	struct TArray<struct FWTLMarkerMemoryElement> m_MarkersMemory; // 0x548(0x10)
	struct UFont* m_Font; // 0x558(0x08)
	struct UTexture2D* m_IdentificationIconsAtlas; // 0x560(0x08)
	struct UTexture2D* m_IdentificationAIIconsAtlas; // 0x568(0x08)
	struct UTexture2D* m_HealthbarSliceTexture; // 0x570(0x08)
	struct UTexture2D* m_BorderTexture; // 0x578(0x08)
	struct UTexture2D* m_MobileResurrectionPointIconTexture; // 0x580(0x08)
	struct UTexture2D* m_MobileHealPointIconTexture; // 0x588(0x08)
	struct UTexture2D* m_ElectronicBaitTexture; // 0x590(0x08)
	struct UTexture2D* m_FortificationSafeZoneJammerTexture; // 0x598(0x08)
	struct UTexture2D* m_ConfederationIconTexture; // 0x5a0(0x08)
	struct UTexture2D* m_BlackSunsetIconTexture; // 0x5a8(0x08)
	struct UTexture2D* m_PVPEnabledIconTexture; // 0x5b0(0x08)
	struct UTexture2D* m_FounderIconTexture; // 0x5b8(0x08)
	struct UTexture2D* m_DroneIconTexture; // 0x5c0(0x08)
	struct UTexture2D* m_MortarIconTexture; // 0x5c8(0x08)
	struct UTexture2D* m_ConfederationHealthbarLogo; // 0x5d0(0x08)
	struct UTexture2D* m_BlackSunsetHealthbarLogo; // 0x5d8(0x08)
	struct UTexture2D* m_HealthbarOnlyBackground; // 0x5e0(0x08)
	struct UTexture2D* m_ClanMembersSimplifiedIcon; // 0x5e8(0x08)
	struct UTexture2D* m_ClanCommanderSimplifiedIcon; // 0x5f0(0x08)
	struct TMap<enum class EWTLCharacterClass, struct FCanvasIcon> m_CharacterClassIcons; // 0x5f8(0x50)
	struct TMap<enum class EWTLPlayerType, struct FCanvasIcon> m_CharacterStaffIcons; // 0x648(0x50)
	struct TMap<enum class EWTLCharacterEffectType, struct FCanvasIcon> m_CharacterEffectIcons; // 0x698(0x50)
	char pad_6E8[0x58]; // 0x6e8(0x58)
	struct UCurveFloat* MemoryAlphaColorCurve; // 0x740(0x08)
	struct FLinearColor FriendTextColor; // 0x748(0x10)
	struct FLinearColor NeutralTextColor; // 0x758(0x10)
	struct FLinearColor EnemyTextColor; // 0x768(0x10)
	struct FLinearColor AgressorTextColor; // 0x778(0x10)
	struct FLinearColor FriendClanTextColor; // 0x788(0x10)
	struct FLinearColor NeutralClanTextColor; // 0x798(0x10)
	struct FLinearColor EnemyClanTextColor; // 0x7a8(0x10)
	struct FLinearColor GroupMemberNameColor; // 0x7b8(0x10)
	struct FLinearColor ClanMemberNameColor; // 0x7c8(0x10)
	struct UCurveLinearColor* ReputationColorCurve; // 0x7d8(0x08)
	struct FLinearColor IconTradeForExperienceColor; // 0x7e0(0x10)
	struct FColor MonsterDangerLevelColorNone; // 0x7f0(0x04)
	struct FColor MonsterDangerLevelColorLow; // 0x7f4(0x04)
	struct FColor MonsterDangerLevelColorBelowNormal; // 0x7f8(0x04)
	struct FColor MonsterDangerLevelColorNormal; // 0x7fc(0x04)
	struct FColor MonsterDangerLevelColorAboveNormal; // 0x800(0x04)
	struct FColor MonsterDangerLevelColorHigh; // 0x804(0x04)
	struct FColor MonsterDangerLevelColorCritical; // 0x808(0x04)
	float IdentityConeCheckInterval; // 0x80c(0x04)
	float DistanceDependentIdentityWidgetOffset; // 0x810(0x04)
	float IdentificationWidgetMinimumScale; // 0x814(0x04)
	float IdentificationWidgetMaximumScale; // 0x818(0x04)
	float IdentificationVerticalScreenPositionTreshold; // 0x81c(0x04)
	char pad_820[0x4]; // 0x820(0x04)
	float IdentityGainPerSec; // 0x824(0x04)
	float IdentityCooldownPerSec; // 0x828(0x04)
	float IdentityLimit; // 0x82c(0x04)
	float IdentityLevelToSpot; // 0x830(0x04)
	float FarScreenRadiusStart; // 0x834(0x04)
	float FarScreenRadiusEnd; // 0x838(0x04)
	bool bIsDebugEnabled; // 0x83c(0x01)
	bool bIsIdentityEnabled; // 0x83d(0x01)
	bool bIsPlayersIdentityEnabled; // 0x83e(0x01)
	bool bIsMonstersIdentityEnabled; // 0x83f(0x01)
	bool bIsLevelObjectsIdentityEnabled; // 0x840(0x01)
	bool bIsNPCIdentityEnabled; // 0x841(0x01)
	bool bIsEnemyNPCIdentityEnabled; // 0x842(0x01)
	char pad_843[0x1]; // 0x843(0x01)
	float IdentityDistance; // 0x844(0x04)
	float FOVConeRadiusDivider; // 0x848(0x04)
	float IdentificationScaleup; // 0x84c(0x04)
	enum class EWTLSimplifiedIdentificationType SimplifiedIdentificationType; // 0x850(0x01)
	char pad_851[0x3]; // 0x851(0x03)
	float IdentificationTransparency; // 0x854(0x04)
	struct TSoftObjectPtr<UCurveFloat> IdentificationOverheadOffsetByDistanceCurve; // 0x858(0x28)
};

// Class WTL.WTLCharacterMovementComponent
// Size: 0xb70 (Inherited: 0xb00)
struct UWTLCharacterMovementComponent : UCharacterMovementComponent {
	char pad_B00[0x48]; // 0xb00(0x48)
	float CrouchingSpeed; // 0xb48(0x04)
	float TiltAngle; // 0xb4c(0x04)
	float TiltSpeed; // 0xb50(0x04)
	float LadderClimbingSpeed; // 0xb54(0x04)
	float LadderClimbingFriction; // 0xb58(0x04)
	float LadderMovementFloorTraceDistance; // 0xb5c(0x04)
	float PronedHalfHeight; // 0xb60(0x04)
	float SwimmedHalfHeight; // 0xb64(0x04)
	char bTransportMovementMode : 1; // 0xb68(0x01)
	char pad_B68_1 : 7; // 0xb68(0x01)
	char pad_B69[0x7]; // 0xb69(0x07)

	void Server_SetLadderClimbing(bool Value); // Function WTL.WTLCharacterMovementComponent.Server_SetLadderClimbing // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ba560
	void NetMulticast_PlayLadderMontage(struct AWTLLadder* Ladder, enum class EWTLLadderMontageType LadderMontageType); // Function WTL.WTLCharacterMovementComponent.NetMulticast_PlayLadderMontage // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ba400
};

// Class WTL.WTLCharacterPreview
// Size: 0x610 (Inherited: 0x220)
struct AWTLCharacterPreview : AActor {
	struct USkeletalMeshComponent* Base; // 0x220(0x08)
	struct USkeletalMeshComponent* TorsoSlot; // 0x228(0x08)
	struct USkeletalMeshComponent* Head; // 0x230(0x08)
	struct USkeletalMeshComponent* HeadSlot; // 0x238(0x08)
	struct USkeletalMeshComponent* Legs; // 0x240(0x08)
	struct USkeletalMeshComponent* LegsSlot; // 0x248(0x08)
	struct USkeletalMeshComponent* Feet; // 0x250(0x08)
	struct USkeletalMeshComponent* FeetSlot; // 0x258(0x08)
	struct USkeletalMeshComponent* BackpackSlot; // 0x260(0x08)
	struct USkeletalMeshComponent* GlassesSlot; // 0x268(0x08)
	struct USkeletalMeshComponent* EquipmentSlot1; // 0x270(0x08)
	struct USkeletalMeshComponent* EquipmentSlot2; // 0x278(0x08)
	struct USkeletalMeshComponent* EquipmentSlot3; // 0x280(0x08)
	struct USkeletalMeshComponent* EquipmentSlot4; // 0x288(0x08)
	struct USkeletalMeshComponent* WatchesSlot; // 0x290(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0; // 0x298(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0MuzzleMount; // 0x2a0(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0MuzzleAttachment; // 0x2a8(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0FlashlightMount; // 0x2b0(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0FlashlightAttachment; // 0x2b8(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0ScopeMount; // 0x2c0(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot0ScopeAttachment; // 0x2c8(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1; // 0x2d0(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1MuzzleMount; // 0x2d8(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1MuzzleAttachment; // 0x2e0(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1FlashlightMount; // 0x2e8(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1FlashlightAttachment; // 0x2f0(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1ScopeMount; // 0x2f8(0x08)
	struct UStaticMeshComponent* EquippedWeaponSlot1ScopeAttachment; // 0x300(0x08)
	struct UStaticMeshComponent* EquippedStuffSlot1; // 0x308(0x08)
	struct UStaticMeshComponent* HolsterSlot; // 0x310(0x08)
	struct UStaticMeshComponent* EquippedPistolPreviewSlot; // 0x318(0x08)
	struct UStaticMeshComponent* SheathSlot; // 0x320(0x08)
	struct UStaticMeshComponent* SheathPreviewSlot; // 0x328(0x08)
	struct UStaticMeshComponent* ItemInHands; // 0x330(0x08)
	struct UStaticMeshComponent* ItemInHandsMuzzleMount; // 0x338(0x08)
	struct UStaticMeshComponent* ItemInHandsMuzzleAttachmeht; // 0x340(0x08)
	struct UStaticMeshComponent* ItemInHandsFlashlightMount; // 0x348(0x08)
	struct UStaticMeshComponent* ItemInHandsFlashlightAttachment; // 0x350(0x08)
	struct UStaticMeshComponent* ItemInHandsScopeMount; // 0x358(0x08)
	struct UStaticMeshComponent* ItemInHandsScopeAttachment; // 0x360(0x08)
	struct TSoftObjectPtr<USkeletalMesh> MaleTorsoMeshFullArms; // 0x368(0x28)
	struct TSoftObjectPtr<USkeletalMesh> MaleTorsoMeshHalfArms; // 0x390(0x28)
	struct TSoftObjectPtr<USkeletalMesh> MaleTorsoMeshHandsOnly; // 0x3b8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleTorsoMeshFullArms; // 0x3e0(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleTorsoMeshHalfArms; // 0x408(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleTorsoMeshHandsOnly; // 0x430(0x28)
	struct AWTLCharacterPreviewRoom* m_CharacterPreviewRoom; // 0x458(0x08)
	char pad_460[0x1b0]; // 0x460(0x1b0)

	void UpdateFromStore(struct AWTLCharacter* Character, struct FWTLShortCharacterInfo& ShortCharacterInfo, enum class EWTLItemType ArmsItemType, int32_t ArmsItemTypeID, char CustomizationScalar, char CustomizationColor, int32_t MuzzleAttachmentTypeID, int32_t FlashlightAttachmentTypeID, int32_t ScopeAttachmentTypeID); // Function WTL.WTLCharacterPreview.UpdateFromStore // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17ba880
	void UpdateFromShortCharacterInfo(struct FWTLShortCharacterInfo& ShortCharacterInfo); // Function WTL.WTLCharacterPreview.UpdateFromShortCharacterInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17bae00
	void UpdateFromCharacter(struct AWTLCharacter* Character); // Function WTL.WTLCharacterPreview.UpdateFromCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x17baf00
	void SetCharacterPreviewType(enum class EWTLCharacterPreviewType PreviewType); // Function WTL.WTLCharacterPreview.SetCharacterPreviewType // (Final|Native|Public|BlueprintCallable) // @ game+0x17bafe0
};

// Class WTL.WTLCharacterPreviewAnimInstance
// Size: 0x350 (Inherited: 0x2c0)
struct UWTLCharacterPreviewAnimInstance : UAnimInstance {
	struct UAnimSequence* SnuggleAnimation; // 0x2b8(0x08)
	struct UAnimSequence* IdleAnimation; // 0x2c0(0x08)
	struct FVector ScaleFeetVector; // 0x2c8(0x0c)
	struct FVector InvertScaleFeetVector; // 0x2d4(0x0c)
	struct FVector ScaleHandsVector; // 0x2e0(0x0c)
	struct FVector InvertScaleHandsVector; // 0x2ec(0x0c)
	struct FVector ScaleHeadVector; // 0x2f8(0x0c)
	struct FVector ScaleNeckVector; // 0x304(0x0c)
	struct FVector InvertScaleRibCageVector; // 0x310(0x0c)
	struct FVector ScaleRibCageVector; // 0x31c(0x0c)
	float FScaleHands; // 0x328(0x04)
	float FScaleRibCage; // 0x32c(0x04)
	float FScaleFeet; // 0x330(0x04)
	float FScaleHead; // 0x334(0x04)
	float FScaleNeck; // 0x338(0x04)
	bool bIsWeaponInHands; // 0x33c(0x01)
	struct FVector IKHandParameter; // 0x340(0x0c)

	void UpdateComplexity(char BodyType); // Function WTL.WTLCharacterPreviewAnimInstance.UpdateComplexity // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x17bb1e0
};

// Class WTL.WTLCharacterPreviewRoom
// Size: 0x268 (Inherited: 0x220)
struct AWTLCharacterPreviewRoom : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct USceneCaptureComponent2D* CaptureComponent; // 0x228(0x08)
	struct UChildActorComponent* CharacterPreview; // 0x230(0x08)
	char pad_238[0x14]; // 0x238(0x14)
	struct FVector CharacterFaceCaptureComponentLocation; // 0x24c(0x0c)
	struct FVector CharacterFaceWhenItemInHandsCaptureComponentLocation; // 0x258(0x0c)
	char pad_264[0x4]; // 0x264(0x04)

	struct AWTLCharacterPreview* GetCharacterPreview(); // Function WTL.WTLCharacterPreviewRoom.GetCharacterPreview // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17bb480
};

// Class WTL.WTLCharacterTransportBase
// Size: 0x510 (Inherited: 0x4c0)
struct AWTLCharacterTransportBase : ACharacter {
	char pad_4C0[0x38]; // 0x4c0(0x38)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x4f8(0x10)
	float SpeedRotation; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)

	void K2_Use(struct AWTLCharacter* Character); // Function WTL.WTLCharacterTransportBase.K2_Use // (Native|Event|Public|BlueprintEvent) // @ game+0xf3f2f0
	void K2_SetHighlightState(bool Value); // Function WTL.WTLCharacterTransportBase.K2_SetHighlightState // (Native|Event|Public|BlueprintEvent) // @ game+0x17bb7f0
	struct FString K2_GetDisplayText(struct AWTLCharacter* Character); // Function WTL.WTLCharacterTransportBase.K2_GetDisplayText // (Native|Event|Public|BlueprintEvent) // @ game+0x17bb6c0
	bool K2_CanBeUsed(struct AWTLCharacter* Character); // Function WTL.WTLCharacterTransportBase.K2_CanBeUsed // (Native|Event|Public|BlueprintEvent) // @ game+0x17bb8d0
	bool IsUses(); // Function WTL.WTLCharacterTransportBase.IsUses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17bb650
	struct AWTLPlayerController* GetMyController(); // Function WTL.WTLCharacterTransportBase.GetMyController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17bb680
	struct AWTLCharacter* GetMyCharacter(); // Function WTL.WTLCharacterTransportBase.GetMyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17bb6a0
};

// Class WTL.WTLCharacterWatchAnimInstance
// Size: 0x2d0 (Inherited: 0x2c0)
struct UWTLCharacterWatchAnimInstance : UAnimInstance {
	float HourHandAngle; // 0x2c0(0x04)
	float MinuteHandAngle; // 0x2c4(0x04)
	float SecondHandAngle; // 0x2c8(0x04)
	int32_t Complexion; // 0x2cc(0x04)
};

// Class WTL.WTLChargeablePlaceableStuff
// Size: 0x3c0 (Inherited: 0x398)
struct AWTLChargeablePlaceableStuff : AWTLPlaceableStuff {
	char pad_398[0x1c]; // 0x398(0x1c)
	float ChargeRange; // 0x3b4(0x04)
	float EnergyChargePerSecond; // 0x3b8(0x04)
	float m_Energy; // 0x3bc(0x04)

	void OnRep_Energy(); // Function WTL.WTLChargeablePlaceableStuff.OnRep_Energy // (Native|Protected) // @ game+0x17bbd00
	float BPGetEnergy(); // Function WTL.WTLChargeablePlaceableStuff.BPGetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17bbce0
	float BPGetCondition(); // Function WTL.WTLChargeablePlaceableStuff.BPGetCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17bbcb0
	void BPCharged(); // Function WTL.WTLChargeablePlaceableStuff.BPCharged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLRichTextBlock
// Size: 0x8f8 (Inherited: 0x678)
struct UWTLRichTextBlock : URichTextBlock {
	struct TArray<struct UDataTable*> AdditionalStyleSets; // 0x678(0x10)
	struct FTextBlockStyle DefaultTextBlockStyle; // 0x688(0x270)
};

// Class WTL.WTLChatTextBlock
// Size: 0x900 (Inherited: 0x8f8)
struct UWTLChatTextBlock : UWTLRichTextBlock {
	char pad_8F8[0x8]; // 0x8f8(0x08)

	void K2_SetWrapTextAt(float Value); // Function WTL.WTLChatTextBlock.K2_SetWrapTextAt // (Final|Native|Public|BlueprintCallable) // @ game+0x17bbf30
};

// Class WTL.WTLCommandCore
// Size: 0x288 (Inherited: 0x220)
struct AWTLCommandCore : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct USphereComponent* ZoneSphere; // 0x230(0x08)
	struct UStaticMeshComponent* GeneratorMesh; // 0x238(0x08)
	char pad_240[0x18]; // 0x240(0x18)
	struct TArray<enum class EWTLFaction> IntrudersFactionList; // 0x258(0x10)
	char pad_268[0x10]; // 0x268(0x10)
	struct TArray<struct FWTLIntruderInfo> Intruders; // 0x278(0x10)

	void OnIntruderKilled(struct APawn* Victim); // Function WTL.WTLCommandCore.OnIntruderKilled // (Final|Native|Public|BlueprintCallable) // @ game+0x17941a0
	void OnIntruderDetected(struct APawn* Intruder, bool bIsLethal); // Function WTL.WTLCommandCore.OnIntruderDetected // (Final|Native|Public|BlueprintCallable) // @ game+0x17a9070
	void K2_OnIntruderKilled(struct APawn* Victim); // Function WTL.WTLCommandCore.K2_OnIntruderKilled // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool IsIntruder(struct AWTLCharacter* Character); // Function WTL.WTLCommandCore.IsIntruder // (Final|Native|Public|BlueprintCallable) // @ game+0x17bd040
};

// Class WTL.WTLFortificationCommandCore
// Size: 0x480 (Inherited: 0x288)
struct AWTLFortificationCommandCore : AWTLCommandCore {
	char pad_288[0x8]; // 0x288(0x08)
	struct AWTLFortificationSafeZone* FortificationSafeZone; // 0x290(0x08)
	struct TArray<struct AWTLFortificationEnemyNPCSpawner*> NPCSpawners; // 0x298(0x10)
	struct TArray<struct AWTLSafeZone*> OppositeForcesSafeZones; // 0x2a8(0x10)
	char pad_2B8[0x28]; // 0x2b8(0x28)
	struct UFMODAudioComponent* m_AudioComponent; // 0x2e0(0x08)
	char pad_2E8[0x18]; // 0x2e8(0x18)
	int32_t CommandCoreID; // 0x300(0x04)
	float MaxEnergy; // 0x304(0x04)
	float EnergyDrainPerSecond; // 0x308(0x04)
	float EnergyRecoverPerSecond; // 0x30c(0x04)
	float EnergyPercentForSafeZoneFunctionality; // 0x310(0x04)
	float SignalRange; // 0x314(0x04)
	float ScoreZoneRange; // 0x318(0x04)
	char HackingDificulty; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	float MaxHackingEnergyPercent; // 0x320(0x04)
	float SaveStateToDBInterval; // 0x324(0x04)
	float ScoreMultiplier; // 0x328(0x04)
	float m_Energy; // 0x32c(0x04)
	float HackingStateNoiseInterval; // 0x330(0x04)
	float NoiseEmittingRange; // 0x334(0x04)
	char pad_338[0x8]; // 0x338(0x08)
	struct TArray<struct FWTLFortificationReward> Rewards; // 0x340(0x10)
	struct FWTLDateTime m_LastHackTime; // 0x350(0x08)
	struct FWTLDateTime m_TimeTillNextHack; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
	struct FTimespan HackingDelay; // 0x368(0x08)
	struct FTimespan CaptureTimeInterval; // 0x370(0x08)
	struct FLinearColor OperationStateScreenLightColor; // 0x378(0x10)
	struct FLinearColor ExploitingStateScreenLightColor; // 0x388(0x10)
	struct UTexture* OperationStateScreenTexture; // 0x398(0x08)
	struct UTexture* ExploitingStateScreenTexture; // 0x3a0(0x08)
	enum class EWTLFaction m_ControlFaction; // 0x3a8(0x01)
	bool bUseDebugControlFaction; // 0x3a9(0x01)
	enum class EWTLFaction DebugControlFaction; // 0x3aa(0x01)
	char pad_3AB[0x15]; // 0x3ab(0x15)
	bool bIsAnyEngineerConnected; // 0x3c0(0x01)
	char pad_3C1[0x7]; // 0x3c1(0x07)
	struct TSoftClassPtr<UObject> CoreHackingWidgetClass; // 0x3c8(0x28)
	char pad_3F0[0x90]; // 0x3f0(0x90)

	void SetVulnerable(); // Function WTL.WTLFortificationCommandCore.SetVulnerable // (Final|Native|Public|BlueprintCallable) // @ game+0x17f1dd0
	void OnRep_TimeTillNextHack(); // Function WTL.WTLFortificationCommandCore.OnRep_TimeTillNextHack // (Final|Native|Protected) // @ game+0x17f2010
	void OnRep_IsAnyEngineerConnected(); // Function WTL.WTLFortificationCommandCore.OnRep_IsAnyEngineerConnected // (Final|Native|Protected) // @ game+0x17f2050
	void OnRep_Energy(); // Function WTL.WTLFortificationCommandCore.OnRep_Energy // (Final|Native|Protected) // @ game+0x17f21b0
	void OnRep_ControlFaction(); // Function WTL.WTLFortificationCommandCore.OnRep_ControlFaction // (Final|Native|Protected) // @ game+0x17f2150
	void OnControlFactionChanged(enum class EWTLFaction Faction); // Function WTL.WTLFortificationCommandCore.OnControlFactionChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetMulticast_OnCaptureEnded(); // Function WTL.WTLFortificationCommandCore.NetMulticast_OnCaptureEnded // (Net|Native|Event|NetMulticast|Protected) // @ game+0xba4570
	bool IsVulnerable(); // Function WTL.WTLFortificationCommandCore.IsVulnerable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1ed0
	bool IsStateRestored(); // Function WTL.WTLFortificationCommandCore.IsStateRestored // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1cf0
	bool IsJammed(); // Function WTL.WTLFortificationCommandCore.IsJammed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1ff0
	bool IsCaptureInProgress(); // Function WTL.WTLFortificationCommandCore.IsCaptureInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1da0
	struct FWTLDateTime GetTimeTillNextHack(); // Function WTL.WTLFortificationCommandCore.GetTimeTillNextHack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec6e0
	float GetSignalRange(); // Function WTL.WTLFortificationCommandCore.GetSignalRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1f00
	float GetNormalizedEnergy(); // Function WTL.WTLFortificationCommandCore.GetNormalizedEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1f40
	float GetMaxEnergy(); // Function WTL.WTLFortificationCommandCore.GetMaxEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1f20
	struct FWTLDateTime GetLastHackTime(); // Function WTL.WTLFortificationCommandCore.GetLastHackTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec700
	struct FWTLDateTime GetHackEndTime(); // Function WTL.WTLFortificationCommandCore.GetHackEndTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1d70
	float GetEnergyPercent(); // Function WTL.WTLFortificationCommandCore.GetEnergyPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1f90
	float GetEnergy(); // Function WTL.WTLFortificationCommandCore.GetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f1fd0
	enum class EWTLFaction GetControlFaction(); // Function WTL.WTLFortificationCommandCore.GetControlFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1186730
	void ClientStopInteraction(); // Function WTL.WTLFortificationCommandCore.ClientStopInteraction // (Final|Native|Public) // @ game+0x17f1d10
};

// Class WTL.WTLCheckpointCommandCore
// Size: 0x488 (Inherited: 0x480)
struct AWTLCheckpointCommandCore : AWTLFortificationCommandCore {
	char pad_480[0x8]; // 0x480(0x08)
};

// Class WTL.WTLCheckpointControllerComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UWTLCheckpointControllerComponent : UActorComponent {
	char pad_B0[0x28]; // 0xb0(0x28)
	struct TArray<struct AWTLCheckpointCommandCore*> Checkpoints; // 0xd8(0x10)
	struct AWTLSafeZone* SafeZone; // 0xe8(0x08)

	void OnControlFactionChanged(enum class EWTLFaction Faction); // Function WTL.WTLCheckpointControllerComponent.OnControlFactionChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCheckpointStateRestored(); // Function WTL.WTLCheckpointControllerComponent.OnCheckpointStateRestored // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnAllCheckpointsCaptured(); // Function WTL.WTLCheckpointControllerComponent.OnAllCheckpointsCaptured // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	enum class EWTLFaction GetControlFaction(); // Function WTL.WTLCheckpointControllerComponent.GetControlFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17bc9f0
	struct FDateTime GetCaptureEndTime(); // Function WTL.WTLCheckpointControllerComponent.GetCaptureEndTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17bc9b0
};

// Class WTL.WTLCircularProgressBar
// Size: 0x288 (Inherited: 0x260)
struct UWTLCircularProgressBar : UUserWidget {
	struct UImage* imgMaterial; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)
	float Percent; // 0x270(0x04)
	struct FLinearColor Color; // 0x274(0x10)
	char pad_284[0x4]; // 0x284(0x04)

	void SetPercent(float Value); // Function WTL.WTLCircularProgressBar.SetPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x17bcce0
	void SetColor(struct FLinearColor NewColor); // Function WTL.WTLCircularProgressBar.SetColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x17bcc10
};

// Class WTL.WTLDrone
// Size: 0x4d8 (Inherited: 0x280)
struct AWTLDrone : APawn {
	char pad_280[0x10]; // 0x280(0x10)
	struct USkeletalMeshComponent* DroneSkeletalMesh; // 0x290(0x08)
	struct USphereComponent* OverlapComponent; // 0x298(0x08)
	struct UFMODAudioComponent* WingsSound; // 0x2a0(0x08)
	float LifeTimeInWorld; // 0x2a8(0x04)
	float DroneMaxCondition; // 0x2ac(0x04)
	float DroneDamageMultiplier; // 0x2b0(0x04)
	float MaxDistanceFromCharacter; // 0x2b4(0x04)
	float SelfDestructionDamageValue; // 0x2b8(0x04)
	float SelfDestructionMinDamageValue; // 0x2bc(0x04)
	float SelfDestructionRadius; // 0x2c0(0x04)
	float DissolvingSpeed; // 0x2c4(0x04)
	struct TSoftClassPtr<UObject> ExplosionFX; // 0x2c8(0x28)
	struct TSoftClassPtr<UObject> SelfDestructionExplosionFX; // 0x2f0(0x28)
	float DroneHeight; // 0x318(0x04)
	enum class EWTLDroneMovementMode MovementMode; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	float RotationSpeed; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	float Radius; // 0x328(0x04)
	char pad_32C[0x8]; // 0x32c(0x08)
	float Height; // 0x334(0x04)
	struct FVector RotationAxis; // 0x338(0x0c)
	bool Clockwise; // 0x344(0x01)
	char pad_345[0x3]; // 0x345(0x03)
	float HeightAboveCharacter; // 0x348(0x04)
	char pad_34C[0xc]; // 0x34c(0x0c)
	bool RotateAroundCharacter; // 0x358(0x01)
	char pad_359[0x3]; // 0x359(0x03)
	float RotationSpeedIfFollowCharacterFromAbove; // 0x35c(0x04)
	float RotationRadiusIfFollowCharacterFromAbove; // 0x360(0x04)
	float DroneHeightInterpSpeed; // 0x364(0x04)
	char pad_368[0x24]; // 0x368(0x24)
	float MaxHeight; // 0x38c(0x04)
	struct TMap<enum class EWTLWeaponType, float> DamageMultipliers; // 0x390(0x50)
	float ReputationDelta; // 0x3e0(0x04)
	bool AIMakeNoise; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	float AINoiseDistance; // 0x3e8(0x04)
	struct FName AINoiseTag; // 0x3ec(0x08)
	char pad_3F4[0x14]; // 0x3f4(0x14)
	float DroneCondition; // 0x408(0x04)
	char pad_40C[0x1c]; // 0x40c(0x1c)
	uint64_t DroneItemID; // 0x428(0x08)
	uint16_t DroneItemTypeID; // 0x430(0x02)
	enum class EWTLFaction Faction; // 0x432(0x01)
	char pad_433[0x5]; // 0x433(0x05)
	struct AWTLCharacter* m_Character; // 0x438(0x08)
	bool m_bDestroyDrone; // 0x440(0x01)
	bool m_bIsFalling; // 0x441(0x01)
	bool m_bSelfDestruction; // 0x442(0x01)
	char pad_443[0x1]; // 0x443(0x01)
	int32_t WeaponItemID; // 0x444(0x04)
	int32_t AmmoItemID; // 0x448(0x04)
	enum class EWTLFireMode FireMode; // 0x44c(0x01)
	char pad_44D[0x3]; // 0x44d(0x03)
	float TimeBetweenShots; // 0x450(0x04)
	char pad_454[0x84]; // 0x454(0x84)

	void OnRep_IsFalling(); // Function WTL.WTLDrone.OnRep_IsFalling // (Final|Native|Protected) // @ game+0x17dd430
	void OnRep_DroneCondition(); // Function WTL.WTLDrone.OnRep_DroneCondition // (Native|Protected) // @ game+0x17dd450
	void OnRep_DestroyDrone(); // Function WTL.WTLDrone.OnRep_DestroyDrone // (Final|Native|Protected) // @ game+0x17dd240
	void OnRep_Character(); // Function WTL.WTLDrone.OnRep_Character // (Final|Native|Protected) // @ game+0x17dd260
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLDrone.OnHit // (Native|Public|HasOutParms|HasDefaults) // @ game+0x17dc8e0
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLDrone.OnEndOverlap // (Native|Protected) // @ game+0x17dcc10
	void OnCharacterDied(struct AWTLCharacter* Character); // Function WTL.WTLDrone.OnCharacterDied // (Final|Native|Protected) // @ game+0x17941a0
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLDrone.OnBeginOverlap // (Native|Protected|HasOutParms) // @ game+0x17dce90
	void K2_UpdateDroneCondition(float ConditionValue); // Function WTL.WTLDrone.K2_UpdateDroneCondition // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_InitilizeDrone(struct AWTLCharacter* Character); // Function WTL.WTLDrone.K2_InitilizeDrone // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool IsFriendly(enum class EWTLAITeam AIFaction); // Function WTL.WTLDrone.IsFriendly // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17dc530
	float GetSideVelocity(); // Function WTL.WTLDrone.GetSideVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc8a0
	float GetMovementSpeed(); // Function WTL.WTLDrone.GetMovementSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc860
	float GetForwardVelocity(); // Function WTL.WTLDrone.GetForwardVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc8c0
	struct AWTLCharacter* GetCharacter(); // Function WTL.WTLDrone.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc880
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLDrone.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc710
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLDrone.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc630
	bool AIInterface_IsAlive(); // Function WTL.WTLDrone.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc820
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLDrone.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc790
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLDrone.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc7e0
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLDrone.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dc750
};

// Class WTL.WTLCombatDrone
// Size: 0x4d8 (Inherited: 0x4d8)
struct AWTLCombatDrone : AWTLDrone {
};

// Class WTL.WTLCommandCoreNode
// Size: 0x28 (Inherited: 0x28)
struct UWTLCommandCoreNode : UInterface {

	void OnIntruderRemovedFromList(struct APawn* Intruder); // Function WTL.WTLCommandCoreNode.OnIntruderRemovedFromList // (Native|Event|Public|BlueprintEvent) // @ game+0x1774ab0
	void OnIntruderDetected(struct APawn* Intruder); // Function WTL.WTLCommandCoreNode.OnIntruderDetected // (Native|Event|Public|BlueprintEvent) // @ game+0x1774b90
	float GetWatchingRange(); // Function WTL.WTLCommandCoreNode.GetWatchingRange // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x17bd260
	struct AWTLCommandCore* GetCommandCore(); // Function WTL.WTLCommandCoreNode.GetCommandCore // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x17bd290
	void CommandCoreLink(struct AWTLCommandCore* CommandCore); // Function WTL.WTLCommandCoreNode.CommandCoreLink // (Native|Event|Public|BlueprintEvent) // @ game+0x17bd2c0
};

// Class WTL.WTLBTTask_TurretFindTarget
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_TurretFindTarget : UBTTaskNode {
	float ScanningInterval; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class WTL.WTLBTTask_TurretExtermination
// Size: 0x78 (Inherited: 0x70)
struct UWTLBTTask_TurretExtermination : UBTTaskNode {
	float TargetHitTimeout; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class WTL.WTLCommandCoreTurret
// Size: 0x360 (Inherited: 0x280)
struct AWTLCommandCoreTurret : APawn {
	char pad_280[0x18]; // 0x280(0x18)
	struct UStaticMeshComponent* Stand; // 0x298(0x08)
	struct USkeletalMeshComponent* Body; // 0x2a0(0x08)
	struct UParticleSystemComponent* Muzzle; // 0x2a8(0x08)
	struct UParticleSystemComponent* ProjectilesEmitter; // 0x2b0(0x08)
	struct USphereComponent* VisionZone; // 0x2b8(0x08)
	struct UFMODAudioComponent* AudioComponent; // 0x2c0(0x08)
	struct TSoftObjectPtr<UFMODEvent> TurretSoundEvent; // 0x2c8(0x28)
	char pad_2F0[0x34]; // 0x2f0(0x34)
	float FireRate; // 0x324(0x04)
	float MinDamage; // 0x328(0x04)
	float MaxDamage; // 0x32c(0x04)
	float Prewarm; // 0x330(0x04)
	float Cooldown; // 0x334(0x04)
	struct APawn* TargetToFollow; // 0x338(0x08)
	char pad_340[0x20]; // 0x340(0x20)

	void OnRep_TargetToFollow(struct APawn* Previous); // Function WTL.WTLCommandCoreTurret.OnRep_TargetToFollow // (Final|Native|Private) // @ game+0x17bd890
	void K2_OnPawnKilled(struct APawn* TargetPawn); // Function WTL.WTLCommandCoreTurret.K2_OnPawnKilled // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLCommandSystem
// Size: 0x50 (Inherited: 0x28)
struct UWTLCommandSystem : UObject {
	char pad_28[0x28]; // 0x28(0x28)

	void CC_Weather_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Weather_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Weather(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Weather // (Final|Native|Public|HasOutParms) // @ game+0x17c1500
	bool CC_WE(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_WE // (Final|Native|Public|HasOutParms) // @ game+0x17c1a70
	void CC_VisitPortal_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_VisitPortal_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_VisitPortal(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_VisitPortal // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_VisitLocation_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_VisitLocation_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_VisitLocation(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_VisitLocation // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_UseAdaptiveNetUpdateFrequency_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_UseAdaptiveNetUpdateFrequency_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_UseAdaptiveNetUpdateFrequency(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_UseAdaptiveNetUpdateFrequency // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_UnvisitLocation_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_UnvisitLocation_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_UnvisitLocation(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_UnvisitLocation // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_Test(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Test // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_TeleportCharacter_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_TeleportCharacter_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_TeleportCharacter(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_TeleportCharacter // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Teleport_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Teleport_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Teleport(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Teleport // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SystemMessage_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SystemMessage_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SystemMessage(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SystemMessage // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SystemEvent_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SystemEvent_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SystemEvent(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SystemEvent // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SteamConsumeTimeout_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SteamConsumeTimeout_Help // (Final|Native|Public) // @ game+0x17c0f60
	bool CC_SteamConsumeTimeout(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SteamConsumeTimeout // (Final|Native|Public|HasOutParms) // @ game+0x17c1030
	void CC_Sprint_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Sprint_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Sprint(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params, struct AWTLCharacter* Character); // Function WTL.WTLCommandSystem.CC_Sprint // (Final|Native|Public|HasOutParms) // @ game+0x17c1ce0
	void CC_Spectate_Help(); // Function WTL.WTLCommandSystem.CC_Spectate_Help // (Final|Native|Public) // @ game+0xe77850
	bool CC_Spectate(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Spectate // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	bool CC_Spawn(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Spawn // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SlotMachine_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SlotMachine_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SlotMachine(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SlotMachine // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SetWeaponExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetWeaponExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetWeaponExperience(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetWeaponExperience // (Final|Native|Public|HasOutParms) // @ game+0x17c1a70
	void CC_SetThirst_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetThirst_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetThirst(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetThirst // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetSurvivalExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetSurvivalExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetSurvivalExperience(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetSurvivalExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetSpectatorMode_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetSpectatorMode_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetSpectatorMode(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetSpectatorMode // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SetReputation_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetReputation_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetReputation(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetReputation // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SetRepairExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetRepairExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetRepairExperience(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetRepairExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetPvPMode_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetPvPMode_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetPvPMode(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetPvPMode // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetMiningExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetMiningExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetMiningExperience(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetMiningExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetMedicExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetMedicExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetMedicExperience(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetMedicExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetItemCondition_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetItemCondition_Help // (Final|Native|Public) // @ game+0x17c1430
	bool CC_SetItemCondition(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetItemCondition // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetHunger_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetHunger_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetHunger(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetHunger // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetGroup_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetGroup_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetGroup(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetGroup // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetFaction_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetFaction_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetFaction(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetFaction // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	bool CC_SetEnergy(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetEnergy // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SetCustomizationPart_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetCustomizationPart_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetCustomizationPart(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetCustomizationPart // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetCraftExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetCraftExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetCraftExperience(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetCraftExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_SetCondition(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetCondition // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SetClass_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetClass_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetClass(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetClass // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_SetClan_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SetClan_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SetClan(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SetClan // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SendLootBox_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SendLootBox_Help // (Final|Native|Public) // @ game+0x17c1290
	bool CC_SendLootBox(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SendLootBox // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_SafeZone_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_SafeZone_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_SafeZone(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_SafeZone // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Revoke_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Revoke_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Revoke(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Revoke // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Reputation_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Reputation_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Reputation(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Reputation // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_RepairAll_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RepairAll_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RepairAll(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RepairAll // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_RemovePDAModule_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RemovePDAModule_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RemovePDAModule(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RemovePDAModule // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_RecoverStamina_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RecoverStamina_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RecoverStamina(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RecoverStamina // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_RecoverHP_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RecoverHP_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RecoverHP(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RecoverHP // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_RecoverHealth_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RecoverHealth_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RecoverHealth(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RecoverHealth // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_RecoverAll_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RecoverAll_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RecoverAll(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RecoverAll // (Final|Native|Public|HasOutParms) // @ game+0x17c1a70
	void CC_RCS_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_RCS_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_RCS(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_RCS // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Quest_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Quest_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Quest(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Quest // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_PVP_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_PVP_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_PVP(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_PVP // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	bool CC_ProjectX(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ProjectX // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_MSpawner_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_MSpawner_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_MSpawner(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_MSpawner // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_MoveToLocation_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_MoveToLocation_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_MoveToLocation(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_MoveToLocation // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_Monster_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Monster_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Monster(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Monster // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_MaxConnectionsPerServerFrame_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_MaxConnectionsPerServerFrame_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_MaxConnectionsPerServerFrame(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_MaxConnectionsPerServerFrame // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_MarkAsPieceOfShit_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_MarkAsPieceOfShit_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_MarkAsPieceOfShit(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_MarkAsPieceOfShit // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Mail_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Mail_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Mail(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Mail // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_ListPlayers_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ListPlayers_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ListPlayers(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ListPlayers // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Kit_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Kit_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Kit(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Kit // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_KillAllNPC(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_KillAllNPC // (Final|Native|Public) // @ game+0x17bdd30
	void CC_Kill_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Kill_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Kill(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Kill // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Kick_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Kick_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Kick(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Kick // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_JunkMachine_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_JunkMachine_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_JunkMachine(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_JunkMachine // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GS_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GS_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GS(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GS // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Grant_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Grant_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Grant(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Grant // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GodMode_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GodMode_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GodMode(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GodMode // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_God(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_God // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_GM(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GM // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GLO_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GLO_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GLO(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GLO // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	bool CC_GL(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GL // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GiveScore_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveScore_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GiveScore(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveScore // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GiveMoney_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveMoney_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GiveMoney(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveMoney // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GiveLevel_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveLevel_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GiveLevel(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveLevel // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GiveItem_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveItem_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GiveItem(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveItem // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_GiveExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GiveExperience(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GiveClanSkill_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveClanSkill_Help // (Final|Native|Public) // @ game+0x17bf470
	bool CC_GiveClanSkill(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveClanSkill // (Final|Native|Public|HasOutParms) // @ game+0x17bfd30
	void CC_GiveClanScore_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GiveClanScore_Help // (Final|Native|Public) // @ game+0x17c0460
	bool CC_GiveClanScore(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GiveClanScore // (Final|Native|Public|HasOutParms) // @ game+0x17c0d60
	bool CC_GI(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GI // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_GetMeshInfo_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_GetMeshInfo_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_GetMeshInfo(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GetMeshInfo // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_GetAccountID(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GetAccountID // (Final|Native|Public|HasOutParms) // @ game+0x17bde00
	bool CC_GC(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_GC // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_ForceInformer_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ForceInformer_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ForceInformer(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ForceInformer // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	bool CC_FillChat(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_FillChat // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_ExecList_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ExecList_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ExecList(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ExecList // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_ExecCmd_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ExecCmd_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ExecCmd(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ExecCmd // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_Exec_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Exec_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Exec(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Exec // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Events_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Events_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Events(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Events // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	bool CC_Energy(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Energy // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_EnemyNPC_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_EnemyNPC_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_EnemyNPC(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_EnemyNPC // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_DropMode_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_DropMode_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_DropMode(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_DropMode // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_Drone(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Drone // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_DrainPointEnergy_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_DrainPointEnergy_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_DrainPointEnergy(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_DrainPointEnergy // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_CurrentWeather_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_CurrentWeather_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_CurrentWeather(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_CurrentWeather // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_Craft_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_Craft_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_Craft(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_Craft // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_CommandCore_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_CommandCore_Help // (Final|Native|Public) // @ game+0x17c11c0
	bool CC_CommandCore(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_CommandCore // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_ClearSkills_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ClearSkills_Help // (Final|Native|Public) // @ game+0x17be1f0
	bool CC_ClearSkills(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ClearSkills // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_ClearExperience_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ClearExperience_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ClearExperience(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ClearExperience // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_ClearClanSkills_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ClearClanSkills_Help // (Final|Native|Public) // @ game+0x17beba0
	bool CC_ClearClanSkills(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ClearClanSkills // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_ClearChat(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ClearChat // (Final|Native|Public) // @ game+0x17bdd30
	void CC_ChangeWeather_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ChangeWeather_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ChangeWeather(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ChangeWeather // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_ChangeSex_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ChangeSex_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ChangeSex(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ChangeSex // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_ChangeClass_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_ChangeClass_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_ChangeClass(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_ChangeClass // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_BlockMonsterSpawnOnFortificationCapture_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_BlockMonsterSpawnOnFortificationCapture_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_BlockMonsterSpawnOnFortificationCapture(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_BlockMonsterSpawnOnFortificationCapture // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_BecomeClanLeader_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_BecomeClanLeader_Help // (Final|Native|Public) // @ game+0x17bead0
	bool CC_BecomeClanLeader(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_BecomeClanLeader // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_BecomeClanLead_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_BecomeClanLead_Help // (Final|Native|Public) // @ game+0x17bead0
	bool CC_BecomeClanLead(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_BecomeClanLead // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_AssignItemToFastAccessSlot_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_AssignItemToFastAccessSlot_Help // (Final|Native|Public) // @ game+0x17c1360
	bool CC_AssignItemToFastAccessSlot(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_AssignItemToFastAccessSlot // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	bool CC_AirDrop(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_AirDrop // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_AddPDAModule_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_AddPDAModule_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_AddPDAModule(struct AWTLPlayerController* Player, struct AWTLPlayerState* PlayerState, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_AddPDAModule // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_AddEffect_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_AddEffect_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_AddEffect(struct AWTLPlayerController* Player, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_AddEffect // (Final|Native|Public|HasOutParms) // @ game+0x17bdbc0
	void CC_AccountInventory_Help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_AccountInventory_Help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_AccountInventory(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_AccountInventory // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
	void CC_AccountBalanceChange_help(struct AWTLPlayerController* Player); // Function WTL.WTLCommandSystem.CC_AccountBalanceChange_help // (Final|Native|Public) // @ game+0x17941a0
	bool CC_AccountBalanceChange(struct AWTLPlayerController* Player, struct AWTLCharacter* Character, struct TArray<struct FString>& Params); // Function WTL.WTLCommandSystem.CC_AccountBalanceChange // (Final|Native|Public|HasOutParms) // @ game+0x17bdff0
};

// Class WTL.WTLWidgetBase
// Size: 0x260 (Inherited: 0x260)
struct UWTLWidgetBase : UUserWidget {

	void Update(); // Function WTL.WTLWidgetBase.Update // (Native|Public) // @ game+0x17c4da0
};

// Class WTL.WTLCommonActionWaiting
// Size: 0x280 (Inherited: 0x260)
struct UWTLCommonActionWaiting : UWTLWidgetBase {
	struct UTextBlock* tbWaitingStatus; // 0x260(0x08)
	struct FText WaitingStatusText; // 0x268(0x18)
};

// Class WTL.WTLCommonAlphaSectionProgressBar
// Size: 0x2c8 (Inherited: 0x260)
struct UWTLCommonAlphaSectionProgressBar : UUserWidget {
	struct UPanelWidget* pwItemsBox; // 0x260(0x08)
	char pad_268[0x18]; // 0x268(0x18)
	char ItemsCount; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	struct FLinearColor FillColor; // 0x284(0x10)
	bool bIsUseInterpolation; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	float InterpolationSpeed; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct TSoftClassPtr<UObject> ItemWidgetClass; // 0x2a0(0x28)
};

// Class WTL.WTLCommonAlphaSectionProgressBarItem
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonAlphaSectionProgressBarItem : UUserWidget {
	struct UImage* imgItem; // 0x260(0x08)
};

// Class WTL.WTLCommonBase
// Size: 0x290 (Inherited: 0x260)
struct UWTLCommonBase : UUserWidget {
	bool IsSetTooltipTextByCustomTooltipWidget; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct TSoftClassPtr<UObject> ToolTipTextWidgetClass; // 0x268(0x28)
};

// Class WTL.WTLCommonButton
// Size: 0x340 (Inherited: 0x290)
struct UWTLCommonButton : UWTLCommonBase {
	struct UFMODEvent* PressedSoundEvent; // 0x290(0x08)
	struct UFMODEvent* HoveredSoundEvent; // 0x298(0x08)
	char pad_2A0[0x18]; // 0x2a0(0x18)
	struct UButton* btnButton; // 0x2b8(0x08)
	char pad_2C0[0x78]; // 0x2c0(0x78)
	enum class EWTLCommonButtonType CommonButtonType; // 0x338(0x01)
	char pad_339[0x7]; // 0x339(0x07)

	void OnButtonUnhovered(); // Function WTL.WTLCommonButton.OnButtonUnhovered // (Native|Protected) // @ game+0x17c4d60
	void OnButtonReleased(); // Function WTL.WTLCommonButton.OnButtonReleased // (Native|Protected) // @ game+0x17c4da0
	void OnButtonPressed(); // Function WTL.WTLCommonButton.OnButtonPressed // (Native|Protected) // @ game+0x17c4dc0
	void OnButtonHovered(); // Function WTL.WTLCommonButton.OnButtonHovered // (Native|Protected) // @ game+0x17c4d80
	void OnButtonClicked(); // Function WTL.WTLCommonButton.OnButtonClicked // (Native|Protected) // @ game+0x17c4de0
};

// Class WTL.WTLCommonWindowBase
// Size: 0x288 (Inherited: 0x260)
struct UWTLCommonWindowBase : UWTLWidgetBase {
	char pad_260[0x8]; // 0x260(0x08)
	struct UWTLCommonText* ucTitle; // 0x268(0x08)
	struct UWTLCommonButton* ucBtnClose; // 0x270(0x08)
	char pad_278[0x1]; // 0x278(0x01)
	bool bIsAlwaysShowBackgroundBlur; // 0x279(0x01)
	bool bIsUseShowAnimation; // 0x27a(0x01)
	char pad_27B[0x5]; // 0x27b(0x05)
	struct UWidgetAnimation* ShowAnimation; // 0x280(0x08)

	void OnCloseBtnClicked(); // Function WTL.WTLCommonWindowBase.OnCloseBtnClicked // (Native|Protected) // @ game+0x17c4d60
	void Close(); // Function WTL.WTLCommonWindowBase.Close // (Native|Protected) // @ game+0x17d38f0
};

// Class WTL.WTLCommonCharacterPreviewWindow
// Size: 0x298 (Inherited: 0x288)
struct UWTLCommonCharacterPreviewWindow : UWTLCommonWindowBase {
	struct UWTLCommonButton* ucBtnBack; // 0x288(0x08)
	char pad_290[0x8]; // 0x290(0x08)
};

// Class WTL.WTLCommonCharacterRotator
// Size: 0x2c8 (Inherited: 0x260)
struct UWTLCommonCharacterRotator : UUserWidget {
	char pad_260[0x60]; // 0x260(0x60)
	bool bIsMainMenuCharacterRotation; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
};

// Class WTL.WTLCommonCheckBox
// Size: 0x2f0 (Inherited: 0x290)
struct UWTLCommonCheckBox : UWTLCommonBase {
	struct UCheckBox* cbCheckBox; // 0x290(0x08)
	struct UFMODEvent* CheckedSoundEvent; // 0x298(0x08)
	struct UFMODEvent* UncheckedSoundEvent; // 0x2a0(0x08)
	struct UFMODEvent* HoveredSoundEvent; // 0x2a8(0x08)
	char pad_2B0[0x38]; // 0x2b0(0x38)
	enum class EWTLCheckBoxType CheckBoxType; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)

	void OnUnhovered(); // Function WTL.WTLCommonCheckBox.OnUnhovered // (Native|Protected) // @ game+0x17c4da0
	void OnHovered(); // Function WTL.WTLCommonCheckBox.OnHovered // (Native|Protected) // @ game+0x17c4dc0
	void OnCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLCommonCheckBox.OnCheckBoxStateChanged // (Native|Protected) // @ game+0x17c5280
};

// Class WTL.WTLCommonClickedItem
// Size: 0x2b0 (Inherited: 0x290)
struct UWTLCommonClickedItem : UWTLCommonBase {
	struct UBorder* bBackground; // 0x290(0x08)
	struct UFMODEvent* MouseButtonDownSoundEvent; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	enum class EWTLCommonClickedItemType CommonClickedItemType; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)

	void OnBackgroundBorderMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLCommonClickedItem.OnBackgroundBorderMouseButtonDown // (Native|Protected|HasOutParms) // @ game+0x17c5510
};

// Class WTL.WTLCommonColorButton
// Size: 0x2e8 (Inherited: 0x290)
struct UWTLCommonColorButton : UWTLCommonBase {
	struct UBorder* bColor; // 0x290(0x08)
	struct UImage* imgColor; // 0x298(0x08)
	char pad_2A0[0x20]; // 0x2a0(0x20)
	struct UFMODEvent* PressedSoundEvent; // 0x2c0(0x08)
	struct UFMODEvent* HoveredSoundEvent; // 0x2c8(0x08)
	char pad_2D0[0x18]; // 0x2d0(0x18)
};

// Class WTL.WTLCommonColorPicker
// Size: 0x2d0 (Inherited: 0x260)
struct UWTLCommonColorPicker : UUserWidget {
	struct UBorder* bBackground; // 0x260(0x08)
	struct UWTLUtilityColorPicker* ucColorPicker; // 0x268(0x08)
	struct UBorder* bButtons; // 0x270(0x08)
	struct UWTLCommonButton* ucBtnOK; // 0x278(0x08)
	struct UWTLCommonButton* ucBtnCancel; // 0x280(0x08)
	char pad_288[0x48]; // 0x288(0x48)

	void OnOKBtnClicked(); // Function WTL.WTLCommonColorPicker.OnOKBtnClicked // (Final|Native|Private) // @ game+0x17c5af0
	void OnColorPickedColorChanged(struct FLinearColor& ChangedColor); // Function WTL.WTLCommonColorPicker.OnColorPickedColorChanged // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x17c5b20
	void OnCancelBtnClicked(); // Function WTL.WTLCommonColorPicker.OnCancelBtnClicked // (Final|Native|Private) // @ game+0x17c5ac0
};

// Class WTL.WTLCommonColorPresetItem
// Size: 0x380 (Inherited: 0x340)
struct UWTLCommonColorPresetItem : UWTLCommonButton {
	char pad_340[0x40]; // 0x340(0x40)
};

// Class WTL.WTLCommonColorPresets
// Size: 0x310 (Inherited: 0x260)
struct UWTLCommonColorPresets : UUserWidget {
	struct UBorder* bMain; // 0x260(0x08)
	struct UWrapBox* wbPresets; // 0x268(0x08)
	char pad_270[0x28]; // 0x270(0x28)
	struct TSoftClassPtr<UObject> ColorPresetItemWidgetClass; // 0x298(0x28)
	char pad_2C0[0x50]; // 0x2c0(0x50)

	void OnColorPresetItemClicked(int32_t Number, struct FLinearColor PresetColor, struct FLinearColor PreviewColor); // Function WTL.WTLCommonColorPresets.OnColorPresetItemClicked // (Final|Native|Private|HasDefaults) // @ game+0x17c5ea0
};

// Class WTL.WTLCommonComboBoxString
// Size: 0x338 (Inherited: 0x290)
struct UWTLCommonComboBoxString : UWTLCommonBase {
	struct UComboBoxString* cbsComboBoxString; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct UFMODEvent* PressedSoundEvent; // 0x2a0(0x08)
	struct UFMODEvent* SelectionChangeSoundEvent; // 0x2a8(0x08)
	char pad_2B0[0x28]; // 0x2b0(0x28)
	enum class EWTLComboBoxStringType ComboBoxStringType; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FSlateFontInfo ComboBoxStringFont; // 0x2e0(0x58)

	void OnSelectionChangedEvent(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function WTL.WTLCommonComboBoxString.OnSelectionChangedEvent // (Final|Native|Private) // @ game+0x17c6380
	void OnOpeningEvent(); // Function WTL.WTLCommonComboBoxString.OnOpeningEvent // (Final|Native|Private) // @ game+0x17c6360
};

// Class WTL.WTLCommonMessageDialog
// Size: 0x310 (Inherited: 0x260)
struct UWTLCommonMessageDialog : UUserWidget {
	struct UWTLRichTextBlock* rtbMain; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)
	struct UBorder* bMessageBorder; // 0x288(0x08)
	struct UHorizontalBox* hbButtonsBox; // 0x290(0x08)
	struct TSoftClassPtr<UObject> ButtonWidgetClass; // 0x298(0x28)
	struct UWidgetAnimation* ShowAnimation; // 0x2c0(0x08)
	struct TSoftObjectPtr<UFMODEvent> ShowSoundEvent; // 0x2c8(0x28)
	char pad_2F0[0x20]; // 0x2f0(0x20)

	void OnDialogBtnClicked(bool IsBoundAnyLogic); // Function WTL.WTLCommonMessageDialog.OnDialogBtnClicked // (Final|Native|Private) // @ game+0x17c9680
	void Hide(); // Function WTL.WTLCommonMessageDialog.Hide // (Final|Native|Public) // @ game+0x17c9660
};

// Class WTL.WTLCommonConfirmationDialog
// Size: 0x398 (Inherited: 0x310)
struct UWTLCommonConfirmationDialog : UWTLCommonMessageDialog {
	struct UImage* imgConfirmationType; // 0x310(0x08)
	struct UWidget* m_YesButtonWidget; // 0x318(0x08)
	char pad_320[0x8]; // 0x320(0x08)
	struct TMap<enum class EWTLConfirmationType, struct TSoftObjectPtr<UTexture2D>> ConfirmationTypesTextures; // 0x328(0x50)
	struct FLinearColor OrangeBrushColor; // 0x378(0x10)
	struct FLinearColor RedBrushColor; // 0x388(0x10)
};

// Class WTL.WTLCommonCoreHackingWindow
// Size: 0x2e0 (Inherited: 0x288)
struct UWTLCommonCoreHackingWindow : UWTLCommonWindowBase {
	struct AWTLCoreHackingPreviewRoom* m_Preview; // 0x288(0x08)
	struct UImage* imgPreview; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct TSoftClassPtr<UObject> CoreHackingPreviewRoomClass; // 0x2a0(0x28)
	char pad_2C8[0x18]; // 0x2c8(0x18)

	void OnCoreCaptured(); // Function WTL.WTLCommonCoreHackingWindow.OnCoreCaptured // (Final|Native|Public) // @ game+0xe77850
	void OnCharacterDied(); // Function WTL.WTLCommonCoreHackingWindow.OnCharacterDied // (Final|Native|Protected) // @ game+0x17c67d0
	void OnCaptureEnded(); // Function WTL.WTLCommonCoreHackingWindow.OnCaptureEnded // (Final|Native|Protected) // @ game+0x17c67d0
};

// Class WTL.WTLCommonCountdownSlider
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLCommonCountdownSlider : UUserWidget {
	struct UImage* imgCountdownSlider; // 0x260(0x08)
	char pad_268[0x30]; // 0x268(0x30)
	enum class EWTLCountdownSliderWidgetFillingType FillingType; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	float CircleThickness; // 0x29c(0x04)
};

// Class WTL.WTLCommonCountdownWindow
// Size: 0x310 (Inherited: 0x260)
struct UWTLCommonCountdownWindow : UWTLWidgetBase {
	struct UBackgroundBlur* bBackgroundBlur; // 0x260(0x08)
	struct UWTLRichTextBlock* rtbCountDownTitle; // 0x268(0x08)
	struct UWTLCommonCountdownSlider* ucCountdownSlider; // 0x270(0x08)
	struct UTextBlock* tbCountDown; // 0x278(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x280(0x08)
	char pad_288[0x38]; // 0x288(0x38)
	struct FText CountdownTitleText; // 0x2c0(0x18)
	int32_t Timeout; // 0x2d8(0x04)
	bool bIsBlockCancelButton; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	struct FWTLUFunctionInfo CancelActionFunctionInfo; // 0x2e0(0x18)
	struct FWTLUFunctionInfo CountdownActionFunctionInfo; // 0x2f8(0x18)

	void UpdateCountdown(); // Function WTL.WTLCommonCountdownWindow.UpdateCountdown // (Final|Native|Private) // @ game+0x17c6a20
	void UpdateBlockCancelButton(); // Function WTL.WTLCommonCountdownWindow.UpdateBlockCancelButton // (Final|Native|Private) // @ game+0x17c6a00
	void OnCancelBtnClick(); // Function WTL.WTLCommonCountdownWindow.OnCancelBtnClick // (Final|Native|Private) // @ game+0x17c6a40
};

// Class WTL.WTLCommonCreditsAmount
// Size: 0x2e8 (Inherited: 0x290)
struct UWTLCommonCreditsAmount : UWTLCommonBase {
	struct UTextBlock* tbCreditsAmount; // 0x290(0x08)
	struct UTextBlock* tbCreditsAmountDelta; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct UWidgetAnimation* CreditsTopUpAnimation; // 0x2b0(0x08)
	struct TSoftObjectPtr<UFMODEvent> BalanceIncreasedSoundEvent; // 0x2b8(0x28)
	bool bIsSilentMode; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)

	void OnAccountBalanceIncreased(int32_t Delta, int32_t CurrentBalance); // Function WTL.WTLCommonCreditsAmount.OnAccountBalanceIncreased // (Final|Native|Private) // @ game+0x17c6c90
	void OnAccountBalanceChanged(int32_t Balance); // Function WTL.WTLCommonCreditsAmount.OnAccountBalanceChanged // (Final|Native|Private) // @ game+0x17c6df0
};

// Class WTL.WTLCommonCreditsAmountWithTopUp
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonCreditsAmountWithTopUp : UUserWidget {
	struct UWTLCommonCreditsAmount* ucCreditsAmount; // 0x260(0x08)
};

// Class WTL.WTLItemManipulationWidget
// Size: 0x280 (Inherited: 0x260)
struct UWTLItemManipulationWidget : UUserWidget {
	struct UImage* imgPreview; // 0x260(0x08)
	struct AActor* m_ManipulatedItem; // 0x268(0x08)
	char pad_270[0x10]; // 0x270(0x10)
};

// Class WTL.WTLCommonDeminingWindow
// Size: 0x2b0 (Inherited: 0x280)
struct UWTLCommonDeminingWindow : UWTLItemManipulationWidget {
	char pad_280[0x10]; // 0x280(0x10)
	struct URichTextBlock* rtbHintText; // 0x290(0x08)
	struct UImage* imgScissors; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)

	void OnShowOrHideScissors(bool Value); // Function WTL.WTLCommonDeminingWindow.OnShowOrHideScissors // (Final|Native|Protected) // @ game+0x17c71a0
	void OnDemined(); // Function WTL.WTLCommonDeminingWindow.OnDemined // (Final|Native|Protected) // @ game+0x17c7280
	void OnCharacterDied(); // Function WTL.WTLCommonDeminingWindow.OnCharacterDied // (Final|Native|Protected) // @ game+0x17c72a0
};

// Class WTL.WTLCommonFormattedTextBlock
// Size: 0xab8 (Inherited: 0xa38)
struct UWTLCommonFormattedTextBlock : UEditableTextBox {
	int32_t BlocksCount; // 0xa38(0x04)
	int32_t CharsInBlockCount; // 0xa3c(0x04)
	struct FString EmptyChar; // 0xa40(0x10)
	struct FString Iterator; // 0xa50(0x10)
	char pad_A60[0x58]; // 0xa60(0x58)
};

// Class WTL.WTLCommonTextButton
// Size: 0x3f8 (Inherited: 0x340)
struct UWTLCommonTextButton : UWTLCommonButton {
	struct UTextBlock* tbButton; // 0x340(0x08)
	struct FText Text; // 0x348(0x18)
	enum class EWTLButtonText ButtonText; // 0x360(0x01)
	bool bUseTextFont; // 0x361(0x01)
	char pad_362[0x6]; // 0x362(0x06)
	struct FSlateFontInfo TextFont; // 0x368(0x58)
	bool bUseTextFontSize; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	int32_t TextFontSize; // 0x3c4(0x04)
	bool bCapitalizeText; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct FSlateColor TextColor; // 0x3d0(0x28)
};

// Class WTL.WTLCommonHotkeyButton
// Size: 0x420 (Inherited: 0x3f8)
struct UWTLCommonHotkeyButton : UWTLCommonTextButton {
	char pad_3F8[0x10]; // 0x3f8(0x10)
	struct FKey Key; // 0x408(0x18)
};

// Class WTL.WTLCommonHoveredItem
// Size: 0x400 (Inherited: 0x2b0)
struct UWTLCommonHoveredItem : UWTLCommonClickedItem {
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct UFMODEvent* HoveredSoundEvent; // 0x2b8(0x08)
	char pad_2C0[0x9]; // 0x2c0(0x09)
	bool bUseBrushes; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct FSlateBrush DefaultBorderBrush; // 0x2d0(0x88)
	struct FSlateBrush HoveredBorderBrush; // 0x358(0x88)
	struct FLinearColor DefaultBorderBrushColor; // 0x3e0(0x10)
	struct FLinearColor HoveredBorderBrushColor; // 0x3f0(0x10)
};

// Class WTL.WTLCommonImageButton
// Size: 0x348 (Inherited: 0x340)
struct UWTLCommonImageButton : UWTLCommonButton {
	struct UImage* imgButton; // 0x340(0x08)
};

// Class WTL.WTLCommonItemInformation
// Size: 0x780 (Inherited: 0x260)
struct UWTLCommonItemInformation : UUserWidget {
	struct UTextBlock* tbName; // 0x260(0x08)
	struct UTextBlock* tbCustomName; // 0x268(0x08)
	struct UTextBlock* tbItemType; // 0x270(0x08)
	struct UTextBlock* tbItemSubType; // 0x278(0x08)
	struct UTextBlock* tbSuitableForClass; // 0x280(0x08)
	struct UTextBlock* tbNotSuitableForClass; // 0x288(0x08)
	struct UHorizontalBox* hbCount; // 0x290(0x08)
	struct UHorizontalBox* hbItemTypeID; // 0x298(0x08)
	struct UTextBlock* tbItemTypeID; // 0x2a0(0x08)
	struct UTextBlock* tbCount; // 0x2a8(0x08)
	struct UVerticalBox* vbRequirements; // 0x2b0(0x08)
	struct UVerticalBox* vbParameters; // 0x2b8(0x08)
	struct UHorizontalBox* hbCharacterFaction; // 0x2c0(0x08)
	struct UHorizontalBox* hbCharacterClass; // 0x2c8(0x08)
	struct UHorizontalBox* hbCharacterLevel; // 0x2d0(0x08)
	struct UHorizontalBox* hbCharacterStrength; // 0x2d8(0x08)
	struct UHorizontalBox* hbCharacterDexterity; // 0x2e0(0x08)
	struct UHorizontalBox* hbCharacterStamina; // 0x2e8(0x08)
	struct UHorizontalBox* hbCharacterAccuracy; // 0x2f0(0x08)
	struct UHorizontalBox* hbCharacterIntelligence; // 0x2f8(0x08)
	struct UHorizontalBox* hbCharacterFortune; // 0x300(0x08)
	struct UHorizontalBox* hbCaliber; // 0x308(0x08)
	struct UHorizontalBox* hbDamage; // 0x310(0x08)
	struct UHorizontalBox* hbArmorPiercing; // 0x318(0x08)
	struct UHorizontalBox* hbCriticalHitChanceMultiplier; // 0x320(0x08)
	struct UHorizontalBox* hbMagazine; // 0x328(0x08)
	struct UHorizontalBox* hbAccuracy; // 0x330(0x08)
	struct UHorizontalBox* hbEffectiveRange; // 0x338(0x08)
	struct UHorizontalBox* hbArmorClass; // 0x340(0x08)
	struct UHorizontalBox* hbArmor; // 0x348(0x08)
	struct UHorizontalBox* hbFrontArmor; // 0x350(0x08)
	struct UHorizontalBox* hbBackArmor; // 0x358(0x08)
	struct UHorizontalBox* hbCoverArms; // 0x360(0x08)
	struct UHorizontalBox* hbArmoredPlatesSlotsCount; // 0x368(0x08)
	struct UHorizontalBox* hbWearResistance; // 0x370(0x08)
	struct UPanelWidget* pwMedicineEffects; // 0x378(0x08)
	struct UPanelWidget* pwFoodEffects; // 0x380(0x08)
	struct UPanelWidget* pwCharacterEffectsInfluence; // 0x388(0x08)
	struct UVerticalBox* vbEffectsOfModification; // 0x390(0x08)
	struct UHorizontalBox* hbWeight; // 0x398(0x08)
	struct UHorizontalBox* hbTotalWeight; // 0x3a0(0x08)
	struct UHorizontalBox* hbBasePrice; // 0x3a8(0x08)
	struct UHorizontalBox* hbTotalBasePrice; // 0x3b0(0x08)
	struct UHorizontalBox* hbCondition; // 0x3b8(0x08)
	struct UHorizontalBox* hbDropChance; // 0x3c0(0x08)
	struct UHorizontalBox* hbDescription; // 0x3c8(0x08)
	struct UTextBlock* tbCharacterFactionCaption; // 0x3d0(0x08)
	struct UTextBlock* tbCharacterClassCaption; // 0x3d8(0x08)
	struct UTextBlock* tbCharacterLevelCaption; // 0x3e0(0x08)
	struct UTextBlock* tbCharacterStrengthCaption; // 0x3e8(0x08)
	struct UTextBlock* tbCharacterDexterityCaption; // 0x3f0(0x08)
	struct UTextBlock* tbCharacterStaminaCaption; // 0x3f8(0x08)
	struct UTextBlock* tbCharacterAccuracyCaption; // 0x400(0x08)
	struct UTextBlock* tbCharacterIntelligenceCaption; // 0x408(0x08)
	struct UTextBlock* tbCharacterFortuneCaption; // 0x410(0x08)
	struct UTextBlock* tbPDAModuleAlreadyInstalled; // 0x418(0x08)
	struct URichTextBlock* rtbAttach; // 0x420(0x08)
	struct UHorizontalBox* hbSilencerDamageMult; // 0x428(0x08)
	struct UTextBlock* tbSilencerDamageMult; // 0x430(0x08)
	struct UWTLCommonToggleSwitcher* SilencerDamageArrow; // 0x438(0x08)
	struct UHorizontalBox* hbSilencerSpreadMult; // 0x440(0x08)
	struct UTextBlock* tbSilencerSpreadMult; // 0x448(0x08)
	struct UWTLCommonToggleSwitcher* SilencerSpreadArrow; // 0x450(0x08)
	struct URichTextBlock* rtbSprayCanModification; // 0x458(0x08)
	struct URichTextBlock* rtbSprayCanModificationList; // 0x460(0x08)
	struct URichTextBlock* rtbArmoredPlates; // 0x468(0x08)
	struct UTextBlock* tbRepairHint; // 0x470(0x08)
	struct UTextBlock* tbCannotUseItemCaption; // 0x478(0x08)
	struct UTextBlock* tbCharacterFaction; // 0x480(0x08)
	struct UTextBlock* tbCharacterClass; // 0x488(0x08)
	struct UTextBlock* tbCharacterLevel; // 0x490(0x08)
	struct UTextBlock* tbCharacterStrength; // 0x498(0x08)
	struct UTextBlock* tbCharacterDexterity; // 0x4a0(0x08)
	struct UTextBlock* tbCharacterStamina; // 0x4a8(0x08)
	struct UTextBlock* tbCharacterAccuracy; // 0x4b0(0x08)
	struct UTextBlock* tbCharacterIntelligence; // 0x4b8(0x08)
	struct UTextBlock* tbCharacterFortune; // 0x4c0(0x08)
	struct UTextBlock* tbCaliber; // 0x4c8(0x08)
	struct UTextBlock* tbPvPDamage; // 0x4d0(0x08)
	struct UTextBlock* tbPvEDamage; // 0x4d8(0x08)
	struct UTextBlock* tbPvPArmorPiercing; // 0x4e0(0x08)
	struct UTextBlock* tbPvEArmorPiercing; // 0x4e8(0x08)
	struct UTextBlock* tbCriticalHitChanceMultiplier; // 0x4f0(0x08)
	struct UTextBlock* tbMagazine; // 0x4f8(0x08)
	struct UTextBlock* tbAccuracy; // 0x500(0x08)
	struct UProgressBar* pbAccuracy; // 0x508(0x08)
	struct UTextBlock* tbEffectiveRange; // 0x510(0x08)
	struct UTextBlock* tbArmorClass; // 0x518(0x08)
	struct UTextBlock* tbArmor; // 0x520(0x08)
	struct UTextBlock* tbMonsterArmor; // 0x528(0x08)
	struct UTextBlock* tbFrontArmor; // 0x530(0x08)
	struct UTextBlock* tbFrontMonsterArmor; // 0x538(0x08)
	struct UTextBlock* tbBackArmor; // 0x540(0x08)
	struct UTextBlock* tbBackMonsterArmor; // 0x548(0x08)
	struct UTextBlock* tbCoverArmsValue; // 0x550(0x08)
	struct UTextBlock* tbArmoredPlatesSlotsCount; // 0x558(0x08)
	struct UProgressBar* pbWearResistance; // 0x560(0x08)
	struct UPanelWidget* pwMedicineEffectsBox; // 0x568(0x08)
	struct UPanelWidget* pwFoodEffectsBox; // 0x570(0x08)
	struct UPanelWidget* pwCharacterEffectsInfluenceBox; // 0x578(0x08)
	struct UVerticalBox* vbEffectsOfModificationBox; // 0x580(0x08)
	struct UTextBlock* tbWeight; // 0x588(0x08)
	struct UTextBlock* tbTotalWeight; // 0x590(0x08)
	struct UTextBlock* tbBasePrice; // 0x598(0x08)
	struct UTextBlock* tbTotalBasePrice; // 0x5a0(0x08)
	struct UTextBlock* tbCondition; // 0x5a8(0x08)
	struct UTextBlock* tbDropChance; // 0x5b0(0x08)
	struct UTextBlock* tbDescription; // 0x5b8(0x08)
	struct UHorizontalBox* hbHungerFoodEffect; // 0x5c0(0x08)
	struct UHorizontalBox* hbThirstFoodEffect; // 0x5c8(0x08)
	struct UHorizontalBox* hbHealthFoodEffect; // 0x5d0(0x08)
	struct UHorizontalBox* hbStaminaFoodEffect; // 0x5d8(0x08)
	struct UHorizontalBox* hbAlcoholFoodEffect; // 0x5e0(0x08)
	struct UHorizontalBox* hbPoisonFoodEffect; // 0x5e8(0x08)
	struct UHorizontalBox* hbRadiationFoodEffect; // 0x5f0(0x08)
	struct UHorizontalBox* hbBleedingFoodEffect; // 0x5f8(0x08)
	struct UHorizontalBox* hbWoundedFoodEffect; // 0x600(0x08)
	struct UTextBlock* tbHungerFoodEffect; // 0x608(0x08)
	struct UTextBlock* tbThirstFoodEffect; // 0x610(0x08)
	struct UTextBlock* tbHealthFoodEffect; // 0x618(0x08)
	struct UTextBlock* tbStaminaFoodEffect; // 0x620(0x08)
	struct UTextBlock* tbAlcoholFoodEffect; // 0x628(0x08)
	struct UTextBlock* tbPoisonFoodEffect; // 0x630(0x08)
	struct UTextBlock* tbRadiationFoodEffect; // 0x638(0x08)
	struct UTextBlock* tbBleedingFoodEffect; // 0x640(0x08)
	struct UTextBlock* tbWoundedFoodEffect; // 0x648(0x08)
	struct UHorizontalBox* hbDamageModificationEffect; // 0x650(0x08)
	struct UHorizontalBox* hbAccuracyModificationEffect; // 0x658(0x08)
	struct UHorizontalBox* hbArmorModificationEffect; // 0x660(0x08)
	struct UHorizontalBox* hbWeightModificationEffect; // 0x668(0x08)
	struct UHorizontalBox* hbWearResistanceModificationEffect; // 0x670(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucDamageModificationPercentDeltaMin; // 0x678(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucDamageModificationPercentDeltaMax; // 0x680(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucAccuracyModificationPercentDeltaMin; // 0x688(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucAccuracyModificationPercentDeltaMax; // 0x690(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucArmorModificationPercentDeltaMin; // 0x698(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucArmorModificationPercentDeltaMax; // 0x6a0(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucWeightModificationPercentDeltaMin; // 0x6a8(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucWeightModificationPercentDeltaMax; // 0x6b0(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucWearResistanceModificationPercentDeltaMin; // 0x6b8(0x08)
	struct UWTLHUDItemsModificationPercentDelta* ucWearResistanceModificationPercentDeltaMax; // 0x6c0(0x08)
	char pad_6C8[0x8]; // 0x6c8(0x08)
	struct TSoftClassPtr<UObject> MedicineEffectWidgetClass; // 0x6d0(0x28)
	struct TSoftClassPtr<UObject> EffectInfluenceWidgetClass; // 0x6f8(0x28)
	struct FMargin ParametersVerticalBoxOriginalPadding; // 0x720(0x10)
	struct FLinearColor CustomNameTextColor; // 0x730(0x10)
	struct FLinearColor LowAccuracyBarFillColor; // 0x740(0x10)
	struct FLinearColor LowMiddleAccuracyBarFillColor; // 0x750(0x10)
	struct FLinearColor HighMiddleAccuracyBarFillColor; // 0x760(0x10)
	struct FLinearColor HighAccuracyBarFillColor; // 0x770(0x10)
};

// Class WTL.WTLCommonItemInformationWindow
// Size: 0x298 (Inherited: 0x288)
struct UWTLCommonItemInformationWindow : UWTLCommonWindowBase {
	struct UWTLCommonButton* ucBtnOK; // 0x288(0x08)
	struct UWTLCommonItemInformation* ucItemInformation; // 0x290(0x08)
};

// Class WTL.WTLCommonItemPreview
// Size: 0x818 (Inherited: 0x260)
struct UWTLCommonItemPreview : UWTLWidgetBase {
	struct UBorder* bItemPreview; // 0x260(0x08)
	struct UImage* imgItemPreview; // 0x268(0x08)
	struct UWTLOptionsParameterSwitcher* psPreviewMesh; // 0x270(0x08)
	struct UButton* btnAutoRotateLeft; // 0x278(0x08)
	struct UButton* btnAutoRotateRight; // 0x280(0x08)
	struct UButton* btnRotateTop; // 0x288(0x08)
	struct UButton* btnRotateDown; // 0x290(0x08)
	struct UButton* btnRotateLeft; // 0x298(0x08)
	struct UButton* btnRotateRight; // 0x2a0(0x08)
	struct UButton* btnZoomIn; // 0x2a8(0x08)
	struct UButton* btnZoomOut; // 0x2b0(0x08)
	struct UButton* btnReset; // 0x2b8(0x08)
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct FButtonStyle NormalButtonStyle; // 0x2d8(0x278)
	struct FButtonStyle ClickedButtonStyle; // 0x550(0x278)
	struct TSoftObjectPtr<UMaterialInterface> SquareMI; // 0x7c8(0x28)
	struct TSoftObjectPtr<UMaterialInterface> LandscapeMI; // 0x7f0(0x28)

	void UpdateAutoRotate(); // Function WTL.WTLCommonItemPreview.UpdateAutoRotate // (Final|Native|Private) // @ game+0x17c8b90
	void OnZoomOutBtnClicked(); // Function WTL.WTLCommonItemPreview.OnZoomOutBtnClicked // (Final|Native|Private) // @ game+0x17c8c10
	void OnZoomInBtnClicked(); // Function WTL.WTLCommonItemPreview.OnZoomInBtnClicked // (Final|Native|Private) // @ game+0x17c8c30
	void OnRotateTopBtnClicked(); // Function WTL.WTLCommonItemPreview.OnRotateTopBtnClicked // (Final|Native|Private) // @ game+0x17c8cb0
	void OnRotateRightBtnClicked(); // Function WTL.WTLCommonItemPreview.OnRotateRightBtnClicked // (Final|Native|Private) // @ game+0x17c8c50
	void OnRotateLeftBtnClicked(); // Function WTL.WTLCommonItemPreview.OnRotateLeftBtnClicked // (Final|Native|Private) // @ game+0x17c8c70
	void OnRotateDownBtnClicked(); // Function WTL.WTLCommonItemPreview.OnRotateDownBtnClicked // (Final|Native|Private) // @ game+0x17c8c90
	void OnResetBtnClicked(); // Function WTL.WTLCommonItemPreview.OnResetBtnClicked // (Final|Native|Private) // @ game+0x17c8bb0
	void OnPreviewMeshSwitcherValueChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLCommonItemPreview.OnPreviewMeshSwitcherValueChanged // (Final|Native|Private) // @ game+0x17c8d10
	struct FEventReply OnItemPreviewBorderMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLCommonItemPreview.OnItemPreviewBorderMouseButtonDown // (Final|Native|Private|HasOutParms) // @ game+0x17c8ed0
	void OnAutoRotateRightBtnClicked(); // Function WTL.WTLCommonItemPreview.OnAutoRotateRightBtnClicked // (Final|Native|Private) // @ game+0x17c8cd0
	void OnAutoRotateLeftBtnClicked(); // Function WTL.WTLCommonItemPreview.OnAutoRotateLeftBtnClicked // (Final|Native|Private) // @ game+0x17c8cf0
};

// Class WTL.WTLCommonItemPreviewWindow
// Size: 0x298 (Inherited: 0x288)
struct UWTLCommonItemPreviewWindow : UWTLCommonWindowBase {
	struct UWTLCommonItemPreview* ucItemPreview; // 0x288(0x08)
	struct UWTLCommonButton* ucBtnBack; // 0x290(0x08)
};

// Class WTL.WTLCommonMapMarker
// Size: 0x318 (Inherited: 0x260)
struct UWTLCommonMapMarker : UUserWidget {
	struct UImage* imgMarkerType; // 0x260(0x08)
	struct UTextBlock* tbMarkerName; // 0x268(0x08)
	struct UTextBlock* tbMarkerTime; // 0x270(0x08)
	struct UWTLCommonMapMarkerToolTipText* m_MapMarkerToolTipTextWidget; // 0x278(0x08)
	char pad_280[0x70]; // 0x280(0x70)
	struct TSoftClassPtr<UObject> MapMarkerToolTipTextWidgetClass; // 0x2f0(0x28)
};

// Class WTL.WTLCommonMapMarkerToolTipText
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonMapMarkerToolTipText : UUserWidget {
	struct UTextBlock* tbToolTip; // 0x260(0x08)
};

// Class WTL.WTLCommonMessageDialogButton
// Size: 0x448 (Inherited: 0x420)
struct UWTLCommonMessageDialogButton : UWTLCommonHotkeyButton {
	char pad_420[0x28]; // 0x420(0x28)
};

// Class WTL.WTLCommonSelectedItem
// Size: 0x4a0 (Inherited: 0x400)
struct UWTLCommonSelectedItem : UWTLCommonHoveredItem {
	char pad_400[0x8]; // 0x400(0x08)
	struct FSlateBrush SelectedBorderBrush; // 0x408(0x88)
	struct FLinearColor SelectedBorderBrushColor; // 0x490(0x10)
};

// Class WTL.WTLCommonMicrotransactionItem
// Size: 0x570 (Inherited: 0x4a0)
struct UWTLCommonMicrotransactionItem : UWTLCommonSelectedItem {
	struct UImage* imgItem; // 0x4a0(0x08)
	struct UTextBlock* tbName; // 0x4a8(0x08)
	struct UTextBlock* tbPrice; // 0x4b0(0x08)
	struct UImage* imgCredits; // 0x4b8(0x08)
	struct UBorder* bDiscount; // 0x4c0(0x08)
	struct UWidgetSwitcher* wsDiscount; // 0x4c8(0x08)
	struct UTextBlock* tbDiscount; // 0x4d0(0x08)
	struct UTextBlock* tbCreditsDiscount; // 0x4d8(0x08)
	struct UBorder* bPremiumDiscountPercent; // 0x4e0(0x08)
	struct UTextBlock* tbPremiumDiscountPercent; // 0x4e8(0x08)
	struct UBackgroundBlur* bBlock; // 0x4f0(0x08)
	char pad_4F8[0x50]; // 0x4f8(0x50)
	struct FSlateColor NotEnoughCreditsColor; // 0x548(0x28)
};

// Class WTL.WTLCommonMicrotransactionWindow
// Size: 0x338 (Inherited: 0x288)
struct UWTLCommonMicrotransactionWindow : UWTLCommonWindowBase {
	struct UWTLCommonURLButton* btnPremiumBonuses; // 0x288(0x08)
	struct UHorizontalBox* hbMicrotransactionItems; // 0x290(0x08)
	struct URichTextBlock* rtbCreditsPurchaseTooltip; // 0x298(0x08)
	struct UHorizontalBox* hbPurchasingIssues; // 0x2a0(0x08)
	struct UWTLCommonURLButton* btnPurchasingIssues; // 0x2a8(0x08)
	char pad_2B0[0x20]; // 0x2b0(0x20)
	struct TSoftClassPtr<UObject> MicrotransactionItemWidgetClass; // 0x2d0(0x28)
	struct TArray<struct FWTLCreditsItemData> CreditsData; // 0x2f8(0x10)
	struct TArray<struct FWTLPremiumItemData> PremiumData; // 0x308(0x10)
	struct FString SteamPurchasingIssuesURL; // 0x318(0x10)
	struct FString MailruPurchasingIssuesURL; // 0x328(0x10)

	void OnPremiumBonusesButtonClicked(); // Function WTL.WTLCommonMicrotransactionWindow.OnPremiumBonusesButtonClicked // (Final|Native|Private) // @ game+0x17c9c60
	void OnBuyPremiumResult(bool Success); // Function WTL.WTLCommonMicrotransactionWindow.OnBuyPremiumResult // (Final|Native|Private) // @ game+0x17c9c80
	void OnBuyPremiumConfirmed(); // Function WTL.WTLCommonMicrotransactionWindow.OnBuyPremiumConfirmed // (Final|Native|Private) // @ game+0x17c9d60
	void OnBuyPremium(int32_t PremiumDaysCount, int32_t Price); // Function WTL.WTLCommonMicrotransactionWindow.OnBuyPremium // (Final|Native|Private) // @ game+0x17c9d80
	void OnBuyCredits(uint64_t StoreItemID); // Function WTL.WTLCommonMicrotransactionWindow.OnBuyCredits // (Final|Native|Private) // @ game+0x17c9ee0
};

// Class WTL.WTLCommonNotificationItem
// Size: 0x280 (Inherited: 0x260)
struct UWTLCommonNotificationItem : UUserWidget {
	struct UTextBlock* tbNotificationMessage; // 0x260(0x08)
	char pad_268[0x18]; // 0x268(0x18)
};

// Class WTL.WTLCommonNotificator
// Size: 0x2a8 (Inherited: 0x260)
struct UWTLCommonNotificator : UUserWidget {
	struct UBorder* bNotificationsList; // 0x260(0x08)
	struct UScrollBox* sbNotificationsList; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct TSoftClassPtr<UObject> NotificationItemWidgetClass; // 0x278(0x28)
	float ChildHeight; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)

	void OnChildsCountChange(); // Function WTL.WTLCommonNotificator.OnChildsCountChange // (Final|Native|Protected) // @ game+0x17ca210
};

// Class WTL.WTLCommonOptions
// Size: 0x3e8 (Inherited: 0x260)
struct UWTLCommonOptions : UUserWidget {
	char pad_260[0x38]; // 0x260(0x38)
	struct UCanvasPanel* cpMain; // 0x298(0x08)
	struct UBackgroundBlur* bBackgroundBlur; // 0x2a0(0x08)
	struct UHorizontalBox* hbTabController; // 0x2a8(0x08)
	struct UHorizontalBox* hbOptionsBtns; // 0x2b0(0x08)
	struct UBorder* bBackground; // 0x2b8(0x08)
	struct UWidgetSwitcher* wsOptions; // 0x2c0(0x08)
	struct UWTLOptionsGame* ucOptionsGame; // 0x2c8(0x08)
	struct UWTLOptionsGraphic* ucOptionsGraphic; // 0x2d0(0x08)
	struct UWTLOptionsPostProcess* ucOptionsPostProcess; // 0x2d8(0x08)
	struct UWTLOptionsAudio* ucOptionsAudio; // 0x2e0(0x08)
	struct UWTLOptionsControl* ucOptionsControl; // 0x2e8(0x08)
	struct UWTLOptionsInterface* ucOptionsInterface; // 0x2f0(0x08)
	struct UWTLOptionsIdentification* ucOptionsIdentification; // 0x2f8(0x08)
	struct UWTLOptionsBase* m_CurrentOptionsWidget; // 0x300(0x08)
	struct UWTLCommonMessageDialog* m_MessageDialogWidget; // 0x308(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x310(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x318(0x08)
	struct UWTLCommonButton* ucBtnApply; // 0x320(0x08)
	struct UWTLCommonButton* ucBtnReset; // 0x328(0x08)
	struct UWTLCommonButton* ucBtnResetAll; // 0x330(0x08)
	struct UWTLCommonColorPicker* m_CrosshairColorPickerWidget; // 0x338(0x08)
	char pad_340[0x30]; // 0x340(0x30)
	struct TSoftClassPtr<UObject> MessageDialogWidgetClass; // 0x370(0x28)
	struct TSoftClassPtr<UObject> TabButtonClass; // 0x398(0x28)
	struct TSoftClassPtr<UObject> CrosshairColorPickerWidgetClass; // 0x3c0(0x28)

	void ShowNextApplySettingsMessage(); // Function WTL.WTLCommonOptions.ShowNextApplySettingsMessage // (Final|Native|Private) // @ game+0x17cac50
	void ResetCurrentSetting(); // Function WTL.WTLCommonOptions.ResetCurrentSetting // (Final|Native|Private) // @ game+0x17ca880
	void ResetAllSettings(); // Function WTL.WTLCommonOptions.ResetAllSettings // (Final|Native|Private) // @ game+0x17ca7c0
	void OnTabBtnClicked(char TabIndex); // Function WTL.WTLCommonOptions.OnTabBtnClicked // (Final|Native|Private) // @ game+0x17cab80
	void OnResetBtnClicked(); // Function WTL.WTLCommonOptions.OnResetBtnClicked // (Final|Native|Private) // @ game+0x17ca970
	void OnResetAllBtnClicked(); // Function WTL.WTLCommonOptions.OnResetAllBtnClicked // (Final|Native|Private) // @ game+0x17ca950
	void OnOkBtnClickedConfirmed(); // Function WTL.WTLCommonOptions.OnOkBtnClickedConfirmed // (Final|Native|Private) // @ game+0x17cab10
	void OnOKBtnClicked(); // Function WTL.WTLCommonOptions.OnOKBtnClicked // (Final|Native|Private) // @ game+0x17cab40
	void OnExperimentalTextureStreamingValueOnOKNotConfirmed(); // Function WTL.WTLCommonOptions.OnExperimentalTextureStreamingValueOnOKNotConfirmed // (Final|Native|Private) // @ game+0x17caa90
	void OnExperimentalTextureStreamingValueOnApplyNotConfirmed(); // Function WTL.WTLCommonOptions.OnExperimentalTextureStreamingValueOnApplyNotConfirmed // (Final|Native|Private) // @ game+0x17ca9b0
	void OnCrosshairColorSelection(struct FLinearColor& CurrentColor, struct FGeometry& Geometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLCommonOptions.OnCrosshairColorSelection // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x17ca4f0
	void OnCrosshairColorPickingCanceled(); // Function WTL.WTLCommonOptions.OnCrosshairColorPickingCanceled // (Final|Native|Private) // @ game+0x17ca2d0
	void OnCrosshairColorPicked(struct FLinearColor& PickedColor); // Function WTL.WTLCommonOptions.OnCrosshairColorPicked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x17ca2f0
	void OnCrosshairColorChanged(struct FLinearColor& ChangedColor); // Function WTL.WTLCommonOptions.OnCrosshairColorChanged // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x17ca3d0
	void OnCancelBtnClicked(); // Function WTL.WTLCommonOptions.OnCancelBtnClicked // (Final|Native|Private) // @ game+0x17ca990
	void OnApplySettingsConfirmed(); // Function WTL.WTLCommonOptions.OnApplySettingsConfirmed // (Final|Native|Private) // @ game+0x17caa20
	void OnApplyBtnClicked(); // Function WTL.WTLCommonOptions.OnApplyBtnClicked // (Final|Native|Private) // @ game+0x17caa40
	bool ApplyAllSettings(); // Function WTL.WTLCommonOptions.ApplyAllSettings // (Final|Native|Private) // @ game+0x17ca920
};

// Class WTL.WTLCommonSwitcher
// Size: 0x2c8 (Inherited: 0x290)
struct UWTLCommonSwitcher : UWTLCommonBase {
	struct UFMODEvent* ButtonPressedSoundEvent; // 0x290(0x08)
	struct UFMODEvent* ButtonHoveredSoundEvent; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct UButton* btnPrevious; // 0x2b0(0x08)
	struct UButton* btnNext; // 0x2b8(0x08)
	enum class EWTLSwitcherType SwitcherType; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)

	void OnPreviousButtonClicked(); // Function WTL.WTLCommonSwitcher.OnPreviousButtonClicked // (Native|Protected) // @ game+0x17c4de0
	void OnNextButtonClicked(); // Function WTL.WTLCommonSwitcher.OnNextButtonClicked // (Native|Protected) // @ game+0x17c4dc0
	void OnButtonPressed(); // Function WTL.WTLCommonSwitcher.OnButtonPressed // (Final|Native|Private) // @ game+0x17d28c0
	void OnButtonHovered(); // Function WTL.WTLCommonSwitcher.OnButtonHovered // (Final|Native|Private) // @ game+0x17d28a0
};

// Class WTL.WTLCommonPageSwitcher
// Size: 0x2f8 (Inherited: 0x2c8)
struct UWTLCommonPageSwitcher : UWTLCommonSwitcher {
	struct UTextBlock* tbCurrentPage; // 0x2c8(0x08)
	struct UTextBlock* tbPagesCount; // 0x2d0(0x08)
	char pad_2D8[0x20]; // 0x2d8(0x20)
};

// Class WTL.WTLCommonParameterName
// Size: 0x2d8 (Inherited: 0x260)
struct UWTLCommonParameterName : UUserWidget {
	struct UImage* imgBackground; // 0x260(0x08)
	struct UBorder* bMain; // 0x268(0x08)
	struct UTextBlock* tbParameterName; // 0x270(0x08)
	char pad_278[0x10]; // 0x278(0x10)
	struct FText ParameterName; // 0x288(0x18)
	struct FText DescriptionText; // 0x2a0(0x18)
	struct FName GameInstanceName; // 0x2b8(0x08)
	char pad_2C0[0x18]; // 0x2c0(0x18)
};

// Class WTL.WTLCommonParameterPointSpin
// Size: 0x308 (Inherited: 0x2c8)
struct UWTLCommonParameterPointSpin : UWTLCommonSwitcher {
	struct UTextBlock* tbPointText; // 0x2c8(0x08)
	char pad_2D0[0x38]; // 0x2d0(0x38)
};

// Class WTL.WTLCommonPopupMenu
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLCommonPopupMenu : UUserWidget {
	struct UVerticalBox* vbPopupButtons; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)
	struct TSoftClassPtr<UObject> PopupMenuButtonWidgetClass; // 0x278(0x28)
};

// Class WTL.WTLCommonPopupMenuButton
// Size: 0x378 (Inherited: 0x340)
struct UWTLCommonPopupMenuButton : UWTLCommonButton {
	struct UTextBlock* tbPopup; // 0x340(0x08)
	char pad_348[0x30]; // 0x348(0x30)
};

// Class WTL.WTLCommonPremiumBonusesWindow
// Size: 0x290 (Inherited: 0x288)
struct UWTLCommonPremiumBonusesWindow : UWTLCommonWindowBase {
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x288(0x08)
};

// Class WTL.WTLCommonPremiumButton
// Size: 0x380 (Inherited: 0x340)
struct UWTLCommonPremiumButton : UWTLCommonButton {
	struct UWidgetSwitcher* wsPremiumImage; // 0x340(0x08)
	struct UImage* imgActive; // 0x348(0x08)
	char pad_350[0x30]; // 0x350(0x30)

	void OnInAppPaymentResult(bool Success); // Function WTL.WTLCommonPremiumButton.OnInAppPaymentResult // (Final|Native|Private) // @ game+0x17cb6c0
};

// Class WTL.WTLCommonQuestInfo
// Size: 0x468 (Inherited: 0x290)
struct UWTLCommonQuestInfo : UWTLCommonBase {
	struct UBorder* bQuestName; // 0x290(0x08)
	struct UBorder* bQuestInfoPart1; // 0x298(0x08)
	struct UBorder* bQuestInfoPart2; // 0x2a0(0x08)
	struct UBorder* bQuestInfoPart3; // 0x2a8(0x08)
	struct UBorder* bQuestInfoPart4; // 0x2b0(0x08)
	struct UBorder* bQuestInfoPart5; // 0x2b8(0x08)
	struct UBorder* bQuestInfoPart6; // 0x2c0(0x08)
	struct UBorder* bQuestInfoPart7; // 0x2c8(0x08)
	struct UBorder* bQuestInfoPart8; // 0x2d0(0x08)
	struct UTextBlock* tbQuestName; // 0x2d8(0x08)
	struct UImage* imgQuestIcon; // 0x2e0(0x08)
	struct UTextBlock* tbCanBePerformedInGroup; // 0x2e8(0x08)
	struct UHorizontalBox* hbRecommendedCharacterLevel; // 0x2f0(0x08)
	struct UTextBlock* tbRecommendedCharacterLevel; // 0x2f8(0x08)
	struct UHorizontalBox* hbMaxCharacterLevel; // 0x300(0x08)
	struct UTextBlock* tbMaxCharacterLevel; // 0x308(0x08)
	struct UHorizontalBox* hbQuestTimeLimit; // 0x310(0x08)
	struct UTextBlock* tbQuestTimeLimit; // 0x318(0x08)
	struct UTextBlock* tbQuestDescription; // 0x320(0x08)
	struct UTextBlock* tbRequiredTitle; // 0x328(0x08)
	struct UHorizontalBox* hbRequiredMoney; // 0x330(0x08)
	struct UTextBlock* tbRequiredMoney; // 0x338(0x08)
	struct UImage* imgRequiredMoneyReady; // 0x340(0x08)
	struct UTextBlock* tbRequiredItemsTitle; // 0x348(0x08)
	struct UWrapBox* wpRequiredItems; // 0x350(0x08)
	struct UTextBlock* tbRequiredKillsTitle; // 0x358(0x08)
	struct UVerticalBox* vbRequiredKills; // 0x360(0x08)
	struct UTextBlock* tbCustomRequirementsTitle; // 0x368(0x08)
	struct UVerticalBox* vbCustomRequirements; // 0x370(0x08)
	struct UTextBlock* tbRewardsTitle; // 0x378(0x08)
	struct UHorizontalBox* hbRewardExperience; // 0x380(0x08)
	struct UTextBlock* tbRewardExperience; // 0x388(0x08)
	struct UHorizontalBox* hbRewardMoney; // 0x390(0x08)
	struct UTextBlock* tbRewardMoney; // 0x398(0x08)
	struct UHorizontalBox* hbRewardPvPScore; // 0x3a0(0x08)
	struct UTextBlock* tbRewardPvPScore; // 0x3a8(0x08)
	struct UHorizontalBox* hbRewardPvEScore; // 0x3b0(0x08)
	struct UTextBlock* tbRewardPvEScore; // 0x3b8(0x08)
	struct UHorizontalBox* hbRewardCraftScore; // 0x3c0(0x08)
	struct UTextBlock* tbRewardCraftScore; // 0x3c8(0x08)
	struct UHorizontalBox* hbRewardTechnologyScore; // 0x3d0(0x08)
	struct UTextBlock* tbRewardTechnologyScore; // 0x3d8(0x08)
	struct UTextBlock* tbRewardItemsTitle; // 0x3e0(0x08)
	struct UWrapBox* wpRewardItems; // 0x3e8(0x08)
	struct TSoftClassPtr<UObject> QuestItemSlotWidgetClass; // 0x3f0(0x28)
	struct TSoftClassPtr<UObject> RequiredMonsterKillWidgetClass; // 0x418(0x28)
	struct TSoftClassPtr<UObject> CustomRequirementWidgetClass; // 0x440(0x28)
};

// Class WTL.WTLCommonSexButton
// Size: 0x378 (Inherited: 0x340)
struct UWTLCommonSexButton : UWTLCommonButton {
	struct UImage* imgSex; // 0x340(0x08)
	char pad_348[0x18]; // 0x348(0x18)
	enum class EWTLSex Sex; // 0x360(0x01)
	char pad_361[0x7]; // 0x361(0x07)
	struct TArray<struct FWTLSexTexture> Textures; // 0x368(0x10)
};

// Class WTL.WTLCommonSortButton
// Size: 0x448 (Inherited: 0x3f8)
struct UWTLCommonSortButton : UWTLCommonTextButton {
	struct UBorder* bContent; // 0x3f8(0x08)
	struct UWidgetSwitcher* wsSortType; // 0x400(0x08)
	char pad_408[0x30]; // 0x408(0x30)
	struct FLinearColor HoveredContentColor; // 0x438(0x10)
};

// Class WTL.WTLCommonSpinBox
// Size: 0x2a8 (Inherited: 0x260)
struct UWTLCommonSpinBox : UUserWidget {
	struct UWTLUtilityNumberTextBox* ntbCount; // 0x260(0x08)
	struct UWTLCommonButton* ucBtnUp; // 0x268(0x08)
	struct UWTLCommonButton* ucBtnDown; // 0x270(0x08)
	char pad_278[0x30]; // 0x278(0x30)

	void OnUpButtonClicked(); // Function WTL.WTLCommonSpinBox.OnUpButtonClicked // (Final|Native|Private) // @ game+0x17cbf90
	void OnDownButtonClicked(); // Function WTL.WTLCommonSpinBox.OnDownButtonClicked // (Final|Native|Private) // @ game+0x17cbf60
	void OnCountNumberTextBoxValueChanged(int32_t CurrentValue); // Function WTL.WTLCommonSpinBox.OnCountNumberTextBoxValueChanged // (Final|Native|Private) // @ game+0x17cbfc0
	void OnCountNumberTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLCommonSpinBox.OnCountNumberTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x17cc0a0
};

// Class WTL.WTLCommonStore
// Size: 0x818 (Inherited: 0x260)
struct UWTLCommonStore : UWTLWidgetBase {
	struct UWidgetSwitcher* wsTop; // 0x260(0x08)
	struct UWidgetSwitcher* wsMain; // 0x268(0x08)
	struct UHorizontalBox* hbItemTypeButtons; // 0x270(0x08)
	struct UEditableTextBox* etbSearch; // 0x278(0x08)
	struct UWTLCommonComboBoxString* cbsSorting; // 0x280(0x08)
	struct UTextBlock* tbItemName; // 0x288(0x08)
	struct UTextBlock* tbItemType; // 0x290(0x08)
	struct UWidgetSwitcher* wsItemImage; // 0x298(0x08)
	struct UImage* imgItem; // 0x2a0(0x08)
	struct UWTLCommonButton* ucItemInformationBtn; // 0x2a8(0x08)
	struct UWTLCommonButton* ucItemPreviewBtn; // 0x2b0(0x08)
	struct UWTLCommonButton* ucCharacterPreviewBtn; // 0x2b8(0x08)
	struct UWTLCommonStoreItemDescription* ucItemDescription; // 0x2c0(0x08)
	struct UWTLCommonStoreItemBundleInfo* ucItemBundleInfo; // 0x2c8(0x08)
	struct UWTLCommonStoreItemRequirements* ucItemRequirements; // 0x2d0(0x08)
	struct UWTLCommonStoreItemWeaponTypeBonusInfo* ucItemWeaponTypeBonusInfo; // 0x2d8(0x08)
	struct UWTLCommonStoreItemTags* ucItemTags; // 0x2e0(0x08)
	struct UWTLCommonStoreItemSimilarItems* ucItemSimilarItems; // 0x2e8(0x08)
	struct UTextBlock* tbItemPrice; // 0x2f0(0x08)
	struct UButton* btnCountInCart; // 0x2f8(0x08)
	struct UTextBlock* tbCountInCart; // 0x300(0x08)
	struct UWTLCommonSpinBox* ucAddToCartCount; // 0x308(0x08)
	struct UWTLCommonTextButton* ucBtnAddToCart; // 0x310(0x08)
	struct UTextBlock* tbCartItemCount; // 0x318(0x08)
	struct UWidgetSwitcher* wsStore; // 0x320(0x08)
	struct UWidgetSwitcher* wsItemsOffers; // 0x328(0x08)
	struct UScrollBox* sbItemsOffers; // 0x330(0x08)
	struct UWrapBox* wbItemsOffers; // 0x338(0x08)
	struct UWidgetSwitcher* wsItems; // 0x340(0x08)
	struct UScrollBox* sbItems; // 0x348(0x08)
	struct UWrapBox* wbItems; // 0x350(0x08)
	struct UWidgetSwitcher* wsCart; // 0x358(0x08)
	struct UScrollBox* sbCart; // 0x360(0x08)
	struct UTextBlock* tbTotalCartPrice; // 0x368(0x08)
	struct UWTLCommonButton* ucBtnTopUpCreditsCart; // 0x370(0x08)
	struct UWTLCommonButton* ucBtnAccountInventory; // 0x378(0x08)
	struct UWTLCommonTextButton* ucBtnCheckout; // 0x380(0x08)
	struct UWTLCommonTextButton* ucBtnExit; // 0x388(0x08)
	struct UWTLCommonTextButton* ucBtnBack; // 0x390(0x08)
	struct UWTLCommonTextButton* ucBtnCart; // 0x398(0x08)
	struct UWTLCommonButton* ucCodeButton; // 0x3a0(0x08)
	struct UWTLCommonFormattedTextBlock* ftbCodeTextBlock; // 0x3a8(0x08)
	struct UWTLCommonButton* btSendCodeButton; // 0x3b0(0x08)
	char pad_3B8[0x38]; // 0x3b8(0x38)
	struct TArray<struct UWTLCommonStoreItem*> m_StoreItemsWidgets; // 0x3f0(0x10)
	char pad_400[0x128]; // 0x400(0x128)
	struct UWTLCommonStoreItem* m_CurrentViewedStoreItem; // 0x528(0x08)
	char pad_530[0x158]; // 0x530(0x158)
	struct UWTLCommonStoreItem* m_TagSearchStoreItem; // 0x688(0x08)
	char pad_690[0x20]; // 0x690(0x20)
	struct UWidgetSwitcher* wsCodeResult; // 0x6b0(0x08)
	char pad_6B8[0x30]; // 0x6b8(0x30)
	struct TSoftClassPtr<UObject> ItemTypeButtonWidgetClass; // 0x6e8(0x28)
	struct TSoftClassPtr<UObject> StoreItemWidgetClass; // 0x710(0x28)
	struct TSoftClassPtr<UObject> StorePremiumItemWidgetClass; // 0x738(0x28)
	struct TSoftClassPtr<UObject> CartItemWidgetClass; // 0x760(0x28)
	struct TArray<struct FWTLItemTypeStoreButtonStyle> ItemTypeStoreButtonStyles; // 0x788(0x10)
	struct FSlateColor CreditsTextColor; // 0x798(0x28)
	struct FSlateColor WarningTextColor; // 0x7c0(0x28)
	struct UWidgetAnimation* CartButtonBlinkingAnimation; // 0x7e8(0x08)
	struct TSoftObjectPtr<UFMODEvent> PurchaseStoreItemsSoundEvent; // 0x7f0(0x28)

	void ShowAccountInventoryTutorialMessage(); // Function WTL.WTLCommonStore.ShowAccountInventoryTutorialMessage // (Final|Native|Private) // @ game+0x17cf060
	void SendCode(); // Function WTL.WTLCommonStore.SendCode // (Final|Native|Private) // @ game+0x17cda50
	void OnTopUpCredits(); // Function WTL.WTLCommonStore.OnTopUpCredits // (Final|Native|Private) // @ game+0x17ce3e0
	void OnTagClicked(struct FText& TagText); // Function WTL.WTLCommonStore.OnTagClicked // (Final|Native|Private|HasOutParms) // @ game+0x17ce4e0
	void OnStoreItemsUpdated(struct TArray<struct FWTLStoreItem>& StoreItems); // Function WTL.WTLCommonStore.OnStoreItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x17ce190
	void OnStoreItemClicked(struct FWTLStoreItem& StoreItemData, struct UWTLCommonStoreItem* StoreItem); // Function WTL.WTLCommonStore.OnStoreItemClicked // (Final|Native|Private|HasOutParms) // @ game+0x17cdff0
	void OnSortingComboBoxStringSelectionChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function WTL.WTLCommonStore.OnSortingComboBoxStringSelectionChanged // (Final|Native|Private) // @ game+0x17cec40
	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLCommonStore.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x17cee60
	void OnPurchaseStoreItems(struct FWTLInAppPurchaseResult& InAppPurchaseResult); // Function WTL.WTLCommonStore.OnPurchaseStoreItems // (Final|Native|Private|HasOutParms) // @ game+0x17ce6b0
	void OnItemTypeButtonClicked(enum class EWTLStoreItemType StoreItemType); // Function WTL.WTLCommonStore.OnItemTypeButtonClicked // (Final|Native|Private) // @ game+0x17cef90
	void OnItemsScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLCommonStore.OnItemsScrollBoxScrolled // (Final|Native|Private) // @ game+0x17cea40
	void OnItemsOffersScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLCommonStore.OnItemsOffersScrollBoxScrolled // (Final|Native|Private) // @ game+0x17ceb40
	void OnItemPreviewButtonClicked(); // Function WTL.WTLCommonStore.OnItemPreviewButtonClicked // (Final|Native|Private) // @ game+0x17cdef0
	void OnItemInformationButtonClicked(); // Function WTL.WTLCommonStore.OnItemInformationButtonClicked // (Final|Native|Private) // @ game+0x17cdeb0
	void OnExitButtonClicked(); // Function WTL.WTLCommonStore.OnExitButtonClicked // (Final|Native|Private) // @ game+0x17ce650
	void OnCountInCartButtonClicked(); // Function WTL.WTLCommonStore.OnCountInCartButtonClicked // (Final|Native|Private) // @ game+0x17ce920
	void OnCodeCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLCommonStore.OnCodeCommitted // (Final|Native|Private|HasOutParms) // @ game+0x17cd780
	void OnCodeCannotBeSended(); // Function WTL.WTLCommonStore.OnCodeCannotBeSended // (Final|Native|Private) // @ game+0x17cda70
	void OnCodeCanBeSended(); // Function WTL.WTLCommonStore.OnCodeCanBeSended // (Final|Native|Private) // @ game+0x17cdaa0
	void OnCodeActivationResult(bool Value); // Function WTL.WTLCommonStore.OnCodeActivationResult // (Final|Native|Private) // @ game+0x17cd970
	void OnCodeActivateButtonPressed(); // Function WTL.WTLCommonStore.OnCodeActivateButtonPressed // (Final|Native|Private) // @ game+0x17ce3c0
	void OnCheckoutConfirmed(); // Function WTL.WTLCommonStore.OnCheckoutConfirmed // (Final|Native|Private) // @ game+0x17ce850
	void OnCheckoutButtonClicked(); // Function WTL.WTLCommonStore.OnCheckoutButtonClicked // (Final|Native|Private) // @ game+0x17ce870
	void OnCharacterPreviewButtonClicked(); // Function WTL.WTLCommonStore.OnCharacterPreviewButtonClicked // (Final|Native|Private) // @ game+0x17cded0
	void OnCartScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLCommonStore.OnCartScrollBoxScrolled // (Final|Native|Private) // @ game+0x17ce940
	void OnCartItemRemoved(uint64_t CartItemID, struct UWTLCommonStoreCartItem* StoreCartItem); // Function WTL.WTLCommonStore.OnCartItemRemoved // (Final|Native|Private) // @ game+0x17cdc20
	void OnCartItemCountChanged(uint64_t CartItemID, int32_t NewCount); // Function WTL.WTLCommonStore.OnCartItemCountChanged // (Final|Native|Private) // @ game+0x17cdac0
	void OnCartItemClicked(uint64_t CartItemID); // Function WTL.WTLCommonStore.OnCartItemClicked // (Final|Native|Private) // @ game+0x17cdd80
	void OnCartButtonClicked(); // Function WTL.WTLCommonStore.OnCartButtonClicked // (Final|Native|Private) // @ game+0x17ce610
	void OnBackButtonClicked(); // Function WTL.WTLCommonStore.OnBackButtonClicked // (Final|Native|Private) // @ game+0x17ce630
	void OnAddToCartButtonClicked(); // Function WTL.WTLCommonStore.OnAddToCartButtonClicked // (Final|Native|Private) // @ game+0x17ce8c0
	void OnAddStoreItemToCart(uint64_t StoreItemID); // Function WTL.WTLCommonStore.OnAddStoreItemToCart // (Final|Native|Private) // @ game+0x17cdf10
	void OnAccountInventoryButtonClicked(); // Function WTL.WTLCommonStore.OnAccountInventoryButtonClicked // (Final|Native|Private) // @ game+0x17ce890
	void K2_OnCodeActivationResult(bool Value); // Function WTL.WTLCommonStore.K2_OnCodeActivationResult // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLCommonStoreBundleInfoItem
// Size: 0x398 (Inherited: 0x260)
struct UWTLCommonStoreBundleInfoItem : UUserWidget {
	struct UWidgetSwitcher* wsItemImage; // 0x260(0x08)
	struct UImage* imgItem; // 0x268(0x08)
	struct UTextBlock* tbItemName; // 0x270(0x08)
	struct UHorizontalBox* hbCount; // 0x278(0x08)
	struct UTextBlock* tbCount; // 0x280(0x08)
	char pad_288[0x110]; // 0x288(0x110)
};

// Class WTL.WTLCommonStoreButton
// Size: 0x460 (Inherited: 0x400)
struct UWTLCommonStoreButton : UWTLCommonHoveredItem {
	struct UTextBlock* tbStore; // 0x400(0x08)
	char pad_408[0x28]; // 0x408(0x28)
	struct FString ParentName; // 0x430(0x10)
	struct UWidgetAnimation* IdleAnimation; // 0x440(0x08)
	struct FText StoreText; // 0x448(0x18)
};

// Class WTL.WTLCommonStoreCartItem
// Size: 0x490 (Inherited: 0x400)
struct UWTLCommonStoreCartItem : UWTLCommonHoveredItem {
	struct UWTLCommonButton* ucBtnRemove; // 0x400(0x08)
	struct UWidgetSwitcher* wsItemImage; // 0x408(0x08)
	struct UImage* imgItem; // 0x410(0x08)
	struct UTextBlock* tbItemName; // 0x418(0x08)
	struct UTextBlock* tbPrice; // 0x420(0x08)
	struct UWTLCommonSpinBox* ucCount; // 0x428(0x08)
	struct UTextBlock* tbTotalPrice; // 0x430(0x08)
	char pad_438[0x58]; // 0x438(0x58)

	void OnRemoveButtonClicked(); // Function WTL.WTLCommonStoreCartItem.OnRemoveButtonClicked // (Final|Native|Private) // @ game+0x17cfd80
	void OnItemImageLoaded(struct UTexture2D* Texture); // Function WTL.WTLCommonStoreCartItem.OnItemImageLoaded // (Final|Native|Public) // @ game+0x17cfb30
	void OnCountSpinBoxValueChanged(int32_t CurrentValue); // Function WTL.WTLCommonStoreCartItem.OnCountSpinBoxValueChanged // (Final|Native|Private) // @ game+0x17cfc20
};

// Class WTL.WTLCommonStoreCountSpinBox
// Size: 0x2a8 (Inherited: 0x2a8)
struct UWTLCommonStoreCountSpinBox : UWTLCommonSpinBox {
};

// Class WTL.WTLCommonStoreCurrentCharacterParameter
// Size: 0x270 (Inherited: 0x260)
struct UWTLCommonStoreCurrentCharacterParameter : UUserWidget {
	struct UHorizontalBox* hbMain; // 0x260(0x08)
	struct UTextBlock* tbCurrentCharacterParameter; // 0x268(0x08)
};

// Class WTL.WTLCommonStoreItemBase
// Size: 0x408 (Inherited: 0x400)
struct UWTLCommonStoreItemBase : UWTLCommonHoveredItem {
	bool IsScaleOnHovered; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
};

// Class WTL.WTLCommonStoreItem
// Size: 0x618 (Inherited: 0x408)
struct UWTLCommonStoreItem : UWTLCommonStoreItemBase {
	struct UWidgetSwitcher* wsItemImage; // 0x408(0x08)
	struct UBorder* bBorder; // 0x410(0x08)
	struct UImage* imgItem; // 0x418(0x08)
	struct UBorder* bDiscount; // 0x420(0x08)
	struct UImage* imgHidden; // 0x428(0x08)
	struct UTextBlock* tbDiscount; // 0x430(0x08)
	struct UBorder* bNew; // 0x438(0x08)
	struct UTextBlock* tbItemName; // 0x440(0x08)
	struct UHorizontalBox* hbPrice; // 0x448(0x08)
	struct UTextBlock* tbPrice; // 0x450(0x08)
	struct UWTLCommonButton* ucBtnAddToCart; // 0x458(0x08)
	char pad_460[0x180]; // 0x460(0x180)
	struct TSoftClassPtr<UObject> StoreItemTooltipClass; // 0x5e0(0x28)
	bool IsShowTooltipOnHovered; // 0x608(0x01)
	bool IsShowShortTooltip; // 0x609(0x01)
	char pad_60A[0x2]; // 0x60a(0x02)
	struct FVector2D ItemImageSize; // 0x60c(0x08)
	char pad_614[0x4]; // 0x614(0x04)

	void OnAddToCartButtonClicked(); // Function WTL.WTLCommonStoreItem.OnAddToCartButtonClicked // (Final|Native|Private) // @ game+0x17d0140
};

// Class WTL.WTLCommonStoreItemBundleInfo
// Size: 0x2a8 (Inherited: 0x260)
struct UWTLCommonStoreItemBundleInfo : UUserWidget {
	struct UHorizontalBox* hbGameItems; // 0x260(0x08)
	struct UVerticalBox* vbGameItems; // 0x268(0x08)
	struct UHorizontalBox* hbCustomizationItems; // 0x270(0x08)
	struct UVerticalBox* vbCustomizationItems; // 0x278(0x08)
	struct TSoftClassPtr<UObject> BundleInfoItemWidgetClass; // 0x280(0x28)
};

// Class WTL.WTLCommonStoreItemDescription
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonStoreItemDescription : UUserWidget {
	struct URichTextBlock* rtbDescription; // 0x260(0x08)
};

// Class WTL.WTLCommonStoreItemRequirements
// Size: 0x358 (Inherited: 0x260)
struct UWTLCommonStoreItemRequirements : UUserWidget {
	struct UVerticalBox* vbMain; // 0x260(0x08)
	struct UHorizontalBox* hbRequiredFaction; // 0x268(0x08)
	struct UTextBlock* tbRequiredFaction; // 0x270(0x08)
	struct UHorizontalBox* hbCurrentFaction; // 0x278(0x08)
	struct UTextBlock* tbCurrentFaction; // 0x280(0x08)
	struct UVerticalBox* vbRequirements; // 0x288(0x08)
	struct UWTLRichTextBlock* rtbRequiredClass; // 0x290(0x08)
	struct UVerticalBox* vbRequiredParameters; // 0x298(0x08)
	struct UHorizontalBox* hbRequiredLevel; // 0x2a0(0x08)
	struct UTextBlock* tbRequiredLevel; // 0x2a8(0x08)
	struct UHorizontalBox* hbCurrentLevel; // 0x2b0(0x08)
	struct UTextBlock* tbCurrentLevel; // 0x2b8(0x08)
	struct UHorizontalBox* hbRequiredStrength; // 0x2c0(0x08)
	struct UTextBlock* tbRequiredStrength; // 0x2c8(0x08)
	struct UWTLCommonStoreCurrentCharacterParameter* ucCurrentStrength; // 0x2d0(0x08)
	struct UHorizontalBox* hbRequiredDexterity; // 0x2d8(0x08)
	struct UTextBlock* tbRequiredDexterity; // 0x2e0(0x08)
	struct UWTLCommonStoreCurrentCharacterParameter* ucCurrentDexterity; // 0x2e8(0x08)
	struct UHorizontalBox* hbRequiredStamina; // 0x2f0(0x08)
	struct UTextBlock* tbRequiredStamina; // 0x2f8(0x08)
	struct UWTLCommonStoreCurrentCharacterParameter* ucCurrentStamina; // 0x300(0x08)
	struct UHorizontalBox* hbRequiredAccuracy; // 0x308(0x08)
	struct UTextBlock* tbRequiredAccuracy; // 0x310(0x08)
	struct UWTLCommonStoreCurrentCharacterParameter* ucCurrentAccuracy; // 0x318(0x08)
	struct UHorizontalBox* hbRequiredIntelligence; // 0x320(0x08)
	struct UTextBlock* tbRequiredIntelligence; // 0x328(0x08)
	struct UWTLCommonStoreCurrentCharacterParameter* ucCurrentIntelligence; // 0x330(0x08)
	struct UHorizontalBox* hbRequiredFortune; // 0x338(0x08)
	struct UTextBlock* tbRequiredFortune; // 0x340(0x08)
	struct UWTLCommonStoreCurrentCharacterParameter* ucCurrentFortune; // 0x348(0x08)
	enum class EFontSize FontSize; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	float RequiredClassWrapTextAt; // 0x354(0x04)
};

// Class WTL.WTLCommonStoreItemSimilarItems
// Size: 0x2e8 (Inherited: 0x260)
struct UWTLCommonStoreItemSimilarItems : UUserWidget {
	struct UWTLCommonButton* ucBtnPrevious; // 0x260(0x08)
	struct UTextBlock* tbCaption; // 0x268(0x08)
	struct UHorizontalBox* hbItems; // 0x270(0x08)
	struct UWTLCommonButton* ucBtnNext; // 0x278(0x08)
	char pad_280[0x40]; // 0x280(0x40)
	struct TSoftClassPtr<UObject> StoreItemWidgetClass; // 0x2c0(0x28)

	void OnStoreItemClicked(struct FWTLStoreItem& StoreItemData, struct UWTLCommonStoreItem* StoreItem); // Function WTL.WTLCommonStoreItemSimilarItems.OnStoreItemClicked // (Final|Native|Private|HasOutParms) // @ game+0x17d0a30
	void OnPreviousButtonClicked(); // Function WTL.WTLCommonStoreItemSimilarItems.OnPreviousButtonClicked // (Final|Native|Private) // @ game+0x17d0930
	void OnNextButtonClicked(); // Function WTL.WTLCommonStoreItemSimilarItems.OnNextButtonClicked // (Final|Native|Private) // @ game+0x17d0910
	void OnAddStoreItemToCart(uint64_t StoreItemID); // Function WTL.WTLCommonStoreItemSimilarItems.OnAddStoreItemToCart // (Final|Native|Private) // @ game+0x17d0950
};

// Class WTL.WTLCommonStoreItemTags
// Size: 0x2a8 (Inherited: 0x260)
struct UWTLCommonStoreItemTags : UUserWidget {
	struct UWrapBox* wbTags; // 0x260(0x08)
	char pad_268[0x18]; // 0x268(0x18)
	struct TSoftClassPtr<UObject> TagButtonWidgetClass; // 0x280(0x28)

	void OnTagButtonClicked(struct FText& TagText); // Function WTL.WTLCommonStoreItemTags.OnTagButtonClicked // (Final|Native|Private|HasOutParms) // @ game+0x17d0e60
};

// Class WTL.WTLCommonStoreItemTooltip
// Size: 0x280 (Inherited: 0x260)
struct UWTLCommonStoreItemTooltip : UUserWidget {
	struct UTextBlock* tbName; // 0x260(0x08)
	struct UTextBlock* tbType; // 0x268(0x08)
	struct UWTLCommonStoreItemDescription* ucItemDescription; // 0x270(0x08)
	struct UWTLCommonStoreItemRequirements* ucItemRequirements; // 0x278(0x08)
};

// Class WTL.WTLCommonTypeButton
// Size: 0x5b8 (Inherited: 0x340)
struct UWTLCommonTypeButton : UWTLCommonButton {
	char pad_340[0x278]; // 0x340(0x278)
};

// Class WTL.WTLCommonStoreItemTypeButton
// Size: 0x5d8 (Inherited: 0x5b8)
struct UWTLCommonStoreItemTypeButton : UWTLCommonTypeButton {
	char pad_5B8[0x20]; // 0x5b8(0x20)
};

// Class WTL.WTLCommonStoreItemWeaponTypeBonusInfo
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonStoreItemWeaponTypeBonusInfo : UUserWidget {
	struct UWTLRichTextBlock* rtbWeaponTypeBonusInfo; // 0x260(0x08)
};

// Class WTL.WTLCommonStorePremiumItem
// Size: 0x408 (Inherited: 0x408)
struct UWTLCommonStorePremiumItem : UWTLCommonStoreItemBase {
};

// Class WTL.WTLCommonStoreTagButton
// Size: 0x440 (Inherited: 0x3f8)
struct UWTLCommonStoreTagButton : UWTLCommonTextButton {
	struct UTextBlock* tbHashSign; // 0x3f8(0x08)
	char pad_400[0x18]; // 0x400(0x18)
	struct FSlateColor HoveredTextColor; // 0x418(0x28)
};

// Class WTL.WTLCommonSuggestionList
// Size: 0x300 (Inherited: 0x260)
struct UWTLCommonSuggestionList : UUserWidget {
	struct UScrollBox* SuggestionsScrollBox; // 0x260(0x08)
	char pad_268[0x68]; // 0x268(0x68)
	struct TSoftClassPtr<UObject> SuggestionTextWidgetClass; // 0x2d0(0x28)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void OnSuggestionsScrollBoxUserScrolled(float CurrentOffset); // Function WTL.WTLCommonSuggestionList.OnSuggestionsScrollBoxUserScrolled // (Final|Native|Private) // @ game+0x17d2060
	void OnSelected(struct FText& Suggestion); // Function WTL.WTLCommonSuggestionList.OnSelected // (Final|Native|Private|HasOutParms) // @ game+0x17d1f20
};

// Class WTL.WTLCommonSuggestionText
// Size: 0x4d8 (Inherited: 0x4a0)
struct UWTLCommonSuggestionText : UWTLCommonSelectedItem {
	struct UTextBlock* SuggestionTextBlock; // 0x4a0(0x08)
	char pad_4A8[0x30]; // 0x4a8(0x30)
};

// Class WTL.WTLCommonSuggestionTextBox
// Size: 0x310 (Inherited: 0x260)
struct UWTLCommonSuggestionTextBox : UUserWidget {
	struct UEditableTextBox* TextBox; // 0x260(0x08)
	struct UMenuAnchor* MenuAnchor; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct UWTLCommonSuggestionList* m_SuggestionList; // 0x278(0x08)
	struct TSoftClassPtr<UObject> SuggestionListWidgetClass; // 0x280(0x28)
	int32_t VisibleSuggestionsWithoutScroll; // 0x2a8(0x04)
	float SuggestionTextHeight; // 0x2ac(0x04)
	bool bIsSuggestAccountCharacters; // 0x2b0(0x01)
	bool bIsSuggestFriends; // 0x2b1(0x01)
	bool OverrideFont; // 0x2b2(0x01)
	char pad_2B3[0x5]; // 0x2b3(0x05)
	struct FSlateFontInfo Font; // 0x2b8(0x58)

	void OnTextBoxTextChanged(struct FText& Text); // Function WTL.WTLCommonSuggestionTextBox.OnTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x17d2650
	void OnSelectedSuggestion(struct FText& Suggestion); // Function WTL.WTLCommonSuggestionTextBox.OnSelectedSuggestion // (Final|Native|Private|HasOutParms) // @ game+0x17d24d0
	struct UWidget* OnGetUserMenuContentEvent(); // Function WTL.WTLCommonSuggestionTextBox.OnGetUserMenuContentEvent // (Final|Native|Private) // @ game+0x17d2630
};

// Class WTL.WTLCommonTabButton
// Size: 0x12c8 (Inherited: 0x340)
struct UWTLCommonTabButton : UWTLCommonButton {
	char pad_340[0x28]; // 0x340(0x28)
	struct FButtonStyle TabNormalButtonStyle; // 0x368(0x278)
	struct FButtonStyle TabSelectedButtonStyle; // 0x5e0(0x278)
	struct FButtonStyle TabFirstNormalButtonStyle; // 0x858(0x278)
	struct FButtonStyle TabFirstSelectedButtonStyle; // 0xad0(0x278)
	struct FButtonStyle TabLastNormalButtonStyle; // 0xd48(0x278)
	struct FButtonStyle TabLastSelectedButtonStyle; // 0xfc0(0x278)
	struct FSlateColor TabNormalSlateColor; // 0x1238(0x28)
	struct FSlateColor TabHoveredSlateColor; // 0x1260(0x28)
	struct FSlateColor TabSelectedSlateColor; // 0x1288(0x28)
	struct FText Text; // 0x12b0(0x18)
};

// Class WTL.WTLCommonText
// Size: 0x2b0 (Inherited: 0x290)
struct UWTLCommonText : UWTLCommonBase {
	struct UTextBlock* tbText; // 0x290(0x08)
	struct FText Text; // 0x298(0x18)
};

// Class WTL.WTLCommonTextCheckBox
// Size: 0x348 (Inherited: 0x2f0)
struct UWTLCommonTextCheckBox : UWTLCommonCheckBox {
	struct UButton* btnCheckBox; // 0x2f0(0x08)
	struct UBorder* bContent; // 0x2f8(0x08)
	struct UTextBlock* tbCheckBox; // 0x300(0x08)
	char pad_308[0x10]; // 0x308(0x10)
	struct FText Text; // 0x318(0x18)
	bool bUseHoveredContentColor; // 0x330(0x01)
	char pad_331[0x3]; // 0x331(0x03)
	struct FLinearColor HoveredContentColor; // 0x334(0x10)
	char pad_344[0x4]; // 0x344(0x04)

	void OnCheckBoxButtonClicked(); // Function WTL.WTLCommonTextCheckBox.OnCheckBoxButtonClicked // (Final|Native|Private) // @ game+0x17d2cf0
};

// Class WTL.WTLCommonTicker
// Size: 0x280 (Inherited: 0x260)
struct UWTLCommonTicker : UUserWidget {
	struct UTextBlock* tbTicker; // 0x260(0x08)
	char pad_268[0xc]; // 0x268(0x0c)
	float WidgetSizeX; // 0x274(0x04)
	float Speed; // 0x278(0x04)
	bool bIsManualColor; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)

	void SetText(struct FText& Text); // Function WTL.WTLCommonTicker.SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17d2ff0
	void SetColor(struct FSlateColor& Color); // Function WTL.WTLCommonTicker.SetColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17d2e90
	void ResetColor(); // Function WTL.WTLCommonTicker.ResetColor // (Final|Native|Public|BlueprintCallable) // @ game+0x17d2e60
};

// Class WTL.WTLCommonToggleSwitcher
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonToggleSwitcher : UUserWidget {
	struct UWidgetSwitcher* wsSwitcher; // 0x260(0x08)
};

// Class WTL.WTLCommonToolTipText
// Size: 0x268 (Inherited: 0x260)
struct UWTLCommonToolTipText : UUserWidget {
	struct UTextBlock* tbToolTipText; // 0x260(0x08)
};

// Class WTL.WTLCommonTopUpCreditsSmallButton
// Size: 0x340 (Inherited: 0x340)
struct UWTLCommonTopUpCreditsSmallButton : UWTLCommonButton {
};

// Class WTL.WTLCommonTutorialWindow
// Size: 0x348 (Inherited: 0x288)
struct UWTLCommonTutorialWindow : UWTLCommonWindowBase {
	struct UBorder* bWidth; // 0x288(0x08)
	struct UBorder* bHeight; // 0x290(0x08)
	struct UHorizontalBox* hbMessagesCount; // 0x298(0x08)
	struct UImage* imgMessage; // 0x2a0(0x08)
	struct URichTextBlock* rtbMessage; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsCheckBox; // 0x2b0(0x08)
	struct UWTLCommonCheckBox* cbDisableTutorial; // 0x2b8(0x08)
	struct UWTLCommonCheckBox* cbDoNotShowAgain; // 0x2c0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2c8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnPrevious; // 0x2d0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnNext; // 0x2d8(0x08)
	struct UTextBlock* tbCurrentMessageNumber; // 0x2e0(0x08)
	struct UTextBlock* tbMessagesCount; // 0x2e8(0x08)
	char pad_2F0[0x4c]; // 0x2f0(0x4c)
	float MinWidth; // 0x33c(0x04)
	float MinHeight; // 0x340(0x04)
	float PaddingSize; // 0x344(0x04)

	void OnPreviousBtnClicked(); // Function WTL.WTLCommonTutorialWindow.OnPreviousBtnClicked // (Final|Native|Private) // @ game+0x17d3520
	void OnNextBtnClicked(); // Function WTL.WTLCommonTutorialWindow.OnNextBtnClicked // (Final|Native|Private) // @ game+0x17d3500
	void OnDoNotShowAgainCheckBoxCheckStateChanged(bool bIsChecked); // Function WTL.WTLCommonTutorialWindow.OnDoNotShowAgainCheckBoxCheckStateChanged // (Final|Native|Private) // @ game+0x17d3540
};

// Class WTL.WTLCommonURLButton
// Size: 0x440 (Inherited: 0x3f8)
struct UWTLCommonURLButton : UWTLCommonTextButton {
	struct UBorder* bUnderline; // 0x3f8(0x08)
	struct FString URL; // 0x400(0x10)
	struct FSlateColor HoveredTextColor; // 0x410(0x28)
	bool IsShowUnderline; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
};

// Class WTL.WTLConsole
// Size: 0x130 (Inherited: 0x130)
struct UWTLConsole : UConsole {
};

// Class WTL.WTLControlledAnimInstance
// Size: 0x2e0 (Inherited: 0x2c0)
struct UWTLControlledAnimInstance : UAnimInstance {
	struct AWTLControlledMonsterPawn* m_Pawn; // 0x2b8(0x08)
	float VelocitySpeed; // 0x2c0(0x04)
	struct FVector VelocityDirection; // 0x2c4(0x0c)
	bool IsWalkableFloor; // 0x2d0(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
};

// Class WTL.WTLControlledDrone
// Size: 0x758 (Inherited: 0x4d8)
struct AWTLControlledDrone : AWTLDrone {
	char pad_4D8[0x38]; // 0x4d8(0x38)
	float m_CurrentYawInputValue; // 0x510(0x04)
	char pad_514[0x1]; // 0x514(0x01)
	bool m_bShowPreparing; // 0x515(0x01)
	char pad_516[0xc2]; // 0x516(0xc2)
	struct UWTLFloatingPawnMovement* m_MovementComponent; // 0x5d8(0x08)
	struct USceneCaptureComponent2D* CameraCaptureComponent; // 0x5e0(0x08)
	struct UFMODAudioComponent* Horn; // 0x5e8(0x08)
	struct UFMODAudioComponent* HitSound; // 0x5f0(0x08)
	struct UPointLightComponent* Indicator; // 0x5f8(0x08)
	struct UParticleSystemComponent* Dust; // 0x600(0x08)
	struct UTexture* TextureTarget; // 0x608(0x08)
	bool ReplicateCameraRotation; // 0x610(0x01)
	char pad_611[0x3]; // 0x611(0x03)
	float CameraFramerate; // 0x614(0x04)
	int32_t RenderTargetWidth; // 0x618(0x04)
	int32_t RenderTargetHeight; // 0x61c(0x04)
	float CameraMaxPitchAngle; // 0x620(0x04)
	float CameraMinPitchAngle; // 0x624(0x04)
	float CameraPitchSensivityMultiplier; // 0x628(0x04)
	float CameraYawSensivityMultiplier; // 0x62c(0x04)
	float AlternativePitchSensivityMultiplier; // 0x630(0x04)
	float AlternativeYawSensivityMultiplier; // 0x634(0x04)
	float DroneAcceleration; // 0x638(0x04)
	float m_PreparationTime; // 0x63c(0x04)
	bool UseAlternativeInputMode; // 0x640(0x01)
	char pad_641[0x3]; // 0x641(0x03)
	float MinMovementRotationSpeedCorrection; // 0x644(0x04)
	float MaxMovementRotationSpeedCorrection; // 0x648(0x04)
	float YawInputDeadZone; // 0x64c(0x04)
	enum class EWTLControlledDroneAbilityType MainAbilityType; // 0x650(0x01)
	enum class EWTLControlledDroneAbilityType SecondAbilityType; // 0x651(0x01)
	enum class ETraceTypeQuery InteractiveTrace; // 0x652(0x01)
	char pad_653[0x1d]; // 0x653(0x1d)
	float MaxDistanceForScaning; // 0x670(0x04)
	float PauseBetweenAbility1; // 0x674(0x04)
	char pad_678[0x8]; // 0x678(0x08)
	float EnergyPercentConsumptionPerUseAbility; // 0x680(0x04)
	float PreparationProgressPerSecond; // 0x684(0x04)
	float AlternativeAbilityPreparationProgressPerSecond; // 0x688(0x04)
	char pad_68C[0x4]; // 0x68c(0x04)
	struct TSoftClassPtr<UObject> MainAbilityEffect; // 0x690(0x28)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x6b8(0x10)
	bool CanSearchCharacters; // 0x6c8(0x01)
	bool CanSearchMonsters; // 0x6c9(0x01)
	bool CanSearchNPC; // 0x6ca(0x01)
	bool CanSearchPlaceableStuffs; // 0x6cb(0x01)
	bool CanSearchStashes; // 0x6cc(0x01)
	char pad_6CD[0x3]; // 0x6cd(0x03)
	struct TArray<struct UMaterialInterface*> AlternativeDroneMaterials; // 0x6d0(0x10)
	char pad_6E0[0x34]; // 0x6e0(0x34)
	float m_JammingIntencity; // 0x714(0x04)
	char pad_718[0x40]; // 0x718(0x40)

	void Server_UpdateCameraPitch(float Value); // Function WTL.WTLControlledDrone.Server_UpdateCameraPitch // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d3f70
	void Server_ShowPreparingToUseSecondAbility(bool Value); // Function WTL.WTLControlledDrone.Server_ShowPreparingToUseSecondAbility // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d4440
	void Server_ShowPreparingToUseMainAbility(bool Value); // Function WTL.WTLControlledDrone.Server_ShowPreparingToUseMainAbility // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d4550
	void Server_SetDroneRotationYaw(float ClientYaw); // Function WTL.WTLControlledDrone.Server_SetDroneRotationYaw // (Final|Net|Native|Event|Private|NetServer|NetValidate) // @ game+0x17d3d00
	void Server_SetBrake(bool Value); // Function WTL.WTLControlledDrone.Server_SetBrake // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d4790
	void Server_OnUseSecondAbility(struct FVector CameraDirection); // Function WTL.WTLControlledDrone.Server_OnUseSecondAbility // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate) // @ game+0x17d4230
	void Server_OnUseMainAbility(struct FVector ActualDronePosition); // Function WTL.WTLControlledDrone.Server_OnUseMainAbility // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate) // @ game+0x17d4660
	void Server_OnUseHorn(); // Function WTL.WTLControlledDrone.Server_OnUseHorn // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d40f0
	void Server_OnStartSelfDestruction(); // Function WTL.WTLControlledDrone.Server_OnStartSelfDestruction // (Final|Net|Native|Event|Private|NetServer|NetValidate) // @ game+0x17d4070
	void Server_AddYawInput(float Value); // Function WTL.WTLControlledDrone.Server_AddYawInput // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d48a0
	void Server_AddMoveUpInput(float Value); // Function WTL.WTLControlledDrone.Server_AddMoveUpInput // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d4ba0
	void Server_AddMoveRightInput(float Value); // Function WTL.WTLControlledDrone.Server_AddMoveRightInput // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d49a0
	void Server_AddMoveForwardInput(float Value); // Function WTL.WTLControlledDrone.Server_AddMoveForwardInput // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17d4aa0
	void OnRep_ShowPreparing(); // Function WTL.WTLControlledDrone.OnRep_ShowPreparing // (Final|Native|Private) // @ game+0x17d3c80
	void NetMulticast_StartUse(); // Function WTL.WTLControlledDrone.NetMulticast_StartUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x17d4ca0
	void NetMulticast_OnUseSecondAbility(struct FVector CameraDirection); // Function WTL.WTLControlledDrone.NetMulticast_OnUseSecondAbility // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x17d4150
	void NetMulticast_OnUseMainAbility(struct FVector CameraDirection); // Function WTL.WTLControlledDrone.NetMulticast_OnUseMainAbility // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x17d4360
	void NetMulticast_OnUseHorn(); // Function WTL.WTLControlledDrone.NetMulticast_OnUseHorn // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x17d40d0
	void K2_StartUse(); // Function WTL.WTLControlledDrone.K2_StartUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_ShowPreparing(bool Show); // Function WTL.WTLControlledDrone.K2_ShowPreparing // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	struct FRotator GetCaptureComponentWorldRotation(); // Function WTL.WTLControlledDrone.GetCaptureComponentWorldRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17d3c20
	float GetAngleBetweenCameraAndBody(); // Function WTL.WTLControlledDrone.GetAngleBetweenCameraAndBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17d3c00
	void Client_ShowScanningResult(struct TArray<struct FWTLMarkerMemoryElement> Markers); // Function WTL.WTLControlledDrone.Client_ShowScanningResult // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17d3e20
	void Client_DestroyDrone(); // Function WTL.WTLControlledDrone.Client_DestroyDrone // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17d3e00
};

// Class WTL.WTLControlledDroneScreen
// Size: 0x568 (Inherited: 0x260)
struct UWTLControlledDroneScreen : UUserWidget {
	char pad_260[0x8]; // 0x260(0x08)
	struct UTextBlock* tbSpeed; // 0x268(0x08)
	struct UProgressBar* pbScanning; // 0x270(0x08)
	struct UImage* imgSignal1; // 0x278(0x08)
	struct UImage* imgSignal2; // 0x280(0x08)
	struct UImage* imgSignal3; // 0x288(0x08)
	struct UProgressBar* pbHeight; // 0x290(0x08)
	struct UWidgetSwitcher* wsSwitcher; // 0x298(0x08)
	struct UCanvasPanel* cpWarningMessage; // 0x2a0(0x08)
	struct UCanvasPanel* cpScanningResult; // 0x2a8(0x08)
	struct UTextBlock* tbScanningResultNum; // 0x2b0(0x08)
	struct UProgressBar* pbCooldown; // 0x2b8(0x08)
	struct UProgressBar* pbCondition; // 0x2c0(0x08)
	float CameraRotation; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct UTextBlock* tbDistance; // 0x2d0(0x08)
	struct UProgressBar* pbEnergy; // 0x2d8(0x08)
	struct UTextBlock* tbSerialNumber; // 0x2e0(0x08)
	struct UImage* imgCircle; // 0x2e8(0x08)
	struct UImage* imgArrow; // 0x2f0(0x08)
	struct UTextBlock* tbNorth; // 0x2f8(0x08)
	struct UTextBlock* tbHeight; // 0x300(0x08)
	struct UTextBlock* tbCooldown; // 0x308(0x08)
	struct UTextBlock* tbCondiiton; // 0x310(0x08)
	struct UTextBlock* tbWarningMessage; // 0x318(0x08)
	struct UThrobber* thLoadingConf; // 0x320(0x08)
	struct UImage* imgConfLogo; // 0x328(0x08)
	struct UImage* imgBSLogo; // 0x330(0x08)
	struct UThrobber* thLoadingBS; // 0x338(0x08)
	struct UThrobber* thLoadingNone; // 0x340(0x08)
	struct UImage* imgOrigin; // 0x348(0x08)
	struct UImage* imgCross; // 0x350(0x08)
	struct UCanvasPanel* cpSatellite; // 0x358(0x08)
	struct UImage* imgSatellite; // 0x360(0x08)
	struct UImage* imgSatelliteCross; // 0x368(0x08)
	struct UCanvasPanel* cpMainCanvasPanel; // 0x370(0x08)
	struct UTextBlock* tbDroneLocation; // 0x378(0x08)
	struct UCanvasPanel* cpSelfDestruction; // 0x380(0x08)
	bool bIsThirdPerson; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct TSoftObjectPtr<UFMODEvent> SuccessfulScanSound; // 0x390(0x28)
	struct TSoftObjectPtr<UFMODEvent> FailedScanSound; // 0x3b8(0x28)
	struct TSoftObjectPtr<UFMODEvent> WarningSound; // 0x3e0(0x28)
	struct FSlateColor MainColor; // 0x408(0x28)
	struct TSoftClassPtr<UObject> TargetWidget; // 0x430(0x28)
	struct UTextBlock* tbPongScore1; // 0x458(0x08)
	struct UTextBlock* tbPongScore2; // 0x460(0x08)
	struct UImage* imgPongPlayer1; // 0x468(0x08)
	struct UImage* imgPongPlayer2; // 0x470(0x08)
	struct UImage* imgPongBall; // 0x478(0x08)
	float PlatformSpeed; // 0x480(0x04)
	char pad_484[0x8]; // 0x484(0x08)
	float BallSpeed; // 0x48c(0x04)
	struct TSoftObjectPtr<UFMODEvent> PongBallHitSound; // 0x490(0x28)
	char pad_4B8[0x8a]; // 0x4b8(0x8a)
	bool m_bShowGlitch; // 0x542(0x01)
	char pad_543[0x5]; // 0x543(0x05)
	float MinGlitchOpacity; // 0x548(0x04)
	float MaxGlitchOpacity; // 0x54c(0x04)
	bool m_bLineTraceIsBlocked; // 0x550(0x01)
	bool m_bShowSatelliteCross; // 0x551(0x01)
	char pad_552[0x16]; // 0x552(0x16)

	void ShowScanningResult(int32_t MarkersNum); // Function WTL.WTLControlledDroneScreen.ShowScanningResult // (Final|Native|Protected) // @ game+0x17d6610
	void ShowHit(); // Function WTL.WTLControlledDroneScreen.ShowHit // (Final|Native|Protected) // @ game+0x17d65d0
	void K2_ShowScanningResult(); // Function WTL.WTLControlledDroneScreen.K2_ShowScanningResult // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_ShowHit(bool Show); // Function WTL.WTLControlledDroneScreen.K2_ShowHit // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_ShowGlitch(bool Show); // Function WTL.WTLControlledDroneScreen.K2_ShowGlitch // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMonsterPawn
// Size: 0xf10 (Inherited: 0x4c0)
struct AWTLMonsterPawn : ACharacter {
	char pad_4C0[0x18]; // 0x4c0(0x18)
	struct AWTLMonsterSpawner* m_MonsterSpawner; // 0x4d8(0x08)
	struct AWTLMonsterPawnAIController* m_Controller; // 0x4e0(0x08)
	char pad_4E8[0xc0]; // 0x4e8(0xc0)
	struct TSoftObjectPtr<UTexture2D> m_RectTexture; // 0x5a8(0x28)
	struct TSoftObjectPtr<UFont> m_HUDFont; // 0x5d0(0x28)
	enum class EWTLMonsterMovementMode m_MovementMode; // 0x5f8(0x01)
	enum class EWTLMonsterActionType m_CurrentAction; // 0x5f9(0x01)
	enum class EWTLMonsterActionType m_CurrentAdditiveAction; // 0x5fa(0x01)
	char pad_5FB[0x1d]; // 0x5fb(0x1d)
	uint32_t m_ReplicatedStamina; // 0x618(0x04)
	float m_CurrentLevelOfStun; // 0x61c(0x04)
	int32_t m_ConditionShield; // 0x620(0x04)
	char pad_624[0x4]; // 0x624(0x04)
	bool m_WasStunned; // 0x628(0x01)
	char pad_629[0x8f]; // 0x629(0x8f)
	struct FWTLStorageContent m_PublicStorageContent; // 0x6b8(0xa8)
	struct FWTLStorageContent m_SummaryStorageContent; // 0x760(0xa8)
	struct FWTLStorageContent m_PrivateStorageContent; // 0x808(0xa8)
	char pad_8B0[0x40]; // 0x8b0(0x40)
	bool m_bIsInStealthMode; // 0x8f0(0x01)
	char pad_8F1[0x9b]; // 0x8f1(0x9b)
	struct FVector m_LocationDead; // 0x98c(0x0c)
	char pad_998[0xc0]; // 0x998(0xc0)
	uint32_t m_ReplicatedHealth; // 0xa58(0x04)
	char pad_A5C[0x10]; // 0xa5c(0x10)
	float m_Aggression; // 0xa6c(0x04)
	char pad_A70[0x4]; // 0xa70(0x04)
	float m_MultiplierParameters; // 0xa74(0x04)
	bool IsUseEyesViewPoint; // 0xa78(0x01)
	char pad_A79[0x3]; // 0xa79(0x03)
	struct FVector EyesViewPointLocation; // 0xa7c(0x0c)
	struct FRotator EyesViewPointRotation; // 0xa88(0x0c)
	bool bIncreaseDamageWhenChangingTarget; // 0xa94(0x01)
	char pad_A95[0x3]; // 0xa95(0x03)
	float DamageMultiplierIDCT; // 0xa98(0x04)
	char pad_A9C[0x4]; // 0xa9c(0x04)
	struct AActor* OldTargetIDCT; // 0xaa0(0x08)
	float ActualDamageMultiplierIDCT; // 0xaa8(0x04)
	bool IsUseRotation; // 0xaac(0x01)
	bool IsUseSlope; // 0xaad(0x01)
	bool IsRotationToForwardVector; // 0xaae(0x01)
	bool IsUseRoll; // 0xaaf(0x01)
	bool IsUseXRotation; // 0xab0(0x01)
	char pad_AB1[0x3]; // 0xab1(0x03)
	struct FRotator OffsetRotationMesh; // 0xab4(0x0c)
	bool bIgnoreIsWalkableFloor; // 0xac0(0x01)
	char pad_AC1[0x3]; // 0xac1(0x03)
	float SpeedRotationPerSecond; // 0xac4(0x04)
	bool isOffsetMeshNetLag; // 0xac8(0x01)
	char pad_AC9[0x3]; // 0xac9(0x03)
	int32_t MonsterID; // 0xacc(0x04)
	int32_t GroupId; // 0xad0(0x04)
	int32_t MyRank; // 0xad4(0x04)
	int32_t CommandPointsPrice; // 0xad8(0x04)
	enum class EWTLFaction MyFaction; // 0xadc(0x01)
	bool DetectOnMap; // 0xadd(0x01)
	char pad_ADE[0x2]; // 0xade(0x02)
	float NormalActorTickInterval; // 0xae0(0x04)
	bool ReactionToEMPWeapon; // 0xae4(0x01)
	bool IsCanBeStunned; // 0xae5(0x01)
	bool IsCanUseShield; // 0xae6(0x01)
	bool CanTakeDamageFromEnvironment; // 0xae7(0x01)
	float StunRecoveryPerSecond; // 0xae8(0x04)
	bool AnimationUpdateRate; // 0xaec(0x01)
	char pad_AED[0x3]; // 0xaed(0x03)
	float StaminaRecoveryPerSecond; // 0xaf0(0x04)
	float DangerLevel; // 0xaf4(0x04)
	float LifespanAfterDeath; // 0xaf8(0x04)
	char pad_AFC[0x4]; // 0xafc(0x04)
	struct UPhysicsAsset* MeshPhysicsAsset; // 0xb00(0x08)
	float KillZ; // 0xb08(0x04)
	struct FVector OffsetFarAttackStart; // 0xb0c(0x0c)
	struct FVector OffsetFarAttackEnd; // 0xb18(0x0c)
	bool bCanJumpToEnemy; // 0xb24(0x01)
	char pad_B25[0x3]; // 0xb25(0x03)
	float DistanceForJump; // 0xb28(0x04)
	float PowerJump; // 0xb2c(0x04)
	bool bCanBeUseStealth; // 0xb30(0x01)
	bool bCanMoveInStealth; // 0xb31(0x01)
	char pad_B32[0x2]; // 0xb32(0x02)
	float LoafSpeed; // 0xb34(0x04)
	float WalkSpeed; // 0xb38(0x04)
	float SprintSpeed; // 0xb3c(0x04)
	float SprintStaminaCost; // 0xb40(0x04)
	float NormalAcceleration; // 0xb44(0x04)
	float FastAcceleration; // 0xb48(0x04)
	bool bIsWounded; // 0xb4c(0x01)
	bool IsInvulnerable; // 0xb4d(0x01)
	char pad_B4E[0x2]; // 0xb4e(0x02)
	struct TMap<enum class EWTLMonsterActionType, float> StaminaCosts; // 0xb50(0x50)
	int32_t AvailableRandomActions; // 0xba0(0x04)
	float MaxHeadArmor; // 0xba4(0x04)
	float HeadArmor; // 0xba8(0x04)
	float MaxBodyArmor; // 0xbac(0x04)
	float BodyArmor; // 0xbb0(0x04)
	float MaxArmsArmor; // 0xbb4(0x04)
	float ArmsArmor; // 0xbb8(0x04)
	float MaxLegsArmor; // 0xbbc(0x04)
	float LegsArmor; // 0xbc0(0x04)
	float MaxFeetArmor; // 0xbc4(0x04)
	float FeetArmor; // 0xbc8(0x04)
	char pad_BCC[0x4]; // 0xbcc(0x04)
	struct UAnimSequenceBase* MainAttackAnimation; // 0xbd0(0x08)
	struct UAnimSequenceBase* SecondaryAttackAnimation; // 0xbd8(0x08)
	struct UAnimSequenceBase* DeathAnimation; // 0xbe0(0x08)
	struct TArray<struct UAnimSequenceBase*> DeathAnimations; // 0xbe8(0x10)
	struct TArray<struct UAnimSequenceBase*> SpecialAbilityAnimations; // 0xbf8(0x10)
	struct TArray<struct UAnimSequenceBase*> IdleAnimations; // 0xc08(0x10)
	struct TArray<struct UAnimSequenceBase*> CustomActionAnimations; // 0xc18(0x10)
	struct TArray<struct FWTLMonsterActionBase> IdleAnimationsBase; // 0xc28(0x10)
	struct TMap<enum class EWTLMonsterActionType, struct FWTLMonsterActionBase> ActionAnimationsBase; // 0xc38(0x50)
	int32_t UseAnimationFromAnimInstance; // 0xc88(0x04)
	bool bUseServerSideAnimations; // 0xc8c(0x01)
	bool bUseHUDCrosshair; // 0xc8d(0x01)
	char pad_C8E[0x2]; // 0xc8e(0x02)
	struct FVector2D HUDCrosshairOffset; // 0xc90(0x08)
	bool bUseListTarget; // 0xc98(0x01)
	char pad_C99[0x7]; // 0xc99(0x07)
	double MaxAgeInListTargets; // 0xca0(0x08)
	bool bUseVisibleTarget; // 0xca8(0x01)
	char pad_CA9[0x3]; // 0xca9(0x03)
	float VisionDistance; // 0xcac(0x04)
	float UpdateVisionInterval; // 0xcb0(0x04)
	float HalfAngleVision; // 0xcb4(0x04)
	bool bBroadcastDeathToKillers; // 0xcb8(0x01)
	bool bApplyFlyOffset; // 0xcb9(0x01)
	enum class EWTLMonsterState m_BlackboardState; // 0xcba(0x01)
	enum class EWTLMonsterState RepBlackboardState; // 0xcbb(0x01)
	char pad_CBC[0x10]; // 0xcbc(0x10)
	struct FVector OffsetIdentityPosition; // 0xccc(0x0c)
	struct FMulticastInlineDelegate OnDeathDelegate; // 0xcd8(0x10)
	struct AActor* MonsterOwner; // 0xce8(0x08)
	struct AActor* TargetWaypoint; // 0xcf0(0x08)
	enum class EWTLMonsterAttachState AttachedState; // 0xcf8(0x01)
	bool IsBurst; // 0xcf9(0x01)
	char PercentDamageBurst; // 0xcfa(0x01)
	char pad_CFB[0x1]; // 0xcfb(0x01)
	float TakeDamageBurst; // 0xcfc(0x04)
	char MinLevelBurst; // 0xd00(0x01)
	char MaxLevelBurst; // 0xd01(0x01)
	enum class EPhysicalSurface PhysicalSurface; // 0xd02(0x01)
	char pad_D03[0x5]; // 0xd03(0x05)
	struct TMap<enum class EWTLWeaponType, float> WeaponTypeDamageMultipliers; // 0xd08(0x50)
	struct TMap<enum class EWTLColliderType, float> ColliderChancesDamage; // 0xd58(0x50)
	bool bUseAmmoDamageMultipliers; // 0xda8(0x01)
	char pad_DA9[0x7]; // 0xda9(0x07)
	struct TMap<int32_t, float> AmmoDamageMultipliers; // 0xdb0(0x50)
	bool bUseStunFromAmmoID; // 0xe00(0x01)
	char pad_E01[0x7]; // 0xe01(0x07)
	struct TMap<int32_t, float> StunFromAmmo; // 0xe08(0x50)
	bool bUseTakeDamageInRange; // 0xe58(0x01)
	char pad_E59[0x3]; // 0xe59(0x03)
	float MinTakeDamageInRangeSquare; // 0xe5c(0x04)
	float MaxTakeDamageInRangeSquare; // 0xe60(0x04)
	bool CanFarAttack; // 0xe64(0x01)
	char pad_E65[0x3]; // 0xe65(0x03)
	float MinDistanceFarAttack; // 0xe68(0x04)
	float MaxDistanceFarAttack; // 0xe6c(0x04)
	bool CanFarAttackToBadCharacter; // 0xe70(0x01)
	char pad_E71[0x7]; // 0xe71(0x07)
	struct TArray<struct FWTLItemDropInfo> AdditionalLoot; // 0xe78(0x10)
	float MinCharacterDamageForLoot; // 0xe88(0x04)
	char Level; // 0xe8c(0x01)
	char MaxLevel; // 0xe8d(0x01)
	bool UseReputationBonus; // 0xe8e(0x01)
	bool ReactToPoison; // 0xe8f(0x01)
	bool EdibleForMonster; // 0xe90(0x01)
	bool ApplyAnimationsScale; // 0xe91(0x01)
	char pad_E92[0x2]; // 0xe92(0x02)
	int32_t MonsterExperienceDelta; // 0xe94(0x04)
	float MonsterExperienceTickInterval; // 0xe98(0x04)
	float ExperienceDropCountMultiplierDelta; // 0xe9c(0x04)
	float ExperienceDropChanceMultiplierDelta; // 0xea0(0x04)
	float ClientToServerMovementUpdateFrequency; // 0xea4(0x04)
	float ServerToClientsMovementUpdateFrequency; // 0xea8(0x04)
	char pad_EAC[0x54]; // 0xeac(0x54)
	bool IsFollowVisibleEnemy; // 0xf00(0x01)
	bool IsNearTheVisibleEnemy; // 0xf01(0x01)
	char pad_F02[0x6]; // 0xf02(0x06)
	struct AWTLCharacter* CurrentVisibleEnemy; // 0xf08(0x08)

	void TargetEntersSafeZone(struct AWTLCharacter* Target); // Function WTL.WTLMonsterPawn.TargetEntersSafeZone // (Final|Native|Public|BlueprintCallable) // @ game+0x17941a0
	struct AWTLMonsterProjectile* SpawnProjectile(struct FTransform SpawnTransform, struct AWTLMonsterProjectile* ProjectileClass); // Function WTL.WTLMonsterPawn.SpawnProjectile // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x18588a0
	void SetVisibleEnemy(struct AActor* NewVisibleEnemy); // Function WTL.WTLMonsterPawn.SetVisibleEnemy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1856eb0
	void SetUseAccelerationForPaths(bool Value, enum class EWTLMonsterAcceleration eAcceleration); // Function WTL.WTLMonsterPawn.SetUseAccelerationForPaths // (Final|Native|Public|BlueprintCallable) // @ game+0x1857d60
	void SetStealthMode(bool Value); // Function WTL.WTLMonsterPawn.SetStealthMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1858790
	void SetStateDeath(enum class EWTLMonsterStateDeath State); // Function WTL.WTLMonsterPawn.SetStateDeath // (Final|Native|Public|BlueprintCallable) // @ game+0x185a480
	void SetRegenerateHealthPerSecond(float Value); // Function WTL.WTLMonsterPawn.SetRegenerateHealthPerSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x1856f90
	void SetReactionToEMPWeapon(bool Value); // Function WTL.WTLMonsterPawn.SetReactionToEMPWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x1857880
	void SetReactionOnElectronicBait(bool Value); // Function WTL.WTLMonsterPawn.SetReactionOnElectronicBait // (Final|Native|Public|BlueprintCallable) // @ game+0x185b340
	void SetMovementMode(enum class EWTLMonsterMovementMode Mode); // Function WTL.WTLMonsterPawn.SetMovementMode // (Final|Native|Public|BlueprintCallable) // @ game+0x185ab90
	void SetMonsterRank(int32_t RankValue); // Function WTL.WTLMonsterPawn.SetMonsterRank // (Final|Native|Public|BlueprintCallable) // @ game+0x1857210
	void SetLootAbility(bool Value); // Function WTL.WTLMonsterPawn.SetLootAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void SetLifetime(float Delta); // Function WTL.WTLMonsterPawn.SetLifetime // (Final|Native|Public|BlueprintCallable) // @ game+0x1857c80
	void SetLifespanAfterDeath(float Value); // Function WTL.WTLMonsterPawn.SetLifespanAfterDeath // (Final|Native|Public|BlueprintCallable) // @ game+0x185b270
	void SetIsInvulnerable(bool Value); // Function WTL.WTLMonsterPawn.SetIsInvulnerable // (Final|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void SetHealth(float Value); // Function WTL.WTLMonsterPawn.SetHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x185afc0
	void SetFaction(enum class EWTLFaction MonsterFaction); // Function WTL.WTLMonsterPawn.SetFaction // (Final|Native|Public|BlueprintCallable) // @ game+0x1857080
	void SetEventPoint(struct AWTLEventPoint* EventPoint); // Function WTL.WTLMonsterPawn.SetEventPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x1856b00
	void SetCurrentRotation(struct FRotator Rotation); // Function WTL.WTLMonsterPawn.SetCurrentRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1858b90
	void SetBlackBoardState(enum class EWTLMonsterState State); // Function WTL.WTLMonsterPawn.SetBlackBoardState // (Final|Native|Public|BlueprintCallable) // @ game+0x1856be0
	void SetApplyWeaponTypeDamageMultipliers(bool Value); // Function WTL.WTLMonsterPawn.SetApplyWeaponTypeDamageMultipliers // (Final|Native|Public|BlueprintCallable) // @ game+0x1857f60
	void Server_SetMovementMode(enum class EWTLMonsterMovementMode Mode); // Function WTL.WTLMonsterPawn.Server_SetMovementMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x185aa90
	void Server_PossesBackToCharacter_PlayerInput(); // Function WTL.WTLMonsterPawn.Server_PossesBackToCharacter_PlayerInput // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x185bb30
	void Server_OnClientMove(struct FVector_NetQuantize Location, float Yaw, float Pitch); // Function WTL.WTLMonsterPawn.Server_OnClientMove // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x185ac60
	void RunIdle(float& Duration); // Function WTL.WTLMonsterPawn.RunIdle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x185a550
	void RunAvailableAdditiveFarAttack(float& Duration); // Function WTL.WTLMonsterPawn.RunAvailableAdditiveFarAttack // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x185a630
	void RunAvailableAdditiveAction(float& Duration); // Function WTL.WTLMonsterPawn.RunAvailableAdditiveAction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x185a710
	void RunAdditiveAction(enum class EWTLMonsterActionType ActionType, float& Duration); // Function WTL.WTLMonsterPawn.RunAdditiveAction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x185a7f0
	void RunAction(enum class EWTLMonsterActionType ActionType, float& Duration); // Function WTL.WTLMonsterPawn.RunAction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x185a940
	void RemoveCharacterFromListTargets(struct AWTLCharacter* Character); // Function WTL.WTLMonsterPawn.RemoveCharacterFromListTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x17941a0
	void OnTick(float DeltaTime); // Function WTL.WTLMonsterPawn.OnTick // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnStunned(bool IsStunned); // Function WTL.WTLMonsterPawn.OnStunned // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnStealthModeChanged(bool Value); // Function WTL.WTLMonsterPawn.OnStealthModeChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnServerDeathBpEvent(struct FWTLMonsterDeathData DeathData); // Function WTL.WTLMonsterPawn.OnServerDeathBpEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnReplicatedMovement(float DeltaTime); // Function WTL.WTLMonsterPawn.OnReplicatedMovement // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnRep_StorageContent(); // Function WTL.WTLMonsterPawn.OnRep_StorageContent // (Final|Native|Protected) // @ game+0x185baf0
	void OnRep_Stamina(); // Function WTL.WTLMonsterPawn.OnRep_Stamina // (Final|Native|Protected) // @ game+0x185ba10
	void OnRep_ShortMovementInfo(); // Function WTL.WTLMonsterPawn.OnRep_ShortMovementInfo // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_MovementMode(); // Function WTL.WTLMonsterPawn.OnRep_MovementMode // (Final|Native|Protected) // @ game+0x185bb10
	void OnRep_IsInStealthMode(); // Function WTL.WTLMonsterPawn.OnRep_IsInStealthMode // (Final|Native|Protected) // @ game+0x185ba60
	void OnRep_Health(); // Function WTL.WTLMonsterPawn.OnRep_Health // (Final|Native|Protected) // @ game+0x185ba40
	void OnMonsterKillOnClient(); // Function WTL.WTLMonsterPawn.OnMonsterKillOnClient // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnHealthChanged(float Delta); // Function WTL.WTLMonsterPawn.OnHealthChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnElectronicBait(struct AActor* Target); // Function WTL.WTLMonsterPawn.OnElectronicBait // (Final|Native|Public|BlueprintCallable) // @ game+0x1857400
	void OnDeathEvent(struct APawn* Killer); // Function WTL.WTLMonsterPawn.OnDeathEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnDeathBpEvent(struct FWTLMonsterDeathData DeathData); // Function WTL.WTLMonsterPawn.OnDeathBpEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCurrentActionChanged(enum class EWTLMonsterActionType NewAction, enum class EWTLMonsterActionType PreviousAction); // Function WTL.WTLMonsterPawn.OnCurrentActionChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterDestroy(struct AWTLCharacter* pCharacter); // Function WTL.WTLMonsterPawn.OnCharacterDestroy // (Final|Native|Protected) // @ game+0x17941a0
	void OnBurst(struct FWTLMonsterDeathData DeathData); // Function WTL.WTLMonsterPawn.OnBurst // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnActionTrigger(struct FName ActionName); // Function WTL.WTLMonsterPawn.OnActionTrigger // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetMulticast_SetBlackboardState(enum class EWTLMonsterState BlackboardState); // Function WTL.WTLMonsterPawn.NetMulticast_SetBlackboardState // (Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable) // @ game+0x185b420
	void NetMulticast_PlayAdditiveAction(enum class EWTLMonsterActionType ActionType); // Function WTL.WTLMonsterPawn.NetMulticast_PlayAdditiveAction // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x185b4f0
	void NetMulticast_PlayAction(enum class EWTLMonsterActionType ActionType, char IdleAnimIndex); // Function WTL.WTLMonsterPawn.NetMulticast_PlayAction // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x185b5c0
	void NetMulticast_OnDeath(struct FVector DeathPosition, struct FVector_NetQuantize ActorRotation, struct FVector_NetQuantize MeshRotation, struct FWTLMonsterDeathData DeathData); // Function WTL.WTLMonsterPawn.NetMulticast_OnDeath // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x185b720
	void KillMonster(float KillTimeout); // Function WTL.WTLMonsterPawn.KillMonster // (Final|Native|Public|BlueprintCallable) // @ game+0x18586d0
	void K2_SetMonsterSpawner(struct AWTLMonsterSpawner* Spawner); // Function WTL.WTLMonsterPawn.K2_SetMonsterSpawner // (Final|Native|Public|BlueprintCallable) // @ game+0x1857320
	void K2_SetHighlightState(bool Value); // Function WTL.WTLMonsterPawn.K2_SetHighlightState // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnElectronicBait(struct AActor* Target); // Function WTL.WTLMonsterPawn.K2_OnElectronicBait // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnDeathEvent(); // Function WTL.WTLMonsterPawn.K2_OnDeathEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnConditionShieldChanged(int32_t Value); // Function WTL.WTLMonsterPawn.K2_OnConditionShieldChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnClientBulletHit(struct APawn* DamageInstigator, struct FHitResult& HitResult, int32_t WeaponID, int32_t AmmoID); // Function WTL.WTLMonsterPawn.K2_OnClientBulletHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnChangeFaction(enum class EWTLFaction NewFaction, enum class EWTLFaction OldFaction); // Function WTL.WTLMonsterPawn.K2_OnChangeFaction // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnBeginPlayFinish(); // Function WTL.WTLMonsterPawn.K2_OnBeginPlayFinish // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnApplyDamageToShield(struct APawn* DamageInstigator, struct FHitResult& HitResult, int32_t WeaponID, int32_t AmmoID, float DamageValue); // Function WTL.WTLMonsterPawn.K2_OnApplyDamageToShield // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	struct AWTLMonsterSpawner* K2_GetMonsterSpawner(); // Function WTL.WTLMonsterPawn.K2_GetMonsterSpawner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857300
	bool IsWasStunned(); // Function WTL.WTLMonsterPawn.IsWasStunned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18577e0
	bool IsVisible(); // Function WTL.WTLMonsterPawn.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858a70
	bool IsReactionToEMPWeapon(); // Function WTL.WTLMonsterPawn.IsReactionToEMPWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857860
	bool IsInAdditiveAction(); // Function WTL.WTLMonsterPawn.IsInAdditiveAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858ad0
	bool IsGroundDrone(); // Function WTL.WTLMonsterPawn.IsGroundDrone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1856e10
	bool IsFlyingDrone(); // Function WTL.WTLMonsterPawn.IsFlyingDrone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1856e50
	bool IsEnoughStaminaForAction(enum class EWTLMonsterActionType ActionType); // Function WTL.WTLMonsterPawn.IsEnoughStaminaForAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858c70
	bool IsDrone(); // Function WTL.WTLMonsterPawn.IsDrone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1856e80
	bool IsDetectOnMap(); // Function WTL.WTLMonsterPawn.IsDetectOnMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18571f0
	bool IsDead(); // Function WTL.WTLMonsterPawn.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858b30
	bool IsCharacterInBlackList(struct AWTLCharacter* Character); // Function WTL.WTLMonsterPawn.IsCharacterInBlackList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18583c0
	bool IsCanBeLooted(); // Function WTL.WTLMonsterPawn.IsCanBeLooted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1856db0
	bool IsApplyWeaponTypeDamageMultipliers(); // Function WTL.WTLMonsterPawn.IsApplyWeaponTypeDamageMultipliers // (Final|Native|Public|BlueprintCallable) // @ game+0x1857f30
	bool IsAlive(); // Function WTL.WTLMonsterPawn.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858b60
	void InterruptIdleState(); // Function WTL.WTLMonsterPawn.InterruptIdleState // (Final|Native|Public|BlueprintCallable) // @ game+0x18586a0
	void InterruptCurrentAction(); // Function WTL.WTLMonsterPawn.InterruptCurrentAction // (Final|Native|Public|BlueprintCallable) // @ game+0x17d6c00
	void IncrementStamina(float Value); // Function WTL.WTLMonsterPawn.IncrementStamina // (Final|Native|Public|BlueprintCallable) // @ game+0x185aee0
	void IncrementShield(int32_t Value); // Function WTL.WTLMonsterPawn.IncrementShield // (Final|Native|Public|BlueprintCallable) // @ game+0x18575f0
	void IncrementLevelOfStun(float Value); // Function WTL.WTLMonsterPawn.IncrementLevelOfStun // (Final|Native|Public|BlueprintCallable) // @ game+0x18576e0
	void IncrementHealth(float Value); // Function WTL.WTLMonsterPawn.IncrementHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x185b170
	enum class EWTLMonsterStateDeath GetStateDeath(); // Function WTL.WTLMonsterPawn.GetStateDeath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185a460
	float GetStamina(); // Function WTL.WTLMonsterPawn.GetStamina // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185aec0
	float GetRemotePitch(); // Function WTL.WTLMonsterPawn.GetRemotePitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd70
	bool GetReactionOnSafeZone(); // Function WTL.WTLMonsterPawn.GetReactionOnSafeZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858b10
	bool GetReactionOnElectronicBait(); // Function WTL.WTLMonsterPawn.GetReactionOnElectronicBait // (Final|Native|Public|BlueprintCallable) // @ game+0x185b250
	float GetOldHealth(); // Function WTL.WTLMonsterPawn.GetOldHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857bc0
	enum class EWTLMonsterMovementMode GetMovementMode(); // Function WTL.WTLMonsterPawn.GetMovementMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857c00
	char GetMonsterRank(); // Function WTL.WTLMonsterPawn.GetMonsterRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18572e0
	int32_t GetMonsterID(); // Function WTL.WTLMonsterPawn.GetMonsterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857ae0
	float GetMaxHealth(); // Function WTL.WTLMonsterPawn.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857b80
	int32_t GetMasterMonsterID(); // Function WTL.WTLMonsterPawn.GetMasterMonsterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857ab0
	float GetLifetime(); // Function WTL.WTLMonsterPawn.GetLifetime // (Final|Native|Public|BlueprintCallable) // @ game+0x1857c40
	struct FString GetHumanReadableName(); // Function WTL.WTLMonsterPawn.GetHumanReadableName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857b00
	float GetHealthLost(); // Function WTL.WTLMonsterPawn.GetHealthLost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857ba0
	float GetHealth(); // Function WTL.WTLMonsterPawn.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857be0
	enum class EWTLFaction GetFaction(); // Function WTL.WTLMonsterPawn.GetFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857190
	struct AWTLEventPoint* GetEventPoint(enum class EWTLBPActionResult& Result); // Function WTL.WTLMonsterPawn.GetEventPoint // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1856a20
	float GetDangerLevelMultiplier(); // Function WTL.WTLMonsterPawn.GetDangerLevelMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18571b0
	float GetDangerLevel(); // Function WTL.WTLMonsterPawn.GetDangerLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857a90
	float GetCurrentLevelOfStun(); // Function WTL.WTLMonsterPawn.GetCurrentLevelOfStun // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857840
	float GetCurrentDamageVisualizationValue(); // Function WTL.WTLMonsterPawn.GetCurrentDamageVisualizationValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857060
	enum class EWTLMonsterActionType GetCurrentAction(); // Function WTL.WTLMonsterPawn.GetCurrentAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857c20
	int32_t GetConditionShield(); // Function WTL.WTLMonsterPawn.GetConditionShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857800
	struct AWTLCharacter* GetCharacterFromListVisibleTargets(struct AWTLCharacter* Character, enum class EWTLMonsterFindingVisibleCharacterType Type); // Function WTL.WTLMonsterPawn.GetCharacterFromListVisibleTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x1858040
	struct AWTLCharacter* GetCharacterFromListTargets(struct AWTLCharacter* Character, enum class EWTLMonsterFindingCharacterType Type, float InRadius); // Function WTL.WTLMonsterPawn.GetCharacterFromListTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x18581d0
	struct TArray<enum class EWTLMonsterActionType> GetAvailableActions(bool bExceptMainAttack); // Function WTL.WTLMonsterPawn.GetAvailableActions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857960
	void DecrementShield(int32_t Value); // Function WTL.WTLMonsterPawn.DecrementShield // (Final|Native|Public|BlueprintCallable) // @ game+0x1857500
	void DecrementHealth(float Value); // Function WTL.WTLMonsterPawn.DecrementHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x185b090
	void ClearListTargets(); // Function WTL.WTLMonsterPawn.ClearListTargets // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
	void CheckListVisibleTargets(); // Function WTL.WTLMonsterPawn.CheckListVisibleTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x18581b0
	void CheckListTargets(); // Function WTL.WTLMonsterPawn.CheckListTargets // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
	bool CanUseShield(); // Function WTL.WTLMonsterPawn.CanUseShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1857820
	bool CanUseBrains(); // Function WTL.WTLMonsterPawn.CanUseBrains // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1856dd0
	bool CanUseAdditiveAction(); // Function WTL.WTLMonsterPawn.CanUseAdditiveAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1858aa0
	bool CanBeStunned(); // Function WTL.WTLMonsterPawn.CanBeStunned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18577c0
	void BranchCanUseBrains(enum class EWTLBPCheckResult& Result); // Function WTL.WTLMonsterPawn.BranchCanUseBrains // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1856cb0
	void ApplyEffectToCharacter(struct AWTLCharacter* Character, enum class EWTLCharacterEffectType EffectType, float Amount); // Function WTL.WTLMonsterPawn.ApplyEffectToCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1858d50
	float ApplyDamageToCharacter(struct AWTLCharacter* Character, struct FName BoneName, struct UDamageType* DamageType, enum class EWTLMonsterAttackModificator DamageModificator, float DamageMultiplier, bool ApplyExpectedEffects, enum class EWTLColliderType ColliderType, bool UseArmor); // Function WTL.WTLMonsterPawn.ApplyDamageToCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1859ae0
	struct AWTLCharacter* ApplyDamageToAIInterface(struct AActor* TargetActor, struct UDamageType* DamageType, enum class EWTLMonsterAttackModificator DamageModificator, float DamageMultiplier, bool ApplyExpectedEffects, enum class EWTLColliderType ColliderType, bool UseArmor); // Function WTL.WTLMonsterPawn.ApplyDamageToAIInterface // (Final|Native|Public|BlueprintCallable) // @ game+0x1858f20
	void AddTargetToBlacklist(struct AWTLCharacter* Target, float Delay, float DamageMultiplier); // Function WTL.WTLMonsterPawn.AddTargetToBlacklist // (Final|Native|Public|BlueprintCallable) // @ game+0x18584d0
	void AddCharacterToListTargets(struct AWTLCharacter* Character, float Damage); // Function WTL.WTLMonsterPawn.AddCharacterToListTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x178a2b0
};

// Class WTL.WTLControlledMonsterPawn
// Size: 0x1070 (Inherited: 0xf10)
struct AWTLControlledMonsterPawn : AWTLMonsterPawn {
	char pad_F10[0xb8]; // 0xf10(0xb8)
	struct TArray<struct AActor*> ActorsTakeDamage; // 0xfc8(0x10)
	enum class EWTLControlledPawnType ControlledPawnType; // 0xfd8(0x01)
	bool ISeeChickenStatus; // 0xfd9(0x01)
	bool IsReactionOnSafeZone; // 0xfda(0x01)
	char pad_FDB[0x5]; // 0xfdb(0x05)
	struct USpringArmComponent* SpringArm; // 0xfe0(0x08)
	struct TArray<struct FWTLNotificationForAction> CurrentNotificationList; // 0xfe8(0x10)
	bool IsMoveLocked; // 0xff8(0x01)
	char pad_FF9[0x3]; // 0xff9(0x03)
	int32_t CurrentExp; // 0xffc(0x04)
	int32_t NeededExpForLevelUp; // 0x1000(0x04)
	enum class EWTLControlledActionKeyType ActionInProgress; // 0x1004(0x01)
	char pad_1005[0x3]; // 0x1005(0x03)
	float DenominatorOfExp; // 0x1008(0x04)
	float BaseExperience; // 0x100c(0x04)
	float BaseTurnRate; // 0x1010(0x04)
	float BaseLookUpRate; // 0x1014(0x04)
	bool IsMovementBlocked; // 0x1018(0x01)
	bool IsAiming; // 0x1019(0x01)
	char pad_101A[0x2]; // 0x101a(0x02)
	float AimingTurnRateMultiplier; // 0x101c(0x04)
	struct TMap<enum class EWTLControlledActionKeyType, struct FWTLControlledMonsterActionBase> ActionDataList; // 0x1020(0x50)

	bool RunActionControlled(enum class EWTLControlledActionKeyType ActionType); // Function WTL.WTLControlledMonsterPawn.RunActionControlled // (Final|Native|Public|BlueprintCallable) // @ game+0x17d76b0
	void PlayAnimationControlled(enum class EWTLControlledActionKeyType ActionType); // Function WTL.WTLControlledMonsterPawn.PlayAnimationControlled // (Final|Native|Public|BlueprintCallable) // @ game+0x17d75e0
	void OnAction_PlayerInput(enum class EWTLControlledActionKeyType ActionType); // Function WTL.WTLControlledMonsterPawn.OnAction_PlayerInput // (Final|Native|Public) // @ game+0x17d72f0
	void NetMulticast_OnDeathControlled(struct FVector DeathPosition, struct FVector_NetQuantize ActorRotation, struct FVector_NetQuantize MeshRotation, struct FWTLMonsterDeathData DeathData); // Function WTL.WTLControlledMonsterPawn.NetMulticast_OnDeathControlled // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x17d7000
	void K2_OnLevelUp(int32_t NewLevel); // Function WTL.WTLControlledMonsterPawn.K2_OnLevelUp // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnActionTriggerNotification(struct FName ActionName); // Function WTL.WTLControlledMonsterPawn.K2_OnActionTriggerNotification // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnAction_PlayerInput(enum class EWTLControlledActionKeyType ActionType); // Function WTL.WTLControlledMonsterPawn.K2_OnAction_PlayerInput // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_On_DrawToCanvas(struct UCanvas* Canvas, float ScaleUI, float DeltaTime, bool bIsHUDHidden); // Function WTL.WTLControlledMonsterPawn.K2_On_DrawToCanvas // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool IsRecoveryActionCompleted(enum class EWTLControlledActionKeyType ActionType); // Function WTL.WTLControlledMonsterPawn.IsRecoveryActionCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17d6f20
	void InterruptAction(); // Function WTL.WTLControlledMonsterPawn.InterruptAction // (Native|Public|BlueprintCallable) // @ game+0x17d6c00
	float GetCurrentCooldown(enum class EWTLControlledActionKeyType ActionType); // Function WTL.WTLControlledMonsterPawn.GetCurrentCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17d6c20
	enum class EWTLControlledActionKeyType GetActionInProgress(); // Function WTL.WTLControlledMonsterPawn.GetActionInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17d7e50
	void Client_SetActionDelay(float Value); // Function WTL.WTLControlledMonsterPawn.Client_SetActionDelay // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17d6b30
	void Client_OnNightvisionStateChanged(bool bIsEnabled); // Function WTL.WTLControlledMonsterPawn.Client_OnNightvisionStateChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17a9c80
	bool CanRunAction(enum class EWTLControlledActionKeyType ActionType, bool CheckAnimation); // Function WTL.WTLControlledMonsterPawn.CanRunAction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17d6db0
	void C2S_OnAction(char Number); // Function WTL.WTLControlledMonsterPawn.C2S_OnAction // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x17d7d50
	void ApplyDamageInCone(struct UDamageType* DamageType, float StuffDamageMultiplier, float DamageMultiplier, bool ApplyExpectedEffects, float AttackRadius, float HalfAnglePitch, float HalfAngleYaw, bool DamageAll, enum class EWTLColliderType ColliderType, bool UseArmor); // Function WTL.WTLControlledMonsterPawn.ApplyDamageInCone // (Final|Native|Public|BlueprintCallable) // @ game+0x17d7790
};

// Class WTL.WTLControlledMonsterSpawnPoint
// Size: 0x220 (Inherited: 0x220)
struct AWTLControlledMonsterSpawnPoint : AActor {
};

// Class WTL.WTLCoreHackingPreviewRoom
// Size: 0x260 (Inherited: 0x220)
struct AWTLCoreHackingPreviewRoom : AActor {
	struct USceneComponent* Root; // 0x220(0x08)
	struct UWTLCaptureComponent2D* CoreCaptureComponent; // 0x228(0x08)
	struct USkeletalMeshComponent* PreviewMesh; // 0x230(0x08)
	char pad_238[0x8]; // 0x238(0x08)
	struct UTextureRenderTarget2D* m_ViewTargetTexture; // 0x240(0x08)
	char pad_248[0x18]; // 0x248(0x18)

	void OnTestButtonPressed(); // Function WTL.WTLCoreHackingPreviewRoom.OnTestButtonPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x17d8660
	void OnSwitchButtonPressed(char Index); // Function WTL.WTLCoreHackingPreviewRoom.OnSwitchButtonPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x17d8750
	void OnHackingResult(char Result); // Function WTL.WTLCoreHackingPreviewRoom.OnHackingResult // (Final|Native|Private) // @ game+0x17d8890
	void OnCaptureEnded(); // Function WTL.WTLCoreHackingPreviewRoom.OnCaptureEnded // (Final|Native|Public) // @ game+0x17d8870
	void K2_UpdateSwitchState(char Index, bool Value); // Function WTL.WTLCoreHackingPreviewRoom.K2_UpdateSwitchState // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnTestButtonPressed(); // Function WTL.WTLCoreHackingPreviewRoom.K2_OnTestButtonPressed // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnLineTrace(struct FVector Position); // Function WTL.WTLCoreHackingPreviewRoom.K2_OnLineTrace // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnComponentPressed(struct UPrimitiveComponent* HitComponent); // Function WTL.WTLCoreHackingPreviewRoom.K2_OnComponentPressed // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_IsSuccess(bool Value); // Function WTL.WTLCoreHackingPreviewRoom.K2_IsSuccess // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_HightlightStateIndicator(); // Function WTL.WTLCoreHackingPreviewRoom.K2_HightlightStateIndicator // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_HighlightIndicator(char Index, bool Value); // Function WTL.WTLCoreHackingPreviewRoom.K2_HighlightIndicator // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	struct UTexture2D* K2_GetViewTexture2D(struct UTexture2D* InTexture); // Function WTL.WTLCoreHackingPreviewRoom.K2_GetViewTexture2D // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLCraftObject
// Size: 0x328 (Inherited: 0x220)
struct AWTLCraftObject : AActor {
	char pad_220[0xe0]; // 0x220(0xe0)
	bool m_IsActive; // 0x300(0x01)
	char pad_301[0x3]; // 0x301(0x03)
	int32_t ID; // 0x304(0x04)
	enum class EWTLCraftType CraftType; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct UStaticMeshComponent* Mesh; // 0x310(0x08)
	char pad_318[0x10]; // 0x318(0x10)

	void SetIsActive(bool Value); // Function WTL.WTLCraftObject.SetIsActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void OnRep_IsActive(); // Function WTL.WTLCraftObject.OnRep_IsActive // (Final|Native|Protected) // @ game+0x17d8c60
	void OnIsActiveChanged(bool IsActive); // Function WTL.WTLCraftObject.OnIsActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool GetIsActive(); // Function WTL.WTLCraftObject.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17d8c40
	void BPStartCraftProcess(float CraftTime); // Function WTL.WTLCraftObject.BPStartCraftProcess // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPCraftProcessCompleted(); // Function WTL.WTLCraftObject.BPCraftProcessCompleted // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLCustomizationSystem
// Size: 0x30 (Inherited: 0x28)
struct UWTLCustomizationSystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class WTL.WTLDamageSystem
// Size: 0x40 (Inherited: 0x28)
struct UWTLDamageSystem : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class WTL.WTLDatabaseAdapter
// Size: 0x118 (Inherited: 0x28)
struct UWTLDatabaseAdapter : UObject {
	char pad_28[0xf0]; // 0x28(0xf0)
};

// Class WTL.WTLDataTable
// Size: 0xb0 (Inherited: 0xb0)
struct UWTLDataTable : UDataTable {
};

// Class WTL.WTLDaytimeBasedFMODAmbientSound
// Size: 0x238 (Inherited: 0x228)
struct AWTLDaytimeBasedFMODAmbientSound : AFMODAmbientSound {
	char pad_228[0x10]; // 0x228(0x10)
};

// Class WTL.WTLDebugHelper
// Size: 0x28 (Inherited: 0x28)
struct UWTLDebugHelper : UObject {
};

// Class WTL.WTLDeminingActivity
// Size: 0x368 (Inherited: 0x250)
struct AWTLDeminingActivity : AWTLActionGameplayActivity {
	char pad_250[0x8]; // 0x250(0x08)
	struct TSoftClassPtr<UObject> DeminingWidgetClass; // 0x258(0x28)
	struct TArray<struct FColor> WireColors; // 0x280(0x10)
	struct TArray<struct FWTLDeminingCombinations> m_CombinationsMap; // 0x290(0x10)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct TArray<char> m_WiresList; // 0x2b0(0x10)
	char pad_2C0[0x14]; // 0x2c0(0x14)
	float m_RemainingTime; // 0x2d4(0x04)
	char pad_2D8[0x28]; // 0x2d8(0x28)
	struct AActor* m_ExplosionActor; // 0x300(0x08)
	char pad_308[0x60]; // 0x308(0x60)

	void Server_OnCutWire(int32_t Index); // Function WTL.WTLDeminingActivity.Server_OnCutWire // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x17d9720
	void OnRep_WiresList(); // Function WTL.WTLDeminingActivity.OnRep_WiresList // (Final|Native|Protected) // @ game+0x17d9540
	void OnRep_RemainingTimer(); // Function WTL.WTLDeminingActivity.OnRep_RemainingTimer // (Final|Native|Protected) // @ game+0x17d9500
	void OnCharacterDied(struct AWTLCharacter* Character); // Function WTL.WTLDeminingActivity.OnCharacterDied // (Final|Native|Protected) // @ game+0x17941a0
	void Client_OnWireCutted(int32_t Index); // Function WTL.WTLDeminingActivity.Client_OnWireCutted // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x17d9640
};

// Class WTL.WTLDynamicReplicatedActor
// Size: 0x220 (Inherited: 0x220)
struct AWTLDynamicReplicatedActor : AActor {
};

// Class WTL.WTLThrowingDeviceProjectile
// Size: 0x290 (Inherited: 0x220)
struct AWTLThrowingDeviceProjectile : AWTLDynamicReplicatedActor {
	char pad_220[0x8]; // 0x220(0x08)
	bool bCanBeTeleportedByAnomaly; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	bool m_bIsActive; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	float m_ReplicatedInitialSpeed; // 0x234(0x04)
	struct FVector m_ThrowVector; // 0x238(0x0c)
	char pad_244[0x4]; // 0x244(0x04)
	struct UStaticMeshComponent* MeshComp; // 0x248(0x08)
	struct UWTLProjectileMovementComponent* m_MovementComponent; // 0x250(0x08)
	bool ActivateAfterHit; // 0x258(0x01)
	bool CanBeActivatedUnderWater; // 0x259(0x01)
	char pad_25A[0x2]; // 0x25a(0x02)
	float MinExplosionDelay; // 0x25c(0x04)
	float MaxExplosionDelay; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct TSoftClassPtr<UObject> WaterHit; // 0x268(0x28)

	void OnRep_ReplicatedInitialSpeed(); // Function WTL.WTLThrowingDeviceProjectile.OnRep_ReplicatedInitialSpeed // (Final|Native|Protected) // @ game+0x1930370
	void OnRep_IsActive(); // Function WTL.WTLThrowingDeviceProjectile.OnRep_IsActive // (Final|Native|Protected) // @ game+0x1930310
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLThrowingDeviceProjectile.OnHit // (Native|Public|HasOutParms|HasDefaults) // @ game+0x192ffe0
	bool IsUnderWater(); // Function WTL.WTLThrowingDeviceProjectile.IsUnderWater // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x192ffc0
	void BPActivate(); // Function WTL.WTLThrowingDeviceProjectile.BPActivate // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLDeminingGrenadeProjectile
// Size: 0x2e0 (Inherited: 0x290)
struct AWTLDeminingGrenadeProjectile : AWTLThrowingDeviceProjectile {
	float Radius; // 0x290(0x04)
	float TriggerSphereRadius; // 0x294(0x04)
	bool ShowDebugInfo; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct USphereComponent* TriggerVolume; // 0x2a0(0x08)
	char pad_2A8[0x38]; // 0x2a8(0x38)

	void OnSphereBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLDeminingGrenadeProjectile.OnSphereBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x17da0c0
};

// Class WTL.WTLItemManipulationRoom
// Size: 0x278 (Inherited: 0x220)
struct AWTLItemManipulationRoom : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct USceneComponent* Root; // 0x230(0x08)
	struct UWTLCaptureComponent2D* CaptureComponent; // 0x238(0x08)
	struct USkeletalMeshComponent* PreviewMesh; // 0x240(0x08)
	bool LockHorizontalRotation; // 0x248(0x01)
	bool LockVerticalRotation; // 0x249(0x01)
	char pad_24A[0x2e]; // 0x24a(0x2e)

	void K2_HitLocation(struct FVector HitLocation); // Function WTL.WTLItemManipulationRoom.K2_HitLocation // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLDeminingPreviewRoom
// Size: 0x370 (Inherited: 0x278)
struct AWTLDeminingPreviewRoom : AWTLItemManipulationRoom {
	struct UStaticMeshComponent* WireMesh1; // 0x278(0x08)
	struct UStaticMeshComponent* WireMesh2; // 0x280(0x08)
	struct UStaticMeshComponent* WireMesh3; // 0x288(0x08)
	struct UStaticMeshComponent* WireMesh4; // 0x290(0x08)
	struct UStaticMeshComponent* CuttedWireMesh1; // 0x298(0x08)
	struct UStaticMeshComponent* CuttedWireMesh2; // 0x2a0(0x08)
	struct UStaticMeshComponent* CuttedWireMesh3; // 0x2a8(0x08)
	struct UStaticMeshComponent* CuttedWireMesh4; // 0x2b0(0x08)
	struct UWidgetComponent* TimerWidgetComponent; // 0x2b8(0x08)
	struct UMaterialInterface* TargetTextureMaterial; // 0x2c0(0x08)
	struct TSoftObjectPtr<UFMODEvent> CutSound; // 0x2c8(0x28)
	int32_t ToolID; // 0x2f0(0x04)
	char pad_2F4[0x7c]; // 0x2f4(0x7c)

	void OnWireCutted(int32_t Index); // Function WTL.WTLDeminingPreviewRoom.OnWireCutted // (Final|Native|Private) // @ game+0x17dab30
	void OnReminingTimerChanged(float Timer); // Function WTL.WTLDeminingPreviewRoom.OnReminingTimerChanged // (Final|Native|Private) // @ game+0x17da910
	void OnDeminingWiresListChanged(struct TArray<char> List); // Function WTL.WTLDeminingPreviewRoom.OnDeminingWiresListChanged // (Final|Native|Private) // @ game+0x17daa00
	void K2_RemainingTimerChanged(float Value); // Function WTL.WTLDeminingPreviewRoom.K2_RemainingTimerChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_CombinationSelected(struct TArray<char>& Combination); // Function WTL.WTLDeminingPreviewRoom.K2_CombinationSelected // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	float GetRemainingTime(); // Function WTL.WTLDeminingPreviewRoom.GetRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17da8f0
	struct FString GetOwnerName(); // Function WTL.WTLDeminingPreviewRoom.GetOwnerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17da760
	enum class EWTLFaction GetOwnerFaction(); // Function WTL.WTLDeminingPreviewRoom.GetOwnerFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17da6d0
};

// Class WTL.WTLDetector
// Size: 0x4f8 (Inherited: 0x458)
struct AWTLDetector : AWTLStuff {
	float Distance; // 0x458(0x04)
	float AliveCreaturesSearchDistance; // 0x45c(0x04)
	float PlaceableStuffsSearchDistance; // 0x460(0x04)
	float MinDistance; // 0x464(0x04)
	float MaxAngle; // 0x468(0x04)
	float Time; // 0x46c(0x04)
	float EnergyPerUsePercentInMinesMode; // 0x470(0x04)
	float EnergyPerUsePercentInAliveCreaturesMode; // 0x474(0x04)
	float EnergyPerUsePercentInStuffMode; // 0x478(0x04)
	enum class EWTLDetectorMode m_CurrentMode; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	float m_DisabledTime; // 0x480(0x04)
	uint32_t m_ShakingAnimationIndex; // 0x484(0x04)
	char pad_488[0x1c]; // 0x488(0x1c)
	bool m_bDisabled; // 0x4a4(0x01)
	bool m_bIsActive; // 0x4a5(0x01)
	char pad_4A6[0x22]; // 0x4a6(0x22)
	struct UFMODAudioComponent* AudioComponent; // 0x4c8(0x08)
	struct FItemAnimationSet SetModeSequenceSet; // 0x4d0(0x18)
	struct TArray<struct FItemAnimationSet> DeviceShakingSequenceSetsList; // 0x4e8(0x10)

	void Server_StopUse(); // Function WTL.WTLDetector.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db590
	void Server_StartUse(); // Function WTL.WTLDetector.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db5c0
	void Server_SetUsingModeIndex(char UsingModeIndex); // Function WTL.WTLDetector.Server_SetUsingModeIndex // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17db020
	void Server_SearchPlaceableStuffs(); // Function WTL.WTLDetector.Server_SearchPlaceableStuffs // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db1a0
	void Server_SearchPawns(); // Function WTL.WTLDetector.Server_SearchPawns // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db1d0
	void Server_SearchMines(); // Function WTL.WTLDetector.Server_SearchMines // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db200
	void OnRep_IsActive(); // Function WTL.WTLDetector.OnRep_IsActive // (Final|Native|Private) // @ game+0x17db760
	void OnRep_Disable(); // Function WTL.WTLDetector.OnRep_Disable // (Final|Native|Private) // @ game+0x17db0e0
	void OnRep_CurrentMode(); // Function WTL.WTLDetector.OnRep_CurrentMode // (Final|Native|Private) // @ game+0x17db5f0
	void NetMulticast_StopUse(); // Function WTL.WTLDetector.NetMulticast_StopUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x17db350
	void NetMulticast_SetMode(); // Function WTL.WTLDetector.NetMulticast_SetMode // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17daf30
	void NetMulticast_OnUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLDetector.NetMulticast_OnUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x17db420
	void NetMulticast_DeviceShaking(); // Function WTL.WTLDetector.NetMulticast_DeviceShaking // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x17db230
	float GetEnergyValue(); // Function WTL.WTLDetector.GetEnergyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x17dae20
	enum class EWTLDetectorMode GetCurrentMode(); // Function WTL.WTLDetector.GetCurrentMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dae00
	int32_t GetActorsOnDisplayCount(); // Function WTL.WTLDetector.GetActorsOnDisplayCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17dade0
	void Client_SetMode(); // Function WTL.WTLDetector.Client_SetMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x17dae70
	void Client_SearchPlaceableStuffs(); // Function WTL.WTLDetector.Client_SearchPlaceableStuffs // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17db140
	void Client_SearchPawns(); // Function WTL.WTLDetector.Client_SearchPawns // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17db160
	void Client_SearchMines(); // Function WTL.WTLDetector.Client_SearchMines // (Final|Net|Native|Event|Private|NetClient) // @ game+0x17db180
	void BPUpdateInformationOnDisplay(); // Function WTL.WTLDetector.BPUpdateInformationOnDisplay // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPStartUse(); // Function WTL.WTLDetector.BPStartUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPShowInterference(float InterferenceTime); // Function WTL.WTLDetector.BPShowInterference // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPFinishUse(); // Function WTL.WTLDetector.BPFinishUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDrawPlaceableStuffOnDisplay(struct AActor* VisibleActor, bool IsFriendly); // Function WTL.WTLDetector.BPDrawPlaceableStuffOnDisplay // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDrawPawnOnDisplay(struct AActor* VisibleActor, bool IsHuman, bool IsFriendly); // Function WTL.WTLDetector.BPDrawPawnOnDisplay // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDrawMineOnDisplay(struct AActor* VisibleActor, bool IsFriendly); // Function WTL.WTLDetector.BPDrawMineOnDisplay // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLDetonator
// Size: 0x468 (Inherited: 0x458)
struct AWTLDetonator : AWTLStuff {
	char pad_458[0x8]; // 0x458(0x08)
	bool UnequipNewType; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)

	void NetMulticast_StartUse(); // Function WTL.WTLDetonator.NetMulticast_StartUse // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x17dc270
	void K2_OnOpened(); // Function WTL.WTLDetonator.K2_OnOpened // (Event|Protected|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLDoor
// Size: 0x288 (Inherited: 0x260)
struct AWTLDoor : AWTLInteractiveObject {
	bool m_bIsOpened; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct UStaticMeshComponent* m_StaticMeshComponent; // 0x268(0x08)
	struct USkeletalMeshComponent* m_SkeletalMeshComponent; // 0x270(0x08)
	struct UAnimMontage* m_DoorOpenAnimation; // 0x278(0x08)
	struct UAnimMontage* m_DoorCloseAnimation; // 0x280(0x08)

	void OnRep_bIsOpened(); // Function WTL.WTLDoor.OnRep_bIsOpened // (Final|Native|Public) // @ game+0x17dc360
};

// Class WTL.WTLDroneDisplay
// Size: 0x4d8 (Inherited: 0x4d8)
struct AWTLDroneDisplay : AWTLCameraDisplay {
};

// Class WTL.WTLDroneTargetWidget
// Size: 0x268 (Inherited: 0x260)
struct UWTLDroneTargetWidget : UUserWidget {
	struct UImage* imgTarget; // 0x260(0x08)
};

// Class WTL.WTLLevelScriptActor
// Size: 0x650 (Inherited: 0x228)
struct AWTLLevelScriptActor : ALevelScriptActor {
	char pad_228[0x248]; // 0x228(0x248)
	float IdentificationDistance; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	float DayTime; // 0x478(0x04)
	bool bConnectToGameServer; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	int32_t LocationID; // 0x480(0x04)
	enum class EWTLLocationType LocationType; // 0x484(0x01)
	char pad_485[0x3]; // 0x485(0x03)
	int32_t DefaultSafeZoneID; // 0x488(0x04)
	bool BarterAllowed; // 0x48c(0x01)
	bool PVPAllowed; // 0x48d(0x01)
	bool FlashLightAllowed; // 0x48e(0x01)
	bool VehicleAllowed; // 0x48f(0x01)
	bool DronesAllowed; // 0x490(0x01)
	bool AllowOnlyFactionMembers; // 0x491(0x01)
	char pad_492[0x2]; // 0x492(0x02)
	int32_t LocationIDToMoveForNonFactionMembers; // 0x494(0x04)
	int32_t PortalIDToMoveForNonFactionMembers; // 0x498(0x04)
	bool m_bCanUseAlternativeFootstepSound; // 0x49c(0x01)
	char pad_49D[0x3]; // 0x49d(0x03)
	float CurrentTime; // 0x4a0(0x04)
	char pad_4A4[0x1c]; // 0x4a4(0x1c)
	struct TSoftClassPtr<UObject> ItemPreviewClass; // 0x4c0(0x28)
	struct TSoftClassPtr<UObject> CharacterPreviewRoomClass; // 0x4e8(0x28)
	struct TSoftClassPtr<UObject> CoreHackingPreviewRoomClass; // 0x510(0x28)
	struct FVector ItemPreviewPosition; // 0x538(0x0c)
	struct FVector CharacterPreviewRoomPosition; // 0x544(0x0c)
	struct FVector CorePreviewRoomPosition; // 0x550(0x0c)
	float AmbientMusicVolume; // 0x55c(0x04)
	float AmbientMusicRandomStartMin; // 0x560(0x04)
	float AmbientMusicRandomStartMax; // 0x564(0x04)
	struct TArray<struct FWTLLocationSpawnPickup> SpawnPickups; // 0x568(0x10)
	struct TArray<struct FVector> AirDropSpawnPoints; // 0x578(0x10)
	struct TArray<int32_t> AirDropIDs; // 0x588(0x10)
	float AirDropTimeoutMin; // 0x598(0x04)
	float AirDropTimeoutMax; // 0x59c(0x04)
	float AirDropMinDistanceBetweenSpawn; // 0x5a0(0x04)
	float AirDropLifespanMin; // 0x5a4(0x04)
	float AirDropLifespanMax; // 0x5a8(0x04)
	char pad_5AC[0x4]; // 0x5ac(0x04)
	struct TArray<struct FVector> ProjectXSpawnPoints; // 0x5b0(0x10)
	struct AActor* ProjectXEventPointClass; // 0x5c0(0x08)
	uint64_t MaxNumberOfMinesPerCharacter; // 0x5c8(0x08)
	uint64_t MaxNumberOfStickyMinesPerCharacter; // 0x5d0(0x08)
	char pad_5D8[0x10]; // 0x5d8(0x10)
	struct UWTLGameInstance* GameInstance; // 0x5e8(0x08)
	struct UCurveFloat* DaySoundsVolumeCurve; // 0x5f0(0x08)
	struct UCurveFloat* NightSoundsVolumeCurve; // 0x5f8(0x08)
	struct APostProcessVolume* PostProcessVolume; // 0x600(0x08)
	struct UCurveFloat* AutoExposureBiasCurve; // 0x608(0x08)
	float FlashlightIntensityMultiplier; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct TArray<struct FWTLConsoleScript> ConsoleScripts; // 0x618(0x10)
	struct FString StartUpScript; // 0x628(0x10)
	float StartUpScriptDelay; // 0x638(0x04)
	float DebugStartTime; // 0x63c(0x04)
	int32_t DebugTimeScale; // 0x640(0x04)
	bool UseFixedTime; // 0x644(0x01)
	char pad_645[0x3]; // 0x645(0x03)
	float FixedTime; // 0x648(0x04)
	int32_t MaxSimultaneousEventsCount; // 0x64c(0x04)

	void NetMulticastReliable_OnMeleeHit(struct UPrimitiveComponent* HitComponent, struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, enum class EPhysicalSurface HitSurface, float Scale); // Function WTL.WTLLevelScriptActor.NetMulticastReliable_OnMeleeHit // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x18407b0
	void NetMulticast_OnCharacterTeleported(struct AWTLCharacter* Character); // Function WTL.WTLLevelScriptActor.NetMulticast_OnCharacterTeleported // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0xba4590
	bool IsNightVolumetric(); // Function WTL.WTLLevelScriptActor.IsNightVolumetric // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18406b0
	bool IsNight(); // Function WTL.WTLLevelScriptActor.IsNight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1840730
	bool IsDayVolumetric(); // Function WTL.WTLLevelScriptActor.IsDayVolumetric // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18406f0
	bool IsDay(); // Function WTL.WTLLevelScriptActor.IsDay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1840770
	struct AWTLSafeZone* FindSafeZone(int32_t SafeZoneID); // Function WTL.WTLLevelScriptActor.FindSafeZone // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x18405c0
	struct AWTLCraftObject* FindCraftObject(int32_t CraftObjectID); // Function WTL.WTLLevelScriptActor.FindCraftObject // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18404d0
};

// Class WTL.WTLLocationLevelScriptActor
// Size: 0x6b0 (Inherited: 0x650)
struct AWTLLocationLevelScriptActor : AWTLLevelScriptActor {
	char pad_650[0x28]; // 0x650(0x28)
	enum class EWTLItemType FindSpawnItemType; // 0x678(0x01)
	char pad_679[0x3]; // 0x679(0x03)
	int32_t FindSpawnItemTypeID; // 0x67c(0x04)
	char pad_680[0x28]; // 0x680(0x28)
	struct UWTLNetworkController* NetworkController; // 0x6a8(0x08)

	void OnStreamingLevelsLoaded(); // Function WTL.WTLLocationLevelScriptActor.OnStreamingLevelsLoaded // (Final|Native|Public) // @ game+0x18423e0
	void OnLevelLoaded(); // Function WTL.WTLLocationLevelScriptActor.OnLevelLoaded // (Final|Native|Private) // @ game+0x1842400
	void OnDedicatedServerMessage(struct FString MessageType, struct FString MessageData); // Function WTL.WTLLocationLevelScriptActor.OnDedicatedServerMessage // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetworkControllerOnScriptedEventReceivedEvent(struct FWTLEvent& Event); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnScriptedEventReceivedEvent // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void NetworkControllerOnGetWorldTimeResponse(struct FWTLResponse& Response); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnGetWorldTimeResponse // (Final|Native|Private|HasOutParms) // @ game+0x18425e0
	void NetworkControllerOnDisconnected(); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnDisconnected // (Final|Native|Private) // @ game+0x18427b0
	void NetworkControllerOnDedicatedServerMessageEvent(struct FWTLEvent& Event); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnDedicatedServerMessageEvent // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void NetworkControllerOnDedicatedServerAuthorizationResponse(struct FWTLResponse& Response); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnDedicatedServerAuthorizationResponse // (Final|Native|Private|HasOutParms) // @ game+0x18426e0
	void NetworkControllerOnConnectError(struct FString ErrorInfo); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnConnectError // (Final|Native|Private) // @ game+0x18427d0
	void NetworkControllerOnConnected(); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnConnected // (Final|Native|Private) // @ game+0x18428e0
	void NetworkControllerOnCharacterLeaveLocationEvent(struct FWTLEvent& Event); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnCharacterLeaveLocationEvent // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void NetworkControllerOnCharacterEntersLocationEvent(struct FWTLEvent& Event); // Function WTL.WTLLocationLevelScriptActor.NetworkControllerOnCharacterEntersLocationEvent // (Final|Native|Private|HasOutParms) // @ game+0x1842430
	bool IsAllLevelsLoaded(); // Function WTL.WTLLocationLevelScriptActor.IsAllLevelsLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18423c0
};

// Class WTL.WTLDynamicSkyLevelScriptActor
// Size: 0x8c0 (Inherited: 0x6b0)
struct AWTLDynamicSkyLevelScriptActor : AWTLLocationLevelScriptActor {
	char pad_6B0[0x78]; // 0x6b0(0x78)
	float SkyDayTime; // 0x728(0x04)
	float SkyDayTimeOffset; // 0x72c(0x04)
	float m_DesiredWindSpeed; // 0x730(0x04)
	char pad_734[0x4]; // 0x734(0x04)
	float m_DesiredWindActiveTime; // 0x738(0x04)
	char pad_73C[0x4]; // 0x73c(0x04)
	float m_DesiredWindAngle; // 0x740(0x04)
	float m_WindSpeedChangeSpeed; // 0x744(0x04)
	float m_WindAngleChangeSpeed; // 0x748(0x04)
	bool bCanWeatherChangeOnThisLocation; // 0x74c(0x01)
	bool bCanUseRainOnThisLocation; // 0x74d(0x01)
	char pad_74E[0x2]; // 0x74e(0x02)
	float RainDensityScaleMultiplier; // 0x750(0x04)
	char pad_754[0x34]; // 0x754(0x34)
	float m_WeatherChangeStartServerTime; // 0x788(0x04)
	float m_WeatherChangeEndServerTime; // 0x78c(0x04)
	enum class EWTLWeatherType m_CurrentWeather; // 0x790(0x01)
	enum class EWTLWeatherType m_TransitionWeather; // 0x791(0x01)
	char pad_792[0x16]; // 0x792(0x16)
	int32_t LightingTargetPointsCount; // 0x7a8(0x04)
	float RainLightingIntervalMin; // 0x7ac(0x04)
	float RainLightingIntervalMax; // 0x7b0(0x04)
	float RainLighingChance; // 0x7b4(0x04)
	float HeavyRainLightingIntervalMin; // 0x7b8(0x04)
	float HeavyRainLightingIntervalMax; // 0x7bc(0x04)
	float HeavyRainLighingChance; // 0x7c0(0x04)
	bool UseWetSurfaceForLandscape; // 0x7c4(0x01)
	char pad_7C5[0x3b]; // 0x7c5(0x3b)
	bool bShowDebugInfo; // 0x800(0x01)
	char pad_801[0x3]; // 0x801(0x03)
	float DebugWeatherChangeSpeed; // 0x804(0x04)
	struct USceneCaptureComponentCube* CaptureComponent; // 0x808(0x08)
	bool CaptureScene; // 0x810(0x01)
	char pad_811[0x7]; // 0x811(0x07)
	struct TArray<struct FWTLCaptureTarget> CaptureTargets; // 0x818(0x10)
	struct UDirectionalLightComponent* SunLight; // 0x828(0x08)
	struct UDirectionalLightComponent* MoonLight; // 0x830(0x08)
	struct USkyLightComponent* SkyLightComponent; // 0x838(0x08)
	struct AExponentialHeightFog* ExponentialHeightFog; // 0x840(0x08)
	struct UCurveFloat* ExponentialFogDesityCurve; // 0x848(0x08)
	struct UCurveLinearColor* ExponentialFogInscatteringColorCurve; // 0x850(0x08)
	char pad_858[0x8]; // 0x858(0x08)
	struct AWindDirectionalSource* WindSource; // 0x860(0x08)
	bool CanUseWindOnThisLocation; // 0x868(0x01)
	char pad_869[0x3]; // 0x869(0x03)
	float WindMinGustAmountMin; // 0x86c(0x04)
	float WindMinGustAmountMax; // 0x870(0x04)
	float WindMaxGustAmountMin; // 0x874(0x04)
	float WindMaxGustAmountMax; // 0x878(0x04)
	float WindSpeedMin; // 0x87c(0x04)
	float WindSpeedMax; // 0x880(0x04)
	float WindActiveTimeMin; // 0x884(0x04)
	float WindActiveTimeMax; // 0x888(0x04)
	float WindChangeSpeedMin; // 0x88c(0x04)
	float WindChangeSpeedMax; // 0x890(0x04)
	float WindChangeAngleSpeedMin; // 0x894(0x04)
	float WindChangeAngleSpeedMax; // 0x898(0x04)
	float WindMinSpeedWithClearWeather; // 0x89c(0x04)
	float WindMaxSpeedWithClearWeather; // 0x8a0(0x04)
	float WindMinSpeedWithCloudyWeather; // 0x8a4(0x04)
	float WindMaxSpeedWithCloudyWeather; // 0x8a8(0x04)
	float WindMinSpeedWithRainWeather; // 0x8ac(0x04)
	float WindMaxSpeedWithRainWeather; // 0x8b0(0x04)
	float WindMinSpeedWithHeavyRainWeather; // 0x8b4(0x04)
	float WindMaxSpeedWithHeavyRainWeather; // 0x8b8(0x04)
	char pad_8BC[0x4]; // 0x8bc(0x04)

	void OnRep_WeatherChanged(); // Function WTL.WTLDynamicSkyLevelScriptActor.OnRep_WeatherChanged // (Final|Native|Private) // @ game+0x17de3c0
	void OnRep_DesiredWindSpeed(); // Function WTL.WTLDynamicSkyLevelScriptActor.OnRep_DesiredWindSpeed // (Final|Native|Private) // @ game+0x17de3e0
	void OnRep_DesiredWindActiveTime(); // Function WTL.WTLDynamicSkyLevelScriptActor.OnRep_DesiredWindActiveTime // (Final|Native|Private) // @ game+0x17de400
	void NetworkControllerOnWeatherChangeEvent(struct FWTLEvent& Event); // Function WTL.WTLDynamicSkyLevelScriptActor.NetworkControllerOnWeatherChangeEvent // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	bool GetUndergroundMode(); // Function WTL.WTLDynamicSkyLevelScriptActor.GetUndergroundMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17de220
	bool ChangeWeather(enum class EWTLWeatherType WeatherType); // Function WTL.WTLDynamicSkyLevelScriptActor.ChangeWeather // (Final|Native|Public|BlueprintCallable) // @ game+0x17de160
};

// Class WTL.WTLEconomicsSystem
// Size: 0x68 (Inherited: 0x28)
struct UWTLEconomicsSystem : UObject {
	char pad_28[0x40]; // 0x28(0x40)
};

// Class WTL.WTLEffectVolume
// Size: 0x250 (Inherited: 0x220)
struct AWTLEffectVolume : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct USphereComponent* m_ZoneSphere; // 0x228(0x08)
	struct UCurveFloat* EffectByRadiusMultiplierCurve; // 0x230(0x08)
	struct UCurveFloat* MaxEffectByRadiusMultiplierCurve; // 0x238(0x08)
	enum class EWTLCharacterEffectType EffectType; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float EffectValuePerSecond; // 0x244(0x04)
	float MaxEffectValue; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
};

// Class WTL.WTLElectricCoil
// Size: 0x668 (Inherited: 0x398)
struct AWTLElectricCoil : AWTLPlaceableStuff {
	char pad_398[0x10]; // 0x398(0x10)
	struct UStaticMeshComponent* Mesh; // 0x3a8(0x08)
	struct UStaticMeshComponent* ZoneMesh; // 0x3b0(0x08)
	float EnergyPercentPerUse; // 0x3b8(0x04)
	float DamageValue; // 0x3bc(0x04)
	float MinDamage; // 0x3c0(0x04)
	float StuffDamageValue; // 0x3c4(0x04)
	float EffectValue; // 0x3c8(0x04)
	int32_t NumOfHits; // 0x3cc(0x04)
	float TimeToFirstActivate; // 0x3d0(0x04)
	float TimeBetweenHits; // 0x3d4(0x04)
	char pad_3D8[0x54]; // 0x3d8(0x54)
	uint32_t m_StuffIsCharged; // 0x42c(0x04)
	float m_Energy; // 0x430(0x04)
	char pad_434[0x10c]; // 0x434(0x10c)
	struct AActor* TargetActor; // 0x540(0x08)
	char pad_548[0x28]; // 0x548(0x28)
	struct TSoftObjectPtr<UFMODEvent> HitSound; // 0x570(0x28)
	struct TSoftObjectPtr<UFMODEvent> ActivationSound; // 0x598(0x28)
	struct TSoftObjectPtr<UFMODEvent> BackgroundSound; // 0x5c0(0x28)
	struct TSoftObjectPtr<UFMODEvent> ReloadingSound; // 0x5e8(0x28)
	struct TSoftObjectPtr<UParticleSystem> PartSyst; // 0x610(0x28)
	struct TSoftObjectPtr<UParticleSystem> ElectricDamage; // 0x638(0x28)
	bool bActivationProcess; // 0x660(0x01)
	bool bDeactivationProcess; // 0x661(0x01)
	char pad_662[0x6]; // 0x662(0x06)

	void OnRep_TargetActor(); // Function WTL.WTLElectricCoil.OnRep_TargetActor // (Final|Native|Private) // @ game+0x17df780
	void OnRep_StuffIsCharged(); // Function WTL.WTLElectricCoil.OnRep_StuffIsCharged // (Final|Native|Private) // @ game+0x17df7a0
	void OnRep_Energy(); // Function WTL.WTLElectricCoil.OnRep_Energy // (Final|Native|Private) // @ game+0x17df7e0
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLElectricCoil.OnEndOverlap // (Final|Native|Private) // @ game+0x17df160
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLElectricCoil.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17df3d0
	void BPSetEnergyValueOnMaterial(float Value); // Function WTL.WTLElectricCoil.BPSetEnergyValueOnMaterial // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPSetCondition(float Value); // Function WTL.WTLElectricCoil.BPSetCondition // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPSetBeam(struct FVector Start, struct FVector EndPoint); // Function WTL.WTLElectricCoil.BPSetBeam // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLElectricCoil.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd90
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLElectricCoil.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17defb0
	bool AIInterface_IsAlive(); // Function WTL.WTLElectricCoil.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df130
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLElectricCoil.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0e0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLElectricCoil.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLElectricCoil.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0c0
};

// Class WTL.WTLElectronicBait
// Size: 0x408 (Inherited: 0x398)
struct AWTLElectronicBait : AWTLPlaceableStuff {
	char pad_398[0x38]; // 0x398(0x38)
	struct UStaticMeshComponent* Mesh; // 0x3d0(0x08)
	struct UStaticMeshComponent* ZoneMesh; // 0x3d8(0x08)
	float NoiseLoudnessMin; // 0x3e0(0x04)
	float NoiseLoudnessMax; // 0x3e4(0x04)
	float NoiseRangeMin; // 0x3e8(0x04)
	float NoiseRangeMax; // 0x3ec(0x04)
	float ExplosionRadius; // 0x3f0(0x04)
	float ExplosionDamageMin; // 0x3f4(0x04)
	float ExplosionDamageMax; // 0x3f8(0x04)
	float EnergyChargePerSecond; // 0x3fc(0x04)
	float m_Energy; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)

	void OnRep_Energy(); // Function WTL.WTLElectronicBait.OnRep_Energy // (Final|Native|Private) // @ game+0x17e03e0
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLElectronicBait.OnEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLElectronicBait.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	float BPGetEnergy(); // Function WTL.WTLElectronicBait.BPGetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17dfe10
	float BPGetCondition(); // Function WTL.WTLElectronicBait.BPGetCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17bbcb0
	void BPCharged(); // Function WTL.WTLElectronicBait.BPCharged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLElectronicBait.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd90
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLElectronicBait.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17defb0
	bool AIInterface_IsAlive(); // Function WTL.WTLElectronicBait.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df130
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLElectronicBait.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0e0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLElectronicBait.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLElectronicBait.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0c0
};

// Class WTL.WTLGrenadeLauncherProjectile
// Size: 0x3e8 (Inherited: 0x248)
struct AWTLGrenadeLauncherProjectile : AWTLProjectile {
	char pad_248[0x78]; // 0x248(0x78)
	struct TSoftClassPtr<UObject> ExplosionFX; // 0x2c0(0x28)
	struct TSoftClassPtr<UObject> ExplosionFXConcrete; // 0x2e8(0x28)
	struct TSoftClassPtr<UObject> ExplosionFXGround; // 0x310(0x28)
	struct TSoftClassPtr<UObject> ExplosionFXMetal; // 0x338(0x28)
	struct TSoftClassPtr<UObject> WaterExplosionFX; // 0x360(0x28)
	struct TSoftClassPtr<UObject> WaterHit; // 0x388(0x28)
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct FRotator ExplosionRotation; // 0x3b8(0x0c)
	bool CanBeExplodedInWater; // 0x3c4(0x01)
	bool bExplodeAfterHit; // 0x3c5(0x01)
	bool DestroyIfTimeIsOver; // 0x3c6(0x01)
	char pad_3C7[0x1]; // 0x3c7(0x01)
	float MinExplosionDelay; // 0x3c8(0x04)
	float MaxExplosionDelay; // 0x3cc(0x04)
	float Radius; // 0x3d0(0x04)
	float MaxDamageToProtectedActors; // 0x3d4(0x04)
	float EnergyShieldDamageMultiplier; // 0x3d8(0x04)
	bool isLastingEffect; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	float LastingEffect_LifeSpan; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)

	void SetExplosionFX(struct AActor* NewExplosion); // Function WTL.WTLGrenadeLauncherProjectile.SetExplosionFX // (Final|Native|Public|BlueprintCallable) // @ game+0x1800bb0
	void Server_RequestStatisticsForHit(struct AActor* HitActor); // Function WTL.WTLGrenadeLauncherProjectile.Server_RequestStatisticsForHit // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1801ca0
	void Server_RequestExplode(struct FVector_NetQuantize ExplosionPosition); // Function WTL.WTLGrenadeLauncherProjectile.Server_RequestExplode // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1801db0
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLGrenadeLauncherProjectile.OnHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1801970
	void NetMulticast_OnExplosion(struct FVector_NetQuantize ExplosionPosition); // Function WTL.WTLGrenadeLauncherProjectile.NetMulticast_OnExplosion // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1801ee0
	void GetWeaponDamage(float& MinDamage, float& MaxDamage); // Function WTL.WTLGrenadeLauncherProjectile.GetWeaponDamage // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1800fc0
	void GetProjectileDamage(float& MinDamage, float& MaxDamage); // Function WTL.WTLGrenadeLauncherProjectile.GetProjectileDamage // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1800dc0
	void Explode(); // Function WTL.WTLGrenadeLauncherProjectile.Explode // (Final|Native|Private) // @ game+0x17ee920
	void BPOnPawnHit(struct APawn* Pawn, struct FName NearestBone); // Function WTL.WTLGrenadeLauncherProjectile.BPOnPawnHit // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnExplode(); // Function WTL.WTLGrenadeLauncherProjectile.BPOnExplode // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyShrapnelDamageToMonster(struct AWTLMonsterPawn* Monster, float ActualDamage); // Function WTL.WTLGrenadeLauncherProjectile.BPOnApplyShrapnelDamageToMonster // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyShrapnelDamageToEnemyNPC(struct AWTLEnemyNPC* EnemyNPC, float ActualDamage); // Function WTL.WTLGrenadeLauncherProjectile.BPOnApplyShrapnelDamageToEnemyNPC // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyShrapnelDamageToCharacter(struct AWTLCharacter* Character, float ActualDamage); // Function WTL.WTLGrenadeLauncherProjectile.BPOnApplyShrapnelDamageToCharacter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool ApplyShrapnel(int32_t ShrapnelCountMin, int32_t ShrapnelCountMax, float ShrapnelDamageMin, float ShrapnelDamageMax, float ShrapnelRadius, float ShrapnelRagdollImpulseMultiplier, bool ShrapnelUseReliableHitEvent); // Function WTL.WTLGrenadeLauncherProjectile.ApplyShrapnel // (Final|Native|Public|BlueprintCallable) // @ game+0x18011c0
	void ApplyExplosionDamageInZone(struct UStaticMeshComponent* DamageZone, float MinDamage, float MaxDamage); // Function WTL.WTLGrenadeLauncherProjectile.ApplyExplosionDamageInZone // (Final|Native|Public|BlueprintCallable) // @ game+0x18015a0
	bool ApplyExplosionDamage(float ExplosionRadius, float MinDamage, float MaxDamage); // Function WTL.WTLGrenadeLauncherProjectile.ApplyExplosionDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1801780
};

// Class WTL.WTLEMPGrenadeLauncherProjectile
// Size: 0x478 (Inherited: 0x3e8)
struct AWTLEMPGrenadeLauncherProjectile : AWTLGrenadeLauncherProjectile {
	char pad_3E8[0x40]; // 0x3e8(0x40)
	bool m_bActivate; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct TSoftObjectPtr<UParticleSystem> Emitter; // 0x430(0x28)
	bool MakeDamageToPlaceableStuff; // 0x458(0x01)
	char pad_459[0x3]; // 0x459(0x03)
	float MinPlaceableStuffDamagePercent; // 0x45c(0x04)
	float MaxPlaceableStuffPercent; // 0x460(0x04)
	float MinEnergyPercent; // 0x464(0x04)
	float MaxEnergyPercent; // 0x468(0x04)
	float MinShieldDamage; // 0x46c(0x04)
	float MaxShieldDamage; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)

	void OnRep_Activate(); // Function WTL.WTLEMPGrenadeLauncherProjectile.OnRep_Activate // (Final|Native|Protected) // @ game+0x17e0850
	void BPActivate(); // Function WTL.WTLEMPGrenadeLauncherProjectile.BPActivate // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLEMPWeaponProjectile
// Size: 0x390 (Inherited: 0x290)
struct AWTLEMPWeaponProjectile : AWTLThrowingDeviceProjectile {
	char pad_290[0x70]; // 0x290(0x70)
	bool m_bActivate; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)
	struct TSoftClassPtr<UObject> Explosion; // 0x308(0x28)
	struct TSoftObjectPtr<UParticleSystem> Emitter; // 0x330(0x28)
	float Radius; // 0x358(0x04)
	bool MakeDamageToPlaceableStuff; // 0x35c(0x01)
	char pad_35D[0x3]; // 0x35d(0x03)
	float MinPlaceableStuffDamagePercent; // 0x360(0x04)
	float MaxPlaceableStuffPercent; // 0x364(0x04)
	float MinEnergyPercent; // 0x368(0x04)
	float MaxEnergyPercent; // 0x36c(0x04)
	float StuffDisabledTime; // 0x370(0x04)
	float MinShieldDamage; // 0x374(0x04)
	float MaxShieldDamage; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct TArray<int32_t> EquipmentIDOnCharacter; // 0x380(0x10)

	void OnRep_Activate(); // Function WTL.WTLEMPWeaponProjectile.OnRep_Activate // (Final|Native|Protected) // @ game+0x17e0a30
};

// Class WTL.WTLEnemyAIController
// Size: 0x398 (Inherited: 0x328)
struct AWTLEnemyAIController : AAIController {
	struct UBehaviorTree* Behaviour; // 0x328(0x08)
	float PredictionTime; // 0x330(0x04)
	float PredictionUpdatePeriod; // 0x334(0x04)
	bool bUpdatePreditionForAllSightedActors; // 0x338(0x01)
	char pad_339[0x5f]; // 0x339(0x5f)

	void RestartBehaviour(); // Function WTL.WTLEnemyAIController.RestartBehaviour // (Final|Native|Public|BlueprintCallable) // @ game+0x17e0e90
	void OnTouchSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLEnemyAIController.OnTouchSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnTeamSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLEnemyAIController.OnTeamSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnSightSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLEnemyAIController.OnSightSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnPredictionUpdate(); // Function WTL.WTLEnemyAIController.OnPredictionUpdate // (Final|Native|Private) // @ game+0x17e1aa0
	void OnPredictionSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLEnemyAIController.OnPredictionSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnPerceptionUpdated(struct TArray<struct AActor*>& UpdatedActors); // Function WTL.WTLEnemyAIController.OnPerceptionUpdated // (Final|Native|Public|HasOutParms) // @ game+0x1779410
	void OnPawnKilled(struct APawn* VictimPawn); // Function WTL.WTLEnemyAIController.OnPawnKilled // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnHearingSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State); // Function WTL.WTLEnemyAIController.OnHearingSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnDealedDamageToPawn(struct APawn* VictimPawn, float Value); // Function WTL.WTLEnemyAIController.OnDealedDamageToPawn // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnDamageSenseUpdated(struct AActor* StimulusInstigator, struct FVector StimulusLocation, bool State, float Value); // Function WTL.WTLEnemyAIController.OnDamageSenseUpdated // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void OnActorPerceptionUpdated(struct AActor* Actor, struct FAIStimulus Stimulus); // Function WTL.WTLEnemyAIController.OnActorPerceptionUpdated // (Final|Native|Public) // @ game+0x17e1840
	struct FGenericTeamId K2_GetGenericTeamID(); // Function WTL.WTLEnemyAIController.K2_GetGenericTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e1a60
	bool IsEnemy(struct APawn* InPawn); // Function WTL.WTLEnemyAIController.IsEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x17e0da0
	bool IsActorInSight(struct AActor* Actor); // Function WTL.WTLEnemyAIController.IsActorInSight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e1660
	bool GetRelevantInterestPointForTarget(struct AActor* Actor, struct FVector& InterestPoint, struct UObject*& SenseClass); // Function WTL.WTLEnemyAIController.GetRelevantInterestPointForTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x17e1120
	struct TArray<struct FWTLSenseEventInfo> GetPredictionEvetns(); // Function WTL.WTLEnemyAIController.GetPredictionEvetns // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17e1300
	struct TArray<struct FWTLTaggedSenseEventInfo> GetNoiseEvents(); // Function WTL.WTLEnemyAIController.GetNoiseEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17e1360
	bool GetNearestTargetInSight(struct AActor*& Target, bool bGetEnemy); // Function WTL.WTLEnemyAIController.GetNearestTargetInSight // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e1490
	bool GetLatestInterestPoint(struct FVector& InterestPoint, struct UObject*& SenseClass); // Function WTL.WTLEnemyAIController.GetLatestInterestPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x17e0fa0
	bool GetLatestFireNoiseLocation(struct FVector& FireLocation); // Function WTL.WTLEnemyAIController.GetLatestFireNoiseLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x17e0eb0
	struct TArray<struct FWTLSenseEventInfo> GetDamageEvents(); // Function WTL.WTLEnemyAIController.GetDamageEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17e1330
	struct TArray<struct AActor*> GetActorsInSight(); // Function WTL.WTLEnemyAIController.GetActorsInSight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17e1770
};

// Class WTL.WTLHumanoidAnimInstance
// Size: 0x330 (Inherited: 0x2c0)
struct UWTLHumanoidAnimInstance : UAnimInstance {
	enum class EWTLSex Sex; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	struct FVector LookDirection; // 0x2c4(0x0c)
	float SideVelocity; // 0x2d0(0x04)
	float ForwardVelocity; // 0x2d4(0x04)
	float VelocityZ; // 0x2d8(0x04)
	float CameraAimOffset; // 0x2dc(0x04)
	bool bIsInAir; // 0x2e0(0x01)
	bool bIsAiming; // 0x2e1(0x01)
	bool bIsCrouch; // 0x2e2(0x01)
	bool bIsInCombatMode; // 0x2e3(0x01)
	enum class EWTLHumanoidAnimInstanceState InstanceState; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	float ItemEquipTime; // 0x2e8(0x04)
	float ItemUnequipTime; // 0x2ec(0x04)
	int32_t UsableItemID; // 0x2f0(0x04)
	enum class EWTLItemType UsableItemType; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct UAnimSequence* IdleAnimation; // 0x2f8(0x08)
	struct UAnimSequence* SnuggleAnimation; // 0x300(0x08)
	struct UAimOffsetBlendSpace1D* AimOffsetBlendSpace; // 0x308(0x08)
	struct FVector AimingHandsTranslation; // 0x310(0x0c)
	struct FVector AimingHandsOffset; // 0x31c(0x0c)
	bool bIsUnequip; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
};

// Class WTL.WTLEnemyHumanoidAnimInstance
// Size: 0x350 (Inherited: 0x330)
struct UWTLEnemyHumanoidAnimInstance : UWTLHumanoidAnimInstance {
	char pad_330[0x8]; // 0x330(0x08)
	float TargetLookFollowingAlpha; // 0x338(0x04)
	struct FVector TargetLocation; // 0x33c(0x0c)
	char pad_348[0x8]; // 0x348(0x08)
};

// Class WTL.WTLEnemyNPC
// Size: 0xb50 (Inherited: 0x4c0)
struct AWTLEnemyNPC : ACharacter {
	float HealthValue; // 0x4b8(0x04)
	struct FWTLEnemyCurrentState CurrentState; // 0x4bc(0x1e)
	struct TMap<enum class EWTLEnemyNPCExclamationType, struct TSoftObjectPtr<UFMODEvent>> ExclamationMap; // 0x4e0(0x50)
	bool bIsWeaponEmpty; // 0x531(0x01)
	char pad_533[0x5]; // 0x533(0x05)
	struct FTakeHitInfo LastTakeHitInfo; // 0x538(0x220)
	bool bIsDead; // 0x758(0x01)
	enum class EWTLHandsState m_HandsState; // 0x759(0x01)
	char pad_75A[0x62]; // 0x75a(0x62)
	bool bIsInvulnerable; // 0x7bc(0x01)
	char pad_7BD[0x3]; // 0x7bd(0x03)
	struct FName CameraBoneName; // 0x7c0(0x08)
	bool bCanUseFlashlight; // 0x7c8(0x01)
	char pad_7C9[0x7]; // 0x7c9(0x07)
	struct FWTLCharacterInfo CharacterInfo; // 0x7d0(0x110)
	float DeathExclamationChance; // 0x8e0(0x04)
	float TakeDamageExclamationChance; // 0x8e4(0x04)
	struct TSoftObjectPtr<UFMODEvent> DeathSoundEvent; // 0x8e8(0x28)
	struct TSoftObjectPtr<UFMODEvent> TakeDamageLowHPEvent; // 0x910(0x28)
	struct TSoftObjectPtr<UFMODEvent> TakeDamageMediumHPEvent; // 0x938(0x28)
	struct TSoftObjectPtr<UFMODEvent> TakeDamageHighHPEvent; // 0x960(0x28)
	struct FWTLFootstepSettings FootstepSettings; // 0x988(0x0c)
	char pad_994[0x24]; // 0x994(0x24)
	struct AWTLUsable* UsableItemInHands; // 0x9b8(0x08)
	char pad_9C0[0x70]; // 0x9c0(0x70)
	bool bBroadcastDeathToKillers; // 0xa30(0x01)
	char pad_A31[0x7]; // 0xa31(0x07)
	struct USkeletalMeshComponent* MeshHead; // 0xa38(0x08)
	struct USkeletalMeshComponent* MeshLegs; // 0xa40(0x08)
	struct USkeletalMeshComponent* MeshFeet; // 0xa48(0x08)
	struct USkeletalMeshComponent* MeshHeadSlot; // 0xa50(0x08)
	struct USkeletalMeshComponent* MeshTorsoSlot; // 0xa58(0x08)
	struct USkeletalMeshComponent* MeshLegsSlot; // 0xa60(0x08)
	struct USkeletalMeshComponent* MeshFeetSlot; // 0xa68(0x08)
	struct USkeletalMeshComponent* BackpackSlot; // 0xa70(0x08)
	struct UStaticMeshComponent* WeaponPreviewSlot; // 0xa78(0x08)
	struct UFMODAudioComponent* VoiceComponent; // 0xa80(0x08)
	struct TArray<struct FWTLItemDropInfo> AdditionalLoot; // 0xa88(0x10)
	char pad_A98[0xa0]; // 0xa98(0xa0)
	struct AActor* CurrentTarget; // 0xb38(0x08)
	char pad_B40[0x10]; // 0xb40(0x10)

	float UnequipWeapon(bool bFullReload); // Function WTL.WTLEnemyNPC.UnequipWeapon // (Final|Native|Protected|BlueprintCallable) // @ game+0x17e3380
	void StopUse(); // Function WTL.WTLEnemyNPC.StopUse // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
	void StartUse(); // Function WTL.WTLEnemyNPC.StartUse // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
	void SetCanUseFlashlight(bool Value); // Function WTL.WTLEnemyNPC.SetCanUseFlashlight // (Final|Native|Public|BlueprintCallable) // @ game+0x17e2390
	void Reload(); // Function WTL.WTLEnemyNPC.Reload // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
	void PlayVoiceEvent(enum class EWTLEnemyNPCExclamationType VoiceEventType, float Chance, bool bInterruptCurrent); // Function WTL.WTLEnemyNPC.PlayVoiceEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x17e2ad0
	void OnRep_UsableItemInHands(); // Function WTL.WTLEnemyNPC.OnRep_UsableItemInHands // (Final|Native|Private) // @ game+0x17e35b0
	void OnRep_LastTakeHitInfo(); // Function WTL.WTLEnemyNPC.OnRep_LastTakeHitInfo // (Final|Native|Private) // @ game+0x17e35d0
	void OnRep_IsWeaponEmpty(); // Function WTL.WTLEnemyNPC.OnRep_IsWeaponEmpty // (Final|Native|Private) // @ game+0x17e3450
	void OnRep_CurrentState(); // Function WTL.WTLEnemyNPC.OnRep_CurrentState // (Final|Native|Private) // @ game+0x17e3760
	void OnNPCKillOnClient(); // Function WTL.WTLEnemyNPC.OnNPCKillOnClient // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetMulticast_PlayVoiceEvent(enum class EWTLEnemyNPCExclamationType ExclamationType, bool bInterruptCurrent); // Function WTL.WTLEnemyNPC.NetMulticast_PlayVoiceEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x17e3220
	bool IsDead(); // Function WTL.WTLEnemyNPC.IsDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2620
	bool IsActionInProgress(); // Function WTL.WTLEnemyNPC.IsActionInProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e25f0
	float GetWeaponRecoilSafeTime(); // Function WTL.WTLEnemyNPC.GetWeaponRecoilSafeTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2f40
	float GetWeaponPauseBetweenUse(); // Function WTL.WTLEnemyNPC.GetWeaponPauseBetweenUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2e80
	float GetWeaponEffectiveDistance(); // Function WTL.WTLEnemyNPC.GetWeaponEffectiveDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2d10
	enum class EWTLAITeam GetTeam(); // Function WTL.WTLEnemyNPC.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2470
	float GetMaxHealth(); // Function WTL.WTLEnemyNPC.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e31f0
	bool GetIsWeaponWithAutomaticFireMode(); // Function WTL.WTLEnemyNPC.GetIsWeaponWithAutomaticFireMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e3050
	bool GetIsWeaponFull(); // Function WTL.WTLEnemyNPC.GetIsWeaponFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e24c0
	bool GetIsWeaponEmpty(); // Function WTL.WTLEnemyNPC.GetIsWeaponEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e25b0
	bool GetIsItemEquipped(); // Function WTL.WTLEnemyNPC.GetIsItemEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2490
	float GetHealth(); // Function WTL.WTLEnemyNPC.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2660
	enum class EWTLHandsState GetHandsState(); // Function WTL.WTLEnemyNPC.GetHandsState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17e2640
	float EquipWeapon(); // Function WTL.WTLEnemyNPC.EquipWeapon // (Final|Native|Protected|BlueprintCallable) // @ game+0xe5dd70
	bool EnemyHasEffect(enum class EWTLCharacterEffectType EffectType); // Function WTL.WTLEnemyNPC.EnemyHasEffect // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17e2840
	void DestroyNPC(); // Function WTL.WTLEnemyNPC.DestroyNPC // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
	void ApplyMedicine(int32_t MedicineID); // Function WTL.WTLEnemyNPC.ApplyMedicine // (Final|Native|Public|BlueprintCallable) // @ game+0x17e2680
	void AddCharacterEffect(enum class EWTLCharacterEffectType EffectType, float Value); // Function WTL.WTLEnemyNPC.AddCharacterEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x17e2960
};

// Class WTL.WTLEnemyNPCDrop
// Size: 0x3d0 (Inherited: 0x368)
struct AWTLEnemyNPCDrop : AWTLCharacterDrop {
	char pad_368[0x58]; // 0x368(0x58)
	struct TArray<struct FWTLItemDropInfo> AdditionalLoot; // 0x3c0(0x10)
};

// Class WTL.WTLEnemyNPCSpawner
// Size: 0x2a8 (Inherited: 0x220)
struct AWTLEnemyNPCSpawner : AActor {
	char pad_220[0x30]; // 0x220(0x30)
	struct UBillboardComponent* SpriteComponent; // 0x250(0x08)
	enum class EWTLEnemyNPCSpawnType SpawnType; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct TArray<struct AWTLEnemyNPCSpawnPoint*> SpawnPointList; // 0x260(0x10)
	struct TArray<struct AWTLEnemyNPC*> EnemyNPCList; // 0x270(0x10)
	struct TArray<struct FWTLEnemyNPCSpawnerRecord> SpawEnemies; // 0x280(0x10)
	bool bCanUseFlashlight; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float ActiveRange; // 0x294(0x04)
	float RespawnTimeoutMin; // 0x298(0x04)
	float RespawnTimeoutMax; // 0x29c(0x04)
	struct UNavigationQueryFilter* NavigationRaycastFilter; // 0x2a0(0x08)

	void OnEnemyNPCDied(struct AWTLEnemyNPC* EnemyNPC, struct APawn* Killer); // Function WTL.WTLEnemyNPCSpawner.OnEnemyNPCDied // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnBeforeSpawnWave(); // Function WTL.WTLEnemyNPCSpawner.OnBeforeSpawnWave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnAllEnemyNPCDied(); // Function WTL.WTLEnemyNPCSpawner.OnAllEnemyNPCDied // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnAfterSpawnWave(); // Function WTL.WTLEnemyNPCSpawner.OnAfterSpawnWave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnEnemyNPCSpawned(struct AWTLEnemyNPC* EnemyNPC); // Function WTL.WTLEnemyNPCSpawner.K2_OnEnemyNPCSpawned // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLEnemyNPCSpawnPoint
// Size: 0x228 (Inherited: 0x220)
struct AWTLEnemyNPCSpawnPoint : AActor {
	int32_t Rating; // 0x220(0x04)
	char pad_224[0x4]; // 0x224(0x04)
};

// Class WTL.WTLThrowingDevice
// Size: 0x5b0 (Inherited: 0x458)
struct AWTLThrowingDevice : AWTLStuff {
	char pad_458[0x2]; // 0x458(0x02)
	bool m_bQuickThrow; // 0x45a(0x01)
	char pad_45B[0x25]; // 0x45b(0x25)
	struct UParticleSystemComponent* TargetLocation; // 0x480(0x08)
	struct TSoftObjectPtr<UParticleSystem> m_BeamParticleSystem; // 0x488(0x28)
	char pad_4B0[0x28]; // 0x4b0(0x28)
	float TrajectoryBeamTimeDelta; // 0x4d8(0x04)
	bool bPredictTrajectory; // 0x4dc(0x01)
	char pad_4DD[0x13]; // 0x4dd(0x13)
	float ThrowRandomConeAngle; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct FItemAnimationSet ThrowSequenceSet; // 0x4f8(0x18)
	struct FItemAnimationSet AlternateThrowSequenceSet; // 0x510(0x18)
	struct FItemAnimationSet QuickThrowSequenceSet; // 0x528(0x18)
	struct TSoftClassPtr<UObject> ProjectileClass; // 0x540(0x28)
	struct FVector MissileSocketOffsetMale; // 0x568(0x0c)
	struct FVector MissileSocketOffsetFemale; // 0x574(0x0c)
	struct FRotator MainThrowRotationOffset; // 0x580(0x0c)
	struct FRotator AlternativeThrowRotationOffset; // 0x58c(0x0c)
	float ProjectileThrowSpeed; // 0x598(0x04)
	bool CanBeDeactivated; // 0x59c(0x01)
	bool CanBeDropedAfterDeath; // 0x59d(0x01)
	char pad_59E[0x2]; // 0x59e(0x02)
	float DropThrowForce; // 0x5a0(0x04)
	float DropThrowForceAfterDeath; // 0x5a4(0x04)
	bool ShowImpactPoint; // 0x5a8(0x01)
	char pad_5A9[0x7]; // 0x5a9(0x07)

	void Server_StopUse(); // Function WTL.WTLThrowingDevice.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x192f9c0
	void Server_StartUse(); // Function WTL.WTLThrowingDevice.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x192fa20
	void Server_ResetThrowingDevice(); // Function WTL.WTLThrowingDevice.Server_ResetThrowingDevice // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x192f440
	void OnRep_QuickThrow(); // Function WTL.WTLThrowingDevice.OnRep_QuickThrow // (Final|Native|Private) // @ game+0x192fa80
	void NetMulticast_ResetDevice(struct AWTLCharacter* DeviceOwner); // Function WTL.WTLThrowingDevice.NetMulticast_ResetDevice // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192f4a0
	void NetMulticast_QuickThrow(); // Function WTL.WTLThrowingDevice.NetMulticast_QuickThrow // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192f800
	void NetMulticast_OnStopUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLThrowingDevice.NetMulticast_OnStopUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192f820
	void NetMulticast_OnStartUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLThrowingDevice.NetMulticast_OnStartUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192f8f0
	bool GetReadyToThrow(); // Function WTL.WTLThrowingDevice.GetReadyToThrow // (Final|Native|Public|BlueprintCallable) // @ game+0x192f420
	void Client_ShowCountdownWidget(uint16_t WeaponID, float TimeValue, enum class EWTLUsableItemUseType UseType, float ThrowSpeed); // Function WTL.WTLThrowingDevice.Client_ShowCountdownWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x192f580
	void Client_ResetDevice(); // Function WTL.WTLThrowingDevice.Client_ResetDevice // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17efde0
	void Client_HideCountdownWidget(); // Function WTL.WTLThrowingDevice.Client_HideCountdownWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x191d9b0
	void BPDeactivate(); // Function WTL.WTLThrowingDevice.BPDeactivate // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPActivationProcess(); // Function WTL.WTLThrowingDevice.BPActivationProcess // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLEnergyShield
// Size: 0x5b0 (Inherited: 0x5b0)
struct AWTLEnergyShield : AWTLThrowingDevice {
};

// Class WTL.WTLEnergyShieldProjectile
// Size: 0x318 (Inherited: 0x290)
struct AWTLEnergyShieldProjectile : AWTLThrowingDeviceProjectile {
	char pad_290[0x28]; // 0x290(0x28)
	bool m_bDestroyInWater; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct TSoftClassPtr<UObject> ExplosionInWater; // 0x2c0(0x28)
	float TraceDistance; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct TSoftClassPtr<UObject> ShieldBP; // 0x2f0(0x28)

	void OnRep_DestroyInWater(); // Function WTL.WTLEnergyShieldProjectile.OnRep_DestroyInWater // (Final|Native|Private) // @ game+0x17e4fc0
};

// Class WTL.WTLEventPoint
// Size: 0x3f8 (Inherited: 0x220)
struct AWTLEventPoint : AActor {
	char pad_220[0x50]; // 0x220(0x50)
	enum class EWTLEventPointType PointType; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	float Dificulty; // 0x274(0x04)
	enum class EWTLEventPointActivationType ActivationType; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct FText EventName; // 0x280(0x18)
	struct FText EventDescription; // 0x298(0x18)
	bool CanBeStartedAfterBeginPlay; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float MinStartDelay; // 0x2b4(0x04)
	float MaxStartDelay; // 0x2b8(0x04)
	float EventDuration; // 0x2bc(0x04)
	float EventRange; // 0x2c0(0x04)
	float EventAbandonRange; // 0x2c4(0x04)
	char MinCharacterLevel; // 0x2c8(0x01)
	char MaxCharacterLevel; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct TArray<enum class EWTLFaction> AllowedFactions; // 0x2d0(0x10)
	float ActivationZoneRange; // 0x2e0(0x04)
	int32_t MinActivationZoneCharacterCountToStart; // 0x2e4(0x04)
	struct TArray<struct FWTLEventTask> EventTasks; // 0x2e8(0x10)
	bool CanRunInParallel; // 0x2f8(0x01)
	bool CanStartAtDayTime; // 0x2f9(0x01)
	bool CanStartAtNightTime; // 0x2fa(0x01)
	bool InProgress; // 0x2fb(0x01)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct FDateTime AvailableTimeBegin; // 0x300(0x08)
	struct FDateTime AvailableTimeEnd; // 0x308(0x08)
	float EventEndServerTime; // 0x310(0x04)
	int32_t ExperienceReward; // 0x314(0x04)
	int32_t MoneyReward; // 0x318(0x04)
	int32_t CompleteQuestID; // 0x31c(0x04)
	int32_t AchievementID; // 0x320(0x04)
	bool CanGiveRandomGiftCards; // 0x324(0x01)
	char pad_325[0x3]; // 0x325(0x03)
	struct TArray<struct FWTLEventItemReward> ItemRewards; // 0x328(0x10)
	char pad_338[0x90]; // 0x338(0x90)
	int32_t ID; // 0x3c8(0x04)
	float StartChanceValue; // 0x3cc(0x04)
	struct AVolume* ActivationVolume; // 0x3d0(0x08)
	char pad_3D8[0x10]; // 0x3d8(0x10)
	int32_t AmbientMusicLocationID; // 0x3e8(0x04)
	bool LimitRewardByMonsterDamagePercent; // 0x3ec(0x01)
	char pad_3ED[0x3]; // 0x3ed(0x03)
	float MinMonsterDamagePercentForReward; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)

	void TryStart(enum class EWTLBPActionResult& Result); // Function WTL.WTLEventPoint.TryStart // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x17ed080
	void RegisterMonsterTakenDamage(struct AWTLMonsterPawn* Monster); // Function WTL.WTLEventPoint.RegisterMonsterTakenDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x17ec810
	void OnRep_InProgress(); // Function WTL.WTLEventPoint.OnRep_InProgress // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_EventTasks(); // Function WTL.WTLEventPoint.OnRep_EventTasks // (Final|Native|Protected) // @ game+0x17ed4e0
	void K2_OnStart(); // Function WTL.WTLEventPoint.K2_OnStart // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnFinish(bool Successful); // Function WTL.WTLEventPoint.K2_OnFinish // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnEventTaskCompleted(int32_t TaskIndex); // Function WTL.WTLEventPoint.K2_OnEventTaskCompleted // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnCharacterLeave(struct AWTLCharacter* Character); // Function WTL.WTLEventPoint.K2_OnCharacterLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnCharacterEnter(struct AWTLCharacter* Character); // Function WTL.WTLEventPoint.K2_OnCharacterEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool K2_IsReadyToStart(); // Function WTL.WTLEventPoint.K2_IsReadyToStart // (Native|Event|Public|BlueprintEvent|Const) // @ game+0xf43fc0
	bool IsReadyToStart(); // Function WTL.WTLEventPoint.IsReadyToStart // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ed4b0
	bool IsInitialized(); // Function WTL.WTLEventPoint.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec6a0
	void IncrementTaskValue(int32_t TaskIndex, int32_t Delta); // Function WTL.WTLEventPoint.IncrementTaskValue // (Final|Native|Public|BlueprintCallable) // @ game+0x17ed1a0
	void GiveRewardToCharacters(struct TArray<struct AWTLCharacter*> Characters); // Function WTL.WTLEventPoint.GiveRewardToCharacters // (Final|Native|Public|BlueprintCallable) // @ game+0x17ecb10
	void GiveRewardToCharacter(struct AWTLCharacter* Character); // Function WTL.WTLEventPoint.GiveRewardToCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x17ecc60
	float GetTotalProgressPercent(); // Function WTL.WTLEventPoint.GetTotalProgressPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ece60
	float GetTimeLeftSeconds(); // Function WTL.WTLEventPoint.GetTimeLeftSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ecdb0
	struct FTimespan GetTimeLeft(); // Function WTL.WTLEventPoint.GetTimeLeft // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ece20
	float GetStartChance(); // Function WTL.WTLEventPoint.GetStartChance // (Native|Event|Public|BlueprintEvent) // @ game+0x17ecd70
	struct FDateTime GetNextAvailableTime(); // Function WTL.WTLEventPoint.GetNextAvailableTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec700
	float GetMonsterDamagePercent(struct AWTLCharacter* Character); // Function WTL.WTLEventPoint.GetMonsterDamagePercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec720
	int32_t GetID(); // Function WTL.WTLEventPoint.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1773c50
	struct FDateTime GetEventEndTime(); // Function WTL.WTLEventPoint.GetEventEndTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec6e0
	struct TArray<struct AWTLCharacter*> GetCharactersInRange(); // Function WTL.WTLEventPoint.GetCharactersInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec4b0
	int32_t GetCharactersCount(); // Function WTL.WTLEventPoint.GetCharactersCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec570
	void GenerateNewAvailableTime(); // Function WTL.WTLEventPoint.GenerateNewAvailableTime // (Final|Native|Public|BlueprintCallable) // @ game+0x17ed180
	void ForceStart(); // Function WTL.WTLEventPoint.ForceStart // (Final|Native|Public|BlueprintCallable) // @ game+0x17ed060
	void ForceFinish(bool Succeessful, bool GiveReward); // Function WTL.WTLEventPoint.ForceFinish // (Final|Native|Public|BlueprintCallable) // @ game+0x17ecee0
	void ForceCharacterEntersZone(struct AWTLCharacter* Character, bool CheckCanJoinEvent); // Function WTL.WTLEventPoint.ForceCharacterEntersZone // (Final|Native|Public|BlueprintCallable) // @ game+0x17ec8f0
	bool CharacterJoinedEvent(struct AWTLCharacter* Character); // Function WTL.WTLEventPoint.CharacterJoinedEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ec590
	bool CharacterCanJoinEvent(struct AWTLCharacter* Character); // Function WTL.WTLEventPoint.CharacterCanJoinEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ed3c0
};

// Class WTL.WTLExperienceSystem
// Size: 0xe8 (Inherited: 0x28)
struct UWTLExperienceSystem : UObject {
	char pad_28[0xc0]; // 0x28(0xc0)
};

// Class WTL.WTLSocialNetworkAdapter
// Size: 0x48 (Inherited: 0x28)
struct UWTLSocialNetworkAdapter : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class WTL.WTLFacebookSocialNetworkAdapter
// Size: 0x48 (Inherited: 0x48)
struct UWTLFacebookSocialNetworkAdapter : UWTLSocialNetworkAdapter {
};

// Class WTL.WTLFish
// Size: 0x2f8 (Inherited: 0x220)
struct AWTLFish : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	struct FVector DefaultVelocity; // 0x238(0x0c)
	float SpeedMultiplier; // 0x244(0x04)
	char pad_248[0x4]; // 0x248(0x04)
	float ForceInterpolationSpeed; // 0x24c(0x04)
	float DirectionChangeSpeedMultiplier; // 0x250(0x04)
	float StaminaRecoveryValue; // 0x254(0x04)
	float StaminaDecreaseValue; // 0x258(0x04)
	float MinStaminaValueToRecovering; // 0x25c(0x04)
	float MaxStaminaValueToRecovering; // 0x260(0x04)
	float MinStaminaDeltaToChangeVelocity; // 0x264(0x04)
	float MaxStaminaDeltaToChangeVelocity; // 0x268(0x04)
	struct FName BodiesBelowSimulatePhysicsSocketName; // 0x26c(0x08)
	char pad_274[0x8]; // 0x274(0x08)
	struct FVector FishOffset; // 0x27c(0x0c)
	enum class EWTLFishState m_FishState; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float m_InterpolationHorizontalSpeed; // 0x28c(0x04)
	float m_InterpolationVerticalSpeed; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct UCurveFloat* FishRadianSpeedCurve; // 0x298(0x08)
	char pad_2A0[0x28]; // 0x2a0(0x28)
	struct AWTLFishingActivity* m_Activity; // 0x2c8(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x2d0(0x08)
	struct UParticleSystemComponent* PeckingParticles; // 0x2d8(0x08)
	struct UParticleSystemComponent* RecoveringParticles; // 0x2e0(0x08)
	struct UParticleSystemComponent* RipplesParticles; // 0x2e8(0x08)
	struct UFMODAudioComponent* WavesSoundComponent; // 0x2f0(0x08)

	void OnRep_FishState(); // Function WTL.WTLFish.OnRep_FishState // (Final|Native|Private) // @ game+0x17ee290
	void NetMulticast_OnCathed(); // Function WTL.WTLFish.NetMulticast_OnCathed // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x17ee270
	void K2_OnFishStateChanged(enum class EWTLFishState State); // Function WTL.WTLFish.K2_OnFishStateChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnCathed(); // Function WTL.WTLFish.K2_OnCathed // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLFishingActivity
// Size: 0x3e8 (Inherited: 0x250)
struct AWTLFishingActivity : AWTLActionGameplayActivity {
	struct AWTLCharacter* m_Character; // 0x250(0x08)
	struct AWTLFishingItem* m_FishingRod; // 0x258(0x08)
	struct AWTLFishingVolume* m_FishingVolume; // 0x260(0x08)
	struct AWTLFish* m_Fish; // 0x268(0x08)
	bool m_bFishingInProcess; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	struct FVector m_FloatStartPosition; // 0x274(0x0c)
	struct FVector m_CharacterPosition; // 0x280(0x0c)
	char pad_28C[0x7c]; // 0x28c(0x7c)
	char m_RodResistanceReplicated; // 0x308(0x01)
	char pad_309[0x1b]; // 0x309(0x1b)
	bool m_bPulling; // 0x324(0x01)
	char pad_325[0x13]; // 0x325(0x13)
	struct UCurveFloat* FishingRodTiltCurve; // 0x338(0x08)
	struct UCurveFloat* FishingRodResistanceCurve; // 0x340(0x08)
	float MovementMultiplier; // 0x348(0x04)
	float PullingSpeed; // 0x34c(0x04)
	float CameraShakeInterpSpeed; // 0x350(0x04)
	char ForwardAlphaToCatchFish; // 0x354(0x01)
	bool DrawDebugLines; // 0x355(0x01)
	char pad_356[0x6]; // 0x356(0x06)
	float ZoneMaxWidth; // 0x35c(0x04)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x360(0x10)
	struct UCameraShakeBase* CameraShake; // 0x370(0x08)
	struct UMatineeCameraShake* CameraShakeClass; // 0x378(0x08)
	struct FWTLCameraLimits CameraLimits; // 0x380(0x0c)
	float DesiredFOV; // 0x38c(0x04)
	float m_FishingConeAngle; // 0x390(0x04)
	float m_ZoneMaxLenght; // 0x394(0x04)
	struct FVector m_DirectionToCharacter; // 0x398(0x0c)
	struct FVector m_RightVector; // 0x3a4(0x0c)
	char pad_3B0[0x38]; // 0x3b0(0x38)

	void Server_StopPullFish(); // Function WTL.WTLFishingActivity.Server_StopPullFish // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ee720
	void Server_StartPullFish(); // Function WTL.WTLFishingActivity.Server_StartPullFish // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17ee780
	void ResetAndDestroy(); // Function WTL.WTLFishingActivity.ResetAndDestroy // (Final|Native|Protected) // @ game+0x17ee820
	void OnRep_Shake(); // Function WTL.WTLFishingActivity.OnRep_Shake // (Final|Native|Private) // @ game+0x17ee9c0
	void OnRep_Resistance(); // Function WTL.WTLFishingActivity.OnRep_Resistance // (Final|Native|Private) // @ game+0xe77850
	void OnRep_Pulling(); // Function WTL.WTLFishingActivity.OnRep_Pulling // (Final|Native|Private) // @ game+0xe77850
	void OnRep_FishState(); // Function WTL.WTLFishingActivity.OnRep_FishState // (Final|Native|Private) // @ game+0x17eea40
	void OnRep_Fish(); // Function WTL.WTLFishingActivity.OnRep_Fish // (Final|Native|Private) // @ game+0x17ee940
	void OnCharacterDied(struct AWTLCharacter* Character); // Function WTL.WTLFishingActivity.OnCharacterDied // (Final|Native|Protected) // @ game+0x17ee840
	float GetCharacterTiltX(); // Function WTL.WTLFishingActivity.GetCharacterTiltX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ee7e0
	void Client_StartFishing(); // Function WTL.WTLFishingActivity.Client_StartFishing // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xba4a50
	void Client_OnFishSpawned(); // Function WTL.WTLFishingActivity.Client_OnFishSpawned // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10ff1a0
	void Client_OnFishingEnded(); // Function WTL.WTLFishingActivity.Client_OnFishingEnded // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xba4a70
	void Client_FishingLineBroke(); // Function WTL.WTLFishingActivity.Client_FishingLineBroke // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17ee920
	void Client_FishingFinished(); // Function WTL.WTLFishingActivity.Client_FishingFinished // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0xba4a30
	void Client_CanNotFishing(); // Function WTL.WTLFishingActivity.Client_CanNotFishing // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10fb3b0
};

// Class WTL.WTLFishingItem
// Size: 0x5e0 (Inherited: 0x458)
struct AWTLFishingItem : AWTLStuff {
	struct AWTLPlayerController* m_Controller; // 0x458(0x08)
	struct UAnimationAsset* FloatFlowAnimation; // 0x460(0x08)
	struct UAnimationAsset* FloatBiteAnimation; // 0x468(0x08)
	struct FName FloatAttachSocket; // 0x470(0x08)
	struct AWTLFishingActivity* FishingActivityAsset; // 0x478(0x08)
	struct TArray<enum class EObjectTypeQuery> HitCollisionObjectTypes; // 0x480(0x10)
	struct UCurveFloat* MouseSesivityCurve; // 0x490(0x08)
	float MouseSensivity; // 0x498(0x04)
	bool DrawDebugLines; // 0x49c(0x01)
	char pad_49D[0x3]; // 0x49d(0x03)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x4a0(0x10)
	struct TSoftClassPtr<UObject> CrosshairWidgetClass; // 0x4b0(0x28)
	bool m_bFloatVisibility; // 0x4d8(0x01)
	char pad_4D9[0x3]; // 0x4d9(0x03)
	struct FVector m_FloatLocation; // 0x4dc(0x0c)
	char pad_4E8[0x20]; // 0x4e8(0x20)
	struct UAnimMontage* FishingThrowAnimMontage; // 0x508(0x08)
	struct UAnimMontage* FishingThrowEndAnimMontage; // 0x510(0x08)
	struct UAnimMontage* FishingPecksAnimMontage; // 0x518(0x08)
	struct UAnimMontage* FishingPecksEndAnimMontage; // 0x520(0x08)
	struct UAnimMontage* FishingLeftHookAnimMontage; // 0x528(0x08)
	struct UAnimMontage* FishingUpHookAnimMontage; // 0x530(0x08)
	struct UAnimMontage* FishingRightHookAnimMontage; // 0x538(0x08)
	struct UAnimMontage* FishingDownHookAnimMontage; // 0x540(0x08)
	struct UAnimMontage* m_FishingCurrentAnimMontage; // 0x548(0x08)
	char pad_550[0x8]; // 0x550(0x08)
	float m_RodHorizontalTilt; // 0x558(0x04)
	char pad_55C[0x4]; // 0x55c(0x04)
	float m_Resistance; // 0x560(0x04)
	char pad_564[0x14]; // 0x564(0x14)
	struct AWTLFishingActivity* m_Activity; // 0x578(0x08)
	char pad_580[0x8]; // 0x580(0x08)
	int32_t m_LastFishingZoneID; // 0x588(0x04)
	int32_t m_CathedFishID; // 0x58c(0x04)
	char pad_590[0x8]; // 0x590(0x08)
	struct FMulticastInlineDelegate OnFishingItemPutToInventory; // 0x598(0x10)
	struct FMulticastInlineDelegate OnFishingRodCanThrow; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnFloatVisibilityChanged; // 0x5b8(0x10)
	struct USkeletalMeshComponent* FloatMesh; // 0x5c8(0x08)
	struct UCableComponent* FishingRope; // 0x5d0(0x08)
	struct USkeletalMeshComponent* FishMesh; // 0x5d8(0x08)

	void Server_StopUse(); // Function WTL.WTLFishingItem.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17efed0
	void Server_StartUse(); // Function WTL.WTLFishingItem.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17eff30
	void Server_ChangeHorizontalAlpha(float Alpha); // Function WTL.WTLFishingItem.Server_ChangeHorizontalAlpha // (Final|Net|Native|Event|Private|NetServer|NetValidate) // @ game+0x17efbd0
	void OnRep_MouseDeltaX(); // Function WTL.WTLFishingItem.OnRep_MouseDeltaX // (Final|Native|Private) // @ game+0x17efcf0
	void OnRep_FloatVisibility(); // Function WTL.WTLFishingItem.OnRep_FloatVisibility // (Final|Native|Private) // @ game+0x17efda0
	void OnRep_FloatLocation(); // Function WTL.WTLFishingItem.OnRep_FloatLocation // (Final|Native|Private) // @ game+0x17efd40
	void OnRep_FishingActivity(); // Function WTL.WTLFishingItem.OnRep_FishingActivity // (Final|Native|Private) // @ game+0x17efdc0
	void OnRep_CathedFishID(); // Function WTL.WTLFishingItem.OnRep_CathedFishID // (Final|Native|Private) // @ game+0x17efcd0
	void OnActivityDestroyed(struct AActor* DestroyedActor); // Function WTL.WTLFishingItem.OnActivityDestroyed // (Final|Native|Private) // @ game+0x17efaf0
	bool NowIsPulling(); // Function WTL.WTLFishingItem.NowIsPulling // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ef960
	void NetMulticast_ResetAll(bool AttachFish); // Function WTL.WTLFishingItem.NetMulticast_ResetAll // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x17efa10
	void NetMulticast_PlayAnimation(enum class EWTLFishingMontageType MontageType); // Function WTL.WTLFishingItem.NetMulticast_PlayAnimation // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x17efe00
	void NetMulticast_MakeHit(); // Function WTL.WTLFishingItem.NetMulticast_MakeHit // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x17efde0
	void K2_SimulateRope(bool Simulate); // Function WTL.WTLFishingItem.K2_SimulateRope // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnFishCatched(bool IsSuccess); // Function WTL.WTLFishingItem.K2_OnFishCatched // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_DeatachRopeEnd(bool Value); // Function WTL.WTLFishingItem.K2_DeatachRopeEnd // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	float GetVisualResistance(); // Function WTL.WTLFishingItem.GetVisualResistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ef980
	float GetResistance(); // Function WTL.WTLFishingItem.GetResistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ef9a0
	float GetMouseHorizontalAlpha(); // Function WTL.WTLFishingItem.GetMouseHorizontalAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ef9c0
	struct FVector GetFloatLocation(); // Function WTL.WTLFishingItem.GetFloatLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17ef9e0
};

// Class WTL.WTLFishingVolume
// Size: 0x2c0 (Inherited: 0x258)
struct AWTLFishingVolume : AVolume {
	char pad_258[0x8]; // 0x258(0x08)
	bool AutoSpawnSeagulls; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x268(0x10)
	char pad_278[0x40]; // 0x278(0x40)
	bool ZoneEnabled; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	int32_t FishingID; // 0x2bc(0x04)

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLFishingVolume.OnVolumeEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLFishingVolume.OnVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
};

// Class WTL.WTLFlashlightMountComponent
// Size: 0x320 (Inherited: 0x280)
struct UWTLFlashlightMountComponent : USpringArmComponent {
	char pad_280[0x18]; // 0x280(0x18)
	float FlashDeltaTime; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct USpotLightComponent* LightComponent; // 0x2a0(0x08)
	struct UStaticMeshComponent* FlashlightMesh; // 0x2a8(0x08)
	struct TSoftObjectPtr<UFMODEvent> ToggleSoundEvent; // 0x2b0(0x28)
	struct TSoftObjectPtr<UFMODEvent> BrokenFlashlightEvent; // 0x2d8(0x28)
	struct UCurveFloat* FaultyFlashlightCurve; // 0x300(0x08)
	float MinTimeBetweenFlashes; // 0x308(0x04)
	float MaxTimeBetweenFlashes; // 0x30c(0x04)
	bool bBrokenFlash; // 0x310(0x01)
	char pad_311[0xf]; // 0x311(0x0f)

	void Server_Toggle(); // Function WTL.WTLFlashlightMountComponent.Server_Toggle // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17f12e0
};

// Class WTL.WTLFloatingPawnMovement
// Size: 0x150 (Inherited: 0x150)
struct UWTLFloatingPawnMovement : UFloatingPawnMovement {
};

// Class WTL.WTLFMODCharacterVoiceComponent
// Size: 0x1a90 (Inherited: 0x3e0)
struct UWTLFMODCharacterVoiceComponent : UFMODAudioComponent {
	char pad_3E0[0x16b0]; // 0x3e0(0x16b0)
};

// Class WTL.WTLFMODReverbZone
// Size: 0x260 (Inherited: 0x258)
struct AWTLFMODReverbZone : AVolume {
	struct UFMODAudioComponent* SoundEvent; // 0x258(0x08)

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLFMODReverbZone.OnEndOverlap // (Final|Native|Private) // @ game+0x17f1440
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLFMODReverbZone.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17f16f0
};

// Class WTL.WTLFortificationEnemyNPCSpawner
// Size: 0x2b8 (Inherited: 0x2a8)
struct AWTLFortificationEnemyNPCSpawner : AWTLEnemyNPCSpawner {
	char pad_2A8[0x8]; // 0x2a8(0x08)
	int32_t MaxFactionPlayersToSpawn; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)

	void UpdateOwnerFaction(enum class EWTLFaction Faction); // Function WTL.WTLFortificationEnemyNPCSpawner.UpdateOwnerFaction // (Final|Native|Public|BlueprintCallable) // @ game+0x17f2a30
};

// Class WTL.WTLFortificationSafeZoneAnimScriptInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UWTLFortificationSafeZoneAnimScriptInstance : UAnimInstance {
	bool bIsEnabled; // 0x2b8(0x01)
};

// Class WTL.WTLSafeZone
// Size: 0x280 (Inherited: 0x220)
struct AWTLSafeZone : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct USphereComponent* SphereComponent; // 0x228(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x230(0x08)
	struct UNavModifierComponent* NavModifierComponent; // 0x238(0x08)
	int32_t ID; // 0x240(0x04)
	enum class EWTLFaction Faction; // 0x244(0x01)
	char pad_245[0x3]; // 0x245(0x03)
	int32_t RedirectSafeZoneID; // 0x248(0x04)
	bool Active; // 0x24c(0x01)
	bool bNeedToHideSphereOnDeactivation; // 0x24d(0x01)
	enum class EWTLSafeZoneType Type; // 0x24e(0x01)
	bool CanRespawnWhenDisabled; // 0x24f(0x01)
	bool bAllowToShowOnMinimap; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct TArray<struct AWTLPlayerStart*> m_PlayerStarts; // 0x258(0x10)
	int32_t m_PlayerStartsCount; // 0x268(0x04)
	char pad_26C[0x14]; // 0x26c(0x14)

	void SetFaction(enum class EWTLFaction Value); // Function WTL.WTLSafeZone.SetFaction // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1922c70
	void OnTriggerVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLSafeZone.OnTriggerVolumeEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnTriggerVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLSafeZone.OnTriggerVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	void OnRep_Faction(); // Function WTL.WTLSafeZone.OnRep_Faction // (Final|Native|Private) // @ game+0xba4570
	void OnRep_Active(); // Function WTL.WTLSafeZone.OnRep_Active // (Final|Native|Private) // @ game+0x17ee270
	enum class EWTLFaction GetFaction(); // Function WTL.WTLSafeZone.GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1922d40
	void EnabledSafeZone(); // Function WTL.WTLSafeZone.EnabledSafeZone // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1922dc0
	void DisableSafeZone(); // Function WTL.WTLSafeZone.DisableSafeZone // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1922d70
	bool CheckCharacterInZone(struct AWTLCharacter* Character); // Function WTL.WTLSafeZone.CheckCharacterInZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1922e00
};

// Class WTL.WTLFortificationSafeZone
// Size: 0x2c0 (Inherited: 0x280)
struct AWTLFortificationSafeZone : AWTLSafeZone {
	struct USkeletalMeshComponent* GeneratorMesh; // 0x280(0x08)
	char pad_288[0x18]; // 0x288(0x18)
	struct UFMODAudioComponent* AlarmSoundComponent; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct AWTLSafeZone* ConfederationFallbackSafeZone; // 0x2b0(0x08)
	struct AWTLSafeZone* BlackSunsetFallbackSafeZone; // 0x2b8(0x08)
};

// Class WTL.WTLFortificationSafeZoneJammer
// Size: 0x408 (Inherited: 0x3c0)
struct AWTLFortificationSafeZoneJammer : AWTLChargeablePlaceableStuff {
	char pad_3C0[0x10]; // 0x3c0(0x10)
	struct UStaticMeshComponent* Mesh; // 0x3d0(0x08)
	enum class EWTLFortificationJammerState State; // 0x3d8(0x01)
	char pad_3D9[0xf]; // 0x3d9(0x0f)
	float NoiseNotificationInterval; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	float NoiseRange; // 0x3f0(0x04)
	char pad_3F4[0x14]; // 0x3f4(0x14)

	void OnStateChanged(enum class EWTLFortificationJammerState NewState); // Function WTL.WTLFortificationSafeZoneJammer.OnStateChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnRep_State(); // Function WTL.WTLFortificationSafeZoneJammer.OnRep_State // (Final|Native|Private) // @ game+0x17f3140
	enum class EWTLFortificationJammerState GetState(); // Function WTL.WTLFortificationSafeZoneJammer.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f3100
	struct AWTLFortificationCommandCore* GetNearestCommandCore(); // Function WTL.WTLFortificationSafeZoneJammer.GetNearestCommandCore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f3120
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLFortificationSafeZoneJammer.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd90
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLFortificationSafeZoneJammer.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17defb0
	bool AIInterface_IsAlive(); // Function WTL.WTLFortificationSafeZoneJammer.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df130
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLFortificationSafeZoneJammer.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0e0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLFortificationSafeZoneJammer.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLFortificationSafeZoneJammer.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0c0
};

// Class WTL.WTLFractionFlag
// Size: 0x258 (Inherited: 0x220)
struct AWTLFractionFlag : AActor {
	struct USceneComponent* FlagRoot; // 0x220(0x08)
	struct UStaticMeshComponent* FlagpoleMesh; // 0x228(0x08)
	struct USkeletalMeshComponent* FlagMesh; // 0x230(0x08)
	float InfluenceInterpSpeed; // 0x238(0x04)
	bool bUseInfluenceInterpolation; // 0x23c(0x01)
	char pad_23D[0x1b]; // 0x23d(0x1b)

	void UpdateFactionInfluence(float FactionValue, float InfluenceValue); // Function WTL.WTLFractionFlag.UpdateFactionInfluence // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void Client_SetFactionInfluence(enum class EWTLFaction Faction, float Influence); // Function WTL.WTLFractionFlag.Client_SetFactionInfluence // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x17aadd0
};

// Class WTL.WTLFurnace
// Size: 0x328 (Inherited: 0x328)
struct AWTLFurnace : AWTLCraftObject {
};

// Class WTL.WTLGameInstance
// Size: 0x11e8 (Inherited: 0x1a8)
struct UWTLGameInstance : UGameInstance {
	char pad_1A8[0x128]; // 0x1a8(0x128)
	struct FWTLClanList m_ClanList; // 0x2d0(0x38)
	struct TMap<uint16_t, struct FWTLClanIcons> m_ClanIcons; // 0x308(0x50)
	char pad_358[0x20]; // 0x358(0x20)
	struct FWTLSteamInventoryItemList m_SteamItemDefinitions; // 0x378(0x38)
	struct FWTLAccountInventoryItemList m_AccountInventory; // 0x3b0(0x40)
	struct FWTLStoreItemList m_StoreItemList; // 0x3f0(0x38)
	char pad_428[0x140]; // 0x428(0x140)
	struct UWTLLoadingScreenLocation* m_LoadingScreenLocationWidget; // 0x568(0x08)
	struct UWTLLoadingScreenSimple* m_LoadingScreenSimpleWidget; // 0x570(0x08)
	char pad_578[0x18]; // 0x578(0x18)
	struct TSoftObjectPtr<UFMODEvent> AmbientEvent; // 0x590(0x28)
	char pad_5B8[0x8]; // 0x5b8(0x08)
	struct TSoftObjectPtr<UFMODEvent> EventPointsEvent; // 0x5c0(0x28)
	struct TSoftObjectPtr<UFMODEvent> EventPointsSnapshotEvent; // 0x5e8(0x28)
	char pad_610[0x110]; // 0x610(0x110)
	struct UFMODBus* MasterBus; // 0x720(0x08)
	struct UFMODBus* MusicBus; // 0x728(0x08)
	struct UFMODBus* EffectsBus; // 0x730(0x08)
	struct UFMODBus* CharacterVoiceBus; // 0x738(0x08)
	struct UFMODBus* SpeechBus; // 0x740(0x08)
	struct UFMODBus* UIBus; // 0x748(0x08)
	struct TArray<struct FWTLBulletImpactEffect> HitEffects; // 0x750(0x10)
	struct TArray<struct FWTLBulletImpactEffect> RicochetEffects; // 0x760(0x10)
	struct TArray<struct FWTLFootstepEffect> FootstepEffects; // 0x770(0x10)
	struct TArray<struct FWTLBulletFlyNearEffect> BulletFlyNearEffects; // 0x780(0x10)
	struct TArray<struct FWTLCharacterDamageEffect> CharacterDamageEffects; // 0x790(0x10)
	struct TArray<struct FWTLKnifeImpactEffect> KnifeHitEffects; // 0x7a0(0x10)
	struct TArray<struct FWTLCommonButtonSound> CommonButtonSounds; // 0x7b0(0x10)
	struct TArray<struct FWTLCommonClickedItemSound> CommonClickedItemSounds; // 0x7c0(0x10)
	struct TArray<struct FWTLSwitcherSound> SwitcherSounds; // 0x7d0(0x10)
	struct TArray<struct FWTLCheckBoxSound> CheckBoxSounds; // 0x7e0(0x10)
	struct TArray<struct FWTLComboBoxStringSound> ComboBoxStringSounds; // 0x7f0(0x10)
	struct TMap<enum class EWTLCharacterClass, struct FWTLDefaultClassParameters> DefaultClassesParameters; // 0x800(0x50)
	int32_t MaleDefaultHeadPartID; // 0x850(0x04)
	int32_t MaleDefaultTorsoPartID; // 0x854(0x04)
	int32_t MaleDefaultLegsPartID; // 0x858(0x04)
	int32_t MaleDefaultFeetPartID; // 0x85c(0x04)
	int32_t MaleDefaultGlassesPartID; // 0x860(0x04)
	int32_t MaleDefaultWatchesPartID; // 0x864(0x04)
	int32_t MaleMinerDefaultBackpackPartID; // 0x868(0x04)
	int32_t MaleHunterDefaultBackpackPartID; // 0x86c(0x04)
	int32_t MaleMercenaryDefaultBackpackPartID; // 0x870(0x04)
	int32_t MaleEngineerDefaultBackpackPartID; // 0x874(0x04)
	int32_t FemaleDefaultHeadPartID; // 0x878(0x04)
	int32_t FemaleDefaultTorsoPartID; // 0x87c(0x04)
	int32_t FemaleDefaultLegsPartID; // 0x880(0x04)
	int32_t FemaleDefaultFeetPartID; // 0x884(0x04)
	int32_t FemaleDefaultGlassesPartID; // 0x888(0x04)
	int32_t FemaleDefaultWatchesPartID; // 0x88c(0x04)
	int32_t FemaleMinerDefaultBackpackPartID; // 0x890(0x04)
	int32_t FemaleHunterDefaultBackpackPartID; // 0x894(0x04)
	int32_t FemaleMercenaryDefaultBackpackPartID; // 0x898(0x04)
	int32_t FemaleEngineerDefaultBackpackPartID; // 0x89c(0x04)
	struct FLinearColor MaleHairDefaultColor; // 0x8a0(0x10)
	struct FLinearColor FemaleHairDefaultColor; // 0x8b0(0x10)
	struct FLinearColor SkinDefaultColor; // 0x8c0(0x10)
	enum class EWTLPlatform DebugPlatform; // 0x8d0(0x01)
	bool DebugViewportPositionForUI; // 0x8d1(0x01)
	bool DebugIsFounder; // 0x8d2(0x01)
	bool DebugHavePremium; // 0x8d3(0x01)
	bool IsUseDebugCreditsAmount; // 0x8d4(0x01)
	char pad_8D5[0x3]; // 0x8d5(0x03)
	int32_t DebugCreditsAmount; // 0x8d8(0x04)
	bool DebugShowHiddenStoreItems; // 0x8dc(0x01)
	enum class EWTLPlayerType DebugCharacterPlayerType; // 0x8dd(0x01)
	char pad_8DE[0x2]; // 0x8de(0x02)
	struct FWTLDateTime DebugCharacterCreationDate; // 0x8e0(0x08)
	enum class EWTLSex DebugCharacterSex; // 0x8e8(0x01)
	char pad_8E9[0x3]; // 0x8e9(0x03)
	int32_t DebugCharacterLevel; // 0x8ec(0x04)
	enum class EWTLCharacterClass DebugCharacterClass; // 0x8f0(0x01)
	char pad_8F1[0x3]; // 0x8f1(0x03)
	int32_t DebugCharacterBodyType; // 0x8f4(0x04)
	enum class EWTLFaction DebugCharacterFaction; // 0x8f8(0x01)
	bool DebugCharacterIsInClan; // 0x8f9(0x01)
	char pad_8FA[0x2]; // 0x8fa(0x02)
	int32_t DebugCharacterClanID; // 0x8fc(0x04)
	enum class EWTLClanMemberType DebugCharacterClanMemberType; // 0x900(0x01)
	char pad_901[0x7]; // 0x901(0x07)
	struct TArray<struct FWTLDebugCharacterClanInfo> DebugCharacterClanInfoArray; // 0x908(0x10)
	int32_t DebugCharacterID; // 0x918(0x04)
	bool DebugCheckMinLevelAndTimeForBarterAndUseMailBox; // 0x91c(0x01)
	bool DebugCharacterCanUseAllItems; // 0x91d(0x01)
	bool bIsDebugDisablePlayInEditorCheckingInMainMenuCustomization; // 0x91e(0x01)
	char pad_91F[0x1]; // 0x91f(0x01)
	int32_t DebugGameServerID; // 0x920(0x04)
	int32_t DebugCreditsToMoneyRate; // 0x924(0x04)
	struct FString DebugVOIPTestHost; // 0x928(0x10)
	int32_t DebugVOIPTestPort; // 0x938(0x04)
	char pad_93C[0x4]; // 0x93c(0x04)
	struct FString DebugVOIPTestGUID; // 0x940(0x10)
	struct FWTLClientAuthorizationResult AuthorizationInfo; // 0x950(0x128)
	char pad_A78[0x8]; // 0xa78(0x08)
	struct FWTLLocalCharactersData LocalCharactersData; // 0xa80(0x50)
	char pad_AD0[0x20]; // 0xad0(0x20)
	struct FWTLSettings Settings; // 0xaf0(0x420)
	struct UWTLSecurityController* SecurityController; // 0xf10(0x08)
	struct UWTLNetworkController* NetworkController; // 0xf18(0x08)
	struct UWTLVoiceController* VoiceController; // 0xf20(0x08)
	struct UWTLSharedData* SharedData; // 0xf28(0x08)
	struct UWTLExperienceSystem* ExperienceSystem; // 0xf30(0x08)
	struct UWTLSkillSystem* SkillSystem; // 0xf38(0x08)
	struct UWTLBallisticsSystem* BallisticsSystem; // 0xf40(0x08)
	struct UWTLDamageSystem* DamageSystem; // 0xf48(0x08)
	struct UWTLItemSystem* ItemSystem; // 0xf50(0x08)
	struct UWTLAchievementSystem* AchievementSystem; // 0xf58(0x08)
	struct UWTLEconomicsSystem* EconomicsSystem; // 0xf60(0x08)
	struct UWTLQuestSystem* QuestSystem; // 0xf68(0x08)
	struct UWTLReputationSystem* ReputationSystem; // 0xf70(0x08)
	struct UWTLRankSystem* RankSystem; // 0xf78(0x08)
	struct UWTLSecuritySystem* SecuritySystem; // 0xf80(0x08)
	struct UWTLStatisticsSystem* StatisticsSystem; // 0xf88(0x08)
	struct UWTLGeoSystem* GeoSystem; // 0xf90(0x08)
	struct UWTLCharacterEffectsSystem* CharacterEffectsSystem; // 0xf98(0x08)
	struct UWTLCustomizationSystem* CustomizationSystem; // 0xfa0(0x08)
	struct UWTLDatabaseAdapter* DatabaseAdapter; // 0xfa8(0x08)
	struct UWTLMailSystem* MailSystem; // 0xfb0(0x08)
	struct UWTLSocialSystem* SocialSystem; // 0xfb8(0x08)
	struct UWTLCommandSystem* CommandSystem; // 0xfc0(0x08)
	struct UWTLNvidiaHighlightsLibrary* HighlightsLibrary; // 0xfc8(0x08)
	struct UWTLScriptedEventsSystem* ScriptedEventsSystem; // 0xfd0(0x08)
	struct TMap<enum class EWTLSocialNetworkType, struct UWTLSocialNetworkAdapter*> SocialNetworkAdapters; // 0xfd8(0x50)
	struct FText DevelopmentStage; // 0x1028(0x18)
	struct TSoftClassPtr<UObject> LoadingScreenLocationWidgetClass; // 0x1040(0x28)
	struct TSoftClassPtr<UObject> LoadingScreenSimpleWidgetClass; // 0x1068(0x28)
	struct UCurveFloat* RainDensityScaleByRainAlpha; // 0x1090(0x08)
	struct UCurveFloat* RainDensityScaleByHeavyRainAlpha; // 0x1098(0x08)
	struct TSoftObjectPtr<UParticleSystem> RainParticleSystem; // 0x10a0(0x28)
	struct TSoftObjectPtr<UFMODEvent> RainAmbientSoundEvent; // 0x10c8(0x28)
	struct TSoftObjectPtr<UFMODEvent> SandStormAmbientSoundEvent; // 0x10f0(0x28)
	struct TSoftObjectPtr<UFMODEvent> WindAmbientSoundEvent; // 0x1118(0x28)
	struct TSoftClassPtr<UObject> SkyBlueprintClass; // 0x1140(0x28)
	struct TSoftClassPtr<UObject> LightingBoltBlueprintClass; // 0x1168(0x28)
	struct TSoftObjectPtr<UTexture2D> DefaultMarkerTexture; // 0x1190(0x28)
	struct TArray<struct FWTLMarkerInfo> Markers; // 0x11b8(0x10)
	char pad_11C8[0x20]; // 0x11c8(0x20)

	bool Tick(float DeltaTime); // Function WTL.WTLGameInstance.Tick // (Final|Native|Private) // @ game+0x17f6720
	void SyncAccountInfoTimer(); // Function WTL.WTLGameInstance.SyncAccountInfoTimer // (Final|Native|Private) // @ game+0x17f6c40
	void SetCanSendCode(); // Function WTL.WTLGameInstance.SetCanSendCode // (Final|Native|Private) // @ game+0x17f3f80
	void OnUpdateClanLeader(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnUpdateClanLeader // (Final|Native|Private|HasOutParms) // @ game+0x17f3fb0
	void OnUpdateClanDescription(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnUpdateClanDescription // (Final|Native|Private|HasOutParms) // @ game+0x17f4160
	void OnUpdateClan(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnUpdateClan // (Final|Native|Private|HasOutParms) // @ game+0x17f4b80
	void OnSyncAccountInfoResultEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnSyncAccountInfoResultEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f5240
	void OnRemoveClanSkill(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnRemoveClanSkill // (Final|Native|Private|HasOutParms) // @ game+0x17f4310
	void OnRemoveClanMemberRequestEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnRemoveClanMemberRequestEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f5900
	void OnRemoveClanMember(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnRemoveClanMember // (Final|Native|Private|HasOutParms) // @ game+0x17f4820
	void OnPurchaseStoreItemsResultEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnPurchaseStoreItemsResultEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f5750
	void OnNewClanMemberRequestEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnNewClanMemberRequestEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f5ab0
	void OnNewClanMember(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnNewClanMember // (Final|Native|Private|HasOutParms) // @ game+0x17f49d0
	void OnLoadTransitionMap(); // Function WTL.WTLGameInstance.OnLoadTransitionMap // (Final|Native|Private) // @ game+0x17f6800
	void OnInAppPaymentResultEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnInAppPaymentResultEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f53f0
	void OnGetSteamInventoryItemDefinitionsResponse(struct FWTLResponse& Response); // Function WTL.WTLGameInstance.OnGetSteamInventoryItemDefinitionsResponse // (Final|Native|Private|HasOutParms) // @ game+0x17f5d60
	void OnGetClanMemberRequestListResponse(struct FWTLResponse& Response); // Function WTL.WTLGameInstance.OnGetClanMemberRequestListResponse // (Final|Native|Private|HasOutParms) // @ game+0x17f5e60
	void OnGetClanListResponse(struct FWTLResponse& Response); // Function WTL.WTLGameInstance.OnGetClanListResponse // (Final|Native|Private|HasOutParms) // @ game+0x17f5c60
	void OnGetAccountAchievementsPercentageResponse(struct FWTLResponse& Response); // Function WTL.WTLGameInstance.OnGetAccountAchievementsPercentageResponse // (Final|Native|Private|HasOutParms) // @ game+0x17f5f60
	void OnEACServerMessageEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnEACServerMessageEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f6850
	void OnDisconnected(); // Function WTL.WTLGameInstance.OnDisconnected // (Final|Native|Private) // @ game+0x17f6bb0
	void OnDeleteClan(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnDeleteClan // (Final|Native|Private|HasOutParms) // @ game+0x17f4d30
	void OnConnected(); // Function WTL.WTLGameInstance.OnConnected // (Final|Native|Private) // @ game+0xe77850
	void OnCodeActivationResultEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnCodeActivationResultEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f5090
	void OnClanScoreChange(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnClanScoreChange // (Final|Native|Private|HasOutParms) // @ game+0x17f4670
	void OnCharacterMoveToLocationEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnCharacterMoveToLocationEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f6a00
	void OnAddClanSkill(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAddClanSkill // (Final|Native|Private|HasOutParms) // @ game+0x17f44c0
	void OnAddClan(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAddClan // (Final|Native|Private|HasOutParms) // @ game+0x17f4ee0
	void OnAccountStatisticsParameterUpdate(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAccountStatisticsParameterUpdate // (Final|Native|Private|HasOutParms) // @ game+0x17f63c0
	void OnAccountInventoryItems(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAccountInventoryItems // (Final|Native|Private|HasOutParms) // @ game+0x17f6060
	void OnAccountBalanceChangedEvent(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAccountBalanceChangedEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f55a0
	void OnAccountAchievementsTrigger(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAccountAchievementsTrigger // (Final|Native|Private|HasOutParms) // @ game+0x17f6210
	void OnAccountAchievementsAndStatsReceived(struct FWTLEvent& Event); // Function WTL.WTLGameInstance.OnAccountAchievementsAndStatsReceived // (Final|Native|Private|HasOutParms) // @ game+0x17f6570
};

// Class WTL.WTLGameMode
// Size: 0x3e8 (Inherited: 0x308)
struct AWTLGameMode : AGameMode {
	char pad_308[0xe0]; // 0x308(0xe0)

	void Server_MarkCharacterAsMovedThroughPortal(uint64_t CharacterID); // Function WTL.WTLGameMode.Server_MarkCharacterAsMovedThroughPortal // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x17f88f0
	void OnCharacterGotMoney(struct FWTLEvent& Event); // Function WTL.WTLGameMode.OnCharacterGotMoney // (Final|Native|Private|HasOutParms) // @ game+0x17de240
};

// Class WTL.WTLGameModeZone
// Size: 0x268 (Inherited: 0x258)
struct AWTLGameModeZone : AVolume {
	bool PVPEnabled; // 0x258(0x01)
	char pad_259[0x3]; // 0x259(0x03)
	int32_t RedirectSafeZoneID; // 0x25c(0x04)
	bool ZoneEnabled; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLGameModeZone.OnVolumeEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLGameModeZone.OnVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	bool IsZoneEnabled(); // Function WTL.WTLGameModeZone.IsZoneEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17f8d20
	void EnableZone(); // Function WTL.WTLGameModeZone.EnableZone // (Final|Native|Public|BlueprintCallable) // @ game+0x17f8bf0
	void DisableZone(); // Function WTL.WTLGameModeZone.DisableZone // (Final|Native|Public|BlueprintCallable) // @ game+0x17f8ac0
};

// Class WTL.WTLGameNetworkManager
// Size: 0x348 (Inherited: 0x2d0)
struct AWTLGameNetworkManager : AGameNetworkManager {
	char pad_2D0[0x78]; // 0x2d0(0x78)
};

// Class WTL.WTLGameSession
// Size: 0x238 (Inherited: 0x238)
struct AWTLGameSession : AGameSession {
};

// Class WTL.WTLGameState
// Size: 0x9d0 (Inherited: 0x290)
struct AWTLGameState : AGameState {
	char pad_290[0xe4]; // 0x290(0xe4)
	float m_WorldCurrentTime; // 0x374(0x04)
	float m_WorldTimeScale; // 0x378(0x04)
	float m_LastSyncServerWorldTime; // 0x37c(0x04)
	char pad_380[0x4]; // 0x380(0x04)
	uint16_t m_CreditsToMoneyRate; // 0x384(0x02)
	char pad_386[0xb2]; // 0x386(0xb2)
	struct TArray<struct FWTLMailPackageRecord> m_MailPackages; // 0x438(0x10)
	struct TArray<struct FWTLAccountInventoryItemList> m_AccountInventoryList; // 0x448(0x10)
	char pad_458[0x4f0]; // 0x458(0x4f0)
	uint16_t m_CurrentRadioTrack; // 0x948(0x02)
	char pad_94A[0xe]; // 0x94a(0x0e)
	struct FWTLServerEventInfo m_ServerEventInfo; // 0x958(0x40)
	char pad_998[0x8]; // 0x998(0x08)
	char m_ServerKeepAlive; // 0x9a0(0x01)
	char pad_9A1[0x2]; // 0x9a1(0x02)
	bool m_bIsReputationEnabled; // 0x9a3(0x01)
	char pad_9A4[0x14]; // 0x9a4(0x14)
	struct TArray<struct FWTLKillStats> KillsStatsInfo; // 0x9b8(0x10)
	int32_t MaxCharacterLevelForPVEMode; // 0x9c8(0x04)
	char pad_9CC[0x4]; // 0x9cc(0x04)

	void OnWorldConfigChanged(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnWorldConfigChanged // (Final|Native|Private|HasOutParms) // @ game+0x17f9750
	void OnUpdateGroup(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnUpdateGroup // (Final|Native|Private|HasOutParms) // @ game+0x17f9d90
	void OnUnmuteCharacter(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnUnmuteCharacter // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnSyncAccountInfoResult(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnSyncAccountInfoResult // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnServerEvent(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnServerEvent // (Final|Native|Private|HasOutParms) // @ game+0x17f9be0
	void OnRep_ServerKeepAlive(); // Function WTL.WTLGameState.OnRep_ServerKeepAlive // (Final|Native|Private) // @ game+0x17fa570
	void OnRep_ServerEventInfo(); // Function WTL.WTLGameState.OnRep_ServerEventInfo // (Final|Native|Private) // @ game+0x17fa3d0
	void OnRep_PlayersInfo(); // Function WTL.WTLGameState.OnRep_PlayersInfo // (Final|Native|Private) // @ game+0xe77850
	void OnRep_KillsStatsInfo(); // Function WTL.WTLGameState.OnRep_KillsStatsInfo // (Final|Native|Private) // @ game+0x17fa6f0
	void OnRep_CurrentRadioTrack(); // Function WTL.WTLGameState.OnRep_CurrentRadioTrack // (Final|Native|Public) // @ game+0xe77850
	void OnRemoveMailPackage(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnRemoveMailPackage // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnPutItemToAccountInventoryResult(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnPutItemToAccountInventoryResult // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnNewCharacterMailMessage(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnNewCharacterMailMessage // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnMuteCharacter(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnMuteCharacter // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnMasterServerConsoleCommand(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnMasterServerConsoleCommand // (Final|Native|Private|HasOutParms) // @ game+0x17f9900
	void OnInAppPaymentResult(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnInAppPaymentResult // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnGetItemFromAccountInventoryResult(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnGetItemFromAccountInventoryResult // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnDeleteGroup(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnDeleteGroup // (Final|Native|Private|HasOutParms) // @ game+0x17f9f40
	void OnAddMailPackage(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnAddMailPackage // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	void OnAddGroup(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnAddGroup // (Final|Native|Private|HasOutParms) // @ game+0x17fa220
	void OnAccountInventoryItems(struct FWTLEvent& Event); // Function WTL.WTLGameState.OnAccountInventoryItems // (Final|Native|Private|HasOutParms) // @ game+0x17de240
	struct TArray<struct AWTLCharacter*> GetPlayerArrayInRadius(struct FVector& Location, float Radius); // Function WTL.WTLGameState.GetPlayerArrayInRadius // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x17f93e0
	struct TArray<struct AWTLPlaceableStuff*> GetPlaceableStuffArray(); // Function WTL.WTLGameState.GetPlaceableStuffArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17f95a0
	struct TArray<struct AWTLMonsterPawn*> GetMonsterArrayInRadius(struct FVector& Location, float Radius); // Function WTL.WTLGameState.GetMonsterArrayInRadius // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x17f90c0
	struct TArray<struct AWTLMonsterPawn*> GetMonsterArray(); // Function WTL.WTLGameState.GetMonsterArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17f96c0
	struct TArray<struct AWTLCharacter*> GetCharacterArray(); // Function WTL.WTLGameState.GetCharacterArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17f9630
};

// Class WTL.WTLGameUserSettings
// Size: 0x160 (Inherited: 0x120)
struct UWTLGameUserSettings : UGameUserSettings {
	char pad_120[0x40]; // 0x120(0x40)
};

// Class WTL.WTLGameViewportClient
// Size: 0x380 (Inherited: 0x360)
struct UWTLGameViewportClient : UGameViewportClient {
	char pad_360[0x20]; // 0x360(0x20)
};

// Class WTL.WTLGasGrenadeLauncherProjectile
// Size: 0x440 (Inherited: 0x3e8)
struct AWTLGasGrenadeLauncherProjectile : AWTLGrenadeLauncherProjectile {
	char m_ParticleProgress; // 0x3e8(0x01)
	char m_CollisionProgress; // 0x3e9(0x01)
	bool m_bNeedDestroyParticles; // 0x3ea(0x01)
	char pad_3EB[0x11]; // 0x3eb(0x11)
	struct FVector m_ExplodeLocation; // 0x3fc(0x0c)
	char pad_408[0x8]; // 0x408(0x08)
	struct UStaticMeshComponent* Cylinder; // 0x410(0x08)
	float DamageValueToMonstersAndNPC; // 0x418(0x04)
	float MinDamageValueToMonstersAndNPC; // 0x41c(0x04)
	float MaxChemicalEffectValue; // 0x420(0x04)
	int32_t MinCharactersLevelToMakeDamage; // 0x424(0x04)
	float Distance; // 0x428(0x04)
	float TimeBetweenHits; // 0x42c(0x04)
	float TimeBetweenHitsToCharacter; // 0x430(0x04)
	float TimeToHideIdentify; // 0x434(0x04)
	float TimeToStopHideIdentify; // 0x438(0x04)
	float TimeToDestroyFX; // 0x43c(0x04)

	void OnRep_ParticleProgress(); // Function WTL.WTLGasGrenadeLauncherProjectile.OnRep_ParticleProgress // (Final|Native|Public) // @ game+0x17fb5d0
	void OnRep_ExplodeLocation(); // Function WTL.WTLGasGrenadeLauncherProjectile.OnRep_ExplodeLocation // (Final|Native|Public) // @ game+0x17fb550
	void OnRep_DestroyParticles(); // Function WTL.WTLGasGrenadeLauncherProjectile.OnRep_DestroyParticles // (Final|Native|Private) // @ game+0x17fb5f0
	void OnRep_CollisionProgress(); // Function WTL.WTLGasGrenadeLauncherProjectile.OnRep_CollisionProgress // (Final|Native|Public) // @ game+0x17fb5b0
	void OnComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLGasGrenadeLauncherProjectile.OnComponentHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x17fbcd0
	void EndOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLGasGrenadeLauncherProjectile.EndOverlap // (Final|Native|Private) // @ game+0x17fb6b0
	void BeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLGasGrenadeLauncherProjectile.BeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17fb920
};

// Class WTL.WTLMissileWeaponProjectile
// Size: 0x2e8 (Inherited: 0x220)
struct AWTLMissileWeaponProjectile : AWTLDynamicReplicatedActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct UStaticMeshComponent* MeshComp; // 0x228(0x08)
	struct UWTLProjectileMovementComponent* m_MovementComponent; // 0x230(0x08)
	struct TSoftObjectPtr<UFMODEvent> SurfaceHitEvent; // 0x238(0x28)
	struct FName SurfaceHitNoiseName; // 0x260(0x08)
	bool MagicValue; // 0x268(0x01)
	char pad_269[0x3]; // 0x269(0x03)
	float m_ReplicatedInitialSpeed; // 0x26c(0x04)
	struct FVector m_ThrowVector; // 0x270(0x0c)
	char pad_27C[0x48]; // 0x27c(0x48)
	float Damage; // 0x2c4(0x04)
	float MinDamage; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct TArray<enum class EObjectTypeQuery> DestructibleObjectTypes; // 0x2d0(0x10)
	float DestructibleImpulse; // 0x2e0(0x04)
	float DestructibleDamageMultiplier; // 0x2e4(0x04)

	void OnRep_ReplicatedInitialSpeed(); // Function WTL.WTLMissileWeaponProjectile.OnRep_ReplicatedInitialSpeed // (Final|Native|Private) // @ game+0x18551c0
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLMissileWeaponProjectile.OnHit // (Native|Public|HasOutParms|HasDefaults) // @ game+0x1854e90
};

// Class WTL.WTLGrenadeProjectile
// Size: 0x410 (Inherited: 0x2e8)
struct AWTLGrenadeProjectile : AWTLMissileWeaponProjectile {
	char pad_2E8[0x30]; // 0x2e8(0x30)
	struct AActor* ExplosionActor; // 0x318(0x08)
	struct TSoftClassPtr<UObject> ExplosionFX; // 0x320(0x28)
	struct TSoftClassPtr<UObject> WaterExplosionFX; // 0x348(0x28)
	struct TSoftClassPtr<UObject> WaterHit; // 0x370(0x28)
	int32_t MaxHitCount; // 0x398(0x04)
	bool CanBeExplodedInWater; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)
	float ExplosionDelayMin; // 0x3a0(0x04)
	float ExplosionDelayMax; // 0x3a4(0x04)
	float ExplosionRadius; // 0x3a8(0x04)
	bool ExplodesOnContact; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
	float EnergyShieldDamageMultiplier; // 0x3b0(0x04)
	float DamageToPlaceableStuff; // 0x3b4(0x04)
	int32_t ShrapnelCountMin; // 0x3b8(0x04)
	int32_t ShrapnelCountMax; // 0x3bc(0x04)
	float ShrapnelDamageMin; // 0x3c0(0x04)
	float ShrapnelDamageMax; // 0x3c4(0x04)
	float ShrapnelRadius; // 0x3c8(0x04)
	float ShrapnelRagdollImpulseMultiplier; // 0x3cc(0x04)
	bool ShrapnelUseReliableHitEvent; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	float DamageFalloff; // 0x3d4(0x04)
	bool TacticalGrenade; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float NewLifeSpan; // 0x3dc(0x04)
	char pad_3E0[0x30]; // 0x3e0(0x30)

	void Server_RequestExplode(struct FVector_NetQuantize ExplosionPosition); // Function WTL.WTLGrenadeProjectile.Server_RequestExplode // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1801db0
	void NetMulticast_OnExplosion(struct FVector_NetQuantize ExplosionPosition, float ExplosionDamage, struct FRotator Rotator); // Function WTL.WTLGrenadeProjectile.NetMulticast_OnExplosion // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x1802590
	struct TArray<struct AWTLCharacter*> GetUnprotectedCharacters(); // Function WTL.WTLGrenadeProjectile.GetUnprotectedCharacters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18024d0
	struct TArray<struct AActor*> GetProtectedPlaceableStuffs(); // Function WTL.WTLGrenadeProjectile.GetProtectedPlaceableStuffs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1802350
	struct TArray<struct AWTLCharacter*> GetProtectedCharacters(); // Function WTL.WTLGrenadeProjectile.GetProtectedCharacters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1802410
	void BPOnExplode(); // Function WTL.WTLGrenadeProjectile.BPOnExplode // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyShrapnelDamageToMonster(struct AWTLMonsterPawn* Monster, float ActualDamage); // Function WTL.WTLGrenadeProjectile.BPOnApplyShrapnelDamageToMonster // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyShrapnelDamageToEnemyNPC(struct AWTLEnemyNPC* EnemyNPC, float ActualDamage); // Function WTL.WTLGrenadeProjectile.BPOnApplyShrapnelDamageToEnemyNPC // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyShrapnelDamageToCharacter(struct AWTLCharacter* Character, float ActualDamage); // Function WTL.WTLGrenadeProjectile.BPOnApplyShrapnelDamageToCharacter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLGasGrenadeProjectile
// Size: 0x470 (Inherited: 0x410)
struct AWTLGasGrenadeProjectile : AWTLGrenadeProjectile {
	char m_ParticleProgress; // 0x410(0x01)
	char m_CollisionProgress; // 0x411(0x01)
	bool m_bNeedDestroyParticles; // 0x412(0x01)
	char pad_413[0x19]; // 0x413(0x19)
	struct FVector m_ExplodeLocation; // 0x42c(0x0c)
	char pad_438[0x8]; // 0x438(0x08)
	struct UStaticMeshComponent* Cylinder; // 0x440(0x08)
	float DamageValueToMonstersAndNPC; // 0x448(0x04)
	int32_t MinCharactersLevelToMakeDamage; // 0x44c(0x04)
	float MaxChemicalEffectValue; // 0x450(0x04)
	float MinDamageValueToMonstersAndNPC; // 0x454(0x04)
	float Distance; // 0x458(0x04)
	float TimeBetweenHits; // 0x45c(0x04)
	float TimeBetweenHitsToCharacter; // 0x460(0x04)
	float TimeToHideIdentify; // 0x464(0x04)
	float TimeToStopHideIdentify; // 0x468(0x04)
	float TimeToDestroyFX; // 0x46c(0x04)

	void OnRep_ParticleProgress(); // Function WTL.WTLGasGrenadeProjectile.OnRep_ParticleProgress // (Final|Native|Public) // @ game+0x17fc550
	void OnRep_ExplodeLocation(); // Function WTL.WTLGasGrenadeProjectile.OnRep_ExplodeLocation // (Final|Native|Public) // @ game+0x17fc4d0
	void OnRep_DestroyParticles(); // Function WTL.WTLGasGrenadeProjectile.OnRep_DestroyParticles // (Final|Native|Private) // @ game+0x17fc570
	void OnRep_CollisionProgress(); // Function WTL.WTLGasGrenadeProjectile.OnRep_CollisionProgress // (Final|Native|Public) // @ game+0x17fc530
	void EndOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLGasGrenadeProjectile.EndOverlap // (Final|Native|Private) // @ game+0x17fc630
	void BeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLGasGrenadeProjectile.BeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17fc8a0
};

// Class WTL.WTLGeoSystem
// Size: 0x50 (Inherited: 0x28)
struct UWTLGeoSystem : UObject {
	struct UWTLGameInstance* m_GameInstance; // 0x28(0x08)
	struct UWorld* m_World; // 0x30(0x08)
	struct AWTLLevelScriptActor* m_LevelScriptActor; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)
};

// Class WTL.WTLGlobalLevelObject
// Size: 0x250 (Inherited: 0x220)
struct AWTLGlobalLevelObject : AActor {
	int32_t ID; // 0x220(0x04)
	enum class EWTLGlobalLevelObjectType Type; // 0x224(0x01)
	char pad_225[0x3]; // 0x225(0x03)
	int32_t State; // 0x228(0x04)
	char pad_22C[0x24]; // 0x22c(0x24)

	void SetStateInfoString(struct FString ParamName, struct FString Value); // Function WTL.WTLGlobalLevelObject.SetStateInfoString // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd280
	void SetStateInfoInt32(struct FString ParamName, int32_t Value); // Function WTL.WTLGlobalLevelObject.SetStateInfoInt32 // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd5b0
	void SetStateInfoFloat(struct FString ParamName, float Value); // Function WTL.WTLGlobalLevelObject.SetStateInfoFloat // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd420
	void SetStateInfoBool(struct FString ParamName, bool Value); // Function WTL.WTLGlobalLevelObject.SetStateInfoBool // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd740
	void OnStateRestored(); // Function WTL.WTLGlobalLevelObject.OnStateRestored // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd160
	void OnRep_State(int32_t OldState); // Function WTL.WTLGlobalLevelObject.OnRep_State // (Native|Protected) // @ game+0x17d9640
	struct FString GetStateInfoString(struct FString ParamName, struct FString DefaultValue); // Function WTL.WTLGlobalLevelObject.GetStateInfoString // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17fd8d0
	int64_t GetStateInfoInt64(struct FString ParamName, int64_t DefaultValue); // Function WTL.WTLGlobalLevelObject.GetStateInfoInt64 // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17fde90
	int32_t GetStateInfoInt32(struct FString ParamName, int32_t DefaultValue); // Function WTL.WTLGlobalLevelObject.GetStateInfoInt32 // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17fe0f0
	float GetStateInfoFloat(struct FString ParamName, float DefaultValue); // Function WTL.WTLGlobalLevelObject.GetStateInfoFloat // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17fdc10
	bool GetStateInfoBool(struct FString ParamName, bool DefaultValue); // Function WTL.WTLGlobalLevelObject.GetStateInfoBool // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17fe340
	void ForceSaveState(); // Function WTL.WTLGlobalLevelObject.ForceSaveState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd260
	void ForceLoadState(); // Function WTL.WTLGlobalLevelObject.ForceLoadState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17fd1c0
	void BPPrepareStateInfo(); // Function WTL.WTLGlobalLevelObject.BPPrepareStateInfo // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnStateRestored(); // Function WTL.WTLGlobalLevelObject.BPOnStateRestored // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnResetData(); // Function WTL.WTLGlobalLevelObject.BPOnResetData // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLHealingDrone
// Size: 0x508 (Inherited: 0x4d8)
struct AWTLHealingDrone : AWTLDrone {
	char pad_4D8[0x4]; // 0x4d8(0x04)
	float HealingPercenPerSec; // 0x4dc(0x04)
	struct UParticleSystemComponent* HealingRayLeft; // 0x4e0(0x08)
	struct UParticleSystemComponent* HealingRayRight; // 0x4e8(0x08)
	struct TArray<struct FName> TargetBonesList; // 0x4f0(0x10)
	char pad_500[0x8]; // 0x500(0x08)
};

// Class WTL.WTLHealingItem
// Size: 0x588 (Inherited: 0x458)
struct AWTLHealingItem : AWTLStuff {
	struct UParticleSystemComponent* HealingRay; // 0x458(0x08)
	struct UParticleSystemComponent* CharacterHealingEffect; // 0x460(0x08)
	bool HighlightCharacter; // 0x468(0x01)
	char pad_469[0x3]; // 0x469(0x03)
	int32_t StencilValue; // 0x46c(0x04)
	enum class ETraceTypeQuery InteractiveTrace; // 0x470(0x01)
	char pad_471[0x53]; // 0x471(0x53)
	float Distance; // 0x4c4(0x04)
	float WorkDistance; // 0x4c8(0x04)
	float SphereRadius; // 0x4cc(0x04)
	float PercentPerUse; // 0x4d0(0x04)
	float PercentPerUseMin; // 0x4d4(0x04)
	float HealthPerUse; // 0x4d8(0x04)
	float PercentPerUseToOwner; // 0x4dc(0x04)
	float MaxAngleBetweenCharacters; // 0x4e0(0x04)
	float MinHealthPercenToGetExp; // 0x4e4(0x04)
	float MinDamageValue; // 0x4e8(0x04)
	float MaxDamageValue; // 0x4ec(0x04)
	float EnergyPerUse; // 0x4f0(0x04)
	bool HealOwner; // 0x4f4(0x01)
	char pad_4F5[0x3]; // 0x4f5(0x03)
	float StimulatorValue; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct TArray<enum class EWTLCharacterEffectType> NegativeEffects; // 0x500(0x10)
	float ReputationDelta; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct TSoftClassPtr<UObject> HealingEffect; // 0x518(0x28)
	struct TSoftClassPtr<UObject> HealingLight; // 0x540(0x28)
	enum class ETraceTypeQuery CollisionTraceQuery; // 0x568(0x01)
	char pad_569[0x3]; // 0x569(0x03)
	float ReplicatedEnergyValue; // 0x56c(0x04)
	struct AWTLCharacter* CharacterInFocus; // 0x570(0x08)
	struct AWTLMonsterPawn* MonsterInFocus; // 0x578(0x08)
	bool IsCharged; // 0x580(0x01)
	bool bSpawnEffects; // 0x581(0x01)
	bool bDeactivateAllEffects; // 0x582(0x01)
	char pad_583[0x5]; // 0x583(0x05)

	void Server_StopUse(); // Function WTL.WTLHealingItem.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db590
	void Server_StartUse(); // Function WTL.WTLHealingItem.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db5c0
	void Server_SetCharacterInFocus(struct AWTLCharacter* NewCharacter, bool bAddNewHealer); // Function WTL.WTLHealingItem.Server_SetCharacterInFocus // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1803270
	void Server_MakeDamageToMonster(struct AWTLMonsterPawn* Monster); // Function WTL.WTLHealingItem.Server_MakeDamageToMonster // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1802dc0
	void Server_HealingProcess(struct AWTLCharacter* NewCharacter, bool bAddNewHealer); // Function WTL.WTLHealingItem.Server_HealingProcess // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1802e90
	void OnRep_SpawnEffectsNearCharacter(); // Function WTL.WTLHealingItem.OnRep_SpawnEffectsNearCharacter // (Final|Native|Public) // @ game+0x1802ae0
	void OnRep_MonsterInFocus(); // Function WTL.WTLHealingItem.OnRep_MonsterInFocus // (Final|Native|Public) // @ game+0x1802c70
	void OnRep_IsCharged(); // Function WTL.WTLHealingItem.OnRep_IsCharged // (Final|Native|Public) // @ game+0x1802c10
	void OnRep_EnergyValue(); // Function WTL.WTLHealingItem.OnRep_EnergyValue // (Final|Native|Public) // @ game+0x1802bc0
	void OnRep_DeactivateAllEffects(); // Function WTL.WTLHealingItem.OnRep_DeactivateAllEffects // (Final|Native|Public) // @ game+0x1802ac0
	void OnRep_CharacterInFocus(); // Function WTL.WTLHealingItem.OnRep_CharacterInFocus // (Final|Native|Public) // @ game+0x1802da0
	void NetMulticast_OnUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLHealingItem.NetMulticast_OnUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1802fe0
	void Client_SetEnergyOnMaterial(); // Function WTL.WTLHealingItem.Client_SetEnergyOnMaterial // (Final|Net|Native|Event|Private|NetClient) // @ game+0x18030b0
	void Client_EffectsUnderWater(); // Function WTL.WTLHealingItem.Client_EffectsUnderWater // (Net|Native|Event|Public|NetClient) // @ game+0x1802b10
	void Client_Charge(float Value); // Function WTL.WTLHealingItem.Client_Charge // (Final|Net|Native|Event|Private|NetClient) // @ game+0x1803170
	void BPSetLightOnMuzzle(bool Value); // Function WTL.WTLHealingItem.BPSetLightOnMuzzle // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPSetEnergyOnMaterial(float Value); // Function WTL.WTLHealingItem.BPSetEnergyOnMaterial // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPSetBeamsEndPoint(struct FVector EndPoint); // Function WTL.WTLHealingItem.BPSetBeamsEndPoint // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void BPEffectsUnderWater(); // Function WTL.WTLHealingItem.BPEffectsUnderWater // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDeactivateEffects(); // Function WTL.WTLHealingItem.BPDeactivateEffects // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPChargeItem(float Value); // Function WTL.WTLHealingItem.BPChargeItem // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLHealthVolume
// Size: 0x260 (Inherited: 0x258)
struct AWTLHealthVolume : AVolume {
	bool RecoverHealthAtBeginOverlap; // 0x258(0x01)
	bool EndlessHealth; // 0x259(0x01)
	char pad_25A[0x6]; // 0x25a(0x06)

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLHealthVolume.OnVolumeEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLHealthVolume.OnVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
};

// Class WTL.WTLHUDBase
// Size: 0x4f8 (Inherited: 0x310)
struct AWTLHUDBase : AHUD {
	struct UWTLCommonMessageDialog* m_MessageDialogWidget; // 0x310(0x08)
	struct UWTLCommonCountdownWindow* m_CountdownWindowWidget; // 0x318(0x08)
	struct UWTLCommonStore* m_StoreWidget; // 0x320(0x08)
	struct UWTLCommonMicrotransactionWindow* m_MicrotransactionWindowWidget; // 0x328(0x08)
	struct UWTLCommonTutorialWindow* m_TutorialWindowWidget; // 0x330(0x08)
	struct UWTLCommonItemPreviewWindow* m_ItemPreviewWindowWidget; // 0x338(0x08)
	struct UWTLCommonCharacterPreviewWindow* m_CharacterPreviewWindowWidget; // 0x340(0x08)
	struct UWTLCommonPremiumBonusesWindow* m_PremiumBonusesWindowWidget; // 0x348(0x08)
	struct UWTLCommonItemInformationWindow* m_ItemInformationWindowWidget; // 0x350(0x08)
	char pad_358[0x10]; // 0x358(0x10)
	struct TSoftClassPtr<UObject> MessageDialogWidgetClass; // 0x368(0x28)
	struct TSoftClassPtr<UObject> ConfirmationDialogWidgetClass; // 0x390(0x28)
	struct TSoftClassPtr<UObject> CountdownWindowWidgetClass; // 0x3b8(0x28)
	struct TSoftClassPtr<UObject> StoreWidgetClass; // 0x3e0(0x28)
	struct TSoftClassPtr<UObject> MicrotransactionWindowWidgetClass; // 0x408(0x28)
	struct TSoftClassPtr<UObject> CommonTutorialWindowWidgetClass; // 0x430(0x28)
	struct TSoftClassPtr<UObject> CommonItemPreviewWindowWidgetClass; // 0x458(0x28)
	struct TSoftClassPtr<UObject> CommonCharacterPreviewWindowWidgetClass; // 0x480(0x28)
	struct TSoftClassPtr<UObject> CommonPremiumBonusesWindowWidgetClass; // 0x4a8(0x28)
	struct TSoftClassPtr<UObject> CommonItemInformationWindowWidgetClass; // 0x4d0(0x28)
};

// Class WTL.WTLHUD
// Size: 0x17f0 (Inherited: 0x4f8)
struct AWTLHUD : AWTLHUDBase {
	struct UWTLHUDLayer* m_InteractiveWidgetMainLayer; // 0x4f8(0x08)
	struct UWTLHUDDamagePointer* m_DamagePointerWidget; // 0x500(0x08)
	struct UWTLHUDPlayerStatus* m_PlayerStatusWidget; // 0x508(0x08)
	struct UWTLHUDFastAccessSlots* m_FastAccessSlotsWidget; // 0x510(0x08)
	struct UWTLHUDWeaponCountdown* m_WeaponCountdownWidget; // 0x518(0x08)
	struct UWTLHUDWeaponInfo* m_WeaponInfoWidget; // 0x520(0x08)
	struct UWTLHUDMinimap* m_MinimapWidget; // 0x528(0x08)
	struct UWTLHUDCrosshair* m_CrosshairWidget; // 0x530(0x08)
	struct UWTLHUDInGameMenu* m_InGameMenuWidget; // 0x538(0x08)
	struct UWTLHUDObjectInfo* m_ObjectInfoWidget; // 0x540(0x08)
	struct UWTLHUDTextChatArea* m_TextChatAreaWidget; // 0x548(0x08)
	struct UWTLHUDEventNotificator* m_EventNotificatorWidget; // 0x550(0x08)
	struct UWTLHUDLevelBar* m_LevelBarWidget; // 0x558(0x08)
	struct UWTLHUDFPSCounter* m_FPSCounterWidget; // 0x560(0x08)
	struct UWTLHUDInteractiveSubstrate* m_InteractiveSubstrateWidget; // 0x568(0x08)
	struct UWTLHUDPlayerInventory* m_PlayerInventoryWidget; // 0x570(0x08)
	struct UWTLHUDContentInventory* m_ContentInventoryWidget; // 0x578(0x08)
	struct UWTLHUDTrade* m_TradeWidget; // 0x580(0x08)
	struct UWTLHUDRepair* m_RepairWidget; // 0x588(0x08)
	struct UWTLHUDExtractor* m_ExtractorWidget; // 0x590(0x08)
	struct UWTLHUDNPCDialogWindow* m_NPCDialogWindowWidget; // 0x598(0x08)
	struct UWTLHUDItemSplitWindow* m_ItemSplitWindowWidget; // 0x5a0(0x08)
	struct UWTLHUDItemSplitBuyWindow* m_ItemSplitBuyWindowWidget; // 0x5a8(0x08)
	struct UWTLHUDItemViewWindow* m_ItemViewWindowWidget; // 0x5b0(0x08)
	struct UWTLHUDItemReadWindow* m_ItemReadWindowWidget; // 0x5b8(0x08)
	struct UWTLHUDGameVersionInfo* m_GameVersionInfoWidget; // 0x5c0(0x08)
	struct UWTLHUDActiveQuestInfo* m_ActiveQuestInfoWidget; // 0x5c8(0x08)
	struct UWTLHUDWarningTitle* m_WarningTitleWidget; // 0x5d0(0x08)
	struct UWTLHUDCharacterInfoWindow* m_CharacterInfoWindowWidget; // 0x5d8(0x08)
	struct UWTLCommonActionWaiting* m_ActionWaitingWidget; // 0x5e0(0x08)
	struct UWTLCommonActionWaiting* m_ActionWaitingWidgetFullscreen; // 0x5e8(0x08)
	struct UWTLHUDItemsCustomization* m_ItemsCustomizationWidget; // 0x5f0(0x08)
	struct UWTLHUDInformationDialogWindow* m_InformationDialogWindowWidget; // 0x5f8(0x08)
	struct UWTLHUDServerEventInfo* m_ServerEventInfoWidget; // 0x600(0x08)
	struct UWTLHUDActionTimer* m_ActionTimerWidget; // 0x608(0x08)
	struct UWTLHUDMoneyTransferWindow* m_MoneyTransferWindowWidget; // 0x610(0x08)
	struct UWTLHUDCraft* m_CraftWidget; // 0x618(0x08)
	struct UWTLHUDCommissionAddUpdateWindow* m_CommissionAddUpdateWindowWidget; // 0x620(0x08)
	struct UWTLHUDItemPlacementHint* m_ItemPlacementHintWidget; // 0x628(0x08)
	struct UWTLHUDObjectCraft* m_ObjectCraftWidget; // 0x630(0x08)
	struct UWTLHUDRobotsCraft* m_RobotsCraftWidget; // 0x638(0x08)
	struct UWTLHUDClanInfoWindow* m_ClanInfoWindowWidget; // 0x640(0x08)
	struct UWTLHUDClanStorage* m_ClanStorageWidget; // 0x648(0x08)
	struct UWTLHUDCommentaryWindow* m_CommentaryWindowWidget; // 0x650(0x08)
	struct UWTLHUDClanStoragePolicyWindow* m_ClanStoragePolicyWindowWidget; // 0x658(0x08)
	struct UWTLHUDClanStorageTabImageSelectWindow* m_ClanStorageTabImageSelectWindowWidget; // 0x660(0x08)
	struct UWTLHUDBarter* m_BarterWidget; // 0x668(0x08)
	struct UWTLHUDLoader* m_LoaderWidget; // 0x670(0x08)
	struct UWTLHUDSteamInventory* m_SteamInventoryWidget; // 0x678(0x08)
	struct UWTLHUDRadialMenu* m_RadialMenuWidget; // 0x680(0x08)
	struct UWTLHUDFeedbackWindow* m_FeedbackWindowWidget; // 0x688(0x08)
	struct UWTLHUDBulletinBoardWindow* m_BulletinBoardWindowWidget; // 0x690(0x08)
	struct UWTLHUDItemsModification* m_ItemsModificationWidget; // 0x698(0x08)
	struct UWTLHUDBadConnection* m_BadConnectionWidget; // 0x6a0(0x08)
	struct UUserWidget* m_QTEWidget; // 0x6a8(0x08)
	struct UWTLHUDMailBox* m_MailBoxWidget; // 0x6b0(0x08)
	struct UWTLHUDArenaState* m_ArenaStateWidget; // 0x6b8(0x08)
	struct UWTLHUDArenaStateLeaderboardWindow* m_ArenaStateLeaderboardWindowWidget; // 0x6c0(0x08)
	struct UWTLHUDEmotionStateExitHint* m_EmotionStateExitHintWidget; // 0x6c8(0x08)
	struct UWTLHUDThrowingStateExitHint* m_ThrowingStateExitHintWidget; // 0x6d0(0x08)
	struct UWTLHUDLevelUp* m_LevelUpWidget; // 0x6d8(0x08)
	struct UWTLHUDEventPointInfo* m_EventPointInfoWidget; // 0x6e0(0x08)
	struct UWTLHUDArenaRewardWindow* m_ArenaRewardWindowWidget; // 0x6e8(0x08)
	struct UWTLHUDChangeClassWindow* m_ChangeClassWindowWidget; // 0x6f0(0x08)
	struct UWTLHUDSwitchInfoWidgetsHint* m_SwitchInfoWidgetsHintWidget; // 0x6f8(0x08)
	struct UWTLHUDSteamInventoryNewItemsWindow* m_SteamInventoryNewItemsWindowWidget; // 0x700(0x08)
	struct UWTLHUDClanStorageTabBuyWindow* m_ClanStorageTabBuyWindowWidget; // 0x708(0x08)
	struct UWTLHUDEventMessageWindow* m_EventMessageWindowWidget; // 0x710(0x08)
	struct UWTLHUDSlotMachinePayTableWindow* m_SlotMachinePayTableWindowWidget; // 0x718(0x08)
	struct UWTLHUDSlotMachineRewardWindow* m_SlotMachineRewardWindowWidget; // 0x720(0x08)
	struct UWTLHUDAccountInventory* m_AccountInventoryWidget; // 0x728(0x08)
	struct UWTLHUDAchievementUnlocked* m_AchievementUnlockedWidget; // 0x730(0x08)
	struct UWTLHUDJunkMachine* m_JunkMachineWidget; // 0x738(0x08)
	struct UWTLHUDObstacleCourseHelpWindow* m_ObstacleCourseHelpWindowWidget; // 0x740(0x08)
	struct UWTLHUDIndicators* m_IndicatorsWidget; // 0x748(0x08)
	struct UWTLHUDQuestInformationWindow* m_QuestInformationWindowWidget; // 0x750(0x08)
	struct UWTLHUDQuestDependenciesWindow* m_QuestDependenciesWindowWidget; // 0x758(0x08)
	struct UWTLHUDTeleportationDeviceWindow* m_TeleportationDeviceWindowWidget; // 0x760(0x08)
	struct UWTLHUDVehicleExitHint* m_VehicleExitHintWidget; // 0x768(0x08)
	struct UWTLHUDFinishFishingHint* m_FinishFishingHintWidget; // 0x770(0x08)
	struct UWTLHUDGroupInfo* m_GroupInfoWidget; // 0x778(0x08)
	struct UWTLHUDPlayersTableWindow* m_PlayersTableWindowWidget; // 0x780(0x08)
	struct UWTLHUDBreakWeaponItem* m_BreakWeaponItemWidget; // 0x788(0x08)
	struct UWTLHUDWeaponPartsExchange* m_WeaponPartsExchangeWidget; // 0x790(0x08)
	struct UWTLHUDGodConsole* m_GodConsoleWidget; // 0x798(0x08)
	struct UWTLHUDInventory* m_InventoryWidget; // 0x7a0(0x08)
	struct UWTLHUDSpectatorModeExitHint* m_SpectatorModeExitHintWidget; // 0x7a8(0x08)
	struct UWTLHUDMonsterState* m_MonsterStateWidget; // 0x7b0(0x08)
	struct UWTLHUDMonsterAbilities* m_MonsterAbilitiesWidget; // 0x7b8(0x08)
	char pad_7C0[0x40]; // 0x7c0(0x40)
	struct UWTLPDAMain* m_PDAWidget; // 0x800(0x08)
	struct UWTLHUDRequestWindow* m_RequestWindowWidget; // 0x808(0x08)
	char pad_810[0x8]; // 0x810(0x08)
	struct UWTLHUDInteractiveWidget* m_CurrentInteractiveWidget; // 0x818(0x08)
	char pad_820[0x10]; // 0x820(0x10)
	struct TArray<struct UWTLHUDWidgetBase*> m_HiddenHUDVisibleWidget; // 0x830(0x10)
	struct TArray<struct UWTLHUDWidgetBase*> m_PreviousWidgetExceptions; // 0x840(0x10)
	char pad_850[0x28]; // 0x850(0x28)
	struct TArray<struct UWTLHUDInfoWidget*> m_InfoWidgets; // 0x878(0x10)
	struct UWTLHUDInfoWidget* m_CurrentInfoWidget; // 0x888(0x08)
	char pad_890[0x8]; // 0x890(0x08)
	struct FMulticastInlineDelegate OnToggleHUDVisibility; // 0x898(0x10)
	struct FMulticastInlineDelegate OnToggleFullScreenWidgetVisibility; // 0x8a8(0x10)
	bool bIsPermissionToShowHUD; // 0x8b8(0x01)
	char pad_8B9[0x7]; // 0x8b9(0x07)
	struct TSoftClassPtr<UObject> LayerClass; // 0x8c0(0x28)
	struct TSoftClassPtr<UObject> DamagePointerWidgetClass; // 0x8e8(0x28)
	struct TSoftClassPtr<UObject> PlayerStatusWidgetClass; // 0x910(0x28)
	struct TSoftClassPtr<UObject> FastAccessSlotsWidgetClass; // 0x938(0x28)
	struct TSoftClassPtr<UObject> WeaponCountdownWidgetClass; // 0x960(0x28)
	struct TSoftClassPtr<UObject> WeaponInfoWidgetClass; // 0x988(0x28)
	struct TSoftClassPtr<UObject> MinimapWidgetClass; // 0x9b0(0x28)
	struct TSoftClassPtr<UObject> CrosshairWidgetClass; // 0x9d8(0x28)
	struct TSoftClassPtr<UObject> InGameMenuWidgetClass; // 0xa00(0x28)
	struct TSoftClassPtr<UObject> ObjectInfoWidgetClass; // 0xa28(0x28)
	struct TSoftClassPtr<UObject> TextChatAreaWidgetClass; // 0xa50(0x28)
	struct TSoftClassPtr<UObject> EventNotificatorWidgetClass; // 0xa78(0x28)
	struct TSoftClassPtr<UObject> LevelBarWidgetClass; // 0xaa0(0x28)
	struct TSoftClassPtr<UObject> FPSCounterWidgetClass; // 0xac8(0x28)
	struct TSoftClassPtr<UObject> InteractiveSubstrateWidgetClass; // 0xaf0(0x28)
	struct TSoftClassPtr<UObject> PlayerInventoryWidgetClass; // 0xb18(0x28)
	struct TSoftClassPtr<UObject> ContentInventoryWidgetClass; // 0xb40(0x28)
	struct TSoftClassPtr<UObject> TradeWidgetClass; // 0xb68(0x28)
	struct TSoftClassPtr<UObject> RepairWidgetClass; // 0xb90(0x28)
	struct TSoftClassPtr<UObject> ExtractorWidgetClass; // 0xbb8(0x28)
	struct TSoftClassPtr<UObject> PDAWidgetClass; // 0xbe0(0x28)
	struct TSoftClassPtr<UObject> StoreMessageDialogWidgetClass; // 0xc08(0x28)
	struct TSoftClassPtr<UObject> NPCDialogWindowWidgetClass; // 0xc30(0x28)
	struct TSoftClassPtr<UObject> ItemSplitWindowWidgetClass; // 0xc58(0x28)
	struct TSoftClassPtr<UObject> ItemSplitBuyWindowWidgetClass; // 0xc80(0x28)
	struct TSoftClassPtr<UObject> HUDItemInformationWindowWidgetClass; // 0xca8(0x28)
	struct TSoftClassPtr<UObject> HUDItemPreviewWindowWidgetClass; // 0xcd0(0x28)
	struct TSoftClassPtr<UObject> ItemViewWindowWidgetClass; // 0xcf8(0x28)
	struct TSoftClassPtr<UObject> ItemReadWindowWidgetClass; // 0xd20(0x28)
	struct TSoftClassPtr<UObject> GameVersionInfoWidgetClass; // 0xd48(0x28)
	struct TSoftClassPtr<UObject> ActiveQuestInfoWidgetClass; // 0xd70(0x28)
	struct TSoftClassPtr<UObject> WarningTitleWidgetClass; // 0xd98(0x28)
	struct TSoftClassPtr<UObject> CharacterInfoWindowWidgetClass; // 0xdc0(0x28)
	struct TSoftClassPtr<UObject> ActionWaitingWidgetClass; // 0xde8(0x28)
	struct TSoftClassPtr<UObject> StoreActionWaitingWidgetClass; // 0xe10(0x28)
	struct TSoftClassPtr<UObject> ItemsCustomizationWidgetClass; // 0xe38(0x28)
	struct TSoftClassPtr<UObject> InformationDialogWindowWidgetClass; // 0xe60(0x28)
	struct TSoftClassPtr<UObject> ServerEventInfoWidgetClass; // 0xe88(0x28)
	struct TSoftClassPtr<UObject> ActionTimerWidgetClass; // 0xeb0(0x28)
	struct TSoftClassPtr<UObject> MoneyTransferWindowWidgetClass; // 0xed8(0x28)
	struct TSoftClassPtr<UObject> CraftWidgetClass; // 0xf00(0x28)
	struct TSoftClassPtr<UObject> CommissionAddUpdateWindowWidgetClass; // 0xf28(0x28)
	struct TSoftClassPtr<UObject> ItemPlacementItemWidgetClass; // 0xf50(0x28)
	struct TSoftClassPtr<UObject> ObjectCraftWidgetClass; // 0xf78(0x28)
	struct TSoftClassPtr<UObject> RobotsCraftWidgetClass; // 0xfa0(0x28)
	struct TSoftClassPtr<UObject> ClanInfoWindowWidgetClass; // 0xfc8(0x28)
	struct TSoftClassPtr<UObject> ClanStorageWidgetClass; // 0xff0(0x28)
	struct TSoftClassPtr<UObject> CommentaryWindowWidgetClass; // 0x1018(0x28)
	struct TSoftClassPtr<UObject> ClanStoragePolicyWindowWidgetClass; // 0x1040(0x28)
	struct TSoftClassPtr<UObject> RequestWindowWidgetClass; // 0x1068(0x28)
	struct TSoftClassPtr<UObject> ClanStorageTabImageSelectWindowWidgetClass; // 0x1090(0x28)
	struct TSoftClassPtr<UObject> BarterWidgetClass; // 0x10b8(0x28)
	struct TSoftClassPtr<UObject> LoaderWidgetClass; // 0x10e0(0x28)
	struct TSoftClassPtr<UObject> SteamInventoryWidgetClass; // 0x1108(0x28)
	struct TSoftClassPtr<UObject> RadialMenuWidgetClass; // 0x1130(0x28)
	struct TSoftClassPtr<UObject> FeedbackWindowWidgetClass; // 0x1158(0x28)
	struct TSoftClassPtr<UObject> BulletinBoardWindowWidgetClass; // 0x1180(0x28)
	struct TSoftClassPtr<UObject> ItemsModificationWidgetClass; // 0x11a8(0x28)
	struct TSoftClassPtr<UObject> BadConnectionWidgetClass; // 0x11d0(0x28)
	struct TSoftClassPtr<UObject> QTEPanelWidgetClass; // 0x11f8(0x28)
	struct TSoftClassPtr<UObject> QTEFishingWidgetClass; // 0x1220(0x28)
	struct TSoftClassPtr<UObject> HUDTutorialWindowWidgetClass; // 0x1248(0x28)
	struct TSoftClassPtr<UObject> MailBoxWidgetClass; // 0x1270(0x28)
	struct TSoftClassPtr<UObject> ArenaStateWidgetClass; // 0x1298(0x28)
	struct TSoftClassPtr<UObject> ArenaStateLeaderboardWindowWidgetClass; // 0x12c0(0x28)
	struct TSoftClassPtr<UObject> EmotionStateExitHintWidgetClass; // 0x12e8(0x28)
	struct TSoftClassPtr<UObject> ThrowingStateExitHintWidgetClass; // 0x1310(0x28)
	struct TSoftClassPtr<UObject> LevelUpWidgetClass; // 0x1338(0x28)
	struct TSoftClassPtr<UObject> InventoryWidgetClass; // 0x1360(0x28)
	struct TSoftClassPtr<UObject> EventPointInfoWidgetClass; // 0x1388(0x28)
	struct TSoftClassPtr<UObject> ArenaRewardWindowWidgetClass; // 0x13b0(0x28)
	struct TSoftClassPtr<UObject> ChangeClassWindowWidgetClass; // 0x13d8(0x28)
	struct TSoftClassPtr<UObject> HUDCharacterPreviewWindowWidgetClass; // 0x1400(0x28)
	struct TSoftClassPtr<UObject> SwitchInfoWidgetsHintWidgetClass; // 0x1428(0x28)
	struct TSoftClassPtr<UObject> SteamInventoryNewItemsWindowWidgetClass; // 0x1450(0x28)
	struct TSoftClassPtr<UObject> ClanStorageTabBuyWindowWidgetClass; // 0x1478(0x28)
	struct TSoftClassPtr<UObject> EventMessageWindowWidgetClass; // 0x14a0(0x28)
	struct TSoftClassPtr<UObject> SlotMachinePayTableWindowWidgetClass; // 0x14c8(0x28)
	struct TSoftClassPtr<UObject> SlotMachineRewardWindowWidgetClass; // 0x14f0(0x28)
	struct TSoftClassPtr<UObject> AccountInventoryWidgetClass; // 0x1518(0x28)
	struct TSoftClassPtr<UObject> AchievementUnlockedWidgetClass; // 0x1540(0x28)
	struct TSoftClassPtr<UObject> JunkMachineWidgetClass; // 0x1568(0x28)
	struct TSoftClassPtr<UObject> ObstacleCourseHelpWindowWidgetClass; // 0x1590(0x28)
	struct TSoftClassPtr<UObject> IndicatorsWidgetClass; // 0x15b8(0x28)
	struct TSoftClassPtr<UObject> QuestInformationWindowWidgetClass; // 0x15e0(0x28)
	struct TSoftClassPtr<UObject> QuestDependenciesWindowWidgetClass; // 0x1608(0x28)
	struct TSoftClassPtr<UObject> TeleportationDeviceWindowWidgetClass; // 0x1630(0x28)
	struct TSoftClassPtr<UObject> VehicleExitHintWidgetClass; // 0x1658(0x28)
	struct TSoftClassPtr<UObject> FinishFishingHintWidgetClass; // 0x1680(0x28)
	struct TSoftClassPtr<UObject> GroupInfoWidgetClass; // 0x16a8(0x28)
	struct TSoftClassPtr<UObject> PlayersTableWindowWidgetClass; // 0x16d0(0x28)
	struct TSoftClassPtr<UObject> BreakWeaponItemWidgetClass; // 0x16f8(0x28)
	struct TSoftClassPtr<UObject> WeaponPartsExchangeWidgetClass; // 0x1720(0x28)
	struct TSoftClassPtr<UObject> GodConsoleWidgetClass; // 0x1748(0x28)
	struct TSoftClassPtr<UObject> SpectatorModeExitHintWidgetClass; // 0x1770(0x28)
	struct TSoftClassPtr<UObject> MonsterStateWidgetClass; // 0x1798(0x28)
	struct TSoftClassPtr<UObject> MonsterAbilitiesWidgetClass; // 0x17c0(0x28)
	char pad_17E8[0x8]; // 0x17e8(0x08)

	void OnArenaMatchStarted(); // Function WTL.WTLHUD.OnArenaMatchStarted // (Final|Native|Private) // @ game+0x1804160
	void OnArenaMatchEnded(enum class EWTLFaction WinningFaction, struct TArray<struct FWTLArenaLeaderboardRecord>& Leaderboard); // Function WTL.WTLHUD.OnArenaMatchEnded // (Final|Native|Private|HasOutParms) // @ game+0x1803fd0
};

// Class WTL.WTLHUDWidgetBase
// Size: 0x268 (Inherited: 0x260)
struct UWTLHUDWidgetBase : UWTLWidgetBase {
	char pad_260[0x8]; // 0x260(0x08)
};

// Class WTL.WTLHUDInteractiveWidget
// Size: 0x278 (Inherited: 0x268)
struct UWTLHUDInteractiveWidget : UWTLHUDWidgetBase {
	char pad_268[0x10]; // 0x268(0x10)
};

// Class WTL.WTLHUDAccountInventory
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDAccountInventory : UWTLHUDInteractiveWidget {
	struct UWTLHUDAccountInventoryWindow* ucAccountInventoryWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDAccountInventoryDropArea
// Size: 0x2e8 (Inherited: 0x260)
struct UWTLHUDAccountInventoryDropArea : UUserWidget {
	struct UBackgroundBlur* bBackgroundBlur; // 0x260(0x08)
	struct UWidgetSwitcher* wsDropArea; // 0x268(0x08)
	struct UWidgetSwitcher* wsCannotActionType; // 0x270(0x08)
	struct UWidgetSwitcher* wsCannotPutText; // 0x278(0x08)
	struct UWidgetSwitcher* wsCannotTakeText; // 0x280(0x08)
	struct UWidgetSwitcher* wsCanPutText; // 0x288(0x08)
	char pad_290[0x48]; // 0x290(0x48)
	struct UWidgetAnimation* CannotPutAnimation; // 0x2d8(0x08)
	struct UWidgetAnimation* CanPutAnimation; // 0x2e0(0x08)
};

// Class WTL.WTLHUDItemTypeSlot
// Size: 0x398 (Inherited: 0x260)
struct UWTLHUDItemTypeSlot : UUserWidget {
	struct UImage* imgItemType; // 0x260(0x08)
	struct UTextBlock* tbItemTypeID; // 0x268(0x08)
	struct UBorder* bAmmoType; // 0x270(0x08)
	struct UTextBlock* tbAmmoType; // 0x278(0x08)
	char pad_280[0x28]; // 0x280(0x28)
	struct UWTLCommonPopupMenu* m_ItemPopupMenuWidget; // 0x2a8(0x08)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct UImage* imgItem; // 0x2b8(0x08)
	struct UTextBlock* tbItemCount; // 0x2c0(0x08)
	struct UMenuAnchor* maItem; // 0x2c8(0x08)
	char pad_2D0[0x38]; // 0x2d0(0x38)
	struct UWTLHUDItemInformationShort* m_ItemInformationShortWidget; // 0x308(0x08)
	struct TSoftClassPtr<UObject> HUDPopupMenuWidgetClass; // 0x310(0x28)
	struct TSoftClassPtr<UObject> PDAPopupMenuWidgetClass; // 0x338(0x28)
	bool bUsePDAPopupMenuWidgetClass; // 0x360(0x01)
	char pad_361[0x7]; // 0x361(0x07)
	struct TSoftClassPtr<UObject> ItemInformationShortWidgetClass; // 0x368(0x28)
	bool AllowToReadOrViewItem; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)

	void ViewItem(); // Function WTL.WTLHUDItemTypeSlot.ViewItem // (Final|Native|Private) // @ game+0x1829c20
	void ShowItemInformation(); // Function WTL.WTLHUDItemTypeSlot.ShowItemInformation // (Final|Native|Private) // @ game+0x1829be0
	void ReadItem(); // Function WTL.WTLHUDItemTypeSlot.ReadItem // (Final|Native|Private) // @ game+0x1829c00
	void OnMenuOpenChanged(bool bIsOpen); // Function WTL.WTLHUDItemTypeSlot.OnMenuOpenChanged // (Final|Native|Private) // @ game+0x1829c40
	struct UWidget* OnGetItemMenuContent(); // Function WTL.WTLHUDItemTypeSlot.OnGetItemMenuContent // (Final|Native|Private) // @ game+0x1829d20
};

// Class WTL.WTLHUDAccountInventorySlot
// Size: 0x3f8 (Inherited: 0x398)
struct UWTLHUDAccountInventorySlot : UWTLHUDItemTypeSlot {
	struct UCanvasPanel* cpContent; // 0x398(0x08)
	char pad_3A0[0x18]; // 0x3a0(0x18)
	struct TSoftClassPtr<UObject> DraggedSlotClass; // 0x3b8(0x28)
	char pad_3E0[0x18]; // 0x3e0(0x18)

	void TakeItemFromAccountInventory(); // Function WTL.WTLHUDAccountInventorySlot.TakeItemFromAccountInventory // (Final|Native|Private) // @ game+0x1806d10
};

// Class WTL.WTLHUDWindowBase
// Size: 0x288 (Inherited: 0x288)
struct UWTLHUDWindowBase : UWTLCommonWindowBase {
};

// Class WTL.WTLHUDAccountInventoryWindow
// Size: 0x3f8 (Inherited: 0x288)
struct UWTLHUDAccountInventoryWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbPutItemsHint; // 0x288(0x08)
	struct UBorder* bItems; // 0x290(0x08)
	struct UWidgetSwitcher* wsItems; // 0x298(0x08)
	struct UScrollBox* sbItems; // 0x2a0(0x08)
	struct UWrapBox* wbItems; // 0x2a8(0x08)
	struct UWTLHUDAccountInventoryDropArea* ucItemsDropArea; // 0x2b0(0x08)
	struct UWTLCommonTextButton* ucBtnUpdateItems; // 0x2b8(0x08)
	struct TArray<struct FWTLAccountInventoryItem> m_DebugAccountInventoryItems; // 0x2c0(0x10)
	char pad_2D0[0xd8]; // 0x2d0(0xd8)
	struct TArray<struct UWTLHUDInventorySlot*> m_AccountInventorySlots; // 0x3a8(0x10)
	char pad_3B8[0x10]; // 0x3b8(0x10)
	struct TSoftClassPtr<UObject> InventorySlotWidgetClass; // 0x3c8(0x28)
	bool bIsGenerateNewDebugItemsDataWhenUpdate; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)

	void TakeItemConfirmed(); // Function WTL.WTLHUDAccountInventoryWindow.TakeItemConfirmed // (Final|Native|Private) // @ game+0x1807130
	void PutItemConfirmed(); // Function WTL.WTLHUDAccountInventoryWindow.PutItemConfirmed // (Final|Native|Private) // @ game+0x1807100
	void OnUpdateItemsButtonClicked(); // Function WTL.WTLHUDAccountInventoryWindow.OnUpdateItemsButtonClicked // (Final|Native|Private) // @ game+0x1807260
	void OnItemsScrollBoxUserScrolled(float CurrentOffset); // Function WTL.WTLHUDAccountInventoryWindow.OnItemsScrollBoxUserScrolled // (Final|Native|Private) // @ game+0x1807160
	void OnAccountInventoryItemsUpdated(struct TArray<struct FWTLAccountInventoryItem>& AccountInventoryItems); // Function WTL.WTLHUDAccountInventoryWindow.OnAccountInventoryItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x18072c0
};

// Class WTL.WTLHUDAchievementUnlocked
// Size: 0x2d8 (Inherited: 0x268)
struct UWTLHUDAchievementUnlocked : UWTLHUDWidgetBase {
	struct UImage* imgAchievement; // 0x268(0x08)
	struct UTextBlock* tbAchievementName; // 0x270(0x08)
	char pad_278[0x24]; // 0x278(0x24)
	float HideDelayTime; // 0x29c(0x04)
	struct TSoftObjectPtr<UFMODEvent> AchievementUnlockedSoundEvent; // 0x2a0(0x28)
	struct UWidgetAnimation* ShowAnimation; // 0x2c8(0x08)
	struct UWidgetAnimation* HideAnimation; // 0x2d0(0x08)

	void OnShowAnimationFinished(); // Function WTL.WTLHUDAchievementUnlocked.OnShowAnimationFinished // (Final|Native|Private) // @ game+0x1807610
	void OnHideAnimationFinished(); // Function WTL.WTLHUDAchievementUnlocked.OnHideAnimationFinished // (Final|Native|Private) // @ game+0x18075f0
};

// Class WTL.WTLHUDActionTimer
// Size: 0x2b0 (Inherited: 0x268)
struct UWTLHUDActionTimer : UWTLHUDWidgetBase {
	struct UWTLCommonCountdownSlider* ucCountdownSlider; // 0x268(0x08)
	struct UImage* imgActionTimerType; // 0x270(0x08)
	struct UImage* imgReady; // 0x278(0x08)
	char pad_280[0x18]; // 0x280(0x18)
	struct UWidgetAnimation* ReadyAnimation; // 0x298(0x08)
	struct TArray<struct FWTLActionTimerWidgetType> ActionTimerWidgetTypes; // 0x2a0(0x10)

	void OnReadyAnimationFinished(); // Function WTL.WTLHUDActionTimer.OnReadyAnimationFinished // (Final|Native|Private) // @ game+0x1807760
	void OnCountdownSliderFinished(); // Function WTL.WTLHUDActionTimer.OnCountdownSliderFinished // (Final|Native|Private) // @ game+0x18077a0
};

// Class WTL.WTLHUDInfoWidget
// Size: 0x268 (Inherited: 0x268)
struct UWTLHUDInfoWidget : UWTLHUDWidgetBase {
};

// Class WTL.WTLHUDActiveQuestInfo
// Size: 0x330 (Inherited: 0x268)
struct UWTLHUDActiveQuestInfo : UWTLHUDInfoWidget {
	struct UTextBlock* tbQuestName; // 0x268(0x08)
	struct UImage* imgQuestIcon; // 0x270(0x08)
	struct UWTLHUDItemTypeSlot* ucItemStartQuest; // 0x278(0x08)
	struct UTextBlock* tbCustomTextRequirement; // 0x280(0x08)
	struct UHorizontalBox* hbRequiredMoney; // 0x288(0x08)
	struct UTextBlock* tbRequiredMoney; // 0x290(0x08)
	struct UImage* imgRequiredMoneyReady; // 0x298(0x08)
	struct UPanelWidget* pwRequiredItems; // 0x2a0(0x08)
	struct UVerticalBox* vbRequiredKills; // 0x2a8(0x08)
	struct UVerticalBox* vbCustomRequirements; // 0x2b0(0x08)
	struct TSoftClassPtr<UObject> QuestItemSlotWidgetClass; // 0x2b8(0x28)
	struct TSoftClassPtr<UObject> RequiredMonsterKillWidgetClass; // 0x2e0(0x28)
	struct TSoftClassPtr<UObject> CustomRequirementWidgetClass; // 0x308(0x28)
};

// Class WTL.WTLHUDArenaRewardWindow
// Size: 0x3c0 (Inherited: 0x288)
struct UWTLHUDArenaRewardWindow : UWTLHUDWindowBase {
	struct UImage* imgLootBoxType; // 0x288(0x08)
	struct UHorizontalBox* hbMoneyAmount; // 0x290(0x08)
	struct UTextBlock* tbMoneyAmount; // 0x298(0x08)
	struct UVerticalBox* vbItems; // 0x2a0(0x08)
	struct UHorizontalBox* hbItems; // 0x2a8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2b0(0x08)
	struct FWTLStorageContent m_Items; // 0x2b8(0xa8)
	struct TSoftClassPtr<UObject> ItemSlotWidgetClass; // 0x360(0x28)
	struct TArray<struct FWTLLootBoxTypeImage> LootBoxTypesImages; // 0x388(0x10)
	struct TSoftObjectPtr<UFMODEvent> ShowSoundEvent; // 0x398(0x28)
};

// Class WTL.WTLHUDArenaState
// Size: 0x2c0 (Inherited: 0x268)
struct UWTLHUDArenaState : UWTLHUDInfoWidget {
	struct UVerticalBox* vbMain; // 0x268(0x08)
	struct UTextBlock* tbArenaMatchState; // 0x270(0x08)
	struct UTextBlock* tbNextMatchStateChangeDate; // 0x278(0x08)
	struct UVerticalBox* vbFactionScores; // 0x280(0x08)
	char pad_288[0x10]; // 0x288(0x10)
	struct TSoftClassPtr<UObject> ArenaStateItemWidgetClass; // 0x298(0x28)

	void OnArenaMatchEnded(enum class EWTLFaction WinningFaction, struct TArray<struct FWTLArenaLeaderboardRecord>& Leaderboard); // Function WTL.WTLHUDArenaState.OnArenaMatchEnded // (Final|Native|Private|HasOutParms) // @ game+0x18079f0
};

// Class WTL.WTLHUDArenaStateItem
// Size: 0x288 (Inherited: 0x260)
struct UWTLHUDArenaStateItem : UUserWidget {
	struct UImage* imgFaction; // 0x260(0x08)
	struct UTextBlock* tbFactionScore; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct TArray<struct FWTLFactionTexture> FactionTextures; // 0x278(0x10)
};

// Class WTL.WTLHUDArenaStateLeaderboardWindow
// Size: 0x300 (Inherited: 0x288)
struct UWTLHUDArenaStateLeaderboardWindow : UWTLHUDWindowBase {
	struct UBorder* bMain; // 0x288(0x08)
	struct UTextBlock* tbEndMatch; // 0x290(0x08)
	struct UTextBlock* tbEndMatchWinner; // 0x298(0x08)
	struct UTextBlock* tbEndMatchExclamation; // 0x2a0(0x08)
	struct UScrollBox* sbFactionsLeaderboards; // 0x2a8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)
	struct TSoftClassPtr<UObject> ArenaStateLeaderboardWindowItemWidgetClass; // 0x2c0(0x28)
	float ReducedSizeX; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct TArray<struct FWTLFactionColor> FactionColors; // 0x2f0(0x10)

	void OnFactionsLeaderboardsListScrolled(float CurrentOffset); // Function WTL.WTLHUDArenaStateLeaderboardWindow.OnFactionsLeaderboardsListScrolled // (Final|Native|Private) // @ game+0x1807d30
};

// Class WTL.WTLHUDArenaStateLeaderboardWindowItem
// Size: 0x2d8 (Inherited: 0x260)
struct UWTLHUDArenaStateLeaderboardWindowItem : UUserWidget {
	struct UBorder* bFaction; // 0x260(0x08)
	struct UImage* imgFaction; // 0x268(0x08)
	struct UTextBlock* tbFactionName; // 0x270(0x08)
	struct UTextBlock* tbFactionScore; // 0x278(0x08)
	struct UScrollBox* sbLeaders; // 0x280(0x08)
	char pad_288[0x8]; // 0x288(0x08)
	struct TSoftClassPtr<UObject> ArenaStateLeaderboardWindowItemRecordWidgetClass; // 0x290(0x28)
	struct TArray<struct FWTLFactionTexture> FactionTextures; // 0x2b8(0x10)
	struct TArray<struct FWTLFactionColor> FactionColors; // 0x2c8(0x10)
};

// Class WTL.WTLHUDArenaStateLeaderboardWindowItemRecord
// Size: 0x290 (Inherited: 0x260)
struct UWTLHUDArenaStateLeaderboardWindowItemRecord : UUserWidget {
	struct UTextBlock* tbNumber; // 0x260(0x08)
	struct UImage* imgCharacterClass; // 0x268(0x08)
	struct UTextBlock* tbCharacterName; // 0x270(0x08)
	struct UTextBlock* tbScore; // 0x278(0x08)
	struct TArray<struct FWTLCharacterClassTexture> CharacterClassTextures; // 0x280(0x10)
};

// Class WTL.WTLHUDItemSlot
// Size: 0xbb0 (Inherited: 0x268)
struct UWTLHUDItemSlot : UWTLHUDWidgetBase {
	struct UWTLHUDItemInformationShort* m_ItemInformationShortWidget; // 0x268(0x08)
	char pad_270[0x90]; // 0x270(0x90)
	struct UWTLCommonPopupMenu* m_ItemPopupMenuWidget; // 0x300(0x08)
	struct UImage* imgBackground; // 0x308(0x08)
	struct UImage* imgItem; // 0x310(0x08)
	struct UImage* imgBorder; // 0x318(0x08)
	struct UImage* imgItemType; // 0x320(0x08)
	struct UTextBlock* tbItemTypeID; // 0x328(0x08)
	struct UTextBlock* tbItemCount; // 0x330(0x08)
	struct UMenuAnchor* maItem; // 0x338(0x08)
	char pad_340[0x530]; // 0x340(0x530)
	struct UWTLHUDBaseActionStorage* m_BaseActionStorage; // 0x870(0x08)
	char pad_878[0x78]; // 0x878(0x78)
	struct TSoftClassPtr<UObject> DraggedSlotClass; // 0x8f0(0x28)
	struct TSoftClassPtr<UObject> PopupMenuWidgetClass; // 0x918(0x28)
	struct TSoftClassPtr<UObject> ItemInformationShortWidgetClass; // 0x940(0x28)
	struct TSoftClassPtr<UObject> ShowCharacterPreviewToolTipWidgetClass; // 0x968(0x28)
	struct FSlateBrush OriginalItemBackgroundBrush; // 0x990(0x88)
	struct FSlateBrush QuestItemBackgroundBrush; // 0xa18(0x88)
	struct FSlateBrush QuestItemLockedInInventoryBackgroundBrush; // 0xaa0(0x88)
	struct FSlateBrush BadWeaponConditionBackgroundBrush; // 0xb28(0x88)

	void ViewItem(); // Function WTL.WTLHUDItemSlot.ViewItem // (Final|Native|Private) // @ game+0x1825a70
	void UseNewPassport(); // Function WTL.WTLHUDItemSlot.UseNewPassport // (Final|Native|Private) // @ game+0x1825e80
	void UseItemFromStorage(); // Function WTL.WTLHUDItemSlot.UseItemFromStorage // (Final|Native|Private) // @ game+0x1825b30
	void UseItem(); // Function WTL.WTLHUDItemSlot.UseItem // (Final|Native|Private) // @ game+0x1825c40
	void UseGenderChangeConfirmed(); // Function WTL.WTLHUDItemSlot.UseGenderChangeConfirmed // (Final|Native|Private) // @ game+0x1825cc0
	void UseGenderChangeCertificate(); // Function WTL.WTLHUDItemSlot.UseGenderChangeCertificate // (Final|Native|Private) // @ game+0x1825d30
	void UseClassCertificate(); // Function WTL.WTLHUDItemSlot.UseClassCertificate // (Final|Native|Private) // @ game+0x1825d50
	void UnloadWeaponItemWithDropAmmoConfirm(); // Function WTL.WTLHUDItemSlot.UnloadWeaponItemWithDropAmmoConfirm // (Final|Native|Private) // @ game+0x1824d70
	void UnloadWeaponItem(); // Function WTL.WTLHUDItemSlot.UnloadWeaponItem // (Final|Native|Private) // @ game+0x18257b0
	void UnequipStuffItem(); // Function WTL.WTLHUDItemSlot.UnequipStuffItem // (Final|Native|Private) // @ game+0x1823f80
	void UnequipClothesItem(); // Function WTL.WTLHUDItemSlot.UnequipClothesItem // (Final|Native|Private) // @ game+0x1824080
	void TakeFromStorage(bool IsTakeAll); // Function WTL.WTLHUDItemSlot.TakeFromStorage // (Final|Native|Private) // @ game+0x1826650
	void TakeFromClanStorage(bool IsTakeAll); // Function WTL.WTLHUDItemSlot.TakeFromClanStorage // (Final|Native|Private) // @ game+0x1826510
	void TakeFromAccountInventory(); // Function WTL.WTLHUDItemSlot.TakeFromAccountInventory // (Final|Native|Private) // @ game+0x18263e0
	void SplitItem(); // Function WTL.WTLHUDItemSlot.SplitItem // (Final|Native|Private) // @ game+0x1826020
	void ShowItemShortInformation(); // Function WTL.WTLHUDItemSlot.ShowItemShortInformation // (Final|Native|Private) // @ game+0x1823dc0
	void ShowItemInformation(); // Function WTL.WTLHUDItemSlot.ShowItemInformation // (Final|Native|Private) // @ game+0x1823da0
	void ShowDropItemConfirmation(); // Function WTL.WTLHUDItemSlot.ShowDropItemConfirmation // (Final|Native|Public) // @ game+0x1823d80
	void ShowDestroyItemConfirmation(); // Function WTL.WTLHUDItemSlot.ShowDestroyItemConfirmation // (Final|Native|Private) // @ game+0x1823ec0
	void RepairWeaponByKitByWeaponID(uint64_t WeaponID); // Function WTL.WTLHUDItemSlot.RepairWeaponByKitByWeaponID // (Final|Native|Private) // @ game+0x18249c0
	void RepairWeaponByKit(); // Function WTL.WTLHUDItemSlot.RepairWeaponByKit // (Final|Native|Private) // @ game+0x1824ad0
	void RepairClothesByKitByClothesID(uint64_t ClothesID); // Function WTL.WTLHUDItemSlot.RepairClothesByKitByClothesID // (Final|Native|Private) // @ game+0x1824890
	void RepairClothesByKit(); // Function WTL.WTLHUDItemSlot.RepairClothesByKit // (Final|Native|Private) // @ game+0x18249a0
	void RepairByRepairDeviceByItemID(uint64_t StuffID); // Function WTL.WTLHUDItemSlot.RepairByRepairDeviceByItemID // (Final|Native|Private) // @ game+0x1824790
	void RepairByRepairDevice(); // Function WTL.WTLHUDItemSlot.RepairByRepairDevice // (Final|Native|Private) // @ game+0x1824870
	void RemoveWeaponPartFromExchange(); // Function WTL.WTLHUDItemSlot.RemoveWeaponPartFromExchange // (Final|Native|Private) // @ game+0x1826260
	void RemoveWeaponAttachmentByTypeID(uint64_t AttachmentTypeID); // Function WTL.WTLHUDItemSlot.RemoveWeaponAttachmentByTypeID // (Final|Native|Private) // @ game+0x1824fd0
	void RemoveWeaponAttachmentBySlotTypeNumber(uint64_t WeaponAttachmentSlotTypeEnumNumber); // Function WTL.WTLHUDItemSlot.RemoveWeaponAttachmentBySlotTypeNumber // (Final|Native|Private) // @ game+0x1824e30
	void RemoveWeaponAttachmentBySlotType(); // Function WTL.WTLHUDItemSlot.RemoveWeaponAttachmentBySlotType // (Final|Native|Private) // @ game+0x1824e10
	void RemoveWeaponAttachment(); // Function WTL.WTLHUDItemSlot.RemoveWeaponAttachment // (Final|Native|Private) // @ game+0x1824fb0
	void RemoveSelfFromBaseActionStorage(); // Function WTL.WTLHUDItemSlot.RemoveSelfFromBaseActionStorage // (Final|Native|Private) // @ game+0x1826160
	void RemoveFromStimulatorContainerSlot(); // Function WTL.WTLHUDItemSlot.RemoveFromStimulatorContainerSlot // (Final|Native|Private) // @ game+0x1826240
	void RemoveFromModification(); // Function WTL.WTLHUDItemSlot.RemoveFromModification // (Final|Native|Private) // @ game+0x1826280
	void RemoveFromFastAccess(); // Function WTL.WTLHUDItemSlot.RemoveFromFastAccess // (Final|Native|Private) // @ game+0x1826040
	void RemoveFromCustomization(); // Function WTL.WTLHUDItemSlot.RemoveFromCustomization // (Final|Native|Private) // @ game+0x18263c0
	void RemoveFromBaseActionStorage(struct UWTLHUDItemSlot* ItemSlot); // Function WTL.WTLHUDItemSlot.RemoveFromBaseActionStorage // (Final|Native|Private) // @ game+0x1826080
	void RemoveArtefactItemFromContainer(); // Function WTL.WTLHUDItemSlot.RemoveArtefactItemFromContainer // (Final|Native|Private) // @ game+0x1825330
	void RemoveAllWeaponAttachments(); // Function WTL.WTLHUDItemSlot.RemoveAllWeaponAttachments // (Final|Native|Private) // @ game+0x1824df0
	void RemoveAllArmoredPlates(); // Function WTL.WTLHUDItemSlot.RemoveAllArmoredPlates // (Final|Native|Private) // @ game+0x1823fc0
	void ReadItem(); // Function WTL.WTLHUDItemSlot.ReadItem // (Final|Native|Private) // @ game+0x1825a50
	void PutToAccountInventory(); // Function WTL.WTLHUDItemSlot.PutToAccountInventory // (Final|Native|Private) // @ game+0x1826460
	void PutInStorage(); // Function WTL.WTLHUDItemSlot.PutInStorage // (Final|Native|Private) // @ game+0x1826730
	void PutInClanStorage(); // Function WTL.WTLHUDItemSlot.PutInClanStorage // (Final|Native|Private) // @ game+0x18265f0
	void PlaceStuffItem(); // Function WTL.WTLHUDItemSlot.PlaceStuffItem // (Final|Native|Private) // @ game+0x18240c0
	bool PlaceItemToStorageContent(bool IsClanStorage, bool IsCheckCount, struct UWTLHUDItemSlot* ItemSlot); // Function WTL.WTLHUDItemSlot.PlaceItemToStorageContent // (Final|Native|Private) // @ game+0x1826a60
	void PlaceItemToClanStorage(struct FString Description); // Function WTL.WTLHUDItemSlot.PlaceItemToClanStorage // (Final|Native|Private) // @ game+0x1826880
	void PlaceArtefactItemInContainerByContainerID(uint64_t ContainerID); // Function WTL.WTLHUDItemSlot.PlaceArtefactItemInContainerByContainerID // (Final|Native|Private) // @ game+0x18253d0
	void PlaceArtefactItemInContainer(); // Function WTL.WTLHUDItemSlot.PlaceArtefactItemInContainer // (Final|Native|Private) // @ game+0x18254b0
	void PickupItemFromClanStorage(struct FString Description); // Function WTL.WTLHUDItemSlot.PickupItemFromClanStorage // (Final|Native|Private) // @ game+0x1826790
	void PaintWeaponBySprayCanByWeaponID(uint64_t WeaponID); // Function WTL.WTLHUDItemSlot.PaintWeaponBySprayCanByWeaponID // (Final|Native|Private) // @ game+0x18244a0
	void PaintWeaponBySprayCan(); // Function WTL.WTLHUDItemSlot.PaintWeaponBySprayCan // (Final|Native|Private) // @ game+0x1824600
	void PaintItemWithSprayCanConfirm(); // Function WTL.WTLHUDItemSlot.PaintItemWithSprayCanConfirm // (Final|Native|Private) // @ game+0x1824270
	void PaintClothesBySprayCanByClothesID(uint64_t ClothesID); // Function WTL.WTLHUDItemSlot.PaintClothesBySprayCanByClothesID // (Final|Native|Private) // @ game+0x1824320
	void PaintClothesBySprayCan(); // Function WTL.WTLHUDItemSlot.PaintClothesBySprayCan // (Final|Native|Private) // @ game+0x1824480
	void OpenExtractor(); // Function WTL.WTLHUDItemSlot.OpenExtractor // (Final|Native|Private) // @ game+0x1825890
	void OpenArmoredPlatesWindow(); // Function WTL.WTLHUDItemSlot.OpenArmoredPlatesWindow // (Final|Native|Private) // @ game+0x1824060
	void OnRepairItemByKitConfirmed(); // Function WTL.WTLHUDItemSlot.OnRepairItemByKitConfirmed // (Final|Native|Private) // @ game+0x18246f0
	void OnRepairItemByKitConfirmationDialogHide(); // Function WTL.WTLHUDItemSlot.OnRepairItemByKitConfirmationDialogHide // (Final|Native|Private) // @ game+0x18246c0
	void OnRepairByRepairDeviceConfirmed(); // Function WTL.WTLHUDItemSlot.OnRepairByRepairDeviceConfirmed // (Final|Native|Private) // @ game+0x1824710
	void OnMenuOpenChanged(bool bIsOpen); // Function WTL.WTLHUDItemSlot.OnMenuOpenChanged // (Final|Native|Private) // @ game+0x1826c60
	struct UWidget* OnGetItemMenuContent(); // Function WTL.WTLHUDItemSlot.OnGetItemMenuContent // (Final|Native|Private) // @ game+0x1826d50
	void ModifyItemByKit(); // Function WTL.WTLHUDItemSlot.ModifyItemByKit // (Final|Native|Private) // @ game+0x1824620
	void LoadWeaponItemByAmmoID(uint64_t ID); // Function WTL.WTLHUDItemSlot.LoadWeaponItemByAmmoID // (Final|Native|Private) // @ game+0x1824c90
	void LoadWeaponItem(); // Function WTL.WTLHUDItemSlot.LoadWeaponItem // (Final|Native|Private) // @ game+0x18257d0
	void LoadAmmoToWeaponItem(); // Function WTL.WTLHUDItemSlot.LoadAmmoToWeaponItem // (Final|Native|Private) // @ game+0x1824c70
	void LoadAmmoToWeaponByWeaponID(uint64_t ID); // Function WTL.WTLHUDItemSlot.LoadAmmoToWeaponByWeaponID // (Final|Native|Private) // @ game+0x1824b90
	void InstallPDAModule(); // Function WTL.WTLHUDItemSlot.InstallPDAModule // (Final|Native|Private) // @ game+0x1824af0
	void EquipStuffItem(); // Function WTL.WTLHUDItemSlot.EquipStuffItem // (Final|Native|Private) // @ game+0x1823fa0
	void EquipClothesItem(); // Function WTL.WTLHUDItemSlot.EquipClothesItem // (Final|Native|Private) // @ game+0x18240a0
	void EngraveItem(struct FString CustomizationName); // Function WTL.WTLHUDItemSlot.EngraveItem // (Final|Native|Private) // @ game+0x1826970
	void DropItem(); // Function WTL.WTLHUDItemSlot.DropItem // (Final|Native|Private) // @ game+0x1823ee0
	void DestroyItem(); // Function WTL.WTLHUDItemSlot.DestroyItem // (Final|Native|Private) // @ game+0x1823e20
	void CutFish(); // Function WTL.WTLHUDItemSlot.CutFish // (Final|Native|Private) // @ game+0x18259b0
	void CombineItemWithItemID(uint64_t ItemId); // Function WTL.WTLHUDItemSlot.CombineItemWithItemID // (Final|Native|Private) // @ game+0x1825f20
	void CombineItem(); // Function WTL.WTLHUDItemSlot.CombineItem // (Final|Native|Private) // @ game+0x1826000
	void CloseExtractor(); // Function WTL.WTLHUDItemSlot.CloseExtractor // (Final|Native|Private) // @ game+0x18257f0
	void ChargeStuffItemByEnergySourceItemByEnergySourceItemID(uint64_t EnergySourceItemID); // Function WTL.WTLHUDItemSlot.ChargeStuffItemByEnergySourceItemByEnergySourceItemID // (Final|Native|Private) // @ game+0x18254f0
	void ChargeStuffItemByEnergySourceItem(); // Function WTL.WTLHUDItemSlot.ChargeStuffItemByEnergySourceItem // (Final|Native|Private) // @ game+0x18254d0
	void ChargeEnergySourceItemToStuffItemByStuffItemID(uint64_t StuffItemID); // Function WTL.WTLHUDItemSlot.ChargeEnergySourceItemToStuffItemByStuffItemID // (Final|Native|Private) // @ game+0x18255f0
	void ChargeEnergySourceItemToStuffItem(); // Function WTL.WTLHUDItemSlot.ChargeEnergySourceItemToStuffItem // (Final|Native|Private) // @ game+0x18255d0
	void BreakWeaponItem(); // Function WTL.WTLHUDItemSlot.BreakWeaponItem // (Final|Native|Private) // @ game+0x18256d0
	void AttachToWeaponByStuffItemID(uint64_t AttachmentID); // Function WTL.WTLHUDItemSlot.AttachToWeaponByStuffItemID // (Final|Native|Private) // @ game+0x1825250
	void AttachToWeaponByStuffItem(); // Function WTL.WTLHUDItemSlot.AttachToWeaponByStuffItem // (Final|Native|Private) // @ game+0x1825230
	void AttachStuffItemToWeaponByWeaponID(uint64_t WeaponID); // Function WTL.WTLHUDItemSlot.AttachStuffItemToWeaponByWeaponID // (Final|Native|Private) // @ game+0x1825150
	void AttachStuffItemToWeapon(); // Function WTL.WTLHUDItemSlot.AttachStuffItemToWeapon // (Final|Native|Private) // @ game+0x1825130
	void AssignToFastAccess(); // Function WTL.WTLHUDItemSlot.AssignToFastAccess // (Final|Native|Private) // @ game+0x1826060
	void AddWeaponPartToExchange(); // Function WTL.WTLHUDItemSlot.AddWeaponPartToExchange // (Final|Native|Private) // @ game+0x18261c0
	void AddToStimulatorContainerSlot(); // Function WTL.WTLHUDItemSlot.AddToStimulatorContainerSlot // (Final|Native|Private) // @ game+0x1826180
	void AddToCommission(); // Function WTL.WTLHUDItemSlot.AddToCommission // (Final|Native|Private) // @ game+0x18261a0
	void AddToActionStorage(); // Function WTL.WTLHUDItemSlot.AddToActionStorage // (Final|Native|Private) // @ game+0x1826220
	void AddOnCustomization(); // Function WTL.WTLHUDItemSlot.AddOnCustomization // (Final|Native|Private) // @ game+0x1826200
	void AddForModification(); // Function WTL.WTLHUDItemSlot.AddForModification // (Final|Native|Private) // @ game+0x18261e0
};

// Class WTL.WTLHUDArmoredPlateSlot
// Size: 0xc00 (Inherited: 0xbb0)
struct UWTLHUDArmoredPlateSlot : UWTLHUDItemSlot {
	struct UTextBlock* tbName; // 0xbb0(0x08)
	char pad_BB8[0x48]; // 0xbb8(0x48)

	void RemoveArmoredPlate(); // Function WTL.WTLHUDArmoredPlateSlot.RemoveArmoredPlate // (Final|Native|Private) // @ game+0x1808030
	void InstallArmoredPlateByArmorPlateID(uint64_t ArmorPlateItemID); // Function WTL.WTLHUDArmoredPlateSlot.InstallArmoredPlateByArmorPlateID // (Final|Native|Private) // @ game+0x1808120
	void InstallArmoredPlate(); // Function WTL.WTLHUDArmoredPlateSlot.InstallArmoredPlate // (Final|Native|Private) // @ game+0x18082a0
};

// Class WTL.WTLHUDArmoredPlatesWindow
// Size: 0x428 (Inherited: 0x288)
struct UWTLHUDArmoredPlatesWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbArmorName; // 0x288(0x08)
	struct UWTLHUDArmoredPlateSlot* ucFrontPlateItemSlot; // 0x290(0x08)
	struct UWTLHUDArmoredPlateSlot* ucBackPlateItemSlot; // 0x298(0x08)
	char pad_2A0[0x188]; // 0x2a0(0x188)

	void OnRemoveArmoredPlate(enum class EWTLArmorPlateType ArmoredPlateType); // Function WTL.WTLHUDArmoredPlatesWindow.OnRemoveArmoredPlate // (Final|Native|Private) // @ game+0x18085a0
	void OnInstallArmoredPlate(enum class EWTLArmorPlateType ArmoredPlateType, uint64_t ArmorPlateItemID); // Function WTL.WTLHUDArmoredPlatesWindow.OnInstallArmoredPlate // (Final|Native|Private) // @ game+0x1808670
};

// Class WTL.WTLHUDArmorSlot
// Size: 0xbc8 (Inherited: 0xbb0)
struct UWTLHUDArmorSlot : UWTLHUDItemSlot {
	struct UImage* imgProhibit; // 0xbb0(0x08)
	struct UTextBlock* tbBodyPart; // 0xbb8(0x08)
	enum class EWTLBodyPart SlotBodyPart; // 0xbc0(0x01)
	char pad_BC1[0x7]; // 0xbc1(0x07)
};

// Class WTL.WTLHUDBadConnection
// Size: 0x270 (Inherited: 0x268)
struct UWTLHUDBadConnection : UWTLHUDWidgetBase {
	struct UWidgetAnimation* ConnectionAnimation; // 0x268(0x08)
};

// Class WTL.WTLHUDBarter
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDBarter : UWTLHUDInteractiveWidget {
	struct UWTLHUDBarterWindow* ucBarterWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDBaseActionStorage
// Size: 0x2c0 (Inherited: 0x268)
struct UWTLHUDBaseActionStorage : UWTLHUDWidgetBase {
	struct UWTLCommonTextButton* ucBtnAction; // 0x268(0x08)
	struct UWTLHUDBaseActionDropArea* ucDropArea; // 0x270(0x08)
	char pad_278[0x20]; // 0x278(0x20)
	struct TSoftClassPtr<UObject> InventorySlotClass; // 0x298(0x28)

	void OnSlotRemove(enum class EWTLItemType ItemType, uint64_t ItemId, bool IsHasAnyItems); // Function WTL.WTLHUDBaseActionStorage.OnSlotRemove // (Native|Protected) // @ game+0x1809820
	void OnSlotAdd(struct UWTLHUDInventorySlot* InventorySlot); // Function WTL.WTLHUDBaseActionStorage.OnSlotAdd // (Native|Protected) // @ game+0x1809a10
	void OnActionBtnClick(); // Function WTL.WTLHUDBaseActionStorage.OnActionBtnClick // (Native|Protected) // @ game+0x1809af0
	void ActionConfirmed(); // Function WTL.WTLHUDBaseActionStorage.ActionConfirmed // (Native|Protected) // @ game+0x1809800
};

// Class WTL.WTLHUDBarterStorage
// Size: 0x860 (Inherited: 0x2c0)
struct UWTLHUDBarterStorage : UWTLHUDBaseActionStorage {
	struct UVerticalBox* vbMyOfferrings; // 0x2c0(0x08)
	struct UWTLUtilityNumberTextBox* ntbMyTokensAmount; // 0x2c8(0x08)
	struct UWTLCommonTextButton* ucBtnReadyForBarter; // 0x2d0(0x08)
	struct UTextBlock* tbCharacterName1; // 0x2d8(0x08)
	struct UTextBlock* tbCharacterName2; // 0x2e0(0x08)
	struct UTextBlock* tbCharacterName3; // 0x2e8(0x08)
	struct UHorizontalBox* hbCharacterReady; // 0x2f0(0x08)
	struct UWidgetSwitcher* wsCharacterOfferings; // 0x2f8(0x08)
	struct UWrapBox* wpCharacterItems; // 0x300(0x08)
	struct UTextBlock* tbNoCharacterItemsAdded; // 0x308(0x08)
	struct UTextBlock* tbCharacterTokensAmount; // 0x310(0x08)
	struct UWidgetSwitcher* wsBarterStatus; // 0x318(0x08)
	struct UTextBlock* tbErrorMessage; // 0x320(0x08)
	struct UWidgetSwitcher* wsCharacterAgreementStatus; // 0x328(0x08)
	struct UTextBlock* tbAgreeForBarter; // 0x330(0x08)
	char pad_338[0x20]; // 0x338(0x20)
	struct FButtonStyle DefaultActionBtnStyle; // 0x358(0x278)
	struct FButtonStyle ReadyActionBtnStyle; // 0x5d0(0x278)
	char pad_848[0x18]; // 0x848(0x18)

	void OnReadyForBarterButtonClicked(); // Function WTL.WTLHUDBarterStorage.OnReadyForBarterButtonClicked // (Final|Native|Private) // @ game+0x1808d30
	void OnMyTokensAmountTextBoxValueChange(int32_t Value); // Function WTL.WTLHUDBarterStorage.OnMyTokensAmountTextBoxValueChange // (Final|Native|Private) // @ game+0x1808f10
	void OnMyTokensAmountTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDBarterStorage.OnMyTokensAmountTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1808d50
	void OnHideAgreeForBarterWarning(); // Function WTL.WTLHUDBarterStorage.OnHideAgreeForBarterWarning // (Final|Native|Private) // @ game+0x1808d10
	void OnBarterDealChanged(); // Function WTL.WTLHUDBarterStorage.OnBarterDealChanged // (Final|Native|Private) // @ game+0x1809020
};

// Class WTL.WTLHUDBarterWindow
// Size: 0x290 (Inherited: 0x288)
struct UWTLHUDBarterWindow : UWTLHUDWindowBase {
	struct UWTLHUDBarterStorage* ucBarterStorage; // 0x288(0x08)
};

// Class WTL.WTLHUDBaseActionDropArea
// Size: 0x340 (Inherited: 0x268)
struct UWTLHUDBaseActionDropArea : UWTLHUDWidgetBase {
	char pad_268[0x8]; // 0x268(0x08)
	struct UBorder* bMain; // 0x270(0x08)
	struct UImage* imgDottedSquare; // 0x278(0x08)
	struct UImage* imgBorder; // 0x280(0x08)
	struct UWrapBox* wbItemsList; // 0x288(0x08)
	struct UHorizontalBox* hbHint; // 0x290(0x08)
	struct UTextBlock* tbHint; // 0x298(0x08)
	char pad_2A0[0x78]; // 0x2a0(0x78)
	int32_t ItemsCountInDropArea; // 0x318(0x04)
	struct FLinearColor MainBorderDefaultColor; // 0x31c(0x10)
	struct FLinearColor MainBorderDragEnterColor; // 0x32c(0x10)
	char pad_33C[0x4]; // 0x33c(0x04)

	void RemoveItemFromStorage(uint64_t ItemId); // Function WTL.WTLHUDBaseActionDropArea.RemoveItemFromStorage // (Native|Protected) // @ game+0x18094d0
	void DropItemToBuyStorageConfirmed(); // Function WTL.WTLHUDBaseActionDropArea.DropItemToBuyStorageConfirmed // (Final|Native|Private) // @ game+0x18096b0
	void DropItemToBuyStorageCanceled(); // Function WTL.WTLHUDBaseActionDropArea.DropItemToBuyStorageCanceled // (Final|Native|Private) // @ game+0x1809690
	void AddItemToStorage(struct UWTLHUDInventorySlot* Item); // Function WTL.WTLHUDBaseActionDropArea.AddItemToStorage // (Native|Protected) // @ game+0x18095b0
};

// Class WTL.WTLHUDBreakWeaponItem
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDBreakWeaponItem : UWTLHUDInteractiveWidget {
	struct UWTLHUDBreakWeaponItemWindow* ucBreakWeaponItemWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDBreakWeaponItemWindow
// Size: 0x2e8 (Inherited: 0x288)
struct UWTLHUDBreakWeaponItemWindow : UWTLCommonWindowBase {
	struct UWTLHUDItemSlot* ucWeaponItemSlotToBreak; // 0x288(0x08)
	struct UPanelWidget* pwPartItems; // 0x290(0x08)
	struct UWTLHUDItemTypeSlot* ucDamagePartItemTypeSlot; // 0x298(0x08)
	struct UWTLHUDItemTypeSlot* ucAccuracyPartItemTypeSlot; // 0x2a0(0x08)
	struct UWTLHUDItemTypeSlot* ucDurabilityPartItemTypeSlot; // 0x2a8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnBreak; // 0x2b0(0x08)
	char pad_2B8[0x30]; // 0x2b8(0x30)

	void OnBreakConfirmed(); // Function WTL.WTLHUDBreakWeaponItemWindow.OnBreakConfirmed // (Final|Native|Private) // @ game+0x180afa0
	void OnBreakBtnClicked(); // Function WTL.WTLHUDBreakWeaponItemWindow.OnBreakBtnClicked // (Final|Native|Private) // @ game+0x180b070
};

// Class WTL.WTLHUDBulletinBoardItem
// Size: 0x338 (Inherited: 0x260)
struct UWTLHUDBulletinBoardItem : UUserWidget {
	struct UImage* imgQuestIcon; // 0x260(0x08)
	struct UTextBlock* tbQuestName; // 0x268(0x08)
	struct UHorizontalBox* hbRecommendedLevel; // 0x270(0x08)
	struct UTextBlock* tbRecommendedLevel; // 0x278(0x08)
	struct UHorizontalBox* hbMaxLevel; // 0x280(0x08)
	struct UTextBlock* tbMaxLevel; // 0x288(0x08)
	struct UHorizontalBox* hbTimeLimit; // 0x290(0x08)
	struct UTextBlock* tbTimeLimit; // 0x298(0x08)
	struct UHorizontalBox* hbRewardExperience; // 0x2a0(0x08)
	struct UTextBlock* tbRewardExperience; // 0x2a8(0x08)
	struct UHorizontalBox* hbRewardMoney; // 0x2b0(0x08)
	struct UTextBlock* tbRewardMoney; // 0x2b8(0x08)
	struct UWrapBox* wbRewardItems; // 0x2c0(0x08)
	struct UWTLCommonTextButton* ucBtnTakeQuest; // 0x2c8(0x08)
	struct UWTLCommonTextButton* ucBtnDetails; // 0x2d0(0x08)
	char pad_2D8[0x38]; // 0x2d8(0x38)
	struct TSoftClassPtr<UObject> QuestItemSlotWidgetClass; // 0x310(0x28)

	void OnTakeQuestBtnClicked(); // Function WTL.WTLHUDBulletinBoardItem.OnTakeQuestBtnClicked // (Final|Native|Private) // @ game+0x180b280
	void OnDetailsBtnClicked(); // Function WTL.WTLHUDBulletinBoardItem.OnDetailsBtnClicked // (Final|Native|Private) // @ game+0x180b250
};

// Class WTL.WTLHUDBulletinBoardWindow
// Size: 0x388 (Inherited: 0x288)
struct UWTLHUDBulletinBoardWindow : UWTLHUDWindowBase {
	struct UWTLCommonTextButton* ucBtnBack; // 0x288(0x08)
	struct UHorizontalBox* hbBulletinCount; // 0x290(0x08)
	struct UTextBlock* tbBulletinCount; // 0x298(0x08)
	struct UWidgetSwitcher* wsQuestList; // 0x2a0(0x08)
	struct UScrollBox* sbQuestList; // 0x2a8(0x08)
	struct UWTLCommonQuestInfo* ucQuestInfo; // 0x2b0(0x08)
	struct UCanvasPanel* cpBtnTakeQuest; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnTakeQuest; // 0x2c0(0x08)
	char pad_2C8[0x20]; // 0x2c8(0x20)
	struct TSoftClassPtr<UObject> BulletinBoardItemWidgetClass; // 0x2e8(0x28)
	struct TSoftClassPtr<UObject> QuestItemSlotWidgetClass; // 0x310(0x28)
	struct TSoftClassPtr<UObject> RequiredMonsterKillWidgetClass; // 0x338(0x28)
	struct TSoftClassPtr<UObject> CustomRequirementWidgetClass; // 0x360(0x28)

	void OnUpdateAllowingTimerOut(); // Function WTL.WTLHUDBulletinBoardWindow.OnUpdateAllowingTimerOut // (Final|Native|Private) // @ game+0x180b3e0
	void OnTakeQuestBtnClicked(); // Function WTL.WTLHUDBulletinBoardWindow.OnTakeQuestBtnClicked // (Final|Native|Private) // @ game+0x180b380
	void OnBulletinBoardItemTakeQuestClicked(int32_t QuestID); // Function WTL.WTLHUDBulletinBoardWindow.OnBulletinBoardItemTakeQuestClicked // (Final|Native|Private) // @ game+0x180b4d0
	void OnBulletinBoardItemDetailsClicked(int32_t QuestID); // Function WTL.WTLHUDBulletinBoardWindow.OnBulletinBoardItemDetailsClicked // (Final|Native|Private) // @ game+0x180b400
	void OnBackBtnClicked(); // Function WTL.WTLHUDBulletinBoardWindow.OnBackBtnClicked // (Final|Native|Private) // @ game+0x180b3c0
};

// Class WTL.WTLHUDInventorySlot
// Size: 0xcc0 (Inherited: 0xbb0)
struct UWTLHUDInventorySlot : UWTLHUDItemSlot {
	char pad_BB0[0x38]; // 0xbb0(0x38)
	struct UBorder* bAmmoType; // 0xbe8(0x08)
	struct UTextBlock* tbAmmoType; // 0xbf0(0x08)
	char pad_BF8[0x40]; // 0xbf8(0x40)
	struct FSlateBrush DefaultArtefactItemInContainerBrush; // 0xc38(0x88)
};

// Class WTL.WTLHUDPriceSlot
// Size: 0xcd0 (Inherited: 0xcc0)
struct UWTLHUDPriceSlot : UWTLHUDInventorySlot {
	struct UTextBlock* tbActionPrice; // 0xcc0(0x08)
	char pad_CC8[0x8]; // 0xcc8(0x08)
};

// Class WTL.WTLHUDBuySlot
// Size: 0xcd0 (Inherited: 0xcd0)
struct UWTLHUDBuySlot : UWTLHUDPriceSlot {
};

// Class WTL.WTLHUDPriceStorage
// Size: 0x2d8 (Inherited: 0x2c0)
struct UWTLHUDPriceStorage : UWTLHUDBaseActionStorage {
	struct UTextBlock* tbActionPrice; // 0x2c0(0x08)
	struct UTextBlock* tbTotalActionPriceCaption; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class WTL.WTLHUDBuyStorage
// Size: 0x328 (Inherited: 0x2d8)
struct UWTLHUDBuyStorage : UWTLHUDPriceStorage {
	struct UTextBlock* tbTotalWeight; // 0x2d8(0x08)
	struct UTextBlock* tbTotalActionPrice; // 0x2e0(0x08)
	struct UTextBlock* tbTotalWeightCaption; // 0x2e8(0x08)
	struct UTextBlock* tbActionPriceCaption; // 0x2f0(0x08)
	char pad_2F8[0x8]; // 0x2f8(0x08)
	struct TSoftObjectPtr<UFMODEvent> BuySellItemsSoundEvent; // 0x300(0x28)
};

// Class WTL.WTLHUDChangeClassWindow
// Size: 0x2e8 (Inherited: 0x288)
struct UWTLHUDChangeClassWindow : UWTLHUDWindowBase {
	struct UPanelWidget* hbCharacterClasses; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnChangeClass; // 0x290(0x08)
	char pad_298[0x10]; // 0x298(0x10)
	struct TSoftClassPtr<UObject> ChangeClassWindowItemWidgetClass; // 0x2a8(0x28)
	struct TArray<struct FWTLCharacterClass> CharacterClasses; // 0x2d0(0x10)
	float ItemsRightPadding; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)

	void OnChangeClassWindowItemClicked(enum class EWTLCharacterClass SelectedCharacterClass); // Function WTL.WTLHUDChangeClassWindow.OnChangeClassWindowItemClicked // (Final|Native|Private) // @ game+0x180ba40
	void OnChangeClassConfirmed(); // Function WTL.WTLHUDChangeClassWindow.OnChangeClassConfirmed // (Final|Native|Private) // @ game+0x180b960
	void OnChangeClassButtonClicked(); // Function WTL.WTLHUDChangeClassWindow.OnChangeClassButtonClicked // (Final|Native|Private) // @ game+0x180ba20
};

// Class WTL.WTLHUDChangeClassWindowItem
// Size: 0x860 (Inherited: 0x340)
struct UWTLHUDChangeClassWindowItem : UWTLCommonButton {
	struct UTextBlock* tbCharacterClass; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)
	struct UTexture2D* m_Texture; // 0x350(0x08)
	char pad_358[0x18]; // 0x358(0x18)
	struct FButtonStyle DefaultButtonStyle; // 0x370(0x278)
	struct FButtonStyle SelectedButtonStyle; // 0x5e8(0x278)
};

// Class WTL.WTLHUDCharacterEffectInfluence
// Size: 0x290 (Inherited: 0x260)
struct UWTLHUDCharacterEffectInfluence : UUserWidget {
	struct UTextBlock* tbEffectType; // 0x260(0x08)
	struct UTextBlock* tbAtStart; // 0x268(0x08)
	struct UTextBlock* tbPerTick; // 0x270(0x08)
	struct UTextBlock* tbDuration; // 0x278(0x08)
	struct TArray<struct FWTLCharacterEffectTypeColor> CharacterEffectTypeColors; // 0x280(0x10)
};

// Class WTL.WTLHUDCharacterEquipment
// Size: 0x2d0 (Inherited: 0x268)
struct UWTLHUDCharacterEquipment : UWTLHUDWidgetBase {
	struct UWidgetSwitcher* wsCharacterPreview; // 0x268(0x08)
	struct UWTLCommonCharacterRotator* ucCharacterRotator; // 0x270(0x08)
	struct UWidgetSwitcher* wsSilhouette; // 0x278(0x08)
	struct UWTLCommonCheckBox* cbCharacterPreview; // 0x280(0x08)
	struct UCanvasPanel* cpArmorSlots; // 0x288(0x08)
	struct UPanelWidget* pwStuffSlots; // 0x290(0x08)
	struct UProgressBar* pbHunger; // 0x298(0x08)
	struct UProgressBar* pbThirst; // 0x2a0(0x08)
	struct UTextBlock* tbHunger; // 0x2a8(0x08)
	struct UTextBlock* tbThirst; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnHungerTutorial; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnThirstTutorial; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void OnThirstTutorialButtonClicked(); // Function WTL.WTLHUDCharacterEquipment.OnThirstTutorialButtonClicked // (Final|Native|Private) // @ game+0x180be70
	void OnHungerTutorialButtonClicked(); // Function WTL.WTLHUDCharacterEquipment.OnHungerTutorialButtonClicked // (Final|Native|Private) // @ game+0x180be90
	void OnCharacterRotatorRotateStop(); // Function WTL.WTLHUDCharacterEquipment.OnCharacterRotatorRotateStop // (Final|Native|Private) // @ game+0x180bfe0
	void OnCharacterRotatorRotateStart(); // Function WTL.WTLHUDCharacterEquipment.OnCharacterRotatorRotateStart // (Final|Native|Private) // @ game+0x180c030
	void OnCharacterPreviewCheckBoxCheckStateChanged(bool bIsChecked); // Function WTL.WTLHUDCharacterEquipment.OnCharacterPreviewCheckBoxCheckStateChanged // (Final|Native|Private) // @ game+0x180beb0
};

// Class WTL.WTLHUDCharacterInfoWindow
// Size: 0x488 (Inherited: 0x288)
struct UWTLHUDCharacterInfoWindow : UWTLHUDWindowBase {
	struct UImage* imgFounder; // 0x288(0x08)
	struct UTextBlock* tbName; // 0x290(0x08)
	struct UHorizontalBox* hbID; // 0x298(0x08)
	struct UTextBlock* tbID; // 0x2a0(0x08)
	struct UProgressBar* pbHealth; // 0x2a8(0x08)
	struct UTextBlock* tbHealth; // 0x2b0(0x08)
	struct UHorizontalBox* hbClan; // 0x2b8(0x08)
	struct UButton* btnClanImage; // 0x2c0(0x08)
	struct UImage* imgClan; // 0x2c8(0x08)
	struct UTextBlock* tbClanName; // 0x2d0(0x08)
	struct UHorizontalBox* hbPlayerType; // 0x2d8(0x08)
	struct UTextBlock* tbPlayerType; // 0x2e0(0x08)
	struct UTextBlock* tbLevel; // 0x2e8(0x08)
	struct UTextBlock* tbClass; // 0x2f0(0x08)
	struct UTextBlock* tbSex; // 0x2f8(0x08)
	struct UProgressBar* pbStrength; // 0x300(0x08)
	struct UTextBlock* tbStrength; // 0x308(0x08)
	struct UProgressBar* pbDexterity; // 0x310(0x08)
	struct UTextBlock* tbDexterity; // 0x318(0x08)
	struct UProgressBar* pbStamina; // 0x320(0x08)
	struct UTextBlock* tbStamina; // 0x328(0x08)
	struct UProgressBar* pbAccuracy; // 0x330(0x08)
	struct UTextBlock* tbAccuracy; // 0x338(0x08)
	struct UProgressBar* pbIntelligence; // 0x340(0x08)
	struct UTextBlock* tbIntelligence; // 0x348(0x08)
	struct UProgressBar* pbFortune; // 0x350(0x08)
	struct UTextBlock* tbFortune; // 0x358(0x08)
	struct UWidgetSwitcher* wsFractionImage; // 0x360(0x08)
	struct UTextBlock* tbFraction; // 0x368(0x08)
	struct UHorizontalBox* hbRank; // 0x370(0x08)
	struct UImage* imgRank; // 0x378(0x08)
	struct UTextBlock* tbRank; // 0x380(0x08)
	struct UProgressBar* pbReputation; // 0x388(0x08)
	struct UTextBlock* tbReputation; // 0x390(0x08)
	struct UWTLCommonButton* ucBtnSendMessage; // 0x398(0x08)
	struct UWTLCommonButton* ucBtnSendInviteToGroup; // 0x3a0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x3a8(0x08)
	char pad_3B0[0x20]; // 0x3b0(0x20)
	struct FLinearColor RedColorParam; // 0x3d0(0x10)
	struct FLinearColor YellowColorParam; // 0x3e0(0x10)
	struct FLinearColor GreenColorParam; // 0x3f0(0x10)
	struct FSlateBrush DefaultClanIconBrush; // 0x400(0x88)

	void OnSendMessageBtnClick(); // Function WTL.WTLHUDCharacterInfoWindow.OnSendMessageBtnClick // (Final|Native|Private) // @ game+0x180c290
	void OnSendInviteToGroupBtnClick(); // Function WTL.WTLHUDCharacterInfoWindow.OnSendInviteToGroupBtnClick // (Final|Native|Private) // @ game+0x180c270
	void OnClanImageBtnClicked(); // Function WTL.WTLHUDCharacterInfoWindow.OnClanImageBtnClicked // (Final|Native|Private) // @ game+0x180c250
};

// Class WTL.WTLHUDChatSmileButton
// Size: 0x380 (Inherited: 0x340)
struct UWTLHUDChatSmileButton : UWTLCommonButton {
	char pad_340[0x20]; // 0x340(0x20)
	struct FString TextAliases; // 0x360(0x10)
	char pad_370[0x10]; // 0x370(0x10)
};

// Class WTL.WTLHUDChatTabButton
// Size: 0x12e8 (Inherited: 0x12c8)
struct UWTLHUDChatTabButton : UWTLCommonTabButton {
	char pad_12C8[0x18]; // 0x12c8(0x18)
	enum class EWTLFiltersChat FilterChat; // 0x12e0(0x01)
	char pad_12E1[0x7]; // 0x12e1(0x07)
};

// Class WTL.WTLHUDClanInfoWindow
// Size: 0x380 (Inherited: 0x288)
struct UWTLHUDClanInfoWindow : UWTLHUDWindowBase {
	struct UImage* imgClan; // 0x288(0x08)
	struct UTextBlock* tbClanName; // 0x290(0x08)
	struct UTextBlock* tbClanLevel; // 0x298(0x08)
	struct UHorizontalBox* hbFraction; // 0x2a0(0x08)
	struct UTextBlock* tbFractionName; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsFractionImage; // 0x2b0(0x08)
	struct UHorizontalBox* hbLeaderName; // 0x2b8(0x08)
	struct UTextBlock* tbLeaderName; // 0x2c0(0x08)
	struct UHorizontalBox* hbStewardName; // 0x2c8(0x08)
	struct UTextBlock* tbStewardName; // 0x2d0(0x08)
	struct UTextBlock* tbMemberCount; // 0x2d8(0x08)
	struct UTextBlock* tbCandidateCount; // 0x2e0(0x08)
	struct UTextBlock* tbPvPScore; // 0x2e8(0x08)
	struct UTextBlock* tbPvEScore; // 0x2f0(0x08)
	struct UTextBlock* tbCraftScore; // 0x2f8(0x08)
	struct UProgressBar* pbReputation; // 0x300(0x08)
	struct UTextBlock* tbReputation; // 0x308(0x08)
	struct UTextBlock* tbScore; // 0x310(0x08)
	struct UWidgetSwitcher* wsClanDescription; // 0x318(0x08)
	struct UTextBlock* tbClanDescriptionShort; // 0x320(0x08)
	struct UTextBlock* tbClanDescriptionLong; // 0x328(0x08)
	struct UWTLCommonHotkeyButton* ucBtnClanApplication; // 0x330(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x338(0x08)
	struct UCanvasPanel* cpApply; // 0x340(0x08)
	char pad_348[0x4]; // 0x348(0x04)
	struct FLinearColor BadClanReputationProgressBarFillColor; // 0x34c(0x10)
	struct FLinearColor MeduimClanReputationProgressBarFillColor; // 0x35c(0x10)
	struct FLinearColor GoodClanReputationProgressBarFillColor; // 0x36c(0x10)
	char pad_37C[0x4]; // 0x37c(0x04)
};

// Class WTL.WTLHUDClanStorage
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDClanStorage : UWTLHUDInteractiveWidget {
	struct UWTLHUDClanStorageWindow* ucClanStorageWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDClanStorageLogItem
// Size: 0x268 (Inherited: 0x260)
struct UWTLHUDClanStorageLogItem : UUserWidget {
	struct URichTextBlock* rtbLogText; // 0x260(0x08)
};

// Class WTL.WTLHUDClanStoragePolicyGroupItem
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLHUDClanStoragePolicyGroupItem : UUserWidget {
	struct UTextBlock* tbName; // 0x260(0x08)
	struct UCheckBox* cbCanPut; // 0x268(0x08)
	struct UCheckBox* cbCanTake; // 0x270(0x08)
	char pad_278[0x40]; // 0x278(0x40)

	void OnCanTakeCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDClanStoragePolicyGroupItem.OnCanTakeCheckBoxStateChanged // (Final|Native|Private) // @ game+0x180c710
	void OnCanPutCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDClanStoragePolicyGroupItem.OnCanPutCheckBoxStateChanged // (Final|Native|Private) // @ game+0x180c7f0
};

// Class WTL.WTLHUDClanStoragePolicyWindow
// Size: 0x318 (Inherited: 0x288)
struct UWTLHUDClanStoragePolicyWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbTabName; // 0x288(0x08)
	struct UCheckBox* cbCanPutAll; // 0x290(0x08)
	struct UCheckBox* cbCanTakeAll; // 0x298(0x08)
	struct UScrollBox* sbPolicyGroupItems; // 0x2a0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnApply; // 0x2a8(0x08)
	char pad_2B0[0x40]; // 0x2b0(0x40)
	struct TSoftClassPtr<UObject> PolicyGroupItemWidgetClass; // 0x2f0(0x28)

	void OnPolicyGroupItemCanTakeCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDClanStoragePolicyWindow.OnPolicyGroupItemCanTakeCheckBoxStateChanged // (Final|Native|Private) // @ game+0x180ca90
	void OnPolicyGroupItemCanPutCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDClanStoragePolicyWindow.OnPolicyGroupItemCanPutCheckBoxStateChanged // (Final|Native|Private) // @ game+0x180cb70
	void OnCanTakeAllCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDClanStoragePolicyWindow.OnCanTakeAllCheckBoxStateChanged // (Final|Native|Private) // @ game+0x180cc50
	void OnCanPutAllCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDClanStoragePolicyWindow.OnCanPutAllCheckBoxStateChanged // (Final|Native|Private) // @ game+0x180cd30
	void OnApplyBtnClicked(); // Function WTL.WTLHUDClanStoragePolicyWindow.OnApplyBtnClicked // (Final|Native|Private) // @ game+0x180ca70
};

// Class WTL.WTLHUDClanStorageSlot
// Size: 0xcf0 (Inherited: 0xcc0)
struct UWTLHUDClanStorageSlot : UWTLHUDInventorySlot {
	char pad_CC0[0x30]; // 0xcc0(0x30)
};

// Class WTL.WTLHUDClanStorageTabButton
// Size: 0x1380 (Inherited: 0x12c8)
struct UWTLHUDClanStorageTabButton : UWTLCommonTabButton {
	struct UImage* imgTab; // 0x12c8(0x08)
	struct FSlateBrush BuyStorageTabImageBrush; // 0x12d0(0x88)
	struct TSoftObjectPtr<UTexture2D> NoAccessTexture; // 0x1358(0x28)
};

// Class WTL.WTLHUDClanStorageTabBuyWindow
// Size: 0x2f0 (Inherited: 0x288)
struct UWTLHUDClanStorageTabBuyWindow : UWTLHUDWindowBase {
	struct UVerticalBox* vbRequiredItems; // 0x288(0x08)
	struct UWrapBox* wpRequiredItems; // 0x290(0x08)
	struct UVerticalBox* vbRequiredTokens; // 0x298(0x08)
	struct UTextBlock* tbCurrentTokens; // 0x2a0(0x08)
	struct UTextBlock* tbRequiredTokens; // 0x2a8(0x08)
	struct UImage* imgTokensDone; // 0x2b0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnBuy; // 0x2b8(0x08)
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct TSoftClassPtr<UObject> ItemSlotWidgetClass; // 0x2c8(0x28)

	void OnBuyConfirmed(); // Function WTL.WTLHUDClanStorageTabBuyWindow.OnBuyConfirmed // (Final|Native|Private) // @ game+0x180d130
	void OnBuyButtonClicked(); // Function WTL.WTLHUDClanStorageTabBuyWindow.OnBuyButtonClicked // (Final|Native|Private) // @ game+0x180d1d0
};

// Class WTL.WTLHUDClanStorageTabImageItem
// Size: 0x4c8 (Inherited: 0x4a0)
struct UWTLHUDClanStorageTabImageItem : UWTLCommonSelectedItem {
	struct UImage* imgTab; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)
};

// Class WTL.WTLHUDClanStorageTabImageSelectWindow
// Size: 0x2d8 (Inherited: 0x288)
struct UWTLHUDClanStorageTabImageSelectWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbTabName; // 0x288(0x08)
	struct UWrapBox* wbTabImageItems; // 0x290(0x08)
	struct UWTLCommonHotkeyButton* ucBtnApply; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct TSoftClassPtr<UObject> ClanStorageTabImageItemWidgetClass; // 0x2b0(0x28)

	void OnTabImageItemClicked(char ImageIndex); // Function WTL.WTLHUDClanStorageTabImageSelectWindow.OnTabImageItemClicked // (Final|Native|Private) // @ game+0x180d4b0
	void OnApplyBtnClicked(); // Function WTL.WTLHUDClanStorageTabImageSelectWindow.OnApplyBtnClicked // (Final|Native|Private) // @ game+0x180d440
};

// Class WTL.WTLHUDClanStorageTabSettingsItem
// Size: 0x350 (Inherited: 0x260)
struct UWTLHUDClanStorageTabSettingsItem : UUserWidget {
	struct UButton* btnPreviousImage; // 0x260(0x08)
	struct UButton* btnNextImage; // 0x268(0x08)
	struct UImage* imgTab; // 0x270(0x08)
	struct UEditableTextBox* etbTabName; // 0x278(0x08)
	struct UEditableTextBox* etbTabDescription; // 0x280(0x08)
	struct UButton* btnConfigureAccessPolicy; // 0x288(0x08)
	char pad_290[0xc0]; // 0x290(0xc0)

	void OnTabNameTextBoxTextChanged(struct FText& InText); // Function WTL.WTLHUDClanStorageTabSettingsItem.OnTabNameTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x180d920
	struct FEventReply OnTabImageMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLHUDClanStorageTabSettingsItem.OnTabImageMouseButtonDown // (Final|Native|Private|HasOutParms) // @ game+0x180dab0
	void OnTabDescriptionTextBoxTextChanged(struct FText& InText); // Function WTL.WTLHUDClanStorageTabSettingsItem.OnTabDescriptionTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x180d7f0
	void OnPreviousImageBtnClicked(); // Function WTL.WTLHUDClanStorageTabSettingsItem.OnPreviousImageBtnClicked // (Final|Native|Private) // @ game+0x180dd00
	void OnNextImageBtnClicked(); // Function WTL.WTLHUDClanStorageTabSettingsItem.OnNextImageBtnClicked // (Final|Native|Private) // @ game+0x180da50
	void OnConfigureAccessPolicyBtnClicked(); // Function WTL.WTLHUDClanStorageTabSettingsItem.OnConfigureAccessPolicyBtnClicked // (Final|Native|Private) // @ game+0x180d7d0
};

// Class WTL.WTLHUDClanStorageTabStorage
// Size: 0x268 (Inherited: 0x260)
struct UWTLHUDClanStorageTabStorage : UUserWidget {
	struct UPanelWidget* pwStorage; // 0x260(0x08)
};

// Class WTL.WTLHUDInteractiveSlotsStorage
// Size: 0x300 (Inherited: 0x288)
struct UWTLHUDInteractiveSlotsStorage : UWTLHUDWindowBase {
	char pad_288[0x8]; // 0x288(0x08)
	struct UBorder* bStorage; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct TSoftClassPtr<UObject> ItemSlotClass; // 0x2a0(0x28)
	struct FLinearColor NormalWeightColor; // 0x2c8(0x10)
	struct FLinearColor MediumWeightColor; // 0x2d8(0x10)
	struct FLinearColor HighWeightColor; // 0x2e8(0x10)
	float DefaultStorageWidth; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
};

// Class WTL.WTLHUDClanStorageWindow
// Size: 0x7e8 (Inherited: 0x300)
struct UWTLHUDClanStorageWindow : UWTLHUDInteractiveSlotsStorage {
	struct UWidgetSwitcher* wsClanStorage; // 0x300(0x08)
	struct UTextBlock* tbTabName; // 0x308(0x08)
	struct UCanvasPanel* cpTabDescription; // 0x310(0x08)
	struct UScrollBox* sbTabDescription; // 0x318(0x08)
	struct UTextBlock* tbTabDescription; // 0x320(0x08)
	struct UWTLCommonTextButton* ucBtnLog; // 0x328(0x08)
	struct UWidgetSwitcher* wsButtons; // 0x330(0x08)
	struct UWTLCommonTextButton* ucBtnSettings; // 0x338(0x08)
	struct UWTLCommonTextButton* ucBtnBack; // 0x340(0x08)
	struct UWTLCommonTextButton* ucBtnApplySettings; // 0x348(0x08)
	struct UWidgetSwitcher* wsStorage; // 0x350(0x08)
	struct UWidgetSwitcher* wsStorageSlots; // 0x358(0x08)
	struct UWidgetSwitcher* wsStorages; // 0x360(0x08)
	struct UHorizontalBox* hbTools; // 0x368(0x08)
	struct UCanvasPanel* cpWeight; // 0x370(0x08)
	struct UHorizontalBox* hbWeightPBArea; // 0x378(0x08)
	struct UProgressBar* pbWeight; // 0x380(0x08)
	struct UHorizontalBox* hbWeightPBTextArea; // 0x388(0x08)
	struct UTextBlock* tbCurrentWeight; // 0x390(0x08)
	struct UTextBlock* tbMaxWeight; // 0x398(0x08)
	struct UHorizontalBox* hbToolsBtns; // 0x3a0(0x08)
	struct UWTLCommonButton* ucBtnUniteAllItems; // 0x3a8(0x08)
	struct UWTLCommonButton* ucBtnOptimizeItems; // 0x3b0(0x08)
	struct UVerticalBox* vbTabs; // 0x3b8(0x08)
	struct UImage* imgClan; // 0x3c0(0x08)
	struct UVerticalBox* vbTabSettingsList; // 0x3c8(0x08)
	struct UWidgetSwitcher* wsLog; // 0x3d0(0x08)
	struct UHorizontalBox* hbLogTypeTabButtons; // 0x3d8(0x08)
	struct UHorizontalBox* hbLogFilters; // 0x3e0(0x08)
	struct UWTLCommonComboBoxString* cbsLogOperationType; // 0x3e8(0x08)
	struct UEditableTextBox* etbLogCharacterName; // 0x3f0(0x08)
	struct UWTLCommonComboBoxString* cbsLogTab; // 0x3f8(0x08)
	struct UScrollBox* sbLog; // 0x400(0x08)
	struct UHorizontalBox* hbLogPagesManage; // 0x408(0x08)
	struct UWTLCommonComboBoxString* cbsLogItemsPerPage; // 0x410(0x08)
	struct UTextBlock* tbLogCurrentPageIndex; // 0x418(0x08)
	struct UTextBlock* tbLogPagesCount; // 0x420(0x08)
	struct UButton* btnPreviousLogPage; // 0x428(0x08)
	struct UButton* btnNextLogPage; // 0x430(0x08)
	struct UHorizontalBox* hbTabBalance; // 0x438(0x08)
	struct UTextBlock* tbTabBalance; // 0x440(0x08)
	struct UWTLCommonTextButton* ucBtnWithdrawTokens; // 0x448(0x08)
	struct UWTLCommonTextButton* ucBtnDepositTokens; // 0x450(0x08)
	char pad_458[0x70]; // 0x458(0x70)
	struct TSoftClassPtr<UObject> ClanStorageTabButtonWidgetClass; // 0x4c8(0x28)
	struct TSoftClassPtr<UObject> ClanStorageTabSettingsItemWidgetClass; // 0x4f0(0x28)
	struct TSoftClassPtr<UObject> ClanStorageTabStorageWidgetClass; // 0x518(0x28)
	struct TSoftClassPtr<UObject> ClanStorageLogItemWidgetClass; // 0x540(0x28)
	float WithClanIconWithToolsBtnsWeightBarWidth; // 0x568(0x04)
	float WithClanIconNonToolsBtnsWeightBarWidth; // 0x56c(0x04)
	struct FButtonStyle ApplySettingsButtonStyle; // 0x570(0x278)

	void OnWithdrawTokensBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnWithdrawTokensBtnClicked // (Final|Native|Private) // @ game+0x180f5a0
	void OnUniteAllItemsBtnClick(); // Function WTL.WTLHUDClanStorageWindow.OnUniteAllItemsBtnClick // (Final|Native|Private) // @ game+0x180f5e0
	void OnTabSettingsInfoChanged(); // Function WTL.WTLHUDClanStorageWindow.OnTabSettingsInfoChanged // (Final|Native|Private) // @ game+0x180ff60
	void OnTabBtnClicked(char TabIndex); // Function WTL.WTLHUDClanStorageWindow.OnTabBtnClicked // (Final|Native|Private) // @ game+0x180f150
	void OnSettingsBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnSettingsBtnClicked // (Final|Native|Private) // @ game+0x180f660
	void OnPreviousLogPageBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnPreviousLogPageBtnClicked // (Final|Native|Private) // @ game+0x180f6c0
	void OnOptimizeItemsBtnClick(); // Function WTL.WTLHUDClanStorageWindow.OnOptimizeItemsBtnClick // (Final|Native|Private) // @ game+0x180f5c0
	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDClanStorageWindow.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x180f4a0
	void OnNextLogPageBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnNextLogPageBtnClicked // (Final|Native|Private) // @ game+0x180f680
	void OnLogTypeTabButtonClicked(char LogTypeIndex); // Function WTL.WTLHUDClanStorageWindow.OnLogTypeTabButtonClicked // (Final|Native|Private) // @ game+0x180fe70
	void OnLogTabSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDClanStorageWindow.OnLogTabSelectionChanged // (Final|Native|Private) // @ game+0x180f8c0
	void OnLogOperationTypeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDClanStorageWindow.OnLogOperationTypeSelectionChanged // (Final|Native|Private) // @ game+0x180fc80
	void OnLogItemsPerPageSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDClanStorageWindow.OnLogItemsPerPageSelectionChanged // (Final|Native|Private) // @ game+0x180f6f0
	void OnLogDataChanged(); // Function WTL.WTLHUDClanStorageWindow.OnLogDataChanged // (Final|Native|Private) // @ game+0x180f600
	void OnLogCharacterNameTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDClanStorageWindow.OnLogCharacterNameTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x180fab0
	void OnLogBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnLogBtnClicked // (Final|Native|Private) // @ game+0x180ff40
	void OnDepositTokensBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnDepositTokensBtnClicked // (Final|Native|Private) // @ game+0x180f580
	void OnContentChanged(); // Function WTL.WTLHUDClanStorageWindow.OnContentChanged // (Final|Native|Private) // @ game+0x180f480
	void OnClanStorageSlotDragDetected(); // Function WTL.WTLHUDClanStorageWindow.OnClanStorageSlotDragDetected // (Final|Native|Private) // @ game+0x180f120
	void OnClanStorageSlotDragCancelled(); // Function WTL.WTLHUDClanStorageWindow.OnClanStorageSlotDragCancelled // (Final|Native|Private) // @ game+0x180f0f0
	void OnBuyStorageTabConfirm(); // Function WTL.WTLHUDClanStorageWindow.OnBuyStorageTabConfirm // (Final|Native|Private) // @ game+0x180f0d0
	void OnBackBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnBackBtnClicked // (Final|Native|Private) // @ game+0x180f640
	void OnApplySettingsBtnClicked(); // Function WTL.WTLHUDClanStorageWindow.OnApplySettingsBtnClicked // (Final|Native|Private) // @ game+0x180f620
};

// Class WTL.WTLHUDCommentaryWindow
// Size: 0x338 (Inherited: 0x288)
struct UWTLHUDCommentaryWindow : UWTLHUDWindowBase {
	struct UEditableTextBox* etbCommentary; // 0x288(0x08)
	struct UTextBlock* tbErrorMessage; // 0x290(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x298(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x2a0(0x08)
	char pad_2A8[0x90]; // 0x2a8(0x90)

	void OnOKBtnClicked(); // Function WTL.WTLHUDCommentaryWindow.OnOKBtnClicked // (Final|Native|Private) // @ game+0x1810750
	void OnCommentaryTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDCommentaryWindow.OnCommentaryTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1810570
	void OnCommentaryTextBoxChanged(struct FText& InText); // Function WTL.WTLHUDCommentaryWindow.OnCommentaryTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x1810440
};

// Class WTL.WTLHUDCommissionAddUpdateWindow
// Size: 0x388 (Inherited: 0x288)
struct UWTLHUDCommissionAddUpdateWindow : UWTLHUDWindowBase {
	struct UWTLHUDItemSlot* ucCommissionItemSlot; // 0x288(0x08)
	struct UTextBlock* tbMinItemPrice; // 0x290(0x08)
	struct UTextBlock* tbPercent; // 0x298(0x08)
	struct UTextBlock* tbDayTax; // 0x2a0(0x08)
	struct UTextBlock* tbMaxDaysCount; // 0x2a8(0x08)
	struct UTextBlock* tbMinBuyCount; // 0x2b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbMinBuyCount; // 0x2b8(0x08)
	struct USpacer* spMinBuyCount; // 0x2c0(0x08)
	struct UEditableTextBox* etbPrice; // 0x2c8(0x08)
	struct UTextBlock* tbLowPriceWarning; // 0x2d0(0x08)
	struct UHorizontalBox* hbDays; // 0x2d8(0x08)
	struct UTextBlock* tbDaysPlus; // 0x2e0(0x08)
	struct UTextBlock* tbDaysCount; // 0x2e8(0x08)
	struct UWTLCommonButton* ucBtnMaxDaysDown; // 0x2f0(0x08)
	struct UWTLCommonButton* ucBtnDaysDown; // 0x2f8(0x08)
	struct UWTLCommonButton* ucBtnDaysUp; // 0x300(0x08)
	struct UWTLCommonButton* ucBtnMaxDaysUp; // 0x308(0x08)
	struct UHorizontalBox* hbTotalItemPrice; // 0x310(0x08)
	struct UTextBlock* tbTotalItemPrice; // 0x318(0x08)
	struct UHorizontalBox* hbCommissionTax; // 0x320(0x08)
	struct UTextBlock* tbCommissionTax; // 0x328(0x08)
	struct UWTLCommonHotkeyButton* ucBtnAction; // 0x330(0x08)
	char pad_338[0x50]; // 0x338(0x50)

	void OnPriceTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnPriceTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1810af0
	void OnPriceTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnPriceTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1810cc0
	void OnMinBuyCountTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnMinBuyCountTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1810910
	void OnBtnMaxDaysUpClicked(); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnBtnMaxDaysUpClicked // (Final|Native|Private) // @ game+0x1810890
	void OnBtnMaxDaysDownClicked(); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnBtnMaxDaysDownClicked // (Final|Native|Private) // @ game+0x18108f0
	void OnBtnDaysUpClicked(); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnBtnDaysUpClicked // (Final|Native|Private) // @ game+0x18108b0
	void OnBtnDaysDownClicked(); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnBtnDaysDownClicked // (Final|Native|Private) // @ game+0x18108d0
	void OnActionBtnClicked(); // Function WTL.WTLHUDCommissionAddUpdateWindow.OnActionBtnClicked // (Final|Native|Private) // @ game+0x1810870
};

// Class WTL.WTLHUDCommissionDropArea
// Size: 0x2b8 (Inherited: 0x268)
struct UWTLHUDCommissionDropArea : UWTLHUDWidgetBase {
	struct UBorder* bBorder; // 0x268(0x08)
	struct UWidgetSwitcher* wsHint; // 0x270(0x08)
	char pad_278[0x10]; // 0x278(0x10)
	struct FLinearColor DefaultBorderColor; // 0x288(0x10)
	struct FLinearColor HoveredBorderColor; // 0x298(0x10)
	struct FLinearColor ProhibitedBorderColor; // 0x2a8(0x10)
};

// Class WTL.WTLHUDCommissionList
// Size: 0x340 (Inherited: 0x268)
struct UWTLHUDCommissionList : UWTLHUDWidgetBase {
	struct UTextBlock* tbCommissionMoney; // 0x268(0x08)
	struct UWTLCommonTextButton* ucBtnTakeCommissionMoney; // 0x270(0x08)
	struct UTextBlock* tbCurrentCommissionItemCount; // 0x278(0x08)
	struct UTextBlock* tbMaxCommissionItemCount; // 0x280(0x08)
	struct UHorizontalBox* hbManageButtons; // 0x288(0x08)
	struct UWTLCommonButton* ucBtnWarning; // 0x290(0x08)
	struct UWTLCommonButton* ucBtnUpdateCommissionItem; // 0x298(0x08)
	struct UWTLCommonButton* ucBtnRemoveItemFromCommission; // 0x2a0(0x08)
	struct UVerticalBox* vbList; // 0x2a8(0x08)
	struct UScrollBox* sbList; // 0x2b0(0x08)
	char pad_2B8[0x58]; // 0x2b8(0x58)
	struct UWTLHUDItemSlot* m_DroppedItemSlot; // 0x310(0x08)
	struct TSoftClassPtr<UObject> CommissionListItemWidgetClass; // 0x318(0x28)

	void OnWarningBtnClicked(); // Function WTL.WTLHUDCommissionList.OnWarningBtnClicked // (Final|Native|Private) // @ game+0x1811790
	void OnUpdateCommissionBtnClicked(); // Function WTL.WTLHUDCommissionList.OnUpdateCommissionBtnClicked // (Final|Native|Private) // @ game+0x1811770
	void OnTakeCommissionMoneyBtnClicked(); // Function WTL.WTLHUDCommissionList.OnTakeCommissionMoneyBtnClicked // (Final|Native|Private) // @ game+0x18117b0
	void OnRemoveItemFromCommissionConfirm(); // Function WTL.WTLHUDCommissionList.OnRemoveItemFromCommissionConfirm // (Final|Native|Private) // @ game+0x1811730
	void OnRemoveItemFromCommissionBtnClicked(); // Function WTL.WTLHUDCommissionList.OnRemoveItemFromCommissionBtnClicked // (Final|Native|Private) // @ game+0x1811750
	void OnMessageDialogHide(); // Function WTL.WTLHUDCommissionList.OnMessageDialogHide // (Final|Native|Private) // @ game+0x18117d0
	void OnCommissionListItemClicked(enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLHUDCommissionList.OnCommissionListItemClicked // (Final|Native|Private) // @ game+0x18115d0
	void OnAddItemDropped(enum class EWTLItemType ListItemType, uint64_t ListItemID, uint16_t ListItemTypeID, int32_t ListItemCount, struct UWTLHUDItemSlot* DroppedItemSlot); // Function WTL.WTLHUDCommissionList.OnAddItemDropped // (Final|Native|Private) // @ game+0x18112c0
	void OnAddItemConfirm(); // Function WTL.WTLHUDCommissionList.OnAddItemConfirm // (Final|Native|Private) // @ game+0x1811180
};

// Class WTL.WTLHUDCommissionListItem
// Size: 0x518 (Inherited: 0x4a0)
struct UWTLHUDCommissionListItem : UWTLCommonSelectedItem {
	struct UTextBlock* tbName; // 0x4a0(0x08)
	struct UTextBlock* tbCount; // 0x4a8(0x08)
	struct UTextBlock* tbMinBuyCount; // 0x4b0(0x08)
	struct UTextBlock* tbPrice; // 0x4b8(0x08)
	struct UTextBlock* tbDate; // 0x4c0(0x08)
	struct UTextBlock* tbExpireDate; // 0x4c8(0x08)
	char pad_4D0[0x48]; // 0x4d0(0x48)
};

// Class WTL.WTLHUDSellStorageBase
// Size: 0x3f0 (Inherited: 0x268)
struct UWTLHUDSellStorageBase : UWTLHUDWidgetBase {
	struct UBorder* bMain; // 0x268(0x08)
	struct UHorizontalBox* hbItemTypesTabButtons; // 0x270(0x08)
	struct UWidgetSwitcher* wsStorage; // 0x278(0x08)
	struct UScrollBox* sbStorage; // 0x280(0x08)
	struct UWrapBox* wbStorage; // 0x288(0x08)
	struct UTextBlock* tbNoItemsFound; // 0x290(0x08)
	struct UHorizontalBox* hbSubType; // 0x298(0x08)
	struct UHorizontalBox* hbWeaponCaliber; // 0x2a0(0x08)
	struct UHorizontalBox* hbItemSort; // 0x2a8(0x08)
	struct UWTLCommonComboBoxString* cbsItemSubTypes; // 0x2b0(0x08)
	struct UWTLCommonComboBoxString* cbsWeaponCaliber; // 0x2b8(0x08)
	struct UWTLCommonComboBoxString* cbsItemSort; // 0x2c0(0x08)
	char pad_2C8[0xb0]; // 0x2c8(0xb0)
	struct TSoftClassPtr<UObject> ItemTypeTabButtonClass; // 0x378(0x28)
	struct TSoftClassPtr<UObject> SellStorageItemClass; // 0x3a0(0x28)
	struct TSoftObjectPtr<UFMODEvent> BuySellItemsSoundEvent; // 0x3c8(0x28)

	void SelectItemTypeCategory(enum class EWTLItemType ItemType); // Function WTL.WTLHUDSellStorageBase.SelectItemTypeCategory // (Native|Protected) // @ game+0x18345b0
	void OnWeaponCaliberSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDSellStorageBase.OnWeaponCaliberSelectionChanged // (Native|Protected) // @ game+0x1834210
	void OnTabBtnClicked(enum class EWTLItemType ItemType); // Function WTL.WTLHUDSellStorageBase.OnTabBtnClicked // (Native|Protected) // @ game+0x1834680
	void OnSellItemsChanged(); // Function WTL.WTLHUDSellStorageBase.OnSellItemsChanged // (Native|Protected) // @ game+0x1833da0
	void OnItemSubTypeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDSellStorageBase.OnItemSubTypeSelectionChanged // (Native|Protected) // @ game+0x18343e0
	void OnItemSortSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDSellStorageBase.OnItemSortSelectionChanged // (Native|Protected) // @ game+0x1834040
	void OnBuyItemConfirmed(); // Function WTL.WTLHUDSellStorageBase.OnBuyItemConfirmed // (Native|Protected) // @ game+0x1833df0
	void OnBuyItemCanceled(); // Function WTL.WTLHUDSellStorageBase.OnBuyItemCanceled // (Final|Native|Protected) // @ game+0x1833dc0
	void OnBuyItem(struct FWTLSellItemInfo& SellItemInfo, bool bIsCannotUseItem); // Function WTL.WTLHUDSellStorageBase.OnBuyItem // (Final|Native|Protected|HasOutParms) // @ game+0x1833e30
	void BuyItem(); // Function WTL.WTLHUDSellStorageBase.BuyItem // (Final|Native|Protected) // @ game+0x1833e10
};

// Class WTL.WTLHUDCommissionSellStorage
// Size: 0x430 (Inherited: 0x3f0)
struct UWTLHUDCommissionSellStorage : UWTLHUDSellStorageBase {
	struct UWidgetSwitcher* wsMain; // 0x3f0(0x08)
	struct UHorizontalBox* hbFilters; // 0x3f8(0x08)
	struct UHorizontalBox* hbPagesManage; // 0x400(0x08)
	struct UWTLCommonComboBoxString* cbsItemsPerPage; // 0x408(0x08)
	struct UWTLCommonPageSwitcher* ucPageSwitcher; // 0x410(0x08)
	char pad_418[0x18]; // 0x418(0x18)

	void OnUpdateDelay(); // Function WTL.WTLHUDCommissionSellStorage.OnUpdateDelay // (Final|Native|Private) // @ game+0x1811e50
	void OnPageSwitched(int32_t CurrentPageIndex); // Function WTL.WTLHUDCommissionSellStorage.OnPageSwitched // (Final|Native|Private) // @ game+0x1811e70
	void OnItemsPerPageSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDCommissionSellStorage.OnItemsPerPageSelectionChanged // (Final|Native|Private) // @ game+0x1811f40
};

// Class WTL.WTLHUDContentInventory
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDContentInventory : UWTLHUDInteractiveWidget {
	struct UWTLHUDContentInventoryStorage* ucContentInventoryStorage; // 0x278(0x08)
};

// Class WTL.WTLHUDContentInventoryStorage
// Size: 0xf70 (Inherited: 0x300)
struct UWTLHUDContentInventoryStorage : UWTLHUDInteractiveSlotsStorage {
	struct UImage* imgStashBackground; // 0x300(0x08)
	struct UImage* imgPremiumStashBackground; // 0x308(0x08)
	struct UImage* imgFurnaceBackground; // 0x310(0x08)
	struct UImage* imgPressMachineBackground; // 0x318(0x08)
	struct UImage* imgAmmoPressBackground; // 0x320(0x08)
	struct UImage* imgChemicalStationBackground; // 0x328(0x08)
	struct UWTLCommonButton* ucBtnCloseStash; // 0x330(0x08)
	struct UHorizontalBox* hbMain; // 0x338(0x08)
	struct UWidgetSwitcher* wsStorage; // 0x340(0x08)
	struct UTextBlock* tbCharacterName; // 0x348(0x08)
	struct UHorizontalBox* hbOldWeight; // 0x350(0x08)
	struct UProgressBar* pbOldWeight; // 0x358(0x08)
	struct UTextBlock* tbCurrentOldWeight; // 0x360(0x08)
	struct UTextBlock* tbMaxOldWeight; // 0x368(0x08)
	struct UHorizontalBox* hbBar; // 0x370(0x08)
	struct UHorizontalBox* hbWeight; // 0x378(0x08)
	struct UProgressBar* pbWeight; // 0x380(0x08)
	struct UTextBlock* tbCurrentWeight; // 0x388(0x08)
	struct UTextBlock* tbMaxWeight; // 0x390(0x08)
	struct UButton* btnPutGift; // 0x398(0x08)
	struct UWidgetSwitcher* wsBtns; // 0x3a0(0x08)
	struct UButton* btnExtinguishCampfire; // 0x3a8(0x08)
	struct UWTLCommonButton* ucBtnRemoveStash; // 0x3b0(0x08)
	struct UHorizontalBox* hbToolsBtns; // 0x3b8(0x08)
	struct UWTLCommonButton* ucBtnUniteAllItems; // 0x3c0(0x08)
	struct UWTLCommonButton* ucBtnOptimizeItems; // 0x3c8(0x08)
	struct UCanvasPanel* cpStorage; // 0x3d0(0x08)
	struct UScrollBox* sbStorage; // 0x3d8(0x08)
	struct UHorizontalBox* hbCaliberName; // 0x3e0(0x08)
	struct UTextBlock* tbCaliberName; // 0x3e8(0x08)
	struct UHorizontalBox* hbTakeAllBtn; // 0x3f0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnTakeAll; // 0x3f8(0x08)
	struct UBorder* bCampfireEnergy; // 0x400(0x08)
	struct UProgressBar* pbCampfireEnergyImage; // 0x408(0x08)
	struct UBorder* bStorageItemsBasePrice; // 0x410(0x08)
	struct UTextBlock* tbStorageItemsBasePrice; // 0x418(0x08)
	char pad_420[0xc8]; // 0x420(0xc8)
	float InitialStorageHeight; // 0x4e8(0x04)
	struct FLinearColor NormalNewWeightColor; // 0x4ec(0x10)
	struct FLinearColor MediumNewWeightColor; // 0x4fc(0x10)
	struct FLinearColor HighNewWeightColor; // 0x50c(0x10)
	struct FLinearColor DefaultStorageBorderBrushColor; // 0x51c(0x10)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct FSlateBrush DefaultStorageBorderBrush; // 0x530(0x88)
	struct FSlateBrush NPCActorStorageBorderBrush; // 0x5b8(0x88)
	struct FSlateBrush StorageBoxStorageBorderBrush; // 0x640(0x88)
	struct FSlateBrush MachinegunStorageBorderBrush; // 0x6c8(0x88)
	struct FProgressBarStyle DefaultStorageWeightProgressBarStyle; // 0x750(0x1a0)
	struct FProgressBarStyle NPCActorStorageWeightProgressBarStyle; // 0x8f0(0x1a0)
	struct FProgressBarStyle StashStorageWeightProgressBarStyle; // 0xa90(0x1a0)
	struct FProgressBarStyle PremiumStashStorageWeightProgressBarStyle; // 0xc30(0x1a0)
	struct FProgressBarStyle CampfireStorageWeightProgressBarStyle; // 0xdd0(0x1a0)

	void TakeAllConfirmed(); // Function WTL.WTLHUDContentInventoryStorage.TakeAllConfirmed // (Final|Native|Private) // @ game+0x1812400
	void OnUniteAllItemsBtnClick(); // Function WTL.WTLHUDContentInventoryStorage.OnUniteAllItemsBtnClick // (Final|Native|Private) // @ game+0x18123e0
	void OnTakeAllBtnClick(); // Function WTL.WTLHUDContentInventoryStorage.OnTakeAllBtnClick // (Final|Native|Private) // @ game+0x1812420
	void OnStorageScrolled(float CurrentOffset); // Function WTL.WTLHUDContentInventoryStorage.OnStorageScrolled // (Final|Native|Private) // @ game+0x1812440
	void OnRemoveStashBtnClick(); // Function WTL.WTLHUDContentInventoryStorage.OnRemoveStashBtnClick // (Final|Native|Private) // @ game+0x1812380
	void OnPutGiftBtnClick(); // Function WTL.WTLHUDContentInventoryStorage.OnPutGiftBtnClick // (Final|Native|Private) // @ game+0x1812360
	void OnOptimizeItemsBtnClick(); // Function WTL.WTLHUDContentInventoryStorage.OnOptimizeItemsBtnClick // (Final|Native|Private) // @ game+0x18123c0
	void OnObjectDestroyed(); // Function WTL.WTLHUDContentInventoryStorage.OnObjectDestroyed // (Final|Native|Private) // @ game+0x1812320
	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDContentInventoryStorage.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x180f4a0
	void OnExtinguishCampfireBtnClick(); // Function WTL.WTLHUDContentInventoryStorage.OnExtinguishCampfireBtnClick // (Final|Native|Private) // @ game+0x18123a0
	void OnContentChanged(); // Function WTL.WTLHUDContentInventoryStorage.OnContentChanged // (Final|Native|Private) // @ game+0x1812340
	void OnCampfireWasExtinguish(); // Function WTL.WTLHUDContentInventoryStorage.OnCampfireWasExtinguish // (Final|Native|Private) // @ game+0x1812300
};

// Class WTL.WTLHUDCraft
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDCraft : UWTLHUDInteractiveWidget {
	struct UWTLHUDCraftWindow* ucCraftWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDNeedCountSlot
// Size: 0x3b8 (Inherited: 0x398)
struct UWTLHUDNeedCountSlot : UWTLHUDItemTypeSlot {
	struct UImage* imgDone; // 0x398(0x08)
	struct UTextBlock* tbItemFindCount; // 0x3a0(0x08)
	struct UTextBlock* tbItemCountSeparator; // 0x3a8(0x08)
	char pad_3B0[0x8]; // 0x3b0(0x08)
};

// Class WTL.WTLHUDCraftIngredientSlot
// Size: 0x3d8 (Inherited: 0x3b8)
struct UWTLHUDCraftIngredientSlot : UWTLHUDNeedCountSlot {
	struct UWTLHUDCraftInstrumentIcon* ucCraftInstrumentIcon; // 0x3b8(0x08)
	char pad_3C0[0x18]; // 0x3c0(0x18)
};

// Class WTL.WTLHUDCraftInstrumentIcon
// Size: 0x290 (Inherited: 0x260)
struct UWTLHUDCraftInstrumentIcon : UUserWidget {
	struct UWTLHUDCraftInstrumentInfo* m_CraftInstrumentInfoWidget; // 0x260(0x08)
	struct TSoftClassPtr<UObject> CraftInstrumentInfoWidgetClass; // 0x268(0x28)
};

// Class WTL.WTLHUDCraftInstrumentInfo
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLHUDCraftInstrumentInfo : UUserWidget {
	struct UWidgetSwitcher* wsInfo; // 0x260(0x08)
	struct UHorizontalBox* hbMinEnergy; // 0x268(0x08)
	struct UTextBlock* tbMinEnergyPercent; // 0x270(0x08)
	struct UHorizontalBox* hbEnergyCost; // 0x278(0x08)
	struct UTextBlock* tbEnergyCostPercent; // 0x280(0x08)
	struct UTextBlock* tbMinConditionPercent; // 0x288(0x08)
	struct UTextBlock* tbWearPercent; // 0x290(0x08)
	struct UTextBlock* tbWillBeConsumedWithFullWear; // 0x298(0x08)
};

// Class WTL.WTLHUDCraftResultSlot
// Size: 0x3d0 (Inherited: 0x398)
struct UWTLHUDCraftResultSlot : UWTLHUDItemTypeSlot {
	struct UWTLHUDPossibleModificationIcon* ucPossibleModificationIcon; // 0x398(0x08)
	char pad_3A0[0x30]; // 0x3a0(0x30)
};

// Class WTL.WTLHUDCraftWindow
// Size: 0x3d8 (Inherited: 0x288)
struct UWTLHUDCraftWindow : UWTLHUDWindowBase {
	struct UWidgetSwitcher* wsRecipesList; // 0x288(0x08)
	struct UTextBlock* tbCraftType; // 0x290(0x08)
	struct UScrollBox* sbCraftItemsList; // 0x298(0x08)
	struct UWidgetSwitcher* wsRecipe; // 0x2a0(0x08)
	struct UScrollBox* sbRecipeInfo; // 0x2a8(0x08)
	struct UHorizontalBox* hbRecipeID; // 0x2b0(0x08)
	struct UTextBlock* tbRecipeID; // 0x2b8(0x08)
	struct UTextBlock* tbItemName; // 0x2c0(0x08)
	struct UTextBlock* tbDescription; // 0x2c8(0x08)
	struct UHorizontalBox* hbNeedCraftExperience; // 0x2d0(0x08)
	struct UHorizontalBox* hbNeedSurvivalExperience; // 0x2d8(0x08)
	struct UTextBlock* tbNeedCraftExperience; // 0x2e0(0x08)
	struct UTextBlock* tbNeedSurvivalExperience; // 0x2e8(0x08)
	struct UWidgetSwitcher* wsReadyCraftExperience; // 0x2f0(0x08)
	struct UHorizontalBox* hbCurrentCraftExperience; // 0x2f8(0x08)
	struct UTextBlock* tbCurrentCraftExperience; // 0x300(0x08)
	struct UWidgetSwitcher* wsReadySurvivalExperience; // 0x308(0x08)
	struct UHorizontalBox* hbCurrentSurvivalExperience; // 0x310(0x08)
	struct UTextBlock* tbCurrentSurvivalExperience; // 0x318(0x08)
	struct UTextBlock* tbRequiredItems; // 0x320(0x08)
	struct UWrapBox* wbIngredients; // 0x328(0x08)
	struct UWrapBox* wbResults; // 0x330(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCreate; // 0x338(0x08)
	char pad_340[0x18]; // 0x340(0x18)
	enum class EWTLCraftType CraftType; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct TSoftClassPtr<UObject> CraftWindowItemWidgetClass; // 0x360(0x28)
	struct TSoftClassPtr<UObject> IngredientItemSlotWidgetClass; // 0x388(0x28)
	struct TSoftClassPtr<UObject> ResultItemSlotWidgetClass; // 0x3b0(0x28)

	void OnCraftWindowItemClicked(int32_t CraftItemID); // Function WTL.WTLHUDCraftWindow.OnCraftWindowItemClicked // (Final|Native|Private) // @ game+0x1812f10
	void OnCraftObjectActiveStateChanged(bool IsActive); // Function WTL.WTLHUDCraftWindow.OnCraftObjectActiveStateChanged // (Final|Native|Private) // @ game+0x1812fe0
	void OnBtnCreateClicked(); // Function WTL.WTLHUDCraftWindow.OnBtnCreateClicked // (Final|Native|Private) // @ game+0x1812ef0
};

// Class WTL.WTLHUDCraftWindowItem
// Size: 0x4d8 (Inherited: 0x4a0)
struct UWTLHUDCraftWindowItem : UWTLCommonSelectedItem {
	struct UImage* imgCraftIcon; // 0x4a0(0x08)
	struct UBorder* bText; // 0x4a8(0x08)
	struct UTextBlock* tbItemName; // 0x4b0(0x08)
	char pad_4B8[0x20]; // 0x4b8(0x20)
};

// Class WTL.WTLHUDCrosshair
// Size: 0x2d0 (Inherited: 0x268)
struct UWTLHUDCrosshair : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpMain; // 0x268(0x08)
	struct UBorder* bLeftSector; // 0x270(0x08)
	struct UBorder* bTopSector; // 0x278(0x08)
	struct UBorder* bRightSector; // 0x280(0x08)
	struct UBorder* bBottomSector; // 0x288(0x08)
	char pad_290[0x1c]; // 0x290(0x1c)
	float SectorsCalmPositionStand; // 0x2ac(0x04)
	float SectorsCalmPositionCrouch; // 0x2b0(0x04)
	float SectorsCalmPositionProne; // 0x2b4(0x04)
	float SectorsCalmLength; // 0x2b8(0x04)
	float SectorsIncreasePositionStep; // 0x2bc(0x04)
	float SectorsLengthMultiplierPerStep; // 0x2c0(0x04)
	float MaxSectorsIncreasePosition; // 0x2c4(0x04)
	float SectorsPositionDecreaseInterpSpeed; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
};

// Class WTL.WTLHUDDamagePointer
// Size: 0x2d0 (Inherited: 0x268)
struct UWTLHUDDamagePointer : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpMain; // 0x268(0x08)
	struct TArray<struct UWTLHUDDamagePointerItem*> m_IndicatorPool; // 0x270(0x10)
	char pad_280[0x10]; // 0x280(0x10)
	struct TSoftClassPtr<UObject> DamagePointerItemWidgetClass; // 0x290(0x28)
	float ItemPositionY; // 0x2b8(0x04)
	struct FVector2D ItemSize; // 0x2bc(0x08)
	struct FVector2D ItemPivot; // 0x2c4(0x08)
	int32_t IndicatorPoolSize; // 0x2cc(0x04)
};

// Class WTL.WTLHUDDamagePointerItem
// Size: 0x290 (Inherited: 0x260)
struct UWTLHUDDamagePointerItem : UUserWidget {
	struct UImage* imgDamagePointer; // 0x260(0x08)
	char pad_268[0x18]; // 0x268(0x18)
	struct UWidgetAnimation* DisappearAnimation; // 0x280(0x08)
	float DisappearDelayTime; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
};

// Class WTL.WTLHUDDraggedSlot
// Size: 0x278 (Inherited: 0x260)
struct UWTLHUDDraggedSlot : UUserWidget {
	struct UImage* imgItem; // 0x260(0x08)
	struct UImage* imgItemType; // 0x268(0x08)
	struct UTextBlock* tbItemTypeID; // 0x270(0x08)
};

// Class WTL.WTLHUDEmotionStateExitHint
// Size: 0x278 (Inherited: 0x268)
struct UWTLHUDEmotionStateExitHint : UWTLHUDWidgetBase {
	struct UTextBlock* tbToggleEmotionsMenuKey; // 0x268(0x08)
	struct UWidgetSwitcher* wsHint; // 0x270(0x08)
};

// Class WTL.WTLHUDEventMessageWindow
// Size: 0x2a0 (Inherited: 0x288)
struct UWTLHUDEventMessageWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbTitleMessage; // 0x288(0x08)
	struct UTextBlock* tbEventMessage; // 0x290(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x298(0x08)
};

// Class WTL.WTLHUDEventNotificationItem
// Size: 0x2a8 (Inherited: 0x280)
struct UWTLHUDEventNotificationItem : UWTLCommonNotificationItem {
	struct UBorder* bNotificationImage; // 0x280(0x08)
	struct UBorder* bNotificationMessage; // 0x288(0x08)
	struct UImage* imgNotification; // 0x290(0x08)
	struct TArray<struct FWTLNotificationTypeConfig> NotificationConfig; // 0x298(0x10)
};

// Class WTL.WTLHUDEventNotificator
// Size: 0x2a8 (Inherited: 0x2a8)
struct UWTLHUDEventNotificator : UWTLCommonNotificator {
};

// Class WTL.WTLHUDEventPointInfo
// Size: 0x2c8 (Inherited: 0x268)
struct UWTLHUDEventPointInfo : UWTLHUDInfoWidget {
	struct UTextBlock* tbEventName; // 0x268(0x08)
	struct UTextBlock* tbTimeLeft; // 0x270(0x08)
	struct UProgressBar* pbProgress; // 0x278(0x08)
	struct UTextBlock* tbEventDescription; // 0x280(0x08)
	struct UVerticalBox* vbEventTasks; // 0x288(0x08)
	char pad_290[0x10]; // 0x290(0x10)
	struct TSoftClassPtr<UObject> EventPointInfoTaskWidgetClass; // 0x2a0(0x28)

	void UpdateEventTasks(); // Function WTL.WTLHUDEventPointInfo.UpdateEventTasks // (Final|Native|Private) // @ game+0x1813590
};

// Class WTL.WTLHUDEventPointInfoTask
// Size: 0x278 (Inherited: 0x260)
struct UWTLHUDEventPointInfoTask : UUserWidget {
	struct UTextBlock* tbTaskName; // 0x260(0x08)
	struct UTextBlock* tbCurrentValue; // 0x268(0x08)
	struct UTextBlock* tbNeedValue; // 0x270(0x08)
};

// Class WTL.WTLHUDExtractor
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDExtractor : UWTLHUDInteractiveWidget {
	struct UWTLHUDExtractorWindow* ucExtractorWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDExtractorStorage
// Size: 0x310 (Inherited: 0x2c0)
struct UWTLHUDExtractorStorage : UWTLHUDBaseActionStorage {
	struct UWTLHUDInventorySlot* ucContainerSlot; // 0x2c0(0x08)
	struct UWidgetSwitcher* wsInfluences; // 0x2c8(0x08)
	struct UScrollBox* sbInfluences; // 0x2d0(0x08)
	char pad_2D8[0x10]; // 0x2d8(0x10)
	struct TSoftClassPtr<UObject> CharacterEffectInfluenceWidgetClass; // 0x2e8(0x28)

	void OnContainerSlotInit(struct UWTLHUDInventorySlot* InventorySlot); // Function WTL.WTLHUDExtractorStorage.OnContainerSlotInit // (Final|Native|Protected) // @ game+0x1813810
	void OnContainerSlotClear(uint64_t ItemId); // Function WTL.WTLHUDExtractorStorage.OnContainerSlotClear // (Final|Native|Protected) // @ game+0x1813730
};

// Class WTL.WTLHUDExtractorWindow
// Size: 0x290 (Inherited: 0x288)
struct UWTLHUDExtractorWindow : UWTLHUDWindowBase {
	struct UWTLHUDExtractorStorage* ucExtractorStorage; // 0x288(0x08)
};

// Class WTL.WTLHUDFastAccessSlot
// Size: 0xbf0 (Inherited: 0xbb0)
struct UWTLHUDFastAccessSlot : UWTLHUDItemSlot {
	struct UTextBlock* tbSlotNumber; // 0xbb0(0x08)
	struct UTextBlock* tbActionKey; // 0xbb8(0x08)
	char pad_BC0[0x30]; // 0xbc0(0x30)
};

// Class WTL.WTLHUDFastAccessSlots
// Size: 0x360 (Inherited: 0x268)
struct UWTLHUDFastAccessSlots : UWTLHUDWidgetBase {
	struct UPanelWidget* hbMain; // 0x268(0x08)
	struct UPanelWidget* hbStorage; // 0x270(0x08)
	struct UImage* imgPDAItemBackground; // 0x278(0x08)
	struct UUserWidget* ucPDANotification; // 0x280(0x08)
	struct UTextBlock* tbPDAActionKey; // 0x288(0x08)
	struct UButton* btnPDAItem; // 0x290(0x08)
	struct UImage* imgFeedbackWindowBackground; // 0x298(0x08)
	struct UTextBlock* tbFeedbackWindowActionKey; // 0x2a0(0x08)
	struct UButton* btnFeedbackWindow; // 0x2a8(0x08)
	struct UCanvasPanel* cpGodConsoleBtn; // 0x2b0(0x08)
	struct UImage* imgGodConsoleBtnBackground; // 0x2b8(0x08)
	struct UTextBlock* tbGodConsoleActionKey; // 0x2c0(0x08)
	struct UButton* btnGodConsole; // 0x2c8(0x08)
	struct UWTLCommonButton* ucBtnAccountInventory; // 0x2d0(0x08)
	struct UUserWidget* ucAccountInventoryNotification; // 0x2d8(0x08)
	struct UTextBlock* tbAccountInventoryActionKey; // 0x2e0(0x08)
	struct UWTLHUDBaseActionStorage* m_BaseActionStorage; // 0x2e8(0x08)
	char pad_2F0[0x28]; // 0x2f0(0x28)
	struct TSoftClassPtr<UObject> ItemSlotClass; // 0x318(0x28)
	float StartWidgetSizeX; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct UWidgetAnimation* HideAnimation; // 0x348(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)

	void UpdatePDANotifications(); // Function WTL.WTLHUDFastAccessSlots.UpdatePDANotifications // (Final|Native|Private) // @ game+0x1813f80
	void OnPDAItemBtnUnhover(); // Function WTL.WTLHUDFastAccessSlots.OnPDAItemBtnUnhover // (Final|Native|Private) // @ game+0x1813e70
	void OnPDAItemBtnHover(); // Function WTL.WTLHUDFastAccessSlots.OnPDAItemBtnHover // (Final|Native|Private) // @ game+0x1813ec0
	void OnPDAItemBtnClick(); // Function WTL.WTLHUDFastAccessSlots.OnPDAItemBtnClick // (Final|Native|Private) // @ game+0x1813f10
	void OnGodConsoleBtnUnhover(); // Function WTL.WTLHUDFastAccessSlots.OnGodConsoleBtnUnhover // (Final|Native|Private) // @ game+0x1813ca0
	void OnGodConsoleBtnHover(); // Function WTL.WTLHUDFastAccessSlots.OnGodConsoleBtnHover // (Final|Native|Private) // @ game+0x1813cf0
	void OnGodConsoleBtnClick(); // Function WTL.WTLHUDFastAccessSlots.OnGodConsoleBtnClick // (Final|Native|Private) // @ game+0x1813d40
	void OnFeedbackWindowBtnUnhover(); // Function WTL.WTLHUDFastAccessSlots.OnFeedbackWindowBtnUnhover // (Final|Native|Private) // @ game+0x1813d60
	void OnFeedbackWindowBtnHover(); // Function WTL.WTLHUDFastAccessSlots.OnFeedbackWindowBtnHover // (Final|Native|Private) // @ game+0x1813db0
	void OnFeedbackWindowBtnClick(); // Function WTL.WTLHUDFastAccessSlots.OnFeedbackWindowBtnClick // (Final|Native|Private) // @ game+0x1813e00
	void OnAccountInventoryItemsUpdated(struct TArray<struct FWTLAccountInventoryItem>& AccountInventoryItems); // Function WTL.WTLHUDFastAccessSlots.OnAccountInventoryItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1813fa0
	void OnAccountInventoryBtnClick(); // Function WTL.WTLHUDFastAccessSlots.OnAccountInventoryBtnClick // (Final|Native|Private) // @ game+0x1813c60
};

// Class WTL.WTLHUDFeedbackWindow
// Size: 0x4e0 (Inherited: 0x288)
struct UWTLHUDFeedbackWindow : UWTLHUDWindowBase {
	struct UCanvasPanel* cpMain; // 0x288(0x08)
	struct UWidgetSwitcher* wsPanelsSelector; // 0x290(0x08)
	struct UWTLCommonComboBoxString* cbsFeedbackType; // 0x298(0x08)
	struct UEditableTextBox* etbEmail; // 0x2a0(0x08)
	struct UMultiLineEditableTextBox* etbReportText; // 0x2a8(0x08)
	struct UWTLCommonCheckBox* cbAttachScreenshot; // 0x2b0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnSendReport; // 0x2b8(0x08)
	struct UImage* imgRequestResult; // 0x2c0(0x08)
	struct UTextBlock* tbFeedbackResult; // 0x2c8(0x08)
	struct UTextBlock* tbFeedbackResultLabel; // 0x2d0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnResultOK; // 0x2d8(0x08)
	struct UEditableTextBox* etbSuspectPlayerName; // 0x2e0(0x08)
	struct UTextBlock* tbReportLetterCurrent; // 0x2e8(0x08)
	struct UTextBlock* tbReportLetterMax; // 0x2f0(0x08)
	char pad_2F8[0x48]; // 0x2f8(0x48)
	struct FSlateBrush RequestSuccessBrush; // 0x340(0x88)
	struct FSlateBrush ServerDoesNotResponseBrush; // 0x3c8(0x88)
	struct FSlateBrush RequestErrorBrush; // 0x450(0x88)
	struct UWidgetAnimation* FileTransferAnimation; // 0x4d8(0x08)

	void OnSuspectPlayerNameTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDFeedbackWindow.OnSuspectPlayerNameTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1814750
	void OnSendReportButtonClick(); // Function WTL.WTLHUDFeedbackWindow.OnSendReportButtonClick // (Final|Native|Private) // @ game+0x1814440
	void OnResultOKButtonClick(); // Function WTL.WTLHUDFeedbackWindow.OnResultOKButtonClick // (Final|Native|Private) // @ game+0x1814420
	void OnReportTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDFeedbackWindow.OnReportTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1814460
	void OnReportTextBoxChanged(struct FText& Text); // Function WTL.WTLHUDFeedbackWindow.OnReportTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x1814620
	void OnFeedbackTypeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDFeedbackWindow.OnFeedbackTypeSelectionChanged // (Final|Native|Private) // @ game+0x1814e10
	void OnEmailTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDFeedbackWindow.OnEmailTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1814990
	void OnEmailTextBoxChanged(struct FText& Text); // Function WTL.WTLHUDFeedbackWindow.OnEmailTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x1814cb0
};

// Class WTL.WTLHUDFinishFishingHint
// Size: 0x280 (Inherited: 0x268)
struct UWTLHUDFinishFishingHint : UWTLHUDWidgetBase {
	struct URichTextBlock* rtbHintText; // 0x268(0x08)
	struct UCanvasPanel* cpMain; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)
};

// Class WTL.WTLHUDFPSCounter
// Size: 0x320 (Inherited: 0x268)
struct UWTLHUDFPSCounter : UWTLHUDWidgetBase {
	struct UHorizontalBox* hbMain; // 0x268(0x08)
	struct UTextBlock* tbFPSCounter; // 0x270(0x08)
	char pad_278[0x20]; // 0x278(0x20)
	struct FSlateColor LowFPSColor; // 0x298(0x28)
	struct FSlateColor MediumFPSColor; // 0x2c0(0x28)
	struct FSlateColor HighFPSColor; // 0x2e8(0x28)
	struct FVector2D PositionWhenMinimapIsVisible; // 0x310(0x08)
	struct FVector2D PositionWhenMinimapNotVisible; // 0x318(0x08)
};

// Class WTL.WTLHUDGameVersionInfo
// Size: 0x290 (Inherited: 0x268)
struct UWTLHUDGameVersionInfo : UWTLHUDWidgetBase {
	struct UTextBlock* tbDevelopmentStage; // 0x268(0x08)
	struct UTextBlock* tbVersion; // 0x270(0x08)
	struct UTextBlock* tbPing; // 0x278(0x08)
	struct UTextBlock* tbCharacterID; // 0x280(0x08)
	char pad_288[0x8]; // 0x288(0x08)
};

// Class WTL.WTLHUDGodConsole
// Size: 0x288 (Inherited: 0x278)
struct UWTLHUDGodConsole : UWTLHUDInteractiveWidget {
	struct UBackgroundBlur* bBackgroundBlur; // 0x278(0x08)
	struct UWTLHUDGodConsoleWindow* ucGodConsoleWindow; // 0x280(0x08)
};

// Class WTL.WTLHUDGodConsoleFavouriteButton
// Size: 0x830 (Inherited: 0x340)
struct UWTLHUDGodConsoleFavouriteButton : UWTLCommonButton {
	struct FButtonStyle NotAddedButtonStyle; // 0x340(0x278)
	struct FButtonStyle WasAddedButtonStyle; // 0x5b8(0x278)
};

// Class WTL.WTLHUDGodConsoleWindow
// Size: 0x328 (Inherited: 0x288)
struct UWTLHUDGodConsoleWindow : UWTLHUDWindowBase {
	struct UHorizontalBox* hbTopTabBtns; // 0x288(0x08)
	struct UWTLCommonTabButton* tbtnGameInstance; // 0x290(0x08)
	struct UHorizontalBox* hbBottomTabBtns; // 0x298(0x08)
	struct UWTLCommonTabButton* tbtnItems; // 0x2a0(0x08)
	struct UWTLCommonTabButton* tbtnKits; // 0x2a8(0x08)
	struct UWTLCommonTabButton* tbtnLocations; // 0x2b0(0x08)
	struct UWTLCommonTabButton* tbtnQuests; // 0x2b8(0x08)
	struct UWidgetSwitcher* wsTab; // 0x2c0(0x08)
	struct UWTLHUDGodConsoleWindowCommands* ucCommands; // 0x2c8(0x08)
	struct UWTLHUDGodConsoleWindowTab* ucGameInstance; // 0x2d0(0x08)
	struct UWTLHUDGodConsoleWindowTab* ucScripts; // 0x2d8(0x08)
	struct UWTLHUDGodConsoleWindowItems* ucItems; // 0x2e0(0x08)
	struct UWTLHUDGodConsoleWindowKitsList* ucKitsList; // 0x2e8(0x08)
	struct UWTLHUDGodConsoleWindowMonstersList* ucMonstersList; // 0x2f0(0x08)
	struct UWTLHUDGodConsoleWindowLocationsList* ucLocationsList; // 0x2f8(0x08)
	struct UWTLHUDGodConsoleWindowQuestsList* ucQuestsList; // 0x300(0x08)
	struct UWTLCommonTextButton* btnDestroyAllInventoryItems; // 0x308(0x08)
	char pad_310[0x18]; // 0x310(0x18)

	void OnTabBtnClicked(char TabIndex); // Function WTL.WTLHUDGodConsoleWindow.OnTabBtnClicked // (Final|Native|Private) // @ game+0x1815720
	void OnDestroyAllInventoryItemsButtonClicked(); // Function WTL.WTLHUDGodConsoleWindow.OnDestroyAllInventoryItemsButtonClicked // (Final|Native|Private) // @ game+0x18156b0
};

// Class WTL.WTLHUDGodConsoleWindowTab
// Size: 0x260 (Inherited: 0x260)
struct UWTLHUDGodConsoleWindowTab : UUserWidget {
};

// Class WTL.WTLHUDGodConsoleWindowCommands
// Size: 0x800 (Inherited: 0x260)
struct UWTLHUDGodConsoleWindowCommands : UWTLHUDGodConsoleWindowTab {
	struct UPanelWidget* pwTabButtons; // 0x260(0x08)
	struct UWTLCommonTabButton* tbCharacterSelf; // 0x268(0x08)
	struct UWTLCommonTabButton* tbClan; // 0x270(0x08)
	struct UWTLCommonTabButton* tbVehicle; // 0x278(0x08)
	struct UWidgetSwitcher* wsTab; // 0x280(0x08)
	struct UWTLCommonTextCheckBox* cbPvP; // 0x288(0x08)
	struct UWTLCommonTextCheckBox* cbNPCActivity; // 0x290(0x08)
	struct UWTLCommonTextButton* btnKillAllNPC; // 0x298(0x08)
	struct UWTLCommonTextButton* btnGetMeshInfo; // 0x2a0(0x08)
	struct UWTLCommonTextButton* btnListPlayers; // 0x2a8(0x08)
	struct UWTLCommonTextButton* btnKick; // 0x2b0(0x08)
	struct UWTLCommonTextButton* btnKill; // 0x2b8(0x08)
	struct UEditableTextBox* etbKKCharacterName; // 0x2c0(0x08)
	struct UWTLCommonTextButton* btnSystemEvent; // 0x2c8(0x08)
	struct UWTLUtilityNumberTextBox* ntbSETime; // 0x2d0(0x08)
	struct UEditableTextBox* etbSEComment; // 0x2d8(0x08)
	struct UWTLCommonTextButton* btnSystemMessage; // 0x2e0(0x08)
	struct UEditableTextBox* etbSMText; // 0x2e8(0x08)
	struct UWTLCommonTextButton* btnSafeZoneEnable; // 0x2f0(0x08)
	struct UWTLCommonTextButton* btnSafeZoneDisable; // 0x2f8(0x08)
	struct UWTLUtilityNumberTextBox* ntbSafeZoneID; // 0x300(0x08)
	struct UWTLCommonTextButton* btnForceInformer; // 0x308(0x08)
	struct UWTLCommonTextButton* btnGameState; // 0x310(0x08)
	struct UWTLUtilityNumberTextBox* ntbChatContextMenuOpenMethod; // 0x318(0x08)
	struct UWTLCommonTextButton* btnRepairAll; // 0x320(0x08)
	struct UWTLCommonTextButton* btnAddPDAModule; // 0x328(0x08)
	struct UWTLCommonTextButton* btnRemovePDAModule; // 0x330(0x08)
	struct UWTLUtilityNumberTextBox* ntbPDAModuleID; // 0x338(0x08)
	struct UWTLCommonTextButton* btnVisitPortal; // 0x340(0x08)
	struct UWTLUtilityNumberTextBox* ntbPortalID; // 0x348(0x08)
	struct UWTLCommonTextButton* btnSetHunger; // 0x350(0x08)
	struct UWTLUtilityNumberTextBox* ntbHungerValue; // 0x358(0x08)
	struct UWTLCommonTextButton* btnSetThirst; // 0x360(0x08)
	struct UWTLUtilityNumberTextBox* ntbThirstValue; // 0x368(0x08)
	struct UWTLCommonTextButton* btnSetCustomizationPart; // 0x370(0x08)
	struct UWTLCommonComboBoxString* cbsCustomizationPart; // 0x378(0x08)
	struct UWTLUtilityNumberTextBox* ntbCustomizationPartID; // 0x380(0x08)
	struct UWTLCommonTextButton* btnSetExperience; // 0x388(0x08)
	struct UWTLCommonComboBoxString* cbsExperienceType; // 0x390(0x08)
	struct UWTLUtilityNumberTextBox* ntbExperienceValue; // 0x398(0x08)
	struct UWTLCommonTextButton* btnSetItemCondition; // 0x3a0(0x08)
	struct UWTLUtilityNumberTextBox* ntbInventorySlotNumber; // 0x3a8(0x08)
	struct UWTLUtilityNumberTextBox* ntbItemConditionValue; // 0x3b0(0x08)
	struct UHorizontalBox* hbCharacterModes; // 0x3b8(0x08)
	struct UWTLCommonTextCheckBox* cbGodMode; // 0x3c0(0x08)
	struct UWTLCommonTextCheckBox* cbSprintMode; // 0x3c8(0x08)
	struct UWTLCommonTextCheckBox* cbDropMode; // 0x3d0(0x08)
	struct UWTLCommonTextCheckBox* cbPvPMode; // 0x3d8(0x08)
	struct UHorizontalBox* hbCharacterRecover; // 0x3e0(0x08)
	struct UWTLCommonTextButton* btnRecoverHealth; // 0x3e8(0x08)
	struct UWTLCommonTextButton* btnRecoverStamina; // 0x3f0(0x08)
	struct UWTLCommonTextButton* btnRecoverAll; // 0x3f8(0x08)
	struct UHorizontalBox* hbCharacterSexAndClass; // 0x400(0x08)
	struct UWTLCommonTextButton* btnChangeSex; // 0x408(0x08)
	struct UWTLCommonComboBoxString* cbsCharacterClasses; // 0x410(0x08)
	struct UWTLCommonTextButton* btnClearSkills; // 0x418(0x08)
	struct UWTLCommonTextButton* btnCraftGiveItems; // 0x420(0x08)
	struct UWTLUtilityNumberTextBox* ntbCraftItemID; // 0x428(0x08)
	struct UWTLCommonTextButton* btnAddEffect; // 0x430(0x08)
	struct UWTLCommonComboBoxString* cbsCharacterEffectType; // 0x438(0x08)
	struct USpinBox* sbCharacterEffectValue; // 0x440(0x08)
	struct UWTLCommonTextButton* btnTeleport; // 0x448(0x08)
	struct UEditableTextBox* etbTeleportParameter; // 0x450(0x08)
	struct UEditableTextBox* etbCharacterName; // 0x458(0x08)
	struct UWTLCommonTextButton* btnGiveExperience; // 0x460(0x08)
	struct UWTLUtilityNumberTextBox* ntbGEValue; // 0x468(0x08)
	struct UWTLCommonTextButton* btnClearExperience; // 0x470(0x08)
	struct UWTLCommonTextButton* btnGiveLevel; // 0x478(0x08)
	struct UWTLUtilityNumberTextBox* ntbGLCharacterLevel; // 0x480(0x08)
	struct UWTLCommonTextButton* btnGiveMoney; // 0x488(0x08)
	struct UWTLUtilityNumberTextBox* ntbGMValue; // 0x490(0x08)
	struct UWTLCommonTextButton* btnSetFaction; // 0x498(0x08)
	struct UWTLCommonComboBoxString* cbsCharacterFactions; // 0x4a0(0x08)
	struct UWTLCommonTextButton* btnSetClan; // 0x4a8(0x08)
	struct UWTLUtilityNumberTextBox* ntbSetClanID; // 0x4b0(0x08)
	struct UWTLCommonTextButton* btnSetReputation; // 0x4b8(0x08)
	struct UWTLUtilityNumberTextBox* ntbSRValue; // 0x4c0(0x08)
	struct UTextBlock* tbReputationPercentHint; // 0x4c8(0x08)
	struct UWTLCommonTextButton* btnSpawnAsMonster; // 0x4d0(0x08)
	struct UWTLUtilityNumberTextBox* ntbMonsterID; // 0x4d8(0x08)
	struct UWTLUtilityNumberTextBox* ntbMonsterLevel; // 0x4e0(0x08)
	struct UWTLUtilityNumberTextBox* ntbMonsterLifeSpan; // 0x4e8(0x08)
	struct UWTLCommonTextButton* btnGiveScore; // 0x4f0(0x08)
	struct UWTLUtilityNumberTextBox* ntbScoreDeltaValue; // 0x4f8(0x08)
	struct UWTLCommonTextButton* btnSetWeaponExperience; // 0x500(0x08)
	struct UWTLUtilityNumberTextBox* ntbWeaponID; // 0x508(0x08)
	struct UWTLUtilityNumberTextBox* ntbWeaponExperienceValue; // 0x510(0x08)
	struct UWTLCommonTextButton* btnTeleportCharacter; // 0x518(0x08)
	struct UEditableTextBox* etbTeleportCharacterParameter; // 0x520(0x08)
	struct UWTLCommonTextButton* btnAirDropForce; // 0x528(0x08)
	struct UWTLCommonTextButton* btnAirDropWhen; // 0x530(0x08)
	struct UWTLUtilityNumberTextBox* ntbAirDropID; // 0x538(0x08)
	struct UWTLUtilityNumberTextBox* ntbAirDropLifeTime; // 0x540(0x08)
	struct UWTLUtilityNumberTextBox* ntbAirDropMaxUse; // 0x548(0x08)
	struct UWTLCommonTextButton* btnAirDropSpawn; // 0x550(0x08)
	struct UWTLCommonTextButton* btnCurrentWeather; // 0x558(0x08)
	struct UWTLCommonTextButton* btnChangeWeather; // 0x560(0x08)
	struct UWTLCommonComboBoxString* cbsWeatherTypes; // 0x568(0x08)
	struct UWTLCommonTextButton* btnLightningToCharacter; // 0x570(0x08)
	struct UEditableTextBox* etbWLCharacterName; // 0x578(0x08)
	struct UWTLCommonTextButton* btnLightningToViewpoint; // 0x580(0x08)
	struct UWTLUtilityNumberTextBox* ntbClanPvPScore; // 0x588(0x08)
	struct UWTLUtilityNumberTextBox* ntbClanPvEScore; // 0x590(0x08)
	struct UWTLUtilityNumberTextBox* ntbClanCraftScore; // 0x598(0x08)
	struct UWTLUtilityNumberTextBox* ntbClanTechnologyScore; // 0x5a0(0x08)
	struct UWTLCommonTextButton* btnGiveClanScore; // 0x5a8(0x08)
	struct UWTLCommonTextButton* btnGiveClanSkill; // 0x5b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbClanSkillID; // 0x5b8(0x08)
	struct UWTLCommonTextButton* btnClearClanSkills; // 0x5c0(0x08)
	struct UWTLCommonTextButton* btnBecomeClanLeader; // 0x5c8(0x08)
	struct UWTLCommonTextButton* btnSpawnVehicle; // 0x5d0(0x08)
	struct UWTLUtilityNumberTextBox* ntbVehicleID; // 0x5d8(0x08)
	struct UWidgetSwitcher* wsSpectatorMode; // 0x5e0(0x08)
	struct UWTLCommonTextButton* btnExitSpectator; // 0x5e8(0x08)
	struct UWTLCommonTextButton* btnBecomeSpectator; // 0x5f0(0x08)
	struct UHorizontalBox* hbSpectate; // 0x5f8(0x08)
	struct UWTLCommonTextButton* btnSpectate; // 0x600(0x08)
	struct UEditableTextBox* etbSpectateCharacterName; // 0x608(0x08)
	struct UTextBlock* tbSpectatorSpeedUpKey; // 0x610(0x08)
	struct UTextBlock* tbSpectatorSpeedDownKey; // 0x618(0x08)
	struct UTextBlock* tbSpectatorViewNextPlayerKey; // 0x620(0x08)
	struct UTextBlock* tbSpectatorViewPreviousPlayerKey; // 0x628(0x08)
	struct UTextBlock* tbSpectatorViewSelfKey; // 0x630(0x08)
	struct UTextBlock* tbSpectatorToggleNoclipKey; // 0x638(0x08)
	struct UTextBlock* tbSpectatorToggleHUDKey; // 0x640(0x08)
	struct UTextBlock* tbSpectatorToggleDebugHUDKey; // 0x648(0x08)
	struct UTextBlock* tbSpectatorChangeViewModeKey; // 0x650(0x08)
	struct UBorder* bSendingMailMessages; // 0x658(0x08)
	struct UEditableTextBox* etbSendMailToCharacterName; // 0x660(0x08)
	struct UEditableTextBox* etbSendMailMessageSubject; // 0x668(0x08)
	struct UMultiLineEditableTextBox* metbSendMailMessageText; // 0x670(0x08)
	struct UWTLCommonTextButton* btnSendMailMessage; // 0x678(0x08)
	struct UEditableTextBox* etbSLBToCharacterName; // 0x680(0x08)
	struct UWTLUtilityNumberTextBox* ntbSLBLootBoxID; // 0x688(0x08)
	struct UWTLCommonTextButton* btnSendLootBox; // 0x690(0x08)
	char pad_698[0x20]; // 0x698(0x20)
	struct TArray<struct UWTLCommonTabButton*> m_TabButtons; // 0x6b8(0x10)
	char pad_6C8[0x138]; // 0x6c8(0x138)

	void OnVisitPortalButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnVisitPortalButtonClicked // (Final|Native|Private) // @ game+0x1818150
	void OnVehicleButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnVehicleButtonClicked // (Final|Native|Private) // @ game+0x1817350
	void OnTeleportCharacterButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnTeleportCharacterButtonClicked // (Final|Native|Private) // @ game+0x18174d0
	void OnTeleportButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnTeleportButtonClicked // (Final|Native|Private) // @ game+0x1817870
	void OnTabButtonClicked(char TabIndex); // Function WTL.WTLHUDGodConsoleWindowCommands.OnTabButtonClicked // (Final|Native|Private) // @ game+0x1818640
	void OnSystemMessageConfirmed(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSystemMessageConfirmed // (Final|Native|Private) // @ game+0x1818250
	void OnSystemMessageButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSystemMessageButtonClicked // (Final|Native|Private) // @ game+0x18182f0
	void OnSystemEventConfirmed(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSystemEventConfirmed // (Final|Native|Private) // @ game+0x1818310
	void OnSystemEventButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSystemEventButtonClicked // (Final|Native|Private) // @ game+0x18183c0
	void OnSprintModeCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSprintModeCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1817ef0
	void OnSpectateButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSpectateButtonClicked // (Final|Native|Private) // @ game+0x18172f0
	void OnSpawnAsMonsterButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSpawnAsMonsterButtonClicked // (Final|Native|Private) // @ game+0x1817530
	void OnSLBToCharacterNameChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSLBToCharacterNameChanged // (Final|Native|Private|HasOutParms) // @ game+0x1816e10
	void OnSetWeaponExperienceButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetWeaponExperienceButtonClicked // (Final|Native|Private) // @ game+0x18174f0
	void OnSetThirstButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetThirstButtonClicked // (Final|Native|Private) // @ game+0x1818110
	void OnSetReputationButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetReputationButtonClicked // (Final|Native|Private) // @ game+0x1817620
	void OnSetItemConditionButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetItemConditionButtonClicked // (Final|Native|Private) // @ game+0x18180b0
	void OnSetHungerButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetHungerButtonClicked // (Final|Native|Private) // @ game+0x1818130
	void OnSetFactionButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetFactionButtonClicked // (Final|Native|Private) // @ game+0x1817660
	void OnSetExperienceButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetExperienceButtonClicked // (Final|Native|Private) // @ game+0x18180d0
	void OnSetCustomizationPartButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetCustomizationPartButtonClicked // (Final|Native|Private) // @ game+0x18180f0
	void OnSetClanButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSetClanButtonClicked // (Final|Native|Private) // @ game+0x1817640
	void OnSendMailToCharacterNameChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSendMailToCharacterNameChanged // (Final|Native|Private|HasOutParms) // @ game+0x18171c0
	void OnSendMailMessageTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSendMailMessageTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1816f60
	void OnSendMailMessageSubjectChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSendMailMessageSubjectChanged // (Final|Native|Private|HasOutParms) // @ game+0x1817090
	void OnSendMailMessageButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSendMailMessageButtonClicked // (Final|Native|Private) // @ game+0x1816f40
	void OnSendLootBoxButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSendLootBoxButtonClicked // (Final|Native|Private) // @ game+0x1816df0
	void OnSafeZoneEnableButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSafeZoneEnableButtonClicked // (Final|Native|Private) // @ game+0x1818230
	void OnSafeZoneDisableButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnSafeZoneDisableButtonClicked // (Final|Native|Private) // @ game+0x1818210
	void OnReputationValueChanged(int32_t Value); // Function WTL.WTLHUDGodConsoleWindowCommands.OnReputationValueChanged // (Final|Native|Private) // @ game+0x1817550
	void OnRepairAllButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnRepairAllButtonClicked // (Final|Native|Private) // @ game+0x18181b0
	void OnRemovePDAModuleButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnRemovePDAModuleButtonClicked // (Final|Native|Private) // @ game+0x1818170
	void OnRecoverStaminaButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnRecoverStaminaButtonClicked // (Final|Native|Private) // @ game+0x1817cb0
	void OnRecoverHealthButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnRecoverHealthButtonClicked // (Final|Native|Private) // @ game+0x1817cd0
	void OnRecoverAllButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnRecoverAllButtonClicked // (Final|Native|Private) // @ game+0x1817c90
	void OnPvPModeCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowCommands.OnPvPModeCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1817cf0
	void OnPvPCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowCommands.OnPvPCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1818560
	void OnNPCActivityCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowCommands.OnNPCActivityCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1818480
	void OnListPlayersButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnListPlayersButtonClicked // (Final|Native|Private) // @ game+0x1818420
	void OnLightningToViewpointButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnLightningToViewpointButtonClicked // (Final|Native|Private) // @ game+0x18173f0
	void OnLightnigToCharacterNameButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnLightnigToCharacterNameButtonClicked // (Final|Native|Private) // @ game+0x1817410
	void OnKillButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnKillButtonClicked // (Final|Native|Private) // @ game+0x18183e0
	void OnKillAllNPCButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnKillAllNPCButtonClicked // (Final|Native|Private) // @ game+0x1818460
	void OnKickButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnKickButtonClicked // (Final|Native|Private) // @ game+0x1818400
	void OnGodModeCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGodModeCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1817fd0
	void OnGiveScoreButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGiveScoreButtonClicked // (Final|Native|Private) // @ game+0x1817510
	void OnGiveMoneyButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGiveMoneyButtonClicked // (Final|Native|Private) // @ game+0x1817680
	void OnGiveLevelButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGiveLevelButtonClicked // (Final|Native|Private) // @ game+0x18176a0
	void OnGiveExperienceButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGiveExperienceButtonClicked // (Final|Native|Private) // @ game+0x18176e0
	void OnGiveClanSkillButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGiveClanSkillButtonClicked // (Final|Native|Private) // @ game+0x18173b0
	void OnGiveClanScoreButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGiveClanScoreButtonClicked // (Final|Native|Private) // @ game+0x18173d0
	void OnGetMeshInfoButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGetMeshInfoButtonClicked // (Final|Native|Private) // @ game+0x1818440
	void OnGameStateButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnGameStateButtonClicked // (Final|Native|Private) // @ game+0x18181d0
	void OnForceInformerButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnForceInformerButtonClicked // (Final|Native|Private) // @ game+0x18181f0
	void OnExitSpectatorButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnExitSpectatorButtonClicked // (Final|Native|Private) // @ game+0x1817330
	void OnDropModeCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowCommands.OnDropModeCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1817e10
	void OnCurrentWeatherButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnCurrentWeatherButtonClicked // (Final|Native|Private) // @ game+0x1817450
	void OnCraftGiveItemsButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnCraftGiveItemsButtonClicked // (Final|Native|Private) // @ game+0x1817a70
	void OnClearSkillsButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnClearSkillsButtonClicked // (Final|Native|Private) // @ game+0x1817a90
	void OnClearExperienceButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnClearExperienceButtonClicked // (Final|Native|Private) // @ game+0x18176c0
	void OnClearClanSkillsButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnClearClanSkillsButtonClicked // (Final|Native|Private) // @ game+0x1817390
	void OnChatContextMenuOpenMethodValueChange(int32_t Value); // Function WTL.WTLHUDGodConsoleWindowCommands.OnChatContextMenuOpenMethodValueChange // (Final|Native|Private) // @ game+0x17a7000
	void OnCharacterNameTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowCommands.OnCharacterNameTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1817700
	void OnCharacterEffectTypeComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowCommands.OnCharacterEffectTypeComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x1817890
	void OnCharacterClassesComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowCommands.OnCharacterClassesComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x1817ab0
	void OnChangeWeatherButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnChangeWeatherButtonClicked // (Final|Native|Private) // @ game+0x1817430
	void OnChangeSexButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnChangeSexButtonClicked // (Final|Native|Private) // @ game+0x1817c70
	void OnBecomeSpectatorButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnBecomeSpectatorButtonClicked // (Final|Native|Private) // @ game+0x1817310
	void OnBecomeClanLeaderButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnBecomeClanLeaderButtonClicked // (Final|Native|Private) // @ game+0x1817370
	void OnAirDropWhenButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnAirDropWhenButtonClicked // (Final|Native|Private) // @ game+0x1817490
	void OnAirDropSpawnButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnAirDropSpawnButtonClicked // (Final|Native|Private) // @ game+0x1817470
	void OnAirDropForceButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnAirDropForceButtonClicked // (Final|Native|Private) // @ game+0x18174b0
	void OnAddPDAModuleButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnAddPDAModuleButtonClicked // (Final|Native|Private) // @ game+0x1818190
	void OnAddEffectButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowCommands.OnAddEffectButtonClicked // (Final|Native|Private) // @ game+0x1817a50
};

// Class WTL.WTLHUDGodConsoleWindowGameInstance
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLHUDGodConsoleWindowGameInstance : UWTLHUDGodConsoleWindowTab {
	struct UWTLCommonTextCheckBox* cbNumberTextBoxValidation; // 0x260(0x08)
	struct UVerticalBox* vbEditorOnlyDebugParameters; // 0x268(0x08)
	struct UWTLCommonTextCheckBox* cbDebugIsFounder; // 0x270(0x08)
	struct UWTLCommonTextCheckBox* cbDebugHavePremium; // 0x278(0x08)
	struct UWTLCommonComboBoxString* cbsPlayerTypes; // 0x280(0x08)
	struct UWTLCommonComboBoxString* cbsBodyTypes; // 0x288(0x08)
	struct UWTLCommonTextCheckBox* cbDebugCharacterIsInClan; // 0x290(0x08)
	struct UWTLCommonComboBoxString* cbsClanMemberTypes; // 0x298(0x08)
	struct UWTLCommonTextCheckBox* cbDebugCharacterCanUseAllItems; // 0x2a0(0x08)
	struct UWTLCommonTextCheckBox* cbDebugCheckMinLevelAndTimeForBarterAndUseMailBox; // 0x2a8(0x08)
	struct UWTLGameInstance* m_GI; // 0x2b0(0x08)

	void OnPlayerTypesComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnPlayerTypesComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x1819c80
	void OnNumberTextBoxValidationCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnNumberTextBoxValidationCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1819ea0
	void OnDebugIsFounderCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugIsFounderCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1773b90
	void OnDebugHavePremiumCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugHavePremiumCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1773b90
	void OnDebugCheckMinLevelAndTimeForBarterAndUseMailBoxCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugCheckMinLevelAndTimeForBarterAndUseMailBoxCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1819610
	void OnDebugCharacterIsInClanCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugCharacterIsInClanCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1819990
	void OnDebugCharacterCanUseAllItemsCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugCharacterCanUseAllItemsCheckBoxStateChanged // (Final|Native|Private) // @ game+0x18196f0
	void OnClanMemberTypesComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnClanMemberTypesComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x18197d0
	void OnBodyTypesComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowGameInstance.OnBodyTypesComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x1819a70
};

// Class WTL.WTLHUDGodConsoleWindowListItemBase
// Size: 0x4c8 (Inherited: 0x4a0)
struct UWTLHUDGodConsoleWindowListItemBase : UWTLCommonSelectedItem {
	struct UWTLHUDGodConsoleFavouriteButton* ucBtnFavourite; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)

	void OnFavouriteBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowListItemBase.OnFavouriteBtnClicked // (Final|Native|Private) // @ game+0x181ba60
};

// Class WTL.WTLHUDGodConsoleWindowListItem
// Size: 0x4d8 (Inherited: 0x4c8)
struct UWTLHUDGodConsoleWindowListItem : UWTLHUDGodConsoleWindowListItemBase {
	struct UWTLCommonTextButton* ucBtnReceive; // 0x4c8(0x08)
	struct UWTLUtilityNumberTextBox* ntbCount; // 0x4d0(0x08)

	void OnReceiveBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowListItem.OnReceiveBtnClicked // (Native|Protected) // @ game+0x17c4d60
};

// Class WTL.WTLHUDGodConsoleWindowItem
// Size: 0x568 (Inherited: 0x4d8)
struct UWTLHUDGodConsoleWindowItem : UWTLHUDGodConsoleWindowListItem {
	struct UWTLHUDItemImage* ucItemImage; // 0x4d8(0x08)
	struct UVerticalBox* vbPreviewButtons; // 0x4e0(0x08)
	struct UCanvasPanel* cpBtnPreview; // 0x4e8(0x08)
	struct UCanvasPanel* cpBtnCharacterPreview; // 0x4f0(0x08)
	struct UWTLCommonTextButton* ucBtnPreview; // 0x4f8(0x08)
	struct UWTLCommonButton* ucBtnCharacterPreview; // 0x500(0x08)
	struct UTextBlock* tbItemTypeID; // 0x508(0x08)
	struct UTextBlock* tbItemName; // 0x510(0x08)
	struct UTextBlock* tbItemSubTypeName; // 0x518(0x08)
	struct UHorizontalBox* hbCaliber; // 0x520(0x08)
	struct UTextBlock* tbCaliber; // 0x528(0x08)
	struct UTextBlock* tbWeight; // 0x530(0x08)
	struct UTextBlock* tbBasePrice; // 0x538(0x08)
	char pad_540[0x28]; // 0x540(0x28)

	void OnPreviewBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowItem.OnPreviewBtnClicked // (Final|Native|Private) // @ game+0x181a520
	void OnCharacterPreviewBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowItem.OnCharacterPreviewBtnClicked // (Final|Native|Private) // @ game+0x181a500
};

// Class WTL.WTLHUDGodConsoleWindowItems
// Size: 0x2f8 (Inherited: 0x260)
struct UWTLHUDGodConsoleWindowItems : UUserWidget {
	struct UHorizontalBox* hbItemTypeTabBtns; // 0x260(0x08)
	struct UWidgetSwitcher* wsItemType; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct TMap<enum class EWTLItemType, struct UDataTable*> m_DataTables; // 0x278(0x50)
	char pad_2C8[0x8]; // 0x2c8(0x08)
	struct TSoftClassPtr<UObject> ItemTypeTabButtonClass; // 0x2d0(0x28)

	void OnItemTypeTabBtnClicked(enum class EWTLItemType ItemType); // Function WTL.WTLHUDGodConsoleWindowItems.OnItemTypeTabBtnClicked // (Final|Native|Private) // @ game+0x181a750
};

// Class WTL.WTLHUDGodConsoleWindowListBase
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLHUDGodConsoleWindowListBase : UWTLHUDGodConsoleWindowTab {
	struct UWTLCommonCheckBox* cbShowFavourites; // 0x260(0x08)
	struct UScrollBox* sbContent; // 0x268(0x08)
	char pad_270[0x20]; // 0x270(0x20)
	struct FString ListName; // 0x290(0x10)

	void OnShowFavouritesCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLHUDGodConsoleWindowListBase.OnShowFavouritesCheckBoxStateChanged // (Native|Protected) // @ game+0x181b830
	void OnFavouriteBtnClicked(uint16_t ID, struct UWTLHUDGodConsoleWindowListItemBase* ListItemBase); // Function WTL.WTLHUDGodConsoleWindowListBase.OnFavouriteBtnClicked // (Final|Native|Protected) // @ game+0x181b6d0
};

// Class WTL.WTLHUDGodConsoleWindowItemsList
// Size: 0x358 (Inherited: 0x2a0)
struct UWTLHUDGodConsoleWindowItemsList : UWTLHUDGodConsoleWindowListBase {
	struct UHorizontalBox* hbSubType; // 0x2a0(0x08)
	struct UWTLCommonComboBoxString* cbsItemSubTypes; // 0x2a8(0x08)
	struct UHorizontalBox* hbWeaponCaliber; // 0x2b0(0x08)
	struct UWTLCommonComboBoxString* cbsWeaponCaliber; // 0x2b8(0x08)
	struct UEditableTextBox* etbSearch; // 0x2c0(0x08)
	struct UWidgetSwitcher* wsItems; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct TArray<struct UWTLHUDGodConsoleWindowItem*> m_Items; // 0x2d8(0x10)
	char pad_2E8[0x48]; // 0x2e8(0x48)
	struct TSoftClassPtr<UObject> ItemTypeItemClass; // 0x330(0x28)

	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowItemsList.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181acf0
	void OnReceiveItem(enum class EWTLItemType ItemType, uint16_t ItemTypeID, int32_t ItemCount); // Function WTL.WTLHUDGodConsoleWindowItemsList.OnReceiveItem // (Final|Native|Private) // @ game+0x181ab00
	void OnComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowItemsList.OnComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x181ae20
};

// Class WTL.WTLHUDGodConsoleWindowKit
// Size: 0x540 (Inherited: 0x4d8)
struct UWTLHUDGodConsoleWindowKit : UWTLHUDGodConsoleWindowListItem {
	struct UTextBlock* tbKitID; // 0x4d8(0x08)
	struct UTextBlock* tbKitName; // 0x4e0(0x08)
	struct UScrollBox* sbKitItems; // 0x4e8(0x08)
	char pad_4F0[0x28]; // 0x4f0(0x28)
	struct TSoftClassPtr<UObject> ItemTypeSlotWidgetClass; // 0x518(0x28)
};

// Class WTL.WTLHUDGodConsoleWindowKitsList
// Size: 0x300 (Inherited: 0x2a0)
struct UWTLHUDGodConsoleWindowKitsList : UWTLHUDGodConsoleWindowListBase {
	struct UWidgetSwitcher* wsKits; // 0x2a0(0x08)
	struct UEditableTextBox* etbSearch; // 0x2a8(0x08)
	char pad_2B0[0x28]; // 0x2b0(0x28)
	struct TSoftClassPtr<UObject> KitWidgetClass; // 0x2d8(0x28)

	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowKitsList.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181b4d0
	void OnReceiveBtnClicked(struct FWTLKitItemData& KitItemData, int32_t KitCount); // Function WTL.WTLHUDGodConsoleWindowKitsList.OnReceiveBtnClicked // (Final|Native|Private|HasOutParms) // @ game+0x181b320
};

// Class WTL.WTLHUDGodConsoleWindowLocation
// Size: 0x618 (Inherited: 0x4c8)
struct UWTLHUDGodConsoleWindowLocation : UWTLHUDGodConsoleWindowListItemBase {
	struct UTextBlock* tbLocationID; // 0x4c8(0x08)
	struct UHorizontalBox* hbMasterLocationID; // 0x4d0(0x08)
	struct UTextBlock* tbMasterLocationID; // 0x4d8(0x08)
	struct UTextBlock* tbLocationName; // 0x4e0(0x08)
	struct UHorizontalBox* hbMasterLocationName; // 0x4e8(0x08)
	struct UTextBlock* tbMasterLocationName; // 0x4f0(0x08)
	struct UHorizontalBox* hbPDAModuleID; // 0x4f8(0x08)
	struct UTextBlock* tbPDAModuleIDCaption; // 0x500(0x08)
	struct UTextBlock* tbPDAModuleID; // 0x508(0x08)
	struct UWTLCommonURLButton* ucBtnReceivePDAModule; // 0x510(0x08)
	struct UWTLCommonTextButton* ucBtnMoveTo; // 0x518(0x08)
	struct UWTLCommonTextButton* ucBtnVisit; // 0x520(0x08)
	struct UWTLCommonTextButton* ucBtnUnvisit; // 0x528(0x08)
	struct UWidgetSwitcher* wsMapTexturePreview; // 0x530(0x08)
	struct UImage* imgMapTexturePreview; // 0x538(0x08)
	char pad_540[0x88]; // 0x540(0x88)
	struct FSlateColor PDAModuleIDCaptionGreenColor; // 0x5c8(0x28)
	struct FSlateColor PDAModuleIDCaptionRedColor; // 0x5f0(0x28)

	void OnVisitBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowLocation.OnVisitBtnClicked // (Final|Native|Private) // @ game+0x181bd40
	void OnUnvisitBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowLocation.OnUnvisitBtnClicked // (Final|Native|Private) // @ game+0x181bd10
	void OnReceivePDAModuleBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowLocation.OnReceivePDAModuleBtnClicked // (Final|Native|Private) // @ game+0x181bda0
	void OnMoveToBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowLocation.OnMoveToBtnClicked // (Final|Native|Private) // @ game+0x181bd70
};

// Class WTL.WTLHUDGodConsoleWindowLocationsList
// Size: 0x300 (Inherited: 0x2a0)
struct UWTLHUDGodConsoleWindowLocationsList : UWTLHUDGodConsoleWindowListBase {
	struct UWidgetSwitcher* wsLocations; // 0x2a0(0x08)
	struct UEditableTextBox* etbSearch; // 0x2a8(0x08)
	char pad_2B0[0x28]; // 0x2b0(0x28)
	struct TSoftClassPtr<UObject> LocationWidgetClass; // 0x2d8(0x28)

	void OnVisitLocationBtnClicked(uint16_t LocationID); // Function WTL.WTLHUDGodConsoleWindowLocationsList.OnVisitLocationBtnClicked // (Final|Native|Private) // @ game+0x181c0d0
	void OnUnvisitLocationBtnClicked(uint16_t LocationID); // Function WTL.WTLHUDGodConsoleWindowLocationsList.OnUnvisitLocationBtnClicked // (Final|Native|Private) // @ game+0x181bfb0
	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowLocationsList.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181b4d0
	void OnReceivePDAModuleForLocationBtnClicked(uint16_t PDAModuleTypeID); // Function WTL.WTLHUDGodConsoleWindowLocationsList.OnReceivePDAModuleForLocationBtnClicked // (Final|Native|Private) // @ game+0x181c310
	void OnMoveToLocationBtnClicked(uint16_t LocationID); // Function WTL.WTLHUDGodConsoleWindowLocationsList.OnMoveToLocationBtnClicked // (Final|Native|Private) // @ game+0x181c1f0
};

// Class WTL.WTLHUDGodConsoleWindowMonster
// Size: 0x5b8 (Inherited: 0x4c8)
struct UWTLHUDGodConsoleWindowMonster : UWTLHUDGodConsoleWindowListItemBase {
	struct UTextBlock* tbMonsterID; // 0x4c8(0x08)
	struct UTextBlock* tbMonsterName; // 0x4d0(0x08)
	struct UTextBlock* tbMonsterHealth; // 0x4d8(0x08)
	struct UTextBlock* tbCloseAttackMinDamage; // 0x4e0(0x08)
	struct UTextBlock* tbCloseAttackMaxDamage; // 0x4e8(0x08)
	struct UTextBlock* tbFarAttackMinDamage; // 0x4f0(0x08)
	struct UTextBlock* tbFarAttackMaxDamage; // 0x4f8(0x08)
	struct UWTLUtilityNumberTextBox* ntbLevel; // 0x500(0x08)
	struct UWTLUtilityNumberTextBox* ntbLifeTime; // 0x508(0x08)
	struct UWTLUtilityNumberTextBox* ntbCount; // 0x510(0x08)
	struct UWTLCommonTextButton* ucBtnSpawn; // 0x518(0x08)
	struct UWTLCommonTextButton* ucBtnSpawnAs; // 0x520(0x08)
	struct UWTLCommonTextButton* ucBtnKill; // 0x528(0x08)
	struct UWTLCommonTextButton* ucBtnRestartLogic; // 0x530(0x08)
	char pad_538[0x80]; // 0x538(0x80)

	void OnSpawnBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowMonster.OnSpawnBtnClicked // (Final|Native|Private) // @ game+0x181c770
	void OnSpawnAsBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowMonster.OnSpawnAsBtnClicked // (Final|Native|Private) // @ game+0x181c750
	void OnRestartLogicBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowMonster.OnRestartLogicBtnClicked // (Final|Native|Private) // @ game+0x181c6f0
	void OnLevelValueChange(int32_t Value); // Function WTL.WTLHUDGodConsoleWindowMonster.OnLevelValueChange // (Final|Native|Private) // @ game+0x181c790
	void OnKillBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowMonster.OnKillBtnClicked // (Final|Native|Private) // @ game+0x181c720
};

// Class WTL.WTLHUDGodConsoleWindowMonstersList
// Size: 0x320 (Inherited: 0x2a0)
struct UWTLHUDGodConsoleWindowMonstersList : UWTLHUDGodConsoleWindowListBase {
	struct UWidgetSwitcher* wsMonsters; // 0x2a0(0x08)
	struct UEditableTextBox* etbSearch; // 0x2a8(0x08)
	struct UWTLCommonTextButton* btnKillInRadius; // 0x2b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbKillInRadius; // 0x2b8(0x08)
	struct UWTLCommonTextButton* btnKillAllMonsters; // 0x2c0(0x08)
	struct UWTLCommonTextButton* btnRestartAllMonstersLogic; // 0x2c8(0x08)
	char pad_2D0[0x28]; // 0x2d0(0x28)
	struct TSoftClassPtr<UObject> MonsterWidgetClass; // 0x2f8(0x28)

	void OnSpawnBtnClicked(uint16_t MonsterID, int32_t MonsterLevel, int32_t LifeTime, int32_t Count); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnSpawnBtnClicked // (Final|Native|Private) // @ game+0x181cff0
	void OnSpawnAsBtnClicked(uint16_t MonsterID, int32_t MonsterLevel, int32_t LifeTime); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnSpawnAsBtnClicked // (Final|Native|Private) // @ game+0x181cdd0
	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181d260
	void OnRestartLogicBtnClicked(uint16_t MonsterID); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnRestartLogicBtnClicked // (Final|Native|Private) // @ game+0x181cb90
	void OnRestartAllMonstersLogicButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnRestartAllMonstersLogicButtonClicked // (Final|Native|Private) // @ game+0x181cb30
	void OnKillInRadiusButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnKillInRadiusButtonClicked // (Final|Native|Private) // @ game+0x181cb70
	void OnKillBtnClicked(uint16_t MonsterID); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnKillBtnClicked // (Final|Native|Private) // @ game+0x181ccb0
	void OnKillAllMonstersButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowMonstersList.OnKillAllMonstersButtonClicked // (Final|Native|Private) // @ game+0x181cb50
};

// Class WTL.WTLHUDGodConsoleWindowQuest
// Size: 0x600 (Inherited: 0x4c8)
struct UWTLHUDGodConsoleWindowQuest : UWTLHUDGodConsoleWindowListItemBase {
	struct UTextBlock* tbQuestID; // 0x4c8(0x08)
	struct UTextBlock* tbQuestName; // 0x4d0(0x08)
	struct UHorizontalBox* hbQuestFaction; // 0x4d8(0x08)
	struct UTextBlock* tbQuestFactionName; // 0x4e0(0x08)
	struct UImage* imgQuestFaction; // 0x4e8(0x08)
	struct UWidgetSwitcher* wsQuestIcon; // 0x4f0(0x08)
	struct UImage* imgQuestIcon; // 0x4f8(0x08)
	struct UWTLCommonURLButton* ucBtnShowDependencies; // 0x500(0x08)
	struct UWTLCommonComboBoxString* cbsQuestStates; // 0x508(0x08)
	struct UWTLCommonTextButton* ucBtnClearState; // 0x510(0x08)
	struct UWTLCommonTextButton* ucBtnInfo; // 0x518(0x08)
	struct UWTLCommonTextButton* ucBtnGiveItems; // 0x520(0x08)
	char pad_528[0x88]; // 0x528(0x88)
	struct TMap<enum class EWTLFaction, struct FWTLQuestFactionSetting> QuestFactionSettings; // 0x5b0(0x50)

	void OnShowDependenciesBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowQuest.OnShowDependenciesBtnClicked // (Final|Native|Private) // @ game+0x181da50
	void OnQuestStateComboBoxSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDGodConsoleWindowQuest.OnQuestStateComboBoxSelectionChanged // (Final|Native|Private) // @ game+0x181d890
	void OnInfoBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowQuest.OnInfoBtnClicked // (Final|Native|Private) // @ game+0x181bd70
	void OnGiveItemsBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowQuest.OnGiveItemsBtnClicked // (Final|Native|Private) // @ game+0x181d840
	void OnClearStateBtnClicked(); // Function WTL.WTLHUDGodConsoleWindowQuest.OnClearStateBtnClicked // (Final|Native|Private) // @ game+0x181d860
};

// Class WTL.WTLHUDGodConsoleWindowQuestsList
// Size: 0x318 (Inherited: 0x2a0)
struct UWTLHUDGodConsoleWindowQuestsList : UWTLHUDGodConsoleWindowListBase {
	struct UWidgetSwitcher* wsQuests; // 0x2a0(0x08)
	struct UEditableTextBox* etbSearch; // 0x2a8(0x08)
	struct UWTLCommonTextButton* btnCompleteAllQuests; // 0x2b0(0x08)
	struct UWTLCommonTextButton* btnGiveItemsForActiveQuest; // 0x2b8(0x08)
	struct UWTLCommonTextButton* btnClearQuestStates; // 0x2c0(0x08)
	char pad_2C8[0x28]; // 0x2c8(0x28)
	struct TSoftClassPtr<UObject> QuestWidgetClass; // 0x2f0(0x28)

	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181e910
	void OnQuestStateChanged(uint16_t QuestID, int32_t QuestStateIndex); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestStateChanged // (Final|Native|Private) // @ game+0x181e660
	void OnQuestShowDependenciesClicked(uint16_t QuestID); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestShowDependenciesClicked // (Final|Native|Private) // @ game+0x181e830
	void OnQuestInfoClicked(uint16_t QuestID); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestInfoClicked // (Final|Native|Private) // @ game+0x181e4a0
	void OnQuestGiveItemsClicked(uint16_t QuestID, struct FWTLQuestItemData& QuestItemData); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestGiveItemsClicked // (Final|Native|Private|HasOutParms) // @ game+0x181dda0
	void OnQuestClearStateClicked(uint16_t QuestID); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestClearStateClicked // (Final|Native|Private) // @ game+0x181e580
	void OnGiveItemsForActiveQuestButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnGiveItemsForActiveQuestButtonClicked // (Final|Native|Private) // @ game+0x181dd60
	void OnCompleteAllQuestsButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnCompleteAllQuestsButtonClicked // (Final|Native|Private) // @ game+0x181dd80
	void OnClearQuestStatesButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowQuestsList.OnClearQuestStatesButtonClicked // (Final|Native|Private) // @ game+0x181dd40
};

// Class WTL.WTLHUDGodConsoleWindowScript
// Size: 0x4e8 (Inherited: 0x4a0)
struct UWTLHUDGodConsoleWindowScript : UWTLCommonSelectedItem {
	struct UTextBlock* tbScriptFileName; // 0x4a0(0x08)
	char pad_4A8[0x40]; // 0x4a8(0x40)
};

// Class WTL.WTLHUDGodConsoleWindowScripts
// Size: 0x3a0 (Inherited: 0x260)
struct UWTLHUDGodConsoleWindowScripts : UWTLHUDGodConsoleWindowTab {
	struct UCanvasPanel* cpToolBar; // 0x260(0x08)
	struct UWidgetSwitcher* wsToolBar; // 0x268(0x08)
	struct UWTLCommonTextButton* btnBack; // 0x270(0x08)
	struct UTextBlock* tbCurrentEditableScript; // 0x278(0x08)
	struct UTextBlock* tbScriptsCount; // 0x280(0x08)
	struct UWidgetSwitcher* wsScripts; // 0x288(0x08)
	struct UScrollBox* sbScripts; // 0x290(0x08)
	struct UMultiLineEditableTextBox* etbScriptText; // 0x298(0x08)
	struct UWTLCommonTextButton* btnExecute; // 0x2a0(0x08)
	struct UWTLCommonTextButton* btnSave; // 0x2a8(0x08)
	struct UVerticalBox* vbManageButtons; // 0x2b0(0x08)
	struct UWTLCommonTextButton* btnCreate; // 0x2b8(0x08)
	struct UWTLCommonTextButton* btnEdit; // 0x2c0(0x08)
	struct UWTLCommonTextButton* btnRename; // 0x2c8(0x08)
	struct UEditableTextBox* etbNewScriptFileName; // 0x2d0(0x08)
	struct UWTLCommonTextButton* btnDelete; // 0x2d8(0x08)
	struct UWTLCommonTextButton* btnDeleteAll; // 0x2e0(0x08)
	char pad_2E8[0x10]; // 0x2e8(0x10)
	struct TArray<struct UWTLHUDGodConsoleWindowScript*> m_ScriptsWidgets; // 0x2f8(0x10)
	char pad_308[0x10]; // 0x308(0x10)
	struct UWTLHUDGodConsoleWindowScript* m_SelectedScriptWidget; // 0x318(0x08)
	char pad_320[0x58]; // 0x320(0x58)
	struct TSoftClassPtr<UObject> ScriptWidgetClass; // 0x378(0x28)

	void OnScriptTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowScripts.OnScriptTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181f570
	void OnScriptsScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLHUDGodConsoleWindowScripts.OnScriptsScrollBoxScrolled // (Final|Native|Private) // @ game+0x181f940
	void OnScriptSelected(struct FString ScriptFileName, struct UWTLHUDGodConsoleWindowScript* SelectedScriptWidget); // Function WTL.WTLHUDGodConsoleWindowScripts.OnScriptSelected // (Final|Native|Private) // @ game+0x181f720
	void OnSavedConfirmed(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnSavedConfirmed // (Final|Native|Private) // @ game+0x181f8e0
	void OnSavedCanceled(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnSavedCanceled // (Final|Native|Private) // @ game+0x181f8a0
	void OnSaveButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnSaveButtonClicked // (Final|Native|Private) // @ game+0x181f6d0
	void OnRenameButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnRenameButtonClicked // (Final|Native|Private) // @ game+0x181f550
	void OnNewScriptNameTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDGodConsoleWindowScripts.OnNewScriptNameTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x181f420
	void OnExecuteButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnExecuteButtonClicked // (Final|Native|Private) // @ game+0x181f700
	void OnEditButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnEditButtonClicked // (Final|Native|Private) // @ game+0x181f690
	void OnDeleteConfirmed(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnDeleteConfirmed // (Final|Native|Private) // @ game+0x181f320
	void OnDeleteButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnDeleteButtonClicked // (Final|Native|Private) // @ game+0x181f400
	void OnDeleteAllConfirmed(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnDeleteAllConfirmed // (Final|Native|Private) // @ game+0x181f170
	void OnDeleteAllButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnDeleteAllButtonClicked // (Final|Native|Private) // @ game+0x181f300
	void OnCreateButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnCreateButtonClicked // (Final|Native|Private) // @ game+0x181f6b0
	void OnBackButtonClicked(); // Function WTL.WTLHUDGodConsoleWindowScripts.OnBackButtonClicked // (Final|Native|Private) // @ game+0x181fa40
};

// Class WTL.WTLHUDGroupInfo
// Size: 0x2d8 (Inherited: 0x268)
struct UWTLHUDGroupInfo : UWTLHUDWidgetBase {
	struct UPanelWidget* pwGroupMembersList; // 0x268(0x08)
	char pad_270[0x20]; // 0x270(0x20)
	struct TSoftClassPtr<UObject> GroupInfoItemWidgetClass; // 0x290(0x28)
	struct FVector2D CornerPosition; // 0x2b8(0x08)
	struct FVector2D CenterPosition; // 0x2c0(0x08)
	struct FVector2D CornerSize; // 0x2c8(0x08)
	struct FVector2D CenterSize; // 0x2d0(0x08)

	void UpdateGroupMembersData(); // Function WTL.WTLHUDGroupInfo.UpdateGroupMembersData // (Final|Native|Private) // @ game+0x1820ff0
};

// Class WTL.WTLHUDGroupInfo_Item
// Size: 0x380 (Inherited: 0x260)
struct UWTLHUDGroupInfo_Item : UUserWidget {
	struct UProgressBar* pbCharacterHealth; // 0x260(0x08)
	struct UImage* imgPlayerClass; // 0x268(0x08)
	struct UTextBlock* tbCharacterName; // 0x270(0x08)
	struct UImage* imgGroupLead; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)
	struct TSoftObjectPtr<UTexture2D> NonePlayerClassIcon; // 0x288(0x28)
	struct TSoftObjectPtr<UTexture2D> MinerPlayerClassIcon; // 0x2b0(0x28)
	struct TSoftObjectPtr<UTexture2D> HunterPlayerClassIcon; // 0x2d8(0x28)
	struct TSoftObjectPtr<UTexture2D> MercenaryPlayerClassIcon; // 0x300(0x28)
	struct TSoftObjectPtr<UTexture2D> EngineerPlayerClassIcon; // 0x328(0x28)
	struct FLinearColor LowCharacterHealthProgressBarColor; // 0x350(0x10)
	struct FLinearColor MediumCharacterHealthProgressBarColor; // 0x360(0x10)
	struct FLinearColor HighCharacterHealthProgressBarColor; // 0x370(0x10)
};

// Class WTL.WTLHUDIndicatorBase
// Size: 0x270 (Inherited: 0x260)
struct UWTLHUDIndicatorBase : UUserWidget {
	struct UBorder* bIconBorder; // 0x260(0x08)
	struct UImage* imgIcon; // 0x268(0x08)
};

// Class WTL.WTLHUDIndicatorCharacterEffect
// Size: 0x338 (Inherited: 0x270)
struct UWTLHUDIndicatorCharacterEffect : UWTLHUDIndicatorBase {
	struct UTextBlock* tbValue; // 0x270(0x08)
	struct UTextBlock* tbDuration; // 0x278(0x08)
	char pad_280[0xb8]; // 0x280(0xb8)
};

// Class WTL.WTLHUDIndicatorCharacterState
// Size: 0x2b8 (Inherited: 0x270)
struct UWTLHUDIndicatorCharacterState : UWTLHUDIndicatorBase {
	char pad_270[0x4]; // 0x270(0x04)
	struct FLinearColor NeutralNatureTypeIconBorderColor; // 0x274(0x10)
	struct FLinearColor PositiveNatureTypeIconBorderColor; // 0x284(0x10)
	struct FLinearColor NegativeAverageNatureTypeIconBorderColor; // 0x294(0x10)
	struct FLinearColor NegativeSevereNatureTypeIconBorderColor; // 0x2a4(0x10)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class WTL.WTLHUDIndicatorEquipmentSlotItemUse
// Size: 0x280 (Inherited: 0x270)
struct UWTLHUDIndicatorEquipmentSlotItemUse : UWTLHUDIndicatorBase {
	struct UTextBlock* tbCurrentEnergy; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)
};

// Class WTL.WTLHUDIndicatorMedicineItemEffect
// Size: 0x280 (Inherited: 0x270)
struct UWTLHUDIndicatorMedicineItemEffect : UWTLHUDIndicatorBase {
	struct UTextBlock* tbDuration; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)
};

// Class WTL.WTLHUDIndicators
// Size: 0x388 (Inherited: 0x268)
struct UWTLHUDIndicators : UWTLHUDWidgetBase {
	struct UWorld* m_World; // 0x268(0x08)
	struct UWTLSharedData* m_SharedData; // 0x270(0x08)
	struct UCanvasPanel* cpMain; // 0x278(0x08)
	struct UWrapBox* wbIndicators; // 0x280(0x08)
	char pad_288[0x50]; // 0x288(0x50)
	struct TSoftClassPtr<UObject> CharacterStateIndicatorWidgetClass; // 0x2d8(0x28)
	struct TSoftClassPtr<UObject> CharacterEffectIndicatorWidgetClass; // 0x300(0x28)
	struct TSoftClassPtr<UObject> MedicineItemEffectIndicatorWidgetClass; // 0x328(0x28)
	struct TSoftClassPtr<UObject> EquipmentSlotItemUseIndicatorWidgetClass; // 0x350(0x28)
	bool bDebugShowAllCharacterStateIndicators; // 0x378(0x01)
	bool bDebugShowAllCharacterEffectsIndicators; // 0x379(0x01)
	char pad_37A[0x2]; // 0x37a(0x02)
	float IndicatorsWrapBoxDefaultWidth; // 0x37c(0x04)
	float IndicatorsWrapBoxShorterWidth; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
};

// Class WTL.WTLHUDInformationDialogWindow
// Size: 0x2a0 (Inherited: 0x288)
struct UWTLHUDInformationDialogWindow : UWTLHUDWindowBase {
	struct UMultiLineEditableText* etDialogText; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
};

// Class WTL.WTLHUDInGameMenu
// Size: 0x320 (Inherited: 0x268)
struct UWTLHUDInGameMenu : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpMenu; // 0x268(0x08)
	struct UBackgroundBlur* bBackgroundBlur; // 0x270(0x08)
	struct UWTLCommonTextButton* ucBtnReturnToGame; // 0x278(0x08)
	struct UWTLCommonTextButton* ucBtnSuicide; // 0x280(0x08)
	struct UWTLCommonTextButton* ucBtnOptions; // 0x288(0x08)
	struct UWTLCommonTextButton* ucBtnStore; // 0x290(0x08)
	struct UCanvasPanel* cpHighlightsBtn; // 0x298(0x08)
	struct UWTLCommonButton* ucBtnHighlights; // 0x2a0(0x08)
	struct UWTLCommonTextButton* ucBtnQuitToMainMenu; // 0x2a8(0x08)
	struct UWTLCommonTextButton* ucBtnExitGame; // 0x2b0(0x08)
	struct UWTLCommonStoreButton* ucStoreButton; // 0x2b8(0x08)
	struct UCanvasPanel* cpWidgetContainer; // 0x2c0(0x08)
	struct UUserWidget* m_CurrentWidget; // 0x2c8(0x08)
	struct TSoftClassPtr<UObject> CommonOptionsWidgetClass; // 0x2d0(0x28)
	struct TSoftClassPtr<UObject> StoreWidgetClass; // 0x2f8(0x28)

	void ShowMenu(); // Function WTL.WTLHUDInGameMenu.ShowMenu // (Final|Native|Private) // @ game+0x18219b0
	void QuitToMainMenu(); // Function WTL.WTLHUDInGameMenu.QuitToMainMenu // (Final|Native|Private) // @ game+0x1821960
	void OnSuicideConfirmation(); // Function WTL.WTLHUDInGameMenu.OnSuicideConfirmation // (Final|Native|Private) // @ game+0x1821a50
	void OnSuicideBtnClick(); // Function WTL.WTLHUDInGameMenu.OnSuicideBtnClick // (Final|Native|Private) // @ game+0x1821a50
	void OnStoreButtonClicked(); // Function WTL.WTLHUDInGameMenu.OnStoreButtonClicked // (Final|Native|Private) // @ game+0x18218f0
	void OnReturnToGameBtnClick(); // Function WTL.WTLHUDInGameMenu.OnReturnToGameBtnClick // (Final|Native|Private) // @ game+0x1821ac0
	void OnQuitToMainMenuBtnClick(); // Function WTL.WTLHUDInGameMenu.OnQuitToMainMenuBtnClick // (Final|Native|Private) // @ game+0x1821960
	void OnOptionsBtnClick(); // Function WTL.WTLHUDInGameMenu.OnOptionsBtnClick // (Final|Native|Private) // @ game+0x1821a30
	void OnHighlightsButtonClicked(); // Function WTL.WTLHUDInGameMenu.OnHighlightsButtonClicked // (Final|Native|Private) // @ game+0x18219d0
	void OnExitGameBtnClick(); // Function WTL.WTLHUDInGameMenu.OnExitGameBtnClick // (Final|Native|Private) // @ game+0x1821910
	void ExitGame(); // Function WTL.WTLHUDInGameMenu.ExitGame // (Final|Native|Private) // @ game+0x1821910
};

// Class WTL.WTLHUDInteractiveSubstrate
// Size: 0x288 (Inherited: 0x268)
struct UWTLHUDInteractiveSubstrate : UWTLHUDWidgetBase {
	struct UBorder* bUnlockedMouseCursorHint; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct AActor* m_CurrentHighlightObject; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)

	struct FEventReply OnUnlockedMouseCursorHintMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLHUDInteractiveSubstrate.OnUnlockedMouseCursorHintMouseButtonDown // (Final|Native|Private|HasOutParms) // @ game+0x1821dc0
	void OnInteractiveTraceShot(); // Function WTL.WTLHUDInteractiveSubstrate.OnInteractiveTraceShot // (Final|Native|Private) // @ game+0x1822000
};

// Class WTL.WTLHUDInventory
// Size: 0x2c8 (Inherited: 0x268)
struct UWTLHUDInventory : UWTLHUDWidgetBase {
	struct UWTLHUDPlayerInventoryStorage* ucPlayerInventoryStorage; // 0x268(0x08)
	struct UWTLHUDArmoredPlatesWindow* ucArmoredPlatesWindow; // 0x270(0x08)
	struct TSoftObjectPtr<UFMODEvent> ShowSoundEvent; // 0x278(0x28)
	struct TSoftObjectPtr<UFMODEvent> HideSoundEvent; // 0x2a0(0x28)
};

// Class WTL.WTLHUDItemImage
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLHUDItemImage : UUserWidget {
	struct UImage* imgItem; // 0x260(0x08)
	struct UWTLHUDItemInformationBase* m_ItemInformationShortWidget; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct TSoftClassPtr<UObject> ItemInformationShortWidgetClass; // 0x278(0x28)
};

// Class WTL.WTLHUDItemInformationBase
// Size: 0x8c8 (Inherited: 0x780)
struct UWTLHUDItemInformationBase : UWTLCommonItemInformation {
	struct UImage* imgCustomizationPattern; // 0x780(0x08)
	struct UTextBlock* tbQuestItem; // 0x788(0x08)
	struct UTextBlock* tbItemStartQuest; // 0x790(0x08)
	struct UTextBlock* tbCanBePutIntoAccountInventory; // 0x798(0x08)
	struct URichTextBlock* rtbNeedForQuests; // 0x7a0(0x08)
	struct URichTextBlock* rtbStorageObject; // 0x7a8(0x08)
	struct UTextBlock* tbLockedInInventoryWeightHint; // 0x7b0(0x08)
	struct UTextBlock* tbCannotBeUsedVehicleReason; // 0x7b8(0x08)
	struct UHorizontalBox* hbSerialNumber; // 0x7c0(0x08)
	struct UTextBlock* tbSerialNumber; // 0x7c8(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageChangingArrow; // 0x7d0(0x08)
	struct UTextBlock* tbDamageChangingPercent; // 0x7d8(0x08)
	struct UWTLCommonToggleSwitcher* tsAccuracyChangingArrow; // 0x7e0(0x08)
	struct UTextBlock* tbAccuracyChangingPercent; // 0x7e8(0x08)
	struct UHorizontalBox* hbModCount; // 0x7f0(0x08)
	struct UTextBlock* tbModCount; // 0x7f8(0x08)
	struct UPanelWidget* pwMuzzleAttachment; // 0x800(0x08)
	struct UPanelWidget* pwFlashlightAttachment; // 0x808(0x08)
	struct UPanelWidget* pwScopeAttachment; // 0x810(0x08)
	struct UTextBlock* tbMuzzleAttachment; // 0x818(0x08)
	struct UTextBlock* tbFlashlightAttachment; // 0x820(0x08)
	struct UTextBlock* tbScopeAttachment; // 0x828(0x08)
	struct UPanelWidget* pwInstalledArmoredPlates; // 0x830(0x08)
	struct UPanelWidget* pwFrontInstalledArmoredPlate; // 0x838(0x08)
	struct UPanelWidget* pwBackInstalledArmoredPlate; // 0x840(0x08)
	struct UTextBlock* tbFrontInstalledArmoredPlateName; // 0x848(0x08)
	struct UTextBlock* tbBackInstalledArmoredPlateName; // 0x850(0x08)
	struct UHorizontalBox* hbEnergy; // 0x858(0x08)
	struct UTextBlock* tbEnergyCaption; // 0x860(0x08)
	struct UTextBlock* tbEnergy; // 0x868(0x08)
	struct UProgressBar* pbEnergy; // 0x870(0x08)
	struct UWTLCommonToggleSwitcher* tsWearResistanceChangingArrow; // 0x878(0x08)
	struct UTextBlock* tbWearResistanceChangingPercent; // 0x880(0x08)
	struct UHorizontalBox* hbPaintType; // 0x888(0x08)
	struct UTextBlock* tbPaintTypeCaption; // 0x890(0x08)
	struct UTextBlock* tbPaintType; // 0x898(0x08)
	struct UHorizontalBox* hbValidityDate; // 0x8a0(0x08)
	struct UTextBlock* tbValidityDate; // 0x8a8(0x08)
	struct UHorizontalBox* hbCreationCharacterName; // 0x8b0(0x08)
	struct UTextBlock* tbCreationCharacterName; // 0x8b8(0x08)
	char pad_8C0[0x8]; // 0x8c0(0x08)
};

// Class WTL.WTLHUDItemInformation
// Size: 0xbd8 (Inherited: 0x8c8)
struct UWTLHUDItemInformation : UWTLHUDItemInformationBase {
	char pad_8C8[0x10]; // 0x8c8(0x10)
	struct UImage* imgItem; // 0x8d8(0x08)
	struct UImage* imgItemType; // 0x8e0(0x08)
	struct UTextBlock* tbItemTypeIDImage; // 0x8e8(0x08)
	struct UHorizontalBox* hbWeaponAttachments; // 0x8f0(0x08)
	struct UHorizontalBox* hbSellPrice; // 0x8f8(0x08)
	struct UHorizontalBox* hbTotalSellPrice; // 0x900(0x08)
	struct UImage* imgMuzzleAttachment; // 0x908(0x08)
	struct UImage* imgFlashlightAttachment; // 0x910(0x08)
	struct UImage* imgScopeAttachment; // 0x918(0x08)
	struct UProgressBar* pbMuzzleAttachmentCondition; // 0x920(0x08)
	struct UProgressBar* pbFlashlightAttachmentCondition; // 0x928(0x08)
	struct UProgressBar* pbScopeAttachmentCondition; // 0x930(0x08)
	struct UImage* imgFrontInstalledArmoredPlate; // 0x938(0x08)
	struct UImage* imgBackInstalledArmoredPlate; // 0x940(0x08)
	struct UProgressBar* pbFrontInstalledArmoredPlateCondition; // 0x948(0x08)
	struct UProgressBar* pbBackInstalledArmoredPlateCondition; // 0x950(0x08)
	struct UTextBlock* tbSellPrice; // 0x958(0x08)
	struct UTextBlock* tbTotalSellPrice; // 0x960(0x08)
	struct UCanvasPanel* cpBtnPreview; // 0x968(0x08)
	struct UCanvasPanel* cpBtnCharacterPreview; // 0x970(0x08)
	struct UWTLCommonButton* ucBtnPreview; // 0x978(0x08)
	struct UWTLCommonButton* ucBtnCharacterPreview; // 0x980(0x08)
	struct FSlateBrush MuzzleAttachmentDefaultBrush; // 0x988(0x88)
	struct FSlateBrush FlashlightAttachmentDefaultBrush; // 0xa10(0x88)
	struct FSlateBrush ScopeAttachmentDefaultBrush; // 0xa98(0x88)
	struct FSlateBrush ArmoredPlateDefaultBrush; // 0xb20(0x88)
	struct FLinearColor GoodWeaponAttachmentConditionColor; // 0xba8(0x10)
	struct FLinearColor NormalWeaponAttachmentConditionColor; // 0xbb8(0x10)
	struct FLinearColor BadWeaponAttachmentConditionColor; // 0xbc8(0x10)

	void OnPreviewBtnClick(); // Function WTL.WTLHUDItemInformation.OnPreviewBtnClick // (Final|Native|Private) // @ game+0x1822330
	void OnCharacterPreviewBtnClick(); // Function WTL.WTLHUDItemInformation.OnCharacterPreviewBtnClick // (Final|Native|Private) // @ game+0x1822310
};

// Class WTL.WTLHUDItemInformationEffectInfluence
// Size: 0x288 (Inherited: 0x260)
struct UWTLHUDItemInformationEffectInfluence : UUserWidget {
	struct UImage* imgCharacterEffect; // 0x260(0x08)
	struct UTextBlock* tbInfluenceAtStart; // 0x268(0x08)
	struct UTextBlock* tbInfluencePerTick; // 0x270(0x08)
	struct FVector2D ImageSize; // 0x278(0x08)
	bool bIsShortRecord; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
};

// Class WTL.WTLHUDItemInformationMedicineEffect
// Size: 0x288 (Inherited: 0x260)
struct UWTLHUDItemInformationMedicineEffect : UUserWidget {
	struct UImage* imgEffect; // 0x260(0x08)
	struct UTextBlock* tbRange; // 0x268(0x08)
	struct UCanvasPanel* cpCurve; // 0x270(0x08)
	struct TArray<struct FWTLMedicineEffectImageInfo> ImagesInfo; // 0x278(0x10)
};

// Class WTL.WTLHUDItemInformationShort
// Size: 0x8f0 (Inherited: 0x8c8)
struct UWTLHUDItemInformationShort : UWTLHUDItemInformationBase {
	struct UVerticalBox* vbHotkeys; // 0x8c8(0x08)
	struct UHorizontalBox* hbShiftHotkey; // 0x8d0(0x08)
	struct UTextBlock* tbShiftHotkeyAction; // 0x8d8(0x08)
	struct UWTLHUDCraftInstrumentInfo* ucCraftInstrumentInfo; // 0x8e0(0x08)
	struct UWTLHUDPossibleModificationInfo* ucPossibleModificationInfo; // 0x8e8(0x08)
};

// Class WTL.WTLHUDItemInformationWindow
// Size: 0x298 (Inherited: 0x298)
struct UWTLHUDItemInformationWindow : UWTLCommonItemInformationWindow {
};

// Class WTL.WTLHUDItemPlacementHint
// Size: 0x290 (Inherited: 0x268)
struct UWTLHUDItemPlacementHint : UWTLHUDWidgetBase {
	struct UTextBlock* tbPlaceKeyName; // 0x268(0x08)
	struct UTextBlock* tbCancelKeyName; // 0x270(0x08)
	char pad_278[0x18]; // 0x278(0x18)
};

// Class WTL.WTLHUDItemReadWindow
// Size: 0x2a8 (Inherited: 0x288)
struct UWTLHUDItemReadWindow : UWTLHUDWindowBase {
	struct UScrollBox* sbContent; // 0x288(0x08)
	struct UTextBlock* tbContent; // 0x290(0x08)
	struct UTextBlock* tbCloseKey; // 0x298(0x08)
	struct UTextBlock* tbCloseKeyActionName; // 0x2a0(0x08)
};

// Class WTL.WTLHUDItemsCustomization
// Size: 0x288 (Inherited: 0x278)
struct UWTLHUDItemsCustomization : UWTLHUDInteractiveWidget {
	struct UWTLHUDItemsCustomizationWindow* ucItemsCustomizationWindow; // 0x278(0x08)
	struct UWTLCommonColorPresets* ucColorPresets; // 0x280(0x08)
};

// Class WTL.WTLHUDItemsCustomizationWindow
// Size: 0x388 (Inherited: 0x288)
struct UWTLHUDItemsCustomizationWindow : UWTLHUDWindowBase {
	struct UWTLCommonItemPreview* ucItemPreview; // 0x288(0x08)
	struct UWTLHUDInventorySlot* ucCustomizationSlot; // 0x290(0x08)
	struct UHorizontalBox* hbScalar; // 0x298(0x08)
	struct UWTLOptionsParameterSwitcher* ucPatternSwitcher; // 0x2a0(0x08)
	struct UHorizontalBox* hbColor; // 0x2a8(0x08)
	struct UWTLCommonColorButton* ucColorButton; // 0x2b0(0x08)
	struct UTextBlock* tbDefaultColor; // 0x2b8(0x08)
	struct UButton* btnResetColor; // 0x2c0(0x08)
	struct UScrollBox* sbColorIngredients; // 0x2c8(0x08)
	struct UWrapBox* wbColorIngredients; // 0x2d0(0x08)
	struct UHorizontalBox* hbCurrentSettings; // 0x2d8(0x08)
	struct UTextBlock* tbCurrentSettings; // 0x2e0(0x08)
	struct UHorizontalBox* hbActionPrice; // 0x2e8(0x08)
	struct UTextBlock* tbActionPrice; // 0x2f0(0x08)
	struct UImage* imgBalanceDone; // 0x2f8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnApply; // 0x300(0x08)
	char pad_308[0x8]; // 0x308(0x08)
	struct AWTLNPCActor* m_NPCActor; // 0x310(0x08)
	char pad_318[0x38]; // 0x318(0x38)
	struct TSoftClassPtr<UObject> IngredientItemSlotWidgetClass; // 0x350(0x28)
	struct FMargin IngredientSlotPadding; // 0x378(0x10)

	void OnResetColorBtnClicked(); // Function WTL.WTLHUDItemsCustomizationWindow.OnResetColorBtnClicked // (Final|Native|Private) // @ game+0x1822a60
	void OnPatternSwitcherValueChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLHUDItemsCustomizationWindow.OnPatternSwitcherValueChanged // (Final|Native|Private) // @ game+0x1822cb0
	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDItemsCustomizationWindow.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x1823000
	void OnItemColorPicked(enum class EWTLCustomizationColorPresetType ColorPresetType, int32_t Number, struct FLinearColor& Color, struct FLinearColor& PreviewColor); // Function WTL.WTLHUDItemsCustomizationWindow.OnItemColorPicked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x18227c0
	void OnCustomizationSlotInit(struct UWTLHUDInventorySlot* InventorySlot); // Function WTL.WTLHUDItemsCustomizationWindow.OnCustomizationSlotInit // (Final|Native|Private) // @ game+0x1822f20
	void OnCustomizationSlotClear(uint64_t ItemId); // Function WTL.WTLHUDItemsCustomizationWindow.OnCustomizationSlotClear // (Final|Native|Private) // @ game+0x1822e40
	void OnColorBtnClicked(struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLHUDItemsCustomizationWindow.OnColorBtnClicked // (Final|Native|Private|HasOutParms) // @ game+0x1822a80
	void OnApplyBtnClicked(); // Function WTL.WTLHUDItemsCustomizationWindow.OnApplyBtnClicked // (Final|Native|Private) // @ game+0x1822a40
};

// Class WTL.WTLHUDItemsModification
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDItemsModification : UWTLHUDInteractiveWidget {
	struct UWTLHUDItemsModificationWindow* ucItemsModificationWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDItemsModificationBarChart
// Size: 0x2b0 (Inherited: 0x260)
struct UWTLHUDItemsModificationBarChart : UUserWidget {
	struct UTextBlock* tbCurrentValue; // 0x260(0x08)
	struct UTextBlock* tbModifiedValue; // 0x268(0x08)
	struct UProgressBar* pbCurrentValue; // 0x270(0x08)
	struct UProgressBar* pbModifiedValue; // 0x278(0x08)
	struct FLinearColor DefaultBarFillColor; // 0x280(0x10)
	struct FLinearColor IncreasedBarFillColor; // 0x290(0x10)
	struct FLinearColor DecreasedBarFillColor; // 0x2a0(0x10)
};

// Class WTL.WTLHUDItemsModificationPercentDelta
// Size: 0x290 (Inherited: 0x260)
struct UWTLHUDItemsModificationPercentDelta : UUserWidget {
	struct UTextBlock* tbPercentDelta; // 0x260(0x08)
	struct UTextBlock* tbPercentSign; // 0x268(0x08)
	struct FLinearColor IncreasedColor; // 0x270(0x10)
	struct FLinearColor DecreasedColor; // 0x280(0x10)
};

// Class WTL.WTLHUDItemsModificationWindow
// Size: 0x4f8 (Inherited: 0x288)
struct UWTLHUDItemsModificationWindow : UWTLHUDWindowBase {
	struct UWTLHUDItemSlot* ucModificationKitItemSlot; // 0x288(0x08)
	struct UWTLHUDInventorySlot* ucItemForModificationSlot; // 0x290(0x08)
	struct UTextBlock* tbDropItemHint; // 0x298(0x08)
	struct UTextBlock* tbNoModificationDataHint; // 0x2a0(0x08)
	struct UBorder* bHintAreaHeightRegulator; // 0x2a8(0x08)
	struct UVerticalBox* vbModificators; // 0x2b0(0x08)
	struct UHorizontalBox* hbDamage; // 0x2b8(0x08)
	struct UTextBlock* tbDamageMin; // 0x2c0(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageDeltaMinFirstRangeSign; // 0x2c8(0x08)
	struct UTextBlock* tbDamageDeltaMinFirstRange; // 0x2d0(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageDeltaMinSecondRangeSign; // 0x2d8(0x08)
	struct UTextBlock* tbDamageDeltaMinSecondRange; // 0x2e0(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageDeltaMinArrow; // 0x2e8(0x08)
	struct UTextBlock* tbDamageMax; // 0x2f0(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageDeltaMaxFirstRangeSign; // 0x2f8(0x08)
	struct UTextBlock* tbDamageDeltaMaxFirstRange; // 0x300(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageDeltaMaxSecondRangeSign; // 0x308(0x08)
	struct UTextBlock* tbDamageDeltaMaxSecondRange; // 0x310(0x08)
	struct UWTLCommonToggleSwitcher* tsDamageDeltaMaxArrow; // 0x318(0x08)
	struct UHorizontalBox* hbAccuracy; // 0x320(0x08)
	struct UTextBlock* tbAccuracy; // 0x328(0x08)
	struct UWTLCommonToggleSwitcher* tsAccuracyDeltaMinRangeSign; // 0x330(0x08)
	struct UTextBlock* tbAccuracyDeltaMinRange; // 0x338(0x08)
	struct UWTLCommonToggleSwitcher* tsAccuracyDeltaMaxRangeSign; // 0x340(0x08)
	struct UTextBlock* tbAccuracyDeltaMaxRange; // 0x348(0x08)
	struct UWTLCommonToggleSwitcher* tsAccuracyDeltaArrow; // 0x350(0x08)
	struct UHorizontalBox* hbArmor; // 0x358(0x08)
	struct UTextBlock* tbArmorMin; // 0x360(0x08)
	struct UWTLCommonToggleSwitcher* tsArmorDeltaMinFirstRangeSign; // 0x368(0x08)
	struct UTextBlock* tbArmorDeltaMinFirstRange; // 0x370(0x08)
	struct UWTLCommonToggleSwitcher* tsArmorDeltaMinSecondRangeSign; // 0x378(0x08)
	struct UTextBlock* tbArmorDeltaMinSecondRange; // 0x380(0x08)
	struct UWTLCommonToggleSwitcher* tsArmorDeltaMinArrow; // 0x388(0x08)
	struct UTextBlock* tbArmorMax; // 0x390(0x08)
	struct UWTLCommonToggleSwitcher* tsArmorDeltaMaxFirstRangeSign; // 0x398(0x08)
	struct UTextBlock* tbArmorDeltaMaxFirstRange; // 0x3a0(0x08)
	struct UWTLCommonToggleSwitcher* tsArmorDeltaMaxSecondRangeSign; // 0x3a8(0x08)
	struct UTextBlock* tbArmorDeltaMaxSecondRange; // 0x3b0(0x08)
	struct UWTLCommonToggleSwitcher* tsArmorDeltaMaxArrow; // 0x3b8(0x08)
	struct UTextBlock* tbMonsterArmorMin; // 0x3c0(0x08)
	struct UWTLCommonToggleSwitcher* tsMonsterArmorDeltaMinFirstRangeSign; // 0x3c8(0x08)
	struct UTextBlock* tbMonsterArmorDeltaMinFirstRange; // 0x3d0(0x08)
	struct UWTLCommonToggleSwitcher* tsMonsterArmorDeltaMinSecondRangeSign; // 0x3d8(0x08)
	struct UTextBlock* tbMonsterArmorDeltaMinSecondRange; // 0x3e0(0x08)
	struct UWTLCommonToggleSwitcher* tsMonsterArmorDeltaMinArrow; // 0x3e8(0x08)
	struct UTextBlock* tbMonsterArmorMax; // 0x3f0(0x08)
	struct UWTLCommonToggleSwitcher* tsMonsterArmorDeltaMaxFirstRangeSign; // 0x3f8(0x08)
	struct UTextBlock* tbMonsterArmorDeltaMaxFirstRange; // 0x400(0x08)
	struct UWTLCommonToggleSwitcher* tsMonsterArmorDeltaMaxSecondRangeSign; // 0x408(0x08)
	struct UTextBlock* tbMonsterArmorDeltaMaxSecondRange; // 0x410(0x08)
	struct UWTLCommonToggleSwitcher* tsMonsterArmorDeltaMaxArrow; // 0x418(0x08)
	struct UHorizontalBox* hbWeight; // 0x420(0x08)
	struct UTextBlock* tbWeight; // 0x428(0x08)
	struct UWTLCommonToggleSwitcher* tsWeightDeltaMinRangeSign; // 0x430(0x08)
	struct UTextBlock* tbWeightDeltaMinRange; // 0x438(0x08)
	struct UWTLCommonToggleSwitcher* tsWeightDeltaMaxRangeSign; // 0x440(0x08)
	struct UTextBlock* tbWeightDeltaMaxRange; // 0x448(0x08)
	struct UWTLCommonToggleSwitcher* tsWeightDeltaArrow; // 0x450(0x08)
	struct UHorizontalBox* hbWearResistance; // 0x458(0x08)
	struct UTextBlock* tbWearResistance; // 0x460(0x08)
	struct UWTLCommonToggleSwitcher* tsWearResistanceDeltaMinRangeSign; // 0x468(0x08)
	struct UTextBlock* tbWearResistanceDeltaMinRange; // 0x470(0x08)
	struct UWTLCommonToggleSwitcher* tsWearResistanceDeltaMaxRangeSign; // 0x478(0x08)
	struct UTextBlock* tbWearResistanceDeltaMaxRange; // 0x480(0x08)
	struct UWTLCommonToggleSwitcher* tsWearResistanceDeltaArrow; // 0x488(0x08)
	struct UHorizontalBox* hbModificationChance; // 0x490(0x08)
	struct UBorder* bModificationChance; // 0x498(0x08)
	struct UTextBlock* tbModificationChance; // 0x4a0(0x08)
	struct UTextBlock* tbModificationWarning; // 0x4a8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnApply; // 0x4b0(0x08)
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct FLinearColor ModificationChanceHighColor; // 0x4c8(0x10)
	struct FLinearColor ModificationChanceMediumColor; // 0x4d8(0x10)
	struct FLinearColor ModificationChanceLowColor; // 0x4e8(0x10)

	void OnUseModificationKitResult(bool IsSuccess); // Function WTL.WTLHUDItemsModificationWindow.OnUseModificationKitResult // (Final|Native|Private) // @ game+0x18281e0
	void OnItemForModificationSlotInit(struct UWTLHUDInventorySlot* InventorySlot); // Function WTL.WTLHUDItemsModificationWindow.OnItemForModificationSlotInit // (Final|Native|Private) // @ game+0x1828490
	void OnItemForModificationSlotClear(uint64_t ItemId); // Function WTL.WTLHUDItemsModificationWindow.OnItemForModificationSlotClear // (Final|Native|Private) // @ game+0x18283c0
	void OnApplyModificationKitConfirm(); // Function WTL.WTLHUDItemsModificationWindow.OnApplyModificationKitConfirm // (Final|Native|Private) // @ game+0x18282c0
	void OnApplyBtnClicked(); // Function WTL.WTLHUDItemsModificationWindow.OnApplyBtnClicked // (Final|Native|Private) // @ game+0x18283a0
};

// Class WTL.WTLHUDItemSplitBuyWindow
// Size: 0x378 (Inherited: 0x288)
struct UWTLHUDItemSplitBuyWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbItemName; // 0x288(0x08)
	struct UTextBlock* tbTotalWeight; // 0x290(0x08)
	struct UTextBlock* tbTotalPrice; // 0x298(0x08)
	struct UTextBlock* tbErrorNotify; // 0x2a0(0x08)
	struct UWTLUtilityNumberTextBox* ntbCountToBuy; // 0x2a8(0x08)
	struct UWTLCommonButton* ucBtnCountUp; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnCountDown; // 0x2b8(0x08)
	struct UButton* btnCountAll; // 0x2c0(0x08)
	struct UButton* btnCountMoneyAll; // 0x2c8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2d0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x2d8(0x08)
	char pad_2E0[0x70]; // 0x2e0(0x70)
	struct TSoftObjectPtr<UFMODEvent> BuySellItemsSoundEvent; // 0x350(0x28)

	void OnOKBtnClick(); // Function WTL.WTLHUDItemSplitBuyWindow.OnOKBtnClick // (Final|Native|Private) // @ game+0x18289a0
	void OnCountUpBtnClick(); // Function WTL.WTLHUDItemSplitBuyWindow.OnCountUpBtnClick // (Final|Native|Private) // @ game+0x1828a20
	void OnCountToBuyValueChange(int32_t NewCount); // Function WTL.WTLHUDItemSplitBuyWindow.OnCountToBuyValueChange // (Final|Native|Private) // @ game+0x18288b0
	void OnCountToBuyTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDItemSplitBuyWindow.OnCountToBuyTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x18286d0
	void OnCountMoneyAllBtnClick(); // Function WTL.WTLHUDItemSplitBuyWindow.OnCountMoneyAllBtnClick // (Final|Native|Private) // @ game+0x18289c0
	void OnCountDownBtnClick(); // Function WTL.WTLHUDItemSplitBuyWindow.OnCountDownBtnClick // (Final|Native|Private) // @ game+0x1828a00
	void OnCountAllBtnClick(); // Function WTL.WTLHUDItemSplitBuyWindow.OnCountAllBtnClick // (Final|Native|Private) // @ game+0x18289e0
	void OnBuyItemConfirm(); // Function WTL.WTLHUDItemSplitBuyWindow.OnBuyItemConfirm // (Final|Native|Private) // @ game+0x1828980
};

// Class WTL.WTLHUDItemSplitWindow
// Size: 0x340 (Inherited: 0x288)
struct UWTLHUDItemSplitWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbItemName; // 0x288(0x08)
	struct UImage* imgItem; // 0x290(0x08)
	struct UTextBlock* tbItemSplitCount; // 0x298(0x08)
	struct UTextBlock* tbFromWeight; // 0x2a0(0x08)
	struct UTextBlock* tbToWeight; // 0x2a8(0x08)
	struct UWTLUtilityNumberTextBox* ntbFrom; // 0x2b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbTo; // 0x2b8(0x08)
	struct USlider* slSplit; // 0x2c0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2c8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x2d0(0x08)
	char pad_2D8[0x68]; // 0x2d8(0x68)

	void OnToValueCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDItemSplitWindow.OnToValueCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1828f50
	void OnToValueChanged(int32_t Value); // Function WTL.WTLHUDItemSplitWindow.OnToValueChanged // (Final|Native|Private) // @ game+0x18293e0
	void OnTakeFromClanStorage(struct FString Description); // Function WTL.WTLHUDItemSplitWindow.OnTakeFromClanStorage // (Final|Native|Private) // @ game+0x18298a0
	void OnSplitSliderValueChanged(float Value); // Function WTL.WTLHUDItemSplitWindow.OnSplitSliderValueChanged // (Final|Native|Private) // @ game+0x1829310
	void OnPutToClanStorage(struct FString Description); // Function WTL.WTLHUDItemSplitWindow.OnPutToClanStorage // (Final|Native|Private) // @ game+0x18297b0
	void OnOKBtnClick(); // Function WTL.WTLHUDItemSplitWindow.OnOKBtnClick // (Final|Native|Private) // @ game+0x1829790
	void OnFromValueCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDItemSplitWindow.OnFromValueCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1829130
	void OnFromValueChanged(int32_t Value); // Function WTL.WTLHUDItemSplitWindow.OnFromValueChanged // (Final|Native|Private) // @ game+0x18294f0
	void OnDropFromInventoryConfirmed(); // Function WTL.WTLHUDItemSplitWindow.OnDropFromInventoryConfirmed // (Final|Native|Private) // @ game+0x18296c0
	void OnDestroyInInventoryConfirmed(); // Function WTL.WTLHUDItemSplitWindow.OnDestroyInInventoryConfirmed // (Final|Native|Private) // @ game+0x18295f0
};

// Class WTL.WTLHUDItemTypeTabButton
// Size: 0x12f0 (Inherited: 0x12c8)
struct UWTLHUDItemTypeTabButton : UWTLCommonTabButton {
	struct UImage* imgTab; // 0x12c8(0x08)
	char pad_12D0[0x20]; // 0x12d0(0x20)
};

// Class WTL.WTLHUDItemViewWindow
// Size: 0x320 (Inherited: 0x288)
struct UWTLHUDItemViewWindow : UWTLHUDWindowBase {
	struct UBorder* bBackground; // 0x288(0x08)
	struct UTextBlock* tbNoImage; // 0x290(0x08)
	struct UImage* imgView; // 0x298(0x08)
	struct UHorizontalBox* hbReadHint; // 0x2a0(0x08)
	struct UTextBlock* tbReadKey; // 0x2a8(0x08)
	struct UTextBlock* tbReadKeyActionName; // 0x2b0(0x08)
	struct UHorizontalBox* hbShowTranslationHint; // 0x2b8(0x08)
	struct UTextBlock* tbCloseKey; // 0x2c0(0x08)
	struct UTextBlock* tbCloseKeyActionName; // 0x2c8(0x08)
	struct UWTLOptionsParameterSwitcher* psViewPages; // 0x2d0(0x08)
	char pad_2D8[0x24]; // 0x2d8(0x24)
	float MAX_IMAGE_VIEW_SIZE_X; // 0x2fc(0x04)
	float MAX_IMAGE_VIEW_SIZE_Y; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct FKey ReadKey; // 0x308(0x18)

	void OnViewPagesValueChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLHUDItemViewWindow.OnViewPagesValueChanged // (Final|Native|Private) // @ game+0x1829fc0
	struct FEventReply OnBackgroundMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLHUDItemViewWindow.OnBackgroundMouseButtonDown // (Final|Native|Private|HasOutParms) // @ game+0x182a120
};

// Class WTL.WTLHUDJunkMachine
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDJunkMachine : UWTLHUDInteractiveWidget {
	struct UWTLHUDJunkMachineWindow* ucJunkMachineWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDJunkMachineWindow
// Size: 0x360 (Inherited: 0x288)
struct UWTLHUDJunkMachineWindow : UWTLHUDWindowBase {
	struct UHorizontalBox* hbTabBtns; // 0x288(0x08)
	struct UWidgetSwitcher* wsMain; // 0x290(0x08)
	struct UWidgetSwitcher* wsUtilization; // 0x298(0x08)
	struct UWTLHUDUtilizationStorage* ucUtilizationStorage; // 0x2a0(0x08)
	struct UWidgetSwitcher* wsExchange; // 0x2a8(0x08)
	struct UWTLHUDItemTypeSlot* ucExchangedItemTypeSlot; // 0x2b0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnExchange; // 0x2b8(0x08)
	struct UTextBlock* tbInventorySlotsCheck; // 0x2c0(0x08)
	struct UWidgetSwitcher* wsFirstSlotCheck; // 0x2c8(0x08)
	struct UWidgetSwitcher* wsSecondSlotCheck; // 0x2d0(0x08)
	struct UWidgetSwitcher* wsThirdSlotCheck; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct TSoftClassPtr<UObject> TabButtonClass; // 0x2e8(0x28)
	struct FSlateColor InventorySlotsCheckValidColor; // 0x310(0x28)
	struct FSlateColor InventorySlotsCheckNotValidColor; // 0x338(0x28)

	void OnTabBtnClicked(char TabIndex); // Function WTL.WTLHUDJunkMachineWindow.OnTabBtnClicked // (Final|Native|Private) // @ game+0x182a700
	void OnJunkMachineBlackListChanged(); // Function WTL.WTLHUDJunkMachineWindow.OnJunkMachineBlackListChanged // (Final|Native|Private) // @ game+0x182a7d0
	void OnExchangeConfirmed(); // Function WTL.WTLHUDJunkMachineWindow.OnExchangeConfirmed // (Final|Native|Private) // @ game+0x182a660
	void OnExchangeBtnClicked(); // Function WTL.WTLHUDJunkMachineWindow.OnExchangeBtnClicked // (Final|Native|Private) // @ game+0x182a6e0
};

// Class WTL.WTLHUDLayer
// Size: 0x268 (Inherited: 0x260)
struct UWTLHUDLayer : UUserWidget {
	struct UCanvasPanel* cpLayer; // 0x260(0x08)
};

// Class WTL.WTLHUDLevelBar
// Size: 0x270 (Inherited: 0x268)
struct UWTLHUDLevelBar : UWTLHUDWidgetBase {
	struct UProgressBar* pbLevel; // 0x268(0x08)
};

// Class WTL.WTLHUDLevelUp
// Size: 0x328 (Inherited: 0x268)
struct UWTLHUDLevelUp : UWTLHUDWidgetBase {
	struct UBorder* bBackground; // 0x268(0x08)
	struct UTextBlock* tbLevel; // 0x270(0x08)
	struct UHorizontalBox* hbParametersPoints; // 0x278(0x08)
	struct UTextBlock* tbParametersPoints; // 0x280(0x08)
	struct UTextBlock* tbParametersPointsCaption; // 0x288(0x08)
	struct UHorizontalBox* hbSkillPoints; // 0x290(0x08)
	struct UTextBlock* tbSkillPoints; // 0x298(0x08)
	struct UTextBlock* tbSkillPointsCaption; // 0x2a0(0x08)
	char pad_2A8[0x24]; // 0x2a8(0x24)
	float DefaultBackgroundHeight; // 0x2cc(0x04)
	float ValueHeightDelta; // 0x2d0(0x04)
	float StartShowParametersPointsAnimDelay; // 0x2d4(0x04)
	float StartShowSkillPointsAnimDelay; // 0x2d8(0x04)
	float HideDelayTime; // 0x2dc(0x04)
	struct TSoftObjectPtr<UFMODEvent> LevelUpSoundEvent; // 0x2e0(0x28)
	struct UWidgetAnimation* ShowAnimation; // 0x308(0x08)
	struct UWidgetAnimation* HideAnimation; // 0x310(0x08)
	struct UWidgetAnimation* ShowParametersPointsAnimation; // 0x318(0x08)
	struct UWidgetAnimation* ShowSkillPointsAnimation; // 0x320(0x08)

	void OnShowAnimationFinished(); // Function WTL.WTLHUDLevelUp.OnShowAnimationFinished // (Final|Native|Private) // @ game+0x182aad0
	void OnHideAnimationFinished(); // Function WTL.WTLHUDLevelUp.OnHideAnimationFinished // (Final|Native|Private) // @ game+0x182aab0
};

// Class WTL.WTLHUDLoader
// Size: 0x270 (Inherited: 0x268)
struct UWTLHUDLoader : UWTLHUDWidgetBase {
	struct UTextBlock* tbLoaderStatus; // 0x268(0x08)
};

// Class WTL.WTLHUDMailBox
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDMailBox : UWTLHUDInteractiveWidget {
	struct UWTLHUDMailBoxWindow* ucMailBoxWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDMailBoxInboxListItem
// Size: 0x540 (Inherited: 0x260)
struct UWTLHUDMailBoxInboxListItem : UUserWidget {
	struct UBorder* bMain; // 0x260(0x08)
	struct UImage* imgIcon; // 0x268(0x08)
	struct UTextBlock* tbFrom; // 0x270(0x08)
	struct UHorizontalBox* hbWeight; // 0x278(0x08)
	struct UTextBlock* tbWeight; // 0x280(0x08)
	struct UImage* imgDeleteRemainingTime; // 0x288(0x08)
	struct UTextBlock* tbDeleteRemainingTime; // 0x290(0x08)
	struct UHorizontalBox* hbTokensAmountHead; // 0x298(0x08)
	struct UTextBlock* tbTokensAmountHead; // 0x2a0(0x08)
	struct UWTLCommonTextButton* ucBtnAction; // 0x2a8(0x08)
	struct UVerticalBox* vbContent; // 0x2b0(0x08)
	struct UCanvasPanel* cpMessageText; // 0x2b8(0x08)
	struct UTextBlock* tbMessageText; // 0x2c0(0x08)
	struct UHorizontalBox* hbItems; // 0x2c8(0x08)
	struct UHorizontalBox* hbTokensAmountBody; // 0x2d0(0x08)
	struct UTextBlock* tbTokensAmountBody; // 0x2d8(0x08)
	struct UWTLCommonTextButton* ucBtnReceive; // 0x2e0(0x08)
	char pad_2E8[0x150]; // 0x2e8(0x150)
	struct TSoftClassPtr<UObject> ItemSlotWidgetClass; // 0x438(0x28)
	float DefaultHeight; // 0x460(0x04)
	float MessageTextHeight; // 0x464(0x04)
	float ItemsHeight; // 0x468(0x04)
	float hbTokensAmountBodyHeight; // 0x46c(0x04)
	float hbReceiveBtnHeight; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	struct TSoftObjectPtr<UTexture2D> LetterIcon; // 0x478(0x28)
	struct TSoftObjectPtr<UTexture2D> ItemsIcon; // 0x4a0(0x28)
	struct TSoftObjectPtr<UTexture2D> TokensIcon; // 0x4c8(0x28)
	char MaxItemsToAdd; // 0x4f0(0x01)
	char pad_4F1[0x4f]; // 0x4f1(0x4f)

	void OnReceiveBtnClicked(); // Function WTL.WTLHUDMailBoxInboxListItem.OnReceiveBtnClicked // (Final|Native|Private) // @ game+0x182afd0
	void OnActionBtnClicked(); // Function WTL.WTLHUDMailBoxInboxListItem.OnActionBtnClicked // (Final|Native|Private) // @ game+0x182b020
};

// Class WTL.WTLHUDMailBoxSentMailListItem
// Size: 0x370 (Inherited: 0x260)
struct UWTLHUDMailBoxSentMailListItem : UUserWidget {
	struct UTextBlock* tbToCharacterName; // 0x260(0x08)
	struct UTextBlock* tbMailDate; // 0x268(0x08)
	struct UTextBlock* tbDeliveryType; // 0x270(0x08)
	struct UTextBlock* tbTotalWeight; // 0x278(0x08)
	struct UTextBlock* tbTotalPrice; // 0x280(0x08)
	struct UImage* imgMessageText; // 0x288(0x08)
	struct UTextBlock* tbState; // 0x290(0x08)
	struct UWidgetSwitcher* wsStateInfo; // 0x298(0x08)
	struct UTextBlock* tbFactDeliveryDate; // 0x2a0(0x08)
	struct FSlateColor TravelingStateTextColor; // 0x2a8(0x28)
	struct FSlateColor ReadyToPickupStateTextColor; // 0x2d0(0x28)
	struct FSlateColor DeliveredStateTextColor; // 0x2f8(0x28)
	struct FSlateColor ExpiredStateTextColor; // 0x320(0x28)
	struct TSoftClassPtr<UObject> HUDToolTipTextWidgetClass; // 0x348(0x28)
};

// Class WTL.WTLHUDMailBoxStorage
// Size: 0x3a0 (Inherited: 0x2d8)
struct UWTLHUDMailBoxStorage : UWTLHUDPriceStorage {
	struct UWTLCommonSuggestionTextBox* stbRecipientName; // 0x2d8(0x08)
	struct UEditableTextBox* etbRecipientName; // 0x2e0(0x08)
	struct UWidgetSwitcher* wsRecipientNameValidation; // 0x2e8(0x08)
	struct UEditableTextBox* etbSubject; // 0x2f0(0x08)
	struct UMultiLineEditableTextBox* etbMessageText; // 0x2f8(0x08)
	struct UTextBlock* tbMessageCharactersCountCurrent; // 0x300(0x08)
	struct UTextBlock* tbMessageCharactersCountMax; // 0x308(0x08)
	struct UTextBlock* tbWeightLimit; // 0x310(0x08)
	struct UTextBlock* tbCurrentWeight; // 0x318(0x08)
	struct UWTLUtilityNumberTextBox* ntbTokensAmountToSend; // 0x320(0x08)
	struct UWTLCommonComboBoxString* cbsDeliveryType; // 0x328(0x08)
	struct UTextBlock* tbDeliveryDelay; // 0x330(0x08)
	struct UTextBlock* tbDeliveryDelayHours; // 0x338(0x08)
	struct UThrobber* thSendLoader; // 0x340(0x08)
	char pad_348[0x58]; // 0x348(0x58)

	void OnTokensAmountToSendValueChange(int32_t Value); // Function WTL.WTLHUDMailBoxStorage.OnTokensAmountToSendValueChange // (Final|Native|Private) // @ game+0x182b840
	void OnTokensAmountToSendCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDMailBoxStorage.OnTokensAmountToSendCommitted // (Final|Native|Private|HasOutParms) // @ game+0x182b660
	void OnSendMailSuccessResultDialogHide(); // Function WTL.WTLHUDMailBoxStorage.OnSendMailSuccessResultDialogHide // (Final|Native|Private) // @ game+0xe77850
	void OnSendCheckRecipientNameRequest(); // Function WTL.WTLHUDMailBoxStorage.OnSendCheckRecipientNameRequest // (Final|Native|Private) // @ game+0x182b460
	void OnRecipientNameCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDMailBoxStorage.OnRecipientNameCommitted // (Final|Native|Private|HasOutParms) // @ game+0x182bc10
	void OnRecipientNameChanged(struct FText& Text); // Function WTL.WTLHUDMailBoxStorage.OnRecipientNameChanged // (Final|Native|Private|HasOutParms) // @ game+0x182bdd0
	void OnMessageTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDMailBoxStorage.OnMessageTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x182b920
	void OnMessageTextChanged(struct FText& Text); // Function WTL.WTLHUDMailBoxStorage.OnMessageTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x182bae0
	void OnMailPackageSent(); // Function WTL.WTLHUDMailBoxStorage.OnMailPackageSent // (Final|Native|Private) // @ game+0x182b340
	void OnMailPackageSendTimeout(); // Function WTL.WTLHUDMailBoxStorage.OnMailPackageSendTimeout // (Final|Native|Private) // @ game+0x182b320
	void OnDeliveryTypeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDMailBoxStorage.OnDeliveryTypeSelectionChanged // (Final|Native|Private) // @ game+0x182b480
	void OnCheckRecipientNameAvailableResponse(struct FWTLResponse& Response); // Function WTL.WTLHUDMailBoxStorage.OnCheckRecipientNameAvailableResponse // (Final|Native|Private|HasOutParms) // @ game+0x182b360
};

// Class WTL.WTLHUDMailBoxWindow
// Size: 0x3d8 (Inherited: 0x288)
struct UWTLHUDMailBoxWindow : UWTLHUDWindowBase {
	struct UHorizontalBox* hbTabBtns; // 0x288(0x08)
	struct UWidgetSwitcher* wsMail; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct UWidgetSwitcher* wsInbox; // 0x2a0(0x08)
	struct UWidgetSwitcher* wsInboxList; // 0x2a8(0x08)
	struct UScrollBox* sbInboxList; // 0x2b0(0x08)
	struct UWTLCommonTextButton* ucBtnUpdateInbox; // 0x2b8(0x08)
	struct UWTLCommonPageSwitcher* ucPageSwitcher; // 0x2c0(0x08)
	struct UWidgetSwitcher* wsUpdateTextInbox; // 0x2c8(0x08)
	struct UWidgetSwitcher* wsSentMail; // 0x2d0(0x08)
	struct UScrollBox* sbSentMailList; // 0x2d8(0x08)
	char pad_2E0[0x78]; // 0x2e0(0x78)
	struct UWTLHUDMailBoxStorage* ucMailBoxStorage; // 0x358(0x08)
	struct TSoftClassPtr<UObject> TabButtonClass; // 0x360(0x28)
	struct TSoftClassPtr<UObject> MailBoxInboxListItemWidgetClass; // 0x388(0x28)
	struct TSoftClassPtr<UObject> MailBoxSentMailListItemWidgetClass; // 0x3b0(0x28)

	void UpdateInboxList(int32_t CurrentPageIndex); // Function WTL.WTLHUDMailBoxWindow.UpdateInboxList // (Final|Native|Private) // @ game+0x182d000
	void UpdateInbox(); // Function WTL.WTLHUDMailBoxWindow.UpdateInbox // (Final|Native|Private) // @ game+0x182d0d0
	void OnTabBtnClicked(char TabIndex); // Function WTL.WTLHUDMailBoxWindow.OnTabBtnClicked // (Final|Native|Private) // @ game+0x182c5a0
	void OnSentMailListScrolled(float CurrentOffset); // Function WTL.WTLHUDMailBoxWindow.OnSentMailListScrolled // (Final|Native|Private) // @ game+0x182c670
	void OnMailPackageReceived(uint64_t MailPackageID); // Function WTL.WTLHUDMailBoxWindow.OnMailPackageReceived // (Final|Native|Private) // @ game+0x182cc90
	void OnMailPackageReceiveClicked(struct FWTLMailPackageRecord MailPackage); // Function WTL.WTLHUDMailBoxWindow.OnMailPackageReceiveClicked // (Final|Native|Private) // @ game+0x182cab0
	void OnMailPackageOpenClicked(struct UWTLHUDMailBoxInboxListItem* OpenedInboxListItem, struct FWTLMailPackageRecord& MailPackage); // Function WTL.WTLHUDMailBoxWindow.OnMailPackageOpenClicked // (Final|Native|Private|HasOutParms) // @ game+0x182c790
	void OnMailPackageListReceived(struct TArray<struct FWTLMailPackageRecord>& MailPackages); // Function WTL.WTLHUDMailBoxWindow.OnMailPackageListReceived // (Final|Native|Private|HasOutParms) // @ game+0x182cd70
	void OnMailPackageCountReceived(int32_t Count); // Function WTL.WTLHUDMailBoxWindow.OnMailPackageCountReceived // (Final|Native|Private) // @ game+0x182cf30
	void OnMailPackageCloseClicked(); // Function WTL.WTLHUDMailBoxWindow.OnMailPackageCloseClicked // (Final|Native|Private) // @ game+0x182c770
	void OnMailBoxActiveStateChanged(bool IsActive); // Function WTL.WTLHUDMailBoxWindow.OnMailBoxActiveStateChanged // (Final|Native|Private) // @ game+0x1823000
	void OnInboxListScrolled(float CurrentOffset); // Function WTL.WTLHUDMailBoxWindow.OnInboxListScrolled // (Final|Native|Private) // @ game+0x182d0f0
};

// Class WTL.WTLHUDMainMenu
// Size: 0x8f8 (Inherited: 0x4f8)
struct AWTLHUDMainMenu : AWTLHUDBase {
	struct UWTLMainMenuCredits* m_Credits; // 0x4f8(0x08)
	struct UWTLMainMenuAnnouncer* m_AnnouncerWidget; // 0x500(0x08)
	struct UWTLCommonButton* m_OptionsButtonWidget; // 0x508(0x08)
	struct UWTLCommonOptions* m_OptionsWidget; // 0x510(0x08)
	struct UWTLMainMenuCreditsAmountWithTopUp* m_CreditsAmountWithTopUpWidget; // 0x518(0x08)
	struct UWTLMainMenuChooseLanguage* m_ChooseLanguageWidget; // 0x520(0x08)
	struct UWTLMainMenuChooseAccountType* m_ChooseAccountTypeWidget; // 0x528(0x08)
	struct UWTLMainMenuServerAuthorization* m_ServerAuthorizationWidget; // 0x530(0x08)
	struct UWTLMainMenuActionWaiting* m_ActionWaitingWidget; // 0x538(0x08)
	struct UWTLCommonNotificator* m_ErrorNotificatorWidget; // 0x540(0x08)
	struct UWTLMainMenuGameVersionInfo* m_GameVersionInfoWidget; // 0x548(0x08)
	struct UWTLMainMenuMoviePlayer* m_MoviePlayerWidget; // 0x550(0x08)
	struct UWTLMainMenuCharacterSelectToActionWindow* m_CharacterSelectToActionWindowWidget; // 0x558(0x08)
	struct UWTLMainMenuSexSelectToPreviewWindow* m_SexSelectToPreviewWindowWidget; // 0x560(0x08)
	struct UWTLMainMenuStart* m_StartWidget; // 0x568(0x08)
	struct UWTLMainMenuServerList* m_ServerListWidget; // 0x570(0x08)
	struct UWTLMainMenuCharacterSelect* m_CharacterSelectWidget; // 0x578(0x08)
	struct UWTLMainMenuCharacterCreate* m_CharacterCreateWidget; // 0x580(0x08)
	struct UWTLMainMenuCustomizationEdit* m_CustomizationEditWidget; // 0x588(0x08)
	struct UWTLMainMenuBase* m_CurrentMainMenuWidget; // 0x590(0x08)
	char pad_598[0x8]; // 0x598(0x08)
	struct TSoftClassPtr<UObject> AnnouncerWidgetClass; // 0x5a0(0x28)
	struct TSoftClassPtr<UObject> OptionsButtonWidgetClass; // 0x5c8(0x28)
	struct TSoftClassPtr<UObject> CommonOptionsWidgetClass; // 0x5f0(0x28)
	struct TSoftClassPtr<UObject> CreditsAmountWithTopUpWidgetClass; // 0x618(0x28)
	struct TSoftClassPtr<UObject> ChooseLanguageWidgetClass; // 0x640(0x28)
	struct TSoftClassPtr<UObject> ChooseAccountTypeWidgetClass; // 0x668(0x28)
	struct TSoftClassPtr<UObject> ServerAuthorizationWidgetClass; // 0x690(0x28)
	struct TSoftClassPtr<UObject> ActionWaitingWidgetClass; // 0x6b8(0x28)
	struct TSoftClassPtr<UObject> ErrorNotificatorWidgetClass; // 0x6e0(0x28)
	struct TSoftClassPtr<UObject> GameVersionInfoWidgetClass; // 0x708(0x28)
	struct TSoftClassPtr<UObject> MoviePlayerWidgetClass; // 0x730(0x28)
	struct TSoftClassPtr<UObject> CreditsWidgetClass; // 0x758(0x28)
	struct TSoftClassPtr<UObject> StartWidgetClass; // 0x780(0x28)
	struct TSoftClassPtr<UObject> ServerListWidgetClass; // 0x7a8(0x28)
	struct TSoftClassPtr<UObject> CharacterSelectWidgetClass; // 0x7d0(0x28)
	struct TSoftClassPtr<UObject> CharacterCreateWidgetClass; // 0x7f8(0x28)
	struct TSoftClassPtr<UObject> CustomizationEditWidgetClass; // 0x820(0x28)
	struct TSoftClassPtr<UObject> CharacterSelectToActionWindowWidgetClass; // 0x848(0x28)
	struct TSoftClassPtr<UObject> SexSelectToPreviewWindowWidgetClass; // 0x870(0x28)
	char pad_898[0x60]; // 0x898(0x60)

	void ShowItemInformation(struct FWTLStoreItem& StoreItemToShowInformation, struct FWTLFullCharacterInfo& CharacterInfo, struct FWTLCharacterCurrentState& CharacterCurrentState); // Function WTL.WTLHUDMainMenu.ShowItemInformation // (Final|Native|Private|HasOutParms) // @ game+0x182d4f0
	void ShowCharacterPreview(struct FWTLStoreItem& StoreItemToPreview, struct FWTLFullCharacterInfo& FullCharacterInfo, struct FWTLCharacterCurrentState& CharacterCurrentState); // Function WTL.WTLHUDMainMenu.ShowCharacterPreview // (Final|Native|Private|HasOutParms) // @ game+0x182da40
	void OnWindowHide(); // Function WTL.WTLHUDMainMenu.OnWindowHide // (Final|Native|Public) // @ game+0x182d4b0
	void OnStoreClosed(); // Function WTL.WTLHUDMainMenu.OnStoreClosed // (Final|Native|Private) // @ game+0x182e120
	void OnShowCodeActivationWindow(); // Function WTL.WTLHUDMainMenu.OnShowCodeActivationWindow // (Final|Native|Public) // @ game+0x182d4d0
	void OnSexSelectToPreview(struct FWTLStoreItem& StoreItemToPreview, enum class EWTLSex Sex); // Function WTL.WTLHUDMainMenu.OnSexSelectToPreview // (Final|Native|Private|HasOutParms) // @ game+0x182df80
	void OnOptionsClosed(); // Function WTL.WTLHUDMainMenu.OnOptionsClosed // (Final|Native|Private) // @ game+0x182e140
	void OnOptionsButtonClicked(); // Function WTL.WTLHUDMainMenu.OnOptionsButtonClicked // (Final|Native|Private) // @ game+0x182e160
	void OnMoviePlayerHide(); // Function WTL.WTLHUDMainMenu.OnMoviePlayerHide // (Final|Native|Private) // @ game+0xe77850
	void OnCreditsClosed(); // Function WTL.WTLHUDMainMenu.OnCreditsClosed // (Final|Native|Private) // @ game+0x182e180
	void OnAuthorizeCancel(); // Function WTL.WTLHUDMainMenu.OnAuthorizeCancel // (Final|Native|Private) // @ game+0x182e1a0
};

// Class WTL.WTLHUDMinimap
// Size: 0x450 (Inherited: 0x268)
struct UWTLHUDMinimap : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpMain; // 0x268(0x08)
	struct UImage* imgAzimuth; // 0x270(0x08)
	struct URetainerBox* rbMarker; // 0x278(0x08)
	struct UCanvasPanel* cpMarker; // 0x280(0x08)
	struct UImage* imgMinimap; // 0x288(0x08)
	struct UImage* imgPlayerPointer; // 0x290(0x08)
	struct UCanvasPanel* cpNoSatelliteSignal; // 0x298(0x08)
	struct UHorizontalBox* hbBar; // 0x2a0(0x08)
	struct UBorder* bSectorPosition; // 0x2a8(0x08)
	struct UTextBlock* tbSectorPosition; // 0x2b0(0x08)
	struct UBorder* bCurrentLevelTime; // 0x2b8(0x08)
	struct UTextBlock* tbCurrentLevelTime; // 0x2c0(0x08)
	char pad_2C8[0x20]; // 0x2c8(0x20)
	struct TArray<struct FWTLMapCanvasMarker> m_MinimapCanvasMarkers; // 0x2e8(0x10)
	char pad_2F8[0x18]; // 0x2f8(0x18)
	struct FWTLMapItemData DefaultMapItemData; // 0x310(0x118)
	struct TSoftClassPtr<UObject> MinimapMarkerClass; // 0x428(0x28)
};

// Class WTL.WTLHUDMoneyTransferWindow
// Size: 0x310 (Inherited: 0x288)
struct UWTLHUDMoneyTransferWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbReceiverName; // 0x288(0x08)
	struct UWTLUtilityNumberTextBox* ntbAmount; // 0x290(0x08)
	struct UEditableTextBox* etbCommentary; // 0x298(0x08)
	struct UWTLCommonHotkeyButton* ucBtnConfirm; // 0x2a0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x2a8(0x08)
	char pad_2B0[0x60]; // 0x2b0(0x60)

	void OnMoneyTransferConfirm(); // Function WTL.WTLHUDMoneyTransferWindow.OnMoneyTransferConfirm // (Final|Native|Private) // @ game+0x182ed00
	void OnConfirmBtnClick(); // Function WTL.WTLHUDMoneyTransferWindow.OnConfirmBtnClick // (Final|Native|Private) // @ game+0x182f4c0
	void OnCommentaryTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDMoneyTransferWindow.OnCommentaryTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x182ee50
	void OnCommentaryTextBoxChanged(struct FText& InText); // Function WTL.WTLHUDMoneyTransferWindow.OnCommentaryTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x182ed20
	void OnAmountTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDMoneyTransferWindow.OnAmountTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x182f160
	void OnAmountTextBoxChanged(struct FText& InText); // Function WTL.WTLHUDMoneyTransferWindow.OnAmountTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x182f030
	void CheckCharacterActorOnTimer(); // Function WTL.WTLHUDMoneyTransferWindow.CheckCharacterActorOnTimer // (Final|Native|Private) // @ game+0x182f4e0
};

// Class WTL.WTLHUDMonsterAbilities
// Size: 0x268 (Inherited: 0x268)
struct UWTLHUDMonsterAbilities : UWTLHUDWidgetBase {
};

// Class WTL.WTLHUDMonsterState
// Size: 0x268 (Inherited: 0x268)
struct UWTLHUDMonsterState : UWTLHUDWidgetBase {
};

// Class WTL.WTLHUDReplicaButton
// Size: 0x3b8 (Inherited: 0x340)
struct UWTLHUDReplicaButton : UWTLCommonButton {
	struct UTextBlock* tbReplicaNumber; // 0x340(0x08)
	struct UTextBlock* tbReplicaText; // 0x348(0x08)
	char pad_350[0x18]; // 0x350(0x18)
	struct FSlateColor HoveredReplicaTextColor; // 0x368(0x28)
	int32_t ReplicaNumber; // 0x390(0x04)
	char pad_394[0x4]; // 0x394(0x04)
	struct FText ReplicaText; // 0x398(0x18)
	int32_t ReplicaID; // 0x3b0(0x04)
	bool UseReplicaNumberAsReplicaID; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)
};

// Class WTL.WTLHUDNPCDialogButton
// Size: 0x3f0 (Inherited: 0x3b8)
struct UWTLHUDNPCDialogButton : UWTLHUDReplicaButton {
	char pad_3B8[0x38]; // 0x3b8(0x38)
};

// Class WTL.WTLHUDNPCDialogReplicaBase
// Size: 0x268 (Inherited: 0x260)
struct UWTLHUDNPCDialogReplicaBase : UUserWidget {
	struct UBorder* bBackground; // 0x260(0x08)
};

// Class WTL.WTLHUDNPCDialogQuestReward
// Size: 0x308 (Inherited: 0x268)
struct UWTLHUDNPCDialogQuestReward : UWTLHUDNPCDialogReplicaBase {
	struct UHorizontalBox* hbRewardExperience; // 0x268(0x08)
	struct UTextBlock* tbRewardExperience; // 0x270(0x08)
	struct UHorizontalBox* hbRewardMoney; // 0x278(0x08)
	struct UTextBlock* tbRewardMoney; // 0x280(0x08)
	struct UHorizontalBox* hbRewardPvPScore; // 0x288(0x08)
	struct UTextBlock* tbRewardPvPScore; // 0x290(0x08)
	struct UHorizontalBox* hbRewardPvEScore; // 0x298(0x08)
	struct UTextBlock* tbRewardPvEScore; // 0x2a0(0x08)
	struct UHorizontalBox* hbRewardCraftScore; // 0x2a8(0x08)
	struct UTextBlock* tbRewardCraftScore; // 0x2b0(0x08)
	struct UHorizontalBox* hbRewardTechnologyScore; // 0x2b8(0x08)
	struct UTextBlock* tbRewardTechnologyScore; // 0x2c0(0x08)
	struct UTextBlock* tbCustomTextReward; // 0x2c8(0x08)
	struct UTextBlock* tbRewardItemsTitle; // 0x2d0(0x08)
	struct UWrapBox* wpRewardItems; // 0x2d8(0x08)
	struct TSoftClassPtr<UObject> QuestItemSlotWidgetClass; // 0x2e0(0x28)
};

// Class WTL.WTLHUDNPCDialogReplica
// Size: 0x298 (Inherited: 0x268)
struct UWTLHUDNPCDialogReplica : UWTLHUDNPCDialogReplicaBase {
	struct UTextBlock* tbReplicaOwner; // 0x268(0x08)
	struct UTextBlock* tbReplicaText; // 0x270(0x08)
	struct FLinearColor NPCBackgroundColor; // 0x278(0x10)
	struct FLinearColor CharacterBackgroundColor; // 0x288(0x10)
};

// Class WTL.WTLHUDNPCDialogWindow
// Size: 0x328 (Inherited: 0x288)
struct UWTLHUDNPCDialogWindow : UWTLHUDWindowBase {
	struct UScrollBox* sbDialog; // 0x288(0x08)
	struct UPanelWidget* pwDialogButtons; // 0x290(0x08)
	char pad_298[0x10]; // 0x298(0x10)
	struct TSoftClassPtr<UObject> NPCDialogReplicaClass; // 0x2a8(0x28)
	struct TSoftClassPtr<UObject> NPCDialogQuestRewardClass; // 0x2d0(0x28)
	struct TSoftClassPtr<UObject> NPCDialogButtonClass; // 0x2f8(0x28)
	float ReplicaTopPadding; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)

	void OnReplicaSelected(struct FWTLReplica& SelectedReplica); // Function WTL.WTLHUDNPCDialogWindow.OnReplicaSelected // (Final|Native|Private|HasOutParms) // @ game+0x182fbc0
	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDNPCDialogWindow.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x182fd00
};

// Class WTL.WTLHUDObjectCraft
// Size: 0x290 (Inherited: 0x280)
struct UWTLHUDObjectCraft : UWTLHUDCraft {
	struct UWTLHUDContentInventoryStorage* ucContentInventoryStorage; // 0x280(0x08)
	struct UWTLHUDObjectCraftProcess* ucObjectCraftProcess; // 0x288(0x08)
};

// Class WTL.WTLHUDObjectCraftProcess
// Size: 0x2c8 (Inherited: 0x268)
struct UWTLHUDObjectCraftProcess : UWTLHUDWidgetBase {
	struct UWrapBox* wbProcessItemsQueue; // 0x268(0x08)
	struct UWidgetSwitcher* wsProcessInfo; // 0x270(0x08)
	struct UProgressBar* pbCurrentProductionTimeLeft; // 0x278(0x08)
	struct UHorizontalBox* hbCurrentProductionTimeLeft; // 0x280(0x08)
	struct UTextBlock* tbCurrentProductionTimeLeft; // 0x288(0x08)
	struct UTextBlock* tbTotalProductionTimeLeft; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct TSoftClassPtr<UObject> ItemTypeSlotWidgetClass; // 0x2a0(0x28)
};

// Class WTL.WTLHUDObjectInfo
// Size: 0x330 (Inherited: 0x268)
struct UWTLHUDObjectInfo : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpUseSliders; // 0x268(0x08)
	struct UBorder* bObjectInfo; // 0x270(0x08)
	struct UTextBlock* tbObjectName; // 0x278(0x08)
	struct UHorizontalBox* hbObjectID; // 0x280(0x08)
	struct UTextBlock* tbObjectID; // 0x288(0x08)
	struct UHorizontalBox* hbHotkeyDescription; // 0x290(0x08)
	struct UTextBlock* tbPressType; // 0x298(0x08)
	struct UTextBlock* tbUseKey; // 0x2a0(0x08)
	struct UTextBlock* tbActionType; // 0x2a8(0x08)
	struct UBorder* bPremiumRequired; // 0x2b0(0x08)
	char pad_2B8[0x20]; // 0x2b8(0x20)
	struct UWidgetAnimation* AnimationCircleIncrease; // 0x2d8(0x08)
	struct FSlateColor DefaultObjectNameTextColor; // 0x2e0(0x28)
	struct FSlateColor PremiumStashObjectNameTextColor; // 0x308(0x28)
};

// Class WTL.WTLHUDObstacleCourseHelpWindow
// Size: 0x2a8 (Inherited: 0x288)
struct UWTLHUDObstacleCourseHelpWindow : UWTLHUDWindowBase {
	struct UVerticalBox* vbReplicaButtons; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x290(0x08)
	struct AWTLObstacleCourseHelpButton* m_ObstacleCourseHelpButtonActor; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)

	void OnActionConfirmed(); // Function WTL.WTLHUDObstacleCourseHelpWindow.OnActionConfirmed // (Final|Native|Private) // @ game+0x18300e0
};

// Class WTL.WTLHUDPlayerInventory
// Size: 0x2b8 (Inherited: 0x278)
struct UWTLHUDPlayerInventory : UWTLHUDInteractiveWidget {
	struct UWTLHUDCharacterEquipment* ucCharacterEquipment; // 0x278(0x08)
	char pad_280[0x38]; // 0x280(0x38)
};

// Class WTL.WTLHUDPlayerInventoryStorage
// Size: 0x4c8 (Inherited: 0x300)
struct UWTLHUDPlayerInventoryStorage : UWTLHUDInteractiveSlotsStorage {
	struct UWidgetSwitcher* wsPremiumStar; // 0x300(0x08)
	struct UWTLCommonButton* ucBtnAccountInventory; // 0x308(0x08)
	struct UTextBlock* tbAccountInventoryItemsCount; // 0x310(0x08)
	struct UProgressBar* pbWeight; // 0x318(0x08)
	struct UTextBlock* tbWeight; // 0x320(0x08)
	struct UTextBlock* tbMaxWeight; // 0x328(0x08)
	struct UTextBlock* tbBalance; // 0x330(0x08)
	struct UWidgetSwitcher* wsStash; // 0x338(0x08)
	struct UMenuAnchor* maPlaceStashPopup; // 0x340(0x08)
	struct UWTLCommonButton* ucBtnPlaceStash; // 0x348(0x08)
	struct UWTLCommonButton* ucBtnRemoveStash; // 0x350(0x08)
	struct UWTLCommonButton* ucBtnCraft; // 0x358(0x08)
	struct UWTLCommonButton* ucBtnUniteAllItems; // 0x360(0x08)
	struct UWTLCommonButton* ucBtnOptimizeItems; // 0x368(0x08)
	struct UScrollBox* sbStorage; // 0x370(0x08)
	struct UWTLHUDAccountInventoryDropArea* ucAccountInventoryDropArea; // 0x378(0x08)
	struct UBorder* bAccountInventoryDropArea; // 0x380(0x08)
	struct UCanvasPanel* cpReload; // 0x388(0x08)
	struct UWTLCommonPopupMenu* m_PlaceStashPopupMenuWidget; // 0x390(0x08)
	struct UWTLHUDBaseActionStorage* m_BaseActionStorage; // 0x398(0x08)
	char pad_3A0[0x38]; // 0x3a0(0x38)
	struct TSoftClassPtr<UObject> ToolTipWidgetClass; // 0x3d8(0x28)
	struct TSoftClassPtr<UObject> WeightToolTipWidgetClass; // 0x400(0x28)
	struct TSoftClassPtr<UObject> PopupMenuWidgetClass; // 0x428(0x28)
	struct FSlateColor PlacePremiumStashPopupMenuButtonTextColor; // 0x450(0x28)
	struct FSlateColor MaxWeightDefaultColor; // 0x478(0x28)
	struct FSlateColor MaxWeightReducedColor; // 0x4a0(0x28)

	void UpdateMaxInventoryWeight(uint32_t MaxInventoryWeight); // Function WTL.WTLHUDPlayerInventoryStorage.UpdateMaxInventoryWeight // (Final|Native|Private) // @ game+0x18308b0
	void UpdateInventoryWeight(float InventoryLoad, uint32_t InventoryWeight); // Function WTL.WTLHUDPlayerInventoryStorage.UpdateInventoryWeight // (Final|Native|Private) // @ game+0x1830980
	void UniteAllItemsBtnClick(); // Function WTL.WTLHUDPlayerInventoryStorage.UniteAllItemsBtnClick // (Final|Native|Private) // @ game+0x1830610
	void OptimizeItemsBtnClick(); // Function WTL.WTLHUDPlayerInventoryStorage.OptimizeItemsBtnClick // (Final|Native|Private) // @ game+0x1830630
	void OnRemoveStashConfirmed(); // Function WTL.WTLHUDPlayerInventoryStorage.OnRemoveStashConfirmed // (Final|Native|Private) // @ game+0x1830670
	void OnRemoveStashBtnClick(); // Function WTL.WTLHUDPlayerInventoryStorage.OnRemoveStashBtnClick // (Final|Native|Private) // @ game+0x18306e0
	void OnPlaceUsualStash(); // Function WTL.WTLHUDPlayerInventoryStorage.OnPlaceUsualStash // (Final|Native|Private) // @ game+0x1830720
	void OnPlaceStashPopupMenuOpenChanged(bool bIsOpen); // Function WTL.WTLHUDPlayerInventoryStorage.OnPlaceStashPopupMenuOpenChanged // (Final|Native|Private) // @ game+0x1830760
	struct UWidget* OnPlaceStashPopupGetMenuContentEvent(); // Function WTL.WTLHUDPlayerInventoryStorage.OnPlaceStashPopupGetMenuContentEvent // (Final|Native|Private) // @ game+0x1830870
	void OnPlaceStashBtnClick(); // Function WTL.WTLHUDPlayerInventoryStorage.OnPlaceStashBtnClick // (Final|Native|Private) // @ game+0x1830740
	void OnPlacePremiumStash(); // Function WTL.WTLHUDPlayerInventoryStorage.OnPlacePremiumStash // (Final|Native|Private) // @ game+0x1830700
	void OnCraftBtnClick(); // Function WTL.WTLHUDPlayerInventoryStorage.OnCraftBtnClick // (Final|Native|Private) // @ game+0x1830650
	void OnAccountInventoryItemsUpdated(struct TArray<struct FWTLAccountInventoryItem>& AccountInventoryItems); // Function WTL.WTLHUDPlayerInventoryStorage.OnAccountInventoryItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1830ae0
	void OnAccountInventoryBtnClick(); // Function WTL.WTLHUDPlayerInventoryStorage.OnAccountInventoryBtnClick // (Final|Native|Private) // @ game+0x1830890
};

// Class WTL.WTLHUDPlayerInventoryStorageWeightToolTip
// Size: 0x298 (Inherited: 0x268)
struct UWTLHUDPlayerInventoryStorageWeightToolTip : UWTLCommonToolTipText {
	struct UVerticalBox* vbPhysicalExhaustion; // 0x268(0x08)
	struct FSlateColor RedColor; // 0x270(0x28)
};

// Class WTL.WTLHUDPlayersTableItem
// Size: 0x408 (Inherited: 0x260)
struct UWTLHUDPlayersTableItem : UUserWidget {
	struct UTextBlock* tbNumber; // 0x260(0x08)
	struct UTextBlock* tbPlayerName; // 0x268(0x08)
	struct UTextBlock* tbPlayerLevel; // 0x270(0x08)
	struct UWidgetSwitcher* wsPlayerType; // 0x278(0x08)
	struct UImage* imgCharacterClass; // 0x280(0x08)
	struct UTextBlock* tbCharacterClass; // 0x288(0x08)
	struct UWidgetSwitcher* wsFractionImage; // 0x290(0x08)
	struct UTextBlock* tbPlayerReputation; // 0x298(0x08)
	struct UTextBlock* tbPlayerPing; // 0x2a0(0x08)
	struct UWTLCommonButton* ucBtnCharacterInfo; // 0x2a8(0x08)
	struct UWTLCommonButton* ucBtnSendMessage; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnSendInviteToGroup; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnSpectate; // 0x2c0(0x08)
	char pad_2C8[0x78]; // 0x2c8(0x78)
	struct TSoftObjectPtr<UTexture2D> NonePlayerClassIcon; // 0x340(0x28)
	struct TSoftObjectPtr<UTexture2D> MinerPlayerClassIcon; // 0x368(0x28)
	struct TSoftObjectPtr<UTexture2D> HunterPlayerClassIcon; // 0x390(0x28)
	struct TSoftObjectPtr<UTexture2D> MercenaryPlayerClassIcon; // 0x3b8(0x28)
	struct TSoftObjectPtr<UTexture2D> EngineerPlayerClassIcon; // 0x3e0(0x28)

	void OnSpectateBtnClicked(); // Function WTL.WTLHUDPlayersTableItem.OnSpectateBtnClicked // (Final|Native|Private) // @ game+0x1831510
	void OnSendMessageBtnClicked(); // Function WTL.WTLHUDPlayersTableItem.OnSendMessageBtnClicked // (Final|Native|Private) // @ game+0x1831540
	void OnSendInviteToGroupBtnClicked(); // Function WTL.WTLHUDPlayersTableItem.OnSendInviteToGroupBtnClicked // (Final|Native|Private) // @ game+0x18314d0
	void OnCharacterInfoBtnClicked(); // Function WTL.WTLHUDPlayersTableItem.OnCharacterInfoBtnClicked // (Final|Native|Private) // @ game+0x1831570
};

// Class WTL.WTLHUDPlayersTableWindow
// Size: 0x2f8 (Inherited: 0x288)
struct UWTLHUDPlayersTableWindow : UWTLHUDWindowBase {
	struct UBorder* bMain; // 0x288(0x08)
	struct UScrollBox* sbPlayersItems; // 0x290(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x298(0x08)
	struct TArray<struct UWTLHUDPlayersTableItem*> m_PlayersTableItems; // 0x2a0(0x10)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	int32_t MaxVisibileItemsCountInTable; // 0x2b8(0x04)
	float OriginalMainBorderSizeX; // 0x2bc(0x04)
	float ExtendedMainBorderSizeX; // 0x2c0(0x04)
	float OriginalPlayersItemsScrollBoxSizeX; // 0x2c4(0x04)
	float ExtendedPlayersItemsScrollBoxSizeX; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct TSoftClassPtr<UObject> PlayersTableItemWidgetClass; // 0x2d0(0x28)

	void OnSpectateButtonClicked(struct FString CharacterName); // Function WTL.WTLHUDPlayersTableWindow.OnSpectateButtonClicked // (Final|Native|Private) // @ game+0x18318d0
	void OnSendMessageButtonClicked(struct FString CharacterName); // Function WTL.WTLHUDPlayersTableWindow.OnSendMessageButtonClicked // (Final|Native|Private) // @ game+0x1831a60
	void OnSendInviteToGroupButtonClicked(uint64_t CharacterID, struct FString CharacterName); // Function WTL.WTLHUDPlayersTableWindow.OnSendInviteToGroupButtonClicked // (Final|Native|Private) // @ game+0x1831740
	void OnPlayersItemsScrollBoxUserScrolled(float CurrentOffset); // Function WTL.WTLHUDPlayersTableWindow.OnPlayersItemsScrollBoxUserScrolled // (Final|Native|Private) // @ game+0x181f940
	void OnCharacterInfoButtonClicked(uint64_t CharacterID); // Function WTL.WTLHUDPlayersTableWindow.OnCharacterInfoButtonClicked // (Final|Native|Private) // @ game+0x1831b50
};

// Class WTL.WTLHUDPlayerStatus
// Size: 0x398 (Inherited: 0x268)
struct UWTLHUDPlayerStatus : UWTLHUDWidgetBase {
	struct UWTLCommonAlphaSectionProgressBar* pbHealth; // 0x268(0x08)
	struct UWTLCommonAlphaSectionProgressBar* pbStamina; // 0x270(0x08)
	struct UBorder* bHunger; // 0x278(0x08)
	struct UWTLCommonAlphaSectionProgressBar* pbHunger; // 0x280(0x08)
	struct UTextBlock* tbHunger; // 0x288(0x08)
	struct UBorder* bThirst; // 0x290(0x08)
	struct UWTLCommonAlphaSectionProgressBar* pbThirst; // 0x298(0x08)
	struct UTextBlock* tbThirst; // 0x2a0(0x08)
	struct UWTLCommonAlphaSectionProgressBar* pbOxygen; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsPlayerInVehicle; // 0x2b0(0x08)
	struct UWidgetSwitcher* wsPlayerPose; // 0x2b8(0x08)
	struct UTextBlock* tbLevel; // 0x2c0(0x08)
	struct UTextBlock* tbPvPMode; // 0x2c8(0x08)
	struct UImage* imgHoldBreath; // 0x2d0(0x08)
	struct UImage* imgArmorCondition; // 0x2d8(0x08)
	struct UImage* imgProhibitedPvP; // 0x2e0(0x08)
	struct UCanvasPanel* cpChatMute; // 0x2e8(0x08)
	struct UCanvasPanel* cpVoice; // 0x2f0(0x08)
	struct UImage* imgVoice; // 0x2f8(0x08)
	struct UImage* imgVoiceMute; // 0x300(0x08)
	struct UWidgetSwitcher* wsTurretZoneMark; // 0x308(0x08)
	struct AWTLPlayerController* m_PlayerController; // 0x310(0x08)
	struct AWTLPlayerState* m_PlayerState; // 0x318(0x08)
	char pad_320[0x2c]; // 0x320(0x2c)
	struct FLinearColor DefaultStaminaProgressBarColor; // 0x34c(0x10)
	struct FLinearColor LowStaminaProgressBarColor; // 0x35c(0x10)
	struct FLinearColor ArmorMediumCondition; // 0x36c(0x10)
	struct FLinearColor ArmorLowCondition; // 0x37c(0x10)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct UWidgetAnimation* StaminaProgressBarFlickerAnimation; // 0x390(0x08)
};

// Class WTL.WTLHUDPossibleModificationIcon
// Size: 0x290 (Inherited: 0x260)
struct UWTLHUDPossibleModificationIcon : UUserWidget {
	struct UWTLHUDPossibleModificationInfo* m_PossibleModicationInfoWidget; // 0x260(0x08)
	struct TSoftClassPtr<UObject> PossibleModificationInfoWidgetClass; // 0x268(0x28)
};

// Class WTL.WTLHUDPossibleModificationInfo
// Size: 0x328 (Inherited: 0x260)
struct UWTLHUDPossibleModificationInfo : UUserWidget {
	struct UHorizontalBox* hbMinDamageChange; // 0x260(0x08)
	struct UWTLCommonToggleSwitcher* tsMinDamageSign; // 0x268(0x08)
	struct UTextBlock* tbMinDamageChange; // 0x270(0x08)
	struct UWTLCommonToggleSwitcher* tsMinDamageArrow; // 0x278(0x08)
	struct UHorizontalBox* hbMaxDamageChange; // 0x280(0x08)
	struct UWTLCommonToggleSwitcher* tsMaxDamageSign; // 0x288(0x08)
	struct UTextBlock* tbMaxDamageChange; // 0x290(0x08)
	struct UWTLCommonToggleSwitcher* tsMaxDamageArrow; // 0x298(0x08)
	struct UHorizontalBox* hbWearResistanceChange; // 0x2a0(0x08)
	struct UWTLCommonToggleSwitcher* tsWearResistanceSign; // 0x2a8(0x08)
	struct UTextBlock* tbWearResistanceChange; // 0x2b0(0x08)
	struct UTextBlock* tbWearResistanceBase; // 0x2b8(0x08)
	struct UWTLCommonToggleSwitcher* tsWearResistanceArrow; // 0x2c0(0x08)
	struct UHorizontalBox* hbAccuracyChange; // 0x2c8(0x08)
	struct UWTLCommonToggleSwitcher* tsAccuracySign; // 0x2d0(0x08)
	struct UTextBlock* tbAccuracyChange; // 0x2d8(0x08)
	struct UWTLCommonToggleSwitcher* tsAccuracyArrow; // 0x2e0(0x08)
	struct UHorizontalBox* hbMinArmorChange; // 0x2e8(0x08)
	struct UWTLCommonToggleSwitcher* tsMinArmorSign; // 0x2f0(0x08)
	struct UTextBlock* tbMinArmorChange; // 0x2f8(0x08)
	struct UWTLCommonToggleSwitcher* tsMinArmorArrow; // 0x300(0x08)
	struct UHorizontalBox* hbMaxArmorChange; // 0x308(0x08)
	struct UWTLCommonToggleSwitcher* tsMaxArmorSign; // 0x310(0x08)
	struct UTextBlock* tbMaxArmorChange; // 0x318(0x08)
	struct UWTLCommonToggleSwitcher* tsMaxArmorArrow; // 0x320(0x08)
};

// Class WTL.WTLHUDQTEFishing
// Size: 0x3a0 (Inherited: 0x260)
struct UWTLHUDQTEFishing : UUserWidget {
	struct UCanvasPanel* cpMain; // 0x260(0x08)
	struct UBorder* bDifficulty; // 0x268(0x08)
	struct UImage* imgTimeLimit; // 0x270(0x08)
	struct UImage* imgQTEProgress; // 0x278(0x08)
	struct UCanvasPanel* cpButton; // 0x280(0x08)
	struct UTextBlock* tbButtonName; // 0x288(0x08)
	char pad_290[0x28]; // 0x290(0x28)
	struct UWTLHUDQTEFishingHookButton* m_CurrentHookButton; // 0x2b8(0x08)
	struct TSoftClassPtr<UObject> HookButtonWidgetClass; // 0x2c0(0x28)
	struct UWidgetAnimation* HighlightBlinkAnimation; // 0x2e8(0x08)
	struct UWidgetAnimation* PressedAnimation; // 0x2f0(0x08)
	struct TSoftObjectPtr<UFMODEvent> ButtonPressedSoundEvent; // 0x2f8(0x28)
	struct FLinearColor TimeLimitGreenColor; // 0x320(0x10)
	struct FLinearColor TimeLimitYellowColor; // 0x330(0x10)
	struct FLinearColor TimeLimitRedColor; // 0x340(0x10)
	struct FLinearColor VeryEasyDifficultyColor; // 0x350(0x10)
	struct FLinearColor EasyDifficultyColor; // 0x360(0x10)
	struct FLinearColor MediumDifficultyColor; // 0x370(0x10)
	struct FLinearColor HighDifficultyColor; // 0x380(0x10)
	struct FLinearColor VeryHighDifficultyColor; // 0x390(0x10)

	void OnHookButtonMustRemoved(); // Function WTL.WTLHUDQTEFishing.OnHookButtonMustRemoved // (Final|Native|Private) // @ game+0x18328c0
};

// Class WTL.WTLHUDQTEFishingHookButton
// Size: 0x2d0 (Inherited: 0x260)
struct UWTLHUDQTEFishingHookButton : UUserWidget {
	struct UWidgetSwitcher* wsButtonKey; // 0x260(0x08)
	struct UProgressBar* pbHookTimeLimit; // 0x268(0x08)
	char pad_270[0x38]; // 0x270(0x38)
	struct UWidgetAnimation* HighlightBlinkSlowAnimation; // 0x2a8(0x08)
	struct UWidgetAnimation* PulseAnimation; // 0x2b0(0x08)
	struct UWidgetAnimation* RightPressedAnimation; // 0x2b8(0x08)
	struct UWidgetAnimation* WrongPressedAnimation; // 0x2c0(0x08)
	struct UWidgetAnimation* NotPressedAnimation; // 0x2c8(0x08)

	void OnMustRemovedBroadcast(); // Function WTL.WTLHUDQTEFishingHookButton.OnMustRemovedBroadcast // (Final|Native|Private) // @ game+0x1832a70
};

// Class WTL.WTLHUDQuestDependenciesTreePart
// Size: 0x278 (Inherited: 0x260)
struct UWTLHUDQuestDependenciesTreePart : UUserWidget {
	struct UBorder* bTreeLine; // 0x260(0x08)
	struct UVerticalBox* vbTreePart; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
};

// Class WTL.WTLHUDQuestDependenciesWindow
// Size: 0x310 (Inherited: 0x288)
struct UWTLHUDQuestDependenciesWindow : UWTLCommonWindowBase {
	struct UCanvasPanel* cpTree; // 0x288(0x08)
	struct UScrollBox* sbTree; // 0x290(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x298(0x08)
	char pad_2A0[0x20]; // 0x2a0(0x20)
	struct TSoftClassPtr<UObject> QuestDependencyWidgetClass; // 0x2c0(0x28)
	struct TSoftClassPtr<UObject> QuestDependenciesTreePartWidgetClass; // 0x2e8(0x28)
};

// Class WTL.WTLHUDQuestDependency
// Size: 0x2d8 (Inherited: 0x260)
struct UWTLHUDQuestDependency : UUserWidget {
	struct UCanvasPanel* cpArrow; // 0x260(0x08)
	struct UTextBlock* tbQuestID; // 0x268(0x08)
	struct UTextBlock* tbQuestName; // 0x270(0x08)
	struct UBorder* bQuestState; // 0x278(0x08)
	struct UTextBlock* tbQuestState; // 0x280(0x08)
	struct TMap<enum class EWTLQuestState, struct FLinearColor> QuestStateColors; // 0x288(0x50)
};

// Class WTL.WTLHUDQuestInformationWindow
// Size: 0x298 (Inherited: 0x288)
struct UWTLHUDQuestInformationWindow : UWTLCommonWindowBase {
	struct UWTLCommonQuestInfo* ucQuestInfo; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x290(0x08)
};

// Class WTL.WTLHUDQuestSlot
// Size: 0x3c0 (Inherited: 0x3b8)
struct UWTLHUDQuestSlot : UWTLHUDNeedCountSlot {
	char pad_3B8[0x8]; // 0x3b8(0x08)
};

// Class WTL.WTLHUDRadialMenu
// Size: 0x330 (Inherited: 0x278)
struct UWTLHUDRadialMenu : UWTLHUDInteractiveWidget {
	struct UCanvasPanel* cpPIEMenu; // 0x278(0x08)
	struct UWidgetSwitcher* wsActionType; // 0x280(0x08)
	struct UBorder* bQuickSelectHint; // 0x288(0x08)
	struct UWidgetSwitcher* wsQuickSelectHintText; // 0x290(0x08)
	char pad_298[0x60]; // 0x298(0x60)
	struct TArray<struct FWTLUseMenuActionInfo> UseTypes; // 0x2f8(0x10)
	struct TSoftObjectPtr<UTexture2D> LockButtonTexture; // 0x308(0x28)

	int32_t GetHoveredButton(); // Function WTL.WTLHUDRadialMenu.GetHoveredButton // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void CreateRadialMenuWidget(); // Function WTL.WTLHUDRadialMenu.CreateRadialMenuWidget // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void AddRadialMenuWidgetAsChild(); // Function WTL.WTLHUDRadialMenu.AddRadialMenuWidgetAsChild // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void AddRadialButton(struct UTexture2D* Icon, struct FText& Description, struct FString DebugPreviewText); // Function WTL.WTLHUDRadialMenu.AddRadialButton // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLHUDRepair
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDRepair : UWTLHUDInteractiveWidget {
	struct UWTLHUDRepairWindow* ucRepairWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDRepairStorage
// Size: 0x300 (Inherited: 0x2d8)
struct UWTLHUDRepairStorage : UWTLHUDPriceStorage {
	struct TSoftObjectPtr<UFMODEvent> RepairItemsSoundEvent; // 0x2d8(0x28)
};

// Class WTL.WTLHUDRepairWindow
// Size: 0x298 (Inherited: 0x288)
struct UWTLHUDRepairWindow : UWTLHUDWindowBase {
	struct UWTLHUDRepairStorage* ucRepairStorage; // 0x288(0x08)
	char pad_290[0x8]; // 0x290(0x08)

	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDRepairWindow.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x1833260
};

// Class WTL.WTLHUDRequestWindow
// Size: 0x2b8 (Inherited: 0x268)
struct UWTLHUDRequestWindow : UWTLHUDWidgetBase {
	struct UTextBlock* tbRequestTypeTitle; // 0x268(0x08)
	struct UTextBlock* tbRequestInstigatorName; // 0x270(0x08)
	struct UButton* btnAcceptRequest; // 0x278(0x08)
	struct UButton* btnDeclineRequest; // 0x280(0x08)
	char pad_288[0x30]; // 0x288(0x30)

	void OnDeclineRequestBtnClicked(); // Function WTL.WTLHUDRequestWindow.OnDeclineRequestBtnClicked // (Final|Native|Private) // @ game+0x18334b0
	void OnAcceptRequestBtnClicked(); // Function WTL.WTLHUDRequestWindow.OnAcceptRequestBtnClicked // (Final|Native|Private) // @ game+0x18334d0
};

// Class WTL.WTLHUDRobotsCraft
// Size: 0x288 (Inherited: 0x278)
struct UWTLHUDRobotsCraft : UWTLHUDInteractiveWidget {
	struct UWTLHUDRobotsCraftWindow* ucRobotsCraftWindow; // 0x278(0x08)
	struct UWTLHUDContentInventoryStorage* ucContentInventoryStorage; // 0x280(0x08)
};

// Class WTL.WTLHUDRobotsCraftWindow
// Size: 0x370 (Inherited: 0x288)
struct UWTLHUDRobotsCraftWindow : UWTLHUDWindowBase {
	struct UTextBlock* tbRobotCraftStationDisplayText; // 0x288(0x08)
	struct UTextBlock* tbRobotName; // 0x290(0x08)
	struct UImage* imgRobot; // 0x298(0x08)
	struct UTextBlock* tbRobotMinLevel; // 0x2a0(0x08)
	struct UTextBlock* tbRobotMaxLevel; // 0x2a8(0x08)
	struct UTextBlock* tbRobotRank; // 0x2b0(0x08)
	struct UCanvasPanel* cpRobotDescription; // 0x2b8(0x08)
	struct UTextBlock* tbRobotDescription; // 0x2c0(0x08)
	struct UWrapBox* wbRequiredItems; // 0x2c8(0x08)
	struct UWidgetSwitcher* wsProduction; // 0x2d0(0x08)
	struct UWidgetSwitcher* wsCreationLimit; // 0x2d8(0x08)
	struct UTextBlock* tbCurrentCreationLimit; // 0x2e0(0x08)
	struct UTextBlock* tbMaxCreationLimit; // 0x2e8(0x08)
	struct UHorizontalBox* hbCreationLimitReached; // 0x2f0(0x08)
	struct UVerticalBox* vbProductionTimeLeft; // 0x2f8(0x08)
	struct UTextBlock* tbProductionTimeLeft; // 0x300(0x08)
	struct UProgressBar* pbProductionTimeLeft; // 0x308(0x08)
	struct UWidgetSwitcher* wsProductionStatus; // 0x310(0x08)
	struct AWTLRobotCraftStation* m_RobotCraftStation; // 0x318(0x08)
	char pad_320[0x20]; // 0x320(0x20)
	struct TSoftClassPtr<UObject> RequiredItemSlotWidgetClass; // 0x340(0x28)
	struct UWidgetAnimation* NotWorkingTextBlinkingAnimation; // 0x368(0x08)

	void OnStorageContentChanged(); // Function WTL.WTLHUDRobotsCraftWindow.OnStorageContentChanged // (Final|Native|Private) // @ game+0x1833960
	void OnMaxRobotCountChanged(int32_t MaxRobotCount); // Function WTL.WTLHUDRobotsCraftWindow.OnMaxRobotCountChanged // (Final|Native|Private) // @ game+0x18336b0
	void OnCurrentRobotCountChanged(int32_t CurrentRobotCount); // Function WTL.WTLHUDRobotsCraftWindow.OnCurrentRobotCountChanged // (Final|Native|Private) // @ game+0x18337d0
};

// Class WTL.WTLHUDSellStorage
// Size: 0x478 (Inherited: 0x3f0)
struct UWTLHUDSellStorage : UWTLHUDSellStorageBase {
	struct UEditableTextBox* etbSearch; // 0x3f0(0x08)
	char pad_3F8[0x78]; // 0x3f8(0x78)
	float DefaultHeight; // 0x470(0x04)
	float ExternalHeight; // 0x474(0x04)

	void OnSearchTextBoxTextChanged(struct FText& Text); // Function WTL.WTLHUDSellStorage.OnSearchTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1833bd0
};

// Class WTL.WTLHUDSellStorageItem
// Size: 0x5f8 (Inherited: 0x268)
struct UWTLHUDSellStorageItem : UWTLHUDWidgetBase {
	struct UImage* imgBackground; // 0x268(0x08)
	struct UImage* imgItem; // 0x270(0x08)
	struct UImage* imgBorder; // 0x278(0x08)
	struct UImage* imgItemType; // 0x280(0x08)
	struct UTextBlock* tbItemTypeID; // 0x288(0x08)
	struct UImage* imgProhibited; // 0x290(0x08)
	struct UTextBlock* tbItemCount; // 0x298(0x08)
	struct UBorder* bWeaponAttachments; // 0x2a0(0x08)
	struct UBorder* bMuzzleAttachment; // 0x2a8(0x08)
	struct UBorder* bFlashlightAttachment; // 0x2b0(0x08)
	struct UBorder* bScopeAttachment; // 0x2b8(0x08)
	struct UImage* imgContainerItem; // 0x2c0(0x08)
	struct UImage* imgItemCustomized; // 0x2c8(0x08)
	struct UHorizontalBox* hbArmoredPlates; // 0x2d0(0x08)
	struct UTextBlock* tbArmoredPlatesCount; // 0x2d8(0x08)
	struct UBorder* bModificationsCount; // 0x2e0(0x08)
	struct UTextBlock* tbModificationsCount; // 0x2e8(0x08)
	struct UTextBlock* tbRequiredParameters; // 0x2f0(0x08)
	struct UHorizontalBox* hbRequiredLevel; // 0x2f8(0x08)
	struct UBorder* bRequiredLevel; // 0x300(0x08)
	struct UTextBlock* tbRequiredLevel; // 0x308(0x08)
	struct UHorizontalBox* hbMinBuyCount; // 0x310(0x08)
	struct UTextBlock* tbItemName; // 0x318(0x08)
	struct UTextBlock* tbMinBuyCount; // 0x320(0x08)
	struct UTextBlock* tbItemPrice; // 0x328(0x08)
	struct UTextBlock* tbItemSubType; // 0x330(0x08)
	struct UVerticalBox* vbShortInfoItems; // 0x338(0x08)
	struct UHorizontalBox* hbDamage; // 0x340(0x08)
	struct UHorizontalBox* hbAccuracy; // 0x348(0x08)
	struct UHorizontalBox* hbArmor; // 0x350(0x08)
	struct UHorizontalBox* hbFrontArmor; // 0x358(0x08)
	struct UHorizontalBox* hbBackArmor; // 0x360(0x08)
	struct UHorizontalBox* hbArmorClass; // 0x368(0x08)
	struct UHorizontalBox* hbArmorPiercing; // 0x370(0x08)
	struct UTextBlock* tbPDAModuleInstalled; // 0x378(0x08)
	struct UHorizontalBox* hbValidityDate; // 0x380(0x08)
	struct UHorizontalBox* hbContents; // 0x388(0x08)
	struct UHorizontalBox* hbEnergy; // 0x390(0x08)
	struct UHorizontalBox* hbCondition; // 0x398(0x08)
	struct UHorizontalBox* hbCommissionCharacterName; // 0x3a0(0x08)
	struct UTextBlock* tbPvPDamage; // 0x3a8(0x08)
	struct UTextBlock* tbPvEDamage; // 0x3b0(0x08)
	struct UTextBlock* tbAccuracy; // 0x3b8(0x08)
	struct UTextBlock* tbArmor; // 0x3c0(0x08)
	struct UTextBlock* tbMonsterArmor; // 0x3c8(0x08)
	struct UTextBlock* tbFrontArmor; // 0x3d0(0x08)
	struct UTextBlock* tbFrontMonsterArmor; // 0x3d8(0x08)
	struct UTextBlock* tbBackArmor; // 0x3e0(0x08)
	struct UTextBlock* tbBackMonsterArmor; // 0x3e8(0x08)
	struct UTextBlock* tbArmorClass; // 0x3f0(0x08)
	struct UTextBlock* tbPvPArmorPiercing; // 0x3f8(0x08)
	struct UTextBlock* tbPvEArmorPiercing; // 0x400(0x08)
	struct UTextBlock* tbValidityDate; // 0x408(0x08)
	struct UTextBlock* tbContents; // 0x410(0x08)
	struct UTextBlock* tbEnergyCaption; // 0x418(0x08)
	struct UTextBlock* tbEnergy; // 0x420(0x08)
	struct UTextBlock* tbCondition; // 0x428(0x08)
	struct UTextBlock* tbCommissionCharacterName; // 0x430(0x08)
	struct UWTLCommonTextButton* ucBtnBuy; // 0x438(0x08)
	struct UWTLCommonTextButton* ucBtnItemInfo; // 0x440(0x08)
	struct UCanvasPanel* cpBtnPreview; // 0x448(0x08)
	struct UCanvasPanel* cpBtnCharacterPreview; // 0x450(0x08)
	struct UWTLCommonTextButton* ucBtnPreview; // 0x458(0x08)
	struct UWTLCommonButton* ucBtnCharacterPreview; // 0x460(0x08)
	struct FSlateColor NormalRemainingColor; // 0x468(0x28)
	struct FSlateColor LowRemainingColor; // 0x490(0x28)
	struct FSlateColor VeryLowRemainingColor; // 0x4b8(0x28)
	char pad_4E0[0x30]; // 0x4e0(0x30)
	struct FWTLSellItemInfo m_SellItemInfo; // 0x510(0x48)
	char pad_558[0x18]; // 0x558(0x18)
	struct FSlateBrush DefaultArtefactItemInContainerBrush; // 0x570(0x88)

	void OnPreviewBtnClick(); // Function WTL.WTLHUDSellStorageItem.OnPreviewBtnClick // (Final|Native|Private) // @ game+0x1834dc0
	void OnItemInfoBtnClick(); // Function WTL.WTLHUDSellStorageItem.OnItemInfoBtnClick // (Final|Native|Private) // @ game+0x1834e20
	void OnCharacterPreviewBtnClick(); // Function WTL.WTLHUDSellStorageItem.OnCharacterPreviewBtnClick // (Final|Native|Private) // @ game+0x1834da0
	void OnBuyBtnClick(); // Function WTL.WTLHUDSellStorageItem.OnBuyBtnClick // (Final|Native|Private) // @ game+0x1834e40
};

// Class WTL.WTLHUDServerEventInfo
// Size: 0x298 (Inherited: 0x268)
struct UWTLHUDServerEventInfo : UWTLHUDWidgetBase {
	struct UBorder* bServerEventInfo; // 0x268(0x08)
	struct UTextBlock* tbEventName; // 0x270(0x08)
	struct UTextBlock* tbTimeLeft; // 0x278(0x08)
	struct UTextBlock* tbComment; // 0x280(0x08)
	struct TArray<struct FWTLServerEventTypeColor> EventTypesColors; // 0x288(0x10)
};

// Class WTL.WTLHUDSlotMachinePayTableWindow
// Size: 0x298 (Inherited: 0x288)
struct UWTLHUDSlotMachinePayTableWindow : UWTLHUDWindowBase {
	struct UWTLSlotMachinePayTableWidget* ucSlotMachinePayTable; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x290(0x08)
};

// Class WTL.WTLHUDSlotMachineRewardWindow
// Size: 0x3a8 (Inherited: 0x288)
struct UWTLHUDSlotMachineRewardWindow : UWTLHUDWindowBase {
	struct UHorizontalBox* hbItems; // 0x288(0x08)
	struct UHorizontalBox* hbItemsToolTip; // 0x290(0x08)
	struct UTextBlock* tbItemsToolTip; // 0x298(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2a0(0x08)
	struct FWTLStorageContent m_Items; // 0x2a8(0xa8)
	char pad_350[0x8]; // 0x350(0x08)
	struct TSoftClassPtr<UObject> ItemSlotWidgetClass; // 0x358(0x28)
	struct TSoftObjectPtr<UFMODEvent> ShowSoundEvent; // 0x380(0x28)
};

// Class WTL.WTLHUDSpectatorModeExitHint
// Size: 0x270 (Inherited: 0x260)
struct UWTLHUDSpectatorModeExitHint : UUserWidget {
	struct UTextBlock* tbExitSpectatorHotKey; // 0x260(0x08)
	struct UTextBlock* tbActionText; // 0x268(0x08)
};

// Class WTL.WTLHUDSteamInventory
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDSteamInventory : UWTLHUDInteractiveWidget {
	struct UWTLHUDSteamInventoryWindow* ucSteamInventoryWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDSteamInventoryItem
// Size: 0x528 (Inherited: 0x4a0)
struct UWTLHUDSteamInventoryItem : UWTLCommonSelectedItem {
	struct UBorder* bItemBackground; // 0x4a0(0x08)
	struct UBorder* bBorder; // 0x4a8(0x08)
	struct UWidgetSwitcher* wsImage; // 0x4b0(0x08)
	struct UImage* imgItem; // 0x4b8(0x08)
	struct UTextBlock* tbQuantity; // 0x4c0(0x08)
	char pad_4C8[0x60]; // 0x4c8(0x60)
};

// Class WTL.WTLHUDSteamInventoryNewItemsWindow
// Size: 0x2f0 (Inherited: 0x288)
struct UWTLHUDSteamInventoryNewItemsWindow : UWTLHUDWindowBase {
	struct UHorizontalBox* hbItemsCount; // 0x288(0x08)
	struct UTextBlock* tbCurrentItemNumber; // 0x290(0x08)
	struct UTextBlock* tbItemsCount; // 0x298(0x08)
	struct UWidgetSwitcher* wsItemImage; // 0x2a0(0x08)
	struct UImage* imgItem; // 0x2a8(0x08)
	struct UButton* btnPreviousItem; // 0x2b0(0x08)
	struct UButton* btnNextItem; // 0x2b8(0x08)
	struct UTextBlock* tbItemName; // 0x2c0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2c8(0x08)
	char pad_2D0[0x20]; // 0x2d0(0x20)

	void OnPreviousItemButtonClicked(); // Function WTL.WTLHUDSteamInventoryNewItemsWindow.OnPreviousItemButtonClicked // (Final|Native|Private) // @ game+0x18360b0
	void OnNextItemButtonClicked(); // Function WTL.WTLHUDSteamInventoryNewItemsWindow.OnNextItemButtonClicked // (Final|Native|Private) // @ game+0x1836050
};

// Class WTL.WTLHUDSteamInventoryStorage
// Size: 0x2c0 (Inherited: 0x2c0)
struct UWTLHUDSteamInventoryStorage : UWTLHUDBaseActionStorage {
};

// Class WTL.WTLHUDSteamInventoryWindow
// Size: 0x3b8 (Inherited: 0x288)
struct UWTLHUDSteamInventoryWindow : UWTLHUDWindowBase {
	struct UWidgetSwitcher* wsItems; // 0x288(0x08)
	struct UWrapBox* wbItems; // 0x290(0x08)
	struct UBorder* bItemDescription; // 0x298(0x08)
	struct UWidgetSwitcher* wsItemImage; // 0x2a0(0x08)
	struct UImage* imgItem; // 0x2a8(0x08)
	struct UTextBlock* tbItemName; // 0x2b0(0x08)
	struct UScrollBox* sbItemInfo; // 0x2b8(0x08)
	struct URichTextBlock* rtbItemDescription; // 0x2c0(0x08)
	struct UTextBlock* tbContainsCaption; // 0x2c8(0x08)
	struct UHorizontalBox* hbTokensContains; // 0x2d0(0x08)
	struct UTextBlock* tbTokensContains; // 0x2d8(0x08)
	struct UWrapBox* wbItemsContains; // 0x2e0(0x08)
	struct UThrobber* thTakeResponse; // 0x2e8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnTake; // 0x2f0(0x08)
	struct UWTLHUDSteamInventoryStorage* ucSteamInventoryStorage; // 0x2f8(0x08)
	char pad_300[0x40]; // 0x300(0x40)
	struct TSoftClassPtr<UObject> SteamInventoryItemWidgetClass; // 0x340(0x28)
	struct TSoftClassPtr<UObject> EmptyInventoryItemWidgetClass; // 0x368(0x28)
	struct TSoftClassPtr<UObject> ItemDefinitionWidgetClass; // 0x390(0x28)

	void OnUpdateInventory(int32_t UpdateHandle); // Function WTL.WTLHUDSteamInventoryWindow.OnUpdateInventory // (Final|Native|Private) // @ game+0x1836800
	void OnTakeBtnClicked(); // Function WTL.WTLHUDSteamInventoryWindow.OnTakeBtnClicked // (Final|Native|Private) // @ game+0x18368d0
	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDSteamInventoryWindow.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x1823000
	void OnInventoryItemSelected(struct UWTLHUDSteamInventoryItem* ItemWidget, uint64_t ItemId, int32_t itemdefid); // Function WTL.WTLHUDSteamInventoryWindow.OnInventoryItemSelected // (Final|Native|Private) // @ game+0x1836610
	void OnInventoryItemImageUpdated(struct UWTLHUDSteamInventoryItem* ItemWidget); // Function WTL.WTLHUDSteamInventoryWindow.OnInventoryItemImageUpdated // (Final|Native|Private) // @ game+0x18364f0
	void OnConsumeItemTimeout(); // Function WTL.WTLHUDSteamInventoryWindow.OnConsumeItemTimeout // (Final|Native|Private) // @ game+0x18364d0
};

// Class WTL.WTLHUDStuffSlot
// Size: 0xbe8 (Inherited: 0xbb0)
struct UWTLHUDStuffSlot : UWTLHUDItemSlot {
	struct UVerticalBox* vbMain; // 0xbb0(0x08)
	struct UImage* imgEquipmentType; // 0xbb8(0x08)
	struct UImage* imgProhibit; // 0xbc0(0x08)
	struct UTextBlock* tbActionKey; // 0xbc8(0x08)
	char pad_BD0[0x8]; // 0xbd0(0x08)
	struct TArray<struct FWTLEquipmentTypeTexture> EquipmentTypeTextures; // 0xbd8(0x10)
};

// Class WTL.WTLHUDSwitchInfoWidgetsHint
// Size: 0x278 (Inherited: 0x268)
struct UWTLHUDSwitchInfoWidgetsHint : UWTLHUDWidgetBase {
	struct URichTextBlock* rtbSwitchInfoWidgetsHint; // 0x268(0x08)
	struct URichTextBlock* rtbSwitchActiveQuestHint; // 0x270(0x08)
};

// Class WTL.WTLHUDTabButton
// Size: 0x12c8 (Inherited: 0x12c8)
struct UWTLHUDTabButton : UWTLCommonTabButton {
};

// Class WTL.WTLHUDTeleportationDeviceWindow
// Size: 0x300 (Inherited: 0x288)
struct UWTLHUDTeleportationDeviceWindow : UWTLCommonWindowBase {
	struct UTextBlock* tbDeviceEnergyPercent; // 0x288(0x08)
	struct UWidgetSwitcher* wsHint; // 0x290(0x08)
	struct UWidgetSwitcher* wsMain; // 0x298(0x08)
	struct UHorizontalBox* hbPoints; // 0x2a0(0x08)
	char pad_2A8[0x18]; // 0x2a8(0x18)
	struct TArray<struct UWTLHUDTeleportationPoint*> m_TeleporationPoints; // 0x2c0(0x10)
	struct TSoftClassPtr<UObject> TeleportationPointWidgetClass; // 0x2d0(0x28)
	struct UWidgetAnimation* DeviceIsCompletelyDischargedTextBlinkingAnimation; // 0x2f8(0x08)

	void OnTeleportationPointSelected(struct AWTLFortificationCommandCore* FortificationCommandCore); // Function WTL.WTLHUDTeleportationDeviceWindow.OnTeleportationPointSelected // (Final|Native|Private) // @ game+0x1836ca0
};

// Class WTL.WTLHUDTeleportationPoint
// Size: 0x560 (Inherited: 0x4a0)
struct UWTLHUDTeleportationPoint : UWTLCommonSelectedItem {
	struct UTextBlock* tbNumber; // 0x4a0(0x08)
	struct UTextBlock* tbPointCoords; // 0x4a8(0x08)
	struct UWidgetSwitcher* wsControlFaction; // 0x4b0(0x08)
	struct UWidgetSwitcher* wsStatus; // 0x4b8(0x08)
	struct UTextBlock* tbCoreEnergy; // 0x4c0(0x08)
	struct UTextBlock* tbTimeLeft; // 0x4c8(0x08)
	struct UBorder* bForbiddenBackground; // 0x4d0(0x08)
	struct UTextBlock* tbReason; // 0x4d8(0x08)
	struct AWTLFortificationCommandCore* m_FortificationCommandCore; // 0x4e0(0x08)
	char pad_4E8[0x58]; // 0x4e8(0x58)
	struct UWidgetAnimation* CaptureInProgressTextBlinkingAnimation; // 0x540(0x08)
	struct UWidgetAnimation* ShowForbiddenBackgroundAnimation; // 0x548(0x08)
	struct FLinearColor ForbiddenBorderBrushColor; // 0x550(0x10)
};

// Class WTL.WTLHUDTextChatArea
// Size: 0x490 (Inherited: 0x268)
struct UWTLHUDTextChatArea : UWTLHUDWidgetBase {
	struct UMenuAnchor* maPopup; // 0x268(0x08)
	struct UWTLCommonPopupMenu* m_PopupMenuWidget; // 0x270(0x08)
	struct UBorder* bChatList; // 0x278(0x08)
	struct UScrollBox* sbChatList; // 0x280(0x08)
	struct UBorder* bButtonsTab; // 0x288(0x08)
	struct UWTLHUDChatTabButton* btnTabCommon; // 0x290(0x08)
	struct UWTLHUDChatTabButton* btnTabChat; // 0x298(0x08)
	struct UWTLHUDChatTabButton* btnTabLog; // 0x2a0(0x08)
	struct UWTLHUDChatTabButton* btnTabBattle; // 0x2a8(0x08)
	struct UWTLHUDChatTabButton* btnTabEnvironment; // 0x2b0(0x08)
	struct UWTLHUDChatTabButton* btnTabLoot; // 0x2b8(0x08)
	struct UWTLHUDChatTabButton* btnTabGroup; // 0x2c0(0x08)
	struct UWTLHUDChatTabButton* btnTabClan; // 0x2c8(0x08)
	struct UWTLHUDChatTabButton* btnTabFaction; // 0x2d0(0x08)
	struct UWTLHUDChatTabButton* btnCollapseChat; // 0x2d8(0x08)
	struct UBorder* bChatMessage; // 0x2e0(0x08)
	struct UEditableTextBox* etbChatMessage; // 0x2e8(0x08)
	struct UHorizontalBox* hbMessageTextLength; // 0x2f0(0x08)
	struct UTextBlock* tbMessageTextCurrentLength; // 0x2f8(0x08)
	struct UTextBlock* tbMessageTextMaxLength; // 0x300(0x08)
	struct UWTLCommonButton* btnCopyAll; // 0x308(0x08)
	struct UWTLCommonButton* btnShowHideSmiles; // 0x310(0x08)
	struct UBorder* bSmiles; // 0x318(0x08)
	struct UWrapBox* wbSmiles; // 0x320(0x08)
	char pad_328[0xa0]; // 0x328(0xa0)
	struct UWidgetAnimation* CollapseExpandChatAnim; // 0x3c8(0x08)
	struct UWidgetAnimation* ShowHideChatAnim; // 0x3d0(0x08)
	struct UWidgetAnimation* ShowHideSmilesAnim; // 0x3d8(0x08)
	float DelayHide; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct TSoftObjectPtr<UFMODEvent> PrivateMessageSoundEvent; // 0x3e8(0x28)
	struct TSoftClassPtr<UObject> TextChatItemClass; // 0x410(0x28)
	struct TSoftClassPtr<UObject> ChatSmileButtonWidgetClass; // 0x438(0x28)
	struct TSoftClassPtr<UObject> PopupMenuWidgetClass; // 0x460(0x28)
	float SmilesPanelWidth; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)

	void OnUnmuteCharacter(); // Function WTL.WTLHUDTextChatArea.OnUnmuteCharacter // (Final|Native|Protected) // @ game+0x18371e0
	void OnSmileButtonClicked(struct FString TextAliases); // Function WTL.WTLHUDTextChatArea.OnSmileButtonClicked // (Final|Native|Protected) // @ game+0x1837450
	void OnShowHideSmilesButtonClicked(); // Function WTL.WTLHUDTextChatArea.OnShowHideSmilesButtonClicked // (Final|Native|Protected) // @ game+0x1837590
	void OnSendMessage(); // Function WTL.WTLHUDTextChatArea.OnSendMessage // (Final|Native|Protected) // @ game+0x1837430
	void OnReportCharacter(); // Function WTL.WTLHUDTextChatArea.OnReportCharacter // (Final|Native|Protected) // @ game+0x1836f80
	void OnRemoveCharacterFromContactList(); // Function WTL.WTLHUDTextChatArea.OnRemoveCharacterFromContactList // (Final|Native|Protected) // @ game+0x1837000
	void OnMuteCharacter(); // Function WTL.WTLHUDTextChatArea.OnMuteCharacter // (Final|Native|Protected) // @ game+0x1837280
	void OnMenuOpenChanged(bool bIsOpen); // Function WTL.WTLHUDTextChatArea.OnMenuOpenChanged // (Final|Native|Protected) // @ game+0x18379a0
	void OnInviteToGroup(); // Function WTL.WTLHUDTextChatArea.OnInviteToGroup // (Final|Native|Protected) // @ game+0x1837360
	struct UWidget* OnGetPopupMenuContent(); // Function WTL.WTLHUDTextChatArea.OnGetPopupMenuContent // (Final|Native|Protected) // @ game+0x1837a80
	void OnCopyAllButtonClicked(); // Function WTL.WTLHUDTextChatArea.OnCopyAllButtonClicked // (Final|Native|Protected) // @ game+0x18375b0
	void OnChatTabBtnClicked(enum class EWTLFiltersChat FiltersChat); // Function WTL.WTLHUDTextChatArea.OnChatTabBtnClicked // (Final|Native|Protected) // @ game+0x18375d0
	void OnChatMessageTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDTextChatArea.OnChatMessageTextBoxCommitted // (Final|Native|Protected|HasOutParms) // @ game+0x18376a0
	void OnChatMessageTextBoxChanged(struct FText& InText); // Function WTL.WTLHUDTextChatArea.OnChatMessageTextBoxChanged // (Final|Native|Protected|HasOutParms) // @ game+0x1837870
	void OnAddCharacterToContactListAsFriend(); // Function WTL.WTLHUDTextChatArea.OnAddCharacterToContactListAsFriend // (Final|Native|Protected) // @ game+0x1837130
	void OnAddCharacterToContactListAsEnemy(); // Function WTL.WTLHUDTextChatArea.OnAddCharacterToContactListAsEnemy // (Final|Native|Protected) // @ game+0x1837080
	void K2_SynchronizeProperties(); // Function WTL.WTLHUDTextChatArea.K2_SynchronizeProperties // (Native|Public|BlueprintCallable) // @ game+0x1836f40
};

// Class WTL.WTLHUDTextChatItem
// Size: 0x290 (Inherited: 0x268)
struct UWTLHUDTextChatItem : UWTLHUDWidgetBase {
	struct UWTLCommonButton* btnCopy; // 0x268(0x08)
	struct UInvalidationBox* ibMessage; // 0x270(0x08)
	struct UWTLChatTextBlock* tbMessage; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)
	struct UWidgetAnimation* CopyButtonShowHideAnimation; // 0x288(0x08)

	void OnCopyButtonClicked(); // Function WTL.WTLHUDTextChatItem.OnCopyButtonClicked // (Final|Native|Private) // @ game+0x1837e40
};

// Class WTL.WTLHUDThrowingStateExitHint
// Size: 0x278 (Inherited: 0x268)
struct UWTLHUDThrowingStateExitHint : UWTLHUDWidgetBase {
	struct UTextBlock* tbHideUsableItemKey; // 0x268(0x08)
	struct UTextBlock* tbAimKey; // 0x270(0x08)
};

// Class WTL.WTLHUDTrade
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDTrade : UWTLHUDInteractiveWidget {
	struct UWTLHUDTradeTabsWindow* ucTradeTabsWindow; // 0x278(0x08)
};

// Class WTL.WTLHUDTradeTabsWindow
// Size: 0x300 (Inherited: 0x288)
struct UWTLHUDTradeTabsWindow : UWTLHUDWindowBase {
	struct UHorizontalBox* hbTabBtns; // 0x288(0x08)
	struct UWidgetSwitcher* wsTab; // 0x290(0x08)
	struct UWidgetSwitcher* wsSellStorage; // 0x298(0x08)
	struct UWidgetSwitcher* wsBuyStorage; // 0x2a0(0x08)
	struct UWTLHUDSellStorage* ucSellStorage; // 0x2a8(0x08)
	struct UWTLHUDBuyStorage* ucBuyStorage; // 0x2b0(0x08)
	struct UWTLHUDCommissionSellStorage* ucCommissionSellStorage; // 0x2b8(0x08)
	struct UWTLHUDCommissionList* ucCommissionList; // 0x2c0(0x08)
	struct UWTLHUDCommissionDropArea* ucCommissionDropArea; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct TSoftClassPtr<UObject> TabButtonClass; // 0x2d8(0x28)

	void OnTabBtnClicked(char TabIndex); // Function WTL.WTLHUDTradeTabsWindow.OnTabBtnClicked // (Final|Native|Private) // @ game+0x18380c0
	void OnNPCActorActiveStateChanged(bool IsActive); // Function WTL.WTLHUDTradeTabsWindow.OnNPCActorActiveStateChanged // (Final|Native|Private) // @ game+0x1823000
};

// Class WTL.WTLHUDTutorialWindow
// Size: 0x348 (Inherited: 0x288)
struct UWTLHUDTutorialWindow : UWTLHUDWindowBase {
	struct UBorder* bWidth; // 0x288(0x08)
	struct UBorder* bHeight; // 0x290(0x08)
	struct UHorizontalBox* hbMessagesCount; // 0x298(0x08)
	struct UImage* imgMessage; // 0x2a0(0x08)
	struct URichTextBlock* rtbMessage; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsCheckBox; // 0x2b0(0x08)
	struct UWTLCommonCheckBox* cbDisableTutorial; // 0x2b8(0x08)
	struct UWTLCommonCheckBox* cbDoNotShowAgain; // 0x2c0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x2c8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnPrevious; // 0x2d0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnNext; // 0x2d8(0x08)
	struct UTextBlock* tbCurrentMessageNumber; // 0x2e0(0x08)
	struct UTextBlock* tbMessagesCount; // 0x2e8(0x08)
	char pad_2F0[0x4c]; // 0x2f0(0x4c)
	float MinWidth; // 0x33c(0x04)
	float MinHeight; // 0x340(0x04)
	float PaddingSize; // 0x344(0x04)

	void OnPreviousBtnClicked(); // Function WTL.WTLHUDTutorialWindow.OnPreviousBtnClicked // (Final|Native|Private) // @ game+0x1838330
	void OnNextBtnClicked(); // Function WTL.WTLHUDTutorialWindow.OnNextBtnClicked // (Final|Native|Private) // @ game+0x1838310
	void OnDoNotShowAgainCheckBoxCheckStateChanged(bool bIsChecked); // Function WTL.WTLHUDTutorialWindow.OnDoNotShowAgainCheckBoxCheckStateChanged // (Final|Native|Private) // @ game+0x17d3540
};

// Class WTL.WTLHUDUtilizationStorage
// Size: 0x2d0 (Inherited: 0x2c0)
struct UWTLHUDUtilizationStorage : UWTLHUDBaseActionStorage {
	struct UWidgetSwitcher* wsReward; // 0x2c0(0x08)
	struct UWTLHUDItemTypeSlot* ucRewardItemTypeSlot; // 0x2c8(0x08)
};

// Class WTL.WTLHUDVehicleExitHint
// Size: 0x288 (Inherited: 0x268)
struct UWTLHUDVehicleExitHint : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpMain; // 0x268(0x08)
	struct UTextBlock* tbVehicleExitKey; // 0x270(0x08)
	struct UTextBlock* tbVehicleExitHintText; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)
};

// Class WTL.WTLHUDWarningTitle
// Size: 0x310 (Inherited: 0x268)
struct UWTLHUDWarningTitle : UWTLHUDWidgetBase {
	struct UTextBlock* tbWarning; // 0x268(0x08)
	char pad_270[0x10]; // 0x270(0x10)
	struct UWidgetAnimation* ShakingAnimation; // 0x280(0x08)
	struct UWidgetAnimation* AppearAnimation; // 0x288(0x08)
	struct FLinearColor WarningColor; // 0x290(0x10)
	struct FLinearColor WarningColorNotSound; // 0x2a0(0x10)
	struct FLinearColor EventColor; // 0x2b0(0x10)
	struct TSoftObjectPtr<UFMODEvent> WarningSoundEvent; // 0x2c0(0x28)
	struct TSoftObjectPtr<UFMODEvent> EventSoundEvent; // 0x2e8(0x28)
};

// Class WTL.WTLHUDWeaponCountdown
// Size: 0x280 (Inherited: 0x268)
struct UWTLHUDWeaponCountdown : UWTLHUDWidgetBase {
	struct UWTLCommonCountdownSlider* ucCountdownSlider; // 0x268(0x08)
	struct UImage* imgWeapon; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)

	void OnCountdownSliderFinished(); // Function WTL.WTLHUDWeaponCountdown.OnCountdownSliderFinished // (Final|Native|Private) // @ game+0x1838500
};

// Class WTL.WTLHUDWeaponInfo
// Size: 0x348 (Inherited: 0x268)
struct UWTLHUDWeaponInfo : UWTLHUDWidgetBase {
	struct UCanvasPanel* cpMain; // 0x268(0x08)
	struct UTextBlock* tbCurrentAmmoCount; // 0x270(0x08)
	struct UTextBlock* tbAmmoName; // 0x278(0x08)
	struct UImage* imgOverheat; // 0x280(0x08)
	struct UProgressBar* pbCondition; // 0x288(0x08)
	struct UImage* imgProhibited; // 0x290(0x08)
	struct UImage* imgWeapon; // 0x298(0x08)
	struct UImage* imgCorner; // 0x2a0(0x08)
	struct UImage* imgValueCircle; // 0x2a8(0x08)
	struct UImage* imgValueItem; // 0x2b0(0x08)
	struct UVerticalBox* vbValue; // 0x2b8(0x08)
	struct UTextBlock* tbValue; // 0x2c0(0x08)
	struct UTextBlock* tbAdditionalValue; // 0x2c8(0x08)
	struct UWidgetSwitcher* wsFireMode; // 0x2d0(0x08)
	char pad_2D8[0x10]; // 0x2d8(0x10)
	struct FLinearColor GoodItemConditionColor; // 0x2e8(0x10)
	struct FLinearColor NormalItemConditionColor; // 0x2f8(0x10)
	struct FLinearColor BadItemConditionColor; // 0x308(0x10)
	struct FSlateColor ItemEnergyColor; // 0x318(0x28)
	struct UWidgetAnimation* ConditionProgressBarFlickerAnimation; // 0x340(0x08)
};

// Class WTL.WTLHUDWeaponPartsExchange
// Size: 0x280 (Inherited: 0x278)
struct UWTLHUDWeaponPartsExchange : UWTLHUDInteractiveWidget {
	struct UWTLHUDWeaponPartsExchangeWindow* ucWeaponPartsExchangeWindow; // 0x278(0x08)

	void OnLostFocusOnWeaponPartsExchangeWindow(); // Function WTL.WTLHUDWeaponPartsExchange.OnLostFocusOnWeaponPartsExchangeWindow // (Final|Native|Private) // @ game+0x18391a0
};

// Class WTL.WTLHUDWeaponPartsExchangeWindow
// Size: 0x300 (Inherited: 0x288)
struct UWTLHUDWeaponPartsExchangeWindow : UWTLCommonWindowBase {
	struct UWTLHUDInventorySlot* ucWeaponPartItemToExchangeSlot; // 0x288(0x08)
	struct UWidgetSwitcher* wsMain; // 0x290(0x08)
	struct UWTLCommonComboBoxString* cbsWeaponModificationPartsTypeToExchange; // 0x298(0x08)
	struct UTextBlock* tbExchangeRate; // 0x2a0(0x08)
	struct UWTLCommonSpinBox* sbItemCountToExchange; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsWeaponPartItemResultSlot; // 0x2b0(0x08)
	struct UWTLHUDItemTypeSlot* ucWeaponPartItemResultSlot; // 0x2b8(0x08)
	struct UWTLCommonHotkeyButton* ucBtnExchange; // 0x2c0(0x08)
	struct AWTLNPCActor* m_NPCActor; // 0x2c8(0x08)
	char pad_2D0[0x30]; // 0x2d0(0x30)

	void OnWeaponPartItemToExchangeSlotInit(struct UWTLHUDInventorySlot* InventorySlot); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnWeaponPartItemToExchangeSlotInit // (Final|Native|Private) // @ game+0x1839b60
	void OnWeaponPartItemToExchangeSlotClear(uint64_t ItemId); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnWeaponPartItemToExchangeSlotClear // (Final|Native|Private) // @ game+0x1839a80
	void OnWeaponModificationPartsTypeToExchangeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnWeaponModificationPartsTypeToExchangeSelectionChanged // (Final|Native|Private) // @ game+0x1839870
	void OnMessageDialogHide(); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnMessageDialogHide // (Final|Native|Private) // @ game+0x18393c0
	void OnItemCountToExchangeValueChanged(int32_t Value); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnItemCountToExchangeValueChanged // (Final|Native|Private) // @ game+0x1839520
	void OnItemCountToExchangeTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnItemCountToExchangeTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1839660
	void OnExchangeConfirmed(); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnExchangeConfirmed // (Final|Native|Private) // @ game+0x18393f0
	void OnExchangeBtnClicked(); // Function WTL.WTLHUDWeaponPartsExchangeWindow.OnExchangeBtnClicked // (Final|Native|Private) // @ game+0x1839500
};

// Class WTL.WTLInputDataValidator
// Size: 0x28 (Inherited: 0x28)
struct UWTLInputDataValidator : UObject {
};

// Class WTL.WTLIntegerSpinBox
// Size: 0x508 (Inherited: 0x108)
struct UWTLIntegerSpinBox : UWidget {
	int32_t Value; // 0x108(0x04)
	struct FDelegate ValueDelegate; // 0x10c(0x10)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct FSpinBoxStyle WidgetStyle; // 0x120(0x2e8)
	struct USlateWidgetStyleAsset* Style; // 0x408(0x08)
	int32_t Delta; // 0x410(0x04)
	float SliderExponent; // 0x414(0x04)
	struct FSlateFontInfo Font; // 0x418(0x58)
	float MinDesiredWidth; // 0x470(0x04)
	bool ClearKeyboardFocusOnCommit; // 0x474(0x01)
	bool SelectAllTextOnCommit; // 0x475(0x01)
	char pad_476[0x2]; // 0x476(0x02)
	struct FSlateColor ForegroundColor; // 0x478(0x28)
	struct FMulticastInlineDelegate OnValueChanged; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnValueCommitted; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnBeginSliderMovement; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnEndSliderMovement; // 0x4d0(0x10)
	char bOverride_MinValue : 1; // 0x4e0(0x01)
	char bOverride_MaxValue : 1; // 0x4e0(0x01)
	char bOverride_MinSliderValue : 1; // 0x4e0(0x01)
	char bOverride_MaxSliderValue : 1; // 0x4e0(0x01)
	char pad_4E0_4 : 4; // 0x4e0(0x01)
	char pad_4E1[0x3]; // 0x4e1(0x03)
	int32_t MinValue; // 0x4e4(0x04)
	int32_t MaxValue; // 0x4e8(0x04)
	int32_t MinSliderValue; // 0x4ec(0x04)
	int32_t MaxSliderValue; // 0x4f0(0x04)
	char pad_4F4[0x14]; // 0x4f4(0x14)

	void SetValue(int32_t NewValue); // Function WTL.WTLIntegerSpinBox.SetValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a930
	void SetMinValue(int32_t NewValue); // Function WTL.WTLIntegerSpinBox.SetMinValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a7e0
	void SetMinSliderValue(int32_t NewValue); // Function WTL.WTLIntegerSpinBox.SetMinSliderValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a500
	void SetMaxValue(int32_t NewValue); // Function WTL.WTLIntegerSpinBox.SetMaxValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a670
	void SetMaxSliderValue(int32_t NewValue); // Function WTL.WTLIntegerSpinBox.SetMaxSliderValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a370
	void SetForegroundColor(struct FSlateColor InForegroundColor); // Function WTL.WTLIntegerSpinBox.SetForegroundColor // (Final|Native|Public|BlueprintCallable) // @ game+0x183a210
	void OnIntegerSpinBoxValueCommittedEvent__DelegateSignature(int32_t InValue, enum class ETextCommit CommitMethod); // DelegateFunction WTL.WTLIntegerSpinBox.OnIntegerSpinBoxValueCommittedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnIntegerSpinBoxValueChangedEvent__DelegateSignature(int32_t InValue); // DelegateFunction WTL.WTLIntegerSpinBox.OnIntegerSpinBoxValueChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnIntegerSpinBoxBeginSliderMovement__DelegateSignature(); // DelegateFunction WTL.WTLIntegerSpinBox.OnIntegerSpinBoxBeginSliderMovement__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	int32_t GetValue(); // Function WTL.WTLIntegerSpinBox.GetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183aae0
	int32_t GetMinValue(); // Function WTL.WTLIntegerSpinBox.GetMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183a8b0
	int32_t GetMinSliderValue(); // Function WTL.WTLIntegerSpinBox.GetMinSliderValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183a5d0
	int32_t GetMaxValue(); // Function WTL.WTLIntegerSpinBox.GetMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183a740
	int32_t GetMaxSliderValue(); // Function WTL.WTLIntegerSpinBox.GetMaxSliderValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183a440
	void ClearMinValue(); // Function WTL.WTLIntegerSpinBox.ClearMinValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a7c0
	void ClearMinSliderValue(); // Function WTL.WTLIntegerSpinBox.ClearMinSliderValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a4e0
	void ClearMaxValue(); // Function WTL.WTLIntegerSpinBox.ClearMaxValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a650
	void ClearMaxSliderValue(); // Function WTL.WTLIntegerSpinBox.ClearMaxSliderValue // (Final|Native|Public|BlueprintCallable) // @ game+0x183a350
};

// Class WTL.WTLInteractiveBlockedObject
// Size: 0x268 (Inherited: 0x260)
struct AWTLInteractiveBlockedObject : AWTLInteractiveObject {
	float ActivationTimePicklock; // 0x260(0x04)
	float ActivationTimeKey; // 0x264(0x04)

	void BPOnStartInteraction(struct AWTLCharacter* Character); // Function WTL.WTLInteractiveBlockedObject.BPOnStartInteraction // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnFinishInteraction(struct AWTLCharacter* Character, bool Success); // Function WTL.WTLInteractiveBlockedObject.BPOnFinishInteraction // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	float BPGetActivationTime(struct AWTLCharacter* Character); // Function WTL.WTLInteractiveBlockedObject.BPGetActivationTime // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLInteractiveObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLInteractiveObjectInterface : UInterface {
};

// Class WTL.WTLInteractivePlant
// Size: 0x290 (Inherited: 0x260)
struct AWTLInteractivePlant : AWTLInteractiveObject {
	struct USceneComponent* PlantRootComponent; // 0x260(0x08)
	struct UBoxComponent* BoxComponent; // 0x268(0x08)
	struct UStaticMeshComponent* Mesh; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)
	int32_t ResourceID; // 0x280(0x04)
	int32_t MinCount; // 0x284(0x04)
	int32_t MaxCount; // 0x288(0x04)
	int32_t Count; // 0x28c(0x04)

	void OnItemDestroyed(struct AActor* DestroyedActor); // Function WTL.WTLInteractivePlant.OnItemDestroyed // (Final|Native|Private) // @ game+0x17941a0
};

// Class WTL.WTLPlantInstancedStaticMeshComponent
// Size: 0x590 (Inherited: 0x580)
struct UWTLPlantInstancedStaticMeshComponent : UInstancedStaticMeshComponent {
	float Chance; // 0x578(0x04)
	int32_t MaxInstanceCount; // 0x57c(0x04)
	enum class EWTLItemType ItemType; // 0x580(0x01)
	int32_t ItemTypeID; // 0x584(0x04)
	int32_t MinItemCount; // 0x588(0x04)
	int32_t MaxItemCount; // 0x58c(0x04)
};

// Class WTL.WTLInteractivePlantSpawnField
// Size: 0x290 (Inherited: 0x220)
struct AWTLInteractivePlantSpawnField : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	struct TArray<struct FWTLInteractivePlanSpawnFieldPoint> GeneratedSpawnPoints; // 0x238(0x10)
	char pad_248[0x10]; // 0x248(0x10)
	struct UBoxComponent* SpawnVolume; // 0x258(0x08)
	float MinStartDelay; // 0x260(0x04)
	float MaxStartDelay; // 0x264(0x04)
	float MinSpawnDelay; // 0x268(0x04)
	float MaxSpawnDelay; // 0x26c(0x04)
	int32_t CountLimit; // 0x270(0x04)
	int32_t MinSpawnCount; // 0x274(0x04)
	int32_t MaxSpawnCount; // 0x278(0x04)
	bool AlignPlantToNormal; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
	float RotationMin; // 0x280(0x04)
	float RotationMax; // 0x284(0x04)
	float MaxSlopeAngle; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)

	void OnRep_SpawnedItems(); // Function WTL.WTLInteractivePlantSpawnField.OnRep_SpawnedItems // (Final|Native|Private) // @ game+0x183b650
};

// Class WTL.WTLInteractivePlantSpawnPoint
// Size: 0x328 (Inherited: 0x220)
struct AWTLInteractivePlantSpawnPoint : AActor {
	char pad_220[0x78]; // 0x220(0x78)
	bool SpawnActive; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TMap<struct TSoftClassPtr<UObject>, struct FWTLInteractivePlantSpawnInfo> PlantsToSpawn; // 0x2a0(0x50)
	struct UBoxComponent* SpawnVolume; // 0x2f0(0x08)
	float MinStartDelay; // 0x2f8(0x04)
	float MaxStartDelay; // 0x2fc(0x04)
	float MinSpawnDelay; // 0x300(0x04)
	float MaxSpawnDelay; // 0x304(0x04)
	int32_t CountLimit; // 0x308(0x04)
	int32_t MinSpawnCount; // 0x30c(0x04)
	int32_t MaxSpawnCount; // 0x310(0x04)
	bool AlignPlantToNormal; // 0x314(0x01)
	char pad_315[0x3]; // 0x315(0x03)
	float RotationMin; // 0x318(0x04)
	float RotationMax; // 0x31c(0x04)
	float MaxSlopeAngle; // 0x320(0x04)
	float MaxPlantSize; // 0x324(0x04)

	void DeactivateSpawn(bool RemoveSpawnedPlants); // Function WTL.WTLInteractivePlantSpawnPoint.DeactivateSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void ActivateSpawn(bool ResetSpawnedCounter); // Function WTL.WTLInteractivePlantSpawnPoint.ActivateSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1773b90
};

// Class WTL.WTLInteractiveResource
// Size: 0x300 (Inherited: 0x260)
struct AWTLInteractiveResource : AWTLInteractiveObject {
	char pad_260[0x60]; // 0x260(0x60)
	struct USceneComponent* PlantRootComponent; // 0x2c0(0x08)
	struct UBoxComponent* BoxComponent; // 0x2c8(0x08)
	struct UStaticMeshComponent* Mesh; // 0x2d0(0x08)
	int32_t ResourceID; // 0x2d8(0x04)
	int32_t MaxCount; // 0x2dc(0x04)
	int32_t MinIncrementCount; // 0x2e0(0x04)
	int32_t MaxIncrementCount; // 0x2e4(0x04)
	float MinIncrementDelay; // 0x2e8(0x04)
	float MaxIncrementDelay; // 0x2ec(0x04)
	bool AddToBlackListAfterGiveItem; // 0x2f0(0x01)
	char pad_2F1[0x3]; // 0x2f1(0x03)
	float BlackListTimeout; // 0x2f4(0x04)
	int32_t Count; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void OnRep_Count(); // Function WTL.WTLInteractiveResource.OnRep_Count // (Final|Native|Private) // @ game+0x183b990
};

// Class WTL.WTLInteractiveResourceSource
// Size: 0x318 (Inherited: 0x260)
struct AWTLInteractiveResourceSource : AWTLInteractiveObject {
	char pad_260[0x60]; // 0x260(0x60)
	struct UStaticMeshComponent* Mesh; // 0x2c0(0x08)
	struct TArray<struct FWTLInteractiveResourceGatherType> GatherTypes; // 0x2c8(0x10)
	struct FText SourceName; // 0x2d8(0x18)
	float CurrentValue; // 0x2f0(0x04)
	float StartValue; // 0x2f4(0x04)
	float MaxValue; // 0x2f8(0x04)
	float MinValueIncrement; // 0x2fc(0x04)
	float MaxValueIncrement; // 0x300(0x04)
	float MinValueIncrementTime; // 0x304(0x04)
	float MaxValueIncrementTime; // 0x308(0x04)
	bool AddToBlackListAfterGather; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	float BlackListTime; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)

	void OnRep_CurrentValue(); // Function WTL.WTLInteractiveResourceSource.OnRep_CurrentValue // (Final|Native|Private) // @ game+0xe77850
};

// Class WTL.WTLQuickTimeEventInstigator
// Size: 0x28 (Inherited: 0x28)
struct UWTLQuickTimeEventInstigator : UInterface {

	void OnQTESuccessed(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.OnQTESuccessed // (Native|Event|Public|BlueprintEvent) // @ game+0x1774b90
	void OnQTEStarted(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.OnQTEStarted // (Native|Event|Public|BlueprintEvent) // @ game+0x183c260
	void OnQTEFailed(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.OnQTEFailed // (Native|Event|Public|BlueprintEvent) // @ game+0x1774ab0
	void OnQTEChainError(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.OnQTEChainError // (Native|Event|Public|BlueprintEvent) // @ game+0x17bd2c0
	void OnQTECanceled(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.OnQTECanceled // (Native|Event|Public|BlueprintEvent) // @ game+0x1774c70
	bool IsNeedToHideUsableItem(); // Function WTL.WTLQuickTimeEventInstigator.IsNeedToHideUsableItem // (Native|Event|Public|BlueprintEvent) // @ game+0x1774db0
	enum class EWTLQTEType GetQTEType(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.GetQTEType // (Native|Event|Public|BlueprintEvent) // @ game+0x183c340
	char GetQTEDificulty(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.GetQTEDificulty // (Native|Event|Public|BlueprintEvent) // @ game+0x183c430
	bool CanCancelQTE(struct AWTLCharacter* Target); // Function WTL.WTLQuickTimeEventInstigator.CanCancelQTE // (Native|Event|Public|BlueprintEvent) // @ game+0x183c520
};

// Class WTL.WTLItemManipulationIntreface
// Size: 0x28 (Inherited: 0x28)
struct UWTLItemManipulationIntreface : UInterface {

	void UpdateRotation(float DeltaX, float DeltaY); // Function WTL.WTLItemManipulationIntreface.UpdateRotation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x183c820
	void SetActivity(struct AWTLActionGameplayActivity* Activity); // Function WTL.WTLItemManipulationIntreface.SetActivity // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x183c260
	void OnPress(struct FVector2D ScreenPosition); // Function WTL.WTLItemManipulationIntreface.OnPress // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x183cac0
	void MakeTrace(struct FVector2D ScreenPosition); // Function WTL.WTLItemManipulationIntreface.MakeTrace // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x183cb90
	struct UTextureRenderTarget2D* GetViewTargetTexture(); // Function WTL.WTLItemManipulationIntreface.GetViewTargetTexture // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x183c9c0
	struct UMaterialInterface* GetBrushMaterial(); // Function WTL.WTLItemManipulationIntreface.GetBrushMaterial // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x183c990
	void CheckHoveredComponent(struct FVector2D ScreenPosition); // Function WTL.WTLItemManipulationIntreface.CheckHoveredComponent // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x183c9f0
};

// Class WTL.WTLItemPickup
// Size: 0x288 (Inherited: 0x260)
struct AWTLItemPickup : AWTLInteractiveObject {
	struct UBoxComponent* BoxComponent; // 0x260(0x08)
	struct UStaticMeshComponent* Mesh; // 0x268(0x08)
	bool CanAlwaysPickup; // 0x270(0x01)
	bool AddItemToInventory; // 0x271(0x01)
	bool IsHighLighted; // 0x272(0x01)
	char pad_273[0x15]; // 0x273(0x15)

	void OnItemDestroyed(struct AActor* DestroyedActor); // Function WTL.WTLItemPickup.OnItemDestroyed // (Final|Native|Public) // @ game+0x17941a0
	void OnHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLItemPickup.OnHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x183d500
	void NetMulticast_OnStopFreeFall(struct FTransform StopFreeFallTransform); // Function WTL.WTLItemPickup.NetMulticast_OnStopFreeFall // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x183d7a0
	void MakeFreeFall(struct TArray<struct AActor*>& IgnoredActors); // Function WTL.WTLItemPickup.MakeFreeFall // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1779410
	int32_t GetItemTypeID(); // Function WTL.WTLItemPickup.GetItemTypeID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183d4a0
	enum class EWTLItemType GetItemType(); // Function WTL.WTLItemPickup.GetItemType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183d4d0
	void BPOnTakeItem(struct AWTLCharacter* Character); // Function WTL.WTLItemPickup.BPOnTakeItem // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLWeaponPickup
// Size: 0x360 (Inherited: 0x288)
struct AWTLWeaponPickup : AWTLItemPickup {
	struct FWTLWeaponItem ItemInfo; // 0x288(0xd8)

	void OnRep_ItemInfo(); // Function WTL.WTLWeaponPickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183dad0
};

// Class WTL.WTLAmmoPickup
// Size: 0x358 (Inherited: 0x288)
struct AWTLAmmoPickup : AWTLItemPickup {
	struct FWTLAmmoItem ItemInfo; // 0x288(0x98)
	struct FLinearColor BoxColor; // 0x320(0x10)
	struct TSoftObjectPtr<UTexture> BoxSticker; // 0x330(0x28)

	void OnRep_ItemInfo(); // Function WTL.WTLAmmoPickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183dc80
};

// Class WTL.WTLMedicinePickup
// Size: 0x330 (Inherited: 0x288)
struct AWTLMedicinePickup : AWTLItemPickup {
	struct FWTLMedicineItem ItemInfo; // 0x288(0xa8)

	void OnRep_ItemInfo(); // Function WTL.WTLMedicinePickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183dea0
};

// Class WTL.WTLStuffPickup
// Size: 0x320 (Inherited: 0x288)
struct AWTLStuffPickup : AWTLItemPickup {
	struct FWTLStuffItem ItemInfo; // 0x288(0x98)

	void OnRep_ItemInfo(); // Function WTL.WTLStuffPickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183e0c0
};

// Class WTL.WTLClothesPickup
// Size: 0x338 (Inherited: 0x288)
struct AWTLClothesPickup : AWTLItemPickup {
	struct FWTLClothesItem ItemInfo; // 0x288(0xb0)

	void OnRep_ItemInfo(); // Function WTL.WTLClothesPickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183e2e0
};

// Class WTL.WTLResourcePickup
// Size: 0x2f8 (Inherited: 0x288)
struct AWTLResourcePickup : AWTLItemPickup {
	struct FWTLResourceItem ItemInfo; // 0x288(0x70)

	void OnRep_ItemInfo(); // Function WTL.WTLResourcePickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183e490
};

// Class WTL.WTLArtefactPickup
// Size: 0x328 (Inherited: 0x288)
struct AWTLArtefactPickup : AWTLItemPickup {
	struct FWTLArtefactItem ItemInfo; // 0x288(0xa0)

	void OnRep_ItemInfo(); // Function WTL.WTLArtefactPickup.OnRep_ItemInfo // (Final|Native|Private) // @ game+0x183e6b0
};

// Class WTL.WTLActiveArtefactPickup
// Size: 0x328 (Inherited: 0x328)
struct AWTLActiveArtefactPickup : AWTLArtefactPickup {
};

// Class WTL.WTLItemPickupSpawnPoint
// Size: 0x2b8 (Inherited: 0x220)
struct AWTLItemPickupSpawnPoint : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	struct TSoftClassPtr<UObject> ItemClass; // 0x240(0x28)
	struct UBoxComponent* SpawnVolume; // 0x268(0x08)
	bool AutoEnableSpawn; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	float StartDelay; // 0x274(0x04)
	float SpawnDelay; // 0x278(0x04)
	int32_t MaxCount; // 0x27c(0x04)
	int32_t CountLimit; // 0x280(0x04)
	float SpawnChance; // 0x284(0x04)
	struct FRotator RotationMin; // 0x288(0x0c)
	struct FRotator RotationMax; // 0x294(0x0c)
	struct FWTLPickupSpawnPointScalabilitySettings ScalabilitySettings; // 0x2a0(0x14)
	char pad_2B4[0x4]; // 0x2b4(0x04)

	void SpawnSingleItem(float SpawnTimeout, bool SpawnOnlyIfNotExists); // Function WTL.WTLItemPickupSpawnPoint.SpawnSingleItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x183ebc0
	void ResetSpawnTimer(); // Function WTL.WTLItemPickupSpawnPoint.ResetSpawnTimer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
	int32_t GetSpawnItemTypeID(); // Function WTL.WTLItemPickupSpawnPoint.GetSpawnItemTypeID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183eaa0
	enum class EWTLItemType GetSpawnItemType(); // Function WTL.WTLItemPickupSpawnPoint.GetSpawnItemType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x183eb30
	void EnableSpawn(); // Function WTL.WTLItemPickupSpawnPoint.EnableSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
	void DisableSpawn(); // Function WTL.WTLItemPickupSpawnPoint.DisableSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
};

// Class WTL.WTLItemPreview
// Size: 0x3a0 (Inherited: 0x220)
struct AWTLItemPreview : AActor {
	char pad_220[0x78]; // 0x220(0x78)
	struct UBoxComponent* BoxComponent; // 0x298(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x2a0(0x08)
	struct UStaticMeshComponent* BackgroundPlane; // 0x2a8(0x08)
	struct USceneCaptureComponent2D* SceneCapture; // 0x2b0(0x08)
	struct UWTLWeaponAttachment* MuzzleAttachment; // 0x2b8(0x08)
	struct UStaticMeshComponent* MuzzleMount; // 0x2c0(0x08)
	struct UWTLWeaponAttachment* FlashlightAttachment; // 0x2c8(0x08)
	struct UStaticMeshComponent* FlashlightMount; // 0x2d0(0x08)
	struct UWTLWeaponAttachment* ScopeAttachment; // 0x2d8(0x08)
	struct UStaticMeshComponent* ScopeMount; // 0x2e0(0x08)
	struct UTextureRenderTarget2D* RenderTargetSquare; // 0x2e8(0x08)
	struct UTextureRenderTarget2D* RenderTargetLandscape; // 0x2f0(0x08)
	struct FVector SquareTextureBackgroundPlaneScale; // 0x2f8(0x0c)
	struct FVector LandscapeTextureBackgroundPlaneScale; // 0x304(0x0c)
	struct TSoftObjectPtr<UMaterialInterface> SquareItemPreviewStudioMaterial; // 0x310(0x28)
	struct TSoftObjectPtr<UMaterialInterface> LandscapeItemPreviewStudioMaterial; // 0x338(0x28)
	struct FVector SquareBackgroundPlaneLocationOffset; // 0x360(0x0c)
	struct FVector LandscapeBackgroundPlaneLocationOffset; // 0x36c(0x0c)
	struct FVector Light1LocationOffset; // 0x378(0x0c)
	struct FVector Light2LocationOffset; // 0x384(0x0c)
	float ClothesHelmetZOffset; // 0x390(0x04)
	float ClothesJacketZOffset; // 0x394(0x04)
	bool ZoomingParallax; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float IntensityMultiplier; // 0x39c(0x04)
};

// Class WTL.WTLItemSystem
// Size: 0x2c8 (Inherited: 0x28)
struct UWTLItemSystem : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_WeaponLocalizationCache; // 0x98(0x50)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_AmmoLocalizationCache; // 0xe8(0x50)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_MedicineLocalizationCache; // 0x138(0x50)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_StuffLocalizationCache; // 0x188(0x50)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_ClothesLocalizationCache; // 0x1d8(0x50)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_ResourceLocalizationCache; // 0x228(0x50)
	struct TMap<uint16_t, struct FWTLLocalizationCacheRecord> m_ArtefactLocalizationCache; // 0x278(0x50)
};

// Class WTL.WTLJunkMachineBase
// Size: 0x5e8 (Inherited: 0x260)
struct AWTLJunkMachineBase : AWTLInteractiveObject {
	char NeedEmptySlotsInInventoryToGetCards; // 0x260(0x01)
	char NeedEmptySlotsInInventoryToGetItems; // 0x261(0x01)
	char pad_262[0x6]; // 0x262(0x06)
	uint64_t PriceForOneCard; // 0x268(0x08)
	enum class EWTLItemType CardItemType; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct TArray<uint16_t> CardItemTypeIDsToExchange; // 0x278(0x10)
	uint16_t RewardCardItemTypeID; // 0x288(0x02)
	char pad_28A[0x6]; // 0x28a(0x06)
	struct TArray<uint32_t> GetCardsDays; // 0x290(0x10)
	bool UseAdditionalChance; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	int32_t TimeToStartUseChanceMultiplier; // 0x2a4(0x04)
	int32_t TimeToStopUseChanceMultiplier; // 0x2a8(0x04)
	char MaxNumberOfUsesInJunkMode; // 0x2ac(0x01)
	char MaxNumberOfUsesInCardsMode; // 0x2ad(0x01)
	char pad_2AE[0x2]; // 0x2ae(0x02)
	struct TArray<struct FWTLJunkMachineBundleData> BundlesList; // 0x2b0(0x10)
	struct TArray<struct FWTLJunkMachineBundleData> ComfortingRewardList; // 0x2c0(0x10)
	float WeaponItemPriceMultiplier; // 0x2d0(0x04)
	float AmmoItemPriceMultiplier; // 0x2d4(0x04)
	float MedicineItemPriceMultiplier; // 0x2d8(0x04)
	float StuffItemPriceMultiplier; // 0x2dc(0x04)
	float ClothesItemPriceMultiplier; // 0x2e0(0x04)
	float ResourceItemPriceMultiplier; // 0x2e4(0x04)
	float ArtefactItemPriceMultiplier; // 0x2e8(0x04)
	bool CanBuyStrangeArtefactItems; // 0x2ec(0x01)
	bool CanBuyWeaponItems; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	struct TArray<int32_t> BuyOnlyWeaponItems; // 0x2f0(0x10)
	struct TArray<int32_t> BuyExceptWeaponItems; // 0x300(0x10)
	bool CanBuyAmmoItems; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct TArray<int32_t> BuyOnlyAmmoItems; // 0x318(0x10)
	struct TArray<int32_t> BuyExceptAmmoItems; // 0x328(0x10)
	bool CanBuyMedicineItems; // 0x338(0x01)
	char pad_339[0x7]; // 0x339(0x07)
	struct TArray<int32_t> BuyOnlyMedicineItems; // 0x340(0x10)
	struct TArray<int32_t> BuyExceptMedicineItems; // 0x350(0x10)
	bool CanBuyStuffItems; // 0x360(0x01)
	char pad_361[0x7]; // 0x361(0x07)
	struct TArray<int32_t> BuyOnlyStuffItems; // 0x368(0x10)
	struct TArray<int32_t> BuyExceptStuffItems; // 0x378(0x10)
	bool CanBuyClothesItems; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct TArray<int32_t> BuyOnlyClothesItems; // 0x390(0x10)
	struct TArray<int32_t> BuyExceptClothesItems; // 0x3a0(0x10)
	bool CanBuyResourceItems; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)
	struct TArray<int32_t> BuyOnlyResourceItems; // 0x3b8(0x10)
	struct TArray<int32_t> BuyExceptResourceItems; // 0x3c8(0x10)
	bool CanBuyArtefactItems; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct TArray<int32_t> BuyOnlyArtefactItems; // 0x3e0(0x10)
	struct TArray<int32_t> BuyExceptArtefactItems; // 0x3f0(0x10)
	char pad_400[0xa8]; // 0x400(0xa8)
	struct TArray<uint64_t> m_CharactersBlackListInJunkMode; // 0x4a8(0x10)
	struct TArray<uint64_t> m_CharactersBlackListInCardsMode; // 0x4b8(0x10)
	char pad_4C8[0x28]; // 0x4c8(0x28)
	bool m_CanAcceptCards; // 0x4f0(0x01)
	char pad_4F1[0x17]; // 0x4f1(0x17)
	struct FWTLSellItems SellItems; // 0x508(0x70)
	struct FWTLSellItems CommissionSellItemsPage; // 0x578(0x70)

	void OnRep_BlackListInJunkMode(); // Function WTL.WTLJunkMachineBase.OnRep_BlackListInJunkMode // (Final|Native|Private) // @ game+0x183f1f0
	void OnRep_BlackListInCardsMode(); // Function WTL.WTLJunkMachineBase.OnRep_BlackListInCardsMode // (Final|Native|Private) // @ game+0x183f1f0
};

// Class WTL.WTLKeyNameHelper
// Size: 0x28 (Inherited: 0x28)
struct UWTLKeyNameHelper : UObject {
};

// Class WTL.WTLLadder
// Size: 0x278 (Inherited: 0x228)
struct AWTLLadder : ATriggerBox {
	char pad_228[0x8]; // 0x228(0x08)
	float SnappingDistance; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TArray<struct AStaticMeshActor*> LadderMeshes; // 0x238(0x10)
	struct FText InteractiveObjectName; // 0x248(0x18)
	struct UArrowComponent* DownStartPoint; // 0x260(0x08)
	struct UArrowComponent* UpEndPoint; // 0x268(0x08)
	struct UArrowComponent* TrajectoryPoint; // 0x270(0x08)

	void Server_Use(struct AWTLCharacter* Character); // Function WTL.WTLLadder.Server_Use // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18400c0
};

// Class WTL.WTLLevelPickupSpawnPoint
// Size: 0x248 (Inherited: 0x220)
struct AWTLLevelPickupSpawnPoint : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	int32_t MinQuality; // 0x240(0x04)
	int32_t MaxQuality; // 0x244(0x04)
};

// Class WTL.WTLLevelStreamingVolume
// Size: 0x280 (Inherited: 0x258)
struct AWTLLevelStreamingVolume : AVolume {
	char pad_258[0x10]; // 0x258(0x10)
	struct TArray<struct FName> StreamingLevelNames; // 0x268(0x10)
	float UnloadLevelTimeout; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLLevelStreamingVolume.OnEndOverlap // (Final|Native|Private) // @ game+0x1841030
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLLevelStreamingVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x18412a0
};

// Class WTL.WTLLightChangeVolume
// Size: 0x268 (Inherited: 0x258)
struct AWTLLightChangeVolume : AVolume {
	char pad_258[0x8]; // 0x258(0x08)
	float SkyLightIntencity; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLLightChangeVolume.OnEndOverlap // (Final|Native|Private) // @ game+0x1841710
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLLightChangeVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1841980
};

// Class WTL.WTLLightingGrenadeProjectile
// Size: 0x2f0 (Inherited: 0x290)
struct AWTLLightingGrenadeProjectile : AWTLThrowingDeviceProjectile {
	char pad_290[0x28]; // 0x290(0x28)
	float Radius; // 0x2b8(0x04)
	char MinHits; // 0x2bc(0x01)
	char MaxHits; // 0x2bd(0x01)
	char pad_2BE[0x2]; // 0x2be(0x02)
	float MinTimeBetweenHits; // 0x2c0(0x04)
	float MaxTimeBetweenHits; // 0x2c4(0x04)
	struct TSoftClassPtr<UObject> FX; // 0x2c8(0x28)
};

// Class WTL.WTLLoadingScreenLocation
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLLoadingScreenLocation : UUserWidget {
	struct UTextBlock* tbDevelopmentStage; // 0x260(0x08)
	struct UTextBlock* tbVersion; // 0x268(0x08)
	struct UTextBlock* tbLocationName; // 0x270(0x08)
	struct UImage* imgLoadingImageBackground; // 0x278(0x08)
	struct UImage* imgLoadingImage; // 0x280(0x08)
	struct UTextBlock* tbAdvice; // 0x288(0x08)
	struct UTextBlock* tbProcessStatus; // 0x290(0x08)
	char pad_298[0x20]; // 0x298(0x20)
};

// Class WTL.WTLLoadingScreenSimple
// Size: 0x270 (Inherited: 0x260)
struct UWTLLoadingScreenSimple : UUserWidget {
	struct UTextBlock* tbDevelopmentStage; // 0x260(0x08)
	struct UTextBlock* tbVersion; // 0x268(0x08)
};

// Class WTL.WTLLoadingScreenTestLevelScriptActor
// Size: 0x258 (Inherited: 0x228)
struct AWTLLoadingScreenTestLevelScriptActor : ALevelScriptActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct TSoftClassPtr<UObject> LoadingScreenTestMenuClass; // 0x230(0x28)
};

// Class WTL.WTLLoadingScreenTestMenu
// Size: 0x278 (Inherited: 0x260)
struct UWTLLoadingScreenTestMenu : UUserWidget {
	char pad_260[0x8]; // 0x260(0x08)
	struct UButton* btnMainMenu; // 0x268(0x08)
	struct UButton* btnLocation; // 0x270(0x08)

	void MainMenuBtnClick(); // Function WTL.WTLLoadingScreenTestMenu.MainMenuBtnClick // (Final|Native|Private) // @ game+0x1842100
	void LocationBtnClick(); // Function WTL.WTLLoadingScreenTestMenu.LocationBtnClick // (Final|Native|Private) // @ game+0x1842090
};

// Class WTL.WTLLocalizationHelper
// Size: 0x28 (Inherited: 0x28)
struct UWTLLocalizationHelper : UObject {
};

// Class WTL.WTLLocalPlayer
// Size: 0x268 (Inherited: 0x258)
struct UWTLLocalPlayer : ULocalPlayer {
	char pad_258[0x10]; // 0x258(0x10)
};

// Class WTL.WTLLockpickingActivity
// Size: 0x310 (Inherited: 0x250)
struct AWTLLockpickingActivity : AWTLActionGameplayActivity {
	char pad_250[0x40]; // 0x250(0x40)
	struct FMulticastInlineDelegate OnInteractionFinished; // 0x290(0x10)
	int32_t NumPins; // 0x2a0(0x04)
	bool IsPremium; // 0x2a4(0x01)
	char pad_2A5[0x3]; // 0x2a5(0x03)
	int32_t AssistantType; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	struct FMulticastInlineDelegate OnResetGame; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnResetPin; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnCloseGame; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnCompleteGame; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnBreakLockpick; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnCheckPinResult; // 0x300(0x10)

	void Server_CheckPin(int32_t pin_id); // Function WTL.WTLLockpickingActivity.Server_CheckPin // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate) // @ game+0x1843670
	void ResetPin(int32_t pin_id); // Function WTL.WTLLockpickingActivity.ResetPin // (Native|Event|Public|BlueprintEvent) // @ game+0x18434b0
	void ResetGame(bool IsBreakLockpick); // Function WTL.WTLLockpickingActivity.ResetGame // (Native|Event|Public|BlueprintEvent) // @ game+0x1843590
	void OnResetPin__DelegateSignature(int32_t PinID); // DelegateFunction WTL.WTLLockpickingActivity.OnResetPin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnResetGame__DelegateSignature(bool IsBreakLockpick); // DelegateFunction WTL.WTLLockpickingActivity.OnResetGame__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnInteractionFinished__DelegateSignature(struct AWTLLockpickingActivity* ActionGameplayActor); // DelegateFunction WTL.WTLLockpickingActivity.OnInteractionFinished__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnCompleteGame__DelegateSignature(struct AWTLCharacter* Character); // DelegateFunction WTL.WTLLockpickingActivity.OnCompleteGame__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnCloseGame__DelegateSignature(); // DelegateFunction WTL.WTLLockpickingActivity.OnCloseGame__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnCheckPinResult__DelegateSignature(int32_t Num, int32_t PinID, bool IsValid); // DelegateFunction WTL.WTLLockpickingActivity.OnCheckPinResult__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void OnBreakLockpick__DelegateSignature(); // DelegateFunction WTL.WTLLockpickingActivity.OnBreakLockpick__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x1ad0090
	void Init(int32_t num_pins, int32_t Seed); // Function WTL.WTLLockpickingActivity.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x1843780
	void CompleteGame(struct AWTLCharacter* Character); // Function WTL.WTLLockpickingActivity.CompleteGame // (Native|Event|Public|BlueprintEvent) // @ game+0x18433d0
	void CloseGame(); // Function WTL.WTLLockpickingActivity.CloseGame // (Native|Event|Public|BlueprintEvent) // @ game+0xba4a50
	void Client_ResetPin(int32_t pin_id); // Function WTL.WTLLockpickingActivity.Client_ResetPin // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1843120
	void Client_ResetGame(bool IsBreakLockpick); // Function WTL.WTLLockpickingActivity.Client_ResetGame // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0xf43dd0
	void Client_CompleteGame(struct AWTLCharacter* Character); // Function WTL.WTLLockpickingActivity.Client_CompleteGame // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1843040
	void Client_CloseGame(); // Function WTL.WTLLockpickingActivity.Client_CloseGame // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x17ed060
	void Client_CheckPinResult(int32_t Num, int32_t PinID, bool IsValid); // Function WTL.WTLLockpickingActivity.Client_CheckPinResult // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1842e60
	void Client_BreakLockpick(); // Function WTL.WTLLockpickingActivity.Client_BreakLockpick // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x10fb3b0
	bool CanUseAssistant(); // Function WTL.WTLLockpickingActivity.CanUseAssistant // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1843200
};

// Class WTL.WTLLootCollectorDrone
// Size: 0x4e8 (Inherited: 0x4d8)
struct AWTLLootCollectorDrone : AWTLDrone {
	char pad_4D8[0x4]; // 0x4d8(0x04)
	float SearchRadius; // 0x4dc(0x04)
	float SearchInterval; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
};

// Class WTL.WTLMailBox
// Size: 0x270 (Inherited: 0x220)
struct AWTLMailBox : AActor {
	char pad_220[0x20]; // 0x220(0x20)
	struct UStaticMeshComponent* Mesh; // 0x240(0x08)
	int32_t ID; // 0x248(0x04)
	int32_t MaxPackageWeight; // 0x24c(0x04)
	bool m_IsActive; // 0x250(0x01)
	char pad_251[0x17]; // 0x251(0x17)
	float NormalDeliveryPricePercent; // 0x268(0x04)
	float FastDeliveryPricePercent; // 0x26c(0x04)

	void SetIsActive(bool Value); // Function WTL.WTLMailBox.SetIsActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void OnRep_IsActive(); // Function WTL.WTLMailBox.OnRep_IsActive // (Final|Native|Private) // @ game+0x1844a50
	void OnIsActiveChanged(bool IsActive); // Function WTL.WTLMailBox.OnIsActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool GetIsActive(); // Function WTL.WTLMailBox.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1844a30
};

// Class WTL.WTLMailSystem
// Size: 0x50 (Inherited: 0x28)
struct UWTLMailSystem : UObject {
	char pad_28[0x28]; // 0x28(0x28)
};

// Class WTL.WTLMainMenuActionWaiting
// Size: 0x2c8 (Inherited: 0x280)
struct UWTLMainMenuActionWaiting : UWTLCommonActionWaiting {
	struct UCanvasPanel* cpBtnCancel; // 0x280(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCancel; // 0x288(0x08)
	char pad_290[0x30]; // 0x290(0x30)
	bool bIsShowCancelBtn; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)

	void OnCancelBtnClicked(); // Function WTL.WTLMainMenuActionWaiting.OnCancelBtnClicked // (Final|Native|Private) // @ game+0x1844e10
};

// Class WTL.WTLMainMenuAnnouncer
// Size: 0x2d0 (Inherited: 0x260)
struct UWTLMainMenuAnnouncer : UUserWidget {
	struct UBorder* bAnnouncer; // 0x260(0x08)
	struct UTextBlock* tbAnnouncerText; // 0x268(0x08)
	char pad_270[0x30]; // 0x270(0x30)
	struct UWidgetAnimation* NewAnnouncementAnimation; // 0x2a0(0x08)
	struct TSoftObjectPtr<UFMODEvent> NewAnnouncementSoundEvent; // 0x2a8(0x28)

	void AnnouncerHttpCall(); // Function WTL.WTLMainMenuAnnouncer.AnnouncerHttpCall // (Final|Native|Private) // @ game+0x1844f40
};

// Class WTL.WTLMainMenuBase
// Size: 0x268 (Inherited: 0x260)
struct UWTLMainMenuBase : UWTLWidgetBase {
	char pad_260[0x8]; // 0x260(0x08)

	void OnWindowHide(); // Function WTL.WTLMainMenuBase.OnWindowHide // (Native|Public) // @ game+0x18450b0
};

// Class WTL.WTLMainMenuBodyPartTypeButton
// Size: 0x5d8 (Inherited: 0x5b8)
struct UWTLMainMenuBodyPartTypeButton : UWTLCommonTypeButton {
	char pad_5B8[0x20]; // 0x5b8(0x20)
};

// Class WTL.WTLMainMenuCharacter
// Size: 0x5a0 (Inherited: 0x4c0)
struct AWTLMainMenuCharacter : ACharacter {
	struct USkeletalMeshComponent* MeshHead; // 0x4b8(0x08)
	struct USkeletalMeshComponent* MeshTorso; // 0x4c0(0x08)
	struct USkeletalMeshComponent* MeshLegs; // 0x4c8(0x08)
	struct USkeletalMeshComponent* MeshFeet; // 0x4d0(0x08)
	struct USkeletalMeshComponent* BackpackSlot; // 0x4d8(0x08)
	struct USkeletalMeshComponent* GlassesSlot; // 0x4e0(0x08)
	struct USkeletalMeshComponent* WatchesSlot; // 0x4e8(0x08)
	char Complexion; // 0x4f0(0x01)
	struct TSoftObjectPtr<USkeletalMesh> MaleRootSkeletalMesh; // 0x4f8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleRootSkeletalMesh; // 0x520(0x28)
	struct TSoftClassPtr<UObject> MaleAnimBlueprint; // 0x548(0x28)
	struct TSoftClassPtr<UObject> FemaleAnimBlueprint; // 0x570(0x28)
	char pad_599[0x7]; // 0x599(0x07)
};

// Class WTL.WTLMainMenuCharacterCreate
// Size: 0x2f0 (Inherited: 0x268)
struct UWTLMainMenuCharacterCreate : UWTLMainMenuBase {
	struct UWTLCommonCharacterRotator* ucCharacterRotator; // 0x268(0x08)
	struct UWTLMainMenuCustomization* ucCustomization; // 0x270(0x08)
	struct UPanelWidget* pwPlayerClass; // 0x278(0x08)
	struct UBorder* bClassDescription; // 0x280(0x08)
	struct UTextBlock* tbClassName; // 0x288(0x08)
	struct UImage* imgClassFullSize; // 0x290(0x08)
	struct UTextBlock* tbClassDescription; // 0x298(0x08)
	struct UWTLCommonHotkeyButton* ucBtnBack; // 0x2a0(0x08)
	struct UWTLMainMenuCharacterName* ucCharacterName; // 0x2a8(0x08)
	struct UUserWidget* ucCharacterNameWarning; // 0x2b0(0x08)
	struct UWTLCommonHotkeyButton* ucBtnCreateCharacter; // 0x2b8(0x08)
	struct UThrobber* thCharacterCreateLoader; // 0x2c0(0x08)
	char pad_2C8[0x28]; // 0x2c8(0x28)

	void OnYesBackBtnClick(); // Function WTL.WTLMainMenuCharacterCreate.OnYesBackBtnClick // (Final|Native|Private) // @ game+0x1845630
	void OnCustomizationPurchasedItemsOnCreateOrApply(); // Function WTL.WTLMainMenuCharacterCreate.OnCustomizationPurchasedItemsOnCreateOrApply // (Final|Native|Private) // @ game+0x1845610
	void OnCustomizationDataChanged(); // Function WTL.WTLMainMenuCharacterCreate.OnCustomizationDataChanged // (Final|Native|Private) // @ game+0x18456c0
	void OnCreateCharacterBtnClick(); // Function WTL.WTLMainMenuCharacterCreate.OnCreateCharacterBtnClick // (Final|Native|Private) // @ game+0x1845610
	void OnCharacterRotatorMouseButtonDown(); // Function WTL.WTLMainMenuCharacterCreate.OnCharacterRotatorMouseButtonDown // (Final|Native|Private) // @ game+0x18456f0
	void OnCharacterNameCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuCharacterCreate.OnCharacterNameCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1845420
	void OnCharacterNameCheckResponseReceived(bool Success); // Function WTL.WTLMainMenuCharacterCreate.OnCharacterNameCheckResponseReceived // (Final|Native|Private) // @ game+0x18451e0
	void OnCharacterNameChanged(struct FText& Text); // Function WTL.WTLMainMenuCharacterCreate.OnCharacterNameChanged // (Final|Native|Private|HasOutParms) // @ game+0x18452d0
	void OnBackBtnClick(); // Function WTL.WTLMainMenuCharacterCreate.OnBackBtnClick // (Final|Native|Private) // @ game+0x18456a0
};

// Class WTL.WTLMainMenuCharacterListItem
// Size: 0x11e8 (Inherited: 0x4a0)
struct UWTLMainMenuCharacterListItem : UWTLCommonSelectedItem {
	struct UBorder* bPlayerNotSet; // 0x4a0(0x08)
	struct UBorder* bSlotNotBuy; // 0x4a8(0x08)
	struct UBorder* bPlayerParameters; // 0x4b0(0x08)
	struct UImage* imgCharacterCreate; // 0x4b8(0x08)
	struct UImage* imgCharacterClass; // 0x4c0(0x08)
	struct UVerticalBox* vbState; // 0x4c8(0x08)
	struct UTextBlock* tbState; // 0x4d0(0x08)
	struct UTextBlock* tbStateDescription; // 0x4d8(0x08)
	struct UTextBlock* tbPlayerName; // 0x4e0(0x08)
	struct UTextBlock* tbPlayerClass; // 0x4e8(0x08)
	struct UTextBlock* tbLevel; // 0x4f0(0x08)
	struct UTextBlock* tbSex; // 0x4f8(0x08)
	struct UTextBlock* tbBalance; // 0x500(0x08)
	struct UHorizontalBox* hbLocationName; // 0x508(0x08)
	struct UTextBlock* tbLocationName; // 0x510(0x08)
	struct UTextBlock* tbCreationDate; // 0x518(0x08)
	struct UTextBlock* tbStrength; // 0x520(0x08)
	struct UTextBlock* tbDexterity; // 0x528(0x08)
	struct UTextBlock* tbStamina; // 0x530(0x08)
	struct UTextBlock* tbIntelligence; // 0x538(0x08)
	struct UTextBlock* tbAccuracy; // 0x540(0x08)
	struct UTextBlock* tbFortune; // 0x548(0x08)
	struct UTextBlock* tbExperience; // 0x550(0x08)
	struct UTextBlock* tbFraction; // 0x558(0x08)
	struct UWidgetSwitcher* wsFractionImage; // 0x560(0x08)
	struct UTextBlock* tbReputation; // 0x568(0x08)
	struct UProgressBar* pbStrength; // 0x570(0x08)
	struct UProgressBar* pbDexterity; // 0x578(0x08)
	struct UProgressBar* pbStamina; // 0x580(0x08)
	struct UProgressBar* pbIntelligence; // 0x588(0x08)
	struct UProgressBar* pbAccuracy; // 0x590(0x08)
	struct UProgressBar* pbFortune; // 0x598(0x08)
	struct UProgressBar* pbExperience; // 0x5a0(0x08)
	struct UProgressBar* pbReputation; // 0x5a8(0x08)
	struct UButton* btnDelete; // 0x5b0(0x08)
	struct UButton* btnCancelDelete; // 0x5b8(0x08)
	struct UButton* btnEdit; // 0x5c0(0x08)
	struct UButton* btnExchangeCredits; // 0x5c8(0x08)
	struct UTextBlock* tbBuySlotPrice; // 0x5d0(0x08)
	struct UWTLCommonButton* ucBtnBuySlot; // 0x5d8(0x08)
	char pad_5E0[0x28]; // 0x5e0(0x28)
	struct FSlateBrush NoneClassBrush; // 0x608(0x88)
	struct FSlateBrush FemaleMinerClassBrush; // 0x690(0x88)
	struct FSlateBrush FemaleHunterClassBrush; // 0x718(0x88)
	struct FSlateBrush FemaleMercenaryClassBrush; // 0x7a0(0x88)
	struct FSlateBrush FemaleEngineerClassBrush; // 0x828(0x88)
	struct FSlateBrush MaleMinerClassBrush; // 0x8b0(0x88)
	struct FSlateBrush MaleHunterClassBrush; // 0x938(0x88)
	struct FSlateBrush MaleMercenaryClassBrush; // 0x9c0(0x88)
	struct FSlateBrush MaleEngineerClassBrush; // 0xa48(0x88)
	struct FSlateBrush NormalBrush; // 0xad0(0x88)
	struct FVector2D BtnScaleVector; // 0xb58(0x08)
	struct FVector2D BorderScaleVector; // 0xb60(0x08)
	struct FLinearColor GreenColorStateText; // 0xb68(0x10)
	struct FLinearColor RedColorParam; // 0xb78(0x10)
	struct FLinearColor YellowColorParam; // 0xb88(0x10)
	struct FLinearColor GreenColorParam; // 0xb98(0x10)
	struct TSoftObjectPtr<UFMODEvent> PressedButtonSoundEvent; // 0xba8(0x28)
	struct TSoftObjectPtr<UFMODEvent> HoveredButtonSoundEvent; // 0xbd0(0x28)
	struct UWidgetAnimation* EditBtnAttentionAnimation; // 0xbf8(0x08)
	struct FVector2D EditBtnForAnimationPivot; // 0xc00(0x08)
	struct FButtonStyle EditBtnDefaultStyle; // 0xc08(0x278)
	struct FButtonStyle EditBtnForAnimationStyle; // 0xe80(0x278)
	char pad_10F8[0xf0]; // 0x10f8(0xf0)

	void OnPlayerNotSetBorderClick(); // Function WTL.WTLMainMenuCharacterListItem.OnPlayerNotSetBorderClick // (Final|Native|Private) // @ game+0x1845c50
	void OnExchangeCreditsBtnUnhovered(); // Function WTL.WTLMainMenuCharacterListItem.OnExchangeCreditsBtnUnhovered // (Final|Native|Private) // @ game+0x1845970
	void OnExchangeCreditsBtnHovered(); // Function WTL.WTLMainMenuCharacterListItem.OnExchangeCreditsBtnHovered // (Final|Native|Private) // @ game+0x18459b0
	void OnExchangeCreditsBtnClick(); // Function WTL.WTLMainMenuCharacterListItem.OnExchangeCreditsBtnClick // (Final|Native|Private) // @ game+0x1845b90
	void OnEditBtnUnhovered(); // Function WTL.WTLMainMenuCharacterListItem.OnEditBtnUnhovered // (Final|Native|Private) // @ game+0x18459f0
	void OnEditBtnHovered(); // Function WTL.WTLMainMenuCharacterListItem.OnEditBtnHovered // (Final|Native|Private) // @ game+0x1845a30
	void OnEditBtnClick(); // Function WTL.WTLMainMenuCharacterListItem.OnEditBtnClick // (Final|Native|Private) // @ game+0x1845bc0
	void OnDeleteBtnUnhovered(); // Function WTL.WTLMainMenuCharacterListItem.OnDeleteBtnUnhovered // (Final|Native|Private) // @ game+0x1845af0
	void OnDeleteBtnHovered(); // Function WTL.WTLMainMenuCharacterListItem.OnDeleteBtnHovered // (Final|Native|Private) // @ game+0x1845b30
	void OnDeleteBtnClick(); // Function WTL.WTLMainMenuCharacterListItem.OnDeleteBtnClick // (Final|Native|Private) // @ game+0x1845c20
	void OnCancelDeleteBtnUnhovered(); // Function WTL.WTLMainMenuCharacterListItem.OnCancelDeleteBtnUnhovered // (Final|Native|Private) // @ game+0x1845a70
	void OnCancelDeleteBtnHovered(); // Function WTL.WTLMainMenuCharacterListItem.OnCancelDeleteBtnHovered // (Final|Native|Private) // @ game+0x1845ab0
	void OnCancelDeleteBtnClick(); // Function WTL.WTLMainMenuCharacterListItem.OnCancelDeleteBtnClick // (Final|Native|Private) // @ game+0x1845bf0
	void OnBuySlotBtnClicked(); // Function WTL.WTLMainMenuCharacterListItem.OnBuySlotBtnClicked // (Final|Native|Private) // @ game+0x1845940
	void OnButtonPressed(); // Function WTL.WTLMainMenuCharacterListItem.OnButtonPressed // (Final|Native|Private) // @ game+0x1845b70
	void OnBackgroundBorderDoubleClick(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLMainMenuCharacterListItem.OnBackgroundBorderDoubleClick // (Final|Native|Private|HasOutParms) // @ game+0x1845ca0
};

// Class WTL.WTLMainMenuCharacterName
// Size: 0x348 (Inherited: 0x260)
struct UWTLMainMenuCharacterName : UUserWidget {
	struct UWTLMainMenuTextBox* ucTbCharacterName; // 0x260(0x08)
	struct UWidgetSwitcher* wsCharacterNameValidation; // 0x268(0x08)
	char pad_270[0x78]; // 0x270(0x78)
	struct TSoftObjectPtr<UFMODEvent> NotValidSoundEvent; // 0x2e8(0x28)
	struct TSoftObjectPtr<UFMODEvent> ValidSoundEvent; // 0x310(0x28)
	char pad_338[0x10]; // 0x338(0x10)

	void OnTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuCharacterName.OnTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x18468d0
	void OnTextBoxTextChanged(struct FText& Text); // Function WTL.WTLMainMenuCharacterName.OnTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x18467a0
	void OnSendCheckCharacterNameRequest(); // Function WTL.WTLMainMenuCharacterName.OnSendCheckCharacterNameRequest // (Final|Native|Private) // @ game+0x1846780
	void OnCheckCharacterNameAvailableResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuCharacterName.OnCheckCharacterNameAvailableResponse // (Final|Native|Private|HasOutParms) // @ game+0x1846680
};

// Class WTL.WTLMainMenuCharacterSelect
// Size: 0x3f0 (Inherited: 0x268)
struct UWTLMainMenuCharacterSelect : UWTLMainMenuBase {
	struct UTextBlock* tbServerName; // 0x268(0x08)
	struct UTextBlock* tbCharactersCount; // 0x270(0x08)
	struct UTextBlock* tbCharactersMaxCount; // 0x278(0x08)
	struct UScrollBox* sbCharactersList; // 0x280(0x08)
	struct UWTLCommonHotkeyButton* ucBtnBack; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnPlay; // 0x290(0x08)
	struct UThrobber* thCharactersListLoader; // 0x298(0x08)
	struct UThrobber* thEnterGameLoader; // 0x2a0(0x08)
	struct UCanvasPanel* cpCreditsExchangeWindow; // 0x2a8(0x08)
	struct UTextBlock* tbCharacterNameToExchangeCredits; // 0x2b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbCreditsToExchange; // 0x2b8(0x08)
	struct UTextBlock* tbCreditsToMoneyRate; // 0x2c0(0x08)
	struct UHorizontalBox* hbExchangedMoney; // 0x2c8(0x08)
	struct UTextBlock* tbExchangedMoney; // 0x2d0(0x08)
	struct UWTLCommonMessageDialogButton* ucExchangeCreditsBtn; // 0x2d8(0x08)
	struct UWTLCommonMessageDialogButton* ucExchangeCreditsCancelBtn; // 0x2e0(0x08)
	struct UWTLCommonStoreButton* ucStoreButton; // 0x2e8(0x08)
	char pad_2F0[0xb0]; // 0x2f0(0xb0)
	struct TSoftClassPtr<UObject> MainMenuCharacterListItemClass; // 0x3a0(0x28)
	struct TSoftObjectPtr<UFMODEvent> BuyCharacterSlotSoundEvent; // 0x3c8(0x28)

	void OnYesDeleteBtnClick(); // Function WTL.WTLMainMenuCharacterSelect.OnYesDeleteBtnClick // (Final|Native|Private) // @ game+0x1847540
	void OnYesCancelDeleteBtnClick(); // Function WTL.WTLMainMenuCharacterSelect.OnYesCancelDeleteBtnClick // (Final|Native|Private) // @ game+0x1847420
	void OnTopUpCredits(); // Function WTL.WTLMainMenuCharacterSelect.OnTopUpCredits // (Final|Native|Private) // @ game+0x1847800
	void OnStoreItemsUpdated(struct TArray<struct FWTLStoreItem>& StoreItems); // Function WTL.WTLMainMenuCharacterSelect.OnStoreItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1846d90
	void OnStoreBtnClick(); // Function WTL.WTLMainMenuCharacterSelect.OnStoreBtnClick // (Final|Native|Private) // @ game+0x1847560
	void OnPlayBtnClick(); // Function WTL.WTLMainMenuCharacterSelect.OnPlayBtnClick // (Final|Native|Private) // @ game+0x18475a0
	void OnExchangeCreditsErrorHide(); // Function WTL.WTLMainMenuCharacterSelect.OnExchangeCreditsErrorHide // (Final|Native|Private) // @ game+0x1846fc0
	void OnExchangeCreditsCancelBtnClicked(); // Function WTL.WTLMainMenuCharacterSelect.OnExchangeCreditsCancelBtnClicked // (Final|Native|Private) // @ game+0x1846ff0
	void OnExchangeCreditsBtnClicked(); // Function WTL.WTLMainMenuCharacterSelect.OnExchangeCreditsBtnClicked // (Final|Native|Private) // @ game+0x1847030
	void OnDeleteCharacterCountdown(); // Function WTL.WTLMainMenuCharacterSelect.OnDeleteCharacterCountdown // (Final|Native|Private) // @ game+0x1847840
	void OnCreditsToExchangeTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuCharacterSelect.OnCreditsToExchangeTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1847050
	void OnCreditsToExchangeTextBoxChanged(struct FText& Text); // Function WTL.WTLMainMenuCharacterSelect.OnCreditsToExchangeTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x1847280
	void OnConfirmationWindowHide(); // Function WTL.WTLMainMenuCharacterSelect.OnConfirmationWindowHide // (Final|Native|Private) // @ game+0x18473f0
	void OnCancelWaitingSetActiveCharacterResponse(); // Function WTL.WTLMainMenuCharacterSelect.OnCancelWaitingSetActiveCharacterResponse // (Final|Native|Private) // @ game+0x18473a0
	void OnBuyCharacterSlotResult(bool Success); // Function WTL.WTLMainMenuCharacterSelect.OnBuyCharacterSlotResult // (Final|Native|Private) // @ game+0x18475e0
	void OnBuyCharacterSlotConfirmed(); // Function WTL.WTLMainMenuCharacterSelect.OnBuyCharacterSlotConfirmed // (Final|Native|Private) // @ game+0x18476c0
	void OnBackBtnClick(); // Function WTL.WTLMainMenuCharacterSelect.OnBackBtnClick // (Final|Native|Private) // @ game+0x18475c0
	void OnAccountInventoryItemsUpdated(struct TArray<struct FWTLAccountInventoryItem>& AccountInventoryItems); // Function WTL.WTLMainMenuCharacterSelect.OnAccountInventoryItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1846bd0
};

// Class WTL.WTLMainMenuCharacterSelectToActionItem
// Size: 0x438 (Inherited: 0x400)
struct UWTLMainMenuCharacterSelectToActionItem : UWTLCommonHoveredItem {
	struct UBorder* bHovered; // 0x400(0x08)
	struct UTextBlock* tbCharacterName; // 0x408(0x08)
	struct UTextBlock* tbCharacterClass; // 0x410(0x08)
	char pad_418[0x20]; // 0x418(0x20)
};

// Class WTL.WTLMainMenuCharacterSelectToActionWindow
// Size: 0x4e8 (Inherited: 0x288)
struct UWTLMainMenuCharacterSelectToActionWindow : UWTLCommonWindowBase {
	struct UVerticalBox* vbCharacters; // 0x288(0x08)
	char pad_290[0x120]; // 0x290(0x120)
	struct TSoftClassPtr<UObject> CharacterSelectToActionItemWidgetClass; // 0x3b0(0x28)
	struct FSlateBrush TopItemBorderBrush; // 0x3d8(0x88)
	struct FSlateBrush BottomItemBorderBrush; // 0x460(0x88)

	void OnCharacterSelected(uint64_t CharacterID); // Function WTL.WTLMainMenuCharacterSelectToActionWindow.OnCharacterSelected // (Final|Native|Private) // @ game+0x1848190
};

// Class WTL.WTLMainMenuChooseAccountType
// Size: 0x290 (Inherited: 0x260)
struct UWTLMainMenuChooseAccountType : UUserWidget {
	struct UButton* btnClose; // 0x260(0x08)
	struct UButton* btnCreateNew; // 0x268(0x08)
	struct UButton* btnLinkExisting; // 0x270(0x08)
	char pad_278[0x18]; // 0x278(0x18)

	void OnLinkExistingBtnClicked(); // Function WTL.WTLMainMenuChooseAccountType.OnLinkExistingBtnClicked // (Final|Native|Private) // @ game+0x1848390
	void OnCreateNewBtnClicked(); // Function WTL.WTLMainMenuChooseAccountType.OnCreateNewBtnClicked // (Final|Native|Private) // @ game+0x18483d0
	void OnCreateNewAccountConfirmed(); // Function WTL.WTLMainMenuChooseAccountType.OnCreateNewAccountConfirmed // (Final|Native|Private) // @ game+0x18483b0
	void OnConnectedToServer(); // Function WTL.WTLMainMenuChooseAccountType.OnConnectedToServer // (Final|Native|Private) // @ game+0x1848370
	void OnCloseBtnClicked(); // Function WTL.WTLMainMenuChooseAccountType.OnCloseBtnClicked // (Final|Native|Private) // @ game+0x18483f0
};

// Class WTL.WTLMainMenuChooseLanguage
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLMainMenuChooseLanguage : UUserWidget {
	struct UImage* imgLanguage; // 0x260(0x08)
	struct UWTLOptionsParameterSwitcher* psLanguage; // 0x268(0x08)
	struct UWTLCommonHotkeyButton* ucBtnOK; // 0x270(0x08)
	char pad_278[0x30]; // 0x278(0x30)
	struct TArray<struct FWTLLanguageInfo> LanguageInfo; // 0x2a8(0x10)

	void OnOKBtnClicked(); // Function WTL.WTLMainMenuChooseLanguage.OnOKBtnClicked // (Final|Native|Private) // @ game+0x1848d40
	void OnLanguageChange(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLMainMenuChooseLanguage.OnLanguageChange // (Final|Native|Private) // @ game+0x1848bc0
	void ChooseLanguageConfirm(); // Function WTL.WTLMainMenuChooseLanguage.ChooseLanguageConfirm // (Final|Native|Private) // @ game+0x1848d60
};

// Class WTL.WTLMainMenuCredits
// Size: 0x340 (Inherited: 0x260)
struct UWTLMainMenuCredits : UUserWidget {
	struct UScrollBox* sbCredits; // 0x260(0x08)
	struct URichTextBlock* rtbCredits; // 0x268(0x08)
	struct UWidgetSwitcher* wsCreditsPlayerButtons; // 0x270(0x08)
	struct UButton* btnCreditsPlay; // 0x278(0x08)
	struct UButton* btnCreditsPause; // 0x280(0x08)
	struct UWTLCommonButton* ucBtnCreditsClose; // 0x288(0x08)
	struct UTextBlock* tbTime; // 0x290(0x08)
	char pad_298[0x40]; // 0x298(0x40)
	struct TSoftObjectPtr<UFMODEvent> CreditsSoundtrackSoundEvent; // 0x2d8(0x28)
	float CreditsSoundtrackDuration; // 0x300(0x04)
	float CreditsSpeed; // 0x304(0x04)
	bool bDebugIsShowTime; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct FText RussianCreditsLocalization; // 0x310(0x18)
	struct FText DeutschCreditsLocalization; // 0x328(0x18)

	void OnCreditsScrolled(float CurrentOffset); // Function WTL.WTLMainMenuCredits.OnCreditsScrolled // (Final|Native|Private) // @ game+0x1848ee0
	void OnCreditsPlay(); // Function WTL.WTLMainMenuCredits.OnCreditsPlay // (Final|Native|Private) // @ game+0x1848ec0
	void OnCreditsPause(); // Function WTL.WTLMainMenuCredits.OnCreditsPause // (Final|Native|Private) // @ game+0x1848ea0
	void OnCreditsClose(); // Function WTL.WTLMainMenuCredits.OnCreditsClose // (Final|Native|Private) // @ game+0x1848e80
};

// Class WTL.WTLMainMenuCreditsAmountWithTopUp
// Size: 0x290 (Inherited: 0x260)
struct UWTLMainMenuCreditsAmountWithTopUp : UUserWidget {
	struct UWTLCommonCreditsAmountWithTopUp* ucCreditsAmountWithTopUp; // 0x260(0x08)
	struct UWTLCommonPremiumButton* ucPremiumButton; // 0x268(0x08)
	struct UWTLCommonButton* ucCodeButton; // 0x270(0x08)
	char pad_278[0x18]; // 0x278(0x18)

	void OnCodeActivateButtonPressed(); // Function WTL.WTLMainMenuCreditsAmountWithTopUp.OnCodeActivateButtonPressed // (Final|Native|Private) // @ game+0x18491f0
};

// Class WTL.WTLMainMenuCustomization
// Size: 0x1890 (Inherited: 0x260)
struct UWTLMainMenuCustomization : UUserWidget {
	char pad_260[0x38]; // 0x260(0x38)
	struct UWTLCommonButton* ucBtnZoomOut; // 0x298(0x08)
	struct UHorizontalBox* hbSex; // 0x2a0(0x08)
	struct UWTLOptionsParameterSwitcher* ucBodyTypeSwitcher; // 0x2a8(0x08)
	struct UWTLCommonColorButton* ucHairColorBtn; // 0x2b0(0x08)
	struct UWTLCommonColorButton* ucSkinColorBtn; // 0x2b8(0x08)
	struct UPanelWidget* pwBodyPartsTypes; // 0x2c0(0x08)
	struct UWidgetSwitcher* wsBodyPartParameters; // 0x2c8(0x08)
	struct UVerticalBox* vbItems; // 0x2d0(0x08)
	struct UScrollBox* sbItems; // 0x2d8(0x08)
	struct UWTLCommonButton* ucPreviousItemsBtn; // 0x2e0(0x08)
	struct UWTLCommonButton* ucNextItemsBtn; // 0x2e8(0x08)
	struct UHorizontalBox* hbHairColor; // 0x2f0(0x08)
	struct UHorizontalBox* hbMaterialsTabBox; // 0x2f8(0x08)
	struct UVerticalBox* vbMaterialColorsScalars; // 0x300(0x08)
	struct UWTLCommonColorPresets* ucColorPresets; // 0x308(0x08)
	struct UHorizontalBox* hbGlassesOpacity; // 0x310(0x08)
	struct UWTLOptionsParameterSliderPercent* psGlassesOpacity; // 0x318(0x08)
	struct UWTLCommonButton* ucBtnRandomize; // 0x320(0x08)
	char pad_328[0x28]; // 0x328(0x28)
	struct UWTLMainMenuBodyPartTypeButton* m_BackpackBodyPartTypeButton; // 0x350(0x08)
	char pad_358[0xeb0]; // 0x358(0xeb0)
	struct UWTLMainMenuMaterialColorScalar* m_CurrentMaterialColorScalar; // 0x1208(0x08)
	char pad_1210[0xc0]; // 0x1210(0xc0)
	struct TSoftClassPtr<UObject> BodyPartTypeButtonWidgetClass; // 0x12d0(0x28)
	struct TSoftClassPtr<UObject> ItemWidgetClass; // 0x12f8(0x28)
	struct TSoftClassPtr<UObject> MaterialsTabButtonWidgetClass; // 0x1320(0x28)
	struct TSoftClassPtr<UObject> MaterialColorScalarWidgetClass; // 0x1348(0x28)
	struct FButtonStyle SexNormalButtonStyle; // 0x1370(0x278)
	struct FButtonStyle SexSelectedButtonStyle; // 0x15e8(0x278)
	struct FLinearColor SexNormalSlateColor; // 0x1860(0x10)
	struct FLinearColor SexSelectedSlateColor; // 0x1870(0x10)
	struct TArray<struct FWTLBodyPartButtonStyle> BodyPartsButtonStyles; // 0x1880(0x10)

	void OnZoomOutBtnReleased(); // Function WTL.WTLMainMenuCustomization.OnZoomOutBtnReleased // (Final|Native|Private) // @ game+0x184ae90
	void OnZoomOutBtnPressed(); // Function WTL.WTLMainMenuCustomization.OnZoomOutBtnPressed // (Final|Native|Private) // @ game+0x184aeb0
	void OnWantToBuyNotPurchasedItemsConfirmed(); // Function WTL.WTLMainMenuCustomization.OnWantToBuyNotPurchasedItemsConfirmed // (Final|Native|Private) // @ game+0x18497c0
	void OnTopUpCredits(); // Function WTL.WTLMainMenuCustomization.OnTopUpCredits // (Final|Native|Private) // @ game+0x184a180
	void OnSkinColorBtnClick(struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLMainMenuCustomization.OnSkinColorBtnClick // (Final|Native|Private|HasOutParms) // @ game+0x184a850
	void OnRandomizeBtnClicked(); // Function WTL.WTLMainMenuCustomization.OnRandomizeBtnClicked // (Final|Native|Private) // @ game+0x18497e0
	void OnPurchaseStoreItems(struct FWTLInAppPurchaseResult& InAppPurchaseResult); // Function WTL.WTLMainMenuCustomization.OnPurchaseStoreItems // (Final|Native|Private|HasOutParms) // @ game+0x1849620
	void OnPreviousItemsButtonClicked(); // Function WTL.WTLMainMenuCustomization.OnPreviousItemsButtonClicked // (Final|Native|Private) // @ game+0x184a4e0
	void OnNextItemsButtonClicked(); // Function WTL.WTLMainMenuCustomization.OnNextItemsButtonClicked // (Final|Native|Private) // @ game+0x184a4c0
	void OnMaterialScalarItemValueChanged(char CurrentScalarValue); // Function WTL.WTLMainMenuCustomization.OnMaterialScalarItemValueChanged // (Final|Native|Private) // @ game+0x1849b50
	void OnMaterialsBtnClicked(char TabIndex); // Function WTL.WTLMainMenuCustomization.OnMaterialsBtnClicked // (Final|Native|Private) // @ game+0x1849ef0
	void OnMaterialColorButtonClicked(struct UWTLMainMenuMaterialColorScalar* MaterialColorScalar, struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLMainMenuCustomization.OnMaterialColorButtonClicked // (Final|Native|Private|HasOutParms) // @ game+0x1849c40
	void OnItemSwitcherValueChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLMainMenuCustomization.OnItemSwitcherValueChanged // (Final|Native|Private) // @ game+0x1849fc0
	void OnItemsScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLMainMenuCustomization.OnItemsScrollBoxScrolled // (Final|Native|Private) // @ game+0x184a500
	void OnItemClicked(int32_t ItemPartID); // Function WTL.WTLMainMenuCustomization.OnItemClicked // (Final|Native|Private) // @ game+0x184a3c0
	void OnItemBuyConfirmed(); // Function WTL.WTLMainMenuCustomization.OnItemBuyConfirmed // (Final|Native|Private) // @ game+0x184a230
	void OnItemBuyClicked(int32_t ItemPartID, struct UWTLMainMenuCustomizationItem* ItemToBuy); // Function WTL.WTLMainMenuCustomization.OnItemBuyClicked // (Final|Native|Private) // @ game+0x184a260
	void OnHairColorBtnClick(struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLMainMenuCustomization.OnHairColorBtnClick // (Final|Native|Private|HasOutParms) // @ game+0x184aaa0
	void OnGlassesOpacitySliderValueChanged(float CurrentValue); // Function WTL.WTLMainMenuCustomization.OnGlassesOpacitySliderValueChanged // (Final|Native|Private) // @ game+0x1849800
	void OnColorPicked(enum class EWTLCustomizationColorPresetType ColorPresetType, int32_t Number, struct FLinearColor& Color, struct FLinearColor& PreviewColor); // Function WTL.WTLMainMenuCustomization.OnColorPicked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x18498d0
	void OnBodyTypeValueChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLMainMenuCustomization.OnBodyTypeValueChanged // (Final|Native|Private) // @ game+0x184acf0
	void OnBodyPartTypeButtonClicked(enum class EWTLCharacterCustomizationPart BodyPartType); // Function WTL.WTLMainMenuCustomization.OnBodyPartTypeButtonClicked // (Final|Native|Private) // @ game+0x184a770
	void OnBodyPartSwitcherValueChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLMainMenuCustomization.OnBodyPartSwitcherValueChanged // (Final|Native|Private) // @ game+0x184a5d0
	void OnAccountInventoryItemsUpdated(struct TArray<struct FWTLAccountInventoryItem>& AccountInventoryItems); // Function WTL.WTLMainMenuCustomization.OnAccountInventoryItemsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x1849460
	void ChangeSex(enum class EWTLSex NewSex); // Function WTL.WTLMainMenuCustomization.ChangeSex // (Final|Native|Private) // @ game+0x184aed0
};

// Class WTL.WTLMainMenuCustomizationEdit
// Size: 0x2b8 (Inherited: 0x268)
struct UWTLMainMenuCustomizationEdit : UWTLMainMenuBase {
	struct UWTLCommonCharacterRotator* ucCharacterRotator; // 0x268(0x08)
	struct UWTLMainMenuCustomization* ucCustomization; // 0x270(0x08)
	struct UWTLCommonHotkeyButton* ucBtnBack; // 0x278(0x08)
	struct UWTLMainMenuCharacterName* ucCharacterName; // 0x280(0x08)
	struct UUserWidget* ucCharacterNameWarning; // 0x288(0x08)
	struct UWTLCommonHotkeyButton* ucBtnApplyCustomization; // 0x290(0x08)
	struct UThrobber* thApplyCustomizationLoader; // 0x298(0x08)
	char pad_2A0[0x18]; // 0x2a0(0x18)

	void OnYesBackBtnClick(); // Function WTL.WTLMainMenuCustomizationEdit.OnYesBackBtnClick // (Final|Native|Private) // @ game+0x1845630
	void OnUpdateCharacterCustomizationResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuCustomizationEdit.OnUpdateCharacterCustomizationResponse // (Final|Native|Private|HasOutParms) // @ game+0x184b4c0
	void OnCustomizationPurchasedItemsOnCreateOrApply(); // Function WTL.WTLMainMenuCustomizationEdit.OnCustomizationPurchasedItemsOnCreateOrApply // (Final|Native|Private) // @ game+0x184b5c0
	void OnCustomizationDataChanged(); // Function WTL.WTLMainMenuCustomizationEdit.OnCustomizationDataChanged // (Final|Native|Private) // @ game+0x184ba50
	void OnCharacterRotatorMouseButtonDown(); // Function WTL.WTLMainMenuCustomizationEdit.OnCharacterRotatorMouseButtonDown // (Final|Native|Private) // @ game+0x18456f0
	void OnCharacterNameCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuCustomizationEdit.OnCharacterNameCommitted // (Final|Native|Private|HasOutParms) // @ game+0x184b840
	void OnCharacterNameCheckResponseReceived(bool Success); // Function WTL.WTLMainMenuCustomizationEdit.OnCharacterNameCheckResponseReceived // (Final|Native|Private) // @ game+0x184b600
	void OnCharacterNameChanged(struct FText& Text); // Function WTL.WTLMainMenuCustomizationEdit.OnCharacterNameChanged // (Final|Native|Private|HasOutParms) // @ game+0x184b6f0
	void OnBackBtnClick(); // Function WTL.WTLMainMenuCustomizationEdit.OnBackBtnClick // (Final|Native|Private) // @ game+0x184ba30
	void OnApplyCustomizationConfirm(); // Function WTL.WTLMainMenuCustomizationEdit.OnApplyCustomizationConfirm // (Final|Native|Private) // @ game+0x184b5c0
	void OnApplyCustomizationBtnClick(); // Function WTL.WTLMainMenuCustomizationEdit.OnApplyCustomizationBtnClick // (Final|Native|Private) // @ game+0x184b5e0
};

// Class WTL.WTLMainMenuCustomizationItem
// Size: 0x5c0 (Inherited: 0x4a0)
struct UWTLMainMenuCustomizationItem : UWTLCommonSelectedItem {
	struct UWidgetSwitcher* wsImage; // 0x4a0(0x08)
	struct UImage* imgItem; // 0x4a8(0x08)
	struct UImage* imgHidden; // 0x4b0(0x08)
	struct UBorder* bDLC; // 0x4b8(0x08)
	struct UBorder* bPurchasedStatus; // 0x4c0(0x08)
	struct UBorder* bDiscount; // 0x4c8(0x08)
	struct UTextBlock* tbDiscount; // 0x4d0(0x08)
	struct UBorder* bPurchased; // 0x4d8(0x08)
	struct UPanelWidget* pwPrice; // 0x4e0(0x08)
	struct UTextBlock* tbCreditsPrice; // 0x4e8(0x08)
	struct UBorder* bBuyBtn; // 0x4f0(0x08)
	struct UButton* btnBuy; // 0x4f8(0x08)
	char pad_500[0x88]; // 0x500(0x88)
	struct UWidgetAnimation* ShowPurchasedAnimation; // 0x588(0x08)
	struct FLinearColor PurchasedStatusBrushColor; // 0x590(0x10)
	struct FLinearColor NotPurchasedStatusBrushColor; // 0x5a0(0x10)
	struct FLinearColor CurrentItemBorderBrushColor; // 0x5b0(0x10)

	void OnShowPurchasedAnimationFinished(); // Function WTL.WTLMainMenuCustomizationItem.OnShowPurchasedAnimationFinished // (Final|Native|Private) // @ game+0x184be60
	void OnBuyBtnClicked(); // Function WTL.WTLMainMenuCustomizationItem.OnBuyBtnClicked // (Final|Native|Private) // @ game+0x184be40
};

// Class WTL.WTLMainMenuErrorNotificationItem
// Size: 0x2a8 (Inherited: 0x280)
struct UWTLMainMenuErrorNotificationItem : UWTLCommonNotificationItem {
	struct TSoftObjectPtr<UFMODEvent> NotificationSoundEvent; // 0x280(0x28)
};

// Class WTL.WTLMainMenuGameVersionInfo
// Size: 0x270 (Inherited: 0x260)
struct UWTLMainMenuGameVersionInfo : UUserWidget {
	struct UTextBlock* tbDevelopmentStage; // 0x260(0x08)
	struct UTextBlock* tbVersion; // 0x268(0x08)
};

// Class WTL.WTLMainMenuLevelScriptActor
// Size: 0x6d0 (Inherited: 0x650)
struct AWTLMainMenuLevelScriptActor : AWTLLevelScriptActor {
	char pad_650[0x78]; // 0x650(0x78)
	struct UWTLNetworkController* NetworkController; // 0x6c8(0x08)

	void SetMainCharacterHiddenInGame(bool bNewHidden); // Function WTL.WTLMainMenuLevelScriptActor.SetMainCharacterHiddenInGame // (Final|Native|Protected|BlueprintCallable) // @ game+0x184c130
	void ResetCharacterRotation(); // Function WTL.WTLMainMenuLevelScriptActor.ResetCharacterRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x184c110
	void OnSteamShutdown(); // Function WTL.WTLMainMenuLevelScriptActor.OnSteamShutdown // (Final|Native|Private) // @ game+0x184d0e0
	void OnMasterServerConnectionError(); // Function WTL.WTLMainMenuLevelScriptActor.OnMasterServerConnectionError // (Final|Native|Private) // @ game+0x184d100
	void NetworkOnAccountInventoryItemsEvent(struct FWTLEvent& Event); // Function WTL.WTLMainMenuLevelScriptActor.NetworkOnAccountInventoryItemsEvent // (Final|Native|Private|HasOutParms) // @ game+0x184c350
	void NetworkControllerOnUpdateCharacterCustomizationResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnUpdateCharacterCustomizationResponse // (Final|Native|Private|HasOutParms) // @ game+0x184c6e0
	void NetworkControllerOnSteamAuthorizationResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnSteamAuthorizationResponse // (Final|Native|Private|HasOutParms) // @ game+0x184cfe0
	void NetworkControllerOnSetActiveCharacterResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnSetActiveCharacterResponse // (Final|Native|Private|HasOutParms) // @ game+0x184cbe0
	void NetworkControllerOnGetStoreItemsResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnGetStoreItemsResponse // (Final|Native|Private|HasOutParms) // @ game+0x184c4f0
	void NetworkControllerOnGetCharacterListResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnGetCharacterListResponse // (Final|Native|Private|HasOutParms) // @ game+0x184cce0
	void NetworkControllerOnGetArenaLocationListResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnGetArenaLocationListResponse // (Final|Native|Private|HasOutParms) // @ game+0x184cde0
	void NetworkControllerOnDisconnectOnConnectCanceled(); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnDisconnectOnConnectCanceled // (Final|Native|Private) // @ game+0x184d120
	void NetworkControllerOnDisconnected(); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnDisconnected // (Final|Native|Private) // @ game+0x184d140
	void NetworkControllerOnDeleteCharacterResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnDeleteCharacterResponse // (Final|Native|Private|HasOutParms) // @ game+0x184c9e0
	void NetworkControllerOnCreateCharacterResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnCreateCharacterResponse // (Final|Native|Private|HasOutParms) // @ game+0x184cae0
	void NetworkControllerOnConnectError(struct FString ErrorInfo); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnConnectError // (Final|Native|Private) // @ game+0x184d160
	void NetworkControllerOnConnected(); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnConnected // (Final|Native|Private) // @ game+0xe77850
	void NetworkControllerOnClientInfoResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnClientInfoResponse // (Final|Native|Private|HasOutParms) // @ game+0x184cee0
	void NetworkControllerOnChangeCreditsToMoneyResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnChangeCreditsToMoneyResponse // (Final|Native|Private|HasOutParms) // @ game+0x184c7e0
	void NetworkControllerOnChangeCharacterNameResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnChangeCharacterNameResponse // (Final|Native|Private|HasOutParms) // @ game+0x184c5e0
	void NetworkControllerOnCancelDeleteCharacterResponse(struct FWTLResponse& Response); // Function WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnCancelDeleteCharacterResponse // (Final|Native|Private|HasOutParms) // @ game+0x184c8e0
	void MoveCameraToOriginalPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToOriginalPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterWatchesPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterWatchesPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterTorsoPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterTorsoPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterLegsPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterLegsPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterHeadPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterHeadPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterFeetPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterFeetPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterCommonPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterCommonPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveCameraToCharacterBackpackPoint(); // Function WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterBackpackPoint // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMainMenuLocalizationListItem
// Size: 0x268 (Inherited: 0x260)
struct UWTLMainMenuLocalizationListItem : UUserWidget {
	struct UTextBlock* tbCulture; // 0x260(0x08)
};

// Class WTL.WTLMainMenuMaterialColorItem
// Size: 0x298 (Inherited: 0x260)
struct UWTLMainMenuMaterialColorItem : UUserWidget {
	struct UTextBlock* tbColorName; // 0x260(0x08)
	struct UWTLCommonColorButton* ucColorBtn; // 0x268(0x08)
	char pad_270[0x28]; // 0x270(0x28)

	void OnColorPickerBtnClick(struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLMainMenuMaterialColorItem.OnColorPickerBtnClick // (Final|Native|Private|HasOutParms) // @ game+0x184dfb0
};

// Class WTL.WTLMainMenuMaterialColorScalar
// Size: 0x340 (Inherited: 0x2c8)
struct UWTLMainMenuMaterialColorScalar : UWTLCommonSwitcher {
	struct UBorder* bScalarTexture; // 0x2c8(0x08)
	struct UImage* imgScalarTexture; // 0x2d0(0x08)
	struct UWTLCommonColorButton* ucColorBtn; // 0x2d8(0x08)
	char pad_2E0[0x38]; // 0x2e0(0x38)
	struct TSoftObjectPtr<UTexture2D> ColorScalarTexture; // 0x318(0x28)

	void OnColorBtnClicked(struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLMainMenuMaterialColorScalar.OnColorBtnClicked // (Final|Native|Private|HasOutParms) // @ game+0x184e390
};

// Class WTL.WTLMainMenuMaterialScalarItem
// Size: 0x318 (Inherited: 0x2c8)
struct UWTLMainMenuMaterialScalarItem : UWTLCommonSwitcher {
	struct UImage* imgScalarTexture; // 0x2c8(0x08)
	char pad_2D0[0x20]; // 0x2d0(0x20)
	struct TSoftObjectPtr<UTexture2D> ColorScalarTexture; // 0x2f0(0x28)
};

// Class WTL.WTLMainMenuMaterialsTabButton
// Size: 0x12c8 (Inherited: 0x12c8)
struct UWTLMainMenuMaterialsTabButton : UWTLCommonTabButton {
};

// Class WTL.WTLMainMenuMoviePlayer
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLMainMenuMoviePlayer : UUserWidget {
	char pad_260[0x10]; // 0x260(0x10)
	struct TSoftObjectPtr<UFMODEvent> m_MovieEvent; // 0x270(0x28)
	char pad_298[0x20]; // 0x298(0x20)

	void OnStopMovie(); // Function WTL.WTLMainMenuMoviePlayer.OnStopMovie // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnPlayMovie(); // Function WTL.WTLMainMenuMoviePlayer.OnPlayMovie // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void Hide(); // Function WTL.WTLMainMenuMoviePlayer.Hide // (Final|Native|Public|BlueprintCallable) // @ game+0x184e980
	struct FString GetCurrentCulture(); // Function WTL.WTLMainMenuMoviePlayer.GetCurrentCulture // (Final|Native|Public|BlueprintCallable) // @ game+0x184e860
};

// Class WTL.WTLMainMenuPlayerClass
// Size: 0x478 (Inherited: 0x340)
struct UWTLMainMenuPlayerClass : UWTLCommonButton {
	struct UImage* imgSelectedBorder; // 0x340(0x08)
	struct UWidgetSwitcher* wsSex; // 0x348(0x08)
	struct UWidgetSwitcher* wsFemalePlayerClass; // 0x350(0x08)
	struct UWidgetSwitcher* wsMalePlayerClass; // 0x358(0x08)
	char pad_360[0x50]; // 0x360(0x50)
	enum class EWTLCharacterClass PlayerClass; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	struct FLinearColor DefaultClassColor; // 0x3b4(0x10)
	struct FLinearColor HoveredClassColor; // 0x3c4(0x10)
	struct FLinearColor SelectedClassColor; // 0x3d4(0x10)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct FText DescriptionText; // 0x3e8(0x18)
	struct TSoftClassPtr<UObject> PlayerClassDescriptionWidgetClass; // 0x400(0x28)
	struct TSoftObjectPtr<UTexture2D> FemaleClassFullSizeImage; // 0x428(0x28)
	struct TSoftObjectPtr<UTexture2D> MaleClassFullSizeImage; // 0x450(0x28)
};

// Class WTL.WTLMainMenuPlayerClassDescription
// Size: 0x278 (Inherited: 0x260)
struct UWTLMainMenuPlayerClassDescription : UUserWidget {
	struct UTextBlock* tbClassName; // 0x260(0x08)
	struct UImage* imgClassFullSize; // 0x268(0x08)
	struct UTextBlock* tbClassDescription; // 0x270(0x08)
};

// Class WTL.WTLMainMenuPlayerClassTooltip
// Size: 0x270 (Inherited: 0x260)
struct UWTLMainMenuPlayerClassTooltip : UUserWidget {
	struct UTextBlock* tbPlayerClassTitle; // 0x260(0x08)
	struct UTextBlock* tbPlayerClassDescription; // 0x268(0x08)
};

// Class WTL.WTLMainMenuServerAuthorization
// Size: 0x2b0 (Inherited: 0x260)
struct UWTLMainMenuServerAuthorization : UUserWidget {
	struct UButton* btnClose; // 0x260(0x08)
	struct UWTLMainMenuTextBox* ucTbLogin; // 0x268(0x08)
	struct UWTLMainMenuTextBox* ucTbPassword; // 0x270(0x08)
	struct UButton* btnShowPassword; // 0x278(0x08)
	struct UTextBlock* tbIncorrectSymbols; // 0x280(0x08)
	struct UWTLCommonHotkeyButton* ucBtnAuthorize; // 0x288(0x08)
	char pad_290[0x20]; // 0x290(0x20)

	void OnShowPasswordBtnReleased(); // Function WTL.WTLMainMenuServerAuthorization.OnShowPasswordBtnReleased // (Final|Native|Private) // @ game+0x184f700
	void OnShowPasswordBtnPressed(); // Function WTL.WTLMainMenuServerAuthorization.OnShowPasswordBtnPressed // (Final|Native|Private) // @ game+0x184f740
	void OnSavePasswordConfirmed(); // Function WTL.WTLMainMenuServerAuthorization.OnSavePasswordConfirmed // (Final|Native|Private) // @ game+0x184efa0
	void OnSavePasswordCheckStateChanged(bool bIsChecked); // Function WTL.WTLMainMenuServerAuthorization.OnSavePasswordCheckStateChanged // (Final|Native|Private) // @ game+0x184f060
	void OnSavePasswordCanceled(); // Function WTL.WTLMainMenuServerAuthorization.OnSavePasswordCanceled // (Final|Native|Private) // @ game+0xe77850
	void OnPasswordTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuServerAuthorization.OnPasswordTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x184f270
	void OnPasswordTextBoxChanged(struct FText& Text); // Function WTL.WTLMainMenuServerAuthorization.OnPasswordTextBoxChanged // (Final|Native|Private|HasOutParms) // @ game+0x184f140
	void OnLoginTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuServerAuthorization.OnLoginTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x184f440
	void OnConnectedToServer(); // Function WTL.WTLMainMenuServerAuthorization.OnConnectedToServer // (Final|Native|Private) // @ game+0x184ef80
	void OnCloseBtnClicked(); // Function WTL.WTLMainMenuServerAuthorization.OnCloseBtnClicked // (Final|Native|Private) // @ game+0x184f780
	void OnAuthorizeBtnClicked(); // Function WTL.WTLMainMenuServerAuthorization.OnAuthorizeBtnClicked // (Final|Native|Private) // @ game+0x184f6e0
};

// Class WTL.WTLMainMenuServerList
// Size: 0x2e0 (Inherited: 0x268)
struct UWTLMainMenuServerList : UWTLMainMenuBase {
	struct UWTLCommonHotkeyButton* ucBtnBack; // 0x268(0x08)
	struct UWTLCommonHotkeyButton* ucBtnRefresh; // 0x270(0x08)
	struct UWTLCommonHotkeyButton* ucBtnConnect; // 0x278(0x08)
	struct UWidgetSwitcher* wsServerList; // 0x280(0x08)
	struct UScrollBox* sbServerList; // 0x288(0x08)
	char pad_290[0x28]; // 0x290(0x28)
	struct TSoftClassPtr<UObject> ServerListItemWidgetClass; // 0x2b8(0x28)

	void OnServerResponded(struct FWTLSteamServerInfo& GameServerItem); // Function WTL.WTLMainMenuServerList.OnServerResponded // (Final|Native|Private|HasOutParms) // @ game+0x184fa60
	void OnServerRequestFinished(); // Function WTL.WTLMainMenuServerList.OnServerRequestFinished // (Final|Native|Private) // @ game+0x184fa40
	void OnRefreshBtnClick(); // Function WTL.WTLMainMenuServerList.OnRefreshBtnClick // (Final|Native|Private) // @ game+0x184fbd0
	void OnConnectedToServer(); // Function WTL.WTLMainMenuServerList.OnConnectedToServer // (Final|Native|Private) // @ game+0x184fa20
	void OnConnectBtnClick(); // Function WTL.WTLMainMenuServerList.OnConnectBtnClick // (Final|Native|Private) // @ game+0x184fbb0
	void OnCancelCheckAccountStatus(); // Function WTL.WTLMainMenuServerList.OnCancelCheckAccountStatus // (Final|Native|Private) // @ game+0x184fc40
	void OnBackBtnClick(); // Function WTL.WTLMainMenuServerList.OnBackBtnClick // (Final|Native|Private) // @ game+0x184fbf0
};

// Class WTL.WTLMainMenuServerListItem
// Size: 0x6b8 (Inherited: 0x4a0)
struct UWTLMainMenuServerListItem : UWTLCommonSelectedItem {
	struct UWidgetSwitcher* wsServerType; // 0x4a0(0x08)
	struct UTextBlock* tbServerName; // 0x4a8(0x08)
	struct UTextBlock* tbServerVersion; // 0x4b0(0x08)
	struct UTextBlock* tbServerLoad; // 0x4b8(0x08)
	struct UTextBlock* tbServerPing; // 0x4c0(0x08)
	struct UTextBlock* tbServerTime; // 0x4c8(0x08)
	struct UBorder* bServerMark; // 0x4d0(0x08)
	struct UWidgetSwitcher* wsServerMark; // 0x4d8(0x08)
	struct UBorder* bServerName; // 0x4e0(0x08)
	struct UBorder* bServerVersion; // 0x4e8(0x08)
	struct UBorder* bServerLoad; // 0x4f0(0x08)
	struct UBorder* bServerPing; // 0x4f8(0x08)
	struct UBorder* bServerTime; // 0x500(0x08)
	char pad_508[0x80]; // 0x508(0x80)
	struct FSlateBrush RecommendedBorderBrush; // 0x588(0x88)
	struct FSlateColor ServerLoadLowColor; // 0x610(0x28)
	struct FSlateColor ServerLoadMiddleColor; // 0x638(0x28)
	struct FSlateColor ServerLoadHighColor; // 0x660(0x28)
	char pad_688[0x30]; // 0x688(0x30)

	void OnBackgroundBorderMouseDoubleClick(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLMainMenuServerListItem.OnBackgroundBorderMouseDoubleClick // (Final|Native|Protected|HasOutParms) // @ game+0x184fe20
};

// Class WTL.WTLMainMenuSexSelectToPreviewWindow
// Size: 0x3b0 (Inherited: 0x288)
struct UWTLMainMenuSexSelectToPreviewWindow : UWTLCommonWindowBase {
	struct UHorizontalBox* hbSex; // 0x288(0x08)
	char pad_290[0x120]; // 0x290(0x120)

	void OnSexSelected(enum class EWTLSex Sex); // Function WTL.WTLMainMenuSexSelectToPreviewWindow.OnSexSelected // (Final|Native|Private) // @ game+0x1850230
};

// Class WTL.WTLMainMenuStart
// Size: 0x378 (Inherited: 0x268)
struct UWTLMainMenuStart : UWTLMainMenuBase {
	struct UBackgroundBlur* bbLocalizationDebug; // 0x268(0x08)
	struct UCheckBox* cbEditorLocalizationPaths; // 0x270(0x08)
	struct UCheckBox* cbEngineLocalizationPaths; // 0x278(0x08)
	struct UCheckBox* cbGameLocalizationPaths; // 0x280(0x08)
	struct UScrollBox* sbAvailableLocalizationList; // 0x288(0x08)
	struct UButton* btnClose; // 0x290(0x08)
	struct UButton* btnGet; // 0x298(0x08)
	struct UWidgetSwitcher* wsRoot; // 0x2a0(0x08)
	struct UWTLCommonButton* ucBtnStory; // 0x2a8(0x08)
	struct UWTLCommonButton* ucBtnAuthors; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnPlay; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnExit; // 0x2c0(0x08)
	struct UHorizontalBox* hbSocialNetworks; // 0x2c8(0x08)
	struct UButton* btnSocialNetworkYouTube; // 0x2d0(0x08)
	struct UButton* btnSocialNetworkTwitter; // 0x2d8(0x08)
	struct UButton* btnSocialNetworkVK; // 0x2e0(0x08)
	struct UButton* btnSocialNetworkFacebook; // 0x2e8(0x08)
	struct UButton* btnSocialNetworkDiscord; // 0x2f0(0x08)
	char pad_2F8[0x8]; // 0x2f8(0x08)
	struct TSoftClassPtr<UObject> LocalizationListItemWidgetClass; // 0x300(0x28)
	struct TSoftObjectPtr<UFMODEvent> SocialNetworkPressedSoundEvent; // 0x328(0x28)
	struct TSoftObjectPtr<UFMODEvent> SocialNetworkHoveredSoundEvent; // 0x350(0x28)

	void OnStoryBtnClick(); // Function WTL.WTLMainMenuStart.OnStoryBtnClick // (Final|Native|Private) // @ game+0x1850710
	void OnSocialNetworkYouTubeBtnClicked(); // Function WTL.WTLMainMenuStart.OnSocialNetworkYouTubeBtnClicked // (Final|Native|Private) // @ game+0x1850660
	void OnSocialNetworkVKBtnClicked(); // Function WTL.WTLMainMenuStart.OnSocialNetworkVKBtnClicked // (Final|Native|Private) // @ game+0x1850620
	void OnSocialNetworkTwitterBtnClicked(); // Function WTL.WTLMainMenuStart.OnSocialNetworkTwitterBtnClicked // (Final|Native|Private) // @ game+0x1850640
	void OnSocialNetworkFacebookBtnClicked(); // Function WTL.WTLMainMenuStart.OnSocialNetworkFacebookBtnClicked // (Final|Native|Private) // @ game+0x1850600
	void OnSocialNetworkDiscordBtnClicked(); // Function WTL.WTLMainMenuStart.OnSocialNetworkDiscordBtnClicked // (Final|Native|Private) // @ game+0x18505e0
	void OnSocialNetworkBtnPressed(); // Function WTL.WTLMainMenuStart.OnSocialNetworkBtnPressed // (Final|Native|Private) // @ game+0x18505c0
	void OnSocialNetworkBtnHovered(); // Function WTL.WTLMainMenuStart.OnSocialNetworkBtnHovered // (Final|Native|Private) // @ game+0x18505a0
	void OnPlayBtnClick(); // Function WTL.WTLMainMenuStart.OnPlayBtnClick // (Final|Native|Private) // @ game+0x18506a0
	void OnGetBtnClick(); // Function WTL.WTLMainMenuStart.OnGetBtnClick // (Final|Native|Private) // @ game+0x1850750
	void OnExitBtnClick(); // Function WTL.WTLMainMenuStart.OnExitBtnClick // (Final|Native|Private) // @ game+0x1850730
	void OnCloseBtnClick(); // Function WTL.WTLMainMenuStart.OnCloseBtnClick // (Final|Native|Private) // @ game+0x1850770
	void OnAuthorsBtnClick(); // Function WTL.WTLMainMenuStart.OnAuthorsBtnClick // (Final|Native|Private) // @ game+0x18506c0
	void ExitGame(); // Function WTL.WTLMainMenuStart.ExitGame // (Final|Native|Private) // @ game+0x1850680
};

// Class WTL.WTLMainMenuTextBox
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLMainMenuTextBox : UUserWidget {
	struct UEditableTextBox* etbTextBox; // 0x260(0x08)
	char pad_268[0x30]; // 0x268(0x30)
	struct FText HintText; // 0x298(0x18)
	bool IsPassword; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)

	void OnTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLMainMenuTextBox.OnTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1850db0
	void OnTextBoxTextChanged(struct FText& Text); // Function WTL.WTLMainMenuTextBox.OnTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1850c70
};

// Class WTL.WTLMarchingCubes
// Size: 0x4698 (Inherited: 0x220)
struct AWTLMarchingCubes : AActor {
	char pad_220[0x4408]; // 0x220(0x4408)
	struct UProceduralMeshComponent* m_ProcMesh; // 0x4628(0x08)
	char pad_4630[0x10]; // 0x4630(0x10)
	struct TArray<struct FWTLChunk> Chunks; // 0x4640(0x10)
	char pad_4650[0x10]; // 0x4650(0x10)
	struct FVector pCellSize; // 0x4660(0x0c)
	struct FIntVector pChunkSize; // 0x466c(0x0c)
	struct FIntVector GridSize; // 0x4678(0x0c)
	char pad_4684[0x4]; // 0x4684(0x04)
	struct UMaterialInterface* Material; // 0x4688(0x08)
	float m_RateUpdateChunk; // 0x4690(0x04)
	bool IsDrawDebug; // 0x4694(0x01)
	char pad_4695[0x3]; // 0x4695(0x03)

	void TraceDamage(struct FVector TraceStart, struct FVector TraceEnd, struct AActor* DamageInstigator); // Function WTL.WTLMarchingCubes.TraceDamage // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1851130
	void TakeDamageHit(struct FHitResult Hit, struct AActor* DamageCauser); // Function WTL.WTLMarchingCubes.TakeDamageHit // (Final|Native|Public|BlueprintCallable) // @ game+0x1851340
	void NetMulticast_UpdateChunk(struct FWTLChunk Chunk); // Function WTL.WTLMarchingCubes.NetMulticast_UpdateChunk // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x18514e0
	void NetMulticast_TakeDamageHit(uint32_t BlockID, int8_t Value); // Function WTL.WTLMarchingCubes.NetMulticast_TakeDamageHit // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1851640
	void GenerateMesh(); // Function WTL.WTLMarchingCubes.GenerateMesh // (Final|Native|Public) // @ game+0x18517a0
	void GenerateGrid(); // Function WTL.WTLMarchingCubes.GenerateGrid // (Final|Native|Public) // @ game+0x18517c0
};

// Class WTL.WTLWeapon
// Size: 0x3d8 (Inherited: 0x3c0)
struct AWTLWeapon : AWTLUsable {
	char pad_3C0[0x8]; // 0x3c0(0x08)
	enum class EWTLWeaponType WeaponType; // 0x3c8(0x01)
	char pad_3C9[0xf]; // 0x3c9(0x0f)
};

// Class WTL.WTLMeleeWeapon
// Size: 0x4e0 (Inherited: 0x3d8)
struct AWTLMeleeWeapon : AWTLWeapon {
	char pad_3D8[0x18]; // 0x3d8(0x18)
	struct TArray<struct FItemAnimationSet> HitsList; // 0x3f0(0x10)
	struct TArray<struct FItemAnimationSet> HeavyHitsList; // 0x400(0x10)
	struct FItemAnimationSet MainSequenceSet; // 0x410(0x18)
	struct FItemAnimationSet AlternativeSequenceSet; // 0x428(0x18)
	struct FItemAnimationSet QuickHitSequenceSet; // 0x440(0x18)
	struct FItemAnimationSet QuickHitWithEmptyHandsSequenceSet; // 0x458(0x18)
	float AnimationRateMultiplierOnSprinting; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x478(0x10)
	float MainDamageMultiplier; // 0x488(0x04)
	float PlaceableStuffDamageMultiplier; // 0x48c(0x04)
	float MainHitParticleScale; // 0x490(0x04)
	float MainRagdollImpulseMultiplier; // 0x494(0x04)
	float MainRangeDelta; // 0x498(0x04)
	float MainCollisionRadius; // 0x49c(0x04)
	bool MainUseArmor; // 0x4a0(0x01)
	char pad_4A1[0x3]; // 0x4a1(0x03)
	float MainStaminaPerUse; // 0x4a4(0x04)
	float MainBleedingChance; // 0x4a8(0x04)
	float MainMaxBleedingValue; // 0x4ac(0x04)
	float MainStunChance; // 0x4b0(0x04)
	bool ShowHitPoint; // 0x4b4(0x01)
	char pad_4B5[0x3]; // 0x4b5(0x03)
	float AlternativeDamageMultiplier; // 0x4b8(0x04)
	float AlternativeHitParticleScale; // 0x4bc(0x04)
	float AlternativeRagdollImpulseMultiplier; // 0x4c0(0x04)
	float AlternativeRangeDelta; // 0x4c4(0x04)
	float AlternativeCollisionRadius; // 0x4c8(0x04)
	bool AlternativeUseArmor; // 0x4cc(0x01)
	char pad_4CD[0x3]; // 0x4cd(0x03)
	float AlternativeStaminaPerUse; // 0x4d0(0x04)
	float AlternativeBleedingChance; // 0x4d4(0x04)
	float AlternativeMaxBleedingValue; // 0x4d8(0x04)
	float AlternativeStunChance; // 0x4dc(0x04)

	void Server_StopUse(); // Function WTL.WTLMeleeWeapon.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1851e50
	void Server_StartUse(); // Function WTL.WTLMeleeWeapon.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1851eb0
	void Server_SingleUse(); // Function WTL.WTLMeleeWeapon.Server_SingleUse // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1851a60
	void Server_ShowImpactPoint(struct FHitResult HitResult); // Function WTL.WTLMeleeWeapon.Server_ShowImpactPoint // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1851ac0
	void Server_MakeHit(struct FHitResult HitResult); // Function WTL.WTLMeleeWeapon.Server_MakeHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1851c10
	void NetMulticast_QuickHit(); // Function WTL.WTLMeleeWeapon.NetMulticast_QuickHit // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1851d60
	void NetMulticast_OnUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLMeleeWeapon.NetMulticast_OnUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1851d80
};

// Class WTL.WTLTacticalStuff
// Size: 0x268 (Inherited: 0x220)
struct AWTLTacticalStuff : AActor {
	char pad_220[0x28]; // 0x220(0x28)
	uint64_t m_CharacterID; // 0x248(0x08)
	char pad_250[0x8]; // 0x250(0x08)
	float Damage; // 0x258(0x04)
	float Health; // 0x25c(0x04)
	bool bCanActivateFromRadialDamage; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
};

// Class WTL.WTLMine
// Size: 0x340 (Inherited: 0x268)
struct AWTLMine : AWTLTacticalStuff {
	char pad_268[0x20]; // 0x268(0x20)
	bool m_Activated; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct UStaticMeshComponent* ActivateZone; // 0x290(0x08)
	struct UStaticMeshComponent* DamageZone; // 0x298(0x08)
	struct UStaticMeshComponent* Mesh; // 0x2a0(0x08)
	struct USceneComponent* DamageOrigin; // 0x2a8(0x08)
	struct USoundCue* ActivationSound; // 0x2b0(0x08)
	struct TSoftObjectPtr<UFMODEvent> ActivationSoundEvent; // 0x2b8(0x28)
	struct TSoftClassPtr<UObject> ExplosionFX; // 0x2e0(0x28)
	struct FRotator ExplosionFXRotation; // 0x308(0x0c)
	bool bIsRelaseMode; // 0x314(0x01)
	bool bIsUpgraded; // 0x315(0x01)
	char pad_316[0x2]; // 0x316(0x02)
	struct TArray<enum class EObjectTypeQuery> DestructibleObjectTypes; // 0x318(0x10)
	float DestructibleImpulse; // 0x328(0x04)
	float DestructibleDamageMultiplier; // 0x32c(0x04)
	enum class EWTLFaction m_CharacterFaction; // 0x330(0x01)
	bool m_bCharacterInPVP; // 0x331(0x01)
	char pad_332[0x2]; // 0x332(0x02)
	float ExplosionDelay; // 0x334(0x04)
	float DamageFalloff; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)

	void OnRep_Activated(); // Function WTL.WTLMine.OnRep_Activated // (Final|Native|Private) // @ game+0x18521c0
	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLMine.OnOverlapEnd // (Final|Native|Public) // @ game+0x17dfe30
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLMine.OnOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x17e0080
	void NetMulticast_OnExplosion(float ExplosionDamage); // Function WTL.WTLMine.NetMulticast_OnExplosion // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x18520f0
	void BPOnExplode(); // Function WTL.WTLMine.BPOnExplode // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyDamageToMonster(struct AWTLMonsterPawn* Monster, float ActualDamage); // Function WTL.WTLMine.BPOnApplyDamageToMonster // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyDamageToEnemyNPC(struct AWTLEnemyNPC* EnemyNPC, float ActualDamage); // Function WTL.WTLMine.BPOnApplyDamageToEnemyNPC // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnApplyDamageToCharacter(struct AWTLCharacter* Character, float ActualDamage); // Function WTL.WTLMine.BPOnApplyDamageToCharacter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMiniGameComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UWTLMiniGameComponent : UActorComponent {
	char pad_B0[0x28]; // 0xb0(0x28)

	void K2_OnKeyDown(struct FKey Key); // Function WTL.WTLMiniGameComponent.K2_OnKeyDown // (Final|Native|Public|BlueprintCallable) // @ game+0x1853130
	void BP_OnAxis(struct FInputAxisKeyMapping Key); // Function WTL.WTLMiniGameComponent.BP_OnAxis // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BP_OnAction(struct FInputActionKeyMapping Key); // Function WTL.WTLMiniGameComponent.BP_OnAction // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMiningItem
// Size: 0x488 (Inherited: 0x458)
struct AWTLMiningItem : AWTLStuff {
	float MineHitRange; // 0x458(0x04)
	float MeleeHitRange; // 0x45c(0x04)
	float SphereRadius; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x468(0x10)
	enum class ETraceTypeQuery CollisionTraceQuery; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	float HitParticleScale; // 0x47c(0x04)
	float PlaceableStuffDamageMultiplier; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)

	void Server_StopUse(); // Function WTL.WTLMiningItem.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db590
	void Server_StartUse(); // Function WTL.WTLMiningItem.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db5c0
	void Server_MineHit(struct FHitResult HitResult); // Function WTL.WTLMiningItem.Server_MineHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x18534c0
	void Server_MeleeWeaponHit(struct FHitResult HitResult); // Function WTL.WTLMiningItem.Server_MeleeWeaponHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x18533b0
	void NetMulticast_OnUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLMiningItem.NetMulticast_OnUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x18535d0
};

// Class WTL.WTLMiningSpot
// Size: 0x3e8 (Inherited: 0x220)
struct AWTLMiningSpot : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	float m_Capacity; // 0x230(0x04)
	char pad_234[0x14]; // 0x234(0x14)
	struct USceneComponent* MiningSpotRootComponent; // 0x248(0x08)
	struct UStaticMeshComponent* Mesh; // 0x250(0x08)
	struct TSoftObjectPtr<UMaterialInterface> MaterialOverride; // 0x258(0x28)
	struct TSoftObjectPtr<UParticleSystem> MeshChangeParticles; // 0x280(0x28)
	struct TSoftObjectPtr<UFMODEvent> MeshChangeSoundEvent; // 0x2a8(0x28)
	struct TSoftObjectPtr<UParticleSystem> EmptyHitParticles; // 0x2d0(0x28)
	struct TSoftObjectPtr<UFMODEvent> EmptyHitSoundEvent; // 0x2f8(0x28)
	struct TSoftObjectPtr<UParticleSystem> SuccessHitParticles; // 0x320(0x28)
	struct TSoftObjectPtr<UFMODEvent> SuccessHitSoundEvent; // 0x348(0x28)
	struct TArray<struct FWTLMiningSpotResource> Resources; // 0x370(0x10)
	float MinEmptyHitCapacityCost; // 0x380(0x04)
	float MaxEmptyHitCapacityCost; // 0x384(0x04)
	float MaxCapacity; // 0x388(0x04)
	float MinCapacityRegenerationPerSecond; // 0x38c(0x04)
	float MaxCapacityRegenerationPerSecond; // 0x390(0x04)
	float CapacityRestoreTimeout; // 0x394(0x04)
	struct TMap<float, struct TSoftObjectPtr<UStaticMesh>> PerCapacityPercentMeshes; // 0x398(0x50)

	void OnRep_Capacity(float PreviousCapacity); // Function WTL.WTLMiningSpot.OnRep_Capacity // (Final|Native|Private) // @ game+0x1853d70
	void OnBecameEmpty(); // Function WTL.WTLMiningSpot.OnBecameEmpty // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetMulticast_OnHit(struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, bool Success, float Scale); // Function WTL.WTLMiningSpot.NetMulticast_OnHit // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x18538d0
};

// Class WTL.WTLMiningZone
// Size: 0x2f0 (Inherited: 0x258)
struct AWTLMiningZone : AVolume {
	char pad_258[0x30]; // 0x258(0x30)
	struct TMap<int32_t, float> AcceptableMiningItems; // 0x288(0x50)
	struct TArray<struct FWTLMiningZoneItem> Items; // 0x2d8(0x10)
	float MinEmptyHitCapacityCost; // 0x2e8(0x04)
	float MaxEmptyHitCapacityCost; // 0x2ec(0x04)

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLMiningZone.OnVolumeEndOverlap // (Final|Native|Protected) // @ game+0x17dfe30
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLMiningZone.OnVolumeBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x17e0080
};

// Class WTL.WTLMissileWeapon
// Size: 0x530 (Inherited: 0x3d8)
struct AWTLMissileWeapon : AWTLWeapon {
	char pad_3D8[0x20]; // 0x3d8(0x20)
	struct UParticleSystemComponent* TargetLocation; // 0x3f8(0x08)
	struct TSoftObjectPtr<UParticleSystem> m_BeamParticleSystem; // 0x400(0x28)
	char pad_428[0x28]; // 0x428(0x28)
	float TrajectoryBeamTimeDelta; // 0x450(0x04)
	bool bPredictTrajectory; // 0x454(0x01)
	char pad_455[0x4]; // 0x455(0x04)
	bool m_bQuickThrow; // 0x459(0x01)
	char pad_45A[0x16]; // 0x45a(0x16)
	float ThrowRandomConeAngle; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)
	struct FItemAnimationSet ThrowSequenceSet; // 0x478(0x18)
	struct FItemAnimationSet AlternateThrowSequenceSet; // 0x490(0x18)
	struct FItemAnimationSet QuickThrowSequenceSet; // 0x4a8(0x18)
	struct TSoftClassPtr<UObject> ProjectileClass; // 0x4c0(0x28)
	struct FVector MissileSocketOffsetMale; // 0x4e8(0x0c)
	struct FVector MissileSocketOffsetFemale; // 0x4f4(0x0c)
	float MainThrowSpeed; // 0x500(0x04)
	struct FRotator MainThrowRotationOffset; // 0x504(0x0c)
	float AlternativeThrowSpeed; // 0x510(0x04)
	struct FRotator AlternativeThrowRotationOffset; // 0x514(0x0c)
	bool CanBeDropedAfterDeath; // 0x520(0x01)
	char pad_521[0x3]; // 0x521(0x03)
	float DropThrowForce; // 0x524(0x04)
	bool ShowImpactPoint; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)

	void Server_StopUse(); // Function WTL.WTLMissileWeapon.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db590
	void Server_StartUse(); // Function WTL.WTLMissileWeapon.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db5c0
	void OnRep_QuickThrow(); // Function WTL.WTLMissileWeapon.OnRep_QuickThrow // (Final|Native|Private) // @ game+0xe77850
	void NetMulticast_QuickThrow(); // Function WTL.WTLMissileWeapon.NetMulticast_QuickThrow // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1854840
	void NetMulticast_OnStopUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLMissileWeapon.NetMulticast_OnStopUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1854980
	void NetMulticast_OnStartUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLMissileWeapon.NetMulticast_OnStartUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1854a50
	bool GetReadyToThrow(); // Function WTL.WTLMissileWeapon.GetReadyToThrow // (Final|Native|Public|BlueprintCallable) // @ game+0x1854330
	void Client_ShowCountdownWidget(uint16_t WeaponID, float TimeValue, enum class EWTLUsableItemUseType UseType, float ThrowSpeed); // Function WTL.WTLMissileWeapon.Client_ShowCountdownWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18544a0
	void Client_HideCountdownWidget(); // Function WTL.WTLMissileWeapon.Client_HideCountdownWidget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1854350
	void BPActivationProcess(); // Function WTL.WTLMissileWeapon.BPActivationProcess // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMobileHealPoint
// Size: 0x408 (Inherited: 0x398)
struct AWTLMobileHealPoint : AWTLPlaceableStuff {
	char pad_398[0x38]; // 0x398(0x38)
	struct UStaticMeshComponent* Mesh; // 0x3d0(0x08)
	struct UStaticMeshComponent* ZoneMesh; // 0x3d8(0x08)
	struct UBoxComponent* BoxCollision; // 0x3e0(0x08)
	struct TArray<enum class EObjectTypeQuery> HealingObjectTypes; // 0x3e8(0x10)
	float HealingPercentPerSecond; // 0x3f8(0x04)
	float HealingEnergyPerSecond; // 0x3fc(0x04)
	float EnergyChargePerSecond; // 0x400(0x04)
	float m_Energy; // 0x404(0x04)

	void OnRep_Energy(); // Function WTL.WTLMobileHealPoint.OnRep_Energy // (Final|Native|Private) // @ game+0x1855520
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLMobileHealPoint.OnEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLMobileHealPoint.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	float BPGetEnergy(); // Function WTL.WTLMobileHealPoint.BPGetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1855500
	float BPGetCondition(); // Function WTL.WTLMobileHealPoint.BPGetCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17bbcb0
	void BPCharged(); // Function WTL.WTLMobileHealPoint.BPCharged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLMobileHealPoint.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd90
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLMobileHealPoint.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17defb0
	bool AIInterface_IsAlive(); // Function WTL.WTLMobileHealPoint.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df130
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLMobileHealPoint.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0e0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLMobileHealPoint.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLMobileHealPoint.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0c0
};

// Class WTL.WTLMobileResurectionPoint
// Size: 0x478 (Inherited: 0x398)
struct AWTLMobileResurectionPoint : AWTLPlaceableStuff {
	char pad_398[0x98]; // 0x398(0x98)
	struct UStaticMeshComponent* Mesh; // 0x430(0x08)
	struct UStaticMeshComponent* ZoneMesh; // 0x438(0x08)
	struct UBoxComponent* BoxCollision; // 0x440(0x08)
	struct TArray<enum class EObjectTypeQuery> HealingObjectTypes; // 0x448(0x10)
	float HealingRadius; // 0x458(0x04)
	float HealingPerSecond; // 0x45c(0x04)
	float HealingEnergyPerSecond; // 0x460(0x04)
	float ResurectionEnergyCost; // 0x464(0x04)
	float ResurectionRadius; // 0x468(0x04)
	float EnergyChargePerSecond; // 0x46c(0x04)
	float m_Energy; // 0x470(0x04)
	char pad_474[0x4]; // 0x474(0x04)

	void OnRep_Energy(); // Function WTL.WTLMobileResurectionPoint.OnRep_Energy // (Final|Native|Private) // @ game+0x1855930
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLMobileResurectionPoint.OnEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLMobileResurectionPoint.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	float BPGetEnergy(); // Function WTL.WTLMobileResurectionPoint.BPGetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1855910
	float BPGetCondition(); // Function WTL.WTLMobileResurectionPoint.BPGetCondition // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x17bbcb0
	void BPCharged(); // Function WTL.WTLMobileResurectionPoint.BPCharged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLMobileResurectionPoint.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd90
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLMobileResurectionPoint.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17defb0
	bool AIInterface_IsAlive(); // Function WTL.WTLMobileResurectionPoint.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df130
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLMobileResurectionPoint.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0e0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLMobileResurectionPoint.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLMobileResurectionPoint.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0c0
};

// Class WTL.WTLMonocular
// Size: 0x640 (Inherited: 0x458)
struct AWTLMonocular : AWTLStuff {
	struct TArray<char> ZoomModes; // 0x458(0x10)
	struct UFont* HUDFont; // 0x468(0x08)
	struct UTexture2D* HUDBatteryAtlas; // 0x470(0x08)
	struct UTexture2D* HUDInfoAtlas; // 0x478(0x08)
	float MaxRange; // 0x480(0x04)
	char pad_484[0x19c]; // 0x484(0x19c)
	struct UMaterialBillboardComponent* m_ScopeFlareComponent; // 0x620(0x08)
	struct UMaterialInstanceDynamic* m_ScopeFlareMaterialInstance; // 0x628(0x08)
	bool bIsUsingMonocular; // 0x630(0x01)
	char pad_631[0x3]; // 0x631(0x03)
	float HandsShakingSpeed; // 0x634(0x04)
	float MaxVerticalHandsShaking; // 0x638(0x04)
	float MaxHorizontalHandsShaking; // 0x63c(0x04)

	void OnRep_bIsUsingMonocular(); // Function WTL.WTLMonocular.OnRep_bIsUsingMonocular // (Final|Native|Private) // @ game+0x1856010
};

// Class WTL.WTLMonsterPawnAIController
// Size: 0x3d8 (Inherited: 0x328)
struct AWTLMonsterPawnAIController : AAIController {
	char pad_328[0x15]; // 0x328(0x15)
	enum class EWTLAITeam AITeam; // 0x33d(0x01)
	char pad_33E[0x2]; // 0x33e(0x02)
	struct UBehaviorTree* BehaviorTree; // 0x340(0x08)
	struct UBehaviorTree* BehaviorTreeStealth; // 0x348(0x08)
	bool bIsCanDeepSleep; // 0x350(0x01)
	bool bIsNeutralCreature; // 0x351(0x01)
	bool AIInterface; // 0x352(0x01)
	char pad_353[0x1]; // 0x353(0x01)
	float StepHeight; // 0x354(0x04)
	float MovementAcceptableRadius; // 0x358(0x04)
	float AttackRadius; // 0x35c(0x04)
	float AttackRadiusInMove; // 0x360(0x04)
	float FrightRadius; // 0x364(0x04)
	enum class EWTLMonsterState DefaultState; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct TArray<enum class EWTLMonsterState> StatesForExecuteFright; // 0x370(0x10)
	struct TArray<enum class EWTLMonsterState> StatesForReactionOnTakeDamage; // 0x380(0x10)
	enum class EWTLMonsterState SetStateFromTakeDamage; // 0x390(0x01)
	enum class EWTLMonsterState SetStateIfCantSetTakeDamage; // 0x391(0x01)
	char pad_392[0x2]; // 0x392(0x02)
	struct FName TagNoiseFromDamage; // 0x394(0x08)
	float MakeNoiseRadius; // 0x39c(0x04)
	float HearingRadius; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct TArray<enum class EWTLMonsterState> StateMonsterForWorkHearing; // 0x3a8(0x10)
	float Delay; // 0x3b8(0x04)
	float DamageMultiplier; // 0x3bc(0x04)
	float PeripheralVisionHalfAngleDegrees; // 0x3c0(0x04)
	float PeripheralVisionDistance; // 0x3c4(0x04)
	bool UseAcceptableDistanceFollowTarget; // 0x3c8(0x01)
	char pad_3C9[0x3]; // 0x3c9(0x03)
	float AcceptableDistanceFollowTarget; // 0x3cc(0x04)
	float MultiplierAcceptableDistance; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)

	void OnReceiveDamage(struct AController* DamageInstigator, float Damage, bool bIsFromSleep); // Function WTL.WTLMonsterPawnAIController.OnReceiveDamage // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnHearing(struct AActor* EventInstigator, struct FName Tag); // Function WTL.WTLMonsterPawnAIController.OnHearing // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnActivityStateChanged(enum class EWTLMonsterActivityState& CurrentActivityState, enum class EWTLMonsterActivityState& PreviousActivityState); // Function WTL.WTLMonsterPawnAIController.OnActivityStateChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	void NoSleep(); // Function WTL.WTLMonsterPawnAIController.NoSleep // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x185ee00
	void K2_RestartLogic(); // Function WTL.WTLMonsterPawnAIController.K2_RestartLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x185f010
	struct FVector GetLocationOwner(); // Function WTL.WTLMonsterPawnAIController.GetLocationOwner // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x185ec70
	float GetDangerLevel(struct AWTLCharacter* WTLCharacter); // Function WTL.WTLMonsterPawnAIController.GetDangerLevel // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x185ee30
	void BPSetGenericTeamId(enum class EWTLAITeam pTeamID); // Function WTL.WTLMonsterPawnAIController.BPSetGenericTeamId // (Final|Native|Public|BlueprintCallable) // @ game+0x185eba0
	enum class EWTLAITeam BPGetGenericTeamId(); // Function WTL.WTLMonsterPawnAIController.BPGetGenericTeamId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185eb80
	void BP_OnHearing(struct AActor* EventInstigator, struct FName Tag); // Function WTL.WTLMonsterPawnAIController.BP_OnHearing // (Final|Native|Public|BlueprintCallable) // @ game+0x185f030
};

// Class WTL.WTLMonsterPawnAnimInstance
// Size: 0x3a0 (Inherited: 0x2c0)
struct UWTLMonsterPawnAnimInstance : UAnimInstance {
	char pad_2C0[0xa0]; // 0x2c0(0xa0)
	float Speed; // 0x360(0x04)
	float Aggression; // 0x364(0x04)
	bool IsUseAxisMatching; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float ForwardSpeed; // 0x36c(0x04)
	float DirectionAngle; // 0x370(0x04)
	float RightSpeed; // 0x374(0x04)
	float VelocitySpeed; // 0x378(0x04)
	float DeltaYaw; // 0x37c(0x04)
	float AnimationToSizeRate; // 0x380(0x04)
	enum class EWTLMonsterAttachState AttachedState; // 0x384(0x01)
	char pad_385[0x3]; // 0x385(0x03)
	struct FRotator SlopeRotation; // 0x388(0x0c)
	char IdleAnimIndex; // 0x394(0x01)
	char AttackAnimIndex; // 0x395(0x01)
	enum class EWTLMonsterTakeDamageType TakeDamageType; // 0x396(0x01)
	enum class EWTLMonsterAnimationState CurrentState; // 0x397(0x01)
	enum class EWTLMonsterActionType CurrentAction; // 0x398(0x01)
	enum class EWTLMonsterState BlackboardState; // 0x399(0x01)
	char pad_39A[0x6]; // 0x39a(0x06)

	void OnActionTrigger(struct FName ActionName); // Function WTL.WTLMonsterPawnAnimInstance.OnActionTrigger // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnAnimationTrigger(struct FName TriggerName, bool Value, int32_t ID); // Function WTL.WTLMonsterPawnAnimInstance.K2_OnAnimationTrigger // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMonsterPawnBase
// Size: 0xf10 (Inherited: 0xf10)
struct AWTLMonsterPawnBase : AWTLMonsterPawn {
};

// Class WTL.WTLMonsterPawnInputMode
// Size: 0xf10 (Inherited: 0xf10)
struct AWTLMonsterPawnInputMode : AWTLMonsterPawn {
};

// Class WTL.WTLMonsterPawnMovementComponent
// Size: 0xb00 (Inherited: 0xb00)
struct UWTLMonsterPawnMovementComponent : UCharacterMovementComponent {
};

// Class WTL.WTLMonsterPerceptionComponent
// Size: 0x130 (Inherited: 0xb0)
struct UWTLMonsterPerceptionComponent : UActorComponent {
	char pad_B0[0x58]; // 0xb0(0x58)
	float InRange; // 0x108(0x04)
	float HalfAnglePitch; // 0x10c(0x04)
	float HalfAngleYaw; // 0x110(0x04)
	bool CanSeeCharacter; // 0x114(0x01)
	bool CheckHitTraceCharacter; // 0x115(0x01)
	bool CanSeeMonster; // 0x116(0x01)
	bool CheckHitTraceMonster; // 0x117(0x01)
	bool CanSeeStuff; // 0x118(0x01)
	bool CheckHitTraceStuff; // 0x119(0x01)
	char pad_11A[0x6]; // 0x11a(0x06)
	struct TArray<int32_t> IgnoreStuffIDList; // 0x120(0x10)

	struct AWTLPlaceableStuff* GetNearestStuff(); // Function WTL.WTLMonsterPerceptionComponent.GetNearestStuff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185f7a0
	struct AWTLMonsterPawn* GetNearestMonster(); // Function WTL.WTLMonsterPerceptionComponent.GetNearestMonster // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185f760
	struct AWTLCharacter* GetNearestCharacter(); // Function WTL.WTLMonsterPerceptionComponent.GetNearestCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185f8b0
	struct AActor* GetNearestActor(); // Function WTL.WTLMonsterPerceptionComponent.GetNearestActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x185f940
};

// Class WTL.WTLMonsterProjectile
// Size: 0x298 (Inherited: 0x220)
struct AWTLMonsterProjectile : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	float InitialVelocity; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct UCurveFloat* VelocityCurve; // 0x230(0x08)
	struct UCurveFloat* GravityCurve; // 0x238(0x08)
	struct UParticleSystemComponent* ParticleBullet; // 0x240(0x08)
	struct UParticleSystemComponent* ParticleBlood; // 0x248(0x08)
	char pad_250[0x20]; // 0x250(0x20)
	struct USphereComponent* CollisionComp; // 0x270(0x08)
	struct UWTLProjectileMovementComponent* ProjectileMovement; // 0x278(0x08)
	struct UDamageType* DamageType; // 0x280(0x08)
	char pad_288[0x10]; // 0x288(0x10)

	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLMonsterProjectile.OnHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x185fc40
};

// Class WTL.WTLMonsterProjectileBase
// Size: 0x258 (Inherited: 0x220)
struct AWTLMonsterProjectileBase : AActor {
	struct USphereComponent* CollisionComp; // 0x220(0x08)
	struct UProjectileMovementComponent* ProjectileMovement; // 0x228(0x08)
	struct FVector RepStartLocation; // 0x230(0x0c)
	struct FVector RepTargetLocation; // 0x23c(0x0c)
	float MinDamage; // 0x248(0x04)
	float MaxDamage; // 0x24c(0x04)
	float RepAngleImpact; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)

	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLMonsterProjectileBase.OnHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1860320
	void K2_OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLMonsterProjectileBase.K2_OnHit // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1ad0090
	void Init(struct FVector start_location, struct FVector target_location, float min_damage, float max_damage, float angle_impact); // Function WTL.WTLMonsterProjectileBase.Init // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1860010
};

// Class WTL.WTLMonsterSpawner
// Size: 0x400 (Inherited: 0x280)
struct AWTLMonsterSpawner : APawn {
	char pad_280[0x30]; // 0x280(0x30)
	enum class ETraceTypeQuery CollisionTraceQuery; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)
	struct TArray<struct AWTLMonsterPawnAIController*> m_ListControllers; // 0x2b8(0x10)
	enum class EWTLFaction SetFaction; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct AWTLMonsterPawn* LastSpawnMonster; // 0x2d0(0x08)
	struct AWTLMonsterPawn* m_SpawnClass; // 0x2d8(0x08)
	bool IsCheckCanPlaceMonster; // 0x2e0(0x01)
	bool IsSpawnMonsterFromCharacter; // 0x2e1(0x01)
	char pad_2E2[0x2]; // 0x2e2(0x02)
	int32_t m_SpawnedMonstersLimit; // 0x2e4(0x04)
	int32_t m_AllowableNumberOfLivingMonsters; // 0x2e8(0x04)
	int32_t m_CountMonstersPerCharacter; // 0x2ec(0x04)
	int32_t m_MaxMonstersAdd; // 0x2f0(0x04)
	float m_StartDelay; // 0x2f4(0x04)
	float m_MinSpawnInterval; // 0x2f8(0x04)
	float m_MaxSpawnInterval; // 0x2fc(0x04)
	float m_SpawnRadius; // 0x300(0x04)
	float m_DistanceFollowTarget; // 0x304(0x04)
	bool m_IsReactionOnSafeZone; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	char m_MinimumLevel; // 0x310(0x01)
	char m_MaximumLevel; // 0x311(0x01)
	bool IsBurst; // 0x312(0x01)
	char PercentDamageBurst; // 0x313(0x01)
	float TakeDamageBurst; // 0x314(0x04)
	char MinLevelBurst; // 0x318(0x01)
	char MaxLevelBurst; // 0x319(0x01)
	char pad_31A[0x2]; // 0x31a(0x02)
	float MultiplierParametersForMonster; // 0x31c(0x04)
	struct FVector m_NavigationProjectExtend; // 0x320(0x0c)
	enum class EWTLMonsterSpawnerSpawnMethod m_SpawnPointRandomMethod; // 0x32c(0x04)
	bool IsActivated; // 0x330(0x01)
	bool IsDeactivatedIfMonstersSpawned; // 0x331(0x01)
	bool IsDeactivateAfterEachSpawn; // 0x332(0x01)
	bool IsSpawnCentr; // 0x333(0x01)
	bool IsSpawnOnlyFromPoints; // 0x334(0x01)
	char pad_335[0x3]; // 0x335(0x03)
	struct UBehaviorTree* SetBehaviorTree; // 0x338(0x08)
	float LifespanAfterDeath; // 0x340(0x04)
	float MonsterLifeTime; // 0x344(0x04)
	bool IsApplySettings; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	float SetPeripheralVisionDistance; // 0x34c(0x04)
	float SetPeripheralVisionHalfAngleDegrees; // 0x350(0x04)
	float SetFrightRadius; // 0x354(0x04)
	float SetHearingRange; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
	struct AActor* TargetActor; // 0x360(0x08)
	bool UseMonsterExperience; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	int32_t MinMonsterExperienceDelta; // 0x36c(0x04)
	int32_t MaxMonsterExperienceDelta; // 0x370(0x04)
	float MinMonsterExperienceTickInterval; // 0x374(0x04)
	float MaxMonsterExperienceTickInterval; // 0x378(0x04)
	float MinExperienceDropCountMultiplierDelta; // 0x37c(0x04)
	float MaxExperienceDropCountMultiplierDelta; // 0x380(0x04)
	float MinExperienceDropChanceMultiplierDelta; // 0x384(0x04)
	float MaxExperienceDropChanceMultiplierDelta; // 0x388(0x04)
	bool IgnoreFortificationCommandCores; // 0x38c(0x01)
	char pad_38D[0x57]; // 0x38d(0x57)
	struct FVector m_MonsterDeathPosition; // 0x3e4(0x0c)
	struct TArray<struct FWTLMonsterSpawnerTaskInfo> SpawnerTask; // 0x3f0(0x10)

	struct AWTLMonsterPawn* SpawnLevel(struct FVector& Location, char LevelMonster); // Function WTL.WTLMonsterSpawner.SpawnLevel // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1861fe0
	void SpawnDeactivated(); // Function WTL.WTLMonsterSpawner.SpawnDeactivated // (Final|Native|Public|BlueprintCallable) // @ game+0x1861af0
	void SpawnActivated(); // Function WTL.WTLMonsterSpawner.SpawnActivated // (Final|Native|Public|BlueprintCallable) // @ game+0x1861da0
	struct AWTLMonsterPawn* Spawn(struct FVector& Location); // Function WTL.WTLMonsterSpawner.Spawn // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1862130
	void SetSpawnClass(struct AWTLMonsterPawn* SpawnClass); // Function WTL.WTLMonsterSpawner.SetSpawnClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1861cc0
	void SetMinLevel(char Value); // Function WTL.WTLMonsterSpawner.SetMinLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1861bf0
	void SetMaxLevel(char Value); // Function WTL.WTLMonsterSpawner.SetMaxLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1861b20
	void OnSpawnMonster(); // Function WTL.WTLMonsterSpawner.OnSpawnMonster // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnDeadMonster(struct AWTLMonsterPawn* Pawn); // Function WTL.WTLMonsterSpawner.OnDeadMonster // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_SpawnMonsters(struct FString MonstersInfo); // Function WTL.WTLMonsterSpawner.K2_SpawnMonsters // (Final|Native|Public|BlueprintCallable) // @ game+0x18611e0
	void K2_SetTimeTillNextSpawn(float Time); // Function WTL.WTLMonsterSpawner.K2_SetTimeTillNextSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x18586d0
	void K2_SetParameters(int32_t LimitMonsters, float SpawnRadius, int32_t MinLevel, int32_t MaxLevel, float MultiParametersForMonster, float DistanceFollowTarget); // Function WTL.WTLMonsterSpawner.K2_SetParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x18615d0
	void K2_SetFactionForAllMyMonsters(enum class EWTLFaction NewFaction); // Function WTL.WTLMonsterSpawner.K2_SetFactionForAllMyMonsters // (Final|Native|Public|BlueprintCallable) // @ game+0x18612d0
	void K2_SetEventPoint(struct AWTLEventPoint* EventPoint); // Function WTL.WTLMonsterSpawner.K2_SetEventPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x18614f0
	void K2_OnAllMonstersDead(); // Function WTL.WTLMonsterSpawner.K2_OnAllMonstersDead // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_MonsterSpawned(struct AWTLMonsterPawn* Pawn); // Function WTL.WTLMonsterSpawner.K2_MonsterSpawned // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_KillAllMonsters(); // Function WTL.WTLMonsterSpawner.K2_KillAllMonsters // (Final|Native|Public|BlueprintCallable) // @ game+0x18619a0
	struct AWTLEventPoint* K2_GetEventPoint(); // Function WTL.WTLMonsterSpawner.K2_GetEventPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x1829d20
	void K2_GenerateTasksFromText(struct FString Value); // Function WTL.WTLMonsterSpawner.K2_GenerateTasksFromText // (Final|Native|Public|BlueprintCallable) // @ game+0x1860cb0
	bool K2_ExecuteTask(struct FWTLMonsterSpawnerTaskInfo TaskInfo); // Function WTL.WTLMonsterSpawner.K2_ExecuteTask // (Final|Native|Public|BlueprintCallable) // @ game+0x1860ff0
	struct FString K2_ConvertMonstersToText(); // Function WTL.WTLMonsterSpawner.K2_ConvertMonstersToText // (Final|Native|Public|BlueprintCallable) // @ game+0x1860c30
	bool K2_CanPlaceMonster(struct FVector& Location, struct FVector& PlaceLocation); // Function WTL.WTLMonsterSpawner.K2_CanPlaceMonster // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1860ab0
	void K2_AddTask(struct FWTLMonsterSpawnerTaskInfo TaskInfo); // Function WTL.WTLMonsterSpawner.K2_AddTask // (Final|Native|Public|BlueprintCallable) // @ game+0x1860da0
	bool IsAllMonstersInRadius(float Radius); // Function WTL.WTLMonsterSpawner.IsAllMonstersInRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861430
	bool IsAllMonsterDead(); // Function WTL.WTLMonsterSpawner.IsAllMonsterDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861dd0
	float GetStartDelay(); // Function WTL.WTLMonsterSpawner.GetStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861f80
	float GetSpawnRadius(); // Function WTL.WTLMonsterSpawner.GetSpawnRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861ee0
	float GetSpawnInterval(); // Function WTL.WTLMonsterSpawner.GetSpawnInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861f00
	int32_t GetSpawnedMonstersCount(); // Function WTL.WTLMonsterSpawner.GetSpawnedMonstersCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861fc0
	int32_t GetMonstersLimit(); // Function WTL.WTLMonsterSpawner.GetMonstersLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861fa0
	struct AWTLMonsterPawn* GetMonsterClass(); // Function WTL.WTLMonsterSpawner.GetMonsterClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861e30
	float GetMinimumLevel(); // Function WTL.WTLMonsterSpawner.GetMinimumLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861eb0
	float GetMaximumLevel(); // Function WTL.WTLMonsterSpawner.GetMaximumLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861e80
	struct FVector GetAcnchorPoint(); // Function WTL.WTLMonsterSpawner.GetAcnchorPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861e00
	bool CanSpawn(); // Function WTL.WTLMonsterSpawner.CanSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1861e50
};

// Class WTL.WTLMonsterSpawnerAIController
// Size: 0x328 (Inherited: 0x328)
struct AWTLMonsterSpawnerAIController : AAIController {

	void OnStreamingLevelsLoaded(); // Function WTL.WTLMonsterSpawnerAIController.OnStreamingLevelsLoaded // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLMonsterSpawnerEvent
// Size: 0x2d8 (Inherited: 0x220)
struct AWTLMonsterSpawnerEvent : AActor {
	char pad_220[0x88]; // 0x220(0x88)
	struct TArray<struct FWTLMonstersDataForSpawnBase> ListMonstersInfo; // 0x2a8(0x10)
	bool IsRandomSelection; // 0x2b8(0x01)
	bool IsKillMonsters; // 0x2b9(0x01)
	char pad_2BA[0x2]; // 0x2ba(0x02)
	float DelayForActivation; // 0x2bc(0x04)
	struct TArray<struct AActor*> SpawnPoints; // 0x2c0(0x10)
	bool IsWaitingForActivationFromOutside; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)

	void SetEventPoint(struct AWTLEventPoint* EventPoint); // Function WTL.WTLMonsterSpawnerEvent.SetEventPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x1863230
	void K2_OnSpawnMonster(struct AWTLMonsterPawn* Monster); // Function WTL.WTLMonsterSpawnerEvent.K2_OnSpawnMonster // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnSpawnDeactivate(); // Function WTL.WTLMonsterSpawnerEvent.K2_OnSpawnDeactivate // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnSpawnActivated(struct FWTLMonstersDataForSpawnBase SpawnData); // Function WTL.WTLMonsterSpawnerEvent.K2_OnSpawnActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnMonsterDead(struct AWTLMonsterPawn* Monster); // Function WTL.WTLMonsterSpawnerEvent.K2_OnMonsterDead // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool K2_CanBeActivated(); // Function WTL.WTLMonsterSpawnerEvent.K2_CanBeActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool IsActivated(); // Function WTL.WTLMonsterSpawnerEvent.IsActivated // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1863310
	float GetLifetime(); // Function WTL.WTLMonsterSpawnerEvent.GetLifetime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1863370
	float GetDurationActiveState(); // Function WTL.WTLMonsterSpawnerEvent.GetDurationActiveState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1863330
	float GetDelayForActiovation(); // Function WTL.WTLMonsterSpawnerEvent.GetDelayForActiovation // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1863350
	int32_t GetDataID(); // Function WTL.WTLMonsterSpawnerEvent.GetDataID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1863390
};

// Class WTL.WTLMortar
// Size: 0x608 (Inherited: 0x398)
struct AWTLMortar : AWTLPlaceableStuff {
	char pad_398[0x28]; // 0x398(0x28)
	struct FWTLStorageContent m_StorageContent; // 0x3c0(0xa8)
	struct USkeletalMeshComponent* RootMesh; // 0x468(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x470(0x08)
	struct UArrowComponent* Arrow; // 0x478(0x08)
	struct UArrowComponent* DirectionArrow; // 0x480(0x08)
	struct UFMODAudioComponent* ClickSound; // 0x488(0x08)
	struct UFMODAudioComponent* FireSound; // 0x490(0x08)
	struct AWTLCharacter* m_Character; // 0x498(0x08)
	char pad_4A0[0x8]; // 0x4a0(0x08)
	struct UAnimMontage* CharacterUsingMontage; // 0x4a8(0x08)
	struct UAnimMontage* CharacterUsingMontageThirdPerson; // 0x4b0(0x08)
	struct UAnimMontage* CharacterFireMontage; // 0x4b8(0x08)
	struct UAnimMontage* MortarFireMontage; // 0x4c0(0x08)
	struct UAnimMontage* CharacterLoadMontage; // 0x4c8(0x08)
	struct UAnimMontage* MortarLoadMontage; // 0x4d0(0x08)
	struct FWTLCameraLimits CameraLimits; // 0x4d8(0x0c)
	float InclineStep; // 0x4e4(0x04)
	float InclineBigStep; // 0x4e8(0x04)
	float MinIncline; // 0x4ec(0x04)
	float MaxIncline; // 0x4f0(0x04)
	float RotationStep; // 0x4f4(0x04)
	float RotationSpeed; // 0x4f8(0x04)
	float MinYaw; // 0x4fc(0x04)
	float MaxYaw; // 0x500(0x04)
	float MaxPitch; // 0x504(0x04)
	float MinPitch; // 0x508(0x04)
	enum class EWTLCaliber AmmoCaliber; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)
	struct UCurveFloat* DistanceCurve; // 0x510(0x08)
	struct UCurveFloat* TimeCurve; // 0x518(0x08)
	struct TMap<int32_t, struct TSoftClassPtr<UObject>> ActorsToSpawn; // 0x520(0x50)
	struct TMap<int32_t, struct TSoftClassPtr<UObject>> ExplosionsToSpawn; // 0x570(0x50)
	bool m_bIsLoaded; // 0x5c0(0x01)
	char pad_5C1[0xf]; // 0x5c1(0x0f)
	float m_Incline; // 0x5d0(0x04)
	char pad_5D4[0xc]; // 0x5d4(0x0c)
	float m_YawRotation; // 0x5e0(0x04)
	char pad_5E4[0x24]; // 0x5e4(0x24)

	void Server_StartUse(struct AWTLCharacter* Character); // Function WTL.WTLMortar.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x1863fc0
	void Server_StartFire(struct AWTLCharacter* Character); // Function WTL.WTLMortar.Server_StartFire // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18640d0
	void Server_ChangeIncline(int8_t Direction, bool BigStep); // Function WTL.WTLMortar.Server_ChangeIncline // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x18637c0
	void OnUse(); // Function WTL.WTLMortar.OnUse // (Final|Native|Public) // @ game+0x1863dd0
	void OnStorageCheck(); // Function WTL.WTLMortar.OnStorageCheck // (Final|Native|Public) // @ game+0x1863c40
	void OnRep_StorageContent(); // Function WTL.WTLMortar.OnRep_StorageContent // (Final|Native|Private) // @ game+0x1863ef0
	void OnRep_Incline(); // Function WTL.WTLMortar.OnRep_Incline // (Final|Native|Private) // @ game+0x1863ed0
	void OnFire(); // Function WTL.WTLMortar.OnFire // (Final|Native|Public) // @ game+0x18639a0
	void NetMulticast_StartFire(); // Function WTL.WTLMortar.NetMulticast_StartFire // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1863f80
	void NetMulticast_Load(); // Function WTL.WTLMortar.NetMulticast_Load // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1863fa0
	struct FVector K2_GetSocketLocation(struct FName Socket); // Function WTL.WTLMortar.K2_GetSocketLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863630
	float GetYawRotation(); // Function WTL.WTLMortar.GetYawRotation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863780
	float GetIncline(); // Function WTL.WTLMortar.GetIncline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18637a0
	void ChangeInclineForward(); // Function WTL.WTLMortar.ChangeInclineForward // (Final|Native|Public) // @ game+0x1863980
	void ChangeInclineBackward(); // Function WTL.WTLMortar.ChangeInclineBackward // (Final|Native|Public) // @ game+0x1863960
	float BPGetYawRotation(); // Function WTL.WTLMortar.BPGetYawRotation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863740
	struct AWTLCharacter* BPGetCharacter(); // Function WTL.WTLMortar.BPGetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1863760
	void BPFire(); // Function WTL.WTLMortar.BPFire // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLMortar.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863af0
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLMortar.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863a10
	bool AIInterface_IsAlive(); // Function WTL.WTLMortar.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863c00
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLMortar.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863b70
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLMortar.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863bc0
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLMortar.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1863b30
};

// Class WTL.WTLMultipleItemPickupSpawnPoint
// Size: 0x220 (Inherited: 0x220)
struct AWTLMultipleItemPickupSpawnPoint : AActor {
};

// Class WTL.WTLNetworkController
// Size: 0x208 (Inherited: 0x28)
struct UWTLNetworkController : UObject {
	char pad_28[0x198]; // 0x28(0x198)
	struct FMulticastInlineDelegate OnConnected; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnConnectError; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnDisconnected; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnDisconnectOnConnectCanceled; // 0x1f0(0x10)
	bool bIsDedicatedServer; // 0x200(0x01)
	char pad_201[0x7]; // 0x201(0x07)

	bool IsConnected(); // Function WTL.WTLNetworkController.IsConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1865890
	void Disconnect(); // Function WTL.WTLNetworkController.Disconnect // (Final|Native|Public|BlueprintCallable) // @ game+0x18656f0
	void Connect(struct FString Host, int32_t Port); // Function WTL.WTLNetworkController.Connect // (Final|Native|Public|BlueprintCallable) // @ game+0x1865710
};

// Class WTL.WTLNPCActor
// Size: 0xb00 (Inherited: 0x220)
struct AWTLNPCActor : AActor {
	char pad_220[0x180]; // 0x220(0x180)
	int32_t ID; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct FText Name; // 0x3a8(0x18)
	enum class EWTLNPCType NPCType; // 0x3c0(0x01)
	enum class EWTLFaction NPCFaction; // 0x3c1(0x01)
	bool DealWithNeutrals; // 0x3c2(0x01)
	bool CanUseFactionClothes; // 0x3c3(0x01)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct TMap<enum class EWTLFaction, struct FWTLNPCFactionClothesInfo> FactionClothesMap; // 0x3c8(0x50)
	bool m_IsActive; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct UCapsuleComponent* Capsule; // 0x420(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x428(0x08)
	struct USkeletalMeshComponent* MeshHead; // 0x430(0x08)
	struct USkeletalMeshComponent* MeshTorso; // 0x438(0x08)
	struct USkeletalMeshComponent* MeshLegs; // 0x440(0x08)
	struct USkeletalMeshComponent* MeshFeet; // 0x448(0x08)
	struct USkeletalMeshComponent* MeshHeadSlot; // 0x450(0x08)
	struct USkeletalMeshComponent* MeshTorsoSlot; // 0x458(0x08)
	struct USkeletalMeshComponent* MeshLegsSlot; // 0x460(0x08)
	struct USkeletalMeshComponent* MeshFeetSlot; // 0x468(0x08)
	struct USkeletalMeshComponent* MeshBackpackSlot; // 0x470(0x08)
	struct USkeletalMeshComponent* MeshGlassesSlot; // 0x478(0x08)
	struct USphereComponent* FrightSphereComponent; // 0x480(0x08)
	struct UAudioComponent* ReplicaAudio; // 0x488(0x08)
	struct UFMODAudioComponent* ReplicaAudioComponent; // 0x490(0x08)
	struct UDataTable* ReplicaTable; // 0x498(0x08)
	struct UDataTable* CommonReplicaTable; // 0x4a0(0x08)
	struct TArray<struct FWTLQuestInfo> QuestArray; // 0x4a8(0x10)
	struct TArray<struct FWTLQuestReplicas> QuestReplicaArray; // 0x4b8(0x10)
	bool PlayRandomIdleAnim; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)
	struct TArray<struct FWTLNPCAnimationInfo> AnimList; // 0x4d0(0x10)
	char pad_4E0[0x8]; // 0x4e0(0x08)
	float GreetingAnimationAlpha; // 0x4e8(0x04)
	float GreetingAnimationIncrementRate; // 0x4ec(0x04)
	float GreetingAnimationDecrementRate; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct TSoftObjectPtr<UFMODEvent> GreetingAudio; // 0x4f8(0x28)
	struct TSoftObjectPtr<UFMODEvent> GoodByeAudio; // 0x520(0x28)
	struct TSoftObjectPtr<UPhysicsAsset> PhysicsAssetOverride; // 0x548(0x28)
	char pad_570[0xa8]; // 0x570(0xa8)
	bool bShowOnMap; // 0x618(0x01)
	bool bCanBuyItems; // 0x619(0x01)
	char pad_61A[0x2]; // 0x61a(0x02)
	float BuyBasePriceMultiplier; // 0x61c(0x04)
	bool bCanBuyWeaponItems; // 0x620(0x01)
	char pad_621[0x7]; // 0x621(0x07)
	struct TArray<int32_t> BuyOnlyWeaponItems; // 0x628(0x10)
	struct TArray<int32_t> BuyExceptWeaponItems; // 0x638(0x10)
	bool bCanBuyAmmoItems; // 0x648(0x01)
	char pad_649[0x7]; // 0x649(0x07)
	struct TArray<int32_t> BuyOnlyAmmoItems; // 0x650(0x10)
	struct TArray<int32_t> BuyExceptAmmoItems; // 0x660(0x10)
	bool bCanBuyMedicineItems; // 0x670(0x01)
	char pad_671[0x7]; // 0x671(0x07)
	struct TArray<int32_t> BuyOnlyMedicineItems; // 0x678(0x10)
	struct TArray<int32_t> BuyExceptMedicineItems; // 0x688(0x10)
	bool bCanBuyStuffItems; // 0x698(0x01)
	char pad_699[0x7]; // 0x699(0x07)
	struct TArray<int32_t> BuyOnlyStuffItems; // 0x6a0(0x10)
	struct TArray<int32_t> BuyExceptStuffItems; // 0x6b0(0x10)
	bool bCanBuyClothesItems; // 0x6c0(0x01)
	char pad_6C1[0x7]; // 0x6c1(0x07)
	struct TArray<int32_t> BuyOnlyClothesItems; // 0x6c8(0x10)
	struct TArray<int32_t> BuyExceptClothesItems; // 0x6d8(0x10)
	bool bCanBuyResourceItems; // 0x6e8(0x01)
	char pad_6E9[0x7]; // 0x6e9(0x07)
	struct TArray<int32_t> BuyOnlyResourceItems; // 0x6f0(0x10)
	struct TArray<int32_t> BuyExceptResourceItems; // 0x700(0x10)
	bool bCanBuyArtefactItems; // 0x710(0x01)
	char pad_711[0x7]; // 0x711(0x07)
	struct TArray<int32_t> BuyOnlyArtefactItems; // 0x718(0x10)
	struct TArray<int32_t> BuyExceptArtefactItems; // 0x728(0x10)
	bool CanBuyStrangeArtefactItems; // 0x738(0x01)
	bool bCanSellItems; // 0x739(0x01)
	char pad_73A[0x2]; // 0x73a(0x02)
	float SellBasePriceMultiplier; // 0x73c(0x04)
	float GenerateSellItemsTimerInterval; // 0x740(0x04)
	char pad_744[0x4]; // 0x744(0x04)
	struct TArray<struct FWTLGeneratedSellItemInfo> GeneratedSellItems; // 0x748(0x10)
	struct FWTLSellItems SellItems; // 0x758(0x70)
	struct TArray<struct FWTLSellItemsQuestRestrictions> SellItemsQuestRestrictions; // 0x7c8(0x10)
	struct FWTLSellItems CommissionSellItems; // 0x7d8(0x70)
	struct FWTLSellItems ExpiredCommissionSellItems; // 0x848(0x70)
	int32_t CommissionSellItemsPageCount; // 0x8b8(0x04)
	int32_t CommissionSellItemsPerPage; // 0x8bc(0x04)
	int32_t CommissionSellItemsCount; // 0x8c0(0x04)
	int32_t CommissionSellItemsPageIndex; // 0x8c4(0x04)
	struct TMap<enum class EWTLItemType, int32_t> CommissionSellItemsTypesCount; // 0x8c8(0x50)
	struct FWTLSellItems CommissionSellItemsPage; // 0x918(0x70)
	bool bCanGetCommissionItems; // 0x988(0x01)
	bool bCanGetWeaponCommissionItems; // 0x989(0x01)
	bool bCanGetAmmoCommissionItems; // 0x98a(0x01)
	bool bCanGetMedicineCommissionItems; // 0x98b(0x01)
	bool bCanGetStuffCommissionItems; // 0x98c(0x01)
	bool bCanGetClothesCommissionItems; // 0x98d(0x01)
	bool bCanGetResourceCommissionItems; // 0x98e(0x01)
	bool bCanGetArtefactCommissionItems; // 0x98f(0x01)
	float CommissionPercent; // 0x990(0x04)
	float CommissionMinItemPrice; // 0x994(0x04)
	float CommissionDayPrice; // 0x998(0x04)
	int32_t CommissionMaxDaysCount; // 0x99c(0x04)
	int32_t CommissionMaxItemCount; // 0x9a0(0x04)
	char pad_9A4[0x4]; // 0x9a4(0x04)
	struct TArray<struct FWTLNPCSupply> Supply; // 0x9a8(0x10)
	struct TArray<int32_t> SupplyListReplicaArray; // 0x9b8(0x10)
	struct TArray<int32_t> SupplyBuyReplicaArray; // 0x9c8(0x10)
	int32_t SupplyReturnReplicaID; // 0x9d8(0x04)
	int32_t MaxSupplyExperience; // 0x9dc(0x04)
	bool bHasPrivateStorage; // 0x9e0(0x01)
	char pad_9E1[0x3]; // 0x9e1(0x03)
	int32_t PrivateStoragePrice; // 0x9e4(0x04)
	char PrivateStorageSlotCount; // 0x9e8(0x01)
	char MaxPrivateStorageSlotCount; // 0x9e9(0x01)
	char pad_9EA[0x2]; // 0x9ea(0x02)
	int32_t PrivateStorageAdditionalSlotPrice; // 0x9ec(0x04)
	int32_t PrivateStorageSlotWeight; // 0x9f0(0x04)
	bool bHasClanStorage; // 0x9f4(0x01)
	char pad_9F5[0x3]; // 0x9f5(0x03)
	int32_t ClanStoragePrice; // 0x9f8(0x04)
	char ClanStorageTabSlots; // 0x9fc(0x01)
	char ClanStorageTabCount; // 0x9fd(0x01)
	char ClanStorageMaxTabCount; // 0x9fe(0x01)
	char pad_9FF[0x1]; // 0x9ff(0x01)
	int32_t ClanStorageAdditionalTabPrice; // 0xa00(0x04)
	char pad_A04[0x4]; // 0xa04(0x04)
	struct TArray<struct FWTLItemRequirement> ClanStorageAdditionalTabItemRequirements; // 0xa08(0x10)
	int32_t ClanStorageSlotWeight; // 0xa18(0x04)
	int32_t ClanStorageItemsLogPageCount; // 0xa1c(0x04)
	int32_t ClanStorageItemsLogRecordsPerPage; // 0xa20(0x04)
	int32_t ClanStorageItemsLogRecordCount; // 0xa24(0x04)
	int32_t ClanStorageItemsLogPageIndex; // 0xa28(0x04)
	char pad_A2C[0x4]; // 0xa2c(0x04)
	struct TArray<struct FWTLClanStorageItemLogRecord> ClanStorageItemsLogPage; // 0xa30(0x10)
	int32_t ClanStorageMoneyLogPageCount; // 0xa40(0x04)
	int32_t ClanStorageMoneyLogRecordsPerPage; // 0xa44(0x04)
	int32_t ClanStorageMoneyLogRecordCount; // 0xa48(0x04)
	int32_t ClanStorageMoneyLogPageIndex; // 0xa4c(0x04)
	struct TArray<struct FWTLClanStorageMoneyLogRecord> ClanStorageMoneyLogPage; // 0xa50(0x10)
	bool bCanRepairItems; // 0xa60(0x01)
	bool bCanRepairWeapon; // 0xa61(0x01)
	char pad_A62[0x2]; // 0xa62(0x02)
	int32_t MinWeaponConditionToRepair; // 0xa64(0x04)
	bool bCanRepairStuff; // 0xa68(0x01)
	char pad_A69[0x3]; // 0xa69(0x03)
	int32_t MinStuffConditionToRepair; // 0xa6c(0x04)
	bool bCanRepairClothes; // 0xa70(0x01)
	char pad_A71[0x3]; // 0xa71(0x03)
	int32_t MinClothesConditionToRepair; // 0xa74(0x04)
	int32_t RepairExperience; // 0xa78(0x04)
	float RepairPriceMultiplier; // 0xa7c(0x04)
	struct TArray<struct FWTLNPCIdleAnimation> IdleAnimations; // 0xa80(0x10)
	struct FName IdleAnimationSlotName; // 0xa90(0x08)
	bool LookAtTargetPlayer; // 0xa98(0x01)
	char pad_A99[0x7]; // 0xa99(0x07)
	struct TArray<int32_t> CharacterReplicaArrayMainDialog; // 0xaa0(0x10)
	struct TArray<int32_t> CharacterReplicaArrayEndDialog; // 0xab0(0x10)
	struct TArray<int32_t> CharacterReplicaArrayReMainDialog; // 0xac0(0x10)
	struct TArray<int32_t> NPCReplicaArrayHaveJob; // 0xad0(0x10)
	bool bCanCustomizeItems; // 0xae0(0x01)
	char pad_AE1[0x3]; // 0xae1(0x03)
	float CustomizationScalarPrice; // 0xae4(0x04)
	float CustomizationColorPrice; // 0xae8(0x04)
	char pad_AEC[0xc]; // 0xaec(0x0c)
	char IndexAnimIdle; // 0xaf8(0x01)
	char pad_AF9[0x3]; // 0xaf9(0x03)
	float HeadRotationSpeed; // 0xafc(0x04)

	void TravelCharacterToSafeZone(struct AWTLCharacter* Character, int32_t SafeZoneID, float TravelTime, int32_t Price, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.TravelCharacterToSafeZone // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1867f10
	void TravelCharacterToPoint(struct AWTLCharacter* Character, struct FVector DestLocation, float TravelTime, int32_t Price, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.TravelCharacterToPoint // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x18681c0
	void TravelCharacterToLocation(struct AWTLCharacter* Character, int32_t LocationID, int32_t PortalID, float TravelTime, int32_t Price, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.TravelCharacterToLocation // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1867bd0
	void TravelCharacterThroughPortal(struct AWTLCharacter* Character, int32_t PortalID, float TravelTime, int32_t Price, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.TravelCharacterThroughPortal // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1867f10
	void TakeMoneyFromCharacter(struct AWTLCharacter* Character, int32_t MoneyAmount, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.TakeMoneyFromCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1787aa0
	void ShowSupplyItemsDialog(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.ShowSupplyItemsDialog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17941a0
	void ShowSteamInventoryWidget(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.ShowSteamInventoryWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1869110
	void ShowRandomReplicaDialog(struct AWTLCharacter* Character, struct TArray<int32_t> NPCReplicaIDs, struct TArray<int32_t> CharacterReplicaIDArray); // Function WTL.WTLNPCActor.ShowRandomReplicaDialog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186b180
	void ShowQuestRewardInDialog(struct AWTLCharacter* Character, int32_t QuestID); // Function WTL.WTLNPCActor.ShowQuestRewardInDialog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186b4b0
	void ShowQuestDialog(struct AWTLCharacter* Character, struct FWTLQuestReplicas InQuestReplica); // Function WTL.WTLNPCActor.ShowQuestDialog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186a420
	void ShowQuestDecription(struct AWTLCharacter* Character, int32_t QuestID); // Function WTL.WTLNPCActor.ShowQuestDecription // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186a2c0
	void ShowPrivateStorage(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.ShowPrivateStorage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x18695d0
	void ShowDialogNPCTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.ShowDialogNPCTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186bad0
	void ShowDialogNPCCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.ShowDialogNPCCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186b850
	void ShowDialogIfQuestNotInState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState QuestState, int32_t NPCReplicaID, struct TArray<int32_t> CharacterReplicaIDArray); // Function WTL.WTLNPCActor.ShowDialogIfQuestNotInState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186a700
	void ShowDialogIfQuestInState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState QuestState, int32_t NPCReplicaID, struct TArray<int32_t> CharacterReplicaIDArray); // Function WTL.WTLNPCActor.ShowDialogIfQuestInState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186ac40
	void ShowDialog(struct AWTLCharacter* Character, int32_t NPCReplicaID, struct TArray<int32_t> CharacterReplicaIDArray); // Function WTL.WTLNPCActor.ShowDialog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186b610
	void ShowClanStorage(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.ShowClanStorage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1869230
	void ShowClanNameRequestWidget(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.ShowClanNameRequestWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17941a0
	void SetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState State, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.SetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1868ee0
	void SetIsActive(bool Value); // Function WTL.WTLNPCActor.SetIsActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void SetCharacterFaction(struct AWTLCharacter* Character, enum class EWTLFaction Faction, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.SetCharacterFaction // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18673f0
	void RemovePrivateStorage(struct AWTLCharacter* Character, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.RemovePrivateStorage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	void RemoveClanStorage(struct AWTLCharacter* Character, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.RemoveClanStorage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	void OnSetFactionEvent(enum class EWTLFaction Faction); // Function WTL.WTLNPCActor.OnSetFactionEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnSetFaction(enum class EWTLFaction Faction); // Function WTL.WTLNPCActor.OnSetFaction // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x18760d0
	void OnRep_NPCFaction(); // Function WTL.WTLNPCActor.OnRep_NPCFaction // (Final|Native|Private) // @ game+0x1876240
	void OnRep_IsActive(); // Function WTL.WTLNPCActor.OnRep_IsActive // (Final|Native|Private) // @ game+0x18761a0
	void OnPlayerSelectReplica(struct AWTLCharacter* Character, int32_t ReplicaID); // Function WTL.WTLNPCActor.OnPlayerSelectReplica // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnPlayerSelectClanName(struct AWTLCharacter* Character, struct FString ClanName); // Function WTL.WTLNPCActor.OnPlayerSelectClanName // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnNPCDialogActivated(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.OnNPCDialogActivated // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnMontageStarted(struct UAnimMontage* Montage); // Function WTL.WTLNPCActor.OnMontageStarted // (Final|Native|Private) // @ game+0x17941a0
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function WTL.WTLNPCActor.OnMontageEnded // (Final|Native|Private) // @ game+0x1875f70
	void OnIsActiveChanged(bool IsActive); // Function WTL.WTLNPCActor.OnIsActiveChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnFrightEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLNPCActor.OnFrightEndOverlap // (Final|Native|Public) // @ game+0x1875830
	void OnFrightBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLNPCActor.OnFrightBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x1875aa0
	void OnCharacterTakeQuest(struct AWTLCharacter* Character, int32_t QuestID); // Function WTL.WTLNPCActor.OnCharacterTakeQuest // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterExitFrightSphere(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.OnCharacterExitFrightSphere // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterEntersFrightSphere(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.OnCharacterEntersFrightSphere // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID); // Function WTL.WTLNPCActor.OnCharacterCompleteQuest // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnActionTrigger(struct FName ActionName); // Function WTL.WTLNPCActor.OnActionTrigger // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetFaction(enum class EWTLFaction Value); // Function WTL.WTLNPCActor.K2_SetFaction // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1866cf0
	void HealCharacter(struct AWTLCharacter* Character, float MinValue, float MaxValue, int32_t Price, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.HealCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1868470
	bool HaveSupplyItems(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.HaveSupplyItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186c120
	void GiveMoneyToCharacter(struct AWTLCharacter* Character, int32_t MoneyAmount, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.GiveMoneyToCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1787aa0
	void GiveItemToCharacter(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, int32_t Condition, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.GiveItemToCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1798410
	void GiveItemsToCharacter(struct AWTLCharacter* Character, struct TArray<struct FWTLGiveItemInfo> ItemsToGive, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.GiveItemsToCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1797cb0
	void GetReplicaDialogGreeting(struct AWTLCharacter* Character, enum class EWTLNPCCheckResult& Result, int32_t& QuestID, enum class EWTLNPCReplicaAction& OutAction, int32_t& NPCReplicaID, struct TArray<int32_t>& CharacterReplicaArray); // Function WTL.WTLNPCActor.GetReplicaDialogGreeting // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186bd50
	void GetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState& QuestState); // Function WTL.WTLNPCActor.GetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1875350
	void GetQuestReplicas(struct AWTLCharacter* Character, int32_t InQuestID, struct FWTLQuestReplicas& OutQuestReplicas); // Function WTL.WTLNPCActor.GetQuestReplicas // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1871060
	bool GetNewClanStorageTabPrice(struct AWTLCharacter* Character, int32_t& Price, struct TArray<struct FWTLItemRequirement>& Requirements); // Function WTL.WTLNPCActor.GetNewClanStorageTabPrice // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1868720
	int32_t GetItemRepairPrice(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Condition); // Function WTL.WTLNPCActor.GetItemRepairPrice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186c730
	bool GetIsActive(); // Function WTL.WTLNPCActor.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1875f50
	enum class EWTLSex GetCharacterSex(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterSex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186cdd0
	char GetCharacterPrivateStorageSlotCount(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterPrivateStorageSlotCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186dc80
	float GetCharacterMaxHealth(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186d030
	char GetCharacterLevel(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186f470
	int32_t GetCharacterInventoryAvailableSlotCount(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterInventoryAvailableSlotCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186ccf0
	float GetCharacterHealthPercent(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterHealthPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186cef0
	float GetCharacterHealth(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186d120
	void GetCharacterFaction(struct AWTLCharacter* Character, enum class EWTLFaction& Faction); // Function WTL.WTLNPCActor.GetCharacterFaction // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x17838e0
	enum class EWTLCharacterClass GetCharacterClass(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186f200
	char GetCharacterClanStorageTabCount(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.GetCharacterClanStorageTabCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186d460
	void FillDataToQuestArray(); // Function WTL.WTLNPCActor.FillDataToQuestArray // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x18756e0
	void EndDialog(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.EndDialog // (Final|Native|Public|BlueprintCallable) // @ game+0x186a1f0
	void CreatePrivateStorage(struct AWTLCharacter* Character, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.CreatePrivateStorage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	void CreateMapMarker(struct AWTLCharacter* Character, struct FVector MarkerPosition, struct FString MarkerName, bool ShowOnMinimap, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.CreateMapMarker // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1867750
	void CreateClanStorage(struct AWTLCharacter* Character, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.CreateClanStorage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	void CreateClan(struct AWTLCharacter* Character, struct FString ClanName, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.CreateClan // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1866da0
	void CheckReplicaForTakeQuestWithDialog(struct AWTLCharacter* Character, int32_t ReplicaID, int32_t DialogReplicaID, struct TArray<int32_t> DialogReplicaArray, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForTakeQuestWithDialog // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18733d0
	void CheckReplicaForTakeQuest(struct AWTLCharacter* Character, int32_t ReplicaID, enum class EWTLNPCCheckResult& Result, int32_t& QuestID, enum class EWTLNPCReplicaAction& OutAction, enum class EWTLNPCReason& Reason); // Function WTL.WTLNPCActor.CheckReplicaForTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1873770
	void CheckReplicaForSupply(struct AWTLCharacter* Character, int32_t ReplicaID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForSupply // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1871890
	void CheckReplicaForReMainDialog(int32_t ReplicaID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForReMainDialog // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1872520
	void CheckReplicaForRejectQuest(struct AWTLCharacter* Character, int32_t ReplicaID, enum class EWTLNPCCheckResult& Result, int32_t& QuestID, enum class EWTLNPCReplicaAction& OutAction); // Function WTL.WTLNPCActor.CheckReplicaForRejectQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1873060
	void CheckReplicaForQuestDialog(struct AWTLCharacter* Character, int32_t ReplicaID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForQuestDialog // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18726a0
	void CheckReplicaForQuestDescription(struct AWTLCharacter* Character, int32_t ReplicaID, int32_t DescriptionReplicaID, int32_t ReturnReplicaID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForQuestDescription // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1873b10
	void CheckReplicaForInfoQuest(struct AWTLCharacter* Character, int32_t ReplicaID, enum class EWTLNPCCheckResult& Result, struct FWTLQuestReplicas& OutQuestReplica); // Function WTL.WTLNPCActor.CheckReplicaForInfoQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1871b80
	void CheckReplicaForHaveJob(int32_t ReplicaID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForHaveJob // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1872220
	void CheckReplicaForEndDialog(int32_t ReplicaID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForEndDialog // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18723a0
	void CheckReplicaForCompleteQuestWithDialog(struct AWTLCharacter* Character, int32_t ReplicaID, int32_t DialogReplicaID, struct TArray<int32_t> DialogReplicaArray, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckReplicaForCompleteQuestWithDialog // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1872870
	void CheckReplicaForCompleteQuest(struct AWTLCharacter* Character, int32_t ReplicaID, enum class EWTLNPCCheckResult& Result, int32_t& QuestID, enum class EWTLNPCReplicaAction& OutAction, enum class EWTLNPCReason& Reason); // Function WTL.WTLNPCActor.CheckReplicaForCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1872cc0
	void CheckCharacterHavePrivateStorage(struct AWTLCharacter* Character, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckCharacterHavePrivateStorage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186df10
	void CheckCharacterHaveEnoughMoney(struct AWTLCharacter* Character, int32_t MoneyAmount, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckCharacterHaveEnoughMoney // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186e490
	bool CheckCharacterHaveEnoughAvailableInventorySlots(struct AWTLCharacter* Character, int32_t Count); // Function WTL.WTLNPCActor.CheckCharacterHaveEnoughAvailableInventorySlots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186cb90
	void CheckCharacterHaveClanStorage(struct AWTLCharacter* Character, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckCharacterHaveClanStorage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186d700
	bool CheckCharacterHaveAvailableInventorySlots(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.CheckCharacterHaveAvailableInventorySlots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186ca90
	void CheckCharacterCanCreateClanStorage(struct AWTLCharacter* Character, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CheckCharacterCanCreateClanStorage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186d220
	bool CharacterHavePrivateStorage(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.CharacterHavePrivateStorage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186e210
	bool CharacterHaveItems(struct AWTLCharacter* Character, struct TArray<struct FWTLTakeItemInfo> Items); // Function WTL.WTLNPCActor.CharacterHaveItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186ea90
	bool CharacterHaveItem(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count); // Function WTL.WTLNPCActor.CharacterHaveItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186ecc0
	bool CharacterHaveEnoughMoney(struct AWTLCharacter* Character, int32_t MoneyAmount); // Function WTL.WTLNPCActor.CharacterHaveEnoughMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186e7d0
	bool CharacterHaveClanStorage(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.CharacterHaveClanStorage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186da00
	bool CharacterCustomized(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.CharacterCustomized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186c9c0
	void CharacterCanTakeQuestList(struct AWTLCharacter* Character, struct TArray<struct FWTLQuestInfo> InQuestArray, struct TArray<struct FWTLQuestInfo>& OutQuestArray); // Function WTL.WTLNPCActor.CharacterCanTakeQuestList // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1871380
	void CharacterCanTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1874ca0
	void CharacterCanTakeAnyQuestFromQuestArray(struct AWTLCharacter* Character, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanTakeAnyQuestFromQuestArray // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1874660
	void CharacterCanTakeAnyQuest(struct AWTLCharacter* Character, struct TArray<int32_t> QuestIDs, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanTakeAnyQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18747b0
	bool CharacterCanCreateClanStorage(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.CharacterCanCreateClanStorage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186d370
	bool CharacterCanCreateClan(struct AWTLCharacter* Character, bool DoFullCheck); // Function WTL.WTLNPCActor.CharacterCanCreateClan // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1866fd0
	void CharacterCanCompleteQuestList(struct AWTLCharacter* Character, struct TArray<struct FWTLQuestInfo> InQuestArray, struct TArray<struct FWTLQuestInfo>& OutQuestArray); // Function WTL.WTLNPCActor.CharacterCanCompleteQuestList // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1870da0
	void CharacterCanCompleteQuestFromQuestArray(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanCompleteQuestFromQuestArray // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1874200
	void CharacterCanCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1874480
	void CharacterCanCompleteAnyQuestFromQuestArray(struct AWTLCharacter* Character, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanCompleteAnyQuestFromQuestArray // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1873df0
	void CharacterCanCompleteAnyQuest(struct AWTLCharacter* Character, struct TArray<int32_t> QuestIDs, enum class EWTLNPCCheckResult& Result); // Function WTL.WTLNPCActor.CharacterCanCompleteAnyQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1873f40
	void ChangeCharacterSex(struct AWTLCharacter* Character, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.ChangeCharacterSex // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18675b0
	bool CanTrade(); // Function WTL.WTLNPCActor.CanTrade // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1875700
	bool CanRepairItem(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Condition); // Function WTL.WTLNPCActor.CanRepairItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186c4a0
	bool CanDialog(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.CanDialog // (Native|Event|Public|BlueprintEvent) // @ game+0x1875740
	void BranchCharacterClass(struct AWTLCharacter* Character, enum class EWTLCharacterClass& CharacterClass); // Function WTL.WTLNPCActor.BranchCharacterClass // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186ef40
	void BP_CustomTrigger(struct FName TriggerName); // Function WTL.WTLNPCActor.BP_CustomTrigger // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BeginWeaponPartsExchange(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.BeginWeaponPartsExchange // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1869960
	void BeginTrade(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.BeginTrade // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x186a110
	void BeginRepair(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.BeginRepair // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1869e80
	void BeginItemsCustomization(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.BeginItemsCustomization // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1869bf0
	void AddTabToClanStorage(struct AWTLCharacter* Character, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.AddTabToClanStorage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x178c090
	void AddSlotsToPrivateStorage(struct AWTLCharacter* Character, char SlotCount, enum class EWTLNPCActionResult& Result); // Function WTL.WTLNPCActor.AddSlotsToPrivateStorage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1868d30
	void AddReplicaIfQuestNotInState(struct AWTLCharacter* Character, struct TArray<int32_t> InReplicaArray, int32_t QuestID, enum class EWTLQuestState QuestState, int32_t AddReplicaID, struct TArray<int32_t>& OutReplicaArray); // Function WTL.WTLNPCActor.AddReplicaIfQuestNotInState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1870280
	void AddReplicaIfQuestInState(struct AWTLCharacter* Character, struct TArray<int32_t> InReplicaArray, int32_t QuestID, enum class EWTLQuestState QuestState, int32_t AddReplicaID, struct TArray<int32_t>& OutReplicaArray); // Function WTL.WTLNPCActor.AddReplicaIfQuestInState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1870810
	void AddReplicaIfCharacterCanTakeQuest(struct AWTLCharacter* Character, struct TArray<int32_t> InReplicaArray, int32_t QuestID, int32_t AddReplicaID, struct TArray<int32_t>& OutReplicaArray); // Function WTL.WTLNPCActor.AddReplicaIfCharacterCanTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186fa70
	void AddReplicaIfCharacterCanCompleteQuest(struct AWTLCharacter* Character, struct TArray<int32_t> InReplicaArray, int32_t QuestID, int32_t AddReplicaID, struct TArray<int32_t>& OutReplicaArray); // Function WTL.WTLNPCActor.AddReplicaIfCharacterCanCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x186f6e0
	void ActivateDialog(struct AWTLCharacter* Character); // Function WTL.WTLNPCActor.ActivateDialog // (Final|Native|Public|BlueprintCallable) // @ game+0x1875e50
};

// Class WTL.WTLNPCAnimInstance
// Size: 0x300 (Inherited: 0x2c0)
struct UWTLNPCAnimInstance : UAnimInstance {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct AWTLCharacter* CharacterInRange; // 0x2c8(0x08)
	bool HaveCharacterInRange; // 0x2d0(0x01)
	bool NeedToTurnHeadToCharacter; // 0x2d1(0x01)
	char pad_2D2[0x2]; // 0x2d2(0x02)
	struct FRotator RotationHead; // 0x2d4(0x0c)
	struct FVector CharacterInRangeEyesPosition; // 0x2e0(0x0c)
	float IndexIdleAnim; // 0x2ec(0x04)
	float GreetingAnimationAlpha; // 0x2f0(0x04)
	float MoveSpeedValue; // 0x2f4(0x04)
	float MoveTurnValue; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void OnActionTrigger(struct FName ActionName); // Function WTL.WTLNPCAnimInstance.OnActionTrigger // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLNPCEnvironmentActor
// Size: 0x270 (Inherited: 0x220)
struct AWTLNPCEnvironmentActor : AActor {
	struct UCapsuleComponent* Capsule; // 0x220(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x228(0x08)
	struct USkeletalMeshComponent* MeshHead; // 0x230(0x08)
	struct USkeletalMeshComponent* MeshTorso; // 0x238(0x08)
	struct USkeletalMeshComponent* MeshLegs; // 0x240(0x08)
	struct USkeletalMeshComponent* MeshFeet; // 0x248(0x08)
	struct USkeletalMeshComponent* MeshHeadSlot; // 0x250(0x08)
	struct USkeletalMeshComponent* MeshTorsoSlot; // 0x258(0x08)
	struct USkeletalMeshComponent* MeshLegsSlot; // 0x260(0x08)
	struct USkeletalMeshComponent* MeshFeetSlot; // 0x268(0x08)

	void OnActionTrigger(struct FName ActionName); // Function WTL.WTLNPCEnvironmentActor.OnActionTrigger // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLNPCPawnAI
// Size: 0x378 (Inherited: 0x280)
struct AWTLNPCPawnAI : APawn {
	struct UCapsuleComponent* Capsule; // 0x280(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x288(0x08)
	struct USkeletalMeshComponent* MeshHead; // 0x290(0x08)
	struct USkeletalMeshComponent* MeshTorso; // 0x298(0x08)
	struct USkeletalMeshComponent* MeshLegs; // 0x2a0(0x08)
	struct USkeletalMeshComponent* MeshFeet; // 0x2a8(0x08)
	struct USkeletalMeshComponent* MeshHeadSlot; // 0x2b0(0x08)
	struct USkeletalMeshComponent* MeshTorsoSlot; // 0x2b8(0x08)
	struct USkeletalMeshComponent* MeshLegsSlot; // 0x2c0(0x08)
	struct USkeletalMeshComponent* MeshFeetSlot; // 0x2c8(0x08)
	struct UWTLPawnMovementComponent* MovementComponent; // 0x2d0(0x08)
	char pad_2D8[0x40]; // 0x2d8(0x40)
	float CurrentSpeed; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct TSoftClassPtr<UObject> WeaponPickup; // 0x320(0x28)
	struct TSoftClassPtr<UObject> AmmoPickup; // 0x348(0x28)
	float MinDamage; // 0x370(0x04)
	float MaxDamage; // 0x374(0x04)

	bool Shot(struct FTransform SpawnTransform); // Function WTL.WTLNPCPawnAI.Shot // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x18791b0
	void OnReplicatedMovement(float DeltaTime); // Function WTL.WTLNPCPawnAI.OnReplicatedMovement // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLNut
// Size: 0x2d0 (Inherited: 0x220)
struct AWTLNut : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct UStaticMeshComponent* MeshComp; // 0x230(0x08)
	struct UWTLProjectileMovementComponent* MovementComponent; // 0x238(0x08)
	struct TSoftObjectPtr<UFMODEvent> SurfaceHitEvent; // 0x240(0x28)
	struct TSoftObjectPtr<UParticleSystem> SurfaceHitParticles; // 0x268(0x28)
	struct FVector SurfaceHitParticleScale; // 0x290(0x0c)
	struct FName SurfaceHitNoiseName; // 0x29c(0x08)
	float m_ReplicatedInitialSpeed; // 0x2a4(0x04)
	struct FVector m_ThrowVector; // 0x2a8(0x0c)
	char pad_2B4[0x1c]; // 0x2b4(0x1c)

	void OnRep_ReplicatedInitialSpeed(); // Function WTL.WTLNut.OnRep_ReplicatedInitialSpeed // (Final|Native|Private) // @ game+0x1879820
	void OnHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function WTL.WTLNut.OnHit // (Native|Public|HasOutParms|HasDefaults) // @ game+0x18794f0
	void ChangeSpeedAndDirection(float Speed, struct FVector Direction); // Function WTL.WTLNut.ChangeSpeedAndDirection // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x18793b0
};

// Class WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UWTLNvidiaHighlightsBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	void OpenSummary(struct UObject* WorldContext); // Function WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary.OpenSummary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x187a400
	bool GetIsHighlightsInitialized(struct UObject* WorldContext); // Function WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary.GetIsHighlightsInitialized // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1879fc0
	int32_t GetHighlightsCount(struct UObject* WorldContext); // Function WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary.GetHighlightsCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x187a1e0
	struct FString GetCurrentGroupName(struct UObject* WorldContext); // Function WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary.GetCurrentGroupName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1879d20
	void CaptureVideo(struct UObject* WorldContext, enum class EWTLHighlightID HighlightId, float BeginDeltaSeconds, float EndDeltaSeconds); // Function WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary.CaptureVideo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x187a600
	void CaptureScreenshot(struct UObject* WorldContext, enum class EWTLHighlightID HighlightId); // Function WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary.CaptureScreenshot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x187a9b0
};

// Class WTL.WTLNvidiaHighlightsLibrary
// Size: 0xe8 (Inherited: 0x28)
struct UWTLNvidiaHighlightsLibrary : UObject {
	char pad_28[0xc0]; // 0x28(0xc0)

	void Dummy(); // Function WTL.WTLNvidiaHighlightsLibrary.Dummy // (Final|Native|Private) // @ game+0xe77850
};

// Class WTL.WTLObjectForActivation
// Size: 0x268 (Inherited: 0x220)
struct AWTLObjectForActivation : AActor {
	char pad_220[0x2c]; // 0x220(0x2c)
	bool bIsMoveBack; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	float DelayMoveBack; // 0x250(0x04)
	float DurationMove; // 0x254(0x04)
	struct AActor* aEndPosition; // 0x258(0x08)
	uint32_t NumberActivationsToActivate; // 0x260(0x04)
	int32_t DirectionActivate; // 0x264(0x04)
};

// Class WTL.WTLObstacleCourseEndVolume
// Size: 0x258 (Inherited: 0x258)
struct AWTLObstacleCourseEndVolume : AVolume {

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLObstacleCourseEndVolume.OnVolumeEndOverlap // (Final|Native|Private) // @ game+0x187af50
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLObstacleCourseEndVolume.OnVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x187b1c0
};

// Class WTL.WTLObstacleCourseHelpButton
// Size: 0x270 (Inherited: 0x220)
struct AWTLObstacleCourseHelpButton : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	int32_t TutorialMessageID; // 0x228(0x04)
	struct FVector NextStageTeleportLocation; // 0x22c(0x0c)
	float NextStageTeleportRotationYaw; // 0x238(0x04)
	struct FVector PreviousStageTeleportLocation; // 0x23c(0x0c)
	float PreviousStageTeleportRotationYaw; // 0x248(0x04)
	struct FVector EndPointTeleportLocation; // 0x24c(0x0c)
	float EndPointTeleportRotationYaw; // 0x258(0x04)
	struct FVector ExitPointTeleportLocation; // 0x25c(0x0c)
	float ExitPointTeleportRotationYaw; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
};

// Class WTL.WTLObstacleCourseTimeChecker
// Size: 0x278 (Inherited: 0x258)
struct AWTLObstacleCourseTimeChecker : AVolume {
	struct AWTLCharacter* m_Character; // 0x258(0x08)
	char pad_260[0x4]; // 0x260(0x04)
	float SkipObstacleCourseOfferTime; // 0x264(0x04)
	struct FVector EndPointTeleportLocation; // 0x268(0x0c)
	float EndPointTeleportRotationYaw; // 0x274(0x04)

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLObstacleCourseTimeChecker.OnVolumeEndOverlap // (Final|Native|Private) // @ game+0x187b980
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLObstacleCourseTimeChecker.OnVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x187bbf0
	void OnObstacleCourseSkipConfirmed(); // Function WTL.WTLObstacleCourseTimeChecker.OnObstacleCourseSkipConfirmed // (Final|Native|Private) // @ game+0x187b7f0
	void OnMessageDialogHide(); // Function WTL.WTLObstacleCourseTimeChecker.OnMessageDialogHide // (Final|Native|Private) // @ game+0x187b7d0
};

// Class WTL.WTLOptionsActionKeyBinder
// Size: 0x2d0 (Inherited: 0x260)
struct UWTLOptionsActionKeyBinder : UUserWidget {
	struct UTextBlock* tbActionName; // 0x260(0x08)
	struct UButton* btnMainActionKey; // 0x268(0x08)
	struct UTextBlock* tbMainActionKeyName; // 0x270(0x08)
	char pad_278[0x40]; // 0x278(0x40)
	struct FText NoneKeyDefaultText; // 0x2b8(0x18)

	void OnMainActionKeyBtnClick(); // Function WTL.WTLOptionsActionKeyBinder.OnMainActionKeyBtnClick // (Final|Native|Private) // @ game+0x187c100
	void OnAlternateActionKeyBtnClick(); // Function WTL.WTLOptionsActionKeyBinder.OnAlternateActionKeyBtnClick // (Final|Native|Private) // @ game+0x187c0c0
};

// Class WTL.WTLOptionsBase
// Size: 0x288 (Inherited: 0x260)
struct UWTLOptionsBase : UUserWidget {
	struct UWTLCommonMessageDialog* m_MessageDialogWidget; // 0x260(0x08)
	struct UVerticalBox* vbSettingsList; // 0x268(0x08)
	char pad_270[0x18]; // 0x270(0x18)
};

// Class WTL.WTLOptionsAudio
// Size: 0x41ba0 (Inherited: 0x288)
struct UWTLOptionsAudio : UWTLOptionsBase {
	struct UWTLCommonComboBoxString* cbsAudioDrivers; // 0x288(0x08)
	struct UWTLCommonComboBoxString* cbsSpeakerMode; // 0x290(0x08)
	struct UWTLOptionsParameterSwitcher* psAudioQualityLevel; // 0x298(0x08)
	struct UWTLOptionsParameterSliderPercent* psMasterVolume; // 0x2a0(0x08)
	struct UWTLOptionsParameterSliderPercent* psMusicVolume; // 0x2a8(0x08)
	struct UWTLOptionsParameterSliderPercent* psEffectsVolume; // 0x2b0(0x08)
	struct UWTLOptionsParameterSliderPercent* psCharacterVoiceVolume; // 0x2b8(0x08)
	struct UWTLOptionsParameterSliderPercent* psSpeechVolume; // 0x2c0(0x08)
	struct UWTLOptionsParameterSliderPercent* psUIVolume; // 0x2c8(0x08)
	struct UWTLCommonCheckBox* cbVOIP; // 0x2d0(0x08)
	struct UWidgetSwitcher* wsRecordDevices; // 0x2d8(0x08)
	struct UWTLCommonComboBoxString* cbsRecordDevices; // 0x2e0(0x08)
	struct UCanvasPanel* cpMicCheck; // 0x2e8(0x08)
	struct UWTLCommonTextButton* ucBtnMicCheck; // 0x2f0(0x08)
	struct UCanvasPanel* cpMicLoudness; // 0x2f8(0x08)
	struct UProgressBar* pbMicLoudness; // 0x300(0x08)
	char pad_308[0x41898]; // 0x308(0x41898)

	void OnRecordDevicesSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLOptionsAudio.OnRecordDevicesSelectionChanged // (Final|Native|Private) // @ game+0x187c2c0
	void OnMicCheckButtonClicked(); // Function WTL.WTLOptionsAudio.OnMicCheckButtonClicked // (Final|Native|Private) // @ game+0x187c2a0
	void OnAudioDriverSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLOptionsAudio.OnAudioDriverSelectionChanged // (Final|Native|Private) // @ game+0x187c480
};

// Class WTL.WTLOptionsControl
// Size: 0x3e0 (Inherited: 0x288)
struct UWTLOptionsControl : UWTLOptionsBase {
	struct UScrollBox* sbSettingsList; // 0x288(0x08)
	struct UWTLOptionsParameterSliderBase* psMouseSensitivity; // 0x290(0x08)
	struct UWTLOptionsParameterSliderBase* psMouseSensitivityInMiniGames; // 0x298(0x08)
	struct UWTLCommonCheckBox* cbMouseInvert; // 0x2a0(0x08)
	struct UHorizontalBox* hbGamepadAimingSensitivity; // 0x2a8(0x08)
	struct UHorizontalBox* hbGamepadAimingInvert; // 0x2b0(0x08)
	struct UWTLOptionsParameterSliderBase* psGamepadAimingSensitivity; // 0x2b8(0x08)
	struct UWTLCommonCheckBox* cbGamepadAimingInvert; // 0x2c0(0x08)
	struct UWTLCommonCheckBox* cbChangeSensitivityOnAimValue; // 0x2c8(0x08)
	struct UWTLOptionsParameterSwitcher* psAimMode; // 0x2d0(0x08)
	struct UWTLCommonCheckBox* cbAutomaticallyReloadValue; // 0x2d8(0x08)
	struct UWTLOptionsParameterSwitcher* psCrouchMode; // 0x2e0(0x08)
	struct UWTLOptionsParameterSwitcher* psSprintMode; // 0x2e8(0x08)
	struct UScrollBox* sbInputSettings; // 0x2f0(0x08)
	struct UVerticalBox* vbInputSettings; // 0x2f8(0x08)
	struct UVerticalBox* vbMovement; // 0x300(0x08)
	struct UVerticalBox* vbActions; // 0x308(0x08)
	struct UVerticalBox* vbSlots; // 0x310(0x08)
	struct UVerticalBox* vbHUD; // 0x318(0x08)
	struct UVerticalBox* vbPDA; // 0x320(0x08)
	struct UVerticalBox* vbCommunication; // 0x328(0x08)
	struct UButton* btnResetMainInputs; // 0x330(0x08)
	char pad_338[0x80]; // 0x338(0x80)
	struct TSoftClassPtr<UObject> ActionKeyBinderClass; // 0x3b8(0x28)

	void ResetMainInputs(); // Function WTL.WTLOptionsControl.ResetMainInputs // (Final|Native|Private) // @ game+0x187cc10
	void ResetButtonForResetOnAnotherAction(); // Function WTL.WTLOptionsControl.ResetButtonForResetOnAnotherAction // (Final|Native|Private) // @ game+0x187ca90
	void ResetAlternateInputs(); // Function WTL.WTLOptionsControl.ResetAlternateInputs // (Final|Native|Private) // @ game+0x187cbf0
	void OnMainInputsResetBtnClick(); // Function WTL.WTLOptionsControl.OnMainInputsResetBtnClick // (Final|Native|Private) // @ game+0x187cc50
	void OnInputWantToReset(struct UWTLOptionsActionKeyBinder* ActionKeyBinder, bool IsMainKeyReset, struct FKey& ResetToKey); // Function WTL.WTLOptionsControl.OnInputWantToReset // (Final|Native|Private|HasOutParms) // @ game+0x187c830
	void OnInputStartBind(struct UWTLOptionsActionKeyBinder* ActionKeyBinder); // Function WTL.WTLOptionsControl.OnInputStartBind // (Final|Native|Private) // @ game+0x187cab0
	void OnAlternateInputsResetBtnClick(); // Function WTL.WTLOptionsControl.OnAlternateInputsResetBtnClick // (Final|Native|Private) // @ game+0x187cc30
	void InputWantToResetConfirmed(); // Function WTL.WTLOptionsControl.InputWantToResetConfirmed // (Final|Native|Private) // @ game+0x187ca50
	void InputBindConfirmed(); // Function WTL.WTLOptionsControl.InputBindConfirmed // (Final|Native|Private) // @ game+0x187cbd0
	void InputBindCanceled(); // Function WTL.WTLOptionsControl.InputBindCanceled // (Final|Native|Private) // @ game+0x187cbb0
};

// Class WTL.WTLOptionsGame
// Size: 0x310 (Inherited: 0x288)
struct UWTLOptionsGame : UWTLOptionsBase {
	struct UEditableTextBox* etbHost; // 0x288(0x08)
	struct UWTLCommonComboBoxString* cbsLanguage; // 0x290(0x08)
	struct UWTLCommonCheckBox* cbEnableTutorial; // 0x298(0x08)
	struct UWTLCommonCheckBox* cbTrackVehicleTurnWithCamera; // 0x2a0(0x08)
	struct UWTLCommonCheckBox* cbRotateCameraInIdle; // 0x2a8(0x08)
	struct UWTLOptionsParameterSliderBase* psCameraSpeedInIdle; // 0x2b0(0x08)
	struct UWTLCommonCheckBox* cbAutomaticallyAcceptMarkers; // 0x2b8(0x08)
	struct UWTLCommonCheckBox* cbCacheAssetsOnStartup; // 0x2c0(0x08)
	struct UWTLCommonCheckBox* cbNVIDIAHighlights; // 0x2c8(0x08)
	char pad_2D0[0x40]; // 0x2d0(0x40)

	void OnNVIDIAHighlightsCheckStateChanged(bool bIsChecked); // Function WTL.WTLOptionsGame.OnNVIDIAHighlightsCheckStateChanged // (Final|Native|Private) // @ game+0x187cff0
	void OnLanguageSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLOptionsGame.OnLanguageSelectionChanged // (Final|Native|Private) // @ game+0x187d1b0
	void OnCacheAssetsOnStartupCheckStateChanged(bool bIsChecked); // Function WTL.WTLOptionsGame.OnCacheAssetsOnStartupCheckStateChanged // (Final|Native|Private) // @ game+0x187d0d0
};

// Class WTL.WTLOptionsGraphic
// Size: 0x4b8 (Inherited: 0x288)
struct UWTLOptionsGraphic : UWTLOptionsBase {
	struct UCanvasPanel* cpPrimaryMonitorInfo; // 0x288(0x08)
	struct UTextBlock* tbPrimaryMonitorName; // 0x290(0x08)
	struct UWTLCommonButton* ucBtnDisplayOnPrimaryMonitor; // 0x298(0x08)
	struct UWTLCommonComboBoxString* cbsRenderer; // 0x2a0(0x08)
	struct UWTLOptionsParameterSwitcher* psResolution; // 0x2a8(0x08)
	struct UWTLOptionsParameterSliderPercent* psResolutionScale; // 0x2b0(0x08)
	struct UWTLOptionsParameterSwitcher* psScreenMode; // 0x2b8(0x08)
	struct UWTLOptionsParameterSwitcher* psVSync; // 0x2c0(0x08)
	struct UWTLOptionsParameterSliderBase* psFOV; // 0x2c8(0x08)
	struct UImage* imgTextureStreamingWarning; // 0x2d0(0x08)
	struct UWTLOptionsParameterSwitcher* psTextureStreaming; // 0x2d8(0x08)
	struct UWTLOptionsParameterSwitcher* psPoolSize; // 0x2e0(0x08)
	struct UWTLUtilityNumberTextBox* ntbFrameLimit; // 0x2e8(0x08)
	struct UWTLCommonCheckBox* cbFullDynamicLight; // 0x2f0(0x08)
	struct UWTLOptionsParameterSwitcher* psFSR2; // 0x2f8(0x08)
	struct UWTLOptionsParameterSliderBase* psFSR2Sharpness; // 0x300(0x08)
	struct UWTLCommonCheckBox* cbContactShadows; // 0x308(0x08)
	struct UWTLOptionsParameterSwitcher* psAmbientOcclusionType; // 0x310(0x08)
	struct UImage* imgCloudsTypeWarning; // 0x318(0x08)
	struct UWTLOptionsParameterSwitcher* psCloudsType; // 0x320(0x08)
	struct UWTLOptionsParameterSliderBase* psMotionBlur; // 0x328(0x08)
	struct UWTLOptionsParameterSwitcher* psMotionBlurQuality; // 0x330(0x08)
	struct UWTLCommonCheckBox* cbTemporalAA; // 0x338(0x08)
	struct UWTLOptionsParameterSwitcher* psTemporalAAQuality; // 0x340(0x08)
	struct UWTLOptionsParameterSliderBase* psImageSharpness; // 0x348(0x08)
	struct UWTLOptionsParameterSwitcher* psOverallScalabilityLevel; // 0x350(0x08)
	struct UWTLOptionsParameterSwitcher* psViewDistance; // 0x358(0x08)
	struct UWTLOptionsParameterSwitcher* psAntiAliasing; // 0x360(0x08)
	struct UWTLOptionsParameterSwitcher* psPostProcessing; // 0x368(0x08)
	struct UWTLOptionsParameterSwitcher* psShadow; // 0x370(0x08)
	struct UWTLOptionsParameterSwitcher* psTexture; // 0x378(0x08)
	struct UWTLCommonCheckBox* cbShowEffectsAfterDeath; // 0x380(0x08)
	struct UWTLCommonCheckBox* cbShowWindEffects; // 0x388(0x08)
	char pad_390[0x110]; // 0x390(0x110)
	struct FText TextureStreamingWarningText; // 0x4a0(0x18)

	void OnTextureStreamingChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLOptionsGraphic.OnTextureStreamingChanged // (Final|Native|Private) // @ game+0x187d750
	void OnScreenModeChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLOptionsGraphic.OnScreenModeChanged // (Final|Native|Private) // @ game+0x187dc00
	void OnResolutionChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLOptionsGraphic.OnResolutionChanged // (Final|Native|Private) // @ game+0x187dd90
	void OnRendererChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLOptionsGraphic.OnRendererChanged // (Final|Native|Private) // @ game+0x187df10
	void OnQualityLevelChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLOptionsGraphic.OnQualityLevelChanged // (Final|Native|Private) // @ game+0x187d8e0
	void OnDisplayOnPrimaryMonitorBtnClicked(); // Function WTL.WTLOptionsGraphic.OnDisplayOnPrimaryMonitorBtnClicked // (Final|Native|Private) // @ game+0x187e0d0
	void OnCommonQualityLevelChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLOptionsGraphic.OnCommonQualityLevelChanged // (Final|Native|Private) // @ game+0x187da70
	void OnCloudsTypeChanged(int32_t CurrentIndex, struct FString Prefix); // Function WTL.WTLOptionsGraphic.OnCloudsTypeChanged // (Final|Native|Private) // @ game+0x187d520
};

// Class WTL.WTLOptionsIdentification
// Size: 0x2e0 (Inherited: 0x288)
struct UWTLOptionsIdentification : UWTLOptionsBase {
	struct UWTLCommonCheckBox* cbPlayersIdentification; // 0x288(0x08)
	struct UWTLCommonCheckBox* cbMonstersIdentification; // 0x290(0x08)
	struct UWTLUtilityNumberTextBox* ntbMonstersSimplifiedIdentificationEnableDistance; // 0x298(0x08)
	struct UWTLCommonCheckBox* cbNPCIdentification; // 0x2a0(0x08)
	struct UWTLCommonCheckBox* cbAlwaysShowGroupAndClanMembers; // 0x2a8(0x08)
	struct UWTLCommonCheckBox* cbAlwaysShowFriendlyDevices; // 0x2b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbSimplifiedIdentificationEnableDistance; // 0x2b8(0x08)
	struct UWTLOptionsParameterSliderPercent* psIdentificationTransparency; // 0x2c0(0x08)
	char pad_2C8[0x18]; // 0x2c8(0x18)
};

// Class WTL.WTLOptionsInterface
// Size: 0x3b8 (Inherited: 0x288)
struct UWTLOptionsInterface : UWTLOptionsBase {
	struct UWTLCommonCheckBox* cbCrosshairVisibility; // 0x288(0x08)
	struct UWTLCommonColorButton* ucCrosshairColorBtn; // 0x290(0x08)
	struct UWTLCommonCheckBox* cbPlayerStatusVisibility; // 0x298(0x08)
	struct UWTLCommonCheckBox* cbWeaponInfoVisibility; // 0x2a0(0x08)
	struct UWTLCommonCheckBox* cbFastAccessSlotsVisibility; // 0x2a8(0x08)
	struct UWTLCommonCheckBox* cbLevelBarVisibility; // 0x2b0(0x08)
	struct UWTLCommonCheckBox* cbMinimapVisibility; // 0x2b8(0x08)
	struct UWTLCommonCheckBox* cbMinimapTimeVisibility; // 0x2c0(0x08)
	struct UWTLCommonCheckBox* cbShowMinimapLocalTime; // 0x2c8(0x08)
	struct UWTLCommonCheckBox* cbTextChatAreaVisibility; // 0x2d0(0x08)
	struct UWTLCommonCheckBox* cbFPSCounterVisibility; // 0x2d8(0x08)
	struct UWTLCommonCheckBox* cbShowDamageIdentification; // 0x2e0(0x08)
	struct UWTLCommonCheckBox* cbCollapseChatAfterMessageSentValue; // 0x2e8(0x08)
	struct UWTLCommonCheckBox* cbSelectCommonFilterAfterCollapseChat; // 0x2f0(0x08)
	struct UWTLCommonCheckBox* cbFilterCensorshipInChat; // 0x2f8(0x08)
	struct UHorizontalBox* hbUseStrongDumbCensorshipFilter; // 0x300(0x08)
	struct UWTLCommonCheckBox* cbUseStrongDumbCensorshipFilter; // 0x308(0x08)
	struct UWTLCommonCheckBox* cbHighLightQuestItemsOnlyForActiveQuest; // 0x310(0x08)
	struct UWTLCommonCheckBox* cbShowActiveQuestInfoWhenPDAQuestLogShow; // 0x318(0x08)
	struct UWTLCommonCheckBox* cbShowUnarmedCrosshair; // 0x320(0x08)
	struct UWTLCommonCheckBox* cbShowUseHint; // 0x328(0x08)
	struct UWTLCommonCheckBox* cbShowCharacterPreviewInInventory; // 0x330(0x08)
	struct UWTLCommonCheckBox* cbShowDamagePointerWithHiddenHUD; // 0x338(0x08)
	struct UWTLCommonCheckBox* cbHideFastAccessSlotsAfterSomeTime; // 0x340(0x08)
	struct UWTLCommonCheckBox* cbShowOptionalWarnings; // 0x348(0x08)
	struct UWTLCommonCheckBox* cbShowNotEnoughStaminaToJumpWarning; // 0x350(0x08)
	struct UWTLCommonCheckBox* cbShowNotEnoughStaminaToSprintWarning; // 0x358(0x08)
	struct UWTLCommonCheckBox* cbShowCannotSprintInventoryOverloadWarning; // 0x360(0x08)
	struct UWTLCommonCheckBox* cbShowNoNutsInInventoryToThrowWarning; // 0x368(0x08)
	char pad_370[0x48]; // 0x370(0x48)

	void OnFilterCensorshipInChatCheckStateChanged(bool bIsChecked); // Function WTL.WTLOptionsInterface.OnFilterCensorshipInChatCheckStateChanged // (Final|Native|Private) // @ game+0x187ee10
	void OnCrosshairColorBtnClicked(struct FGeometry& BtnGeometry, struct FPointerEvent& InMouseEvent); // Function WTL.WTLOptionsInterface.OnCrosshairColorBtnClicked // (Final|Native|Private|HasOutParms) // @ game+0x187eef0
};

// Class WTL.WTLOptionsItemBackground
// Size: 0x280 (Inherited: 0x260)
struct UWTLOptionsItemBackground : UUserWidget {
	struct UBorder* bBackground; // 0x260(0x08)
	struct UWTLOptionsBase* m_OptionsWidget; // 0x268(0x08)
	struct FLinearColor BackgroundBrushColor; // 0x270(0x10)
};

// Class WTL.WTLOptionsParameterItem
// Size: 0x268 (Inherited: 0x260)
struct UWTLOptionsParameterItem : UUserWidget {
	struct UTextBlock* tbParameter; // 0x260(0x08)
};

// Class WTL.WTLOptionsParameterSliderBase
// Size: 0x2d0 (Inherited: 0x290)
struct UWTLOptionsParameterSliderBase : UWTLCommonBase {
	struct UTextBlock* tbParameterValue; // 0x290(0x08)
	struct USlider* slParameter; // 0x298(0x08)
	char pad_2A0[0x28]; // 0x2a0(0x28)
	bool UseRoundToStepValue; // 0x2c8(0x01)
	bool RoundFractionalDigits; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)

	void OnSliderValueChanged(float Value); // Function WTL.WTLOptionsParameterSliderBase.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x187f460
};

// Class WTL.WTLOptionsParameterSliderPercent
// Size: 0x2d8 (Inherited: 0x2d0)
struct UWTLOptionsParameterSliderPercent : UWTLOptionsParameterSliderBase {
	struct UTextBlock* tbParameterPercentText; // 0x2d0(0x08)
};

// Class WTL.WTLOptionsParameterSwitcher
// Size: 0x320 (Inherited: 0x2c8)
struct UWTLOptionsParameterSwitcher : UWTLCommonSwitcher {
	struct UWidgetSwitcher* wsParameter; // 0x2c8(0x08)
	char pad_2D0[0x10]; // 0x2d0(0x10)
	struct TSoftClassPtr<UObject> ParamaterItemClass; // 0x2e0(0x28)
	char pad_308[0x18]; // 0x308(0x18)
};

// Class WTL.WTLOptionsPostProcess
// Size: 0x2c8 (Inherited: 0x288)
struct UWTLOptionsPostProcess : UWTLOptionsBase {
	struct UWTLOptionsParameterSliderPercent* psGamma; // 0x288(0x08)
	struct UWTLOptionsParameterSliderBase* psContrast; // 0x290(0x08)
	struct UWTLOptionsParameterSliderBase* psRedBalance; // 0x298(0x08)
	struct UWTLOptionsParameterSliderBase* psGreenBalance; // 0x2a0(0x08)
	struct UWTLOptionsParameterSliderBase* psBlueBalance; // 0x2a8(0x08)
	char pad_2B0[0x18]; // 0x2b0(0x18)

	void OnRedBalanceValueChanged(float CurrentValue); // Function WTL.WTLOptionsPostProcess.OnRedBalanceValueChanged // (Final|Native|Private) // @ game+0x187fb90
	void OnGreenBalanceValueChanged(float CurrentValue); // Function WTL.WTLOptionsPostProcess.OnGreenBalanceValueChanged // (Final|Native|Private) // @ game+0x187fa60
	void OnGammaValueChanged(float CurrentValue); // Function WTL.WTLOptionsPostProcess.OnGammaValueChanged // (Final|Native|Private) // @ game+0x187fdf0
	void OnContrastValueChanged(float CurrentValue); // Function WTL.WTLOptionsPostProcess.OnContrastValueChanged // (Final|Native|Private) // @ game+0x187fcc0
	void OnBlueBalanceValueChanged(float CurrentValue); // Function WTL.WTLOptionsPostProcess.OnBlueBalanceValueChanged // (Final|Native|Private) // @ game+0x187f930
};

// Class WTL.WTLPawnMovementComponent
// Size: 0x150 (Inherited: 0x138)
struct UWTLPawnMovementComponent : UPawnMovementComponent {
	char pad_138[0x18]; // 0x138(0x18)

	void SetSpeed(float Speed); // Function WTL.WTLPawnMovementComponent.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1880140
	void SetEnableGravity(bool Value); // Function WTL.WTLPawnMovementComponent.SetEnableGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x1880060
};

// Class WTL.WTLPDA
// Size: 0x220 (Inherited: 0x220)
struct AWTLPDA : AActor {
};

// Class WTL.WTLPDAAchievementItemBase
// Size: 0x2a8 (Inherited: 0x260)
struct UWTLPDAAchievementItemBase : UUserWidget {
	char pad_260[0x48]; // 0x260(0x48)
};

// Class WTL.WTLPDAAchievementItem
// Size: 0x310 (Inherited: 0x2a8)
struct UWTLPDAAchievementItem : UWTLPDAAchievementItemBase {
	struct UTextBlock* tbName; // 0x2a8(0x08)
	struct UHorizontalBox* hbAchievedPercentage; // 0x2b0(0x08)
	struct UTextBlock* tbRarityStatus; // 0x2b8(0x08)
	struct UTextBlock* tbPreAchievedText; // 0x2c0(0x08)
	struct UTextBlock* tbAchievedPercentage; // 0x2c8(0x08)
	struct UTextBlock* tbOfPlayers; // 0x2d0(0x08)
	struct UTextBlock* tbDescription; // 0x2d8(0x08)
	struct UPanelWidget* pwProgress; // 0x2e0(0x08)
	struct UProgressBar* pbProgress; // 0x2e8(0x08)
	struct UTextBlock* tbCurrentValue; // 0x2f0(0x08)
	struct UTextBlock* tbNeedValue; // 0x2f8(0x08)
	struct UBorder* bData; // 0x300(0x08)
	struct UBorder* bProgress; // 0x308(0x08)
};

// Class WTL.WTLPDAAchievementItemSimple
// Size: 0x2e0 (Inherited: 0x2a8)
struct UWTLPDAAchievementItemSimple : UWTLPDAAchievementItemBase {
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct UWTLPDAAchievementItemSimpleToolTip* m_AchievementItemSimpleToolTip; // 0x2b0(0x08)
	struct TSoftClassPtr<UObject> AchievementItemSimpleToolTipWidgetClass; // 0x2b8(0x28)
};

// Class WTL.WTLPDAAchievementItemSimpleToolTip
// Size: 0x270 (Inherited: 0x260)
struct UWTLPDAAchievementItemSimpleToolTip : UUserWidget {
	struct UBorder* bBorder; // 0x260(0x08)
	struct UWTLPDAAchievementItem* ucAchievementsItemForToolTip; // 0x268(0x08)
};

// Class WTL.WTLPDABase
// Size: 0x288 (Inherited: 0x268)
struct UWTLPDABase : UWTLHUDWidgetBase {
	struct UBorder* bTabInterface; // 0x268(0x08)
	char pad_270[0x18]; // 0x270(0x18)
};

// Class WTL.WTLPDAAchievements
// Size: 0x3f8 (Inherited: 0x288)
struct UWTLPDAAchievements : UWTLPDABase {
	struct UTextBlock* tbEarnedAchievementsCount; // 0x288(0x08)
	struct UTextBlock* tbTotalAchievementsCount; // 0x290(0x08)
	struct UTextBlock* tbEarnedAchievementsPercent; // 0x298(0x08)
	struct UWTLCommonTextCheckBox* cbSimplifiedView; // 0x2a0(0x08)
	struct UWidgetSwitcher* wsAchievements; // 0x2a8(0x08)
	struct UScrollBox* sbAchievements; // 0x2b0(0x08)
	struct UScrollBox* sbAchievementsSimple; // 0x2b8(0x08)
	struct UWrapBox* wbAchievements; // 0x2c0(0x08)
	char pad_2C8[0x58]; // 0x2c8(0x58)
	struct UPanelWidget* m_CurrentPanelWidget; // 0x320(0x08)
	struct UScrollBox* m_CurrentScrollBoxWidget; // 0x328(0x08)
	char pad_330[0x10]; // 0x330(0x10)
	struct TArray<struct UWTLPDAAchievementItemBase*> m_AchievementItems; // 0x340(0x10)
	struct UWTLPDAAchievementsHiddenCountBase* m_AchievementsHiddenCount; // 0x350(0x08)
	struct TSoftClassPtr<UObject> AchievementItemWidgetClass; // 0x358(0x28)
	struct TSoftClassPtr<UObject> AchievementItemSimpleWidgetClass; // 0x380(0x28)
	struct TSoftClassPtr<UObject> AchievementsHiddenCountWidgetClass; // 0x3a8(0x28)
	struct TSoftClassPtr<UObject> AchievementsHiddenCountSimpleWidgetClass; // 0x3d0(0x28)

	void UpdateRarityAndAchievedPercentage(); // Function WTL.WTLPDAAchievements.UpdateRarityAndAchievedPercentage // (Final|Native|Private) // @ game+0x1880d40
	void OnSimplifiedViewCheckStateChanged(bool bIsChecked); // Function WTL.WTLPDAAchievements.OnSimplifiedViewCheckStateChanged // (Final|Native|Private) // @ game+0x1880c60
	void OnAchievementsSimpleScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLPDAAchievements.OnAchievementsSimpleScrollBoxScrolled // (Final|Native|Private) // @ game+0x1880a60
	void OnAchievementsScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLPDAAchievements.OnAchievementsScrollBoxScrolled // (Final|Native|Private) // @ game+0x1880b60
};

// Class WTL.WTLPDAAchievementsHiddenCountBase
// Size: 0x270 (Inherited: 0x260)
struct UWTLPDAAchievementsHiddenCountBase : UUserWidget {
	struct UBorder* bMain; // 0x260(0x08)
	struct UTextBlock* tbCount1; // 0x268(0x08)
};

// Class WTL.WTLPDAAchievementsHiddenCount
// Size: 0x278 (Inherited: 0x270)
struct UWTLPDAAchievementsHiddenCount : UWTLPDAAchievementsHiddenCountBase {
	struct UTextBlock* tbCount2; // 0x270(0x08)
};

// Class WTL.WTLPDACharacterInfo
// Size: 0x670 (Inherited: 0x288)
struct UWTLPDACharacterInfo : UWTLPDABase {
	struct UWidgetSwitcher* wsSex; // 0x288(0x08)
	struct UWidgetSwitcher* wsFemalePlayerClass; // 0x290(0x08)
	struct UWidgetSwitcher* wsMalePlayerClass; // 0x298(0x08)
	struct UTextBlock* tbPvPStatus; // 0x2a0(0x08)
	struct UWTLCommonTextButton* ucBtnSetPvPMode; // 0x2a8(0x08)
	struct UBorder* bMainInfo; // 0x2b0(0x08)
	struct UBorder* bHealthStamina; // 0x2b8(0x08)
	struct UBorder* bHungerThirst; // 0x2c0(0x08)
	struct UBorder* bParameters; // 0x2c8(0x08)
	struct UBorder* bExperience; // 0x2d0(0x08)
	struct UBorder* bReputation; // 0x2d8(0x08)
	struct UBorder* bFraction; // 0x2e0(0x08)
	struct UTextBlock* tbNameCaption; // 0x2e8(0x08)
	struct UTextBlock* tbName; // 0x2f0(0x08)
	struct UTextBlock* tbSexCaption; // 0x2f8(0x08)
	struct UTextBlock* tbSex; // 0x300(0x08)
	struct UTextBlock* tbCreationDateCaption; // 0x308(0x08)
	struct UTextBlock* tbCreationDate; // 0x310(0x08)
	struct UTextBlock* tbClassCaption; // 0x318(0x08)
	struct UTextBlock* tbClass; // 0x320(0x08)
	struct UTextBlock* tbLevelCaption; // 0x328(0x08)
	struct UTextBlock* tbLevel; // 0x330(0x08)
	struct UTextBlock* tbBalanceCaption; // 0x338(0x08)
	struct UTextBlock* tbBalance; // 0x340(0x08)
	struct UWTLCommonImageButton* ucBtnFounder; // 0x348(0x08)
	struct UWTLCommonImageButton* ucBtnClanImage; // 0x350(0x08)
	struct UTextBlock* tbClanNameCaption; // 0x358(0x08)
	struct UTextBlock* tbClanName; // 0x360(0x08)
	struct UProgressBar* pbHealth; // 0x368(0x08)
	struct UProgressBar* pbStamina; // 0x370(0x08)
	struct UProgressBar* pbHunger; // 0x378(0x08)
	struct UProgressBar* pbThirst; // 0x380(0x08)
	struct UProgressBar* pbBaseStrengthParameter; // 0x388(0x08)
	struct UProgressBar* pbBaseDexterityParameter; // 0x390(0x08)
	struct UProgressBar* pbBaseStaminaParameter; // 0x398(0x08)
	struct UProgressBar* pbBaseAccuracyParameter; // 0x3a0(0x08)
	struct UProgressBar* pbBaseIntelligenceParameter; // 0x3a8(0x08)
	struct UProgressBar* pbBaseFortuneParameter; // 0x3b0(0x08)
	struct UProgressBar* pbCurrentStrengthParameter; // 0x3b8(0x08)
	struct UProgressBar* pbCurrentDexterityParameter; // 0x3c0(0x08)
	struct UProgressBar* pbCurrentStaminaParameter; // 0x3c8(0x08)
	struct UProgressBar* pbCurrentAccuracyParameter; // 0x3d0(0x08)
	struct UProgressBar* pbCurrentIntelligenceParameter; // 0x3d8(0x08)
	struct UProgressBar* pbCurrentFortuneParameter; // 0x3e0(0x08)
	struct UProgressBar* pbExperience; // 0x3e8(0x08)
	struct UProgressBar* pbMedicExperience; // 0x3f0(0x08)
	struct UProgressBar* pbCraftExperience; // 0x3f8(0x08)
	struct UProgressBar* pbRepairExperience; // 0x400(0x08)
	struct UProgressBar* pbMiningExperience; // 0x408(0x08)
	struct UProgressBar* pbSurvivalExperience; // 0x410(0x08)
	struct UTextBlock* tbFraction; // 0x418(0x08)
	struct UWidgetSwitcher* wsFractionImage; // 0x420(0x08)
	struct UProgressBar* pbReputation; // 0x428(0x08)
	struct UTextBlock* tbPBHealth; // 0x430(0x08)
	struct UTextBlock* tbPBStamina; // 0x438(0x08)
	struct UTextBlock* tbPBHunger; // 0x440(0x08)
	struct UTextBlock* tbPBThirst; // 0x448(0x08)
	struct UTextBlock* tbPBStrengthParameter; // 0x450(0x08)
	struct UTextBlock* tbPBDexterityParameter; // 0x458(0x08)
	struct UTextBlock* tbPBStaminaParameter; // 0x460(0x08)
	struct UTextBlock* tbPBAccuracyParameter; // 0x468(0x08)
	struct UTextBlock* tbPBIntelligenceParameter; // 0x470(0x08)
	struct UTextBlock* tbPBFortuneParameter; // 0x478(0x08)
	struct UTextBlock* tbPBExperience; // 0x480(0x08)
	struct UTextBlock* tbPBMedicExperience; // 0x488(0x08)
	struct UTextBlock* tbPBCraftExperience; // 0x490(0x08)
	struct UTextBlock* tbPBRepairExperience; // 0x498(0x08)
	struct UTextBlock* tbPBMiningExperience; // 0x4a0(0x08)
	struct UTextBlock* tbPBSurvivalExperience; // 0x4a8(0x08)
	struct UTextBlock* tbPBReputation; // 0x4b0(0x08)
	struct UScrollBox* sbItemExperience; // 0x4b8(0x08)
	char pad_4C0[0x10]; // 0x4c0(0x10)
	struct TSoftClassPtr<UObject> ExperienceItemClass; // 0x4d0(0x28)
	struct TMap<enum class EWTLWeaponType, struct UTexture2D*> WeaponIcons; // 0x4f8(0x50)
	struct FLinearColor RedColorParam; // 0x548(0x10)
	struct FLinearColor YellowColorParam; // 0x558(0x10)
	struct FLinearColor GreenColorParam; // 0x568(0x10)
	struct FLinearColor CurrentMoreBaseFillColor; // 0x578(0x10)
	struct FLinearColor CurrentLessBaseFillColor; // 0x588(0x10)
	struct FSlateColor EnabledPvPStatusTextColor; // 0x598(0x28)
	struct FSlateColor DisabledPvPStatusTextColor; // 0x5c0(0x28)
	struct FSlateBrush DefaultClanIconBrush; // 0x5e8(0x88)

	void OnSetPvPModeShowConfirmation(); // Function WTL.WTLPDACharacterInfo.OnSetPvPModeShowConfirmation // (Final|Native|Private) // @ game+0x18811b0
	void OnSetPvPModeConfirmed(); // Function WTL.WTLPDACharacterInfo.OnSetPvPModeConfirmed // (Final|Native|Private) // @ game+0x1881130
	void OnSetPvPModeButtonClicked(); // Function WTL.WTLPDACharacterInfo.OnSetPvPModeButtonClicked // (Final|Native|Private) // @ game+0x18811d0
	void OnFounderBtnClicked(); // Function WTL.WTLPDACharacterInfo.OnFounderBtnClicked // (Final|Native|Private) // @ game+0x1881110
	void OnClanImageBtnClicked(); // Function WTL.WTLPDACharacterInfo.OnClanImageBtnClicked // (Final|Native|Private) // @ game+0x18810f0
};

// Class WTL.WTLPDACharacterParameters
// Size: 0x318 (Inherited: 0x288)
struct UWTLPDACharacterParameters : UWTLPDABase {
	struct UPanelWidget* pwChangeParametersArea; // 0x288(0x08)
	struct UVerticalBox* vbParametersList; // 0x290(0x08)
	struct UVerticalBox* vbParametersPointSpins; // 0x298(0x08)
	struct UTextBlock* tbParameterDescription; // 0x2a0(0x08)
	struct UTextBlock* tbAvailableParametersPoints; // 0x2a8(0x08)
	struct UHorizontalBox* hbButtonsArea; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnSet; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnReset; // 0x2c0(0x08)
	struct UWTLCommonButton* ucBtnResetToDefault; // 0x2c8(0x08)
	struct UCircularThrobber* cthUpdate; // 0x2d0(0x08)
	char pad_2D8[0x20]; // 0x2d8(0x20)
	struct FLinearColor CurrentNumbersOfDeviationsNormalColor; // 0x2f8(0x10)
	struct FLinearColor CurrentNumbersOfDeviationsExceededColor; // 0x308(0x10)

	void SetConfirmed(); // Function WTL.WTLPDACharacterParameters.SetConfirmed // (Final|Native|Private) // @ game+0x1881460
	void OnSetBtnClick(); // Function WTL.WTLPDACharacterParameters.OnSetBtnClick // (Final|Native|Private) // @ game+0x1881480
	void OnResetToDefaultConfirmed(); // Function WTL.WTLPDACharacterParameters.OnResetToDefaultConfirmed // (Final|Native|Private) // @ game+0x1881400
	void OnResetToDefaultBtnClick(); // Function WTL.WTLPDACharacterParameters.OnResetToDefaultBtnClick // (Final|Native|Private) // @ game+0x1881420
	void OnResetBtnClick(); // Function WTL.WTLPDACharacterParameters.OnResetBtnClick // (Final|Native|Private) // @ game+0x1881440
};

// Class WTL.WTLPDASkillInfo
// Size: 0x310 (Inherited: 0x260)
struct UWTLPDASkillInfo : UUserWidget {
	struct UHorizontalBox* hbSkillID; // 0x260(0x08)
	struct UTextBlock* tbSkillID; // 0x268(0x08)
	struct UTextBlock* tbName; // 0x270(0x08)
	struct UTextBlock* tbType; // 0x278(0x08)
	struct UWidgetSwitcher* wsInfo; // 0x280(0x08)
	struct UHorizontalBox* hbRequiredLevel; // 0x288(0x08)
	struct UTextBlock* tbRequiredLevel; // 0x290(0x08)
	struct UHorizontalBox* hbPointsToLearn; // 0x298(0x08)
	struct UTextBlock* tbPointsToLearn; // 0x2a0(0x08)
	struct UVerticalBox* vbDependencies; // 0x2a8(0x08)
	struct UHorizontalBox* hbMustHaveSkills; // 0x2b0(0x08)
	struct UHorizontalBox* hbMustHaveSkillsDependencies; // 0x2b8(0x08)
	struct UHorizontalBox* hbMustHaveOneOfSkills; // 0x2c0(0x08)
	struct UHorizontalBox* hbMustHaveOneOfSkillsDependencies; // 0x2c8(0x08)
	struct UHorizontalBox* hbMustNotHaveSkills; // 0x2d0(0x08)
	struct UHorizontalBox* hbMustNotHaveSkillsDependencies; // 0x2d8(0x08)
	struct UTextBlock* tbDescription; // 0x2e0(0x08)
	struct TSoftClassPtr<UObject> SkillDependenceWidgetClass; // 0x2e8(0x28)
};

// Class WTL.WTLPDACharacterSkillInfo
// Size: 0x320 (Inherited: 0x310)
struct UWTLPDACharacterSkillInfo : UWTLPDASkillInfo {
	struct UHorizontalBox* hbPriceToForget; // 0x310(0x08)
	struct UTextBlock* tbPriceToForget; // 0x318(0x08)
};

// Class WTL.WTLPDACharacterSkills
// Size: 0x360 (Inherited: 0x288)
struct UWTLPDACharacterSkills : UWTLPDABase {
	struct UTextBlock* tbAvailableSkillPoints; // 0x288(0x08)
	struct UCanvasPanel* cpResetBtn; // 0x290(0x08)
	struct UWTLCommonButton* ucBtnReset; // 0x298(0x08)
	struct UHorizontalBox* hbTabButtons; // 0x2a0(0x08)
	struct UWTLCommonTabButton* btnClassSkills; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsSkills; // 0x2b0(0x08)
	struct UScrollBox* sbSkills; // 0x2b8(0x08)
	struct UWidgetSwitcher* wsSkillsType; // 0x2c0(0x08)
	struct UHorizontalBox* hbCommonSkills; // 0x2c8(0x08)
	struct UWidgetSwitcher* wsClassSkills; // 0x2d0(0x08)
	struct UWidgetSwitcher* wsParameters; // 0x2d8(0x08)
	struct UTextBlock* tbNoParameters; // 0x2e0(0x08)
	struct UScrollBox* sbParameters; // 0x2e8(0x08)
	struct UWrapBox* wbParameters; // 0x2f0(0x08)
	struct UWTLPDACharacterSkillTakeConfirm* ucCharacterSkillTakeConfirm; // 0x2f8(0x08)
	struct TArray<struct UWTLPDACharacterSkillsItem*> m_SkillsItems; // 0x300(0x10)
	char pad_310[0x8]; // 0x310(0x08)
	struct TSoftClassPtr<UObject> ParameterWidgetClass; // 0x318(0x28)
	struct FLinearColor DefaultSkillBorderBrushColor; // 0x340(0x10)
	struct FLinearColor ReachedSkillBorderBrushColor; // 0x350(0x10)

	void OnTakeSkillConfirmed(uint16_t SkillID); // Function WTL.WTLPDACharacterSkills.OnTakeSkillConfirmed // (Final|Native|Private) // @ game+0x1881850
	void OnTakeSkillCanceled(); // Function WTL.WTLPDACharacterSkills.OnTakeSkillCanceled // (Final|Native|Private) // @ game+0x1881820
	void OnTabBtnClicked(char Index); // Function WTL.WTLPDACharacterSkills.OnTabBtnClicked // (Final|Native|Private) // @ game+0x1882120
	void OnSkillItemUnhovered(); // Function WTL.WTLPDACharacterSkills.OnSkillItemUnhovered // (Final|Native|Private) // @ game+0x1881a10
	void OnSkillItemRemoved(uint16_t SkillID); // Function WTL.WTLPDACharacterSkills.OnSkillItemRemoved // (Final|Native|Private) // @ game+0x1881930
	void OnSkillItemHovered(uint16_t SkillID, struct FWTLCharacterSkillItemData& SkillItemData); // Function WTL.WTLPDACharacterSkills.OnSkillItemHovered // (Final|Native|Private|HasOutParms) // @ game+0x1881a80
	void OnSkillItemClicked(uint16_t SkillID, struct FWTLCharacterSkillItemData& SkillItemData); // Function WTL.WTLPDACharacterSkills.OnSkillItemClicked // (Final|Native|Private|HasOutParms) // @ game+0x1881dd0
	void OnResetConfirmed(); // Function WTL.WTLPDACharacterSkills.OnResetConfirmed // (Final|Native|Private) // @ game+0x1882290
	void OnResetBtnClick(); // Function WTL.WTLPDACharacterSkills.OnResetBtnClick // (Final|Native|Private) // @ game+0x18822b0
	void OnRemoveSkillConfirmed(); // Function WTL.WTLPDACharacterSkills.OnRemoveSkillConfirmed // (Final|Native|Private) // @ game+0x1881800
	void OnMessageDialogHide(); // Function WTL.WTLPDACharacterSkills.OnMessageDialogHide // (Final|Native|Private) // @ game+0x1881820
};

// Class WTL.WTLPDASkillsItem
// Size: 0x3e0 (Inherited: 0x340)
struct UWTLPDASkillsItem : UWTLCommonButton {
	struct UBorder* bBorder; // 0x340(0x08)
	struct UWidgetSwitcher* wsBorder; // 0x348(0x08)
	struct UBorder* bButtonLock; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)
	struct UWidgetSwitcher* wsSkillIcon; // 0x360(0x08)
	struct UImage* imgSkillIcon; // 0x368(0x08)
	struct UBorder* bRhombus; // 0x370(0x08)
	char pad_378[0x38]; // 0x378(0x38)
	struct UWTLPDASkillInfo* m_SkillInfoWidget; // 0x3b0(0x08)
	struct TSoftClassPtr<UObject> SkillInfoWidgetClass; // 0x3b8(0x28)
};

// Class WTL.WTLPDACharacterSkillsItem
// Size: 0x4c8 (Inherited: 0x3e0)
struct UWTLPDACharacterSkillsItem : UWTLPDASkillsItem {
	struct UWidgetSwitcher* wsRhombus; // 0x3e0(0x08)
	struct UTextBlock* tbSkillPoints; // 0x3e8(0x08)
	struct UMenuAnchor* maPopup; // 0x3f0(0x08)
	char pad_3F8[0x10]; // 0x3f8(0x10)
	struct UWTLCommonPopupMenu* m_PopupMenuWidget; // 0x408(0x08)
	char pad_410[0x88]; // 0x410(0x88)
	struct TSoftClassPtr<UObject> PopupMenuWidgetClass; // 0x498(0x28)
	int32_t SkillID; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)

	void OnSkillRemoved(); // Function WTL.WTLPDACharacterSkillsItem.OnSkillRemoved // (Final|Native|Private) // @ game+0x1883410
	void OnMenuOpenChanged(bool bIsOpen); // Function WTL.WTLPDACharacterSkillsItem.OnMenuOpenChanged // (Final|Native|Private) // @ game+0x1883470
	struct UWidget* OnGetPopupMenuContent(); // Function WTL.WTLPDACharacterSkillsItem.OnGetPopupMenuContent // (Final|Native|Private) // @ game+0x1883570
};

// Class WTL.WTLPDACharacterSkillsZone
// Size: 0x2f0 (Inherited: 0x260)
struct UWTLPDACharacterSkillsZone : UUserWidget {
	struct UHorizontalBox* hbConnectorZone; // 0x260(0x08)
	struct UHorizontalBox* hbSkillZone; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)
	struct TSoftClassPtr<UObject> CharacterSkillsConnectorWidgetClass; // 0x278(0x28)
	struct TSoftClassPtr<UObject> CharacterSkillsConnectorDoubleWidgetClass; // 0x2a0(0x28)
	struct TSoftClassPtr<UObject> CharacterSkillsSpacerWidgetClass; // 0x2c8(0x28)
};

// Class WTL.WTLPDASkillTakeConfirm
// Size: 0x2a8 (Inherited: 0x260)
struct UWTLPDASkillTakeConfirm : UUserWidget {
	struct UWTLCommonButton* ucBtnSkillLearn; // 0x260(0x08)
	struct UWTLCommonButton* ucBtnCancel; // 0x268(0x08)
	char pad_270[0x38]; // 0x270(0x38)

	void OnSkillLearnBtnClick(); // Function WTL.WTLPDASkillTakeConfirm.OnSkillLearnBtnClick // (Final|Native|Private) // @ game+0x1898050
	void OnCancelBtnClick(); // Function WTL.WTLPDASkillTakeConfirm.OnCancelBtnClick // (Final|Native|Private) // @ game+0x1898010
};

// Class WTL.WTLPDACharacterSkillTakeConfirm
// Size: 0x2b8 (Inherited: 0x2a8)
struct UWTLPDACharacterSkillTakeConfirm : UWTLPDASkillTakeConfirm {
	struct UWTLPDACharacterSkillInfo* ucCharacterSkillInfo; // 0x2a8(0x08)
	char pad_2B0[0x8]; // 0x2b0(0x08)
};

// Class WTL.WTLPDAClan
// Size: 0x1fe0 (Inherited: 0x288)
struct UWTLPDAClan : UWTLPDABase {
	struct UWidgetSwitcher* wsTitle; // 0x288(0x08)
	struct UHorizontalBox* hbClanLogTypeButtons; // 0x290(0x08)
	struct UWidgetSwitcher* wsClan; // 0x298(0x08)
	struct UWidgetSwitcher* wsClanInfo; // 0x2a0(0x08)
	struct UWidgetSwitcher* wsNotInClanCaption; // 0x2a8(0x08)
	struct UWidgetSwitcher* wsNotInClanInfoMain; // 0x2b0(0x08)
	struct UHorizontalBox* hbNotInClanInfoTabButtons; // 0x2b8(0x08)
	struct UWidgetSwitcher* wsNotInClanInfo; // 0x2c0(0x08)
	struct UScrollBox* sbClanTechBonuses; // 0x2c8(0x08)
	struct UWrapBox* wbClanTechBonuses; // 0x2d0(0x08)
	struct UWTLCommonButton* ucBtnShowClanTechBonuses; // 0x2d8(0x08)
	struct UWTLCommonButton* ucBtnBackFromClanTechBonuses; // 0x2e0(0x08)
	struct UWTLCommonCheckBox* cbQuestsRequirements; // 0x2e8(0x08)
	struct UTextBlock* tbQuestsRequirements; // 0x2f0(0x08)
	struct UWTLCommonCheckBox* cbFactionRequirement; // 0x2f8(0x08)
	struct UWTLCommonButton* ucBtnClanList; // 0x300(0x08)
	struct UWTLCommonCheckBox* cbTokensRequirement; // 0x308(0x08)
	struct UWTLCommonCheckBox* cbGroupRequirement; // 0x310(0x08)
	struct UTextBlock* tbClanName; // 0x318(0x08)
	struct UTextBlock* tbClanLevel; // 0x320(0x08)
	struct UTextBlock* tbPvPScore; // 0x328(0x08)
	struct UProgressBar* pbPvPScore; // 0x330(0x08)
	struct UTextBlock* tbPvEScore; // 0x338(0x08)
	struct UProgressBar* pbPvEScore; // 0x340(0x08)
	struct UBorder* bScoresConversionBtn; // 0x348(0x08)
	struct UCanvasPanel* cpScoresConversionBtn; // 0x350(0x08)
	struct UWTLCommonTextButton* ucBtnScoresConversion; // 0x358(0x08)
	struct UTextBlock* tbCraftScore; // 0x360(0x08)
	struct UProgressBar* pbCraftScore; // 0x368(0x08)
	struct UTextBlock* tbTechnologyScore; // 0x370(0x08)
	struct UWTLCommonButton* ucBtnClanInfo; // 0x378(0x08)
	struct UCanvasPanel* cpClanDescriptionBtn; // 0x380(0x08)
	struct UWTLCommonButton* ucBtnClanDescription; // 0x388(0x08)
	struct UCanvasPanel* cpClanMessageBtn; // 0x390(0x08)
	struct UWTLCommonButton* ucBtnClanMessage; // 0x398(0x08)
	struct UCanvasPanel* cpSkillsBtn; // 0x3a0(0x08)
	struct UWTLCommonButton* ucBtnSkills; // 0x3a8(0x08)
	struct UCanvasPanel* cpParametersBtn; // 0x3b0(0x08)
	struct UWTLCommonButton* ucBtnParameters; // 0x3b8(0x08)
	struct UCanvasPanel* cpLogBtn; // 0x3c0(0x08)
	struct UWTLCommonButton* ucBtnLog; // 0x3c8(0x08)
	struct UCanvasPanel* cpStatisticsBtn; // 0x3d0(0x08)
	struct UWTLCommonButton* ucBtnStatistics; // 0x3d8(0x08)
	struct UWTLCommonButton* ucBtnLeaderboard; // 0x3e0(0x08)
	struct UCanvasPanel* cpInviteToClanBorderBtn; // 0x3e8(0x08)
	struct UWTLCommonButton* ucBtnInviteToClan; // 0x3f0(0x08)
	struct UCanvasPanel* cpLeaveClanBorderBtn; // 0x3f8(0x08)
	struct UWTLCommonButton* ucBtnLeaveClan; // 0x400(0x08)
	struct UBorder* bInClanCaption; // 0x408(0x08)
	struct UBorder* bNotInClanCaption; // 0x410(0x08)
	struct UBorder* bNotInClan; // 0x418(0x08)
	struct UBorder* bBackFromClanTechBonuses; // 0x420(0x08)
	struct UBorder* bClanInfo; // 0x428(0x08)
	struct UBorder* bPvPScore; // 0x430(0x08)
	struct UBorder* bPvEScore; // 0x438(0x08)
	struct UBorder* bCraftScore; // 0x440(0x08)
	struct UBorder* bTechnologyScore; // 0x448(0x08)
	struct UBorder* bClanButtons; // 0x450(0x08)
	struct UCanvasPanel* cpClanTabs; // 0x458(0x08)
	struct UBorder* bClanTabButtons; // 0x460(0x08)
	struct UHorizontalBox* hbClanTabButtons; // 0x468(0x08)
	struct UWTLCommonTabButton* ucTabBtnMembers; // 0x470(0x08)
	struct UWTLCommonTabButton* ucTabBtnPolicyGroups; // 0x478(0x08)
	struct UWTLCommonTabButton* ucTabBtnClanApplications; // 0x480(0x08)
	struct UWTLCommonTabButton* ucTabBtnClanQuests; // 0x488(0x08)
	struct UBorder* bMembersList; // 0x490(0x08)
	struct UBorder* bPolicyGroups; // 0x498(0x08)
	struct UBorder* bClanApplications; // 0x4a0(0x08)
	struct UBorder* bClanApplicationMainCharacterInfo; // 0x4a8(0x08)
	struct UBorder* bClanApplicationCharacterRankCaption; // 0x4b0(0x08)
	struct UBorder* bClanApplicationCharacterRank; // 0x4b8(0x08)
	struct UBorder* bClanApplicationCharacterReputationCaption; // 0x4c0(0x08)
	struct UBorder* bClanApplicationOtherCharacters; // 0x4c8(0x08)
	struct UBorder* bClanApplicationCharacterCommentary; // 0x4d0(0x08)
	struct UBorder* bClanApplicationsButtons; // 0x4d8(0x08)
	struct UWidgetSwitcher* wsList; // 0x4e0(0x08)
	struct UWidgetSwitcher* wsMembers; // 0x4e8(0x08)
	struct UScrollBox* sbMembers; // 0x4f0(0x08)
	struct UWidgetSwitcher* wsPolicyGroups; // 0x4f8(0x08)
	struct UScrollBox* sbPolicyGroups; // 0x500(0x08)
	struct UHorizontalBox* hbPolicyGroupManageBtns; // 0x508(0x08)
	struct UWTLCommonButton* ucBtnCreatePolicyGroup; // 0x510(0x08)
	struct UWTLCommonButton* ucBtnRenamePolicyGroup; // 0x518(0x08)
	struct UWTLCommonButton* ucBtnDeletePolicyGroup; // 0x520(0x08)
	struct UWidgetSwitcher* wsClanApplications; // 0x528(0x08)
	struct UWidgetSwitcher* wsClanApplicationsList; // 0x530(0x08)
	struct UScrollBox* sbClanApplications; // 0x538(0x08)
	struct UWidgetSwitcher* wsClanQuests; // 0x540(0x08)
	struct UBorder* bClanQuests; // 0x548(0x08)
	struct UHorizontalBox* hbClanQuestsFilters; // 0x550(0x08)
	struct UWTLCommonTextCheckBox* cbPvPScoreFilter; // 0x558(0x08)
	struct UWTLCommonTextCheckBox* cbPvEScoreFilter; // 0x560(0x08)
	struct UWTLCommonTextCheckBox* cbCraftScoreFilter; // 0x568(0x08)
	struct UWTLCommonTextCheckBox* cbTechnologyScoreFilter; // 0x570(0x08)
	struct UWidgetSwitcher* wsClanQuestList; // 0x578(0x08)
	struct UScrollBox* sbClanQuests; // 0x580(0x08)
	struct UBorder* bClanQuestsButtons; // 0x588(0x08)
	struct UWTLCommonButton* ucBtnBackToClanQuests; // 0x590(0x08)
	struct UWTLCommonButton* ucBtnTakeClanQuest; // 0x598(0x08)
	struct UWTLCommonButton* ucBtnTakeAllClanQuests; // 0x5a0(0x08)
	struct UWTLCommonButton* ucBtnClanQuestDetails; // 0x5a8(0x08)
	struct UWTLCommonQuestInfo* ucClanQuestInfo; // 0x5b0(0x08)
	struct UBorder* bPolicyGroupActionWindow; // 0x5b8(0x08)
	struct UTextBlock* tbPolicyGroupWindowActionTitle; // 0x5c0(0x08)
	struct UEditableTextBox* etbPolicyGroupName; // 0x5c8(0x08)
	struct UWTLCommonTextButton* ucBtnActionPolicyGroupName; // 0x5d0(0x08)
	struct UWTLCommonButton* ucBtnActionCancelPolicyGroupName; // 0x5d8(0x08)
	struct UTextBlock* tbCharacterName; // 0x5e0(0x08)
	struct UTextBlock* tbCharacterLevel; // 0x5e8(0x08)
	struct UTextBlock* tbCharacterClass; // 0x5f0(0x08)
	struct UTextBlock* tbCharacterFactionScore; // 0x5f8(0x08)
	struct UHorizontalBox* hbCharacterRank; // 0x600(0x08)
	struct UImage* imgCharacterRank; // 0x608(0x08)
	struct UTextBlock* tbCharacterRank; // 0x610(0x08)
	struct UProgressBar* pbCharacterReputation; // 0x618(0x08)
	struct UTextBlock* tbCharacterReputation; // 0x620(0x08)
	struct UWTLRichTextBlock* rtbOtherCharacters; // 0x628(0x08)
	struct UTextBlock* tbCharacterCommentary; // 0x630(0x08)
	struct UWTLCommonButton* ucBtnBackToApplications; // 0x638(0x08)
	struct UWTLCommonButton* ucBtnAcceptApplication; // 0x640(0x08)
	struct UWTLCommonButton* ucBtnRejectApplication; // 0x648(0x08)
	struct UBorder* bInviteToClan; // 0x650(0x08)
	struct UWTLCommonSuggestionTextBox* stbCharacterNameToInvite; // 0x658(0x08)
	struct UEditableTextBox* etbCharacterNameToInvite; // 0x660(0x08)
	struct UWTLCommonButton* ucBtnSendInviteToClan; // 0x668(0x08)
	struct UWTLCommonButton* ucBtnSendInviteToClanCancel; // 0x670(0x08)
	struct UBorder* bClanApplication; // 0x678(0x08)
	struct UTextBlock* tbClanApplicationTitle; // 0x680(0x08)
	struct UMultiLineEditableTextBox* metbClanApplicationCommentary; // 0x688(0x08)
	struct UTextBlock* tbClanApplicationCommentaryCurrentCharactersCount; // 0x690(0x08)
	struct UTextBlock* tbClanApplicationCommentaryMaxCharactersCount; // 0x698(0x08)
	struct UWTLCommonTextCheckBox* cbClanApplicationProvideOtherCharactersInfo; // 0x6a0(0x08)
	struct UWTLCommonButton* ucBtnClanApplicationAction; // 0x6a8(0x08)
	struct UWTLCommonButton* ucBtnClanApplicationCancel; // 0x6b0(0x08)
	struct UBorder* bClanDescription; // 0x6b8(0x08)
	struct UMultiLineEditableTextBox* metbClanDescription; // 0x6c0(0x08)
	struct UTextBlock* tbClanDescriptionCurrentCharactersCount; // 0x6c8(0x08)
	struct UTextBlock* tbClanDescriptionMaxCharactersCount; // 0x6d0(0x08)
	struct UWTLCommonButton* ucBtnClanDescriptionSet; // 0x6d8(0x08)
	struct UWTLCommonButton* ucBtnClanDescriptionCancel; // 0x6e0(0x08)
	struct UBorder* bClanMessage; // 0x6e8(0x08)
	struct UEditableTextBox* etbClanMessageSubject; // 0x6f0(0x08)
	struct UTextBlock* tbClanMessageSubjectCurrentCharactersCount; // 0x6f8(0x08)
	struct UTextBlock* tbClanMessageSubjectMaxCharactersCount; // 0x700(0x08)
	struct UMultiLineEditableTextBox* metbClanMessageText; // 0x708(0x08)
	struct UTextBlock* tbClanMessageTextCurrentCharactersCount; // 0x710(0x08)
	struct UTextBlock* tbClanMessageTextMaxCharactersCount; // 0x718(0x08)
	struct UWTLCommonButton* ucBtnClanMessageSend; // 0x720(0x08)
	struct UWTLCommonButton* ucBtnClanMessageCancel; // 0x728(0x08)
	struct UWidgetSwitcher* wsLeaderboard; // 0x730(0x08)
	struct UWidgetSwitcher* wsLeaderboardFilterButtons; // 0x738(0x08)
	struct UHorizontalBox* hbLeaderboardFilterButtons; // 0x740(0x08)
	struct UWTLCommonButton* ucBtnTopAll; // 0x748(0x08)
	struct UWTLCommonButton* ucBtnTopFraction; // 0x750(0x08)
	struct UTextBlock* tbApplicationTip; // 0x758(0x08)
	struct UTextBlock* tbInfoTip; // 0x760(0x08)
	struct UHorizontalBox* hbLeaderboardHeadline; // 0x768(0x08)
	struct USpacer* sClanApplication; // 0x770(0x08)
	struct UWTLCommonSortButton* ucLeaderboardMembersCountSortBtn; // 0x778(0x08)
	struct UWTLCommonSortButton* ucLeaderboardPvPScoreSortBtn; // 0x780(0x08)
	struct UWTLCommonSortButton* ucLeaderboardPvEScoreSortBtn; // 0x788(0x08)
	struct UWTLCommonSortButton* ucLeaderboardCraftScoreSortBtn; // 0x790(0x08)
	struct UWTLCommonSortButton* ucLeaderboardReputationSortBtn; // 0x798(0x08)
	struct UWTLCommonSortButton* ucLeaderboardRatingSortBtn; // 0x7a0(0x08)
	struct UScrollBox* sbLeaderboard; // 0x7a8(0x08)
	struct UTextBlock* tbLeaderboardEmptyTitle; // 0x7b0(0x08)
	struct UWTLCommonButton* ucBtnLeaderboardBack; // 0x7b8(0x08)
	struct UTextBlock* tbClanLevelSkills; // 0x7c0(0x08)
	struct UTextBlock* tbTechnologyScoreSkills; // 0x7c8(0x08)
	struct UBorder* bSkillsHeadline; // 0x7d0(0x08)
	struct UCanvasPanel* cpSkills; // 0x7d8(0x08)
	struct UScrollBox* sbSkillsVertical; // 0x7e0(0x08)
	struct UHorizontalBox* hbSkills; // 0x7e8(0x08)
	struct UWTLCommonButton* ucBtnSkillsBack; // 0x7f0(0x08)
	struct UWTLPDAClanSkillTakeConfirm* ucSkillTakeConfirm; // 0x7f8(0x08)
	struct UWidgetSwitcher* wsParameters; // 0x800(0x08)
	struct UTextBlock* tbNoParameters; // 0x808(0x08)
	struct UScrollBox* sbParameters; // 0x810(0x08)
	struct UWrapBox* wbParameters; // 0x818(0x08)
	struct UWTLCommonButton* ucBtnParametersBack; // 0x820(0x08)
	struct UWidgetSwitcher* wsLogType; // 0x828(0x08)
	struct UTextBlock* tbSelectLogType; // 0x830(0x08)
	struct UWidgetSwitcher* wsLog; // 0x838(0x08)
	struct UTextBlock* tbLogIsEmpty; // 0x840(0x08)
	struct UBorder* bUpdatingLog; // 0x848(0x08)
	struct UTextBlock* tbGettingLogRecordsCountError; // 0x850(0x08)
	struct UWidgetSwitcher* wsLogRecords; // 0x858(0x08)
	struct UTextBlock* tbGettingLogPageError; // 0x860(0x08)
	struct UBorder* bUpdatingLogPage; // 0x868(0x08)
	struct UScrollBox* sbLogRecords; // 0x870(0x08)
	struct UBorder* bLogManage; // 0x878(0x08)
	struct UHorizontalBox* hbLogRecordsPerPage; // 0x880(0x08)
	struct UWTLCommonComboBoxString* cbsLogRecordsPerPage; // 0x888(0x08)
	struct UWTLCommonPageSwitcher* ucLogPagesSwitcher; // 0x890(0x08)
	struct UWTLCommonButton* ucBtnLogBack; // 0x898(0x08)
	struct UTextBlock* tbStatisticsSpecifyDateHint; // 0x8a0(0x08)
	struct UBorder* bStatisticsStartDateValidate; // 0x8a8(0x08)
	struct UBorder* bStatisticsStartDate; // 0x8b0(0x08)
	struct UEditableTextBox* etbStatisticsStartDate; // 0x8b8(0x08)
	struct UTextBlock* tbStatisticsToDate; // 0x8c0(0x08)
	struct UBorder* bStatisticsEndDateValidate; // 0x8c8(0x08)
	struct UBorder* bStatisticsEndDate; // 0x8d0(0x08)
	struct UEditableTextBox* etbStatisticsEndDate; // 0x8d8(0x08)
	struct UWidgetSwitcher* wsStatistics; // 0x8e0(0x08)
	struct UTextBlock* tbStatisticsNoRecords; // 0x8e8(0x08)
	struct UBorder* bGettingsStatistics; // 0x8f0(0x08)
	struct UHorizontalBox* hbStatisticsHeadline; // 0x8f8(0x08)
	struct UBorder* bStatisticsRecords; // 0x900(0x08)
	struct UWTLCommonSortButton* ucStatisticsPvPScoreSortBtn; // 0x908(0x08)
	struct UWTLCommonSortButton* ucStatisticsPvEScoreSortBtn; // 0x910(0x08)
	struct UWTLCommonSortButton* ucStatisticsCraftScoreSortBtn; // 0x918(0x08)
	struct UWTLCommonSortButton* ucStatisticsTechnologyScoreSortBtn; // 0x920(0x08)
	struct UScrollBox* sbStatisticsRecords; // 0x928(0x08)
	struct UTextBlock* tbErrorGettingStatisticsRecords; // 0x930(0x08)
	struct UWTLCommonButton* ucBtnStatisticsUpdate; // 0x938(0x08)
	struct UWTLCommonButton* ucBtnStatisticsBack; // 0x940(0x08)
	struct UBorder* bClanScoresConversion; // 0x948(0x08)
	struct UBorder* bScoresConversionBackground; // 0x950(0x08)
	struct UTextBlock* tbScoresConversionTitle; // 0x958(0x08)
	struct UBorder* bScoresConversionArrow; // 0x960(0x08)
	struct UBorder* bScoresConversionMain; // 0x968(0x08)
	struct UBorder* bScoresConversionButtons; // 0x970(0x08)
	struct UHorizontalBox* hbCurrentConversionRate; // 0x978(0x08)
	struct UTextBlock* tbCurrentConversionRate; // 0x980(0x08)
	struct UWTLCommonComboBoxString* cbsScoreTypeToConvert; // 0x988(0x08)
	struct UWTLCommonComboBoxString* cbsConvertedScoreType; // 0x990(0x08)
	struct UWTLUtilityNumberTextBox* ntbCurrentScoreToConvert; // 0x998(0x08)
	struct UWTLCommonButton* ucBtnScoreStepMinus; // 0x9a0(0x08)
	struct USlider* slScoreConverter; // 0x9a8(0x08)
	struct UWTLCommonButton* ucBtnScoreStepPlus; // 0x9b0(0x08)
	struct UWTLUtilityNumberTextBox* ntbScoreToConvert; // 0x9b8(0x08)
	struct UTextBlock* tbConvertedScore; // 0x9c0(0x08)
	struct UTextBlock* tbTotalConvertedScore; // 0x9c8(0x08)
	struct UWTLCommonButton* ucBtnConvertScores; // 0x9d0(0x08)
	struct UWTLCommonButton* ucBtnConvertScoresCancel; // 0x9d8(0x08)
	struct UWTLCommonButton* ucBtnClanLevelsInfo; // 0x9e0(0x08)
	struct UBorder* bClanLevelsInfo; // 0x9e8(0x08)
	struct UBorder* bClanLevelsInfoBackground; // 0x9f0(0x08)
	struct UTextBlock* tbClanLevelsInfoTitle; // 0x9f8(0x08)
	struct UTextBlock* tbLevelsCaption; // 0xa00(0x08)
	struct UTextBlock* tbMembersCountCaption; // 0xa08(0x08)
	struct UScrollBox* sbLevelsInfo; // 0xa10(0x08)
	struct UBorder* bCloseLevelsInfoBtn; // 0xa18(0x08)
	struct UWTLCommonButton* ucBtnCloseLevelsInfo; // 0xa20(0x08)
	char pad_A28[0x2b0]; // 0xa28(0x2b0)
	struct TArray<struct UBorder*> m_ClanLevelsSkillBorders; // 0xcd8(0x10)
	struct TArray<struct UWTLPDAClanSkillsLevelCaption*> m_ClanSkillsLevelCaptions; // 0xce8(0x10)
	struct TArray<struct UWTLPDAClanSkillsItem*> m_SkillsItems; // 0xcf8(0x10)
	struct TArray<struct UWTLPDASkillsConnector*> m_SkillsConnectors; // 0xd08(0x10)
	char pad_D18[0xe0]; // 0xd18(0xe0)
	struct TSoftClassPtr<UObject> ClanTechBonusWidgetClass; // 0xdf8(0x28)
	struct TSoftClassPtr<UObject> ClanMemberItemWidgetClass; // 0xe20(0x28)
	struct TSoftClassPtr<UObject> ClanPolicyGroupItemWidgetClass; // 0xe48(0x28)
	struct TSoftClassPtr<UObject> ClanApplicationItemWidgetClass; // 0xe70(0x28)
	struct TSoftClassPtr<UObject> ClanQuestItemWidgetClass; // 0xe98(0x28)
	struct TSoftClassPtr<UObject> ClanLeaderboardItemWidgetClass; // 0xec0(0x28)
	struct TSoftClassPtr<UObject> ParameterWidgetClass; // 0xee8(0x28)
	struct TSoftClassPtr<UObject> ClanLevelInfoWidgetClass; // 0xf10(0x28)
	struct TSoftClassPtr<UObject> ClanLogRecordWidgetClass; // 0xf38(0x28)
	struct TSoftClassPtr<UObject> ClanStatisticsRecordWidgetClass; // 0xf60(0x28)
	struct FButtonStyle DefaultButtonStyle; // 0xf88(0x278)
	struct FButtonStyle SelectedButtonStyle; // 0x1200(0x278)
	struct FLinearColor NotAllowedClanLevelSkillBorderBrushColor; // 0x1478(0x10)
	struct FLinearColor AllowedClanLevelSkillBorderBrushColor; // 0x1488(0x10)
	struct FComboButtonStyle PVPScoreTypeComboBoxButtonStyle; // 0x1498(0x3b8)
	struct FComboButtonStyle PVEScoreTypeComboBoxButtonStyle; // 0x1850(0x3b8)
	struct FComboButtonStyle CraftScoreTypeComboBoxButtonStyle; // 0x1c08(0x3b8)
	struct FLinearColor StatisticsDateValidateErrorColor; // 0x1fc0(0x10)
	bool bGetClanScoreLogRecordCountTestResponseSuccess; // 0x1fd0(0x01)
	bool bGetClanLogPageTestResponseSuccess; // 0x1fd1(0x01)
	char pad_1FD2[0x2]; // 0x1fd2(0x02)
	int32_t TestLogRecordsCount; // 0x1fd4(0x04)
	bool bGetClanScoreStatisticsTestResponseSuccess; // 0x1fd8(0x01)
	char pad_1FD9[0x3]; // 0x1fd9(0x03)
	int32_t TestClanScoreStatisticsRecordsCount; // 0x1fdc(0x04)

	void UpdateStatistics(); // Function WTL.WTLPDAClan.UpdateStatistics // (Final|Native|Private) // @ game+0x18853c0
	void OnTopFractionBtnClicked(); // Function WTL.WTLPDAClan.OnTopFractionBtnClicked // (Final|Native|Private) // @ game+0x18869c0
	void OnTopAllBtnClicked(); // Function WTL.WTLPDAClan.OnTopAllBtnClicked // (Final|Native|Private) // @ game+0x18869e0
	void OnTakeSkillConfirmed(uint16_t SkillID); // Function WTL.WTLPDAClan.OnTakeSkillConfirmed // (Final|Native|Private) // @ game+0x1885ae0
	void OnTakeSkillCanceled(); // Function WTL.WTLPDAClan.OnTakeSkillCanceled // (Final|Native|Private) // @ game+0x1885ab0
	void OnTakeClanQuestBtnClicked(); // Function WTL.WTLPDAClan.OnTakeClanQuestBtnClicked // (Final|Native|Private) // @ game+0x18877a0
	void OnTakeAllClanQuestsBtnClicked(); // Function WTL.WTLPDAClan.OnTakeAllClanQuestsBtnClicked // (Final|Native|Private) // @ game+0x1887780
	void OnStatisticsTechnologyScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnStatisticsTechnologyScoreSort // (Final|Native|Private) // @ game+0x1884990
	void OnStatisticsStartDateTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.OnStatisticsStartDateTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1884f00
	void OnStatisticsStartDateTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAClan.OnStatisticsStartDateTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1885270
	void OnStatisticsRecordsScrolled(float CurrentOffset); // Function WTL.WTLPDAClan.OnStatisticsRecordsScrolled // (Final|Native|Private) // @ game+0x1884890
	void OnStatisticsPvPScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnStatisticsPvPScoreSort // (Final|Native|Private) // @ game+0x1884c30
	void OnStatisticsPvEScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnStatisticsPvEScoreSort // (Final|Native|Private) // @ game+0x1884b50
	void OnStatisticsEndDateTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.OnStatisticsEndDateTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1884d10
	void OnStatisticsEndDateTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAClan.OnStatisticsEndDateTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1885120
	void OnStatisticsCraftScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnStatisticsCraftScoreSort // (Final|Native|Private) // @ game+0x1884a70
	void OnStatisticsBtnClicked(); // Function WTL.WTLPDAClan.OnStatisticsBtnClicked // (Final|Native|Private) // @ game+0x18885b0
	void OnStatisticsBackBtnClicked(); // Function WTL.WTLPDAClan.OnStatisticsBackBtnClicked // (Final|Native|Private) // @ game+0x1884820
	void OnSkillsBtnClicked(); // Function WTL.WTLPDAClan.OnSkillsBtnClicked // (Final|Native|Private) // @ game+0x1888660
	void OnSkillsBackBtnClicked(); // Function WTL.WTLPDAClan.OnSkillsBackBtnClicked // (Final|Native|Private) // @ game+0x1885a90
	void OnSkillItemUnhovered(); // Function WTL.WTLPDAClan.OnSkillItemUnhovered // (Final|Native|Private) // @ game+0x1885bc0
	void OnSkillItemHovered(char SkillID, struct FWTLClanSkillItemData& SkillItemData); // Function WTL.WTLPDAClan.OnSkillItemHovered // (Final|Native|Private|HasOutParms) // @ game+0x1885c30
	void OnSkillItemClicked(char SkillID, struct FWTLClanSkillItemData& SkillItemData); // Function WTL.WTLPDAClan.OnSkillItemClicked // (Final|Native|Private|HasOutParms) // @ game+0x1885fc0
	void OnSkillCannotTakeErrorHide(); // Function WTL.WTLPDAClan.OnSkillCannotTakeErrorHide // (Final|Native|Private) // @ game+0x1885ab0
	void OnShowClanTechBonusesBtnClicked(); // Function WTL.WTLPDAClan.OnShowClanTechBonusesBtnClicked // (Final|Native|Private) // @ game+0x18888d0
	void OnSendMailMessageToClanMembersResponse(struct FWTLOperationResult& OperationResult); // Function WTL.WTLPDAClan.OnSendMailMessageToClanMembersResponse // (Final|Native|Private|HasOutParms) // @ game+0x1886b20
	void OnSendInviteToClanCancelBtnClicked(); // Function WTL.WTLPDAClan.OnSendInviteToClanCancelBtnClicked // (Final|Native|Private) // @ game+0x1887550
	void OnSendInviteToClanBtnClicked(); // Function WTL.WTLPDAClan.OnSendInviteToClanBtnClicked // (Final|Native|Private) // @ game+0x1887580
	void OnScoreTypeToConvertSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLPDAClan.OnScoreTypeToConvertSelectionChanged // (Final|Native|Private) // @ game+0x1884660
	void OnScoreToConvertValueChange(int32_t Value); // Function WTL.WTLPDAClan.OnScoreToConvertValueChange // (Final|Native|Private) // @ game+0x18843b0
	void OnScoreToConvertSendCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.OnScoreToConvertSendCommitted // (Final|Native|Private|HasOutParms) // @ game+0x18841d0
	void OnScoreStepPlusBtnClicked(); // Function WTL.WTLPDAClan.OnScoreStepPlusBtnClicked // (Final|Native|Private) // @ game+0x1884050
	void OnScoreStepMinusBtnClicked(); // Function WTL.WTLPDAClan.OnScoreStepMinusBtnClicked // (Final|Native|Private) // @ game+0x1884190
	void OnScoresConversionBtnClicked(); // Function WTL.WTLPDAClan.OnScoresConversionBtnClicked // (Final|Native|Private) // @ game+0x18886e0
	void OnRenamePolicyGroupBtnClicked(); // Function WTL.WTLPDAClan.OnRenamePolicyGroupBtnClicked // (Final|Native|Private) // @ game+0x1887ed0
	void OnRejectApplicationBtnClicked(); // Function WTL.WTLPDAClan.OnRejectApplicationBtnClicked // (Final|Native|Private) // @ game+0x1887980
	void OnPolicyGroupNameTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.OnPolicyGroupNameTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1887b20
	void OnPolicyGroupNameTextChanged(struct FText& InText); // Function WTL.WTLPDAClan.OnPolicyGroupNameTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1887d00
	void OnPolicyGroupItemClicked(uint64_t PolicyGroupItemID, struct FText& PolicyGroupItemName); // Function WTL.WTLPDAClan.OnPolicyGroupItemClicked // (Final|Native|Private|HasOutParms) // @ game+0x1887f10
	void OnParametersBtnClicked(); // Function WTL.WTLPDAClan.OnParametersBtnClicked // (Final|Native|Private) // @ game+0x18885f0
	void OnParametersBackBtnClicked(); // Function WTL.WTLPDAClan.OnParametersBackBtnClicked // (Final|Native|Private) // @ game+0x1885a40
	void OnNotInClanInfoTabBtnClicked(char Index); // Function WTL.WTLPDAClan.OnNotInClanInfoTabBtnClicked // (Final|Native|Private) // @ game+0x18888f0
	void OnLogRecordsScrolled(float CurrentOffset); // Function WTL.WTLPDAClan.OnLogRecordsScrolled // (Final|Native|Private) // @ game+0x1885740
	void OnLogRecordsPerPageSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLPDAClan.OnLogRecordsPerPageSelectionChanged // (Final|Native|Private) // @ game+0x1885540
	void OnLogPageSwitched(int32_t CurrentPageIndex); // Function WTL.WTLPDAClan.OnLogPageSwitched // (Final|Native|Private) // @ game+0x1885440
	void OnLogBtnClicked(); // Function WTL.WTLPDAClan.OnLogBtnClicked // (Final|Native|Private) // @ game+0x18885d0
	void OnLogBackBtnClicked(); // Function WTL.WTLPDAClan.OnLogBackBtnClicked // (Final|Native|Private) // @ game+0x18853e0
	void OnLeaveClanConfirmed(); // Function WTL.WTLPDAClan.OnLeaveClanConfirmed // (Final|Native|Private) // @ game+0x18884e0
	void OnLeaveClanBtnClicked(); // Function WTL.WTLPDAClan.OnLeaveClanBtnClicked // (Final|Native|Private) // @ game+0x1888550
	void OnLeaderboardReputationSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnLeaderboardReputationSort // (Final|Native|Private) // @ game+0x1886520
	void OnLeaderboardRatingSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnLeaderboardRatingSort // (Final|Native|Private) // @ game+0x1886440
	void OnLeaderboardPvPScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnLeaderboardPvPScoreSort // (Final|Native|Private) // @ game+0x18867c0
	void OnLeaderboardPvEScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnLeaderboardPvEScoreSort // (Final|Native|Private) // @ game+0x18866e0
	void OnLeaderboardMembersCountSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnLeaderboardMembersCountSort // (Final|Native|Private) // @ game+0x18868a0
	void OnLeaderboardCraftScoreSort(bool bIsSortAscending); // Function WTL.WTLPDAClan.OnLeaderboardCraftScoreSort // (Final|Native|Private) // @ game+0x1886600
	void OnLeaderboardBtnClicked(); // Function WTL.WTLPDAClan.OnLeaderboardBtnClicked // (Final|Native|Private) // @ game+0x1888590
	void OnLeaderboardBackBtnClicked(); // Function WTL.WTLPDAClan.OnLeaderboardBackBtnClicked // (Final|Native|Private) // @ game+0x1886980
	void OnInviteToClanBtnClicked(); // Function WTL.WTLPDAClan.OnInviteToClanBtnClicked // (Final|Native|Private) // @ game+0x1888570
	void OnGetClanLogRecordsCountResponse(struct FWTLResponse& Response); // Function WTL.WTLPDAClan.OnGetClanLogRecordsCountResponse // (Final|Native|Private|HasOutParms) // @ game+0x1885940
	void OnGetClanLogPageResponse(struct FWTLResponse& Response); // Function WTL.WTLPDAClan.OnGetClanLogPageResponse // (Final|Native|Private|HasOutParms) // @ game+0x1885840
	void OnExcludeMemberFromClanConfirmed(); // Function WTL.WTLPDAClan.OnExcludeMemberFromClanConfirmed // (Final|Native|Private) // @ game+0x18880e0
	void OnExcludeMemberFromClanBtnClicked(struct FString CharacterName); // Function WTL.WTLPDAClan.OnExcludeMemberFromClanBtnClicked // (Final|Native|Private) // @ game+0x1888240
	void OnDeletePolicyGroupConfirmed(); // Function WTL.WTLPDAClan.OnDeletePolicyGroupConfirmed // (Final|Native|Private) // @ game+0x1887e30
	void OnDeletePolicyGroupBtnClicked(); // Function WTL.WTLPDAClan.OnDeletePolicyGroupBtnClicked // (Final|Native|Private) // @ game+0x1887eb0
	void OnCurrentScoreToConvertValueChange(int32_t Value); // Function WTL.WTLPDAClan.OnCurrentScoreToConvertValueChange // (Final|Native|Private) // @ game+0x1883f70
	void OnCreatePolicyGroupBtnClicked(); // Function WTL.WTLPDAClan.OnCreatePolicyGroupBtnClicked // (Final|Native|Private) // @ game+0x1887ef0
	void OnConvertScoresConfirmed(); // Function WTL.WTLPDAClan.OnConvertScoresConfirmed // (Final|Native|Private) // @ game+0x1883e70
	void OnConvertScoresCancelBtnClicked(); // Function WTL.WTLPDAClan.OnConvertScoresCancelBtnClicked // (Final|Native|Private) // @ game+0x1883f20
	void OnConvertScoresBtnClicked(); // Function WTL.WTLPDAClan.OnConvertScoresBtnClicked // (Final|Native|Private) // @ game+0x1883f50
	void OnConverterSliderValueChanged(float Value); // Function WTL.WTLPDAClan.OnConverterSliderValueChanged // (Final|Native|Private) // @ game+0x18840a0
	void OnConvertedScoreTypeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLPDAClan.OnConvertedScoreTypeSelectionChanged // (Final|Native|Private) // @ game+0x18844a0
	void OnCloseLevelsInfoBtnClicked(); // Function WTL.WTLPDAClan.OnCloseLevelsInfoBtnClicked // (Final|Native|Private) // @ game+0x1883e40
	void OnClanTechBonusesScrollBoxUserScrolled(float CurrentOffset); // Function WTL.WTLPDAClan.OnClanTechBonusesScrollBoxUserScrolled // (Final|Native|Private) // @ game+0x1888770
	void OnClanTabBtnClicked(char Index); // Function WTL.WTLPDAClan.OnClanTabBtnClicked // (Final|Native|Private) // @ game+0x1888410
	void OnClansChanged(); // Function WTL.WTLPDAClan.OnClansChanged // (Final|Native|Private) // @ game+0x1886ab0
	void OnClanQuestItemClicked(int32_t QuestID); // Function WTL.WTLPDAClan.OnClanQuestItemClicked // (Final|Native|Private) // @ game+0x18877e0
	void OnClanQuestFilterCheckedState(bool bIsChecked); // Function WTL.WTLPDAClan.OnClanQuestFilterCheckedState // (Final|Native|Private) // @ game+0x18878b0
	void OnClanQuestDetailsBtnClicked(); // Function WTL.WTLPDAClan.OnClanQuestDetailsBtnClicked // (Final|Native|Private) // @ game+0x1887760
	void OnClanPolicyGroupsChanged(); // Function WTL.WTLPDAClan.OnClanPolicyGroupsChanged // (Final|Native|Private) // @ game+0x1886a70
	void OnClanMessageSendBtnClicked(); // Function WTL.WTLPDAClan.OnClanMessageSendBtnClicked // (Final|Native|Private) // @ game+0x1886c50
	void OnClanMessageCancelBtnClicked(); // Function WTL.WTLPDAClan.OnClanMessageCancelBtnClicked // (Final|Native|Private) // @ game+0x1886c20
	void OnClanMessageBtnClicked(); // Function WTL.WTLPDAClan.OnClanMessageBtnClicked // (Final|Native|Private) // @ game+0x1888680
	void OnClanMembersChanged(); // Function WTL.WTLPDAClan.OnClanMembersChanged // (Final|Native|Private) // @ game+0x1886a90
	void OnClanLogTypeButtonClicked(char Index); // Function WTL.WTLPDAClan.OnClanLogTypeButtonClicked // (Final|Native|Private) // @ game+0x18889c0
	void OnClanLevelsInfoBtnClicked(); // Function WTL.WTLPDAClan.OnClanLevelsInfoBtnClicked // (Final|Native|Private) // @ game+0x1888700
	void OnClanLeaderboardItemClicked(uint16_t ClanID); // Function WTL.WTLPDAClan.OnClanLeaderboardItemClicked // (Final|Native|Private) // @ game+0x1886350
	void OnClanInfoBtnClicked(); // Function WTL.WTLPDAClan.OnClanInfoBtnClicked // (Final|Native|Private) // @ game+0x18886c0
	void OnClanDescriptionSetBtnClicked(); // Function WTL.WTLPDAClan.OnClanDescriptionSetBtnClicked // (Final|Native|Private) // @ game+0x1887280
	void OnClanDescriptionCancelBtnClicked(); // Function WTL.WTLPDAClan.OnClanDescriptionCancelBtnClicked // (Final|Native|Private) // @ game+0x1887250
	void OnClanDescriptionBtnClicked(); // Function WTL.WTLPDAClan.OnClanDescriptionBtnClicked // (Final|Native|Private) // @ game+0x18886a0
	void OnClanApplicationsChanged(); // Function WTL.WTLPDAClan.OnClanApplicationsChanged // (Final|Native|Private) // @ game+0x1886a50
	void OnClanApplicationItemClicked(uint64_t CharacterID); // Function WTL.WTLPDAClan.OnClanApplicationItemClicked // (Final|Native|Private) // @ game+0x18879f0
	void OnClanApplicationCancelBtnClicked(); // Function WTL.WTLPDAClan.OnClanApplicationCancelBtnClicked // (Final|Native|Private) // @ game+0x18873d0
	void OnClanApplicationActionBtnClicked(); // Function WTL.WTLPDAClan.OnClanApplicationActionBtnClicked // (Final|Native|Private) // @ game+0x1887400
	void OnClanApplication(uint16_t ClanID); // Function WTL.WTLPDAClan.OnClanApplication // (Final|Native|Public) // @ game+0x1883d60
	void OnBackToClanQuestsBtnClicked(); // Function WTL.WTLPDAClan.OnBackToClanQuestsBtnClicked // (Final|Native|Private) // @ game+0x18877c0
	void OnBackToApplicationsBtnClicked(); // Function WTL.WTLPDAClan.OnBackToApplicationsBtnClicked // (Final|Native|Private) // @ game+0x18879c0
	void OnBackFromClanTechBonusesBtnClicked(); // Function WTL.WTLPDAClan.OnBackFromClanTechBonusesBtnClicked // (Final|Native|Private) // @ game+0x1888870
	void OnAppointMemberAsClanLeaderConfirmed(); // Function WTL.WTLPDAClan.OnAppointMemberAsClanLeaderConfirmed // (Final|Native|Private) // @ game+0x18881c0
	void OnAppointMemberAsClanLeaderBtnClicked(uint64_t CharacterID); // Function WTL.WTLPDAClan.OnAppointMemberAsClanLeaderBtnClicked // (Final|Native|Private) // @ game+0x1888330
	void OnActionPolicyGroupNameBtnClicked(); // Function WTL.WTLPDAClan.OnActionPolicyGroupNameBtnClicked // (Final|Native|Private) // @ game+0x1887b00
	void OnActionCancelPolicyGroupNameBtnClicked(); // Function WTL.WTLPDAClan.OnActionCancelPolicyGroupNameBtnClicked // (Final|Native|Private) // @ game+0x1887ad0
	void OnAcceptApplicationBtnClicked(); // Function WTL.WTLPDAClan.OnAcceptApplicationBtnClicked // (Final|Native|Private) // @ game+0x18879a0
	void ClanMessageTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.ClanMessageTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1886c70
	void ClanMessageTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAClan.ClanMessageTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1886ff0
	void ClanMessageSubjectTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.ClanMessageSubjectTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1886e10
	void ClanMessageSubjectTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAClan.ClanMessageSubjectTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1887120
	void ClanDescriptionTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAClan.ClanDescriptionTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x18872a0
	void ClanApplicationCommentaryTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAClan.ClanApplicationCommentaryTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1887420
	void CharacterNameToInviteTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAClan.CharacterNameToInviteTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x18875a0
};

// Class WTL.WTLPDAClanApplicationItem
// Size: 0x4c8 (Inherited: 0x4a0)
struct UWTLPDAClanApplicationItem : UWTLCommonSelectedItem {
	struct UTextBlock* tbCharacterName; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)
};

// Class WTL.WTLPDALeaderboardItemBase
// Size: 0x4b8 (Inherited: 0x4a0)
struct UWTLPDALeaderboardItemBase : UWTLCommonSelectedItem {
	struct UTextBlock* tbNumber; // 0x4a0(0x08)
	struct UTextBlock* tbClanName; // 0x4a8(0x08)
	char pad_4B0[0x8]; // 0x4b0(0x08)
};

// Class WTL.WTLPDAClanLeaderboardItem
// Size: 0x678 (Inherited: 0x4b8)
struct UWTLPDAClanLeaderboardItem : UWTLPDALeaderboardItemBase {
	struct UWTLCommonButton* ucBtnClanApplication; // 0x4b8(0x08)
	struct UImage* imgFaction; // 0x4c0(0x08)
	struct UTextBlock* tbMemberCount; // 0x4c8(0x08)
	struct UTextBlock* tbPvPScore; // 0x4d0(0x08)
	struct UTextBlock* tbPvEScore; // 0x4d8(0x08)
	struct UTextBlock* tbCraftScore; // 0x4e0(0x08)
	struct UBorder* bReputation; // 0x4e8(0x08)
	struct UTextBlock* tbReputation; // 0x4f0(0x08)
	struct UTextBlock* tbScoreCount; // 0x4f8(0x08)
	char pad_500[0x168]; // 0x500(0x168)
	struct TArray<struct FWTLFactionTexture> FactionTextures; // 0x668(0x10)

	void OnClanApplicationBtnClicked(); // Function WTL.WTLPDAClanLeaderboardItem.OnClanApplicationBtnClicked // (Final|Native|Private) // @ game+0x188a2a0
};

// Class WTL.WTLPDAClanLevelInfo
// Size: 0x288 (Inherited: 0x260)
struct UWTLPDAClanLevelInfo : UUserWidget {
	struct UTextBlock* tbLevel; // 0x260(0x08)
	struct UTextBlock* tbPvPScore; // 0x268(0x08)
	struct UTextBlock* tbPvEScore; // 0x270(0x08)
	struct UTextBlock* tbCraftScore; // 0x278(0x08)
	struct UTextBlock* tbMembersCount; // 0x280(0x08)
};

// Class WTL.WTLPDAClanLogRecord
// Size: 0x268 (Inherited: 0x260)
struct UWTLPDAClanLogRecord : UUserWidget {
	struct URichTextBlock* rtbText; // 0x260(0x08)
};

// Class WTL.WTLPDAClanMemberItem
// Size: 0x330 (Inherited: 0x260)
struct UWTLPDAClanMemberItem : UUserWidget {
	struct UMenuAnchor* maPopupMenu; // 0x260(0x08)
	struct UImage* imgClanLeader; // 0x268(0x08)
	struct UImage* imgCharacterClass; // 0x270(0x08)
	struct UTextBlock* tbName; // 0x278(0x08)
	struct UHorizontalBox* hbPolicyGroupName; // 0x280(0x08)
	struct UTextBlock* tbPolicyGroupName; // 0x288(0x08)
	struct UTextBlock* tbLevel; // 0x290(0x08)
	struct UWTLCommonPopupMenu* m_PopupMenuWidget; // 0x298(0x08)
	char pad_2A0[0x28]; // 0x2a0(0x28)
	struct TSoftClassPtr<UObject> PopupMenuWidgetClass; // 0x2c8(0x28)
	char pad_2F0[0x30]; // 0x2f0(0x30)
	struct TArray<struct FWTLCharacterClassTexture> CharacterClassesTextures; // 0x320(0x10)

	void RemoveFromDeputyClanLeaderBtnClicked(); // Function WTL.WTLPDAClanMemberItem.RemoveFromDeputyClanLeaderBtnClicked // (Final|Native|Private) // @ game+0x188a700
	void OnMenuOpenChanged(bool bIsOpen); // Function WTL.WTLPDAClanMemberItem.OnMenuOpenChanged // (Final|Native|Private) // @ game+0x188a940
	struct UWidget* OnGetPopupMenuContent(); // Function WTL.WTLPDAClanMemberItem.OnGetPopupMenuContent // (Final|Native|Private) // @ game+0x188aa50
	void ExcludeFromClanBtnClicked(); // Function WTL.WTLPDAClanMemberItem.ExcludeFromClanBtnClicked // (Final|Native|Private) // @ game+0x188a4f0
	void AssignPolicyGroupToClanMember(uint64_t PolicyGroupID); // Function WTL.WTLPDAClanMemberItem.AssignPolicyGroupToClanMember // (Final|Native|Private) // @ game+0x188a550
	void AssignPolicyGroupBtnClicked(); // Function WTL.WTLPDAClanMemberItem.AssignPolicyGroupBtnClicked // (Final|Native|Private) // @ game+0x188a6e0
	void AppointAsDeputyClanLeaderBtnClicked(); // Function WTL.WTLPDAClanMemberItem.AppointAsDeputyClanLeaderBtnClicked // (Final|Native|Private) // @ game+0x188a7f0
	void AppointAsClanLeaderBtnClicked(); // Function WTL.WTLPDAClanMemberItem.AppointAsClanLeaderBtnClicked // (Final|Native|Private) // @ game+0x188a8e0
};

// Class WTL.WTLPDAClanPolicyGroupItem
// Size: 0x4c8 (Inherited: 0x4a0)
struct UWTLPDAClanPolicyGroupItem : UWTLCommonSelectedItem {
	struct UTextBlock* tbName; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)
};

// Class WTL.WTLPDAClanQuestListItem
// Size: 0x4e8 (Inherited: 0x4a0)
struct UWTLPDAClanQuestListItem : UWTLCommonSelectedItem {
	struct UHorizontalBox* hbRecommendedCharacterLevel; // 0x4a0(0x08)
	struct UTextBlock* tbRecommendedCharacterLevel; // 0x4a8(0x08)
	struct UTextBlock* tbQuestName; // 0x4b0(0x08)
	struct UHorizontalBox* hbQuestRewardScores; // 0x4b8(0x08)
	struct UTextBlock* tbQuestRewardScores; // 0x4c0(0x08)
	char pad_4C8[0x20]; // 0x4c8(0x20)
};

// Class WTL.WTLPDAClanSkillInfo
// Size: 0x318 (Inherited: 0x310)
struct UWTLPDAClanSkillInfo : UWTLPDASkillInfo {
	char pad_310[0x8]; // 0x310(0x08)
};

// Class WTL.WTLPDAClanSkillsItem
// Size: 0x440 (Inherited: 0x3e0)
struct UWTLPDAClanSkillsItem : UWTLPDASkillsItem {
	char pad_3E0[0x50]; // 0x3e0(0x50)
	char SkillID; // 0x430(0x01)
	char pad_431[0xf]; // 0x431(0x0f)
};

// Class WTL.WTLPDAClanSkillsLevelCaption
// Size: 0x2c0 (Inherited: 0x260)
struct UWTLPDAClanSkillsLevelCaption : UUserWidget {
	struct UBorder* bContent; // 0x260(0x08)
	struct UTextBlock* tbLevel; // 0x268(0x08)
	struct FSlateColor RedColor; // 0x270(0x28)
	struct FSlateColor GreenColor; // 0x298(0x28)
};

// Class WTL.WTLPDAClanSkillTakeConfirm
// Size: 0x2b8 (Inherited: 0x2a8)
struct UWTLPDAClanSkillTakeConfirm : UWTLPDASkillTakeConfirm {
	struct UWTLPDAClanSkillInfo* ucClanSkillInfo; // 0x2a8(0x08)
	char pad_2B0[0x8]; // 0x2b0(0x08)
};

// Class WTL.WTLPDAClanStatisticsRecord
// Size: 0x288 (Inherited: 0x260)
struct UWTLPDAClanStatisticsRecord : UUserWidget {
	struct UTextBlock* tbCharacterName; // 0x260(0x08)
	struct UTextBlock* tbPvPScore; // 0x268(0x08)
	struct UTextBlock* tbPvEScore; // 0x270(0x08)
	struct UTextBlock* tbCraftScore; // 0x278(0x08)
	struct UTextBlock* tbTechnologyScore; // 0x280(0x08)
};

// Class WTL.WTLPDAClanTechBonus
// Size: 0x280 (Inherited: 0x260)
struct UWTLPDAClanTechBonus : UUserWidget {
	struct UImage* imgSkillIcon; // 0x260(0x08)
	struct UBorder* bContent; // 0x268(0x08)
	struct UTextBlock* tbSkillName; // 0x270(0x08)
	struct UTextBlock* tbSkillDescription; // 0x278(0x08)
};

// Class WTL.WTLPDACraftRecipes
// Size: 0x3c0 (Inherited: 0x288)
struct UWTLPDACraftRecipes : UWTLPDABase {
	struct UWidgetSwitcher* wsRecipesList; // 0x288(0x08)
	struct UWTLCommonComboBoxString* cbsCraftTypes; // 0x290(0x08)
	struct UScrollBox* sbCraftItemsList; // 0x298(0x08)
	struct UWidgetSwitcher* wsRecipe; // 0x2a0(0x08)
	struct UScrollBox* sbRecipeInfo; // 0x2a8(0x08)
	struct UHorizontalBox* hbRecipeID; // 0x2b0(0x08)
	struct UTextBlock* tbRecipeID; // 0x2b8(0x08)
	struct UTextBlock* tbItemName; // 0x2c0(0x08)
	struct UTextBlock* tbDescription; // 0x2c8(0x08)
	struct UHorizontalBox* hbNeedCraftExperience; // 0x2d0(0x08)
	struct UHorizontalBox* hbNeedSurvivalExperience; // 0x2d8(0x08)
	struct UTextBlock* tbNeedCraftExperience; // 0x2e0(0x08)
	struct UTextBlock* tbNeedSurvivalExperience; // 0x2e8(0x08)
	struct UWrapBox* wbIngredients; // 0x2f0(0x08)
	struct UWrapBox* wbResults; // 0x2f8(0x08)
	struct UBorder* bSelectRecipeHint; // 0x300(0x08)
	struct UBorder* bRecipesList; // 0x308(0x08)
	struct UBorder* bMainRecipeInfo; // 0x310(0x08)
	struct UBorder* bRecipeResults; // 0x318(0x08)
	char pad_320[0x28]; // 0x320(0x28)
	struct TSoftClassPtr<UObject> CraftWindowItemWidgetClass; // 0x348(0x28)
	struct TSoftClassPtr<UObject> IngredientItemSlotWidgetClass; // 0x370(0x28)
	struct TSoftClassPtr<UObject> ResultItemSlotWidgetClass; // 0x398(0x28)

	void OnCraftWindowItemClicked(int32_t CraftItemID); // Function WTL.WTLPDACraftRecipes.OnCraftWindowItemClicked // (Final|Native|Private) // @ game+0x188b280
	void OnCraftTypeSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLPDACraftRecipes.OnCraftTypeSelectionChanged // (Final|Native|Private) // @ game+0x188b350
};

// Class WTL.WTLPDADataSync
// Size: 0x290 (Inherited: 0x260)
struct UWTLPDADataSync : UUserWidget {
	struct UImage* imgDataSync; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)
	struct UWidgetAnimation* SyncAnimation; // 0x288(0x08)

	void OnSyncAnimationFinished(); // Function WTL.WTLPDADataSync.OnSyncAnimationFinished // (Final|Native|Private) // @ game+0x188b6f0
};

// Class WTL.WTLPDAFraction
// Size: 0x9e0 (Inherited: 0x288)
struct UWTLPDAFraction : UWTLPDABase {
	struct UWidgetSwitcher* wsFractionInfo; // 0x288(0x08)
	struct UWidgetSwitcher* wsFractionImage; // 0x290(0x08)
	struct UTextBlock* tbFractionName; // 0x298(0x08)
	struct UWTLCommonTextButton* ucBtnLeaderboardAllTime; // 0x2a0(0x08)
	struct UCanvasPanel* cpLeaderboardPeriodBtn; // 0x2a8(0x08)
	struct UWTLCommonTextButton* ucBtnLeaderboardPeriod; // 0x2b0(0x08)
	struct UWTLCommonTextButton* ucBtnLeaveFraction; // 0x2b8(0x08)
	struct UBorder* bNotInFractionCaption; // 0x2c0(0x08)
	struct UBorder* bFactionAdvantages; // 0x2c8(0x08)
	struct UBorder* bInFractionCaption; // 0x2d0(0x08)
	struct UBorder* bFractionInfo; // 0x2d8(0x08)
	struct UWidgetSwitcher* wsRanks; // 0x2e0(0x08)
	struct UBorder* bCurrentRank; // 0x2e8(0x08)
	struct UBorder* bRankNotAssigned; // 0x2f0(0x08)
	struct UBorder* bNextRank; // 0x2f8(0x08)
	struct UBorder* bScoreToNextRank; // 0x300(0x08)
	struct UBorder* bMaxRankCaption; // 0x308(0x08)
	struct UBorder* bRanksTableCaption; // 0x310(0x08)
	struct UWidgetSwitcher* wsCurrentRank; // 0x318(0x08)
	struct UWidgetSwitcher* wsNextRank; // 0x320(0x08)
	struct UImage* imgCurrentRank; // 0x328(0x08)
	struct UTextBlock* tbCurrentRankName; // 0x330(0x08)
	struct UImage* imgNextRank; // 0x338(0x08)
	struct UTextBlock* tbNextRankName; // 0x340(0x08)
	struct UTextBlock* tbScoreToNextRank; // 0x348(0x08)
	struct UProgressBar* pbProgressToNextRank; // 0x350(0x08)
	struct UTextBlock* tbCurrentScore; // 0x358(0x08)
	struct UTextBlock* tbNextRankScore; // 0x360(0x08)
	struct UWTLCommonButton* ucBtnRanksTable; // 0x368(0x08)
	struct UWTLCommonButton* ucBtnBackToRankInfo; // 0x370(0x08)
	struct UScrollBox* sbRanks; // 0x378(0x08)
	struct UWidgetSwitcher* wsLeaderboardAllTime; // 0x380(0x08)
	struct UBorder* bLeaderboardAllTimeLoading; // 0x388(0x08)
	struct UWTLCommonButton* ucLeaderboardAllTimeBtnTopAll; // 0x390(0x08)
	struct UWTLCommonButton* ucLeaderboardAllTimeBtnTopFraction; // 0x398(0x08)
	struct UBorder* bLeaderboardAllTimeHeadline; // 0x3a0(0x08)
	struct UScrollBox* sbLeaderboardAllTime; // 0x3a8(0x08)
	struct UTextBlock* tbLeaderboardAllTimeEmptyTitle; // 0x3b0(0x08)
	struct UWTLCommonButton* ucLeaderboardAllTimeBtnBack; // 0x3b8(0x08)
	struct UWidgetSwitcher* wsLeaderboardPeriod; // 0x3c0(0x08)
	struct UTextBlock* tbLeaderboardPeriodSelectTitle; // 0x3c8(0x08)
	struct UBorder* bLeaderboardPeriodLoading; // 0x3d0(0x08)
	struct UHorizontalBox* hbLeaderboardPeriodButtons; // 0x3d8(0x08)
	struct UWTLCommonButton* ucLeaderboardPeriodBtnWeek; // 0x3e0(0x08)
	struct UWTLCommonButton* ucLeaderboardPeriodBtnMonth; // 0x3e8(0x08)
	struct UWTLCommonButton* ucLeaderboardPeriodBtnQuarter; // 0x3f0(0x08)
	struct UWTLCommonButton* ucLeaderboardPeriodBtnYear; // 0x3f8(0x08)
	struct UBorder* bLeaderboardPeriodHeadline; // 0x400(0x08)
	struct UScrollBox* sbLeaderboardPeriod; // 0x408(0x08)
	struct UTextBlock* tbLeaderboardPeriodEmptyTitle; // 0x410(0x08)
	struct UTextBlock* tbLeaderboardPeriodFailedToGetTitle; // 0x418(0x08)
	struct UWTLCommonButton* ucLeaderboardPeriodBtnBack; // 0x420(0x08)
	char pad_428[0x50]; // 0x428(0x50)
	struct TSoftClassPtr<UObject> RanksTableItemWidgetClass; // 0x478(0x28)
	struct TSoftClassPtr<UObject> LeaderboardAllTimeItemWidgetClass; // 0x4a0(0x28)
	struct TSoftClassPtr<UObject> LeaderboardPeriodItemWidgetClass; // 0x4c8(0x28)
	struct FButtonStyle DefaultButtonStyle; // 0x4f0(0x278)
	struct FButtonStyle SelectedButtonStyle; // 0x768(0x278)

	void OnRanksTableBtnClicked(); // Function WTL.WTLPDAFraction.OnRanksTableBtnClicked // (Final|Native|Private) // @ game+0x188b8b0
	void OnLeaveFractionConfirmedFinal(); // Function WTL.WTLPDAFraction.OnLeaveFractionConfirmedFinal // (Final|Native|Private) // @ game+0x188b8e0
	void OnLeaveFractionConfirmed(); // Function WTL.WTLPDAFraction.OnLeaveFractionConfirmed // (Final|Native|Private) // @ game+0x188b950
	void OnLeaveFractionBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaveFractionBtnClicked // (Final|Native|Private) // @ game+0x188b970
	void OnLeaderboardPeriodYearBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodYearBtnClicked // (Final|Native|Private) // @ game+0x188bae0
	void OnLeaderboardPeriodWeekBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodWeekBtnClicked // (Final|Native|Private) // @ game+0x188bba0
	void OnLeaderboardPeriodScrollBoxScrolled(float CurrentOffset); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodScrollBoxScrolled // (Final|Native|Private) // @ game+0x188b9e0
	void OnLeaderboardPeriodQuarterBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodQuarterBtnClicked // (Final|Native|Private) // @ game+0x188bb20
	void OnLeaderboardPeriodMonthBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodMonthBtnClicked // (Final|Native|Private) // @ game+0x188bb60
	void OnLeaderboardPeriodBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodBtnClicked // (Final|Native|Private) // @ game+0x188bbe0
	void OnLeaderboardPeriodBackBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardPeriodBackBtnClicked // (Final|Native|Private) // @ game+0x188b990
	void OnLeaderboardAllTimeUpdated(); // Function WTL.WTLPDAFraction.OnLeaderboardAllTimeUpdated // (Final|Native|Private) // @ game+0x188bc60
	void OnLeaderboardAllTimeTopFractionBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardAllTimeTopFractionBtnClicked // (Final|Native|Private) // @ game+0x188bc80
	void OnLeaderboardAllTimeTopAllBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardAllTimeTopAllBtnClicked // (Final|Native|Private) // @ game+0x188bcb0
	void OnLeaderboardAllTimeBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardAllTimeBtnClicked // (Final|Native|Private) // @ game+0x188bce0
	void OnLeaderboardAllTimeBackBtnClicked(); // Function WTL.WTLPDAFraction.OnLeaderboardAllTimeBackBtnClicked // (Final|Native|Private) // @ game+0x188bc00
	void OnBackToRankInfoBtnClicked(); // Function WTL.WTLPDAFraction.OnBackToRankInfoBtnClicked // (Final|Native|Private) // @ game+0x188b870
};

// Class WTL.WTLPDAFractionLeaderboardItem
// Size: 0x538 (Inherited: 0x4b8)
struct UWTLPDAFractionLeaderboardItem : UWTLPDALeaderboardItemBase {
	struct UTextBlock* tbName; // 0x4b8(0x08)
	struct UTextBlock* tbClass; // 0x4c0(0x08)
	struct UTextBlock* tbLevel; // 0x4c8(0x08)
	struct UImage* imgRank; // 0x4d0(0x08)
	struct UTextBlock* tbScoreCount; // 0x4d8(0x08)
	struct UImage* imgFaction; // 0x4e0(0x08)
	struct TSoftObjectPtr<UTexture2D> ConfederationFactionTexture; // 0x4e8(0x28)
	struct TSoftObjectPtr<UTexture2D> BlackSunsetFactionTexture; // 0x510(0x28)
};

// Class WTL.WTLPDAFractionLeaderboardPeriodItem
// Size: 0x4f8 (Inherited: 0x4b8)
struct UWTLPDAFractionLeaderboardPeriodItem : UWTLPDALeaderboardItemBase {
	struct UBorder* bSex; // 0x4b8(0x08)
	struct UWidgetSwitcher* wsSex; // 0x4c0(0x08)
	struct UImage* imgClass; // 0x4c8(0x08)
	struct UTextBlock* tbName; // 0x4d0(0x08)
	struct UTextBlock* tbScore; // 0x4d8(0x08)
	struct UTextBlock* tbTotalScore; // 0x4e0(0x08)
	struct TArray<struct FWTLCharacterClassTexture> CharacterClassTextures; // 0x4e8(0x10)
};

// Class WTL.WTLPDAFractionRanksTableItem
// Size: 0x280 (Inherited: 0x260)
struct UWTLPDAFractionRanksTableItem : UUserWidget {
	struct UTextBlock* tbNumber; // 0x260(0x08)
	struct UImage* imgRank; // 0x268(0x08)
	struct UTextBlock* tbRankName; // 0x270(0x08)
	struct UTextBlock* tbScoreCount; // 0x278(0x08)
};

// Class WTL.WTLPDAFriendsAndEnemies
// Size: 0xbb0 (Inherited: 0x288)
struct UWTLPDAFriendsAndEnemies : UWTLPDABase {
	struct UWidgetSwitcher* wsMain; // 0x288(0x08)
	struct UBorder* bNotCharacters; // 0x290(0x08)
	struct UWTLCommonButton* ucBtnAddFirstCharacter; // 0x298(0x08)
	struct UBorder* bCharactersListHeader; // 0x2a0(0x08)
	struct UWTLCommonComboBoxString* cbsContactTypeFilter; // 0x2a8(0x08)
	struct UScrollBox* sbCharactersList; // 0x2b0(0x08)
	struct UBorder* bAddCharacterBtn; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnAddCharacter; // 0x2c0(0x08)
	struct UBorder* bAction; // 0x2c8(0x08)
	struct UBorder* bActionBackground; // 0x2d0(0x08)
	struct UWidgetSwitcher* wsAction; // 0x2d8(0x08)
	struct UBorder* bActionContent; // 0x2e0(0x08)
	struct UBorder* bActionAddingCharacter; // 0x2e8(0x08)
	struct UTextBlock* tbActionNameTitle; // 0x2f0(0x08)
	struct UWTLCommonComboBoxString* cbsContactType; // 0x2f8(0x08)
	struct UEditableTextBox* etbCharacterName; // 0x300(0x08)
	struct UMultiLineEditableTextBox* metbDescription; // 0x308(0x08)
	struct UWTLCommonTextButton* ucBtnAction; // 0x310(0x08)
	struct UWTLCommonButton* ucBtnCancelAction; // 0x318(0x08)
	struct UWidgetSwitcher* wsContactInfo; // 0x320(0x08)
	struct UBorder* bSelectCharacter; // 0x328(0x08)
	struct UTextBlock* tbSelectedCharacterName; // 0x330(0x08)
	struct UWidgetSwitcher* wsSelectedContactType; // 0x338(0x08)
	struct UBorder* bSelectedDescription; // 0x340(0x08)
	struct UTextBlock* tbSelectedDescription; // 0x348(0x08)
	struct UBorder* bSelectedButtons; // 0x350(0x08)
	struct UWTLCommonButton* ucBtnInviteToGroup; // 0x358(0x08)
	struct UWTLCommonButton* ucBtnSendMessage; // 0x360(0x08)
	struct UWTLCommonButton* ucBtnEdit; // 0x368(0x08)
	struct UWTLCommonButton* ucBtnRemove; // 0x370(0x08)
	char pad_378[0xa0]; // 0x378(0xa0)
	struct TSoftClassPtr<UObject> FriendsAndEnemiesListItemWidgetClass; // 0x418(0x28)
	struct FComboButtonStyle ContactTypeFriendComboBoxButtonStyle; // 0x440(0x3b8)
	struct FComboButtonStyle ContactTypeEnemyComboBoxButtonStyle; // 0x7f8(0x3b8)

	void SendMessageBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.SendMessageBtnClicked // (Final|Native|Private) // @ game+0x188c690
	void RemoveContactConfirmed(); // Function WTL.WTLPDAFriendsAndEnemies.RemoveContactConfirmed // (Final|Native|Private) // @ game+0x188c600
	void RemoveBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.RemoveBtnClicked // (Final|Native|Private) // @ game+0x188c650
	void OnGetCharacterIDByNameResponseWaitingEnd(); // Function WTL.WTLPDAFriendsAndEnemies.OnGetCharacterIDByNameResponseWaitingEnd // (Final|Native|Private) // @ game+0x188cd30
	void OnGetCharacterIDByNameResponse(struct FWTLResponse& Response); // Function WTL.WTLPDAFriendsAndEnemies.OnGetCharacterIDByNameResponse // (Final|Native|Private|HasOutParms) // @ game+0x188cda0
	void OnFriendsAndEnemiesListItemClicked(uint64_t CharacterID); // Function WTL.WTLPDAFriendsAndEnemies.OnFriendsAndEnemiesListItemClicked // (Final|Native|Private) // @ game+0x188c520
	void OnDescriptionTextChanged(struct FText& InText); // Function WTL.WTLPDAFriendsAndEnemies.OnDescriptionTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x188c720
	void OnContactTypeFilterSelectionChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLPDAFriendsAndEnemies.OnContactTypeFilterSelectionChanged // (Final|Native|Private) // @ game+0x188cb60
	void OnCharacterNameTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAFriendsAndEnemies.OnCharacterNameTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x188c850
	void OnCharacterNameTextChanged(struct FText& InText); // Function WTL.WTLPDAFriendsAndEnemies.OnCharacterNameTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x188ca10
	void InviteToGroupBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.InviteToGroupBtnClicked // (Final|Native|Private) // @ game+0x188c6b0
	void EditBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.EditBtnClicked // (Final|Native|Private) // @ game+0x188c670
	void CancelActionBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.CancelActionBtnClicked // (Final|Native|Private) // @ game+0x188c6d0
	void AddCharacterBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.AddCharacterBtnClicked // (Final|Native|Private) // @ game+0x188cb40
	void ActionBtnClicked(); // Function WTL.WTLPDAFriendsAndEnemies.ActionBtnClicked // (Final|Native|Private) // @ game+0x188c700
};

// Class WTL.WTLPDAFriendsAndEnemiesListItem
// Size: 0x568 (Inherited: 0x4a0)
struct UWTLPDAFriendsAndEnemiesListItem : UWTLCommonSelectedItem {
	struct UImage* imgCharacterContactType; // 0x4a0(0x08)
	struct UTextBlock* tbCharacterName; // 0x4a8(0x08)
	struct UImage* imgNetStatus; // 0x4b0(0x08)
	char pad_4B8[0x20]; // 0x4b8(0x20)
	struct TSoftObjectPtr<UTexture2D> FriendIcon; // 0x4d8(0x28)
	struct TSoftObjectPtr<UTexture2D> EnemyIcon; // 0x500(0x28)
	struct FLinearColor FriendIconColor; // 0x528(0x10)
	struct FLinearColor EnemyIconColor; // 0x538(0x10)
	struct FLinearColor OnlineNetStatusColor; // 0x548(0x10)
	struct FLinearColor OfflineNetStatusColor; // 0x558(0x10)
};

// Class WTL.WTLPDAGroup
// Size: 0x3c8 (Inherited: 0x288)
struct UWTLPDAGroup : UWTLPDABase {
	struct UWidgetSwitcher* wsGroupStatus; // 0x288(0x08)
	struct UVerticalBox* vbGroupInvites; // 0x290(0x08)
	struct UScrollBox* sbGroupInvites; // 0x298(0x08)
	struct UWTLCommonButton* ucBtnCreateGroup; // 0x2a0(0x08)
	struct UTextBlock* tbGroupMembersTitle; // 0x2a8(0x08)
	struct UVerticalBox* vbGroupMembers; // 0x2b0(0x08)
	struct UScrollBox* sbGroupMembers; // 0x2b8(0x08)
	struct UWidgetSwitcher* wsGroupName; // 0x2c0(0x08)
	struct UTextBlock* tbGroupID; // 0x2c8(0x08)
	struct UTextBlock* tbGroupName; // 0x2d0(0x08)
	struct UWTLCommonButton* ucBtnChangeGroupName; // 0x2d8(0x08)
	struct UWidgetSwitcher* wsGroupLeader; // 0x2e0(0x08)
	struct UTextBlock* tbInvitePlayersTooltip; // 0x2e8(0x08)
	struct UWTLCommonButton* ucBtnSendGroupMessage; // 0x2f0(0x08)
	struct UWTLCommonButton* ucBtnInviteToGroup; // 0x2f8(0x08)
	struct UWTLCommonButton* ucBtnLeaveGroup; // 0x300(0x08)
	struct UBorder* bSetGroupName; // 0x308(0x08)
	struct UEditableTextBox* etbGroupName; // 0x310(0x08)
	struct UWTLCommonButton* ucBtnSetGroupName; // 0x318(0x08)
	struct UWTLCommonButton* ucBtnSetGroupNameCancel; // 0x320(0x08)
	struct UBorder* bInviteToGroup; // 0x328(0x08)
	struct UWTLCommonSuggestionTextBox* stbCharacterNameToInvite; // 0x330(0x08)
	struct UEditableTextBox* etbCharacterNameToInvite; // 0x338(0x08)
	struct UWTLCommonButton* ucBtnSendInviteToGroup; // 0x340(0x08)
	struct UWTLCommonButton* ucBtnSendInviteToGroupCancel; // 0x348(0x08)
	char pad_350[0x28]; // 0x350(0x28)
	struct TSoftClassPtr<UObject> GroupInviteItemWidgetClass; // 0x378(0x28)
	struct TSoftClassPtr<UObject> GroupMemberItemWidgetClass; // 0x3a0(0x28)

	void OnSetGroupNameCancelBtnClicked(); // Function WTL.WTLPDAGroup.OnSetGroupNameCancelBtnClicked // (Final|Native|Private) // @ game+0x188db00
	void OnSetGroupNameBtnClicked(); // Function WTL.WTLPDAGroup.OnSetGroupNameBtnClicked // (Final|Native|Private) // @ game+0x188db30
	void OnSetGroupLeaderConfirm(); // Function WTL.WTLPDAGroup.OnSetGroupLeaderConfirm // (Final|Native|Private) // @ game+0x188e2f0
	void OnSetGroupLeader(uint64_t CharacterID, struct FString CharacterName); // Function WTL.WTLPDAGroup.OnSetGroupLeader // (Final|Native|Private) // @ game+0x188e7a0
	void OnSendInviteToGroupCancelBtnClicked(); // Function WTL.WTLPDAGroup.OnSendInviteToGroupCancelBtnClicked // (Final|Native|Private) // @ game+0x188dab0
	void OnSendInviteToGroupBtnClicked(); // Function WTL.WTLPDAGroup.OnSendInviteToGroupBtnClicked // (Final|Native|Private) // @ game+0x188dae0
	void OnSendGroupMessageBtnClicked(); // Function WTL.WTLPDAGroup.OnSendGroupMessageBtnClicked // (Final|Native|Private) // @ game+0x188e140
	void OnLeaveGroupConfirm(); // Function WTL.WTLPDAGroup.OnLeaveGroupConfirm // (Final|Native|Private) // @ game+0x188e000
	void OnLeaveGroupBtnClicked(); // Function WTL.WTLPDAGroup.OnLeaveGroupBtnClicked // (Final|Native|Private) // @ game+0x188e0d0
	void OnInviteToGroupBtnClicked(); // Function WTL.WTLPDAGroup.OnInviteToGroupBtnClicked // (Final|Native|Private) // @ game+0x188e0f0
	void OnGroupMemberShowInfo(uint64_t CharacterID); // Function WTL.WTLPDAGroup.OnGroupMemberShowInfo // (Final|Native|Private) // @ game+0x188e440
	void OnGroupMemberSendMessage(struct FString CharacterName); // Function WTL.WTLPDAGroup.OnGroupMemberSendMessage // (Final|Native|Private) // @ game+0x188e520
	void OnExcludeGroupMemberConfirm(); // Function WTL.WTLPDAGroup.OnExcludeGroupMemberConfirm // (Final|Native|Private) // @ game+0x188e1a0
	void OnExcludeGroupMember(uint64_t CharacterID, struct FString CharacterName); // Function WTL.WTLPDAGroup.OnExcludeGroupMember // (Final|Native|Private) // @ game+0x188e610
	void OnDeclineGroupInvite(uint64_t InviteID); // Function WTL.WTLPDAGroup.OnDeclineGroupInvite // (Final|Native|Private) // @ game+0x188e930
	void OnCreateGroupBtnClicked(); // Function WTL.WTLPDAGroup.OnCreateGroupBtnClicked // (Final|Native|Private) // @ game+0x188e160
	void OnChangeGroupNameBtnClicked(); // Function WTL.WTLPDAGroup.OnChangeGroupNameBtnClicked // (Final|Native|Private) // @ game+0x188e180
	void OnAcceptGroupInvite(uint64_t InviteID); // Function WTL.WTLPDAGroup.OnAcceptGroupInvite // (Final|Native|Private) // @ game+0x188ea10
	void GroupNameTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAGroup.GroupNameTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x188dd10
	void GroupNameTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAGroup.GroupNameTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x188ded0
	void CharacterNameToInviteTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAGroup.CharacterNameToInviteTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x188db50
};

// Class WTL.WTLPDAGroupInviteItem
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLPDAGroupInviteItem : UUserWidget {
	struct UTextBlock* tbMembersCount; // 0x260(0x08)
	struct UTextBlock* tbInstigatorName; // 0x268(0x08)
	struct UWTLCommonButton* ucBtnAccept; // 0x270(0x08)
	struct UWTLCommonButton* ucBtnDecline; // 0x278(0x08)
	char pad_280[0x38]; // 0x280(0x38)

	void OnDeclineBtnClicked(); // Function WTL.WTLPDAGroupInviteItem.OnDeclineBtnClicked // (Final|Native|Private) // @ game+0x188ef50
	void OnAcceptBtnClicked(); // Function WTL.WTLPDAGroupInviteItem.OnAcceptBtnClicked // (Final|Native|Private) // @ game+0x188ef80
};

// Class WTL.WTLPDAGroupMemberItem
// Size: 0x310 (Inherited: 0x260)
struct UWTLPDAGroupMemberItem : UUserWidget {
	struct UTextBlock* tbGroupMemberName; // 0x260(0x08)
	struct UImage* imgGroupLead; // 0x268(0x08)
	struct UHorizontalBox* hbManageButtons; // 0x270(0x08)
	struct UWTLCommonButton* ucBtnSetLeader; // 0x278(0x08)
	struct UWTLCommonButton* ucBtnExclude; // 0x280(0x08)
	struct UWTLCommonButton* ucBtnSendMessage; // 0x288(0x08)
	struct UWTLCommonButton* ucBtnInfo; // 0x290(0x08)
	char pad_298[0x78]; // 0x298(0x78)

	void OnSetLeaderBtnClicked(); // Function WTL.WTLPDAGroupMemberItem.OnSetLeaderBtnClicked // (Final|Native|Private) // @ game+0x188f280
	void OnSendMessageBtnClicked(); // Function WTL.WTLPDAGroupMemberItem.OnSendMessageBtnClicked // (Final|Native|Private) // @ game+0x188f210
	void OnInfoBtnClicked(); // Function WTL.WTLPDAGroupMemberItem.OnInfoBtnClicked // (Final|Native|Private) // @ game+0x188f1e0
	void OnExcludeBtnClicked(); // Function WTL.WTLPDAGroupMemberItem.OnExcludeBtnClicked // (Final|Native|Private) // @ game+0x188f240
};

// Class WTL.WTLPDAItemExperience
// Size: 0x2f0 (Inherited: 0x288)
struct UWTLPDAItemExperience : UWTLPDABase {
	struct UTextBlock* tbType; // 0x288(0x08)
	struct UTextBlock* tbClassRestriction; // 0x290(0x08)
	struct UTextBlock* tbPBExperience; // 0x298(0x08)
	struct UProgressBar* pbExperience; // 0x2a0(0x08)
	struct UBorder* bBackGroundMain; // 0x2a8(0x08)
	struct UBorder* bBackground; // 0x2b0(0x08)
	struct UImage* imgItem; // 0x2b8(0x08)
	struct UButton* btnListItem; // 0x2c0(0x08)
	struct UVerticalBox* vbContent; // 0x2c8(0x08)
	struct UBorder* bHead; // 0x2d0(0x08)
	char pad_2D8[0x18]; // 0x2d8(0x18)

	void OnBtnClickWeapon(); // Function WTL.WTLPDAItemExperience.OnBtnClickWeapon // (Final|Native|Protected) // @ game+0x188f3f0
};

// Class WTL.WTLPDALegendItem
// Size: 0x280 (Inherited: 0x268)
struct UWTLPDALegendItem : UWTLHUDWidgetBase {
	struct UImage* imgMarkerType; // 0x268(0x08)
	struct UBorder* bMarkerTypeName; // 0x270(0x08)
	struct UTextBlock* tbMarkerTypeName; // 0x278(0x08)
};

// Class WTL.WTLPDALocationsListItem
// Size: 0x4c8 (Inherited: 0x4a0)
struct UWTLPDALocationsListItem : UWTLCommonSelectedItem {
	struct UTextBlock* tbLocationName; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)
};

// Class WTL.WTLPDAMail
// Size: 0x3f8 (Inherited: 0x288)
struct UWTLPDAMail : UWTLPDABase {
	struct UWidgetSwitcher* wsMail; // 0x288(0x08)
	struct UWTLCommonButton* ucBtnWriteMessageTip; // 0x290(0x08)
	struct UWTLCommonCheckBox* cbSelector; // 0x298(0x08)
	struct UWTLCommonComboBoxString* cbsFilter; // 0x2a0(0x08)
	struct UWTLCommonButton* ucBtnMarkAsRead; // 0x2a8(0x08)
	struct UWTLCommonButton* ucBtnDelete; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnWriteMessage; // 0x2b8(0x08)
	struct UWidgetSwitcher* wsMessageList; // 0x2c0(0x08)
	struct UScrollBox* sbMessages; // 0x2c8(0x08)
	struct UWidgetSwitcher* wsMessageInfo; // 0x2d0(0x08)
	struct UTextBlock* tbMessageSubject; // 0x2d8(0x08)
	struct UTextBlock* tbMessageFrom; // 0x2e0(0x08)
	struct UTextBlock* tbMessageDate; // 0x2e8(0x08)
	struct UWTLCommonButton* ucBtnDeleteOpen; // 0x2f0(0x08)
	struct UEditableTextBox* etbMessageTo; // 0x2f8(0x08)
	struct UEditableTextBox* etbMessageSubject; // 0x300(0x08)
	struct UTextBlock* tbToLetterCurrent; // 0x308(0x08)
	struct UTextBlock* tbToLetterMax; // 0x310(0x08)
	struct UTextBlock* tbSubjectLetterCurrent; // 0x318(0x08)
	struct UTextBlock* tbSubjectLetterMax; // 0x320(0x08)
	struct UMultiLineEditableTextBox* etbMessageText; // 0x328(0x08)
	struct UTextBlock* tbTextLetterCurrent; // 0x330(0x08)
	struct UTextBlock* tbTextLetterMax; // 0x338(0x08)
	struct UWTLCommonButton* ucBtnSendMessage; // 0x340(0x08)
	struct UTextBlock* tbMessageText; // 0x348(0x08)
	char pad_350[0x80]; // 0x350(0x80)
	struct TSoftClassPtr<UObject> PDAMailMessageItemWidgetClass; // 0x3d0(0x28)

	void OnWriteMessageTipBtnClicked(); // Function WTL.WTLPDAMail.OnWriteMessageTipBtnClicked // (Final|Native|Private) // @ game+0x18901a0
	void OnWriteMessageBtnClicked(); // Function WTL.WTLPDAMail.OnWriteMessageBtnClicked // (Final|Native|Private) // @ game+0x188fd90
	void OnSendMessageResponse(struct FWTLOperationResult& OperationResult); // Function WTL.WTLPDAMail.OnSendMessageResponse // (Final|Native|Private|HasOutParms) // @ game+0x188fbd0
	void OnSendMessageBtnClicked(); // Function WTL.WTLPDAMail.OnSendMessageBtnClicked // (Final|Native|Private) // @ game+0x188fcd0
	void OnSelectorCheckStateChanged(bool bIsChecked); // Function WTL.WTLPDAMail.OnSelectorCheckStateChanged // (Final|Native|Private) // @ game+0x18900c0
	void OnMessageToTextChanged(struct FText& Text); // Function WTL.WTLPDAMail.OnMessageToTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x188faa0
	void OnMessageTextChanged(struct FText& Text); // Function WTL.WTLPDAMail.OnMessageTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x188f840
	void OnMessageSubjectTextChanged(struct FText& Text); // Function WTL.WTLPDAMail.OnMessageSubjectTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x188f970
	void OnMarkAsReadBtnClicked(); // Function WTL.WTLPDAMail.OnMarkAsReadBtnClicked // (Final|Native|Private) // @ game+0x188feb0
	void OnMailMessageClicked(uint64_t MessageID); // Function WTL.WTLPDAMail.OnMailMessageClicked // (Final|Native|Private) // @ game+0x188f760
	void OnMailMessageChecked(uint64_t MessageID, bool IsChecked, bool IsRead); // Function WTL.WTLPDAMail.OnMailMessageChecked // (Final|Native|Private) // @ game+0x188f560
	void OnFilterValueChanged(struct FString SelectedOption, enum class ESelectInfo SelectionType); // Function WTL.WTLPDAMail.OnFilterValueChanged // (Final|Native|Private) // @ game+0x188fed0
	void OnDeleteOpenConfirm(); // Function WTL.WTLPDAMail.OnDeleteOpenConfirm // (Final|Native|Private) // @ game+0x188fcf0
	void OnDeleteOpenBtnClicked(); // Function WTL.WTLPDAMail.OnDeleteOpenBtnClicked // (Final|Native|Private) // @ game+0x188fd70
	void OnDeleteConfirm(); // Function WTL.WTLPDAMail.OnDeleteConfirm // (Final|Native|Private) // @ game+0x188fdb0
	void OnDeleteBtnClicked(); // Function WTL.WTLPDAMail.OnDeleteBtnClicked // (Final|Native|Private) // @ game+0x188fe90
};

// Class WTL.WTLPDAMailMessageItem
// Size: 0x428 (Inherited: 0x2b0)
struct UWTLPDAMailMessageItem : UWTLCommonClickedItem {
	struct UWTLCommonCheckBox* cbSelect; // 0x2b0(0x08)
	struct UImage* imgPriority; // 0x2b8(0x08)
	struct UTextBlock* tbSubject; // 0x2c0(0x08)
	char pad_2C8[0xc]; // 0x2c8(0x0c)
	struct FLinearColor ReadBrushColor; // 0x2d4(0x10)
	struct FLinearColor NotReadBrushColor; // 0x2e4(0x10)
	struct FLinearColor CheckedBrushColor; // 0x2f4(0x10)
	struct FLinearColor ReadTextColor; // 0x304(0x10)
	struct FLinearColor NotReadTextColor; // 0x314(0x10)
	char pad_324[0x4]; // 0x324(0x04)
	struct FSlateFontInfo ReadFont; // 0x328(0x58)
	struct FSlateFontInfo NotReadFont; // 0x380(0x58)
	struct FLinearColor HighPriorityColor; // 0x3d8(0x10)
	struct FLinearColor CriticalPriorityColor; // 0x3e8(0x10)
	char pad_3F8[0x30]; // 0x3f8(0x30)

	void OnSelectCheckStateChanged(bool bIsChecked); // Function WTL.WTLPDAMailMessageItem.OnSelectCheckStateChanged // (Final|Native|Private) // @ game+0x1890570
};

// Class WTL.WTLPDAMain
// Size: 0x2568 (Inherited: 0x268)
struct UWTLPDAMain : UWTLHUDWidgetBase {
	struct UImage* imgScreenGlow; // 0x268(0x08)
	struct UCanvasPanel* cpBorders; // 0x270(0x08)
	struct UBorder* bBackground; // 0x278(0x08)
	struct UCanvasPanel* cpMenuAndInfo; // 0x280(0x08)
	struct UWidgetSwitcher* wsPDAWidgetSwitcher; // 0x288(0x08)
	struct UWTLPDAMenu* ucMenu; // 0x290(0x08)
	struct UWTLPDACharacterInfo* ucCharacterInfo; // 0x298(0x08)
	struct UWTLPDACharacterParameters* ucCharacterParameters; // 0x2a0(0x08)
	struct UWTLPDACharacterSkills* ucCharacterSkills; // 0x2a8(0x08)
	struct UWTLPDAQuestLog* ucQuestLog; // 0x2b0(0x08)
	struct UWTLPDAMap* ucMap; // 0x2b8(0x08)
	struct UWTLPDASettings* ucSettings; // 0x2c0(0x08)
	struct UWTLPDAMail* ucMail; // 0x2c8(0x08)
	struct UWTLPDAGroup* ucGroup; // 0x2d0(0x08)
	struct UWTLPDAClan* ucClan; // 0x2d8(0x08)
	struct UWTLPDAFraction* ucFraction; // 0x2e0(0x08)
	struct UWTLPDAFriendsAndEnemies* ucFriendsAndEnemies; // 0x2e8(0x08)
	struct UWTLPDACraftRecipes* ucCraftRecipes; // 0x2f0(0x08)
	struct UWTLPDAAchievements* ucAchievements; // 0x2f8(0x08)
	struct UWTLPDAPremium* ucPremium; // 0x300(0x08)
	struct UWTLPDASocialNetworkAuthorization* ucSocialNetworkAuthorization; // 0x308(0x08)
	char pad_310[0x8]; // 0x310(0x08)
	struct UWTLPDABase* m_CurrentPDAWidget; // 0x318(0x08)
	struct UTextBlock* tbCurrentLevelTime; // 0x320(0x08)
	struct UBorder* bLeftBorder; // 0x328(0x08)
	struct UBorder* bRightBorder; // 0x330(0x08)
	struct UWTLPDAMenuToolBar* ucMenuToolBar; // 0x338(0x08)
	struct UWTLCommonButton* ucBtnHome; // 0x340(0x08)
	struct UWTLCommonMessageDialog* ucMessageDialog; // 0x348(0x08)
	struct UWTLPDANetworkSignal* ucNetworkSignal; // 0x350(0x08)
	struct UBorder* bCurrentLevelTime; // 0x358(0x08)
	struct UWTLPDADataSync* ucDataSync; // 0x360(0x08)
	struct UImage* imgHealth; // 0x368(0x08)
	struct UImage* imgStamina; // 0x370(0x08)
	struct UBorder* bExperience; // 0x378(0x08)
	struct UTextBlock* tbHealth; // 0x380(0x08)
	struct UTextBlock* tbStamina; // 0x388(0x08)
	struct UTextBlock* tbExperience; // 0x390(0x08)
	struct UImage* imgFirstIndicator; // 0x398(0x08)
	struct UImage* imgSecondIndicator; // 0x3a0(0x08)
	struct UButton* btnPDAUp; // 0x3a8(0x08)
	struct UButton* btnPDADown; // 0x3b0(0x08)
	struct UButton* btnPDACircle; // 0x3b8(0x08)
	struct UImage* imgPDABackground; // 0x3c0(0x08)
	char pad_3C8[0x8]; // 0x3c8(0x08)
	struct UFMODEvent* m_PDAButtonPressSoundEvent; // 0x3d0(0x08)
	struct UFMODEvent* m_PDAButtonReleaseSoundEvent; // 0x3d8(0x08)
	char pad_3E0[0x50]; // 0x3e0(0x50)
	struct UWidgetAnimation* m_CurrentFirstIndicatorAnimation; // 0x430(0x08)
	struct UWidgetAnimation* m_CurrentSecondIndicatorAnimation; // 0x438(0x08)
	struct FWTLPDACustomization DefaultCustomization; // 0x440(0x770)
	struct FWTLPDACustomization ConfederationCustomization; // 0xbb0(0x770)
	struct FWTLPDACustomization BlackSunsetCustomization; // 0x1320(0x770)
	struct FSlateColor RedColorParam; // 0x1a90(0x28)
	struct FSlateColor YellowColorParam; // 0x1ab8(0x28)
	struct FSlateColor GreenColorParam; // 0x1ae0(0x28)
	struct TArray<struct UWidgetAnimation*> FirstIndicatorAnimations; // 0x1b08(0x10)
	struct TArray<struct UWidgetAnimation*> SecondIndicatorAnimations; // 0x1b18(0x10)
	struct UWidgetAnimation* ScreenOffAnimation; // 0x1b28(0x08)
	struct TSoftObjectPtr<UFMODEvent> PDAButtonPressSoundEvent; // 0x1b30(0x28)
	struct TSoftObjectPtr<UFMODEvent> PDAButtonReleaseSoundEvent; // 0x1b58(0x28)
	struct FButtonStyle PDAUpButtonStyleDefault; // 0x1b80(0x278)
	struct FButtonStyle PDAUpButtonStylePressed; // 0x1df8(0x278)
	struct FButtonStyle PDADownButtonStyleDefault; // 0x2070(0x278)
	struct FButtonStyle PDADownButtonStylePressed; // 0x22e8(0x278)
	char pad_2560[0x8]; // 0x2560(0x08)

	void ShowPDAWidget(enum class EWTLPDAWidget PDAWidget); // Function WTL.WTLPDAMain.ShowPDAWidget // (Final|Native|Private) // @ game+0x1890970
	void PlayRandomSecondIndicatorAnimation(); // Function WTL.WTLPDAMain.PlayRandomSecondIndicatorAnimation // (Final|Native|Private) // @ game+0x1890ef0
	void PlayRandomFirstIndicatorAnimation(); // Function WTL.WTLPDAMain.PlayRandomFirstIndicatorAnimation // (Final|Native|Private) // @ game+0x1890f40
	void OnSocialNetworkClicked(enum class EWTLSocialNetworkType SocialNetworkType, enum class EWTLPDAWidget PDAWidgetType); // Function WTL.WTLPDAMain.OnSocialNetworkClicked // (Final|Native|Private) // @ game+0x18907d0
	void OnSecondIndicatorAnimationFinished(); // Function WTL.WTLPDAMain.OnSecondIndicatorAnimationFinished // (Final|Native|Private) // @ game+0x1890da0
	void OnPDAUpButtonClicked(); // Function WTL.WTLPDAMain.OnPDAUpButtonClicked // (Final|Native|Private) // @ game+0x1890d80
	void OnPDADownButtonClicked(); // Function WTL.WTLPDAMain.OnPDADownButtonClicked // (Final|Native|Private) // @ game+0x1890d60
	void OnPDACircleButtonClicked(); // Function WTL.WTLPDAMain.OnPDACircleButtonClicked // (Final|Native|Private) // @ game+0x1890d30
	void OnHomeButtonClick(); // Function WTL.WTLPDAMain.OnHomeButtonClick // (Final|Native|Private) // @ game+0x1890a70
	void OnFirstIndicatorAnimationFinished(); // Function WTL.WTLPDAMain.OnFirstIndicatorAnimationFinished // (Final|Native|Private) // @ game+0x1890e40
	struct FEventReply OnBackgroundMouseButtonDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLPDAMain.OnBackgroundMouseButtonDown // (Final|Native|Private|HasOutParms) // @ game+0x1890ae0
};

// Class WTL.WTLPDAMap
// Size: 0x830 (Inherited: 0x288)
struct UWTLPDAMap : UWTLPDABase {
	char pad_288[0x8]; // 0x288(0x08)
	struct UBorder* bMapScreen; // 0x290(0x08)
	struct USlider* slZoom; // 0x298(0x08)
	struct UWTLCommonButton* ucBtnFindPlayerMarker; // 0x2a0(0x08)
	struct UWTLCommonCheckBox* cbFindPlayerMarker; // 0x2a8(0x08)
	struct UWTLCommonButton* ucBtnLegend; // 0x2b0(0x08)
	struct UWTLCommonButton* ucBtnMarkers; // 0x2b8(0x08)
	struct UWTLCommonButton* ucBtnLocationsList; // 0x2c0(0x08)
	struct UBorder* bSectorPosition; // 0x2c8(0x08)
	struct UTextBlock* tbSectorPosition; // 0x2d0(0x08)
	struct UCanvasPanel* cpNoSatelliteSignal; // 0x2d8(0x08)
	struct UCanvasPanel* cpMapLoadedFromModule; // 0x2e0(0x08)
	struct UBorder* bLegend; // 0x2e8(0x08)
	struct UBorder* bLegendTitle; // 0x2f0(0x08)
	struct UBorder* bLegendShowState; // 0x2f8(0x08)
	struct UBorder* bMarkers; // 0x300(0x08)
	struct UBorder* bMarkersTitle; // 0x308(0x08)
	struct UBorder* bMarkersButtons; // 0x310(0x08)
	struct UTextBlock* tbCurrentMarkersCount; // 0x318(0x08)
	struct UTextBlock* tbMaxMarkersCount; // 0x320(0x08)
	struct UScrollBox* sbLegendItems; // 0x328(0x08)
	struct UScrollBox* sbMarkerItems; // 0x330(0x08)
	struct UScrollBox* sbLocationItems; // 0x338(0x08)
	struct UTextBlock* tbEmptyMarkersListTitle; // 0x340(0x08)
	struct UWTLCommonCheckBox* cbShowAllLegendItems; // 0x348(0x08)
	struct UWTLCommonButton* ucBtnAddMarker; // 0x350(0x08)
	struct UWTLCommonButton* ucBtnRemoveAllMarkers; // 0x358(0x08)
	struct UBorder* bLocationsList; // 0x360(0x08)
	struct UBorder* bLocationsListTitle; // 0x368(0x08)
	struct UBorder* bLocationsListItems; // 0x370(0x08)
	struct UBorder* bSetMarkerHint; // 0x378(0x08)
	struct UTextBlock* tbSetMarkerHint; // 0x380(0x08)
	struct UMenuAnchor* maMap; // 0x388(0x08)
	struct UBorder* bMarkerParametersBackground; // 0x390(0x08)
	struct UVerticalBox* vbMarkerParameters; // 0x398(0x08)
	struct UBorder* bMarkerParametersTitle; // 0x3a0(0x08)
	struct UBorder* bMarkerParametersButtons; // 0x3a8(0x08)
	struct UWTLUtilityColorPicker* ucMarkerColorPicker; // 0x3b0(0x08)
	struct UEditableTextBox* etbMarkerName; // 0x3b8(0x08)
	struct UWTLCommonCheckBox* cbMarkerSticking; // 0x3c0(0x08)
	struct UWrapBox* wpMarkersSubTypes; // 0x3c8(0x08)
	struct UWTLCommonButton* ucBtnSetMarker; // 0x3d0(0x08)
	struct UWTLCommonButton* ucBtnSetMarkerCancel; // 0x3d8(0x08)
	struct UCanvasPanel* cpMarker; // 0x3e0(0x08)
	struct USizeBox* szbMap; // 0x3e8(0x08)
	struct UImage* imgMap; // 0x3f0(0x08)
	struct UTextBlock* tbMarkerParametersTitle; // 0x3f8(0x08)
	struct UTextBlock* tbMarkersTitle; // 0x400(0x08)
	struct UTextBlock* tbLegendItemsShowState; // 0x408(0x08)
	char pad_410[0x170]; // 0x410(0x170)
	struct UWTLCommonPopupMenu* m_MapPopupMenuWidget; // 0x580(0x08)
	char pad_588[0x8]; // 0x588(0x08)
	struct FWTLMapItemData DefaultMapItemData; // 0x590(0x118)
	float LegendItemsMinSizeX; // 0x6a8(0x04)
	float LegendItemsMaxSizeX; // 0x6ac(0x04)
	float LegendItemsOriginalMaxSizeY; // 0x6b0(0x04)
	int32_t LegendItemsMaxVisibleItems; // 0x6b4(0x04)
	float LegendItemsElementHeight; // 0x6b8(0x04)
	float MarkerItemsOriginalSizeX; // 0x6bc(0x04)
	float MarkerItemsOriginalMaxSizeY; // 0x6c0(0x04)
	int32_t MarkerItemsMaxVisibleItems; // 0x6c4(0x04)
	float MarkerItemsElementHeight; // 0x6c8(0x04)
	float LocationItemsMinSizeX; // 0x6cc(0x04)
	float LocationItemsOriginalMaxSizeY; // 0x6d0(0x04)
	int32_t LocationItemsMaxVisibleItems; // 0x6d4(0x04)
	float LocationItemsElementHeight; // 0x6d8(0x04)
	char pad_6DC[0x4]; // 0x6dc(0x04)
	struct TSoftClassPtr<UObject> PDALegendItemClass; // 0x6e0(0x28)
	struct TSoftClassPtr<UObject> PDAMarkerListItemClass; // 0x708(0x28)
	struct TSoftClassPtr<UObject> PDALocationsListItemClass; // 0x730(0x28)
	struct TSoftClassPtr<UObject> MapMarkerClass; // 0x758(0x28)
	struct TSoftClassPtr<UObject> PopupMenuWidgetClass; // 0x780(0x28)
	struct TSoftClassPtr<UObject> MarkerSubTypeItemClass; // 0x7a8(0x28)
	struct UWidgetAnimation* SetMarkerHintBlinkingAnimation; // 0x7d0(0x08)
	struct UWidgetAnimation* NoSatelliteSignalBlinkingAnimation; // 0x7d8(0x08)
	struct TSoftObjectPtr<UFMODEvent> ZoomInMapSoundEvent; // 0x7e0(0x28)
	struct TSoftObjectPtr<UFMODEvent> ZoomOutMapSoundEvent; // 0x808(0x28)

	void UpdatePlayerMarkers(); // Function WTL.WTLPDAMap.UpdatePlayerMarkers // (Final|Native|Private) // @ game+0x18933e0
	void ShowPlayerMarkerParameters(int32_t MarkerIndex, struct FString MarkerName, char SubTypeNumber, struct FString MarkerColor, bool IsSticking); // Function WTL.WTLPDAMap.ShowPlayerMarkerParameters // (Final|Native|Private) // @ game+0x1893040
	void ShowHidePlayerMarkers(); // Function WTL.WTLPDAMap.ShowHidePlayerMarkers // (Final|Native|Private) // @ game+0x1892dd0
	void ShowHideLocationsList(); // Function WTL.WTLPDAMap.ShowHideLocationsList // (Final|Native|Private) // @ game+0x1892db0
	void ShowHideLegend(); // Function WTL.WTLPDAMap.ShowHideLegend // (Final|Native|Private) // @ game+0x1892df0
	void ShowAllMarkerItemsCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLPDAMap.ShowAllMarkerItemsCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1892f30
	void SetMarkerCancelBtnClick(); // Function WTL.WTLPDAMap.SetMarkerCancelBtnClick // (Final|Native|Private) // @ game+0x18927a0
	void SetMarkerBtnClick(); // Function WTL.WTLPDAMap.SetMarkerBtnClick // (Final|Native|Private) // @ game+0x1892800
	void RemoveAllPlayerMarkersConfirmed(); // Function WTL.WTLPDAMap.RemoveAllPlayerMarkersConfirmed // (Final|Native|Private) // @ game+0x1892c10
	void RemoveAllPlayerMarkersBtnClick(); // Function WTL.WTLPDAMap.RemoveAllPlayerMarkersBtnClick // (Final|Native|Private) // @ game+0x1892d70
	void OnZoomSliderValueChanged(float Value); // Function WTL.WTLPDAMap.OnZoomSliderValueChanged // (Final|Native|Private) // @ game+0x18911e0
	void OnMenuOpenChanged(bool bIsOpen); // Function WTL.WTLPDAMap.OnMenuOpenChanged // (Final|Native|Private) // @ game+0x18379a0
	void OnMarkerSubTypeItemClick(char SubTypeNumber, struct FSlateBrush& SubTypeBrush); // Function WTL.WTLPDAMap.OnMarkerSubTypeItemClick // (Final|Native|Private|HasOutParms) // @ game+0x1891ac0
	void OnMarkerShare(); // Function WTL.WTLPDAMap.OnMarkerShare // (Final|Native|Private) // @ game+0x1892190
	void OnMarkerPopupMenuOpen(struct FVector2D AbsoluteMouseClickPos, struct FWTLMapMarker Marker); // Function WTL.WTLPDAMap.OnMarkerPopupMenuOpen // (Final|Native|Private|HasDefaults) // @ game+0x18922c0
	void OnMarkerFindBtnClick(struct FVector& MarkerPosition); // Function WTL.WTLPDAMap.OnMarkerFindBtnClick // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x18925e0
	void OnMarkerEditBtnClick(int32_t MarkerIndex, struct FString MarkerName, char SubTypeNumber, struct FString MarkerColor, bool IsSticking); // Function WTL.WTLPDAMap.OnMarkerEditBtnClick // (Final|Native|Private) // @ game+0x1891de0
	void OnMarkerEdit(); // Function WTL.WTLPDAMap.OnMarkerEdit // (Final|Native|Private) // @ game+0x18921d0
	void OnMarkerDeleteBtnClick(int32_t MarkerIndex); // Function WTL.WTLPDAMap.OnMarkerDeleteBtnClick // (Final|Native|Private) // @ game+0x1891d10
	void OnMarkerDelete(); // Function WTL.WTLPDAMap.OnMarkerDelete // (Final|Native|Private) // @ game+0x18921b0
	void OnMarkerColorPicked(struct FLinearColor& ChangedColor); // Function WTL.WTLPDAMap.OnMarkerColorPicked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x18926c0
	void OnMarkerAdd(); // Function WTL.WTLPDAMap.OnMarkerAdd // (Final|Native|Private) // @ game+0x1892220
	void OnMapScreenBorderMouseMove(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLPDAMap.OnMapScreenBorderMouseMove // (Final|Native|Private|HasOutParms) // @ game+0x1891540
	void OnMapScreenBorderMouseDown(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLPDAMap.OnMapScreenBorderMouseDown // (Final|Native|Private|HasOutParms) // @ game+0x1891790
	void OnMapScreenBorderMouseDoubleClick(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function WTL.WTLPDAMap.OnMapScreenBorderMouseDoubleClick // (Final|Native|Private|HasOutParms) // @ game+0x18912f0
	void OnLocationsListItemClicked(int32_t LocationID); // Function WTL.WTLPDAMap.OnLocationsListItemClicked // (Final|Native|Private) // @ game+0x18919e0
	struct UWidget* OnGetMapMenuContent(); // Function WTL.WTLPDAMap.OnGetMapMenuContent // (Final|Native|Private) // @ game+0x1893020
	void MarkerStickingCheckBoxChanged(bool bIsChecked); // Function WTL.WTLPDAMap.MarkerStickingCheckBoxChanged // (Final|Native|Private) // @ game+0x1892820
	void MarkerNameTextBoxTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function WTL.WTLPDAMap.MarkerNameTextBoxTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1892900
	void MarkerNameTextBoxTextChanged(struct FText& Text); // Function WTL.WTLPDAMap.MarkerNameTextBoxTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1892ae0
	void FindPlayerMarkerCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLPDAMap.FindPlayerMarkerCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1892e10
	void FindPlayerMarker(); // Function WTL.WTLPDAMap.FindPlayerMarker // (Final|Native|Private) // @ game+0x1892f10
	void AddPlayerMarkerBtnClick(); // Function WTL.WTLPDAMap.AddPlayerMarkerBtnClick // (Final|Native|Private) // @ game+0x1892d90
};

// Class WTL.WTLPDAMapMarker
// Size: 0x330 (Inherited: 0x318)
struct UWTLPDAMapMarker : UWTLCommonMapMarker {
	char pad_318[0x18]; // 0x318(0x18)
};

// Class WTL.WTLPDAMarkerListItem
// Size: 0x348 (Inherited: 0x268)
struct UWTLPDAMarkerListItem : UWTLHUDWidgetBase {
	struct UImage* imgMarkerSubType; // 0x268(0x08)
	struct UTextBlock* tbMarkerName; // 0x270(0x08)
	struct UWTLCommonButton* ucBtnFindMarker; // 0x278(0x08)
	struct UWTLCommonButton* ucBtnEditMarker; // 0x280(0x08)
	struct UWTLCommonButton* ucBtnDeleteMarker; // 0x288(0x08)
	char pad_290[0xb8]; // 0x290(0xb8)

	void OnFindMarkerBtnClick(); // Function WTL.WTLPDAMarkerListItem.OnFindMarkerBtnClick // (Final|Native|Private) // @ game+0x1894480
	void OnEditMarkerBtnClick(); // Function WTL.WTLPDAMarkerListItem.OnEditMarkerBtnClick // (Final|Native|Private) // @ game+0x1894460
	void OnDeleteMarkerBtnClick(); // Function WTL.WTLPDAMarkerListItem.OnDeleteMarkerBtnClick // (Final|Native|Private) // @ game+0x1894430
};

// Class WTL.WTLPDAMarkerSubTypeItem
// Size: 0x2a8 (Inherited: 0x268)
struct UWTLPDAMarkerSubTypeItem : UWTLHUDWidgetBase {
	struct UImage* imgMarkerSubType; // 0x268(0x08)
	struct UImage* imgBorder; // 0x270(0x08)
	struct UFMODEvent* MouseButtonDownSoundEvent; // 0x278(0x08)
	char pad_280[0x28]; // 0x280(0x28)
};

// Class WTL.WTLPDAMenuBase
// Size: 0xab0 (Inherited: 0x288)
struct UWTLPDAMenuBase : UWTLPDABase {
	struct UPanelWidget* pwMenuButtons; // 0x288(0x08)
	struct TArray<struct UWTLPDAMenuButtonBase*> m_MenuButtons; // 0x290(0x10)
	char pad_2A0[0x30]; // 0x2a0(0x30)
	struct FSlateColor MenuButtonNormalButtonStyleTintColor; // 0x2d0(0x28)
	struct FSlateColor MenuButtonHoveredButtonStyleTintColor; // 0x2f8(0x28)
	struct FSlateColor MenuButtonPressedButtonStyleTintColor; // 0x320(0x28)
	struct FButtonStyle FractionNoneButtonStyle; // 0x348(0x278)
	struct FButtonStyle FractionConfederationButtonStyle; // 0x5c0(0x278)
	struct FButtonStyle FractionBlackSunsetButtonStyle; // 0x838(0x278)

	void OnButtonClicked(enum class EWTLPDAWidget PDAWidgetType); // Function WTL.WTLPDAMenuBase.OnButtonClicked // (Final|Native|Protected) // @ game+0x1894a20
};

// Class WTL.WTLPDAMenu
// Size: 0xae0 (Inherited: 0xab0)
struct UWTLPDAMenu : UWTLPDAMenuBase {
	struct UScrollBox* sbMenuButtons; // 0xab0(0x08)
	struct UBorder* bSnackBar; // 0xab8(0x08)
	struct UTextBlock* tbSnackBarMessage; // 0xac0(0x08)
	char pad_AC8[0x10]; // 0xac8(0x10)
	struct UWidgetAnimation* ShowSnackBarAnimation; // 0xad8(0x08)
};

// Class WTL.WTLPDAMenuButtonBase
// Size: 0x608 (Inherited: 0x340)
struct UWTLPDAMenuButtonBase : UWTLCommonButton {
	struct UBorder* bNotification; // 0x340(0x08)
	struct UTextBlock* tbNotificationsCount; // 0x348(0x08)
	char pad_350[0x38]; // 0x350(0x38)
	enum class EWTLPDAWidget PDAWidgetType; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct FButtonStyle ButtonStyle; // 0x390(0x278)

	void Update(); // Function WTL.WTLPDAMenuButtonBase.Update // (Final|Native|Public) // @ game+0x1895050
	void SetNotificationsCount(int32_t Count); // Function WTL.WTLPDAMenuButtonBase.SetNotificationsCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1894ef0
	void K2_Update(); // Function WTL.WTLPDAMenuButtonBase.K2_Update // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnMenuOpened(); // Function WTL.WTLPDAMenuButtonBase.K2_OnMenuOpened // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLPDAMenuButton
// Size: 0x610 (Inherited: 0x608)
struct UWTLPDAMenuButton : UWTLPDAMenuButtonBase {
	struct UTextBlock* tbTypeText; // 0x608(0x08)
};

// Class WTL.WTLPDAMenuButtonToolBar
// Size: 0x720 (Inherited: 0x608)
struct UWTLPDAMenuButtonToolBar : UWTLPDAMenuButtonBase {
	struct FSlateBrush m_OriginalNormalButtonStyle; // 0x608(0x88)
	struct FSlateBrush m_SelectedNormalButtonStyle; // 0x690(0x88)
	char pad_718[0x8]; // 0x718(0x08)
};

// Class WTL.WTLPDAMenuPremiumButton
// Size: 0x890 (Inherited: 0x610)
struct UWTLPDAMenuPremiumButton : UWTLPDAMenuButton {
	struct UBorder* bTypeText; // 0x610(0x08)
	struct FButtonStyle ActivePremiumButtonStyle; // 0x618(0x278)
};

// Class WTL.WTLPDAMenuToolBar
// Size: 0xab0 (Inherited: 0xab0)
struct UWTLPDAMenuToolBar : UWTLPDAMenuBase {
};

// Class WTL.WTLPDAModulesListItem
// Size: 0x4c8 (Inherited: 0x4a0)
struct UWTLPDAModulesListItem : UWTLCommonSelectedItem {
	struct UTextBlock* tbModuleName; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)
};

// Class WTL.WTLPDANetworkSignal
// Size: 0x2f8 (Inherited: 0x260)
struct UWTLPDANetworkSignal : UUserWidget {
	struct UTextBlock* tbWSC; // 0x260(0x08)
	struct UBorder* bBar1; // 0x268(0x08)
	struct UBorder* bBar2; // 0x270(0x08)
	struct UBorder* bBar3; // 0x278(0x08)
	struct UBorder* bBar4; // 0x280(0x08)
	struct UBorder* bNoSignal; // 0x288(0x08)
	char pad_290[0x20]; // 0x290(0x20)
	struct UWidgetAnimation* NoSignalAnimation; // 0x2b0(0x08)
	struct FLinearColor StrongSignalBarColor; // 0x2b8(0x10)
	struct FLinearColor MediumSignalBarColor; // 0x2c8(0x10)
	struct FLinearColor WeakSignalBarColor; // 0x2d8(0x10)
	struct FLinearColor NoSignalBarColor; // 0x2e8(0x10)
};

// Class WTL.WTLPDAParameter
// Size: 0x290 (Inherited: 0x260)
struct UWTLPDAParameter : UUserWidget {
	struct UBorder* bContent; // 0x260(0x08)
	struct UTextBlock* tbName; // 0x268(0x08)
	struct UWidgetSwitcher* wsSign; // 0x270(0x08)
	struct UTextBlock* tbValue; // 0x278(0x08)
	struct UTextBlock* tbPercentSign; // 0x280(0x08)
	struct UProgressBar* pbChange; // 0x288(0x08)
};

// Class WTL.WTLPDAPremium
// Size: 0x310 (Inherited: 0x288)
struct UWTLPDAPremium : UWTLPDABase {
	struct UImage* imgPremium; // 0x288(0x08)
	struct UBorder* bPremium; // 0x290(0x08)
	struct UTextBlock* tbPremiumStatus; // 0x298(0x08)
	struct UTextBlock* tbPremiumEndTime; // 0x2a0(0x08)
	struct UWTLCommonTextButton* ucBtnPremium; // 0x2a8(0x08)
	struct UBorder* bBonuses; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)
	struct TSoftObjectPtr<UTexture2D> NotActivePremiumTexture; // 0x2c0(0x28)
	struct TSoftObjectPtr<UTexture2D> ActivePremiumTexture; // 0x2e8(0x28)

	void OnPremiumButtonClicked(); // Function WTL.WTLPDAPremium.OnPremiumButtonClicked // (Final|Native|Private) // @ game+0x18956d0
	void OnInAppPaymentResult(bool Success); // Function WTL.WTLPDAPremium.OnInAppPaymentResult // (Final|Native|Private) // @ game+0x1895710
};

// Class WTL.WTLPDAQuestLog
// Size: 0x518 (Inherited: 0x288)
struct UWTLPDAQuestLog : UWTLPDABase {
	struct UBorder* bQuestLogEmpty; // 0x288(0x08)
	struct UBorder* bQuestsList; // 0x290(0x08)
	struct UBorder* bQuestLogHint; // 0x298(0x08)
	struct UBorder* bQuestName; // 0x2a0(0x08)
	struct UBorder* bQuestInfoPart1; // 0x2a8(0x08)
	struct UBorder* bQuestInfoPart2; // 0x2b0(0x08)
	struct UBorder* bQuestInfoPart3; // 0x2b8(0x08)
	struct UBorder* bQuestInfoPart4; // 0x2c0(0x08)
	struct UBorder* bQuestInfoPart5; // 0x2c8(0x08)
	struct UBorder* bQuestInfoPart6; // 0x2d0(0x08)
	struct UBorder* bQuestInfoPart7; // 0x2d8(0x08)
	struct UBorder* bQuestInfoPart8; // 0x2e0(0x08)
	struct UBorder* bQuestLogBtns; // 0x2e8(0x08)
	struct UWidgetSwitcher* wsQuestLog; // 0x2f0(0x08)
	struct UWidgetSwitcher* wsQuestsLists; // 0x2f8(0x08)
	struct UScrollBox* sbQuestsListInProgress; // 0x300(0x08)
	struct UScrollBox* sbQuestsListCompleted; // 0x308(0x08)
	struct UWTLCommonCheckBox* cbHideActiveQuestInfo; // 0x310(0x08)
	struct UWTLCommonTabButton* btnTabInProgressList; // 0x318(0x08)
	struct UWTLCommonTabButton* btnTabCompletedList; // 0x320(0x08)
	struct UWTLCommonButton* ucBtnSetActiveQuest; // 0x328(0x08)
	struct UWTLCommonButton* ucBtnAbandonQuest; // 0x330(0x08)
	struct UWidgetSwitcher* wsQuestInfo; // 0x338(0x08)
	struct UScrollBox* sbQuestInfo; // 0x340(0x08)
	struct UTextBlock* tbQuestName; // 0x348(0x08)
	struct UImage* imgQuestIcon; // 0x350(0x08)
	struct UTextBlock* tbCanBePerformedInGroup; // 0x358(0x08)
	struct UHorizontalBox* hbRecommendedCharacterLevel; // 0x360(0x08)
	struct UTextBlock* tbRecommendedCharacterLevel; // 0x368(0x08)
	struct UHorizontalBox* hbQuestTimeLimit; // 0x370(0x08)
	struct UTextBlock* tbQuestTimeLimit; // 0x378(0x08)
	struct UTextBlock* tbQuestDescription; // 0x380(0x08)
	struct UWTLHUDItemTypeSlot* ucItemStartQuest; // 0x388(0x08)
	struct UTextBlock* tbRequiredTitle; // 0x390(0x08)
	struct UTextBlock* tbCustomTextRequirement; // 0x398(0x08)
	struct UHorizontalBox* hbRequiredMoney; // 0x3a0(0x08)
	struct UTextBlock* tbRequiredMoney; // 0x3a8(0x08)
	struct UImage* imgRequiredMoneyReady; // 0x3b0(0x08)
	struct UTextBlock* tbRequiredItemsTitle; // 0x3b8(0x08)
	struct UWrapBox* wpRequiredItems; // 0x3c0(0x08)
	struct UTextBlock* tbRequiredKillsTitle; // 0x3c8(0x08)
	struct UVerticalBox* vbRequiredKills; // 0x3d0(0x08)
	struct UTextBlock* tbCustomRequirementsTitle; // 0x3d8(0x08)
	struct UVerticalBox* vbCustomRequirements; // 0x3e0(0x08)
	struct UTextBlock* tbRewardsTitle; // 0x3e8(0x08)
	struct UHorizontalBox* hbRewardExperience; // 0x3f0(0x08)
	struct UTextBlock* tbRewardExperience; // 0x3f8(0x08)
	struct UHorizontalBox* hbRewardMoney; // 0x400(0x08)
	struct UTextBlock* tbRewardMoney; // 0x408(0x08)
	struct UHorizontalBox* hbRewardPvPScore; // 0x410(0x08)
	struct UTextBlock* tbRewardPvPScore; // 0x418(0x08)
	struct UHorizontalBox* hbRewardPvEScore; // 0x420(0x08)
	struct UTextBlock* tbRewardPvEScore; // 0x428(0x08)
	struct UHorizontalBox* hbRewardCraftScore; // 0x430(0x08)
	struct UTextBlock* tbRewardCraftScore; // 0x438(0x08)
	struct UHorizontalBox* hbRewardTechnologyScore; // 0x440(0x08)
	struct UTextBlock* tbRewardTechnologyScore; // 0x448(0x08)
	struct UTextBlock* tbCustomTextReward; // 0x450(0x08)
	struct UTextBlock* tbRewardItemsTitle; // 0x458(0x08)
	struct UWrapBox* wpRewardItems; // 0x460(0x08)
	struct UWTLPDAQuestLogItem* m_CurrentQuestLogItem; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)
	struct TSoftClassPtr<UObject> QuestItemSlotWidgetClass; // 0x478(0x28)
	struct TSoftClassPtr<UObject> RequiredMonsterKillWidgetClass; // 0x4a0(0x28)
	struct TSoftClassPtr<UObject> CustomRequirementWidgetClass; // 0x4c8(0x28)
	struct TSoftClassPtr<UObject> QuestLogItemWidgetClass; // 0x4f0(0x28)

	void OnSetActiveQuestBtnClicked(); // Function WTL.WTLPDAQuestLog.OnSetActiveQuestBtnClicked // (Final|Native|Private) // @ game+0x1895ca0
	void OnQuestLogItemClicked(struct UWTLPDAQuestLogItem* QuestLogItem); // Function WTL.WTLPDAQuestLog.OnQuestLogItemClicked // (Final|Native|Private) // @ game+0x1895dd0
	void OnListTabBtnClicked(char Index); // Function WTL.WTLPDAQuestLog.OnListTabBtnClicked // (Final|Native|Private) // @ game+0x1895cc0
	void OnHideActiveQuestInfoCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLPDAQuestLog.OnHideActiveQuestInfoCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1895eb0
	void OnAbandonQuestConfirmation(); // Function WTL.WTLPDAQuestLog.OnAbandonQuestConfirmation // (Final|Native|Private) // @ game+0x1895bf0
	void OnAbandonQuestBtnClicked(); // Function WTL.WTLPDAQuestLog.OnAbandonQuestBtnClicked // (Final|Native|Private) // @ game+0x1895c80
};

// Class WTL.WTLPDAQuestLogItem
// Size: 0x1400 (Inherited: 0x340)
struct UWTLPDAQuestLogItem : UWTLCommonButton {
	struct UBorder* bContent; // 0x340(0x08)
	struct UImage* imgReady; // 0x348(0x08)
	struct UHorizontalBox* hbRecommendedCharacterLevel; // 0x350(0x08)
	struct UTextBlock* tbRecommendedCharacterLevel; // 0x358(0x08)
	struct UTextBlock* tbQuestName; // 0x360(0x08)
	struct UImage* imgQuestState; // 0x368(0x08)
	struct UImage* imgQuestActive; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	struct FButtonStyle DefaultQuestBackgroundButtonStyle; // 0x380(0x278)
	struct FButtonStyle VeryHighLevelQuestBackgroundButtonStyle; // 0x5f8(0x278)
	struct FButtonStyle HighLevelQuestBackgroundButtonStyle; // 0x870(0x278)
	struct FButtonStyle MediumLevelQuestBackgroundButtonStyle; // 0xae8(0x278)
	struct FButtonStyle LowLevelQuestBackgroundButtonStyle; // 0xd60(0x278)
	struct FButtonStyle VeryLowLevelQuestBackgroundButtonStyle; // 0xfd8(0x278)
	struct FSlateBrush CompletedQuestBrush; // 0x1250(0x88)
	struct FSlateBrush FailedQuestBrush; // 0x12d8(0x88)
	struct FSlateBrush RepeatableQuestBrush; // 0x1360(0x88)
	char pad_13E8[0x18]; // 0x13e8(0x18)
};

// Class WTL.WTLPDAQuestLogRequirementBase
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLPDAQuestLogRequirementBase : UUserWidget {
	struct UBorder* bContent; // 0x260(0x08)
	struct UHorizontalBox* hbTextContent; // 0x268(0x08)
	struct UTextBlock* tbName; // 0x270(0x08)
	struct UHorizontalBox* hbCurrentCount; // 0x278(0x08)
	struct UTextBlock* tbCurrentCount; // 0x280(0x08)
	struct UTextBlock* tbNeedCount; // 0x288(0x08)
	struct UTextBlock* tbPercentSign; // 0x290(0x08)
	struct UImage* imgReady; // 0x298(0x08)
};

// Class WTL.WTLPDAQuestLogRequiredMonsterKill
// Size: 0x2a8 (Inherited: 0x2a0)
struct UWTLPDAQuestLogRequiredMonsterKill : UWTLPDAQuestLogRequirementBase {
	struct UTextBlock* tbMinLevel; // 0x2a0(0x08)
};

// Class WTL.WTLPDASettings
// Size: 0x3a8 (Inherited: 0x288)
struct UWTLPDASettings : UWTLPDABase {
	struct UWTLCommonButton* ucBtnPDAInterfaceColorSelect; // 0x288(0x08)
	struct UWTLCommonButton* ucBtnPDAInterfaceColorReset; // 0x290(0x08)
	struct UWTLCommonTextCheckBox* cbFirstIndicator; // 0x298(0x08)
	struct UWTLCommonTextCheckBox* cbSecondIndicator; // 0x2a0(0x08)
	struct UBorder* bSettingsIndicators; // 0x2a8(0x08)
	struct UBorder* bSettingsPDAInterfaceColor; // 0x2b0(0x08)
	struct UHorizontalBox* hbPDAInterfaceColorPicker; // 0x2b8(0x08)
	struct UBorder* bModules; // 0x2c0(0x08)
	struct UTextBlock* tbModulesCountTitle; // 0x2c8(0x08)
	struct UScrollBox* sbModulesList; // 0x2d0(0x08)
	struct UWTLCommonButton* ucBtnRemoveModule; // 0x2d8(0x08)
	struct UWTLCommonColorPicker* m_PDAInterfaceColorPickerWidget; // 0x2e0(0x08)
	char pad_2E8[0x70]; // 0x2e8(0x70)
	struct TSoftClassPtr<UObject> PDAInterfaceColorPickerWidgetClass; // 0x358(0x28)
	struct TSoftClassPtr<UObject> ModulesListItemWidgetClass; // 0x380(0x28)

	void OnSecondIndicatorCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLPDASettings.OnSecondIndicatorCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1896b70
	void OnRemoveModuleBtnError(); // Function WTL.WTLPDASettings.OnRemoveModuleBtnError // (Final|Native|Private) // @ game+0x1896a10
	void OnRemoveModuleBtnConfirm(); // Function WTL.WTLPDASettings.OnRemoveModuleBtnConfirm // (Final|Native|Private) // @ game+0x1896a30
	void OnRemoveModuleBtnClicked(); // Function WTL.WTLPDASettings.OnRemoveModuleBtnClicked // (Final|Native|Private) // @ game+0x1896b50
	void OnPDAInterfaceColorSelectBtnClicked(); // Function WTL.WTLPDASettings.OnPDAInterfaceColorSelectBtnClicked // (Final|Native|Private) // @ game+0x1896fa0
	void OnPDAInterfaceColorResetBtnClicked(); // Function WTL.WTLPDASettings.OnPDAInterfaceColorResetBtnClicked // (Final|Native|Private) // @ game+0x1896f80
	void OnPDAInterfaceColorPickingCanceled(); // Function WTL.WTLPDASettings.OnPDAInterfaceColorPickingCanceled // (Final|Native|Private) // @ game+0x1896d30
	void OnPDAInterfaceColorPicked(struct FLinearColor& PickedColor); // Function WTL.WTLPDASettings.OnPDAInterfaceColorPicked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1896d90
	void OnPDAInterfaceColorChanged(struct FLinearColor& ChangedColor); // Function WTL.WTLPDASettings.OnPDAInterfaceColorChanged // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1896e90
	void OnModulesListItemClicked(uint16_t ModuleID); // Function WTL.WTLPDASettings.OnModulesListItemClicked // (Final|Native|Private) // @ game+0x1896930
	void OnFirstIndicatorCheckBoxStateChanged(bool bIsChecked); // Function WTL.WTLPDASettings.OnFirstIndicatorCheckBoxStateChanged // (Final|Native|Private) // @ game+0x1896c50
};

// Class WTL.WTLPDASkillDependence
// Size: 0x2c0 (Inherited: 0x260)
struct UWTLPDASkillDependence : UUserWidget {
	struct UTextBlock* tbComa; // 0x260(0x08)
	struct UTextBlock* tbSkillName; // 0x268(0x08)
	struct FSlateColor RedColor; // 0x270(0x28)
	struct FSlateColor GreenColor; // 0x298(0x28)
};

// Class WTL.WTLPDASkillsConnector
// Size: 0x298 (Inherited: 0x260)
struct UWTLPDASkillsConnector : UUserWidget {
	struct UCanvasPanel* cpMain; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)
	struct TArray<struct FWTLPDASkillConnectorData> Data; // 0x288(0x10)
};

// Class WTL.WTLPDASocialNetworkAuthorization
// Size: 0x2b0 (Inherited: 0x288)
struct UWTLPDASocialNetworkAuthorization : UWTLPDABase {
	struct UTextBlock* tbSocialNetworkName; // 0x288(0x08)
	struct UWidgetSwitcher* wsBrowser; // 0x290(0x08)
	struct UBorder* bThrobber; // 0x298(0x08)
	struct UBorder* bAuthorizationStatus; // 0x2a0(0x08)
	char pad_2A8[0x2]; // 0x2a8(0x02)
	bool HasWebBrowserFocus; // 0x2aa(0x01)
	char pad_2AB[0x5]; // 0x2ab(0x05)

	void OnURLChanged(struct FString URL); // Function WTL.WTLPDASocialNetworkAuthorization.OnURLChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1898210
	void OnLoadURL(struct FString URL); // Function WTL.WTLPDASocialNetworkAuthorization.OnLoadURL // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLPlayerCameraManager
// Size: 0x29a0 (Inherited: 0x27b0)
struct AWTLPlayerCameraManager : APlayerCameraManager {
	char pad_27B0[0x110]; // 0x27b0(0x110)
	struct UMaterialInstanceDynamic* HealthStatusPostProcessMaterial; // 0x28c0(0x08)
	struct UMaterialInstanceDynamic* BleedingPostProcessMaterial; // 0x28c8(0x08)
	struct UMaterialInstanceDynamic* BurningPostProcessMaterial; // 0x28d0(0x08)
	struct UMaterialInstanceDynamic* ChemicalsPostProcessMaterial; // 0x28d8(0x08)
	struct UMaterialInstanceDynamic* RadiationPostProcessMaterial; // 0x28e0(0x08)
	struct UMaterialInstanceDynamic* StunningPostProcessMaterial; // 0x28e8(0x08)
	struct UMaterialInstanceDynamic* DrunkPostProcessMaterial; // 0x28f0(0x08)
	struct UMaterialInstanceDynamic* TeleportPostProcessMaterial; // 0x28f8(0x08)
	struct UMaterialInstanceDynamic* OutlinePostProcessMaterial; // 0x2900(0x08)
	struct UMaterialInstanceDynamic* ScopeOverlayPostProcessMaterial; // 0x2908(0x08)
	struct UMaterialInstanceDynamic* StealthPostProcessMaterial; // 0x2910(0x08)
	struct UMaterialInstanceDynamic* StealthFarPostProcessMaterial; // 0x2918(0x08)
	struct UMaterialInstanceDynamic* EnergyShieldPostProcessMaterial; // 0x2920(0x08)
	struct UMaterialInstanceDynamic* UnderwaterPostProcessMaterial; // 0x2928(0x08)
	struct UMaterialInstanceDynamic* NightvisionPostProcessMaterial; // 0x2930(0x08)
	struct UMaterialInstanceDynamic* InteractiveObjectsHighlightPostProcessMaterial; // 0x2938(0x08)
	struct UCurveFloat* PainDamageCurve; // 0x2940(0x08)
	struct TArray<struct AEmitterCameraLensEffectBase*> AdditionalCameraLensEffects; // 0x2948(0x10)
	struct UMaterialInstanceDynamic* ThermalvisionPostProcessMaterial; // 0x2958(0x08)
	struct UMaterialInstanceDynamic* SphereRevealPostProcessMaterial; // 0x2960(0x08)
	float DamageValuePerHit; // 0x2968(0x04)
	float DamageValueInterpSpeed; // 0x296c(0x04)
	float AlcoholIncrementInterpSpeed; // 0x2970(0x04)
	float AlcoholDecrementInterpSpeed; // 0x2974(0x04)
	float DamageValueCooldownPerSecond; // 0x2978(0x04)
	float StunningValueCooldownPerSecond; // 0x297c(0x04)
	float WeaponUsageVingetteCooldownPerSecond; // 0x2980(0x04)
	float WeaponHitCameraShakeStrength; // 0x2984(0x04)
	float ExplossiveHitCameraShakeStrength; // 0x2988(0x04)
	float VingetteLimit; // 0x298c(0x04)
	float FringeLimit; // 0x2990(0x04)
	float TeleportInterpSpeed; // 0x2994(0x04)
	char pad_2998[0x8]; // 0x2998(0x08)
};

// Class WTL.WTLPlayerController
// Size: 0x432c0 (Inherited: 0x570)
struct AWTLPlayerController : APlayerController {
	char pad_570[0x42538]; // 0x570(0x42538)
	struct FWTLMapCacheData m_MapCache; // 0x42aa8(0x100)
	char pad_42BA8[0x10]; // 0x42ba8(0x10)
	uint64_t m_UID; // 0x42bb8(0x08)
	char pad_42BC0[0x10]; // 0x42bc0(0x10)
	char m_MinEventLogPriority; // 0x42bd0(0x01)
	enum class EWTLSuicideState m_SuicideState; // 0x42bd1(0x01)
	char pad_42BD2[0x1e]; // 0x42bd2(0x1e)
	struct TArray<struct FWTLDamageActorInfo> m_DamageToActorInfo; // 0x42bf0(0x10)
	char pad_42C00[0x8]; // 0x42c00(0x08)
	struct TArray<struct FWTLDamageActorInfo> m_DamageFromActorInfo; // 0x42c08(0x10)
	char pad_42C18[0x70]; // 0x42c18(0x70)
	struct TArray<struct FWTLMapMarker> m_DynamicMapMarkers; // 0x42c88(0x10)
	struct TArray<struct FWTLMapMarker> m_StaticMapMarkers; // 0x42c98(0x10)
	struct TArray<struct FWTLMapMarker> m_MapMarkers; // 0x42ca8(0x10)
	bool bIsExitToMainMenuOrExitByIdleTime; // 0x42cb8(0x01)
	char pad_42CB9[0x607]; // 0x42cb9(0x607)

	void TriggerPlayerKillNotification(); // Function WTL.WTLPlayerController.TriggerPlayerKillNotification // (Final|Native|Private|BlueprintCallable) // @ game+0xe77850
	void Server_UpdatePlayerName(struct FString PlayerName); // Function WTL.WTLPlayerController.Server_UpdatePlayerName // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6af0
	void Server_SubmitPortalStationTeleportRequest(int32_t WayIndex, int32_t PortalStationID); // Function WTL.WTLPlayerController.Server_SubmitPortalStationTeleportRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x189a6f0
	void Server_ShareMarkerInGroup(int32_t LocationID, char Type, struct FString Color, struct FVector Position, struct FString Name, bool ShowOnMinimap, bool SaveFile, uint64_t CharacterID); // Function WTL.WTLPlayerController.Server_ShareMarkerInGroup // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x18996b0
	void Server_SetMinEventLogPriority(char Value); // Function WTL.WTLPlayerController.Server_SetMinEventLogPriority // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a65f0
	void Server_SendSpawnTracer(bool OwnCharacter, uint16_t AmmoID, struct FVector Position, struct FRotator Rotation, float Velocity, float LifeSpan); // Function WTL.WTLPlayerController.Server_SendSpawnTracer // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x189caf0
	void Server_SendHitInfo(struct FHitResult HitInfo, struct FTransform InitialTransform, struct AActor* Weapon, uint16_t WeaponID, uint16_t AmmoID); // Function WTL.WTLPlayerController.Server_SendHitInfo // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x18a1fb0
	void Server_SendConsoleCommand(struct FString ConsoleCommand); // Function WTL.WTLPlayerController.Server_SendConsoleCommand // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a66f0
	void Server_SendChatMessage(enum class EWTLFiltersChat FilterChat, enum class EWTLFaction Faction, struct FString ChatMessage, struct FString SenderPlayerName); // Function WTL.WTLPlayerController.Server_SendChatMessage // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6810
	void Server_SendBulletHit(bool Reliable, struct APawn* InstigatorPawn, struct UPrimitiveComponent* HitComponent, struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, enum class EPhysicalSurface HitSurface, enum class EWTLCaliber Caliber); // Function WTL.WTLPlayerController.Server_SendBulletHit // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x189d350
	void Server_SendBulletFlyNear(struct AWTLCharacter* OtherCharacter, struct FVector_NetQuantize Location, enum class EWTLCaliber Caliber); // Function WTL.WTLPlayerController.Server_SendBulletFlyNear // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1899bf0
	void Server_SelectReplica(struct AWTLNPCActor* DialogInstigator, int32_t ReplicaID); // Function WTL.WTLPlayerController.Server_SelectReplica // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18a0890
	void Server_RemoveStash(struct AWTLStash* Stash); // Function WTL.WTLPlayerController.Server_RemoveStash // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6370
	void Server_RejectPortalStationTeleportRequest(int32_t PortalStationID); // Function WTL.WTLPlayerController.Server_RejectPortalStationTeleportRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x189a5e0
	void Server_PutGiftInStash(struct AWTLStash* Stash); // Function WTL.WTLPlayerController.Server_PutGiftInStash // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6260
	void Server_PickupPlaceableStuff(struct AWTLPlaceableStuff* PlaceableStuff); // Function WTL.WTLPlayerController.Server_PickupPlaceableStuff // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6150
	void Server_OnClanNameSelected(struct AWTLNPCActor* NPC, struct FString ClanName); // Function WTL.WTLPlayerController.Server_OnClanNameSelected // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18a06d0
	void Server_GetExperienceForFirstMailMessage(); // Function WTL.WTLPlayerController.Server_GetExperienceForFirstMailMessage // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6590
	void Server_ExtinguishCampfire(struct AWTLCampfire* Campfire); // Function WTL.WTLPlayerController.Server_ExtinguishCampfire // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6480
	void Server_EndInformationDialog(struct AWTLTriggerObject* TriggerObject); // Function WTL.WTLPlayerController.Server_EndInformationDialog // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18a05c0
	void Server_ChargePlaceableStuff(struct AWTLPlaceableStuff* PlaceableStuff); // Function WTL.WTLPlayerController.Server_ChargePlaceableStuff // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6040
	void Server_CancelSuicide(); // Function WTL.WTLPlayerController.Server_CancelSuicide // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6d80
	void Server_CancelExit(); // Function WTL.WTLPlayerController.Server_CancelExit // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6c10
	void Server_BeginSuicide(); // Function WTL.WTLPlayerController.Server_BeginSuicide // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6de0
	void Server_BeginExit(bool ExitByIdleTime); // Function WTL.WTLPlayerController.Server_BeginExit // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18a6c70
	void RemoveStash(struct AWTLStash* Stash); // Function WTL.WTLPlayerController.RemoveStash // (Final|Native|Public) // @ game+0x189a180
	void PutGiftInStash(struct AWTLStash* Stash); // Function WTL.WTLPlayerController.PutGiftInStash // (Final|Native|Public) // @ game+0x189a080
	void PickupPlaceableStuff(struct AWTLPlaceableStuff* PlaceableStuff); // Function WTL.WTLPlayerController.PickupPlaceableStuff // (Final|Native|Public) // @ game+0x1899f80
	void OpenCharacterMail(); // Function WTL.WTLPlayerController.OpenCharacterMail // (Final|Native|Private) // @ game+0x18a6e60
	bool OnWindowCloseRequested(); // Function WTL.WTLPlayerController.OnWindowCloseRequested // (Final|Native|Private) // @ game+0x18a2d70
	void OnVOIPTimerTick(); // Function WTL.WTLPlayerController.OnVOIPTimerTick // (Final|Native|Private) // @ game+0x18a2dd0
	void OnVOIPStop(); // Function WTL.WTLPlayerController.OnVOIPStop // (Final|Native|Public) // @ game+0x1899e40
	void OnVOIPStart(); // Function WTL.WTLPlayerController.OnVOIPStart // (Final|Native|Public) // @ game+0x1899e60
	void OnSendGlobalGroupInviteResponse(struct FWTLResponse& Response); // Function WTL.WTLPlayerController.OnSendGlobalGroupInviteResponse // (Final|Native|Private|HasOutParms) // @ game+0x18a24a0
	void OnRep_SuicideState(); // Function WTL.WTLPlayerController.OnRep_SuicideState // (Final|Native|Private) // @ game+0x18a6e40
	void OnRemovedFromGroup(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnRemovedFromGroup // (Final|Native|Private|HasOutParms) // @ game+0x18a2900
	void OnNewClanMemberRequest(struct FString FromCharacter); // Function WTL.WTLPlayerController.OnNewClanMemberRequest // (Final|Native|Private) // @ game+0x18a3f00
	void OnModuleScanTimerTick(); // Function WTL.WTLPlayerController.OnModuleScanTimerTick // (Final|Native|Private) // @ game+0x18a2db0
	void OnGetGroupInvite(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnGetGroupInvite // (Final|Native|Private|HasOutParms) // @ game+0x18a2ab0
	void OnExitTimerOnClient(); // Function WTL.WTLPlayerController.OnExitTimerOnClient // (Final|Native|Private) // @ game+0x18a6f30
	void OnDeleteGroupInvite(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnDeleteGroupInvite // (Final|Native|Private|HasOutParms) // @ game+0x18a25a0
	void OnConsoleCommandResponse(struct FWTLResponse& Response); // Function WTL.WTLPlayerController.OnConsoleCommandResponse // (Final|Native|Private|HasOutParms) // @ game+0x18a3aa0
	void OnClanNameSelected(struct FString ClanName); // Function WTL.WTLPlayerController.OnClanNameSelected // (Final|Native|Private) // @ game+0x18a2c80
	void OnClanMemberRequestRejected(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnClanMemberRequestRejected // (Final|Native|Private|HasOutParms) // @ game+0x18a3740
	void OnClanMemberRequestAccepted(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnClanMemberRequestAccepted // (Final|Native|Private|HasOutParms) // @ game+0x18a38f0
	void OnChatMessage(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnChatMessage // (Final|Native|Private|HasOutParms) // @ game+0x18a3d50
	void OnCancelBarterOffer(); // Function WTL.WTLPlayerController.OnCancelBarterOffer // (Final|Native|Private) // @ game+0x18a6e80
	void OnBecameGroupLeader(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnBecameGroupLeader // (Final|Native|Private|HasOutParms) // @ game+0x18a2750
	void OnAnticheatRequested(struct FWTLEvent& Event); // Function WTL.WTLPlayerController.OnAnticheatRequested // (Final|Native|Private|HasOutParms) // @ game+0x18a3ba0
	void ExtinguishCampfire(struct AWTLCampfire* Campfire); // Function WTL.WTLPlayerController.ExtinguishCampfire // (Final|Native|Public) // @ game+0x189a280
	void ClientUnreliable_OnSpawnTracer(bool OwnCharacter, uint16_t AmmoID, struct FVector_NetQuantize Position, struct FVector_NetQuantizeNormal Rotation, float Velocity, uint16_t TracerID, float LifeSpan); // Function WTL.WTLPlayerController.ClientUnreliable_OnSpawnTracer // (Net|Native|Event|Public|NetClient) // @ game+0x189cf10
	void ClientUnreliable_OnDestroyTracer(uint16_t TracerID); // Function WTL.WTLPlayerController.ClientUnreliable_OnDestroyTracer // (Net|Native|Event|Public|NetClient) // @ game+0x189ca10
	void ClientUnreliable_OnBulletRicochet(struct UPrimitiveComponent* HitComponent, struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, enum class EPhysicalSurface HitSurface, enum class EWTLCaliber Caliber, float ServerTime); // Function WTL.WTLPlayerController.ClientUnreliable_OnBulletRicochet // (Net|Native|Event|Public|NetClient) // @ game+0x189d800
	void ClientUnreliable_OnBulletHit(struct UPrimitiveComponent* HitComponent, struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, enum class EPhysicalSurface HitSurface, enum class EWTLCaliber Caliber, float ServerTime); // Function WTL.WTLPlayerController.ClientUnreliable_OnBulletHit // (Net|Native|Event|Public|NetClient) // @ game+0x189df60
	void ClientSetCurrentCulture(struct FString CultureName); // Function WTL.WTLPlayerController.ClientSetCurrentCulture // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189ab10
	void ClientReliable_OnBulletRicochet(struct UPrimitiveComponent* HitComponent, struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, enum class EPhysicalSurface HitSurface, enum class EWTLCaliber Caliber, float ServerTime); // Function WTL.WTLPlayerController.ClientReliable_OnBulletRicochet // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189dbb0
	void ClientReliable_OnBulletHit(struct UPrimitiveComponent* HitComponent, struct FVector_NetQuantize HitLocation, struct FVector_NetQuantizeNormal ImpactNormal, enum class EPhysicalSurface HitSurface, enum class EWTLCaliber Caliber, float ServerTime); // Function WTL.WTLPlayerController.ClientReliable_OnBulletHit // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189e310
	void Client_StartExitGame(bool IsExitToMainMenu, bool ExitByIdleTime); // Function WTL.WTLPlayerController.Client_StartExitGame // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189a400
	void Client_StartBarterDeal(uint64_t CharacterID, struct FString CharacterName); // Function WTL.WTLPlayerController.Client_StartBarterDeal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189bfa0
	void Client_ShowSteamInventoryWidget(struct AWTLNPCActor* NPCActor); // Function WTL.WTLPlayerController.Client_ShowSteamInventoryWidget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189f870
	void Client_ShowSlotMachineReward(struct FWTLStorageContent Items); // Function WTL.WTLPlayerController.Client_ShowSlotMachineReward // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189e970
	void Client_ShowSlotMachinePayTable(struct AWTLSlotMachinePayTable* SlotMachinePayTableActor); // Function WTL.WTLPlayerController.Client_ShowSlotMachinePayTable // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189f400
	void Client_ShowRobotsCraftWidget(struct AWTLRobotCraftStation* RobotCraftStation); // Function WTL.WTLPlayerController.Client_ShowRobotsCraftWidget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189f950
	void Client_ShowQuestRewardInDialog(struct AWTLNPCActor* DialogInstigator, int32_t QuestID); // Function WTL.WTLPlayerController.Client_ShowQuestRewardInDialog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0c60
	void Client_ShowPrivateStorage(struct AActor* PrivateStorageActor); // Function WTL.WTLPlayerController.Client_ShowPrivateStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189fc70
	void Client_ShowPlayersTable(); // Function WTL.WTLPlayerController.Client_ShowPlayersTable // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1899110
	void Client_ShowObstacleCourseHelp(struct AWTLObstacleCourseHelpButton* ObstacleCourseHelpButton); // Function WTL.WTLPlayerController.Client_ShowObstacleCourseHelp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189e7b0
	void Client_ShowObjectCraftWidget(struct AActor* Actor, enum class EWTLCraftType CraftType); // Function WTL.WTLPlayerController.Client_ShowObjectCraftWidget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189fa30
	void Client_ShowNote(struct FText NoteName, int32_t NoteID); // Function WTL.WTLPlayerController.Client_ShowNote // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189fd50
	void Client_ShowMicrotransactionWindowWidget(enum class EWTLMicrotransactionType Type); // Function WTL.WTLPlayerController.Client_ShowMicrotransactionWindowWidget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189e6c0
	void Client_ShowMessageDialog(enum class EWTLDialogMessageType DialogMessageType, struct FText Message); // Function WTL.WTLPlayerController.Client_ShowMessageDialog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189f6a0
	void Client_ShowMailBox(struct AWTLMailBox* MailBox); // Function WTL.WTLPlayerController.Client_ShowMailBox // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189f4e0
	void Client_ShowJunkMachine(struct AWTLJunkMachineBase* JunkMachine); // Function WTL.WTLPlayerController.Client_ShowJunkMachine // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189e890
	void Client_ShowGodConsole(); // Function WTL.WTLPlayerController.Client_ShowGodConsole // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189e790
	void Client_ShowDialog(struct AWTLNPCActor* DialogInstigator, int32_t NPCReplicaID, struct TArray<int32_t> CharacterReplicaIDArray); // Function WTL.WTLPlayerController.Client_ShowDialog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0dc0
	void Client_ShowClanStorage(struct AActor* ClanStorageActor); // Function WTL.WTLPlayerController.Client_ShowClanStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189fb90
	void Client_ShowClanNameRequest(struct AWTLNPCActor* NPC); // Function WTL.WTLPlayerController.Client_ShowClanNameRequest // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0b80
	void Client_ShowBulletinBoard(struct AWTLBulletinBoard* Board); // Function WTL.WTLPlayerController.Client_ShowBulletinBoard // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189f5c0
	void Client_ShowArenaReward(enum class EWTLLootBoxType BoxType, int32_t MoneyAmount, struct FWTLStorageContent Items); // Function WTL.WTLPlayerController.Client_ShowArenaReward // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189ee40
	void Client_SendMessage(enum class EWTLClientMessageType ClientMessageType, struct FString Text); // Function WTL.WTLPlayerController.Client_SendMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1e20
	void Client_ReceiveSharedMarkerInGroup(int32_t LocationID, char Type, struct FString Color, struct FVector Position, struct FString Name, bool ShowOnMinimap, bool SaveFile, struct FString CharacterName, struct AWTLCharacter* OtherCharacter); // Function WTL.WTLPlayerController.Client_ReceiveSharedMarkerInGroup // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x1899130
	void Client_OnTakeQuest(uint32_t QuestID); // Function WTL.WTLPlayerController.Client_OnTakeQuest // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4410
	void Client_OnSystemQuest(struct FString QuestInfo); // Function WTL.WTLPlayerController.Client_OnSystemQuest // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a46b0
	void Client_OnSystemEvent(struct FString EventInfo); // Function WTL.WTLPlayerController.Client_OnSystemEvent // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a47a0
	void Client_OnStuffItemAttachedToWeapon(uint64_t WeaponItemID, uint64_t AttachmentItemID); // Function WTL.WTLPlayerController.Client_OnStuffItemAttachedToWeapon // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a35e0
	void Client_OnSafeZoneLeave(); // Function WTL.WTLPlayerController.Client_OnSafeZoneLeave // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5390
	void Client_OnSafeZoneEnter(); // Function WTL.WTLPlayerController.Client_OnSafeZoneEnter // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a53b0
	void Client_OnReputationIncrease(char Delta); // Function WTL.WTLPlayerController.Client_OnReputationIncrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a52c0
	void Client_OnReputationDecrease(char Delta); // Function WTL.WTLPlayerController.Client_OnReputationDecrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a51f0
	void Client_OnRemoveInventoryItem(enum class EWTLItemType ItemType, uint16_t ItemTypeID, int32_t Count); // Function WTL.WTLPlayerController.Client_OnRemoveInventoryItem // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a53d0
	void Client_OnReceiveChatMessage(enum class EWTLFiltersChat FilterChat, struct FString ChatMessage, struct FString SenderPlayerName, struct FString ToPlayersName, bool IsNPCDialog); // Function WTL.WTLPlayerController.Client_OnReceiveChatMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1ac0
	void Client_OnQuestFailed(uint32_t QuestID); // Function WTL.WTLPlayerController.Client_OnQuestFailed // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a44f0
	void Client_OnQuestCompleted(uint32_t QuestID); // Function WTL.WTLPlayerController.Client_OnQuestCompleted // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a45d0
	void Client_OnPlayerSuicide(); // Function WTL.WTLPlayerController.Client_OnPlayerSuicide // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1a80
	void Client_OnPlayerKilledByPlayer(struct FText KillerName); // Function WTL.WTLPlayerController.Client_OnPlayerKilledByPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1950
	void Client_OnPlayerKilledByMonster(int32_t MonsterID); // Function WTL.WTLPlayerController.Client_OnPlayerKilledByMonster // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1870
	void Client_OnPlayerKilledByEnemyNPC(uint16_t EnemyNPCGroupID, uint16_t FirstNameIndex, uint16_t LastNameIndex); // Function WTL.WTLPlayerController.Client_OnPlayerKilledByEnemyNPC // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1680
	void Client_OnPlayerDied(); // Function WTL.WTLPlayerController.Client_OnPlayerDied // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1aa0
	void Client_OnPDAModuleInstalled(uint16_t ModuleID); // Function WTL.WTLPlayerController.Client_OnPDAModuleInstalled // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a3500
	void Client_OnNPCKilledWithBroadcastToKillers(struct AWTLEnemyNPC* NPC); // Function WTL.WTLPlayerController.Client_OnNPCKilledWithBroadcastToKillers // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189a950
	void Client_OnNewMailPackage(struct FString SenderName); // Function WTL.WTLPlayerController.Client_OnNewMailPackage // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4970
	void Client_OnMonsterKilledWithBroadcastToKillers(struct AWTLMonsterPawn* Monster); // Function WTL.WTLPlayerController.Client_OnMonsterKilledWithBroadcastToKillers // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189aa30
	void Client_OnMailMessageReceived(struct FString Subject); // Function WTL.WTLPlayerController.Client_OnMailMessageReceived // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4a60
	void Client_OnMadeEffect(struct AActor* OtherActor, enum class EWTLCharacterEffectType EffectType, float EffectValue); // Function WTL.WTLPlayerController.Client_OnMadeEffect // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a12a0
	void Client_OnLongDistanceHit(int32_t Distance, enum class EWTLColliderType ColliderType, bool Kill); // Function WTL.WTLPlayerController.Client_OnLongDistanceHit // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1490
	void Client_OnLevelUp(char NewLevel); // Function WTL.WTLPlayerController.Client_OnLevelUp // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5970
	void Client_OnLeftClan(struct FString ClanName); // Function WTL.WTLPlayerController.Client_OnLeftClan // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a2ee0
	void Client_OnJoinedClan(struct FString ClanName); // Function WTL.WTLPlayerController.Client_OnJoinedClan // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a2fd0
	void Client_OnJackpot(); // Function WTL.WTLPlayerController.Client_OnJackpot // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1280
	void Client_OnItemUnequipped(enum class EWTLItemType ItemType, uint16_t ItemTypeID); // Function WTL.WTLPlayerController.Client_OnItemUnequipped // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a30c0
	void Client_OnItemsRepaired(); // Function WTL.WTLPlayerController.Client_OnItemsRepaired // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a3380
	void Client_OnItemRepaired(enum class EWTLItemType ItemType, uint16_t ItemTypeID); // Function WTL.WTLPlayerController.Client_OnItemRepaired // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a33a0
	void Client_OnItemEquipped(enum class EWTLItemType ItemType, uint16_t ItemTypeID); // Function WTL.WTLPlayerController.Client_OnItemEquipped // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a3220
	void Client_OnHaveNewMailPackages(int32_t Count); // Function WTL.WTLPlayerController.Client_OnHaveNewMailPackages // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4890
	void Client_OnGetCommissionSellItemsTypesCountResponse(struct AWTLNPCActor* NPC, struct TArray<struct FWTLCommissionItemTypeCount> TypesCount); // Function WTL.WTLPlayerController.Client_OnGetCommissionSellItemsTypesCountResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189bd30
	void Client_OnGetCommissionSellItemsPageResponse(struct AWTLNPCActor* NPC, int32_t ItemsCount, int32_t PageCount, int32_t ItemPerPage, int32_t PageIndex, struct FWTLSellItems ItemsPage); // Function WTL.WTLPlayerController.Client_OnGetCommissionSellItemsPageResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189b5a0
	void Client_OnGetClanStorageMoneyLogPageResponse(struct AWTLNPCActor* NPC, int32_t RecordCount, int32_t PageCount, int32_t RecordsPerPage, int32_t PageIndex, struct TArray<struct FWTLClanStorageMoneyLogRecord> RecordsPage); // Function WTL.WTLPlayerController.Client_OnGetClanStorageMoneyLogPageResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189ae40
	void Client_OnGetClanStorageItemsLogPageResponse(struct AWTLNPCActor* NPC, int32_t RecordCount, int32_t PageCount, int32_t RecordsPerPage, int32_t PageIndex, struct TArray<struct FWTLClanStorageItemLogRecord> RecordsPage); // Function WTL.WTLPlayerController.Client_OnGetClanStorageItemsLogPageResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189b1f0
	void Client_OnFortificationStateChanged(enum class EWTLFortificationNotificationState State); // Function WTL.WTLPlayerController.Client_OnFortificationStateChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189a880
	void Client_OnFactionScoreIncrease(int32_t Delta); // Function WTL.WTLPlayerController.Client_OnFactionScoreIncrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4dd0
	void Client_OnFactionScoreDecrease(int32_t Delta); // Function WTL.WTLPlayerController.Client_OnFactionScoreDecrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4cf0
	void Client_OnFactionRankIncrease(char Rank); // Function WTL.WTLPlayerController.Client_OnFactionRankIncrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4c20
	void Client_OnFactionRankDecrease(char Rank); // Function WTL.WTLPlayerController.Client_OnFactionRankDecrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4b50
	void Client_OnExitFromGame(); // Function WTL.WTLPlayerController.Client_OnExitFromGame // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a6f50
	void Client_OnExcludedFromClan(struct FString ClanName); // Function WTL.WTLPlayerController.Client_OnExcludedFromClan // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a2df0
	void Client_OnEventLogRecord(enum class EWTLEventLogRecordType RecordType, char Priority, struct FString InstigatorName, struct FString VictimName, struct FString Param1, struct FString Param2, struct FString Param3, struct FString Param4); // Function WTL.WTLPlayerController.Client_OnEventLogRecord // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5b20
	void Client_OnEarnExperience(uint32_t ExperienceValue); // Function WTL.WTLPlayerController.Client_OnEarnExperience // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5a40
	void Client_OnDamageToActor(struct TArray<struct FWTLDamageActorInfo> DamageInfoArray); // Function WTL.WTLPlayerController.Client_OnDamageToActor // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a10b0
	void Client_OnDamageFromActor(struct TArray<struct FWTLDamageActorInfo> DamageInfoArray); // Function WTL.WTLPlayerController.Client_OnDamageFromActor // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0fc0
	void Client_OnCraftObjectProcessStarted(int32_t CraftObjectID, int32_t CraftItemID, float ProcessTime); // Function WTL.WTLPlayerController.Client_OnCraftObjectProcessStarted // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4220
	void Client_OnCraftObjectProcessFinished(int32_t CraftObjectID, int32_t CraftItemID); // Function WTL.WTLPlayerController.Client_OnCraftObjectProcessFinished // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a40c0
	void Client_OnConsumeItemResult(bool bIsSuccessfull, struct FString Description, float TimeToConsume); // Function WTL.WTLPlayerController.Client_OnConsumeItemResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189ac20
	void Client_OnConfederationReputationIncrease(char Delta); // Function WTL.WTLPlayerController.Client_OnConfederationReputationIncrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5120
	void Client_OnConfederationReputationDecrease(char Delta); // Function WTL.WTLPlayerController.Client_OnConfederationReputationDecrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5050
	void Client_OnClanLevelUp(char NewLevel); // Function WTL.WTLPlayerController.Client_OnClanLevelUp // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a3ff0
	void Client_OnBlackSunsetReputationIncrease(char Delta); // Function WTL.WTLPlayerController.Client_OnBlackSunsetReputationIncrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4f80
	void Client_OnBlackSunsetReputationDecrease(char Delta); // Function WTL.WTLPlayerController.Client_OnBlackSunsetReputationDecrease // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a4eb0
	void Client_OnBarterDealRequestRejected(uint64_t CharacterID, struct FString CharacterName); // Function WTL.WTLPlayerController.Client_OnBarterDealRequestRejected // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189c290
	void Client_OnBarterDealRequestReceived(struct FWTLBarterDealRequest Request); // Function WTL.WTLPlayerController.Client_OnBarterDealRequestReceived // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189c5b0
	void Client_OnBarterDealRequestCreated(struct FWTLBarterDealRequest Request); // Function WTL.WTLPlayerController.Client_OnBarterDealRequestCreated // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189c6d0
	void Client_OnBarterDealRequestCanceled(uint64_t FromCharacterID, uint64_t ToCharacterID); // Function WTL.WTLPlayerController.Client_OnBarterDealRequestCanceled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189c130
	void Client_OnBarterDealRequestAccepted(uint64_t CharacterID, struct FString CharacterName); // Function WTL.WTLPlayerController.Client_OnBarterDealRequestAccepted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189c420
	void Client_OnBalanceReceivedFromCharacter(struct FString SenderName, struct FString Description, int32_t Amount); // Function WTL.WTLPlayerController.Client_OnBalanceReceivedFromCharacter // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189c7f0
	void Client_OnBalanceChange(int32_t Delta); // Function WTL.WTLPlayerController.Client_OnBalanceChange // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a5890
	void Client_OnBadConnectionState(); // Function WTL.WTLPlayerController.Client_OnBadConnectionState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a1e00
	void Client_OnAddInventoryItem(enum class EWTLItemType ItemType, uint16_t ItemTypeID, int32_t Count); // Function WTL.WTLPlayerController.Client_OnAddInventoryItem // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a55c0
	void Client_OnAccountBalanceChange(int32_t Delta); // Function WTL.WTLPlayerController.Client_OnAccountBalanceChange // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a57b0
	void Client_OnAccountAchievement(uint16_t AchievementID); // Function WTL.WTLPlayerController.Client_OnAccountAchievement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a11a0
	void Client_LogQuestDescription(struct AWTLNPCActor* DialogInstigator, int32_t QuestID); // Function WTL.WTLPlayerController.Client_LogQuestDescription // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0a20
	void Client_ForceSendScreenshot(); // Function WTL.WTLPlayerController.Client_ForceSendScreenshot // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x18a2c60
	void Client_EndDialog(struct AWTLNPCActor* DialogInstigator); // Function WTL.WTLPlayerController.Client_EndDialog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a04e0
	void Client_EndBarterDeal(bool Success); // Function WTL.WTLPlayerController.Client_EndBarterDeal // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189bec0
	void Client_EditorGetGroupInvite(struct FWTLGroupInvite Invite); // Function WTL.WTLPlayerController.Client_EditorGetGroupInvite // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1898f80
	void Client_BeginWeaponPartsExchange(struct AWTLNPCActor* NPCActor); // Function WTL.WTLPlayerController.Client_BeginWeaponPartsExchange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0160
	void Client_BeginTrade(struct AActor* TradingActor); // Function WTL.WTLPlayerController.Client_BeginTrade // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0400
	void Client_BeginRepair(struct AWTLNPCActor* RepairingActor); // Function WTL.WTLPlayerController.Client_BeginRepair // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0320
	void Client_BeginItemsCustomization(struct AWTLNPCActor* NPCActor); // Function WTL.WTLPlayerController.Client_BeginItemsCustomization // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18a0240
	void Client_BeginInformationDialog(struct AWTLTriggerObject* TriggerObject, int32_t InformationDialogID, struct FText Title); // Function WTL.WTLPlayerController.Client_BeginInformationDialog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189ff20
	void ClearHUDWidgets(); // Function WTL.WTLPlayerController.ClearHUDWidgets // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x189ac00
	void ChargePlaceableStuff(struct AWTLPlaceableStuff* PlaceableStuff); // Function WTL.WTLPlayerController.ChargePlaceableStuff // (Final|Native|Public) // @ game+0x1899e80
	void CancelSuicide(); // Function WTL.WTLPlayerController.CancelSuicide // (Final|Native|Public) // @ game+0x189a580
	void CancelExitGame(); // Function WTL.WTLPlayerController.CancelExitGame // (Final|Native|Public) // @ game+0x189a380
};

// Class WTL.WTLPlayerStart
// Size: 0x258 (Inherited: 0x250)
struct AWTLPlayerStart : APlayerStart {
	enum class EWTLFaction Faction; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	int32_t Rating; // 0x254(0x04)
};

// Class WTL.WTLPlayerState
// Size: 0x1810 (Inherited: 0x320)
struct AWTLPlayerState : APlayerState {
	char pad_320[0x20]; // 0x320(0x20)
	int32_t m_MailPackageCount; // 0x340(0x04)
	char m_PlacedMinesCount; // 0x344(0x01)
	char m_PlacedStickyMinesCount; // 0x345(0x01)
	bool m_IsPieceOfShit; // 0x346(0x01)
	char pad_347[0x89]; // 0x347(0x89)
	enum class EWTLPlayerPawnType m_PlayerPawnType; // 0x3d0(0x01)
	char pad_3D1[0x4f]; // 0x3d1(0x4f)
	struct FWTLCharacterInfo m_CharacterInfo; // 0x420(0x110)
	char pad_530[0x188]; // 0x530(0x188)
	float m_CharacterCurrentState_Health; // 0x6b8(0x04)
	char m_CharacterCurrentState_Strength; // 0x6bc(0x01)
	char m_CharacterCurrentState_Dexterity; // 0x6bd(0x01)
	char m_CharacterCurrentState_Stamina; // 0x6be(0x01)
	char m_CharacterCurrentState_Accuracy; // 0x6bf(0x01)
	char m_CharacterCurrentState_Intelligence; // 0x6c0(0x01)
	char m_CharacterCurrentState_Fortune; // 0x6c1(0x01)
	char pad_6C2[0x2]; // 0x6c2(0x02)
	uint32_t m_CharacterCurrentState_LocationID; // 0x6c4(0x04)
	struct FVector m_CharacterCurrentState_LocationPosition; // 0x6c8(0x0c)
	enum class EWTLItemType m_CharacterCurrentState_ArmsItemType; // 0x6d4(0x01)
	char pad_6D5[0x3]; // 0x6d5(0x03)
	uint64_t m_CharacterCurrentState_ArmsItemID; // 0x6d8(0x08)
	enum class EWTLItemType m_CharacterCurrentState_HeadItemType; // 0x6e0(0x01)
	char pad_6E1[0x7]; // 0x6e1(0x07)
	uint64_t m_CharacterCurrentState_HeadItemID; // 0x6e8(0x08)
	enum class EWTLItemType m_CharacterCurrentState_TorsoItemType; // 0x6f0(0x01)
	char pad_6F1[0x7]; // 0x6f1(0x07)
	uint64_t m_CharacterCurrentState_TorsoItemID; // 0x6f8(0x08)
	enum class EWTLItemType m_CharacterCurrentState_LegsItemType; // 0x700(0x01)
	char pad_701[0x7]; // 0x701(0x07)
	uint64_t m_CharacterCurrentState_LegsItemID; // 0x708(0x08)
	enum class EWTLItemType m_CharacterCurrentState_FeetItemType; // 0x710(0x01)
	char pad_711[0x7]; // 0x711(0x07)
	uint64_t m_CharacterCurrentState_FeetItemID; // 0x718(0x08)
	enum class EWTLItemType m_CharacterCurrentState_EquipmentSlot1ItemType; // 0x720(0x01)
	char pad_721[0x7]; // 0x721(0x07)
	uint64_t m_CharacterCurrentState_EquipmentSlot1ItemID; // 0x728(0x08)
	enum class EWTLItemType m_CharacterCurrentState_EquipmentSlot2ItemType; // 0x730(0x01)
	char pad_731[0x7]; // 0x731(0x07)
	uint64_t m_CharacterCurrentState_EquipmentSlot2ItemID; // 0x738(0x08)
	enum class EWTLItemType m_CharacterCurrentState_EquipmentSlot3ItemType; // 0x740(0x01)
	char pad_741[0x7]; // 0x741(0x07)
	uint64_t m_CharacterCurrentState_EquipmentSlot3ItemID; // 0x748(0x08)
	enum class EWTLItemType m_CharacterCurrentState_EquipmentSlot4ItemType; // 0x750(0x01)
	char pad_751[0x7]; // 0x751(0x07)
	uint64_t m_CharacterCurrentState_EquipmentSlot4ItemID; // 0x758(0x08)
	char m_CharacterCurrentState_EquipmentSlotStates; // 0x760(0x01)
	char pad_761[0x7]; // 0x761(0x07)
	struct TArray<struct FWTLFastAccessSlot> m_CharacterCurrentState_FastAccessSlots; // 0x768(0x10)
	int32_t m_CharacterCurrentState_SafeZoneID; // 0x778(0x04)
	char pad_77C[0x4]; // 0x77c(0x04)
	struct TArray<struct FWTLIdentity32> m_CharacterCurrentState_VisitedLocations; // 0x780(0x10)
	struct TArray<struct FWTLIdentity16> m_CharacterCurrentState_PDAModules; // 0x790(0x10)
	struct TArray<struct FWTLIdentity32> m_CharacterCurrentState_VisitedPortals; // 0x7a0(0x10)
	char m_CharacterCurrentState_Hunger; // 0x7b0(0x01)
	char m_CharacterCurrentState_Thirst; // 0x7b1(0x01)
	char pad_7B2[0x6]; // 0x7b2(0x06)
	struct FWTLMedicineItemEffect m_CharacterCurrentState_MedicineEffect; // 0x7b8(0x30)
	struct FWTLMedicineItemEffect m_CharacterCurrentState_StimulatorEffect; // 0x7e8(0x30)
	struct FWTLCharacterItemExperienceFastArray m_CharacterItemExperience; // 0x818(0x118)
	char pad_930[0xa8]; // 0x930(0xa8)
	struct TArray<struct FWTLContactListItem> m_CharacterContactList; // 0x9d8(0x10)
	struct TArray<struct FWTLIdentity16> m_CharacterSkills; // 0x9e8(0x10)
	struct FWTLCharacterParameters m_CharacterParameters; // 0x9f8(0xe0)
	struct TArray<struct FWTLCharacterCustomizationRecord> m_CharacterCustomizationInfo; // 0xad8(0x10)
	char pad_AE8[0x10]; // 0xae8(0x10)
	struct FWTLCharacterMapMarkerArray m_CharacterMapMarkers; // 0xaf8(0x118)
	struct FWTLCharacterEffectArray m_CharacterEffects; // 0xc10(0x118)
	struct TArray<struct FWTLCharacterMailMessage> m_CharacterMail; // 0xd28(0x10)
	char pad_D38[0x238]; // 0xd38(0x238)
	uint64_t m_ShortCharacterInfo_ID; // 0xf70(0x08)
	enum class EWTLSex m_ShortCharacterInfo_Sex; // 0xf78(0x01)
	char m_ShortCharacterInfo_Level; // 0xf79(0x01)
	enum class EWTLCharacterClass m_ShortCharacterInfo_Class; // 0xf7a(0x01)
	char pad_F7B[0x1]; // 0xf7b(0x01)
	float m_ShortCharacterInfo_Health; // 0xf7c(0x04)
	bool m_ShortCharacterInfo_ReadyToGame; // 0xf80(0x01)
	char m_ShortCharacterInfo_Strength; // 0xf81(0x01)
	char m_ShortCharacterInfo_Dexterity; // 0xf82(0x01)
	char m_ShortCharacterInfo_Stamina; // 0xf83(0x01)
	char m_ShortCharacterInfo_Accuracy; // 0xf84(0x01)
	char m_ShortCharacterInfo_Intelligence; // 0xf85(0x01)
	char m_ShortCharacterInfo_Fortune; // 0xf86(0x01)
	char pad_F87[0x1]; // 0xf87(0x01)
	struct FWTLCharacterSlotItemInfo m_ShortCharacterInfo_HeadItem; // 0xf88(0x30)
	struct FWTLCharacterSlotItemInfo m_ShortCharacterInfo_TorsoItem; // 0xfb8(0x30)
	struct FWTLCharacterSlotItemInfo m_ShortCharacterInfo_LegsItem; // 0xfe8(0x30)
	struct FWTLCharacterSlotItemInfo m_ShortCharacterInfo_FeetItem; // 0x1018(0x30)
	struct FWTLCharacterSlotItemInfo m_ShortCharacterInfo_ArmsItem; // 0x1048(0x30)
	struct FWTLFastAccessSlotItemInfoArray m_ShortCharacterInfo_FastAccessSlots; // 0x1078(0x118)
	enum class EWTLFaction m_ShortCharacterInfo_Faction; // 0x1190(0x01)
	char m_ShortCharacterInfo_Reputation; // 0x1191(0x01)
	char m_ShortCharacterInfo_Rank; // 0x1192(0x01)
	char pad_1193[0x1]; // 0x1193(0x01)
	uint16_t m_ShortCharacterInfo_ClanID; // 0x1194(0x02)
	enum class EWTLClanMemberType m_ShortCharacterInfo_ClanMemberType; // 0x1196(0x01)
	enum class EWTLPlayerType m_ShortCharacterInfo_PlayerType; // 0x1197(0x01)
	char m_ShortCharacterInfo_BodyType; // 0x1198(0x01)
	bool m_ShortCharacterInfo_PVPEnabled; // 0x1199(0x01)
	char pad_119A[0x6]; // 0x119a(0x06)
	struct TArray<struct FWTLCharacterCustomizationPackedRecord> m_ShortCharacterInfo_CustomizationInfo; // 0x11a0(0x10)
	struct FWTLCharacterEquipmentItemInfo m_ShortCharacterInfo_EquipmentSlot1; // 0x11b0(0x30)
	struct FWTLCharacterEquipmentItemInfo m_ShortCharacterInfo_EquipmentSlot2; // 0x11e0(0x30)
	struct FWTLCharacterEquipmentItemInfo m_ShortCharacterInfo_EquipmentSlot3; // 0x1210(0x30)
	struct FWTLCharacterEquipmentItemInfo m_ShortCharacterInfo_EquipmentSlot4; // 0x1240(0x30)
	char m_ShortCharacterInfo_EquipmentSlotStates; // 0x1270(0x01)
	char pad_1271[0x3]; // 0x1271(0x03)
	uint32_t m_InventoryWeight; // 0x1274(0x04)
	uint32_t m_MaxInventoryWeight; // 0x1278(0x04)
	float m_MaxHealth; // 0x127c(0x04)
	bool m_MuteStateChat; // 0x1280(0x01)
	bool m_MuteStateVoice; // 0x1281(0x01)
	char pad_1282[0x6]; // 0x1282(0x06)
	struct FWTLDateTime m_MuteStateMuteEnd; // 0x1288(0x08)
	struct FString m_MuteStateDescription; // 0x1290(0x10)
	bool m_IsFounder; // 0x12a0(0x01)
	char pad_12A1[0x27]; // 0x12a1(0x27)
	struct TArray<struct FWTLClanMember> m_ClanMembers; // 0x12c8(0x10)
	struct TArray<struct FWTLClanPolicyGroup> m_ClanPolicyGroups; // 0x12d8(0x10)
	struct TArray<struct FWTLCommissionStorage> m_CommissionStorages; // 0x12e8(0x10)
	struct TArray<struct FWTLCraftObjectState> m_CraftObjectStates; // 0x12f8(0x10)
	struct FWTLBarterDeal m_BarterDeal; // 0x1308(0x180)
	struct FWTLStorageContent m_MailStorage; // 0x1488(0xa8)
	struct FWTLOperationResult m_LastOperationResult; // 0x1530(0x20)
	bool m_CanPlaceCampfire; // 0x1550(0x01)
	bool m_CanPlaceStash; // 0x1551(0x01)
	char pad_1552[0x2]; // 0x1552(0x02)
	struct FVector m_LastCampfireLocation; // 0x1554(0x0c)
	struct FVector m_LastStashLocation; // 0x1560(0x0c)
	char pad_156C[0x124]; // 0x156c(0x124)
	struct FWTLGroup Group; // 0x1690(0x50)
	struct TArray<struct FWTLStimulatorEffect> StimulatorEffects; // 0x16e0(0x10)
	uint64_t LastDeathFromCharacterID; // 0x16f0(0x08)
	bool bIsPVPAllowed; // 0x16f8(0x01)
	char pad_16F9[0x7]; // 0x16f9(0x07)
	uint64_t SteamID; // 0x1700(0x08)
	char pad_1708[0x100]; // 0x1708(0x100)
	uint64_t m_SavedTeleportationDeviceItemID; // 0x1808(0x08)

	void Server_ViewOrReadItem(uint16_t ArtefactID); // Function WTL.WTLPlayerState.Server_ViewOrReadItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ac2b0
	void Server_UseRepairKit(uint64_t RepaitKitItemID, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_UseRepairKit // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b7fb0
	void Server_UseNewPassport(uint64_t ItemId); // Function WTL.WTLPlayerState.Server_UseNewPassport // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b01a0
	void Server_UseModificationKit(uint64_t RepaitKitItemID, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_UseModificationKit // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b7d80
	void Server_UseJunkMachine(struct AWTLJunkMachineBase* JunkMachine, struct TArray<struct FWTLSellingItemInfo> Items); // Function WTL.WTLPlayerState.Server_UseJunkMachine // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ac6a0
	void Server_UseItemFromStorage(struct AActor* StorageContentActor, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_UseItemFromStorage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bc480
	void Server_UseItem(enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_UseItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bc6b0
	void Server_UpdateItemCustomizationWithSprayCan(enum class EWTLItemType ItemType, uint64_t ItemId, uint64_t SprayCanItemID); // Function WTL.WTLPlayerState.Server_UpdateItemCustomizationWithSprayCan // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9410
	void Server_UpdateItemCustomization(struct AWTLNPCActor* NPC, enum class EWTLItemType ItemType, uint64_t ItemId, char CustomizationScalar, char CustomizationColor); // Function WTL.WTLPlayerState.Server_UpdateItemCustomization // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9640
	void Server_UpdateCommissionItem(struct AWTLNPCActor* NPC, enum class EWTLItemType ItemType, uint64_t ItemId, float Price, int32_t MinBuyCount, uint32_t CommissionDaysDelta); // Function WTL.WTLPlayerState.Server_UpdateCommissionItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b6e70
	void Server_UpdateClanStorageTab(struct AWTLNPCActor* NPC, char TabIndex, char ImageIndex, struct FString TabName, struct FString Description, struct TArray<uint64_t> CanPutClanPolicyGroups, struct TArray<uint64_t> CanTakeClanPolicyGroups); // Function WTL.WTLPlayerState.Server_UpdateClanStorageTab // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4870
	void Server_UpdateClanPolicyGroup(uint64_t ClanPolicyGroupID, struct FString Name); // Function WTL.WTLPlayerState.Server_UpdateClanPolicyGroup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4480
	void Server_UpdateCharacterParameters(char Strength, char Dexterity, char Stamina, char Accuracy, char Intelligence, char Fortune); // Function WTL.WTLPlayerState.Server_UpdateCharacterParameters // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba340
	void Server_UnloadWeapon(uint64_t ItemId); // Function WTL.WTLPlayerState.Server_UnloadWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bc9d0
	void Server_UniteAllStorageItems(struct AActor* StorageContentActor); // Function WTL.WTLPlayerState.Server_UniteAllStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be490
	void Server_UniteAllItemsOfType(enum class EWTLItemType ItemType); // Function WTL.WTLPlayerState.Server_UniteAllItemsOfType // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be600
	void Server_UniteAllItems(); // Function WTL.WTLPlayerState.Server_UniteAllItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be5a0
	void Server_UniteAllClanStorageItems(struct AWTLNPCActor* NPC, char TabIndex); // Function WTL.WTLPlayerState.Server_UniteAllClanStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4eb0
	void Server_Unite2StorageItems(struct AActor* StorageContentActor, enum class EWTLItemType ItemType, uint64_t ItemID1, uint64_t ItemID2); // Function WTL.WTLPlayerState.Server_Unite2StorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be700
	void Server_Unite2InventoryItems(enum class EWTLItemType ItemType, uint64_t ItemID1, uint64_t ItemID2); // Function WTL.WTLPlayerState.Server_Unite2InventoryItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be9c0
	void Server_Unite2ClanStorageItems(struct AWTLNPCActor* NPC, char TabIndex, enum class EWTLItemType ItemType, uint64_t ItemID1, uint64_t ItemID2); // Function WTL.WTLPlayerState.Server_Unite2ClanStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b5040
	void Server_UnequipStuffItem(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_UnequipStuffItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bb550
	void Server_UnequipItem(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_UnequipItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bb9b0
	void Server_TeleportToFortificationCommandCore(uint64_t TeleportationDeviceItemID, struct AWTLCharacter* Character, struct AWTLFortificationCommandCore* FortificationCommandCore); // Function WTL.WTLPlayerState.Server_TeleportToFortificationCommandCore // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ac020
	void Server_TakeMoneyFromClanStorage(struct AWTLNPCActor* NPC, char TabIndex, int32_t MoneyAmount, struct FString Description); // Function WTL.WTLPlayerState.Server_TakeMoneyFromClanStorage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b5ce0
	void Server_TakeMoneyFromCharacterBalance(struct AWTLNPCActor* NPC); // Function WTL.WTLPlayerState.Server_TakeMoneyFromCharacterBalance // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b6b30
	void Server_TakeClanQuest(int32_t QuestID); // Function WTL.WTLPlayerState.Server_TakeClanQuest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0ab0
	void Server_TakeBulletinBoarQuest(struct AWTLBulletinBoard* BulletinBoard, int32_t QuestID); // Function WTL.WTLPlayerState.Server_TakeBulletinBoarQuest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0bc0
	void Server_SynchronizeQuestStates(uint64_t ControlSum); // Function WTL.WTLPlayerState.Server_SynchronizeQuestStates // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ad580
	void Server_SwapStorageItems(struct AActor* StorageContentActor, char FromSlotNumber, char ToSlotNumber); // Function WTL.WTLPlayerState.Server_SwapStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bebf0
	void Server_SwapInventoryItems(char FromSlotNumber, char ToSlotNumber); // Function WTL.WTLPlayerState.Server_SwapInventoryItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bee20
	void Server_SwapClanStorageItems(struct AWTLNPCActor* NPC, char TabIndex, char FromSlotNumber, char ToSlotNumber); // Function WTL.WTLPlayerState.Server_SwapClanStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b5380
	void Server_SwapArmorPlates(uint64_t ArmorItemID); // Function WTL.WTLPlayerState.Server_SwapArmorPlates // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2d40
	void Server_SplitItem(enum class EWTLItemType ItemType, uint64_t ItemId, int32_t NewItemCount); // Function WTL.WTLPlayerState.Server_SplitItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be0f0
	void Server_ShowPlayersTable(); // Function WTL.WTLPlayerState.Server_ShowPlayersTable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c0cf0
	void Server_ShowGodConsole(); // Function WTL.WTLPlayerState.Server_ShowGodConsole // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ac250
	void Server_SetPVPMode(bool PVPEnabled); // Function WTL.WTLPlayerState.Server_SetPVPMode // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0770
	void Server_SetMoneyToBarterDeal(int32_t MoneyAmount); // Function WTL.WTLPlayerState.Server_SetMoneyToBarterDeal // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3700
	void Server_SetMailMessageRead(uint64_t MessageID); // Function WTL.WTLPlayerState.Server_SetMailMessageRead // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b91f0
	void Server_SetItemCustomizationName(enum class EWTLItemType ItemType, uint64_t ItemId, uint64_t CustomizationItemID, struct FString CustomizationName); // Function WTL.WTLPlayerState.Server_SetItemCustomizationName // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b02b0
	void Server_SetDebugIsFounder(bool IsFounder); // Function WTL.WTLPlayerState.Server_SetDebugIsFounder // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18abe30
	void Server_SetDebugHavePremium(bool HavePremium); // Function WTL.WTLPlayerState.Server_SetDebugHavePremium // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18abd20
	void Server_SetDebugCharacterPlayerType(enum class EWTLPlayerType PlayerType); // Function WTL.WTLPlayerState.Server_SetDebugCharacterPlayerType // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18abc20
	void Server_SetDebugCharacterIsInClan(bool IsInClan); // Function WTL.WTLPlayerState.Server_SetDebugCharacterIsInClan // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18aba00
	void Server_SetDebugCharacterClanMemberType(enum class EWTLClanMemberType ClanMemberType); // Function WTL.WTLPlayerState.Server_SetDebugCharacterClanMemberType // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ab900
	void Server_SetDebugCharacterBodyType(int32_t BodyTypeIndex); // Function WTL.WTLPlayerState.Server_SetDebugCharacterBodyType // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18abb10
	void Server_SetClanLeader(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_SetClanLeader // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1250
	void Server_SetClanDescription(struct FString Description); // Function WTL.WTLPlayerState.Server_SetClanDescription // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0d50
	void Server_SetClanDeputyLeader(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_SetClanDeputyLeader // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1140
	void Server_SetBarterDealReady(bool Value); // Function WTL.WTLPlayerState.Server_SetBarterDealReady // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3c30
	void Server_SetBarterDealAgreement(struct AWTLCharacter* Character, bool AcceptState); // Function WTL.WTLPlayerState.Server_SetBarterDealAgreement // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3560
	void Server_SetActiveQuest(int32_t QuestID); // Function WTL.WTLPlayerState.Server_SetActiveQuest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba7d0
	void Server_SendMoneyToCharacter(uint64_t CharacterID, int32_t MoneyAmount, struct FString Description); // Function WTL.WTLPlayerState.Server_SendMoneyToCharacter // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b7a70
	void Server_SendMailPackage(struct AWTLMailBox* MailBox, enum class EWTLMailPackageDeliveryType DeliveryType, struct FString RecipientName, struct TArray<struct FWTLSellingItemInfo> Items, int32_t MoneyAmount, struct FString MessageText); // Function WTL.WTLPlayerState.Server_SendMailPackage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18afda0
	void Server_SendMailMessageToClanMembers(char Priority, struct FString Subject, struct FString Text); // Function WTL.WTLPlayerState.Server_SendMailMessageToClanMembers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8a10
	void Server_SendMailMessage(struct FString RecipientName, char Priority, struct FString Subject, struct FString Text); // Function WTL.WTLPlayerState.Server_SendMailMessage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8c70
	void Server_SendClanMemberRequest(uint16_t ClanID, struct FString Commentary); // Function WTL.WTLPlayerState.Server_SendClanMemberRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0e70
	void Server_SendClanInviteToCharacter(struct FString CharacterName); // Function WTL.WTLPlayerState.Server_SendClanInviteToCharacter // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1600
	void Server_SendBarterDealRequest(uint64_t CharacterID, struct FString MessageText); // Function WTL.WTLPlayerState.Server_SendBarterDealRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4020
	void Server_SellItems(struct AActor* TradingActor, struct TArray<struct FWTLSellingItemInfo> SellingItems); // Function WTL.WTLPlayerState.Server_SellItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bbe00
	void Server_ResetCharacterParameters(); // Function WTL.WTLPlayerState.Server_ResetCharacterParameters // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba710
	void Server_RequestPrivateLootFromStorageContentActor(struct AActor* StorageContentActor); // Function WTL.WTLPlayerState.Server_RequestPrivateLootFromStorageContentActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ac860
	void Server_ReplicateBarterDeals(struct AWTLCharacter* Character); // Function WTL.WTLPlayerState.Server_ReplicateBarterDeals // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3450
	void Server_RepairStuffItem(uint64_t StuffItemID, uint64_t OtherItemID); // Function WTL.WTLPlayerState.Server_RepairStuffItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba020
	void Server_RepairItems(struct AWTLNPCActor* GunsmithNPC, struct TArray<struct FWTLIdentityItem> RepairItems); // Function WTL.WTLPlayerState.Server_RepairItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba8e0
	void Server_RemoveWeaponAttachmentFromSlot(uint64_t WeaponItemID, enum class EWTLWeaponAttachmentSlotType SlotType); // Function WTL.WTLPlayerState.Server_RemoveWeaponAttachmentFromSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18badd0
	void Server_RemoveWeaponAttachment(uint64_t WeaponItemID, uint16_t ItemTypeID); // Function WTL.WTLPlayerState.Server_RemoveWeaponAttachment // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bac40
	void Server_RemoveSkillFromCharacter(uint16_t SkillID); // Function WTL.WTLPlayerState.Server_RemoveSkillFromCharacter // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9bd0
	void Server_RemovePDAModuleID(uint16_t ModuleID); // Function WTL.WTLPlayerState.Server_RemovePDAModuleID // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b81e0
	void Server_RemoveItemFromContainer(uint64_t ContainerItemID); // Function WTL.WTLPlayerState.Server_RemoveItemFromContainer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8400
	void Server_RemoveItemFromCommission(struct AWTLNPCActor* NPC, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_RemoveItemFromCommission // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b6c40
	void Server_RemoveItemFromBarterDeal(enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_RemoveItemFromBarterDeal // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3810
	void Server_RemoveContact(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_RemoveContact // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8740
	void Server_RemoveClanDeputyLeader(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_RemoveClanDeputyLeader // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1030
	void Server_RemoveArmorPlate(uint64_t ArmorItemID, enum class EWTLArmorPlateType ArmorPlateType, char SlotNumber); // Function WTL.WTLPlayerState.Server_RemoveArmorPlate // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2f60
	void Server_RemoveAllWeaponAttachments(uint64_t WeaponItemID); // Function WTL.WTLPlayerState.Server_RemoveAllWeaponAttachments // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bab30
	void Server_RemoveAllArmorPlates(uint64_t ArmorItemID); // Function WTL.WTLPlayerState.Server_RemoveAllArmorPlates // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2e50
	void Server_RejectBarterDealRequest(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_RejectBarterDealRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3e00
	void Server_ReceiveMailPackage(struct AWTLMailBox* MailBox, uint64_t MailPackageID); // Function WTL.WTLPlayerState.Server_ReceiveMailPackage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18afc10
	void Server_PutMoneyToClanStorage(struct AWTLNPCActor* NPC, char TabIndex, int32_t MoneyAmount, struct FString Description); // Function WTL.WTLPlayerState.Server_PutMoneyToClanStorage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b5a10
	void Server_PutItemToAccountInventory(enum class EWTLItemType ItemType, uint64_t ItemId, int32_t Count); // Function WTL.WTLPlayerState.Server_PutItemToAccountInventory // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18aec40
	void Server_PutItemOnCommission(struct AWTLNPCActor* NPC, enum class EWTLItemType ItemType, uint64_t ItemId, float Price, int32_t MinBuyCount, int32_t CommissionDays); // Function WTL.WTLPlayerState.Server_PutItemOnCommission // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b7240
	void Server_PlaceItemToStorageContentActor(struct AActor* StorageContentActor, enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count); // Function WTL.WTLPlayerState.Server_PlaceItemToStorageContentActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bd980
	void Server_PlaceItemToClanStorage(struct AWTLNPCActor* NPC, char TabIndex, enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count, struct FString Description); // Function WTL.WTLPlayerState.Server_PlaceItemToClanStorage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b5fb0
	void Server_PlaceItemInContainer(uint64_t ContainerItemID, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_PlaceItemInContainer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8510
	void Server_PickupItemFromStorageContentActor(struct AActor* StorageContentActor, enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count); // Function WTL.WTLPlayerState.Server_PickupItemFromStorageContentActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bddc0
	void Server_PickupItemFromClanStorage(struct AWTLNPCActor* NPC, char TabIndex, enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count, struct FString Description); // Function WTL.WTLPlayerState.Server_PickupItemFromClanStorage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b6410
	void Server_PickupAllItemsFromStorageContentActor(struct AActor* StorageContentActor); // Function WTL.WTLPlayerState.Server_PickupAllItemsFromStorageContentActor // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bdcb0
	void Server_OptimizeStorageItems(struct AActor* StorageContentActor); // Function WTL.WTLPlayerState.Server_OptimizeStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be320
	void Server_OptimizeItems(); // Function WTL.WTLPlayerState.Server_OptimizeItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18be430
	void Server_OptimizeClanStorageItems(struct AWTLNPCActor* NPC, char TabIndex); // Function WTL.WTLPlayerState.Server_OptimizeClanStorageItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4d20
	void Server_MoveStuffItem(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_MoveStuffItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bb0f0
	void Server_MoveStorageItemToSlot(struct AActor* StorageContentActor, enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_MoveStorageItemToSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18befc0
	void Server_MoveOrSwapFastAccessSlotItem(char FromSlotNumber, char ToSlotNumber); // Function WTL.WTLPlayerState.Server_MoveOrSwapFastAccessSlotItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bd2c0
	void Server_MoveInventoryItemToSlot(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_MoveInventoryItemToSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bf280
	void Server_MoveClanStorageItemToSlot(struct AWTLNPCActor* NPC, char TabIndex, enum class EWTLItemType ItemType, uint64_t ItemId, char NewTabIndex, char NewSlotNumber); // Function WTL.WTLPlayerState.Server_MoveClanStorageItemToSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b5640
	void Server_MoveCharacterToPointLocation(struct AWTLCharacter* Character, struct FVector PointLocation, bool UseCharacterCurrentRotation, float PointRotationYaw); // Function WTL.WTLPlayerState.Server_MoveCharacterToPointLocation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x18ac3c0
	void Server_MakeExtractFromItems(uint64_t ExtractorItemID, uint64_t ContainerItemID, struct TArray<struct FWTLExtractItemInfo> ExtractItems); // Function WTL.WTLPlayerState.Server_MakeExtractFromItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9df0
	void Server_LoadWeapon(uint64_t WeaponItemID, uint64_t AmmoItemID); // Function WTL.WTLPlayerState.Server_LoadWeapon // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bc840
	void Server_LoadMailMessageText(uint64_t MessageID); // Function WTL.WTLPlayerState.Server_LoadMailMessageText // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9300
	void Server_LeaveFaction(bool ForceExclude); // Function WTL.WTLPlayerState.Server_LeaveFaction // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b18a0
	void Server_LeaveClan(); // Function WTL.WTLPlayerState.Server_LeaveClan // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1840
	void Server_InstallPDAModuleItemID(uint64_t ModuleItemID); // Function WTL.WTLPlayerState.Server_InstallPDAModuleItemID // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b82f0
	void Server_InstallArmorPlate(uint64_t ArmorItemID, enum class EWTLArmorPlateType ArmorPlateType, uint64_t ArmorPlateItemID, bool bIsSwitchRemovedArmorPlate); // Function WTL.WTLPlayerState.Server_InstallArmorPlate // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3190
	void Server_GiveSkillToClan(char SkillID); // Function WTL.WTLPlayerState.Server_GiveSkillToClan // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9a70
	void Server_GiveSkillToCharacter(uint16_t SkillID); // Function WTL.WTLPlayerState.Server_GiveSkillToCharacter // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9ce0
	void Server_GetSkill(uint16_t SkillID); // Function WTL.WTLPlayerState.Server_GetSkill // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bbcf0
	void Server_GetMailPackageList(struct AWTLMailBox* MailBox, int32_t PageIndex); // Function WTL.WTLPlayerState.Server_GetMailPackageList // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18af970
	void Server_GetMailPackageCount(struct AWTLMailBox* MailBox); // Function WTL.WTLPlayerState.Server_GetMailPackageCount // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18afb00
	void Server_GetItemFromAccountInventory(uint64_t AccountInventoryID, int32_t Count); // Function WTL.WTLPlayerState.Server_GetItemFromAccountInventory // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18aee70
	void Server_GetFactionLeaders(); // Function WTL.WTLPlayerState.Server_GetFactionLeaders // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0710
	void Server_GetCommissionSellItemsTypesCount(struct AActor* TradingActor); // Function WTL.WTLPlayerState.Server_GetCommissionSellItemsTypesCount // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2bd0
	void Server_GetCommissionSellItemsPage(struct AActor* TradingActor, enum class EWTLItemType ItemType, int32_t PageIndex, int32_t ItemsPerPage, int32_t SortType, int32_t FilterValue1, int32_t FilterValue2); // Function WTL.WTLPlayerState.Server_GetCommissionSellItemsPage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2780
	void Server_GetClanStorageMoneyLogPage(struct AActor* ClanStorageActor, int32_t PageIndex, int32_t RecordsPerPage, int32_t SortType, enum class EWTLClanStorageMoneyOperationType OperationTypeFilter, struct FString CharacterNameFilter, int32_t TabIndexFilter); // Function WTL.WTLPlayerState.Server_GetClanStorageMoneyLogPage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1ec0
	void Server_GetClanStorageItemsLogPage(struct AActor* ClanStorageActor, int32_t PageIndex, int32_t RecordsPerPage, int32_t SortType, enum class EWTLClanStorageItemOperationType OperationTypeFilter, struct FString CharacterNameFilter, int32_t TabIndexFilter); // Function WTL.WTLPlayerState.Server_GetClanStorageItemsLogPage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2320
	void Server_ExchangeWeaponModificationParts(uint64_t ExchangeItemID, uint16_t ToPartID, int32_t Value); // Function WTL.WTLPlayerState.Server_ExchangeWeaponModificationParts // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18af2a0
	void Server_ExchangeJunkMachineCardItem(struct AWTLJunkMachineBase* JunkMachine); // Function WTL.WTLPlayerState.Server_ExchangeJunkMachineCardItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18aeb30
	void Server_ExchangeClanScore(enum class EWTLClanScoreType FromType, enum class EWTLClanScoreType ToType, int32_t Value); // Function WTL.WTLPlayerState.Server_ExchangeClanScore // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b0880
	void Server_EquipStuffItem(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_EquipStuffItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bb320
	void Server_EquipItem(enum class EWTLItemType ItemType, uint64_t ItemId, enum class EWTLBodyPart BodyPart); // Function WTL.WTLPlayerState.Server_EquipItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bb780
	void Server_EditorSetGroupLeader(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_EditorSetGroupLeader // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c0e60
	void Server_EditorSendGroupInvite(struct FString CharacterNameToInvite); // Function WTL.WTLPlayerState.Server_EditorSendGroupInvite // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c0f70
	void Server_EditorRenameGroup(struct FString NewGroupName); // Function WTL.WTLPlayerState.Server_EditorRenameGroup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c11e0
	void Server_EditorRemoveGroupMember(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_EditorRemoveGroupMember // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c0d50
	void Server_EditorLeaveGroup(); // Function WTL.WTLPlayerState.Server_EditorLeaveGroup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c1090
	void Server_EditorCreateGroup(); // Function WTL.WTLPlayerState.Server_EditorCreateGroup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18c1300
	void Server_EditorAcceptGroupInvite(uint64_t GroupId); // Function WTL.WTLPlayerState.Server_EditorAcceptGroupInvite // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x18c1fb0
	void Server_DropItemCount(enum class EWTLItemType ItemType, uint64_t ItemId, int32_t ItemCountToDrop); // Function WTL.WTLPlayerState.Server_DropItemCount // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bcf00
	void Server_DropItem(enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_DropItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bd130
	void Server_DismissCharacterFromClan(struct FString CharacterName); // Function WTL.WTLPlayerState.Server_DismissCharacterFromClan // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1720
	void Server_DestroyStash(); // Function WTL.WTLPlayerState.Server_DestroyStash // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b2ce0
	void Server_DestroyItemCount(enum class EWTLItemType ItemType, uint64_t ItemId, int32_t ItemCountToDestroy); // Function WTL.WTLPlayerState.Server_DestroyItemCount // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bcb40
	void Server_DestroyItem(enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_DestroyItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bcd70
	void Server_DestroyAllInventoryItems(); // Function WTL.WTLPlayerState.Server_DestroyAllInventoryItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bcae0
	void Server_DeleteMailMessages(struct TArray<uint64_t> MessageIDs); // Function WTL.WTLPlayerState.Server_DeleteMailMessages // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8fc0
	void Server_DeleteMailMessage(uint64_t MessageID); // Function WTL.WTLPlayerState.Server_DeleteMailMessage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b90e0
	void Server_DeleteClanPolicyGroup(uint64_t ClanPolicyGroupID); // Function WTL.WTLPlayerState.Server_DeleteClanPolicyGroup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4370
	void Server_DeleteAllMailMessages(); // Function WTL.WTLPlayerState.Server_DeleteAllMailMessages // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8f60
	void Server_CutFishWithKnife(uint64_t FishItemID, uint64_t KnifeItemID); // Function WTL.WTLPlayerState.Server_CutFishWithKnife // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ae890
	void Server_CutFish(uint64_t FishItemID); // Function WTL.WTLPlayerState.Server_CutFish // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18aea20
	void Server_CreateCraftObjectItem(struct AWTLCraftObject* CraftObject, int32_t CraftItemID); // Function WTL.WTLPlayerState.Server_CreateCraftObjectItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b7610
	void Server_CreateCraftItem(int32_t CraftItemID); // Function WTL.WTLPlayerState.Server_CreateCraftItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b77a0
	void Server_CreateClanPolicyGroup(struct FString Name); // Function WTL.WTLPlayerState.Server_CreateClanPolicyGroup // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4640
	void Server_ConsumeSteamInventoryItem(struct AWTLNPCActor* NPCActor, uint64_t UserSteamID, uint64_t ItemId); // Function WTL.WTLPlayerState.Server_ConsumeSteamInventoryItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1c90
	void Server_CombineInventoryItems(struct TArray<struct FWTLIdentityItem> Items); // Function WTL.WTLPlayerState.Server_CombineInventoryItems // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b78b0
	void Server_ClearFastAccessSlot(char SlotNumber); // Function WTL.WTLPlayerState.Server_ClearFastAccessSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bd460
	void Server_ClearCharacterSkills(); // Function WTL.WTLPlayerState.Server_ClearCharacterSkills // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9b70
	void Server_ClearCharacterMapMarkers(); // Function WTL.WTLPlayerState.Server_ClearCharacterMapMarkers // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba770
	void Server_ChargeStuffItem(uint64_t StuffItemID, uint64_t EnergySourceItemID); // Function WTL.WTLPlayerState.Server_ChargeStuffItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18ba1b0
	void Server_ChangeCharacterSexByItem(uint64_t ItemId); // Function WTL.WTLPlayerState.Server_ChangeCharacterSexByItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18af000
	void Server_ChangeCharacterSex(enum class EWTLSex NewSex); // Function WTL.WTLPlayerState.Server_ChangeCharacterSex // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b9970
	void Server_ChangeCharacterClassByItem(uint64_t ItemId, enum class EWTLCharacterClass NewClass); // Function WTL.WTLPlayerState.Server_ChangeCharacterClassByItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18af110
	void Server_CancelBarterDealRequest(); // Function WTL.WTLPlayerState.Server_CancelBarterDealRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3da0
	void Server_CancelBarterDeal(); // Function WTL.WTLPlayerState.Server_CancelBarterDeal // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3d40
	void Server_BuyItem(struct AActor* TradingActor, enum class EWTLItemType ItemType, uint64_t ItemId, int32_t Count, float ClientPrice); // Function WTL.WTLPlayerState.Server_BuyItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bc140
	void Server_BreakWeaponItemToParts(uint64_t ItemId); // Function WTL.WTLPlayerState.Server_BreakWeaponItemToParts // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18af4d0
	void Server_AssignItemToFastAccessSlot(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Server_AssignItemToFastAccessSlot // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bd750
	void Server_AssignClanPolicyGroupToClanMember(uint64_t ClanMemberID, uint64_t ClanPolicyGroupID); // Function WTL.WTLPlayerState.Server_AssignClanPolicyGroupToClanMember // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b41e0
	void Server_ApplyWeaponAttachment(uint64_t WeaponItemID, uint64_t AttachmentItemID); // Function WTL.WTLPlayerState.Server_ApplyWeaponAttachment // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18baf60
	void Server_AddTabToClanStorage(struct AWTLNPCActor* NPC); // Function WTL.WTLPlayerState.Server_AddTabToClanStorage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b4760
	void Server_AddItemToCommissionItem(struct AWTLNPCActor* NPC, enum class EWTLItemType CommissionItemType, uint64_t CommissionItemID, uint64_t NewItemID); // Function WTL.WTLPlayerState.Server_AddItemToCommissionItem // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b6870
	void Server_AddItemToBarterDeal(enum class EWTLItemType ItemType, uint64_t ItemId, int32_t Count); // Function WTL.WTLPlayerState.Server_AddItemToBarterDeal // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b39a0
	void Server_AddItemsToSteamInventory(struct AWTLNPCActor* NPCActor, uint64_t UserSteamID, struct TArray<struct FWTLIdentityItem> ItemsToAdd); // Function WTL.WTLPlayerState.Server_AddItemsToSteamInventory // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b19b0
	void Server_AddContact(uint64_t CharacterID, struct FString Name); // Function WTL.WTLPlayerState.Server_AddContact // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b8850
	void Server_AcceptClanInvite(uint16_t ClanID); // Function WTL.WTLPlayerState.Server_AcceptClanInvite // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b1360
	void Server_AcceptBarterRequest(uint64_t CharacterID); // Function WTL.WTLPlayerState.Server_AcceptBarterRequest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3f10
	void Server_AcceptBarterDeal(); // Function WTL.WTLPlayerState.Server_AcceptBarterDeal // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18b3bd0
	void Server_AbandonQuest(int32_t QuestID); // Function WTL.WTLPlayerState.Server_AbandonQuest // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x18bbbe0
	void OnRep_ShortCharacterInfo(); // Function WTL.WTLPlayerState.OnRep_ShortCharacterInfo // (Final|Native|Protected) // @ game+0x18c1c80
	void OnRep_PrivateStorages(); // Function WTL.WTLPlayerState.OnRep_PrivateStorages // (Final|Native|Protected) // @ game+0x18c1ad0
	void OnRep_MuteStateVoice(); // Function WTL.WTLPlayerState.OnRep_MuteStateVoice // (Final|Native|Protected) // @ game+0x18c1af0
	void OnRep_MuteStateChat(); // Function WTL.WTLPlayerState.OnRep_MuteStateChat // (Final|Native|Protected) // @ game+0x18c1b90
	void OnRep_MaxInventoryWeight(); // Function WTL.WTLPlayerState.OnRep_MaxInventoryWeight // (Final|Native|Protected) // @ game+0x18c1c40
	void OnRep_MailStorage(); // Function WTL.WTLPlayerState.OnRep_MailStorage // (Final|Native|Protected) // @ game+0x18c17c0
	void OnRep_LastStashLocation(); // Function WTL.WTLPlayerState.OnRep_LastStashLocation // (Final|Native|Protected) // @ game+0x18c1610
	void OnRep_LastOperationResult(); // Function WTL.WTLPlayerState.OnRep_LastOperationResult // (Final|Native|Protected) // @ game+0x18c1680
	void OnRep_LastDeathLocation(); // Function WTL.WTLPlayerState.OnRep_LastDeathLocation // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_LastCampfireLocation(); // Function WTL.WTLPlayerState.OnRep_LastCampfireLocation // (Final|Native|Protected) // @ game+0x18c1610
	void OnRep_InventoryWeight(); // Function WTL.WTLPlayerState.OnRep_InventoryWeight // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_Group(); // Function WTL.WTLPlayerState.OnRep_Group // (Final|Native|Private) // @ game+0x18c1610
	void OnRep_CraftObjectStates(); // Function WTL.WTLPlayerState.OnRep_CraftObjectStates // (Final|Native|Protected) // @ game+0x18c1860
	void OnRep_CommissionStorages(); // Function WTL.WTLPlayerState.OnRep_CommissionStorages // (Final|Native|Protected) // @ game+0x18c19a0
	void OnRep_ClanStorages(); // Function WTL.WTLPlayerState.OnRep_ClanStorages // (Final|Native|Protected) // @ game+0x18c1ab0
	void OnRep_ClanPolicyGroups(); // Function WTL.WTLPlayerState.OnRep_ClanPolicyGroups // (Final|Native|Protected) // @ game+0x18c1a50
	void OnRep_ClanMembers(); // Function WTL.WTLPlayerState.OnRep_ClanMembers // (Final|Native|Protected) // @ game+0x18c1a80
	void OnRep_CharacterInfo(); // Function WTL.WTLPlayerState.OnRep_CharacterInfo // (Final|Native|Protected) // @ game+0x18c1f90
	void OnRep_CharacterCurrentState(); // Function WTL.WTLPlayerState.OnRep_CharacterCurrentState // (Final|Native|Protected) // @ game+0x18c1cc0
	void OnRep_BarterDeal(); // Function WTL.WTLPlayerState.OnRep_BarterDeal // (Final|Native|Protected) // @ game+0x18c17f0
	void OnCharacterTeleportToFortificationCommandCoreResult(bool Result); // Function WTL.WTLPlayerState.OnCharacterTeleportToFortificationCommandCoreResult // (Final|Native|Private) // @ game+0x18abf40
	void Client_UseModificationKitResult(bool Success); // Function WTL.WTLPlayerState.Client_UseModificationKitResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18b7ca0
	void Client_UpdatePrivateStorageItem(uint32_t NPCID, uint64_t StorageID, enum class EWTLItemType ItemType, struct TArray<char> ItemData); // Function WTL.WTLPlayerState.Client_UpdatePrivateStorageItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18adf00
	void Client_UpdatePrivateStorage(uint32_t NPCID, uint64_t StorageID, char SlotCount); // Function WTL.WTLPlayerState.Client_UpdatePrivateStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ae580
	void Client_UpdatePrivateLootForStorageContentActor(struct AActor* StorageContentActor, struct FWTLStorageContent PrivateContent); // Function WTL.WTLPlayerState.Client_UpdatePrivateLootForStorageContentActor // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ac970
	void Client_UpdateInventory(); // Function WTL.WTLPlayerState.Client_UpdateInventory // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bf4b0
	void Client_UpdateFactionLeaders(struct TArray<struct FWTLFactionLeaderRecord> Leaders); // Function WTL.WTLPlayerState.Client_UpdateFactionLeaders // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18b0580
	void Client_UpdateClanStorageTab(int32_t NPCID, char TabIndex, char ImageIndex, struct FString TabName, struct FString Description, struct TArray<uint64_t> CanPutClanPolicyGroups, struct TArray<uint64_t> CanTakeClanPolicyGroups); // Function WTL.WTLPlayerState.Client_UpdateClanStorageTab // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bfc90
	void Client_UpdateClanStorageMoney(int32_t NPCID, char TabIndex, uint32_t MoneyAmount); // Function WTL.WTLPlayerState.Client_UpdateClanStorageMoney // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c00f0
	void Client_UpdateClanStorageItem(int32_t NPCID, char TabIndex, enum class EWTLItemType ItemType, struct TArray<char> ItemData); // Function WTL.WTLPlayerState.Client_UpdateClanStorageItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c0550
	void Client_ShowWarningText(struct FText WarningText); // Function WTL.WTLPlayerState.Client_ShowWarningText // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bfa90
	void Client_ShowWarning(enum class EWTLWarningTitleWidgetType WarningTitleWidgetType); // Function WTL.WTLPlayerState.Client_ShowWarning // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bfbc0
	void Client_ShowTutorialMessagesByIDs(struct TArray<uint16_t> TutorialMessagesIDs, bool IsIgnoreTutorialEnabling); // Function WTL.WTLPlayerState.Client_ShowTutorialMessagesByIDs // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bf7b0
	void Client_ShowTutorialMessages(struct TArray<enum class EWTLTutorialMessage> TutorialMessages, bool IsIgnoreTutorialEnabling); // Function WTL.WTLPlayerState.Client_ShowTutorialMessages // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bf4d0
	void Client_ShowTutorialMessageByID(uint16_t TutorialMessageID, bool IsIgnoreTutorialEnabling); // Function WTL.WTLPlayerState.Client_ShowTutorialMessageByID // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bf930
	void Client_ShowTutorialMessage(enum class EWTLTutorialMessage TutorialMessage, bool IsIgnoreTutorialEnabling); // Function WTL.WTLPlayerState.Client_ShowTutorialMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bf650
	void Client_SetQuestStates(struct TArray<struct FWTLCharacterQuestState> QuestStates); // Function WTL.WTLPlayerState.Client_SetQuestStates // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ad420
	void Client_SetQuestState(struct FWTLCharacterQuestState QuestState); // Function WTL.WTLPlayerState.Client_SetQuestState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ad2d0
	void Client_SetQuestActive(uint32_t QuestID, bool Active); // Function WTL.WTLPlayerState.Client_SetQuestActive // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ad170
	void Client_RemoveQuestStates(struct TArray<uint32_t> QuestIDs); // Function WTL.WTLPlayerState.Client_RemoveQuestStates // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18acfa0
	void Client_RemoveQuestState(uint32_t QuestID); // Function WTL.WTLPlayerState.Client_RemoveQuestState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ad090
	void Client_RemovePrivateStorageItem(uint32_t NPCID, uint64_t StorageID, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Client_RemovePrivateStorageItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18adc80
	void Client_RemovePrivateStorage(uint32_t NPCID, uint64_t StorageID); // Function WTL.WTLPlayerState.Client_RemovePrivateStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ae420
	void Client_RemoveInventoryItems(struct TArray<struct FWTLIdentityItem> Items); // Function WTL.WTLPlayerState.Client_RemoveInventoryItems // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x18c1360
	void Client_RemoveClanStorageItem(int32_t NPCID, char TabIndex, enum class EWTLItemType ItemType, uint64_t ItemId); // Function WTL.WTLPlayerState.Client_RemoveClanStorageItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c02d0
	void Client_RemoveClanStorage(int32_t NPCID); // Function WTL.WTLPlayerState.Client_RemoveClanStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c0a90
	void Client_OnMailPackageSent(); // Function WTL.WTLPlayerState.Client_OnMailPackageSent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18af950
	void Client_OnMailPackageReceived(uint64_t MailPackageID); // Function WTL.WTLPlayerState.Client_OnMailPackageReceived // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18af5e0
	void Client_OnClanInviteReceived(uint16_t ClanID, struct FString CharacterName); // Function WTL.WTLPlayerState.Client_OnClanInviteReceived // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18b1470
	void Client_OnBuyItemResult(bool Result, enum class EWTLCannotBuyItemReason Reason); // Function WTL.WTLPlayerState.Client_OnBuyItemResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bbfc0
	void Client_OnAssignedItemToFastAccessSlot(enum class EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // Function WTL.WTLPlayerState.Client_OnAssignedItemToFastAccessSlot // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18bd560
	void Client_MailPackageListResult(struct TArray<struct FWTLMailPackageRecord> MailPackages); // Function WTL.WTLPlayerState.Client_MailPackageListResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18af6c0
	void Client_MailPackageCountResult(int32_t Count); // Function WTL.WTLPlayerState.Client_MailPackageCountResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18af870
	void Client_EditorOnGroupRenamed(struct FString NewGroupName); // Function WTL.WTLPlayerState.Client_EditorOnGroupRenamed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c10f0
	void Client_ClearQuests(); // Function WTL.WTLPlayerState.Client_ClearQuests // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18acf80
	void Client_ApplyPrivateStorageDelta(uint32_t NPCID, uint64_t StorageID, struct TArray<struct FWTLCharacterInventoryDeltaRecord> Records); // Function WTL.WTLPlayerState.Client_ApplyPrivateStorageDelta // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ada50
	void Client_ApplyInventoryDelta(struct TArray<struct FWTLCharacterInventoryDeltaRecord> Records); // Function WTL.WTLPlayerState.Client_ApplyInventoryDelta // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x18c14f0
	void Client_AfterQuestObjectSpawnerUse(struct AWTLQuestObjectSpawner* QuestObject); // Function WTL.WTLPlayerState.Client_AfterQuestObjectSpawnerUse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18acea0
	void Client_AddPrivateStorageItem(uint32_t NPCID, uint64_t StorageID, enum class EWTLItemType ItemType, struct TArray<char> ItemData); // Function WTL.WTLPlayerState.Client_AddPrivateStorageItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ae190
	void Client_AddPrivateStorage(struct FWTLPrivateStorage PrivateStorage); // Function WTL.WTLPlayerState.Client_AddPrivateStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18ae770
	void Client_AddMapMarker(int32_t LocationID, char Type, struct FString Color, struct FVector Position, struct FString Name, bool ShowOnMinimap); // Function WTL.WTLPlayerState.Client_AddMapMarker // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x18ad690
	void Client_AddClanStorageItem(int32_t NPCID, char TabIndex, enum class EWTLItemType ItemType, struct TArray<char> ItemData); // Function WTL.WTLPlayerState.Client_AddClanStorageItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c07f0
	void Client_AddClanStorage(struct FWTLClanStorage ClanStorage); // Function WTL.WTLPlayerState.Client_AddClanStorage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x18c0b70
};

// Class WTL.WTLPortal
// Size: 0x2b0 (Inherited: 0x220)
struct AWTLPortal : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	bool Active; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct TArray<enum class EWTLFaction> AllowedFactions; // 0x240(0x10)
	struct USphereComponent* SphereComponent; // 0x250(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x258(0x08)
	struct UNavModifierComponent* NavModifierComponent; // 0x260(0x08)
	int32_t LocationID; // 0x268(0x04)
	int32_t ID; // 0x26c(0x04)
	bool AlwaysVisibleOnMap; // 0x270(0x01)
	bool ExitPortal; // 0x271(0x01)
	char pad_272[0x2]; // 0x272(0x02)
	int32_t RedirectSafeZone; // 0x274(0x04)
	char MinCharacterLevel; // 0x278(0x01)
	char MaxCharacterLevel; // 0x279(0x01)
	char pad_27A[0x26]; // 0x27a(0x26)
	struct TArray<struct AWTLPlayerStart*> m_PlayerStarts; // 0x2a0(0x10)

	void OnUsePortal(struct AWTLCharacter* Character); // Function WTL.WTLPortal.OnUsePortal // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void MoveToLocation(struct AWTLCharacter* Character, enum class EWTLPortalActionResult& Result); // Function WTL.WTLPortal.MoveToLocation // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18e29f0
};

// Class WTL.WTLPortalStation
// Size: 0x3a0 (Inherited: 0x2b0)
struct AWTLPortalStation : AWTLPortal {
	struct TArray<int32_t> EnergyModuleIDs; // 0x2b0(0x10)
	struct TArray<struct FWTLPortalStationWay> Ways; // 0x2c0(0x10)
	float RequestLifespan; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct TSoftObjectPtr<UFMODEvent> PortalFXEvent; // 0x2d8(0x28)
	char pad_300[0x88]; // 0x300(0x88)
	struct UBoxComponent* PortalZoneComponent; // 0x388(0x08)
	struct UParticleSystemComponent* PortalFXComponent; // 0x390(0x08)
	struct UFMODAudioComponent* PortalAudioEffectsComponent; // 0x398(0x08)

	void TravelCharacterByWay(struct AWTLCharacter* Character, int32_t WayIndex); // Function WTL.WTLPortalStation.TravelCharacterByWay // (Final|Native|Public|BlueprintCallable) // @ game+0x18e2f90
	void OnPortalZoneBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLPortalStation.OnPortalZoneBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x18e34d0
	void K2_SubmitTeleportRequest(int32_t WayIndex); // Function WTL.WTLPortalStation.K2_SubmitTeleportRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x18e2dc0
	void K2_RejectTeleportRequest(); // Function WTL.WTLPortalStation.K2_RejectTeleportRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x18e2da0
	bool GetRouteIsAvailable(int32_t WayIndex); // Function WTL.WTLPortalStation.GetRouteIsAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x18e2e90
	int32_t GetMaxEnergyConsumption(); // Function WTL.WTLPortalStation.GetMaxEnergyConsumption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18e3340
	int32_t GetEnergyConsumptionForWay(struct AWTLCharacter* Character, int32_t WayIndex); // Function WTL.WTLPortalStation.GetEnergyConsumptionForWay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18e3360
	bool CharacterCanTravelByWay(struct AWTLCharacter* Character, int32_t WayIndex, struct FText& Description); // Function WTL.WTLPortalStation.CharacterCanTravelByWay // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x18e30f0
	void BPOnUse(struct AWTLCharacter* Character); // Function WTL.WTLPortalStation.BPOnUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnTeleportWaySubmitted(struct FWTLPortalStationWay SelectedWay, float Timeout); // Function WTL.WTLPortalStation.BPOnTeleportWaySubmitted // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnTeleportWayRejected(); // Function WTL.WTLPortalStation.BPOnTeleportWayRejected // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLPortalStationPanel
// Size: 0x318 (Inherited: 0x260)
struct UWTLPortalStationPanel : UUserWidget {
	char pad_260[0x10]; // 0x260(0x10)
	struct UTextBlock* tbDestinationInfo; // 0x270(0x08)
	struct UTextBlock* tbDestinationName; // 0x278(0x08)
	struct UTextBlock* tbCountDown; // 0x280(0x08)
	struct UTextBlock* tbErrorInfo; // 0x288(0x08)
	struct UButton* btnTeleport; // 0x290(0x08)
	struct UButton* btnRejectTeleport; // 0x298(0x08)
	struct UButton* btnErrorPanelBack; // 0x2a0(0x08)
	struct UButton* btnUnavailableRoutePanelBack; // 0x2a8(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay0; // 0x2b0(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay1; // 0x2b8(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay2; // 0x2c0(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay3; // 0x2c8(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay4; // 0x2d0(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay5; // 0x2d8(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay6; // 0x2e0(0x08)
	struct UWTLPortalStationPanelWayButton* btnWay7; // 0x2e8(0x08)
	struct UProgressBar* pbEnergyConsumption; // 0x2f0(0x08)
	struct UTextBlock* tbEnergyForTravel; // 0x2f8(0x08)
	struct UTextBlock* tbEnergyConsumptionLabel; // 0x300(0x08)
	struct UWidgetSwitcher* wsPageSwitcher; // 0x308(0x08)
	struct UUserWidget* WayButtonWidgetClass; // 0x310(0x08)

	void SubmitWay(); // Function WTL.WTLPortalStationPanel.SubmitWay // (Final|Native|Public) // @ game+0x18e3b90
	void RejectWay(); // Function WTL.WTLPortalStationPanel.RejectWay // (Final|Native|Public) // @ game+0x18e3b50
	void OnClientRequestTimeout(); // Function WTL.WTLPortalStationPanel.OnClientRequestTimeout // (Final|Native|Public) // @ game+0x18e3b00
	void OnCanNotTeleportCharacter(struct FText ErrorInfo); // Function WTL.WTLPortalStationPanel.OnCanNotTeleportCharacter // (Final|Native|Private) // @ game+0x18e3db0
	void Init(struct TArray<struct FWTLPortalStationWay>& Ways, struct AWTLPortalStation* PortalStation); // Function WTL.WTLPortalStationPanel.Init // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x18e3bd0
	struct AWTLPortalStation* GetPortalStation(); // Function WTL.WTLPortalStationPanel.GetPortalStation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x18e3bb0
	void CloseUnavailableRouteMessage(); // Function WTL.WTLPortalStationPanel.CloseUnavailableRouteMessage // (Final|Native|Public) // @ game+0x18e3b00
	void CloseErrorMessage(); // Function WTL.WTLPortalStationPanel.CloseErrorMessage // (Final|Native|Public) // @ game+0x18e3b00
};

// Class WTL.WTLPortalStationPanelWayButton
// Size: 0x278 (Inherited: 0x260)
struct UWTLPortalStationPanelWayButton : UUserWidget {
	int32_t PortalID; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct UButton* btnTeleportWay; // 0x268(0x08)
	struct UTextBlock* tbWayName; // 0x270(0x08)

	void OnButtonPressed(); // Function WTL.WTLPortalStationPanelWayButton.OnButtonPressed // (Final|Native|Private) // @ game+0x18e4190
};

// Class WTL.WTLStash
// Size: 0x498 (Inherited: 0x398)
struct AWTLStash : AWTLPlaceableStuff {
	char pad_398[0x10]; // 0x398(0x10)
	struct FWTLStorageContent m_StorageContent; // 0x3a8(0xa8)
	char pad_450[0x28]; // 0x450(0x28)
	struct UStaticMeshComponent* Mesh; // 0x478(0x08)
	enum class EWTLLocationStorageType LocationStorageType; // 0x480(0x01)
	bool AutoRemoveIfEmpty; // 0x481(0x01)
	char pad_482[0x6]; // 0x482(0x06)
	struct TArray<struct FWTLBPIdentityItemType> GiftItemsInfo; // 0x488(0x10)

	void OnStorageContentChanged(struct FWTLStorageContent& StorageContent); // Function WTL.WTLStash.OnStorageContentChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	void OnRep_StorageContent(); // Function WTL.WTLStash.OnRep_StorageContent // (Final|Native|Private) // @ game+0x192bab0
};

// Class WTL.WTLPremiumStash
// Size: 0x4a0 (Inherited: 0x498)
struct AWTLPremiumStash : AWTLStash {
	char pad_498[0x8]; // 0x498(0x08)
};

// Class WTL.WTLProjectileLauncher
// Size: 0x438 (Inherited: 0x3d8)
struct AWTLProjectileLauncher : AWTLWeapon {
	char pad_3D8[0x8]; // 0x3d8(0x08)
	float ThrowRandomConeAngle; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct FItemAnimationSet ThrowSequenceSet; // 0x3e8(0x18)
	struct TSoftClassPtr<UObject> ProjectileClass; // 0x400(0x28)
	float MainThrowSpeed; // 0x428(0x04)
	struct FRotator MainThrowRotationOffset; // 0x42c(0x0c)

	void Server_StopUse(); // Function WTL.WTLProjectileLauncher.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db590
	void Server_StartUse(); // Function WTL.WTLProjectileLauncher.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db5c0
	void NetMulticast_OnStopUse(); // Function WTL.WTLProjectileLauncher.NetMulticast_OnStopUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x18e4530
	void NetMulticast_OnStartUse(); // Function WTL.WTLProjectileLauncher.NetMulticast_OnStartUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x18e4550
};

// Class WTL.WTLProjectileMovementComponent
// Size: 0x1e0 (Inherited: 0x1d0)
struct UWTLProjectileMovementComponent : UProjectileMovementComponent {
	bool bHandleDeflection; // 0x1d0(0x01)
	char pad_1D1[0xf]; // 0x1d1(0x0f)
};

// Class WTL.WTLQuestMiningZone
// Size: 0x2f8 (Inherited: 0x2f0)
struct AWTLQuestMiningZone : AWTLMiningZone {
	int32_t QuestID; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class WTL.WTLQuestObject
// Size: 0x230 (Inherited: 0x220)
struct AWTLQuestObject : AActor {
	struct USphereComponent* SphereComponent; // 0x220(0x08)
	char m_State; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)

	void ShowCharacterActionTimerWidget(struct AWTLCharacter* Character, float Timeout, enum class EWTLActionTimerWidgetType Type, enum class EWTLCountdownSliderWidgetFillingType Direction); // Function WTL.WTLQuestObject.ShowCharacterActionTimerWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x19181e0
	void SetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState State, enum class EWTLQuestCheckResult& Result); // Function WTL.WTLQuestObject.SetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918f70
	void OnRep_ChangeState(); // Function WTL.WTLQuestObject.OnRep_ChangeState // (Final|Native|Public) // @ game+0x19195b0
	void OnChangeState(char Value); // Function WTL.WTLQuestObject.OnChangeState // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void HideCharacterActionTimerWidget(struct AWTLCharacter* Character, bool Success); // Function WTL.WTLQuestObject.HideCharacterActionTimerWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1918060
	void GetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState& QuestState); // Function WTL.WTLQuestObject.GetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x19191d0
	void CharacterTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestCheckResult& Result); // Function WTL.WTLQuestObject.CharacterTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918490
	void CharacterCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestCheckResult& Result); // Function WTL.WTLQuestObject.CharacterCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918490
	void CharacterCanTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestCheckResult& Result); // Function WTL.WTLQuestObject.CharacterCanTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918880
	void CharacterCanCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestCheckResult& Result); // Function WTL.WTLQuestObject.CharacterCanCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918670
};

// Class WTL.WTLQuestObjectAchievement
// Size: 0x238 (Inherited: 0x220)
struct AWTLQuestObjectAchievement : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct TArray<struct FWTLQuestAchievements> QuestAchievements; // 0x228(0x10)

	void UpdateMeshAchievement(); // Function WTL.WTLQuestObjectAchievement.UpdateMeshAchievement // (Final|Native|Public|BlueprintCallable) // @ game+0x1919ba0
	void HideAllMeshes(); // Function WTL.WTLQuestObjectAchievement.HideAllMeshes // (Final|Native|Public|BlueprintCallable) // @ game+0x1919b80
	void GetQuestStates(struct TArray<struct FWTLQuestState>& OutQuestStates); // Function WTL.WTLQuestObjectAchievement.GetQuestStates // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1919bc0
};

// Class WTL.WTLQuestObjectForAction
// Size: 0x268 (Inherited: 0x260)
struct AWTLQuestObjectForAction : AWTLInteractiveObject {
	char pad_260[0x8]; // 0x260(0x08)

	void SetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState State, enum class EWTLObjFAActionResult& Result); // Function WTL.WTLQuestObjectForAction.SetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1868ee0
	void GetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState& QuestState); // Function WTL.WTLQuestObjectForAction.GetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x191a270
	void CharacterCanTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLObjFACheckResult& Result); // Function WTL.WTLQuestObjectForAction.CharacterCanTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x191a820
	void CharacterCanCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLObjFACheckResult& Result); // Function WTL.WTLQuestObjectForAction.CharacterCanCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x191a620
};

// Class WTL.WTLQuestObjectSpawner
// Size: 0x2f8 (Inherited: 0x260)
struct AWTLQuestObjectSpawner : AWTLInteractiveObject {
	char pad_260[0x28]; // 0x260(0x28)
	struct USceneComponent* ObjectRootComponent; // 0x288(0x08)
	struct UBoxComponent* BoxComponent; // 0x290(0x08)
	struct UStaticMeshComponent* Mesh; // 0x298(0x08)
	struct FText DisplayName; // 0x2a0(0x18)
	struct TArray<int32_t> QuestIDs; // 0x2b8(0x10)
	enum class EWTLItemType ItemType; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	int32_t ItemTypeID; // 0x2cc(0x04)
	int32_t MinCount; // 0x2d0(0x04)
	int32_t MaxCount; // 0x2d4(0x04)
	int32_t MinCondition; // 0x2d8(0x04)
	int32_t MaxCondition; // 0x2dc(0x04)
	float MinSpawnDelay; // 0x2e0(0x04)
	float MaxSpawnDelay; // 0x2e4(0x04)
	bool AllowTakeOnlyOnce; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	int32_t Count; // 0x2ec(0x04)
	int32_t Condition; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)

	void OnRep_CurrentState(); // Function WTL.WTLQuestObjectSpawner.OnRep_CurrentState // (Final|Native|Private) // @ game+0x191b270
	void NetMulticast_CharacterUseItem(uint64_t CharacterID); // Function WTL.WTLQuestObjectSpawner.NetMulticast_CharacterUseItem // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x191b0d0
	void BPOnTakeItem(struct AWTLCharacter* Character); // Function WTL.WTLQuestObjectSpawner.BPOnTakeItem // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnStartInteraction(struct AWTLCharacter* Character); // Function WTL.WTLQuestObjectSpawner.BPOnStartInteraction // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPOnFinishInteraction(struct AWTLCharacter* Character, bool Success); // Function WTL.WTLQuestObjectSpawner.BPOnFinishInteraction // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool BPIsRelevantForCharacterQuestState(struct AWTLCharacter* Character); // Function WTL.WTLQuestObjectSpawner.BPIsRelevantForCharacterQuestState // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x191b000
};

// Class WTL.WTLQuestSystem
// Size: 0x90 (Inherited: 0x28)
struct UWTLQuestSystem : UObject {
	char pad_28[0x68]; // 0x28(0x68)
};

// Class WTL.WTLQuestTutorialVolume
// Size: 0x280 (Inherited: 0x258)
struct AWTLQuestTutorialVolume : AVolume {
	int32_t QuestID; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct TArray<int32_t> TutorialMessageIDs; // 0x260(0x10)
	struct TArray<enum class EWTLTutorialMessage> TutorialMessages; // 0x270(0x10)

	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLQuestTutorialVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
};

// Class WTL.WTLRadialForceComponent
// Size: 0x230 (Inherited: 0x230)
struct UWTLRadialForceComponent : URadialForceComponent {

	void AddPhysicsImpusle(); // Function WTL.WTLRadialForceComponent.AddPhysicsImpusle // (Final|Native|Public|BlueprintCallable) // @ game+0x191bb60
	void AddGravity(float RadiusXY, float RadiusZ, float MaxValueXY, float MinValueXY, float ValueZ, float MaxMonsterMass); // Function WTL.WTLRadialForceComponent.AddGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x191b7d0
};

// Class WTL.WTLRadialMenuInstigatorInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLRadialMenuInstigatorInterface : UInterface {

	void GenerateRadialMenuButtons(struct TArray<struct FWTLUseMenuButtonInfo>& ButtonsInfoArray); // Function WTL.WTLRadialMenuInstigatorInterface.GenerateRadialMenuButtons // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x191bc50
};

// Class WTL.WTLRadio
// Size: 0x230 (Inherited: 0x220)
struct AWTLRadio : AActor {
	struct UStaticMeshComponent* Mesh; // 0x220(0x08)
	struct UFMODAudioComponent* AudioComponent; // 0x228(0x08)
};

// Class WTL.WTLRadioBomb
// Size: 0x300 (Inherited: 0x268)
struct AWTLRadioBomb : AWTLTacticalStuff {
	char pad_268[0x8]; // 0x268(0x08)
	bool IsDebug; // 0x270(0x01)
	char pad_271[0x7]; // 0x271(0x07)
	struct UStaticMeshComponent* Mesh; // 0x278(0x08)
	struct UStaticMeshComponent* DamageZoneMesh; // 0x280(0x08)
	struct TSoftClassPtr<UObject> ExplosionFX; // 0x288(0x28)
	float HearingDamageDuration; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct AWTLDeminingActivity* DeminingActivityAsset; // 0x2b8(0x08)
	struct FRotator ExplosionAdditionalRotation; // 0x2c0(0x0c)
	char FriendBombOutline; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	struct AWTLDeminingActivity* m_Activity; // 0x2d0(0x08)
	bool m_bSpawnExplosion; // 0x2d8(0x01)
	bool m_bActivated; // 0x2d9(0x01)
	bool m_bCharacterInPVP; // 0x2da(0x01)
	char pad_2DB[0x9]; // 0x2db(0x09)
	enum class EWTLFaction m_Faction; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct FString m_OwnerName; // 0x2e8(0x10)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void OnRep_SpawnExplosion(); // Function WTL.WTLRadioBomb.OnRep_SpawnExplosion // (Final|Native|Private) // @ game+0x191c340
	void OnRep_Activated(); // Function WTL.WTLRadioBomb.OnRep_Activated // (Final|Native|Private) // @ game+0x191c1c0
	void OnRemainingTimerChanged(float Time); // Function WTL.WTLRadioBomb.OnRemainingTimerChanged // (Final|Native|Private) // @ game+0x191c230
	void OnGiveDeminedItemToCharacter(struct AWTLCharacter* Character); // Function WTL.WTLRadioBomb.OnGiveDeminedItemToCharacter // (Final|Native|Private) // @ game+0x17941a0
	void OnActivate(); // Function WTL.WTLRadioBomb.OnActivate // (Final|Native|Public) // @ game+0xe77850
	void K2_ProccessExplosion(); // Function WTL.WTLRadioBomb.K2_ProccessExplosion // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnActivated(); // Function WTL.WTLRadioBomb.K2_OnActivated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLRainRemoverVolume
// Size: 0x260 (Inherited: 0x258)
struct AWTLRainRemoverVolume : AVolume {
	enum class EWTLRainAudioRemoveMethod AudioRemoveMethod; // 0x258(0x01)
	bool bRemoveParticles; // 0x259(0x01)
	char pad_25A[0x6]; // 0x25a(0x06)
};

// Class WTL.WTLRandomPointsMiningZone
// Size: 0x348 (Inherited: 0x2f0)
struct AWTLRandomPointsMiningZone : AWTLMiningZone {
	char pad_2F0[0x38]; // 0x2f0(0x38)
	int32_t MiningPointsCount; // 0x328(0x04)
	float GeneratedPointsCountMultiplier; // 0x32c(0x04)
	float MinPointGenerationTimeout; // 0x330(0x04)
	float MaxPointGenerationTimeout; // 0x334(0x04)
	float MinPointCapacity; // 0x338(0x04)
	float MaxPointCapacity; // 0x33c(0x04)
	float MinPointRadius; // 0x340(0x04)
	float MaxPointRadius; // 0x344(0x04)
};

// Class WTL.WTLRangedWeapon
// Size: 0xa00 (Inherited: 0x3d8)
struct AWTLRangedWeapon : AWTLWeapon {
	enum class EWTLWeaponState m_CurrentState; // 0x3d8(0x01)
	char pad_3D9[0xf]; // 0x3d9(0x0f)
	int32_t m_CurrentFireModeIndex; // 0x3e8(0x04)
	char pad_3EC[0x98]; // 0x3ec(0x98)
	bool m_InterruptLoadingReceived; // 0x484(0x01)
	char pad_485[0x103]; // 0x485(0x103)
	uint16_t m_MuzzleAttachmentTypeID; // 0x588(0x02)
	uint16_t m_FlashlightAttachmentTypeID; // 0x58a(0x02)
	uint16_t m_ScopeAttachmentTypeID; // 0x58c(0x02)
	char m_CustomizationScalar; // 0x58e(0x01)
	char m_CustomizationColor; // 0x58f(0x01)
	uint16_t m_CurrentAmmoID; // 0x590(0x02)
	char m_HandlingAnimationType; // 0x592(0x01)
	char pad_593[0x45]; // 0x593(0x45)
	struct UWTLWeaponAttachment* MuzzleAttachment; // 0x5d8(0x08)
	struct UStaticMeshComponent* MuzzleMount; // 0x5e0(0x08)
	struct UWTLWeaponAttachment* FlashlightAttachment; // 0x5e8(0x08)
	struct UStaticMeshComponent* FlashlightMount; // 0x5f0(0x08)
	struct UWTLWeaponAttachment* ScopeAttachment; // 0x5f8(0x08)
	struct UStaticMeshComponent* ScopeMount; // 0x600(0x08)
	struct UFMODAudioComponent* AutomaticFireAudioComponent; // 0x608(0x08)
	struct UParticleSystemComponent* AmmoCaseParticleComponent; // 0x610(0x08)
	struct UMaterialBillboardComponent* ScopeFlareComponent; // 0x618(0x08)
	struct UMaterialInterface* m_FlareMaterial; // 0x620(0x08)
	struct UCurveFloat* m_FlareIntensityDetectionCurve; // 0x628(0x08)
	struct UMaterialInstanceDynamic* m_FlareMaterialInstance; // 0x630(0x08)
	struct TArray<enum class EWTLFireMode> FireModes; // 0x638(0x10)
	float StandSpreadMultiplier; // 0x648(0x04)
	float CrouchSpreadMultiplier; // 0x64c(0x04)
	float ProneSpreadMultiplier; // 0x650(0x04)
	float WalkSpreadMultiplier; // 0x654(0x04)
	float SprintSpreadMultiplier; // 0x658(0x04)
	float AimSpreadMultiplier; // 0x65c(0x04)
	bool CanInterruptLoading; // 0x660(0x01)
	char pad_661[0x3]; // 0x661(0x03)
	int32_t PreInstalledScopeStuffID; // 0x664(0x04)
	int32_t PreInstalledMuzzleStuffID; // 0x668(0x04)
	int32_t PreInstalledFlashlightStuffID; // 0x66c(0x04)
	float BaseRecoilTranslation; // 0x670(0x04)
	float AdditionalRecoilTranslation; // 0x674(0x04)
	struct FRotator MinRecoilRotation; // 0x678(0x0c)
	struct FRotator MaxRecoilRotation; // 0x684(0x0c)
	float RecoilTranslationInterpolateSpeed; // 0x690(0x04)
	float RecoilRotationInterpolateSpeed; // 0x694(0x04)
	float AimingRecoilTranslationInterpolateSpeed; // 0x698(0x04)
	float AimingRecoilRotationInterpolateSpeed; // 0x69c(0x04)
	float AimingRecoilMultiplier; // 0x6a0(0x04)
	float CrouchRecoilMultiplier; // 0x6a4(0x04)
	float ProneRecoilMultiplier; // 0x6a8(0x04)
	float RecoilSafePauseBetweenUse; // 0x6ac(0x04)
	float MaxRecoilAccuracyDelta; // 0x6b0(0x04)
	char pad_6B4[0x4]; // 0x6b4(0x04)
	struct TSoftClassPtr<UObject> RecoilCameraShake; // 0x6b8(0x28)
	float RecoilCameraShakeScale; // 0x6e0(0x04)
	char pad_6E4[0x4]; // 0x6e4(0x04)
	struct UCurveVector* RecoilCurve; // 0x6e8(0x08)
	float RecoilValueMultiplierMin; // 0x6f0(0x04)
	float RecoilValueMultiplierMax; // 0x6f4(0x04)
	float RecoilSpeedMultiplier; // 0x6f8(0x04)
	bool NeedToReplaceReloadMontage; // 0x6fc(0x01)
	bool CrosshairIsAlwaysHidden; // 0x6fd(0x01)
	char pad_6FE[0x2]; // 0x6fe(0x02)
	struct FRotator AdditionalSpawnRotation; // 0x700(0x0c)
	char pad_70C[0x1c]; // 0x70c(0x1c)
	struct FItemAnimationSet FireSequenceSet; // 0x728(0x18)
	struct FItemAnimationSet LastFireSequenceSet; // 0x740(0x18)
	struct FItemAnimationSet ReloadSequenceSet; // 0x758(0x18)
	struct FItemAnimationSet ProReloadSequenceSet; // 0x770(0x18)
	struct FItemAnimationSet LoadSequenceSet; // 0x788(0x18)
	struct FItemAnimationSet ProLoadSequenceSet; // 0x7a0(0x18)
	struct TSoftObjectPtr<UFMODEvent> NormalFireSoundEvent; // 0x7b8(0x28)
	float NormalFireSoundNoiseRadius; // 0x7e0(0x04)
	float NormalFireSoundNoiseLoudness; // 0x7e4(0x04)
	struct FName NormalFireSoundNoiseName; // 0x7e8(0x08)
	struct TSoftObjectPtr<UParticleSystem> NormalFireParticles; // 0x7f0(0x28)
	struct FVector NormalFireParticlesScale; // 0x818(0x0c)
	char pad_824[0x4]; // 0x824(0x04)
	struct TSoftObjectPtr<UFMODEvent> MuzzleBrakeFireSoundEvent; // 0x828(0x28)
	float MuzzleBrakeFireSoundNoiseRadius; // 0x850(0x04)
	float MuzzleBrakeFireSoundNoiseLoudness; // 0x854(0x04)
	struct FName MuzzleBrakeFireSoundNoiseName; // 0x858(0x08)
	struct TSoftObjectPtr<UParticleSystem> MuzzleBrakeFireParticles; // 0x860(0x28)
	struct FVector MuzzleBrakeFireParticlesScale; // 0x888(0x0c)
	char pad_894[0x4]; // 0x894(0x04)
	struct TSoftObjectPtr<UFMODEvent> SilencerFireSoundEvent; // 0x898(0x28)
	struct TSoftObjectPtr<UFMODEvent> LastShotsAdditionalSoundEvent; // 0x8c0(0x28)
	float SilencerFireSoundNoiseRadius; // 0x8e8(0x04)
	float SilencerFireSoundNoiseLoudness; // 0x8ec(0x04)
	struct FName SilencerFireSoundNoiseName; // 0x8f0(0x08)
	struct TSoftObjectPtr<UParticleSystem> SilencerFireParticles; // 0x8f8(0x28)
	struct FVector SilencerFireParticlesScale; // 0x920(0x0c)
	char pad_92C[0x4]; // 0x92c(0x04)
	struct TSoftObjectPtr<UFMODEvent> DryFireSoundEvent; // 0x930(0x28)
	struct TSoftObjectPtr<UFMODEvent> AutomaticFireSoundEvent; // 0x958(0x28)
	float AimingFOV; // 0x980(0x04)
	float AimingTurnRateMultiplier; // 0x984(0x04)
	float AimingLookUpRateMultiplier; // 0x988(0x04)
	float NormalIdentificationTraceRange; // 0x98c(0x04)
	float AimingIdentificationTraceRange; // 0x990(0x04)
	float MaxVerticalHandsShaking; // 0x994(0x04)
	float MaxHorizontalHandsShaking; // 0x998(0x04)
	float HandsShakingSpeed; // 0x99c(0x04)
	float VingettePerShootAmount; // 0x9a0(0x04)
	float VingetteLimit; // 0x9a4(0x04)
	struct FVector NormalCameraOffsetMale; // 0x9a8(0x0c)
	struct FVector AimingCameraOffsetMale; // 0x9b4(0x0c)
	struct FVector NormalCameraOffsetFemale; // 0x9c0(0x0c)
	struct FVector AimingCameraOffsetFemale; // 0x9cc(0x0c)
	struct FVector AimingHandsTranslationMale; // 0x9d8(0x0c)
	struct FVector AimingHandsTranslationFemale; // 0x9e4(0x0c)
	bool UseOnlyFullReloading; // 0x9f0(0x01)
	char pad_9F1[0xf]; // 0x9f1(0x0f)

	void Server_StopUseNew(char DoneActionCount, char MagazineAmmoCount); // Function WTL.WTLRangedWeapon.Server_StopUseNew // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191e050
	void Server_StopUse(); // Function WTL.WTLRangedWeapon.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191e1f0
	void Server_StartUse(); // Function WTL.WTLRangedWeapon.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191e250
	void Server_SpawnGrenadeLauncherProjectile(struct FTransform SpawnTransform); // Function WTL.WTLRangedWeapon.Server_SpawnGrenadeLauncherProjectile // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate) // @ game+0x191d240
	void Server_SetFireModeIndex(char FireModeIndex); // Function WTL.WTLRangedWeapon.Server_SetFireModeIndex // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x191cfe0
	void Server_SetAmmoCount(char ClientAmmoCount); // Function WTL.WTLRangedWeapon.Server_SetAmmoCount // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191ddd0
	void Server_OnUnload(); // Function WTL.WTLRangedWeapon.Server_OnUnload // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191d5e0
	void Server_OnReload(bool bChangeAmmoItem, char ClientMagazineAmmoCount); // Function WTL.WTLRangedWeapon.Server_OnReload // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191d640
	void Server_OnLoad(uint64_t AmmoItemID); // Function WTL.WTLRangedWeapon.Server_OnLoad // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191d4d0
	void Server_InterruptLoading(); // Function WTL.WTLRangedWeapon.Server_InterruptLoading // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191d450
	void Server_ChangeAmmoItem(); // Function WTL.WTLRangedWeapon.Server_ChangeAmmoItem // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x191d3f0
	void PostReload(); // Function WTL.WTLRangedWeapon.PostReload // (Final|Native|Private) // @ game+0x191d4b0
	void OnRep_InterruptLoadingReceived(); // Function WTL.WTLRangedWeapon.OnRep_InterruptLoadingReceived // (Final|Native|Private) // @ game+0x191d930
	void OnRep_FireModeIndex(); // Function WTL.WTLRangedWeapon.OnRep_FireModeIndex // (Final|Native|Private) // @ game+0x191d910
	void OnRep_Customization(); // Function WTL.WTLRangedWeapon.OnRep_Customization // (Final|Native|Private) // @ game+0x191d970
	void OnRep_CurrentState(enum class EWTLWeaponState Previous); // Function WTL.WTLRangedWeapon.OnRep_CurrentState // (Final|Native|Private) // @ game+0x191d7f0
	void OnRep_CurrentAmmoID(); // Function WTL.WTLRangedWeapon.OnRep_CurrentAmmoID // (Final|Native|Private) // @ game+0x191d950
	void OnRep_AttachmentTypeIDs(); // Function WTL.WTLRangedWeapon.OnRep_AttachmentTypeIDs // (Final|Native|Private) // @ game+0x191d990
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function WTL.WTLRangedWeapon.OnMontageEnded // (Final|Native|Private) // @ game+0x191d0e0
	void NetMulticast_OnStopFire(); // Function WTL.WTLRangedWeapon.NetMulticast_OnStopFire // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x191ded0
	void NetMulticast_OnStartFire(char FireModeIndex, bool FireLast); // Function WTL.WTLRangedWeapon.NetMulticast_OnStartFire // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x191def0
	void NetMulticast_OnReload(uint64_t AmmoItemID, bool bIsFullReload, char CountToReload, int32_t CurrentAmmoCount, uint16_t CurrentAmmoID); // Function WTL.WTLRangedWeapon.NetMulticast_OnReload // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x191dac0
	void NetMulticast_OnApplyWeaponAttachments(); // Function WTL.WTLRangedWeapon.NetMulticast_OnApplyWeaponAttachments // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x191d9d0
	void NetMulticast_OnApplyCustomization(); // Function WTL.WTLRangedWeapon.NetMulticast_OnApplyCustomization // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x191d9b0
	void ClientActionFinished(); // Function WTL.WTLRangedWeapon.ClientActionFinished // (Final|Native|Private) // @ game+0x191d3d0
	void Client_UpdateAmmoItemReference(); // Function WTL.WTLRangedWeapon.Client_UpdateAmmoItemReference // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1851d60
	void Client_SetPrivateAmmoCount(char AmmoValue); // Function WTL.WTLRangedWeapon.Client_SetPrivateAmmoCount // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x191e2b0
	void Client_OnStopUse(char CurrentMagazineAmmoCount, int32_t CurrentAmmoCount); // Function WTL.WTLRangedWeapon.Client_OnStopUse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x191ce80
	void Client_OnPostReload(char AmmoCount); // Function WTL.WTLRangedWeapon.Client_OnPostReload // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x191d9f0
	void Client_AffectedByEMP(float EffectTime); // Function WTL.WTLRangedWeapon.Client_AffectedByEMP // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x191cdb0
	void BPTakeInArms(bool IsLoaded, int32_t AmmoID); // Function WTL.WTLRangedWeapon.BPTakeInArms // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPReloading(int32_t AmmoItemID); // Function WTL.WTLRangedWeapon.BPReloading // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	struct UAnimMontage* BPGetNewReloadMontagePawn(int32_t AmmoID); // Function WTL.WTLRangedWeapon.BPGetNewReloadMontagePawn // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	struct UAnimMontage* BPGetNewReloadMontage(int32_t AmmoID); // Function WTL.WTLRangedWeapon.BPGetNewReloadMontage // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	int32_t BPGetCurrentAmmoID(); // Function WTL.WTLRangedWeapon.BPGetCurrentAmmoID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x191cd70
	void BPClientStartUse(); // Function WTL.WTLRangedWeapon.BPClientStartUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLRankSystem
// Size: 0x40 (Inherited: 0x28)
struct UWTLRankSystem : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class WTL.WTLRecastNavMeshLarge
// Size: 0x4d8 (Inherited: 0x4d8)
struct AWTLRecastNavMeshLarge : ARecastNavMesh {
};

// Class WTL.WTLRefHelper
// Size: 0x28 (Inherited: 0x28)
struct UWTLRefHelper : UObject {
};

// Class WTL.WTLRepairItem
// Size: 0x4e8 (Inherited: 0x458)
struct AWTLRepairItem : AWTLStuff {
	float ReplicatedEnergyValue; // 0x458(0x04)
	char pad_45C[0x24]; // 0x45c(0x24)
	float HitDistance; // 0x480(0x04)
	float DistanceToSpawnDecal; // 0x484(0x04)
	float MeleeHitDistance; // 0x488(0x04)
	float SphereRadius; // 0x48c(0x04)
	int32_t RepairPerUse; // 0x490(0x04)
	float EnergyPerUse; // 0x494(0x04)
	int32_t IdleUse; // 0x498(0x04)
	float MinRepairPercentToGetExp; // 0x49c(0x04)
	float ExperienceMultiplier; // 0x4a0(0x04)
	float BurningEffectValuePerUse; // 0x4a4(0x04)
	float BurningEffectMaxValue; // 0x4a8(0x04)
	float ReputationDelta; // 0x4ac(0x04)
	struct TArray<struct UMaterialInstance*> Decals; // 0x4b0(0x10)
	struct FVector DecalSize; // 0x4c0(0x0c)
	float DecalsLifeSpan; // 0x4cc(0x04)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x4d0(0x10)
	enum class ETraceTypeQuery CollisionTraceQuery; // 0x4e0(0x01)
	bool bSetEffects; // 0x4e1(0x01)
	char pad_4E2[0x6]; // 0x4e2(0x06)

	void Server_StopUse(); // Function WTL.WTLRepairItem.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db590
	void Server_StartUse(); // Function WTL.WTLRepairItem.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x17db5c0
	void Server_RepairHit(struct FHitResult HitResult); // Function WTL.WTLRepairItem.Server_RepairHit // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x191ff60
	void OnRep_SetEffects(); // Function WTL.WTLRepairItem.OnRep_SetEffects // (Final|Native|Public) // @ game+0x191fdf0
	void OnRep_EnergyValue(); // Function WTL.WTLRepairItem.OnRep_EnergyValue // (Final|Native|Public) // @ game+0x191fd60
	void NetMulticast_SpawnDecal(struct FVector_NetQuantize Location, struct FRotator Rotator, struct UPrimitiveComponent* Component); // Function WTL.WTLRepairItem.NetMulticast_SpawnDecal // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x1920070
	void NetMulticast_OnUse(enum class EWTLUsableItemUseType UseType); // Function WTL.WTLRepairItem.NetMulticast_OnUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x19202a0
	void NetMulticast_OnStopUse(); // Function WTL.WTLRepairItem.NetMulticast_OnStopUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1920280
	void Client_SetEnergyOnMaterial(); // Function WTL.WTLRepairItem.Client_SetEnergyOnMaterial // (Net|Native|Event|Public|NetClient) // @ game+0x191fd60
	void Client_EffectsUnderWater(); // Function WTL.WTLRepairItem.Client_EffectsUnderWater // (Net|Native|Event|Public|NetClient) // @ game+0x191fdb0
	void Client_Charge(float Value); // Function WTL.WTLRepairItem.Client_Charge // (Net|Native|Event|Public|NetClient) // @ game+0x191fc60
	void BPSetEnergyValueOnMaterial(float Energy); // Function WTL.WTLRepairItem.BPSetEnergyValueOnMaterial // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPRepairEffects(); // Function WTL.WTLRepairItem.BPRepairEffects // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPEffectsUnderWater(); // Function WTL.WTLRepairItem.BPEffectsUnderWater // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDeactivateRepairEffects(); // Function WTL.WTLRepairItem.BPDeactivateRepairEffects // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPChargeItem(float Value); // Function WTL.WTLRepairItem.BPChargeItem // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLReplicationGraph
// Size: 0x5c0 (Inherited: 0x4a0)
struct UWTLReplicationGraph : UReplicationGraph {
	struct TArray<struct UObject*> SpatializedClasses; // 0x4a0(0x10)
	struct TArray<struct UObject*> NonSpatializedChildClasses; // 0x4b0(0x10)
	struct TArray<struct UObject*> AlwaysRelevantClasses; // 0x4c0(0x10)
	struct UReplicationGraphNode_GridSpatialization2D* GridNode; // 0x4d0(0x08)
	struct UReplicationGraphNode_ActorList* AlwaysRelevantNode; // 0x4d8(0x08)
	char pad_4E0[0xe0]; // 0x4e0(0xe0)
};

// Class WTL.WTLReplicationGraphNode_AlwaysRelevant_ForConnection
// Size: 0x288 (Inherited: 0x50)
struct UWTLReplicationGraphNode_AlwaysRelevant_ForConnection : UReplicationGraphNode {
	char pad_50[0x228]; // 0x50(0x228)
	struct AActor* LastPawn; // 0x278(0x08)
	char pad_280[0x8]; // 0x280(0x08)
};

// Class WTL.WTLReplicationGraphNode_PlayerStateFrequencyLimiter
// Size: 0x80 (Inherited: 0x50)
struct UWTLReplicationGraphNode_PlayerStateFrequencyLimiter : UReplicationGraphNode {
	char pad_50[0x30]; // 0x50(0x30)
};

// Class WTL.WTLReputationSystem
// Size: 0xa0 (Inherited: 0x28)
struct UWTLReputationSystem : UObject {
	char pad_28[0x78]; // 0x28(0x78)
};

// Class WTL.WTLReverseRainbowProjectile
// Size: 0x320 (Inherited: 0x290)
struct AWTLReverseRainbowProjectile : AWTLThrowingDeviceProjectile {
	struct UWTLRadialForceComponent* RadialForce; // 0x290(0x08)
	char pad_298[0x20]; // 0x298(0x20)
	bool m_bDestroy; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct AActor* ExplosionActor; // 0x2c0(0x08)
	struct TSoftClassPtr<UObject> ExplosionFX; // 0x2c8(0x28)
	float DamageValue; // 0x2f0(0x04)
	char Burst; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	float TimeBetweeBursts; // 0x2f8(0x04)
	float ExplosionRadius; // 0x2fc(0x04)
	float RadialForceRadiusXY; // 0x300(0x04)
	float RadialForceRadiusZ; // 0x304(0x04)
	float MaxImpulseXY; // 0x308(0x04)
	float MinImpulseXY; // 0x30c(0x04)
	float ImpulseZ; // 0x310(0x04)
	float MaxMonsterMassInKg; // 0x314(0x04)
	uint32_t m_BurstCount; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)

	void OnRep_Destroy(); // Function WTL.WTLReverseRainbowProjectile.OnRep_Destroy // (Final|Native|Private) // @ game+0x1920b30
	void OnRep_Burst(); // Function WTL.WTLReverseRainbowProjectile.OnRep_Burst // (Final|Native|Public) // @ game+0x1920af0
	void NetMulticast_OnExplosion(); // Function WTL.WTLReverseRainbowProjectile.NetMulticast_OnExplosion // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0xe77850
	void BPPlaySound(); // Function WTL.WTLReverseRainbowProjectile.BPPlaySound // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLRichTextBlockInventoryItemDecorator
// Size: 0x28 (Inherited: 0x28)
struct UWTLRichTextBlockInventoryItemDecorator : URichTextBlockDecorator {
};

// Class WTL.WTLRichTextBlockPlayerNameDecorator
// Size: 0x28 (Inherited: 0x28)
struct UWTLRichTextBlockPlayerNameDecorator : URichTextBlockDecorator {
};

// Class WTL.WTLRichTextBlockInlineImageDecorator
// Size: 0x28 (Inherited: 0x28)
struct UWTLRichTextBlockInlineImageDecorator : URichTextBlockDecorator {
};

// Class WTL.WTLRobotCraftStation
// Size: 0x388 (Inherited: 0x220)
struct AWTLRobotCraftStation : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	bool m_IsActivated; // 0x230(0x01)
	bool m_IsPowerOn; // 0x231(0x01)
	bool m_IsCrafting; // 0x232(0x01)
	bool m_IsWaitingSpawn; // 0x233(0x01)
	char pad_234[0x4]; // 0x234(0x04)
	struct FWTLStorageContent m_StorageContent; // 0x238(0xa8)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	float m_ProductionEndServerTime; // 0x2e8(0x04)
	int32_t m_CurrentRobotCount; // 0x2ec(0x04)
	char pad_2F0[0x20]; // 0x2f0(0x20)
	struct FText m_LocalizationDisplayText; // 0x310(0x18)
	float ActivationTime; // 0x328(0x04)
	int32_t ID; // 0x32c(0x04)
	int32_t RobotCraftItemID; // 0x330(0x04)
	int32_t MaxRobotCount; // 0x334(0x04)
	struct AWTLGlobalLevelObject* GLO; // 0x338(0x08)
	struct AWTLMonsterSpawner* MonsterSpawner; // 0x340(0x08)
	char pad_348[0x40]; // 0x348(0x40)

	void OnRep_StorageContent(); // Function WTL.WTLRobotCraftStation.OnRep_StorageContent // (Final|Native|Private) // @ game+0x1921ee0
	void OnRep_ProductionEndServerTime(); // Function WTL.WTLRobotCraftStation.OnRep_ProductionEndServerTime // (Final|Native|Private) // @ game+0xe77850
	void OnRep_MaxRobotCount(); // Function WTL.WTLRobotCraftStation.OnRep_MaxRobotCount // (Final|Native|Private) // @ game+0x1921e60
	void OnRep_CurrentRobotCount(); // Function WTL.WTLRobotCraftStation.OnRep_CurrentRobotCount // (Final|Native|Private) // @ game+0x1921ea0
	void K2_ShowCraftObjectWidget(struct AWTLPlayerController* PlayerController); // Function WTL.WTLRobotCraftStation.K2_ShowCraftObjectWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1921bb0
	void K2_PowerOn(); // Function WTL.WTLRobotCraftStation.K2_PowerOn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1921410
	void K2_PowerOff(); // Function WTL.WTLRobotCraftStation.K2_PowerOff // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x19213e0
	void K2_LoadNeedItems(); // Function WTL.WTLRobotCraftStation.K2_LoadNeedItems // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
	bool K2_IsWaitingSpawn(); // Function WTL.WTLRobotCraftStation.K2_IsWaitingSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19217e0
	bool K2_IsPowerOn(); // Function WTL.WTLRobotCraftStation.K2_IsPowerOn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921e20
	bool K2_IsEnoughResources(); // Function WTL.WTLRobotCraftStation.K2_IsEnoughResources // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1921820
	bool K2_IsCrafting(); // Function WTL.WTLRobotCraftStation.K2_IsCrafting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921800
	bool K2_IsActivated(); // Function WTL.WTLRobotCraftStation.K2_IsActivated // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1921e40
	int32_t K2_GetRank(); // Function WTL.WTLRobotCraftStation.K2_GetRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921a60
	float K2_GetProductionTimeSeconds(); // Function WTL.WTLRobotCraftStation.K2_GetProductionTimeSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921b90
	float K2_GetProductionTimeLeftSeconds(); // Function WTL.WTLRobotCraftStation.K2_GetProductionTimeLeftSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921b10
	struct FText K2_GetNameRobot(); // Function WTL.WTLRobotCraftStation.K2_GetNameRobot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19218b0
	struct FWTLMonsterItemData K2_GetMonsterInfo(); // Function WTL.WTLRobotCraftStation.K2_GetMonsterInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921850
	int32_t K2_GetMinLevel(); // Function WTL.WTLRobotCraftStation.K2_GetMinLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921ac0
	int32_t K2_GetMaxLevel(); // Function WTL.WTLRobotCraftStation.K2_GetMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921a90
	int32_t K2_GetCurrentRobotCount(); // Function WTL.WTLRobotCraftStation.K2_GetCurrentRobotCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1921af0
	struct FString K2_ConvertProductionTimeToText(); // Function WTL.WTLRobotCraftStation.K2_ConvertProductionTimeToText // (Final|Native|Public|BlueprintCallable) // @ game+0x1921450
	void K2_ConvertProductionTimeFromText(struct FString Value); // Function WTL.WTLRobotCraftStation.K2_ConvertProductionTimeFromText // (Final|Native|Public|BlueprintCallable) // @ game+0x19214e0
	struct FString K2_ConvertItemsToText(); // Function WTL.WTLRobotCraftStation.K2_ConvertItemsToText // (Final|Native|Public|BlueprintCallable) // @ game+0x1921620
	void K2_ConvertItemsFromText(struct FString Value); // Function WTL.WTLRobotCraftStation.K2_ConvertItemsFromText // (Final|Native|Public|BlueprintCallable) // @ game+0x19216a0
	void K2_CompleteProgress(); // Function WTL.WTLRobotCraftStation.K2_CompleteProgress // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
	void BPUse(struct AWTLCharacter* Character); // Function WTL.WTLRobotCraftStation.BPUse // (Native|Event|Public|BlueprintEvent) // @ game+0x1779a60
	void BPSetHighlightState(bool Value); // Function WTL.WTLRobotCraftStation.BPSetHighlightState // (Native|Event|Public|BlueprintEvent) // @ game+0x1779890
	struct FString BPGetDisplayText(struct AWTLCharacter* Character); // Function WTL.WTLRobotCraftStation.BPGetDisplayText // (Native|Event|Public|BlueprintEvent) // @ game+0x1779760
	bool BPCanBeUsed(struct AWTLCharacter* Character); // Function WTL.WTLRobotCraftStation.BPCanBeUsed // (Native|Event|Public|BlueprintEvent) // @ game+0x1779970
};

// Class WTL.WTLScriptedEventsSystem
// Size: 0x38 (Inherited: 0x28)
struct UWTLScriptedEventsSystem : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class WTL.WTLSecurityController
// Size: 0x40 (Inherited: 0x28)
struct UWTLSecurityController : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class WTL.WTLSecuritySystem
// Size: 0x30 (Inherited: 0x28)
struct UWTLSecuritySystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class WTL.WTLSharedData
// Size: 0x518 (Inherited: 0x28)
struct UWTLSharedData : UObject {
	char pad_28[0x4f0]; // 0x28(0x4f0)
};

// Class WTL.WTLSignalJammer
// Size: 0x3f8 (Inherited: 0x398)
struct AWTLSignalJammer : AWTLPlaceableStuff {
	char pad_398[0x8]; // 0x398(0x08)
	struct UStaticMeshComponent* Mesh; // 0x3a0(0x08)
	struct UStaticMeshComponent* SphereMesh; // 0x3a8(0x08)
	struct USphereComponent* SphereCollision; // 0x3b0(0x08)
	float EnergyChargePerSecond; // 0x3b8(0x04)
	char pad_3BC[0x20]; // 0x3bc(0x20)
	float m_Energy; // 0x3dc(0x04)
	char pad_3E0[0x18]; // 0x3e0(0x18)

	void OnRep_Energy(); // Function WTL.WTLSignalJammer.OnRep_Energy // (Final|Native|Protected) // @ game+0x19270e0
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLSignalJammer.OnEndOverlap // (Native|Protected) // @ game+0x1927150
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLSignalJammer.OnBeginOverlap // (Native|Protected|HasOutParms) // @ game+0x19273d0
};

// Class WTL.WTLSkillSystem
// Size: 0x40 (Inherited: 0x28)
struct UWTLSkillSystem : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class WTL.WTLSky
// Size: 0x230 (Inherited: 0x220)
struct AWTLSky : AActor {
	char pad_220[0x10]; // 0x220(0x10)

	void K2_UpdateWeather(enum class EWTLWeatherType Weather); // Function WTL.WTLSky.K2_UpdateWeather // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	struct UDirectionalLightComponent* GetSunLight(); // Function WTL.WTLSky.GetSunLight // (Event|Public|BlueprintEvent|Const) // @ game+0x1ad0090
	char GetSkyModeOverride(); // Function WTL.WTLSky.GetSkyModeOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19279a0
	struct UDirectionalLightComponent* GetMoonLight(); // Function WTL.WTLSky.GetMoonLight // (Event|Public|BlueprintEvent|Const) // @ game+0x1ad0090
};

// Class WTL.WTLSkyLevelScriptActor
// Size: 0x848 (Inherited: 0x6b0)
struct AWTLSkyLevelScriptActor : AWTLLocationLevelScriptActor {
	char pad_6B0[0x84]; // 0x6b0(0x84)
	float m_DesiredWindSpeed; // 0x734(0x04)
	float m_DesiredWindActiveTime; // 0x738(0x04)
	char pad_73C[0x4]; // 0x73c(0x04)
	float m_DesiredWindAngle; // 0x740(0x04)
	float m_WindSpeedChangeSpeed; // 0x744(0x04)
	float m_WindAngleChangeSpeed; // 0x748(0x04)
	bool bShowDebugInfo; // 0x74c(0x01)
	char pad_74D[0x3]; // 0x74d(0x03)
	struct USceneCaptureComponentCube* CaptureComponent; // 0x750(0x08)
	bool CaptureScene; // 0x758(0x01)
	bool CaptureLandscape; // 0x759(0x01)
	char pad_75A[0x2]; // 0x75a(0x02)
	struct FVector CapturePosition; // 0x75c(0x0c)
	struct TArray<struct FWTLCaptureTarget> CaptureTargets; // 0x768(0x10)
	struct ADirectionalLight* SunLight; // 0x778(0x08)
	struct UCurveFloat* SunAngleCurve; // 0x780(0x08)
	struct UCurveFloat* SunBrightnessCurve; // 0x788(0x08)
	struct UCurveLinearColor* SunColorCurve; // 0x790(0x08)
	float SunIntensity; // 0x798(0x04)
	char pad_79C[0x4]; // 0x79c(0x04)
	struct USkyLightComponent* SkyLightComponent; // 0x7a0(0x08)
	struct UCurveFloat* SkyLightBrightnessCurve; // 0x7a8(0x08)
	struct UCurveLinearColor* SkyLightColorCurve; // 0x7b0(0x08)
	float SkyLightIntensity; // 0x7b8(0x04)
	float SkyLightMinLowerHemisphereIntensity; // 0x7bc(0x04)
	float SkyLightMaxLowerHemisphereIntensity; // 0x7c0(0x04)
	bool SkyLightRecapture; // 0x7c4(0x01)
	char pad_7C5[0x3]; // 0x7c5(0x03)
	float SkyLightRecaptureInterval; // 0x7c8(0x04)
	char pad_7CC[0x4]; // 0x7cc(0x04)
	struct TArray<struct FWTLDaytimeCubemap> DaytimeCubemaps; // 0x7d0(0x10)
	struct AExponentialHeightFog* ExponentialHeightFog; // 0x7e0(0x08)
	struct UCurveFloat* ExponentialFogDesityCurve; // 0x7e8(0x08)
	struct UCurveLinearColor* ExponentialFogInscatteringColorCurve; // 0x7f0(0x08)
	struct UCurveFloat* CloudsIntensityCurve; // 0x7f8(0x08)
	bool UpdateReflectionCaptures; // 0x800(0x01)
	char pad_801[0x3]; // 0x801(0x03)
	float ReflectionCaptureTimerInterval; // 0x804(0x04)
	int32_t ReflectionCaptureMaxUpdatesPerIteration; // 0x808(0x04)
	float ReflectionCaptureTimeDelta; // 0x80c(0x04)
	float ReflectionCaptureMaxDistance; // 0x810(0x04)
	char pad_814[0x4]; // 0x814(0x04)
	struct AWindDirectionalSource* WindSource; // 0x818(0x08)
	float WindMinGustAmountMin; // 0x820(0x04)
	float WindMinGustAmountMax; // 0x824(0x04)
	float WindMaxGustAmountMin; // 0x828(0x04)
	float WindMaxGustAmountMax; // 0x82c(0x04)
	float WindSpeedMin; // 0x830(0x04)
	float WindSpeedMax; // 0x834(0x04)
	float WindActiveTimeMin; // 0x838(0x04)
	float WindActiveTimeMax; // 0x83c(0x04)
	float WindChangeSpeedMin; // 0x840(0x04)
	float WindChangeSpeedMax; // 0x844(0x04)

	void OnRep_DesiredWindActiveTime(); // Function WTL.WTLSkyLevelScriptActor.OnRep_DesiredWindActiveTime // (Final|Native|Private) // @ game+0x17de400
	bool GetUndergroundMode(); // Function WTL.WTLSkyLevelScriptActor.GetUndergroundMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1927af0
	float GetCloudsValue(); // Function WTL.WTLSkyLevelScriptActor.GetCloudsValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1927b10
};

// Class WTL.WTLSlotMachineBase
// Size: 0x290 (Inherited: 0x260)
struct AWTLSlotMachineBase : AWTLInteractiveObject {
	char pad_260[0x18]; // 0x260(0x18)
	bool SingleMode; // 0x278(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	int32_t ID; // 0x27c(0x04)
	int32_t Bet; // 0x280(0x04)
	int32_t StartBalance; // 0x284(0x04)
	int32_t m_SlotMachineMoney; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)

	void OnRep_SlotMachineMoney(); // Function WTL.WTLSlotMachineBase.OnRep_SlotMachineMoney // (Final|Native|Private) // @ game+0x1929060
	void K2_OnRep_SlotMachineMoney(); // Function WTL.WTLSlotMachineBase.K2_OnRep_SlotMachineMoney // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void IncrementSlotMachineMoney(int32_t Value); // Function WTL.WTLSlotMachineBase.IncrementSlotMachineMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x17a7000
	bool GiveItemsToCharacter(struct AWTLCharacter* Character, struct TArray<struct FWTLGiveItemInfo> Value); // Function WTL.WTLSlotMachineBase.GiveItemsToCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1928d80
	int32_t GetSlotMachineMoney(); // Function WTL.WTLSlotMachineBase.GetSlotMachineMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1929020
	int32_t GetID(); // Function WTL.WTLSlotMachineBase.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1929040
	int32_t DecrementSlotMachineMoney(int32_t Value); // Function WTL.WTLSlotMachineBase.DecrementSlotMachineMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1928f50
};

// Class WTL.WTLSlotMachineBandit
// Size: 0x320 (Inherited: 0x290)
struct AWTLSlotMachineBandit : AWTLSlotMachineBase {
	char pad_290[0x14]; // 0x290(0x14)
	int32_t CylinderID; // 0x2a4(0x04)
	int32_t WinCombinationsID; // 0x2a8(0x04)
	int32_t SymbolsTexturesID; // 0x2ac(0x04)
	int32_t CountCylinder; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct FWTLSlotMachineData SlotMachineData; // 0x2b8(0x30)
	char pad_2E8[0x38]; // 0x2e8(0x38)

	void PlayWinSound(); // Function WTL.WTLSlotMachineBandit.PlayWinSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1928690
	void OnRep_SlotMachineData(); // Function WTL.WTLSlotMachineBandit.OnRep_SlotMachineData // (Final|Native|Public) // @ game+0x1928490
	void NetMulticast_Win(uint32_t WinID); // Function WTL.WTLSlotMachineBandit.NetMulticast_Win // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1928590
	void K2_SetTickerText(struct FText& Text); // Function WTL.WTLSlotMachineBandit.K2_SetTickerText // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetTickerColor(struct FSlateColor& Color); // Function WTL.WTLSlotMachineBandit.K2_SetTickerColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1ad0090
	void K2_ResetTickerColor(); // Function WTL.WTLSlotMachineBandit.K2_ResetTickerColor // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_OnDataCylinderChanged(struct FWTLSlotMachineData Value); // Function WTL.WTLSlotMachineBandit.K2_OnDataCylinderChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_ClientWin(int32_t WinID); // Function WTL.WTLSlotMachineBandit.K2_ClientWin // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	struct FWTLSlotMachineData GetNewSlotCombination(struct AWTLCharacter* Character); // Function WTL.WTLSlotMachineBandit.GetNewSlotCombination // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x19287d0
	bool CheckWin(); // Function WTL.WTLSlotMachineBandit.CheckWin // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe5dd90
};

// Class WTL.WTLSlotMachinePayTable
// Size: 0x270 (Inherited: 0x260)
struct AWTLSlotMachinePayTable : AWTLInteractiveObject {
	int32_t WinCombinationID; // 0x260(0x04)
	int32_t SymbolsTexturesID; // 0x264(0x04)
	int32_t BetValue; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
};

// Class WTL.WTLSlotMachinePayTableItemCombo
// Size: 0x2b8 (Inherited: 0x260)
struct UWTLSlotMachinePayTableItemCombo : UUserWidget {
	struct UHorizontalBox* hbRoot; // 0x260(0x08)
	struct TSoftClassPtr<UObject> PayTableItemImageWidgetClass; // 0x268(0x28)
	struct TSoftClassPtr<UObject> PayTableItemAnySeparatorWidgetClass; // 0x290(0x28)
};

// Class WTL.WTLSlotMachinePayTableItemImage
// Size: 0x268 (Inherited: 0x260)
struct UWTLSlotMachinePayTableItemImage : UUserWidget {
	struct UImage* imgImage; // 0x260(0x08)
};

// Class WTL.WTLSlotMachinePayTableItemWin
// Size: 0x2a0 (Inherited: 0x260)
struct UWTLSlotMachinePayTableItemWin : UUserWidget {
	struct UHorizontalBox* hbTokens; // 0x260(0x08)
	struct UTextBlock* tbTokensWinValue; // 0x268(0x08)
	struct UImage* imgTokens; // 0x270(0x08)
	struct UCanvasPanel* cpPlus; // 0x278(0x08)
	struct UCanvasPanel* cpGift; // 0x280(0x08)
	struct UButton* btnGift; // 0x288(0x08)
	char pad_290[0x10]; // 0x290(0x10)

	void OnGiftButtonClicked(); // Function WTL.WTLSlotMachinePayTableItemWin.OnGiftButtonClicked // (Final|Native|Private) // @ game+0x1929620
};

// Class WTL.WTLSlotMachinePayTableWidget
// Size: 0x2c8 (Inherited: 0x260)
struct UWTLSlotMachinePayTableWidget : UWTLWidgetBase {
	struct UBorder* bMain; // 0x260(0x08)
	struct UVerticalBox* vbCombos; // 0x268(0x08)
	struct UVerticalBox* vbWins; // 0x270(0x08)
	struct TSoftClassPtr<UObject> PayTableItemComboWidgetClass; // 0x278(0x28)
	struct TSoftClassPtr<UObject> PayTableItemWinWidgetClass; // 0x2a0(0x28)

	bool InitPayTable(int32_t WinCombinationID, int32_t SymbolsTexturesID, int32_t BetValue); // Function WTL.WTLSlotMachinePayTableWidget.InitPayTable // (Final|Native|Public|BlueprintCallable) // @ game+0x1929790
};

// Class WTL.WTLSmokeGrenadeProjectile
// Size: 0x448 (Inherited: 0x410)
struct AWTLSmokeGrenadeProjectile : AWTLGrenadeProjectile {
	char m_ParticleProgress; // 0x410(0x01)
	char m_CollisionProgress; // 0x411(0x01)
	char pad_412[0x2]; // 0x412(0x02)
	struct FVector m_ExplodeLocation; // 0x414(0x0c)
	bool m_bNeedDestroyParticles; // 0x420(0x01)
	char pad_421[0xf]; // 0x421(0x0f)
	struct UStaticMeshComponent* Cylinder; // 0x430(0x08)
	float TimeToHideIdentify; // 0x438(0x04)
	float TimeToStopHideIdentify; // 0x43c(0x04)
	float TimeToDestroyFX; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)

	void OnRep_ParticleProgress(); // Function WTL.WTLSmokeGrenadeProjectile.OnRep_ParticleProgress // (Final|Native|Public) // @ game+0x1929f20
	void OnRep_ExplodeLocation(); // Function WTL.WTLSmokeGrenadeProjectile.OnRep_ExplodeLocation // (Final|Native|Public) // @ game+0x1929ea0
	void OnRep_DestroyParticles(); // Function WTL.WTLSmokeGrenadeProjectile.OnRep_DestroyParticles // (Final|Native|Private) // @ game+0x1929f40
	void OnRep_CollisionProgress(); // Function WTL.WTLSmokeGrenadeProjectile.OnRep_CollisionProgress // (Final|Native|Public) // @ game+0x1929f00
	void EndOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLSmokeGrenadeProjectile.EndOverlap // (Final|Native|Private) // @ game+0x192a000
	void BeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLSmokeGrenadeProjectile.BeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x192a270
};

// Class WTL.WTLSocialSystem
// Size: 0x40 (Inherited: 0x28)
struct UWTLSocialSystem : UObject {
	struct UWTLGameInstance* m_GameInstance; // 0x28(0x08)
	struct AWTLGameState* m_GameState; // 0x30(0x08)
	struct UWorld* m_World; // 0x38(0x08)
};

// Class WTL.WTLSoundSubmixesComponent
// Size: 0x210 (Inherited: 0x200)
struct UWTLSoundSubmixesComponent : USceneComponent {
	char pad_200[0x10]; // 0x200(0x10)
};

// Class WTL.WTLSpawnAICharacter
// Size: 0x290 (Inherited: 0x220)
struct AWTLSpawnAICharacter : AActor {
	char pad_220[0x28]; // 0x220(0x28)
	struct AWTLAICharacter* SpawnClass; // 0x248(0x08)
	bool IsActive; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	int32_t SpawnedObjectsLimit; // 0x254(0x04)
	int32_t MinLevel; // 0x258(0x04)
	int32_t MaxLevel; // 0x25c(0x04)
	float StartDelay; // 0x260(0x04)
	float MinSpawnInterval; // 0x264(0x04)
	float MaxSpawnInterval; // 0x268(0x04)
	float SpawnRadius; // 0x26c(0x04)
	float MaxRadiusFollowTarget; // 0x270(0x04)
	bool IsFlyingAICharacter; // 0x274(0x01)
	char pad_275[0x3]; // 0x275(0x03)
	float MaxDistanceFromLandscape; // 0x278(0x04)
	bool IsSpawnPoints; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
	struct TArray<struct AActor*> SpawnPoints; // 0x280(0x10)

	void K2_OnAICharacterDeath(struct AWTLAICharacter* AICharacter); // Function WTL.WTLSpawnAICharacter.K2_OnAICharacterDeath // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void AICharacterDeath(struct AWTLAICharacter* AICharacter); // Function WTL.WTLSpawnAICharacter.AICharacterDeath // (Final|Native|Public|BlueprintCallable) // @ game+0x192ad70
};

// Class WTL.WTLSpectatorCameraViewSpot
// Size: 0x7a0 (Inherited: 0x7a0)
struct AWTLSpectatorCameraViewSpot : ACameraActor {
};

// Class WTL.WTLSpectatorPawn
// Size: 0x308 (Inherited: 0x2a8)
struct AWTLSpectatorPawn : ASpectatorPawn {
	char pad_2A8[0x60]; // 0x2a8(0x60)
};

// Class WTL.WTLStaminaVolume
// Size: 0x260 (Inherited: 0x258)
struct AWTLStaminaVolume : AVolume {
	float StaminaRecoveryRate; // 0x258(0x04)
	bool RecoverStaminaAtBeginOverlap; // 0x25c(0x01)
	bool EndlessStamina; // 0x25d(0x01)
	char pad_25E[0x2]; // 0x25e(0x02)

	void OnVolumeEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLStaminaVolume.OnVolumeEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnVolumeBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLStaminaVolume.OnVolumeBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
};

// Class WTL.WTLStaticMeshActor
// Size: 0x228 (Inherited: 0x220)
struct AWTLStaticMeshActor : AActor {
	struct UStaticMeshComponent* MeshComp; // 0x220(0x08)
};

// Class WTL.WTLStaticMiningZone
// Size: 0x308 (Inherited: 0x2f0)
struct AWTLStaticMiningZone : AWTLMiningZone {
	char pad_2F0[0x4]; // 0x2f0(0x04)
	float MaxCapacity; // 0x2f4(0x04)
	float MinCapacityRegenerationPerSecond; // 0x2f8(0x04)
	float MaxCapacityRegenerationPerSecond; // 0x2fc(0x04)
	float CapacityRestoreTimeout; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
};

// Class WTL.WTLStaticSkyLevelScriptActor
// Size: 0x6b0 (Inherited: 0x6b0)
struct AWTLStaticSkyLevelScriptActor : AWTLLocationLevelScriptActor {
};

// Class WTL.WTLStationControlledRobot
// Size: 0x338 (Inherited: 0x220)
struct AWTLStationControlledRobot : AActor {
	char pad_220[0x58]; // 0x220(0x58)
	float ActivationTime; // 0x278(0x04)
	int32_t ID; // 0x27c(0x04)
	int32_t RobotCraftItemID; // 0x280(0x04)
	int32_t MaxRobotCount; // 0x284(0x04)
	struct AWTLGlobalLevelObject* GLO; // 0x288(0x08)
	struct FWTLStorageContent m_StorageContent; // 0x290(0xa8)

	void OnRep_StorageContent(); // Function WTL.WTLStationControlledRobot.OnRep_StorageContent // (Final|Native|Private) // @ game+0x192c450
	void OnRep_MaxRobotCount(); // Function WTL.WTLStationControlledRobot.OnRep_MaxRobotCount // (Final|Native|Private) // @ game+0xe77850
	void BPUse(struct AWTLCharacter* Character); // Function WTL.WTLStationControlledRobot.BPUse // (Native|Event|Public|BlueprintEvent) // @ game+0x17941a0
	void BPSetHighlightState(bool Value); // Function WTL.WTLStationControlledRobot.BPSetHighlightState // (Native|Event|Public|BlueprintEvent) // @ game+0x1773b90
	struct FString BPGetDisplayText(struct AWTLCharacter* Character); // Function WTL.WTLStationControlledRobot.BPGetDisplayText // (Native|Event|Public|BlueprintEvent) // @ game+0x192c2d0
	bool BPCanBeUsed(struct AWTLCharacter* Character); // Function WTL.WTLStationControlledRobot.BPCanBeUsed // (Native|Event|Public|BlueprintEvent) // @ game+0x17bdd30
};

// Class WTL.WTLStatisticsSystem
// Size: 0x40001e8 (Inherited: 0x28)
struct UWTLStatisticsSystem : UObject {
	char pad_28[0x40001c0]; // 0x28(0x40001c0)
};

// Class WTL.WTLSteamHelper
// Size: 0x28 (Inherited: 0x28)
struct UWTLSteamHelper : UObject {
};

// Class WTL.WTLSteamMainMenuLevelScriptActor
// Size: 0x660 (Inherited: 0x650)
struct AWTLSteamMainMenuLevelScriptActor : AWTLLevelScriptActor {
	struct FString SteamServerID; // 0x650(0x10)

	void ShowInventoryItems(); // Function WTL.WTLSteamMainMenuLevelScriptActor.ShowInventoryItems // (Final|Native|Public|BlueprintCallable) // @ game+0x192cdd0
	void Authorize(); // Function WTL.WTLSteamMainMenuLevelScriptActor.Authorize // (Final|Native|Public|BlueprintCallable) // @ game+0xe77850
};

// Class WTL.WTLSteelTarget
// Size: 0x308 (Inherited: 0x220)
struct AWTLSteelTarget : AActor {
	bool m_IsActivate; // 0x220(0x01)
	char pad_221[0xb]; // 0x221(0x0b)
	float m_RecoveryCooldown; // 0x22c(0x04)
	float m_FallImpulseMultiplier; // 0x230(0x04)
	float m_RecoverySpeed; // 0x234(0x04)
	float m_MaximumImpulseValue; // 0x238(0x04)
	float MinRecoveryCooldownTime; // 0x23c(0x04)
	float MaxRecoveryCooldownTime; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct UCurveFloat* RecoverCurve; // 0x248(0x08)
	struct UCurveFloat* FallCurve; // 0x250(0x08)
	char pad_258[0x40]; // 0x258(0x40)
	struct UStaticMeshComponent* StandMesh; // 0x298(0x08)
	struct UStaticMeshComponent* TargetMesh; // 0x2a0(0x08)
	enum class FSteelTargetType Type; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	int32_t HitsToFall; // 0x2ac(0x04)
	float RiseDelayMin; // 0x2b0(0x04)
	float RiseDelayMax; // 0x2b4(0x04)
	struct TSoftObjectPtr<USoundBase> FallSound; // 0x2b8(0x28)
	struct TSoftObjectPtr<USoundBase> RiseSound; // 0x2e0(0x28)

	void OnRep_RecoveryCooldown(); // Function WTL.WTLSteelTarget.OnRep_RecoveryCooldown // (Final|Native|Private) // @ game+0xe77850
	void OnRep_IsActivate(); // Function WTL.WTLSteelTarget.OnRep_IsActivate // (Final|Native|Private) // @ game+0xe77850
	void NetMulticast_UpdateImpulseValue(float Impulse); // Function WTL.WTLSteelTarget.NetMulticast_UpdateImpulseValue // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192cf30
	void Deactivate(); // Function WTL.WTLSteelTarget.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x192ced0
	void BPOnTargetHit(struct AWTLCharacter* Character, float ImpulseValue); // Function WTL.WTLSteelTarget.BPOnTargetHit // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void Activate(); // Function WTL.WTLSteelTarget.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x192cf00
};

// Class WTL.WTLStorageObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLStorageObjectInterface : UInterface {
};

// Class WTL.WTLStuffPlacementZone
// Size: 0x268 (Inherited: 0x258)
struct AWTLStuffPlacementZone : AVolume {
	struct TArray<int32_t> AllowedStuffIDS; // 0x258(0x10)
};

// Class WTL.WTLSublevelScriptActor
// Size: 0x228 (Inherited: 0x228)
struct AWTLSublevelScriptActor : ALevelScriptActor {
};

// Class WTL.WTLTacticalGrenade
// Size: 0x320 (Inherited: 0x220)
struct AWTLTacticalGrenade : AWTLStaticReplicatedActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct USphereComponent* RootSphere; // 0x228(0x08)
	struct UStaticMeshComponent* ShieldLeftSide; // 0x230(0x08)
	struct UStaticMeshComponent* ShieldRightSide; // 0x238(0x08)
	float CurrentCondition; // 0x240(0x04)
	float Condition; // 0x244(0x04)
	float Time; // 0x248(0x04)
	float MinMeshScaleY; // 0x24c(0x04)
	float MinMeshScaleZ; // 0x250(0x04)
	float TraceDistance; // 0x254(0x04)
	float TraceDistanceUp; // 0x258(0x04)
	float TraceStartOffsetX; // 0x25c(0x04)
	float TraceStartOffsetZ; // 0x260(0x04)
	float MonsterDamageMultiplier; // 0x264(0x04)
	struct TArray<int32_t> DestructiveProjectileIDList; // 0x268(0x10)
	bool StunRuningCharacters; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct TSoftObjectPtr<UFMODEvent> BackgroundSound; // 0x280(0x28)
	struct TSoftObjectPtr<UParticleSystem> HitFX; // 0x2a8(0x28)
	struct TSoftObjectPtr<UFMODEvent> ImpactSound; // 0x2d0(0x28)
	bool IgnoreEnvironment; // 0x2f8(0x01)
	char pad_2F9[0x27]; // 0x2f9(0x27)

	void OnRep_CurrentCondition(); // Function WTL.WTLTacticalGrenade.OnRep_CurrentCondition // (Final|Native|Private) // @ game+0x192e200
	void OnOverlapEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLTacticalGrenade.OnOverlapEnd // (Final|Native|Private) // @ game+0x17dfe30
	void OnOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLTacticalGrenade.OnOverlapBegin // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
	void OnConditionChanged(float inCurrentCondition); // Function WTL.WTLTacticalGrenade.OnConditionChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void NetMulticast_StuntCharacter(struct FVector ImpactPosition); // Function WTL.WTLTacticalGrenade.NetMulticast_StuntCharacter // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x192e120
	void BPSwitchMaterialColor(float CondionPercent); // Function WTL.WTLTacticalGrenade.BPSwitchMaterialColor // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void BPDestroyFX(); // Function WTL.WTLTacticalGrenade.BPDestroyFX // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad0090
	bool AIInterface_IsInSafeZone(); // Function WTL.WTLTacticalGrenade.AIInterface_IsInSafeZone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xe5dd90
	bool AIInterface_IsCanBeAttacked(enum class EWTLFaction InstigatorFaction); // Function WTL.WTLTacticalGrenade.AIInterface_IsCanBeAttacked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x192dff0
	bool AIInterface_IsAlive(); // Function WTL.WTLTacticalGrenade.AIInterface_IsAlive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x192e0f0
	struct FVector AIInterface_GetVelocity(); // Function WTL.WTLTacticalGrenade.AIInterface_GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df0e0
	int32_t AIInterface_GetGroupID(); // Function WTL.WTLTacticalGrenade.AIInterface_GetGroupID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17df110
	enum class EWTLFaction AIInterface_GetFaction(); // Function WTL.WTLTacticalGrenade.AIInterface_GetFaction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x17d8c40
};

// Class WTL.WTLTacticalWeapon
// Size: 0x4a8 (Inherited: 0x3d8)
struct AWTLTacticalWeapon : AWTLWeapon {
	char pad_3D8[0x40]; // 0x3d8(0x40)
	struct UStaticMeshComponent* PreviewMesh; // 0x418(0x08)
	struct FItemAnimationSet ActivateSequenceSet; // 0x420(0x18)
	float MinCameraPitchToAlternative; // 0x438(0x04)
	float MaxCameraPitchToAlternative; // 0x43c(0x04)
	struct FItemAnimationSet AlternativeActivateSequenceSet; // 0x440(0x18)
	struct UMaterialInstance* CanBePlacedMaterial; // 0x458(0x08)
	struct UMaterialInstance* CanNotBePlacedMaterial; // 0x460(0x08)
	float MinPlaceAngle; // 0x468(0x04)
	float ActivationTime; // 0x46c(0x04)
	float PlaceTraceDistance; // 0x470(0x04)
	float MinPlaceDistance; // 0x474(0x04)
	bool RotateStuffOnSurfaace; // 0x478(0x01)
	char pad_479[0x7]; // 0x479(0x07)
	struct TSoftClassPtr<UObject> StuffClass; // 0x480(0x28)

	void SetPreviewMeshVisibility(bool NewVisibility); // Function WTL.WTLTacticalWeapon.SetPreviewMeshVisibility // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x192efe0
	void Server_StopUse(); // Function WTL.WTLTacticalWeapon.Server_StopUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x192f100
	void Server_StartUse(); // Function WTL.WTLTacticalWeapon.Server_StartUse // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x192f160
	void NetMulticast_OnUse(); // Function WTL.WTLTacticalWeapon.NetMulticast_OnUse // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192f0e0
	void NetMulticast_OnPlace(); // Function WTL.WTLTacticalWeapon.NetMulticast_OnPlace // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x192f0c0
	void Client_ShowPlacementMesh(); // Function WTL.WTLTacticalWeapon.Client_ShowPlacementMesh // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10fc6a0
};

// Class WTL.WTLTiltComponent
// Size: 0x220 (Inherited: 0x200)
struct UWTLTiltComponent : USceneComponent {
	char pad_200[0x8]; // 0x200(0x08)
	enum class EWTLTiltState TiltState; // 0x208(0x01)
	bool bIsSimulateOnClient; // 0x209(0x01)
	char pad_20A[0xe]; // 0x20a(0x0e)
	float TiltAngle; // 0x218(0x04)
	float TiltSpeed; // 0x21c(0x04)

	void OnRep_TiltState(); // Function WTL.WTLTiltComponent.OnRep_TiltState // (Final|Native|Public) // @ game+0x19308e0
};

// Class WTL.WTLTradingObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct UWTLTradingObjectInterface : UInterface {
};

// Class WTL.WTLTransitionLevelScriptActor
// Size: 0x6a0 (Inherited: 0x650)
struct AWTLTransitionLevelScriptActor : AWTLLevelScriptActor {
	char pad_650[0x18]; // 0x650(0x18)
	struct TSoftObjectPtr<ULevel> m_LevelToLoad; // 0x668(0x28)
	struct ULevel* m_LoadedLevel; // 0x690(0x08)
	bool bUsePrepareMapChangeLoading; // 0x698(0x01)
	char pad_699[0x7]; // 0x699(0x07)

	void OnLevelLoaded(); // Function WTL.WTLTransitionLevelScriptActor.OnLevelLoaded // (Final|Native|Private) // @ game+0x1930c00
};

// Class WTL.WTLTriggerObject
// Size: 0x260 (Inherited: 0x220)
struct AWTLTriggerObject : AActor {
	char pad_220[0x8]; // 0x220(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x228(0x08)
	struct UStaticMeshComponent* StaticMesh; // 0x230(0x08)
	char pad_238[0x8]; // 0x238(0x08)
	struct FText Name; // 0x240(0x18)
	enum class EWTLTriggerObjectActionType ActionType; // 0x258(0x01)
	bool HighlightAllChildrenStaticMeshes; // 0x259(0x01)
	char pad_25A[0x6]; // 0x25a(0x06)

	void ShowNote(struct AWTLCharacter* Character, struct FText& NoteName, int32_t NoteID); // Function WTL.WTLTriggerObject.ShowNote // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1930da0
	void SetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState State, enum class EWTLTriggerCheckResult& Result); // Function WTL.WTLTriggerObject.SetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918f70
	void OnEndUse(struct AWTLCharacter* Character); // Function WTL.WTLTriggerObject.OnEndUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterUse(struct AWTLCharacter* Character); // Function WTL.WTLTriggerObject.OnCharacterUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool OnCharacterCanBeUsed(struct AWTLCharacter* Character); // Function WTL.WTLTriggerObject.OnCharacterCanBeUsed // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	bool HasQuestWithQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState QuestState); // Function WTL.WTLTriggerObject.HasQuestWithQuestState // (Final|Native|Public|BlueprintCallable) // @ game+0x1931be0
	enum class EWTLTriggerObjectActionType GetTriggerActionType(struct AWTLCharacter* Character); // Function WTL.WTLTriggerObject.GetTriggerActionType // (Native|Event|Public|BlueprintEvent) // @ game+0x1931250
	void GetQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState& QuestState); // Function WTL.WTLTriggerObject.GetQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x19191d0
	void CharacterTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLTriggerCheckResult& Result); // Function WTL.WTLTriggerObject.CharacterTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918490
	void CharacterCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLTriggerCheckResult& Result); // Function WTL.WTLTriggerObject.CharacterCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918490
	void CharacterCanTakeQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLTriggerCheckResult& Result); // Function WTL.WTLTriggerObject.CharacterCanTakeQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1931330
	void CharacterCanCompleteQuest(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLTriggerCheckResult& Result); // Function WTL.WTLTriggerObject.CharacterCanCompleteQuest // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1918670
	bool CanQuestBeCompleted(struct AWTLCharacter* Character, int32_t QuestID); // Function WTL.WTLTriggerObject.CanQuestBeCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x1931a20
	void BeginInformationDialog(struct AWTLCharacter* Character, int32_t InformationDialogID); // Function WTL.WTLTriggerObject.BeginInformationDialog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x19310d0
};

// Class WTL.WTLTriggerStateObject
// Size: 0x258 (Inherited: 0x220)
struct AWTLTriggerStateObject : AActor {
	char pad_220[0x10]; // 0x220(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x230(0x08)
	struct FText Name; // 0x238(0x18)
	enum class EWTLTriggerObjectState State; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	void OnRep_State(); // Function WTL.WTLTriggerStateObject.OnRep_State // (Final|Native|Private) // @ game+0xe77850
	void OnCharacterUse(struct AWTLCharacter* Character, enum class EWTLTriggerObjectState NewState); // Function WTL.WTLTriggerStateObject.OnCharacterUse // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
};

// Class WTL.WTLTriggerVolume
// Size: 0x258 (Inherited: 0x220)
struct AWTLTriggerVolume : AActor {
	char pad_220[0x28]; // 0x220(0x28)
	struct UStaticMeshComponent* ActivationVolume; // 0x248(0x08)
	bool OnlyUniqueCharacters; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	void SwitchCharacterQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState& QuestState); // Function WTL.WTLTriggerVolume.SwitchCharacterQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1875350
	void ShowCharacterActionTimerWidget(struct AWTLCharacter* Character, float Timeout, enum class EWTLActionTimerWidgetType Type, enum class EWTLCountdownSliderWidgetFillingType Direction); // Function WTL.WTLTriggerVolume.ShowCharacterActionTimerWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x19181e0
	void SetCharacterQuestState(struct AWTLCharacter* Character, int32_t QuestID, enum class EWTLQuestState QuestState, enum class EWTLTriggerActionResult& Result); // Function WTL.WTLTriggerVolume.SetCharacterQuestState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1932d00
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLTriggerVolume.OnEndOverlap // (Final|Native|Private) // @ game+0x1933930
	void OnCharacterLeave(struct AWTLCharacter* Character); // Function WTL.WTLTriggerVolume.OnCharacterLeave // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnCharacterEnter(struct AWTLCharacter* Character); // Function WTL.WTLTriggerVolume.OnCharacterEnter // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLTriggerVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1933e30
	void HideCharacterActionTimerWidget(struct AWTLCharacter* Character, bool Success); // Function WTL.WTLTriggerVolume.HideCharacterActionTimerWidget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1918060
	void GiveItemToCharacter(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, int32_t Condition, enum class EWTLTriggerActionResult& Result); // Function WTL.WTLTriggerVolume.GiveItemToCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x19329b0
	void GiveItemsToCharacter(struct AWTLCharacter* Character, struct TArray<struct FWTLGiveItemInfo> ItemsToGive, enum class EWTLTriggerActionResult& Result); // Function WTL.WTLTriggerVolume.GiveItemsToCharacter // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1932780
	enum class EWTLQuestState GetCharactersQuestState(struct AWTLCharacter* Character, int32_t QuestID); // Function WTL.WTLTriggerVolume.GetCharactersQuestState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19334f0
	int32_t GetCharactersCount(); // Function WTL.WTLTriggerVolume.GetCharactersCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1933800
	bool CheckCharacterHaveItem(struct AWTLCharacter* Character, enum class EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, bool CheckContainers); // Function WTL.WTLTriggerVolume.CheckCharacterHaveItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1932f50
	bool CharacterInVolume(struct AWTLCharacter* Character); // Function WTL.WTLTriggerVolume.CharacterInVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1933820
};

// Class WTL.WTLTurretAnimInstance
// Size: 0x2d0 (Inherited: 0x2c0)
struct UWTLTurretAnimInstance : UAnimInstance {
	struct FVector TargetLocation; // 0x2b8(0x0c)
	float TargetFollowingAlpha; // 0x2c4(0x04)
	float BarrelRotationAlpha; // 0x2c8(0x04)
	float BarrelRotationSpeed; // 0x2cc(0x04)
};

// Class WTL.WTLTutorialVolume
// Size: 0x280 (Inherited: 0x258)
struct AWTLTutorialVolume : AVolume {
	struct TArray<int32_t> TutorialMessageIDs; // 0x258(0x10)
	struct TArray<enum class EWTLTutorialMessage> TutorialMessages; // 0x268(0x10)
	bool IsIgnoreTutorialEnabling; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLTutorialVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1934cc0
};

// Class WTL.EnvironmentDamageType
// Size: 0x40 (Inherited: 0x40)
struct UEnvironmentDamageType : UDamageType {
};

// Class WTL.AcidDamageType
// Size: 0x40 (Inherited: 0x40)
struct UAcidDamageType : UEnvironmentDamageType {
};

// Class WTL.FireDamageType
// Size: 0x40 (Inherited: 0x40)
struct UFireDamageType : UEnvironmentDamageType {
};

// Class WTL.RadiationDamageType
// Size: 0x40 (Inherited: 0x40)
struct URadiationDamageType : UEnvironmentDamageType {
};

// Class WTL.WeaponDamageType
// Size: 0x40 (Inherited: 0x40)
struct UWeaponDamageType : UDamageType {
};

// Class WTL.ExplosiveWeaponDamageType
// Size: 0x40 (Inherited: 0x40)
struct UExplosiveWeaponDamageType : UDamageType {
};

// Class WTL.MedicineDamageType
// Size: 0x40 (Inherited: 0x40)
struct UMedicineDamageType : UDamageType {
};

// Class WTL.MonsterDamageType
// Size: 0x40 (Inherited: 0x40)
struct UMonsterDamageType : UDamageType {
};

// Class WTL.SuffocationDamageType
// Size: 0x40 (Inherited: 0x40)
struct USuffocationDamageType : UDamageType {
};

// Class WTL.ControlledMonsterSpawnDamageType
// Size: 0x40 (Inherited: 0x40)
struct UControlledMonsterSpawnDamageType : UDamageType {
};

// Class WTL.CurveLipSync
// Size: 0x4b0 (Inherited: 0x30)
struct UCurveLipSync : UCurveBase {
	struct FRichCurve FloatCurves[0x9]; // 0x30(0x480)
};

// Class WTL.WTLUndergroundVolume
// Size: 0x258 (Inherited: 0x258)
struct AWTLUndergroundVolume : AVolume {

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLUndergroundVolume.OnEndOverlap // (Final|Native|Private) // @ game+0x1945a20
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLUndergroundVolume.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x1945c90
};

// Class WTL.WTLUtilityColorPicker
// Size: 0x370 (Inherited: 0x260)
struct UWTLUtilityColorPicker : UUserWidget {
	struct UImage* imgPreview; // 0x260(0x08)
	struct UBorder* bHue; // 0x268(0x08)
	struct UTextBlock* tbHue; // 0x270(0x08)
	struct USlider* slHue; // 0x278(0x08)
	struct UBorder* bSaturation; // 0x280(0x08)
	struct UTextBlock* tbSaturation; // 0x288(0x08)
	struct USlider* slSaturation; // 0x290(0x08)
	struct UVerticalBox* vbValue; // 0x298(0x08)
	struct UBorder* bValue; // 0x2a0(0x08)
	struct UTextBlock* tbValue; // 0x2a8(0x08)
	struct USlider* slValue; // 0x2b0(0x08)
	struct UVerticalBox* vbAlpha; // 0x2b8(0x08)
	struct UBorder* bAlpha; // 0x2c0(0x08)
	struct UTextBlock* tbAlpha; // 0x2c8(0x08)
	struct USlider* slAlpha; // 0x2d0(0x08)
	struct UBorder* bHex; // 0x2d8(0x08)
	struct UEditableTextBox* etbHex; // 0x2e0(0x08)
	char pad_2E8[0x58]; // 0x2e8(0x58)
	struct TSoftObjectPtr<UTexture2D> PreviewTexture; // 0x340(0x28)
	bool IsHidePreviewImage; // 0x368(0x01)
	bool IsAllowToSetValue; // 0x369(0x01)
	bool IsAllowToSetAlpha; // 0x36a(0x01)
	bool IsAllowToSetHex; // 0x36b(0x01)
	char pad_36C[0x4]; // 0x36c(0x04)

	void OnValueSliderChanged(float Value); // Function WTL.WTLUtilityColorPicker.OnValueSliderChanged // (Final|Native|Private) // @ game+0x1946c10
	void OnSaturationSliderChanged(float Saturation); // Function WTL.WTLUtilityColorPicker.OnSaturationSliderChanged // (Final|Native|Private) // @ game+0x1946ce0
	void OnHueSliderChanged(float Hue); // Function WTL.WTLUtilityColorPicker.OnHueSliderChanged // (Final|Native|Private) // @ game+0x1946db0
	void OnHexCommitted(struct FText& Text, enum class ETextCommit CommitType); // Function WTL.WTLUtilityColorPicker.OnHexCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1946830
	void OnHexChanged(struct FText& Text); // Function WTL.WTLUtilityColorPicker.OnHexChanged // (Final|Native|Private|HasOutParms) // @ game+0x1946a10
	void OnAlphaSliderChanged(float Alpha); // Function WTL.WTLUtilityColorPicker.OnAlphaSliderChanged // (Final|Native|Private) // @ game+0x1946b40
};

// Class WTL.WTLUtilityNumberTextBox
// Size: 0xa78 (Inherited: 0xa38)
struct UWTLUtilityNumberTextBox : UEditableTextBox {
	char pad_A38[0x30]; // 0xa38(0x30)
	bool IsSetCurrentValueWhenCommittIfEmpty; // 0xa68(0x01)
	char pad_A69[0x3]; // 0xa69(0x03)
	int32_t MinValue; // 0xa6c(0x04)
	int32_t MaxValue; // 0xa70(0x04)
	char pad_A74[0x4]; // 0xa74(0x04)

	void OnNumberTextCommitted(struct FText& NumberText, enum class ETextCommit CommitMethod); // Function WTL.WTLUtilityNumberTextBox.OnNumberTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1947180
	void OnNumberTextChanged(struct FText& NumberText); // Function WTL.WTLUtilityNumberTextBox.OnNumberTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1947350
};

// Class WTL.MasterServerBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMasterServerBlueprintLibrary : UBlueprintFunctionLibrary {

	void UpdateAccountStatistics(struct AWTLCharacter* Character, int32_t ParameterID, int32_t Delta); // Function WTL.MasterServerBlueprintLibrary.UpdateAccountStatistics // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1947550
	void TriggerAccountAchievement(struct AWTLCharacter* Character, int32_t AchievementID); // Function WTL.MasterServerBlueprintLibrary.TriggerAccountAchievement // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x19478e0
};

// Class WTL.WTLTestingBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UWTLTestingBlueprintLibrary : UBlueprintFunctionLibrary {

	void ProcessSteamInventoryItem(struct AWTLCharacter* Character, struct FString ItemId); // Function WTL.WTLTestingBlueprintLibrary.ProcessSteamInventoryItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1947d60
};

// Class WTL.WTLVehicleCharacterAnimInstance
// Size: 0xff0 (Inherited: 0xfa0)
struct UWTLVehicleCharacterAnimInstance : UWTLCharacterBodyAnimInstance {
	char pad_FA0[0x8]; // 0xfa0(0x08)
	struct FVector CharacterOffsetInVehicle; // 0xfa8(0x0c)
	struct FVector FemaleCharacterAdditionalOffsetInVehicle; // 0xfb4(0x0c)
	float CharacterHeadRotationInVehicle; // 0xfc0(0x04)
	float SexAlpha; // 0xfc4(0x04)
	float WheelAngle; // 0xfc8(0x04)
	float BodyTiltX; // 0xfcc(0x04)
	float BodyTiltY; // 0xfd0(0x04)
	bool bIsMoveBackward; // 0xfd4(0x01)
	enum class EWTLCharacterStateInVehicle CharacterState; // 0xfd5(0x01)
	char pad_FD6[0x2]; // 0xfd6(0x02)
	float BendAlpha; // 0xfd8(0x04)
	float TurnLeftAlpha; // 0xfdc(0x04)
	float TurnRightAlpha; // 0xfe0(0x04)
	float TurnMaxValue; // 0xfe4(0x04)
	float SlideRightValue; // 0xfe8(0x04)
	float SlideLeftValue; // 0xfec(0x04)
};

// Class WTL.WTLVehiclePawn
// Size: 0x1e80 (Inherited: 0x19d0)
struct AWTLVehiclePawn : AWTLCharacter {
	uint64_t m_ItemInventoryID; // 0x19d0(0x08)
	char pad_19D8[0x68]; // 0x19d8(0x68)
	bool m_bPlayHightGravityMontage; // 0x1a40(0x01)
	char pad_1A41[0x17]; // 0x1a41(0x17)
	struct USkeletalMeshComponent* VehicleMesh; // 0x1a58(0x08)
	struct UFMODAudioComponent* Horn; // 0x1a60(0x08)
	struct UFMODAudioComponent* Engine; // 0x1a68(0x08)
	struct UFMODAudioComponent* Sideslip; // 0x1a70(0x08)
	struct UFMODAudioComponent* WheelSlipOnAcceleation; // 0x1a78(0x08)
	struct UFMODAudioComponent* LandingSound; // 0x1a80(0x08)
	struct UFMODAudioComponent* HitSound; // 0x1a88(0x08)
	struct USpotLightComponent* HeadLight; // 0x1a90(0x08)
	struct FName HeadLightBoneName; // 0x1a98(0x08)
	struct UParticleSystemComponent* Smoke; // 0x1aa0(0x08)
	struct UParticleSystemComponent* SmokeFromForwardWheel; // 0x1aa8(0x08)
	struct UParticleSystemComponent* SmokeFromRearWheel; // 0x1ab0(0x08)
	bool UseSimpleDustFromWheels; // 0x1ab8(0x01)
	char pad_1AB9[0x3]; // 0x1ab9(0x03)
	float ForwardWheelDustDensity; // 0x1abc(0x04)
	float ForwardWheelDustDensityForBraking; // 0x1ac0(0x04)
	float RearWheelDustDensity; // 0x1ac4(0x04)
	float RearWheelDustDensityForBraking; // 0x1ac8(0x04)
	float RearWheelRocksDensity; // 0x1acc(0x04)
	float RearWheelRocksDensityForBraking; // 0x1ad0(0x04)
	char pad_1AD4[0x3]; // 0x1ad4(0x03)
	enum class EWTLCharacterStunhitDirection NewDirection; // 0x1ad7(0x01)
	char pad_1AD8[0x10]; // 0x1ad8(0x10)
	bool m_BrakePressed; // 0x1ae8(0x01)
	bool m_EngineBraking; // 0x1ae9(0x01)
	char pad_1AEA[0x42]; // 0x1aea(0x42)
	bool m_bAlreadySpawned; // 0x1b2c(0x01)
	bool m_bLeaveVehicle; // 0x1b2d(0x01)
	bool m_bEjectCharacter; // 0x1b2e(0x01)
	bool m_bEnteringInSafeZone; // 0x1b2f(0x01)
	bool m_bInWater; // 0x1b30(0x01)
	bool m_bIsInAnomaly; // 0x1b31(0x01)
	char pad_1B32[0x26]; // 0x1b32(0x26)
	struct UAnimMontage* CharacterIdleMontage; // 0x1b58(0x08)
	struct UAnimMontage* CharacterLandingMontage; // 0x1b60(0x08)
	struct UAnimMontage* VehicleLandingMontage; // 0x1b68(0x08)
	struct UAnimMontage* CharacterUnlandingMontage; // 0x1b70(0x08)
	struct UAnimMontage* VehicleUnlandingMontage; // 0x1b78(0x08)
	struct UAnimMontage* CharacterStopIdleMontage; // 0x1b80(0x08)
	struct UAnimMontage* VehicleStopIdleMontage; // 0x1b88(0x08)
	struct UAnimMontage* CharacterRidingMontage; // 0x1b90(0x08)
	struct UAnimMontage* CharacterAccelerationMontage; // 0x1b98(0x08)
	struct UAnimMontage* CharacterReverseMontage; // 0x1ba0(0x08)
	struct UAnimMontage* CharacterJumpMontage; // 0x1ba8(0x08)
	struct UAnimMontage* CharacterSlideRightMontage; // 0x1bb0(0x08)
	struct UAnimMontage* CharacterSlideLeftMontage; // 0x1bb8(0x08)
	struct UAnimMontage* VehicleHightGravityMontage; // 0x1bc0(0x08)
	char pad_1BC8[0x4]; // 0x1bc8(0x04)
	float m_MoveRight; // 0x1bcc(0x04)
	float MaxSpeedInKmPerH; // 0x1bd0(0x04)
	float MaxBackwardSpeedInKmPerH; // 0x1bd4(0x04)
	struct TSoftObjectPtr<UCurveFloat> TurnRateMultiplierCurve; // 0x1bd8(0x28)
	struct TSoftObjectPtr<UCurveFloat> YawInputMultiplierCurve; // 0x1c00(0x28)
	float YawInputMultiplier; // 0x1c28(0x04)
	bool UseYawInputCorrectionInTurnBraking; // 0x1c2c(0x01)
	char pad_1C2D[0x3]; // 0x1c2d(0x03)
	struct TSoftObjectPtr<UCurveFloat> BodyTiltYAngleCurve; // 0x1c30(0x28)
	float BodyTiltYSpeed; // 0x1c58(0x04)
	char pad_1C5C[0x4]; // 0x1c5c(0x04)
	float BodyTiltXSpeed; // 0x1c60(0x04)
	float MaxBodyTiltX; // 0x1c64(0x04)
	float ForwardWheelRotationSpeed; // 0x1c68(0x04)
	float FWheelUpdateSlopeTraceDistance; // 0x1c6c(0x04)
	float BWheelUpdateSlopeTraceDistance; // 0x1c70(0x04)
	float YawInputCurveMultiplier; // 0x1c74(0x04)
	float YawInterpolationSpeed; // 0x1c78(0x04)
	float NormalBrakingFrictionFactor; // 0x1c7c(0x04)
	float StoppingBrakingFrictionFactor; // 0x1c80(0x04)
	float EngineBrakingFrictionFactor; // 0x1c84(0x04)
	float FrontWheelRadius; // 0x1c88(0x04)
	float RearWheelRadius; // 0x1c8c(0x04)
	float WheelsMagicConstant; // 0x1c90(0x04)
	enum class EWTLSuspensionType SuspensionType; // 0x1c94(0x01)
	char pad_1C95[0x3]; // 0x1c95(0x03)
	float FrontSuspensionTravel; // 0x1c98(0x04)
	float FrontSuspensionDampingSpeed; // 0x1c9c(0x04)
	float FrontSuspensionReboundSpeed; // 0x1ca0(0x04)
	float FrontSuspensionBalancingSpeed; // 0x1ca4(0x04)
	float FrontSuspensionMinLoadOnBraking; // 0x1ca8(0x04)
	float FrontSuspensionMaxLoadOnBraking; // 0x1cac(0x04)
	float FrontSuspensionMinLoadOnAcceleration; // 0x1cb0(0x04)
	float FrontSuspensionMaxLoadOnAcceleration; // 0x1cb4(0x04)
	float RearSuspensionTravel; // 0x1cb8(0x04)
	float RearSuspensionDampingSpeed; // 0x1cbc(0x04)
	float RearSuspensionReboundSpeed; // 0x1cc0(0x04)
	float RearSuspensionBalancingSpeed; // 0x1cc4(0x04)
	float SuspensionSpeedMultiplierOnLanded; // 0x1cc8(0x04)
	float SuspensionRollThreshold; // 0x1ccc(0x04)
	float SuspensionRollInterpolationSpeedUp; // 0x1cd0(0x04)
	float SuspensionRollInterpolationSpeedDown; // 0x1cd4(0x04)
	float SuspensionBodyPositionInterpolationSpeed; // 0x1cd8(0x04)
	struct FName SuspensionWheelTraceProfileName; // 0x1cdc(0x08)
	float SuspensionMagicConstant; // 0x1ce4(0x04)
	float SuspensionTraceRollRelationConstant; // 0x1ce8(0x04)
	float MagicConstant2; // 0x1cec(0x04)
	bool SuspensionUseConstantInterpolation; // 0x1cf0(0x01)
	char pad_1CF1[0x3]; // 0x1cf1(0x03)
	struct FName CheckForwardObstructionBoneName; // 0x1cf4(0x08)
	struct FName CheckBackwardObstructionBoneName; // 0x1cfc(0x08)
	float CheckForwardObstructionTraceDistance; // 0x1d04(0x04)
	float CheckBackwardObstructionTraceDistance; // 0x1d08(0x04)
	float MinJumpTimeInterval; // 0x1d0c(0x04)
	float MinJumpToLandedTimeInterval; // 0x1d10(0x04)
	float MinJumpRollValue; // 0x1d14(0x04)
	float MinJumpSpeed; // 0x1d18(0x04)
	float MaxJumpZVelocity; // 0x1d1c(0x04)
	float FrontWheelToGroundDistanceJumpThreshold; // 0x1d20(0x04)
	float RearWheelToGroundDistanceJumpThreshold; // 0x1d24(0x04)
	float LandingVelocityToTakeDamage; // 0x1d28(0x04)
	float LandingVelocityToEjectCharacter; // 0x1d2c(0x04)
	float InAirRollDelta; // 0x1d30(0x04)
	float InAirRollDeltaSpeed; // 0x1d34(0x04)
	float SteeringSpeed; // 0x1d38(0x04)
	bool SteeringUseConstantInterpolation; // 0x1d3c(0x01)
	char pad_1D3D[0x3]; // 0x1d3d(0x03)
	float NewDesiredInputForwardValueInterSpeed; // 0x1d40(0x04)
	float FallingAnimationBlendWeight; // 0x1d44(0x04)
	char pad_1D48[0x14]; // 0x1d48(0x14)
	bool m_bUseHeadlight; // 0x1d5c(0x01)
	char m_HeadlightMode; // 0x1d5d(0x01)
	bool m_bUseRadio; // 0x1d5e(0x01)
	bool m_bVehicleVisibility; // 0x1d5f(0x01)
	enum class EWTLVehicleEngineSoundMode EngineSoundMode; // 0x1d60(0x01)
	char pad_1D61[0x3]; // 0x1d61(0x03)
	float EngineMinRPM; // 0x1d64(0x04)
	float EngineMaxRPM; // 0x1d68(0x04)
	float EngineRPMIncreaseSpeed; // 0x1d6c(0x04)
	float EngineRPMDropSpeed; // 0x1d70(0x04)
	bool CanDoWheelSlipOnAcceleration; // 0x1d74(0x01)
	bool DropAccelerationInAir; // 0x1d75(0x01)
	char pad_1D76[0x1a]; // 0x1d76(0x1a)
	float CameraDistance; // 0x1d90(0x04)
	char pad_1D94[0x8]; // 0x1d94(0x08)
	float MinCameraDistance; // 0x1d9c(0x04)
	float MaxCameraDistance; // 0x1da0(0x04)
	char pad_1DA4[0x4]; // 0x1da4(0x04)
	float CameraDistanceChangeSpeed; // 0x1da8(0x04)
	float TimeToResetCameraRotation; // 0x1dac(0x04)
	char pad_1DB0[0x4]; // 0x1db0(0x04)
	float CameraRotationSpeed; // 0x1db4(0x04)
	char pad_1DB8[0xb4]; // 0x1db8(0xb4)
	bool m_bAffectedByAlcohol; // 0x1e6c(0x01)
	char pad_1E6D[0x3]; // 0x1e6d(0x03)
	struct TArray<enum class EObjectTypeQuery> CollisionObjectTypes; // 0x1e70(0x10)

	void UpdateObstruction(struct FVector& ImpactPoint); // Function WTL.WTLVehiclePawn.UpdateObstruction // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x19486d0
	void SetVehicleMeshVisibility(bool Value); // Function WTL.WTLVehiclePawn.SetVehicleMeshVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1773b90
	void SetIsInAnomaly(bool Value); // Function WTL.WTLVehiclePawn.SetIsInAnomaly // (Final|Native|Public|BlueprintCallable) // @ game+0x19483b0
	void Server_VehicleEnteredInWater(); // Function WTL.WTLVehiclePawn.Server_VehicleEnteredInWater // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948b20
	void Server_UseHorn(); // Function WTL.WTLVehiclePawn.Server_UseHorn // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948fe0
	void Server_UpdateObstruction(struct FVector ImpactPoint); // Function WTL.WTLVehiclePawn.Server_UpdateObstruction // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate) // @ game+0x1949150
	void Server_ToggleRadio(); // Function WTL.WTLVehiclePawn.Server_ToggleRadio // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1949040
	void Server_ToggleHeadlight(); // Function WTL.WTLVehiclePawn.Server_ToggleHeadlight // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1949070
	void Server_SetMoveRightPressed(float Value); // Function WTL.WTLVehiclePawn.Server_SetMoveRightPressed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1949210
	void Server_SetEngineBraking(bool Value); // Function WTL.WTLVehiclePawn.Server_SetEngineBraking // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948eb0
	void Server_RequestEject(); // Function WTL.WTLVehiclePawn.Server_RequestEject // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948e80
	void Server_PlayStun(struct AWTLCharacter* Character); // Function WTL.WTLVehiclePawn.Server_PlayStun // (Final|Native|Private) // @ game+0x17941a0
	void Server_LeaveVehicle(); // Function WTL.WTLVehiclePawn.Server_LeaveVehicle // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948b50
	void Server_Kick(float KickVelocity); // Function WTL.WTLVehiclePawn.Server_Kick // (Net|Native|Event|Protected|NetServer|NetValidate) // @ game+0x1948780
	void Server_EjectCharacterFromVehicle(enum class EWTLCharacterStunhitDirection Direction); // Function WTL.WTLVehiclePawn.Server_EjectCharacterFromVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x1866cf0
	void Server_CharacterIsUnderground(); // Function WTL.WTLVehiclePawn.Server_CharacterIsUnderground // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // @ game+0x19493e0
	void Server_BrakeReleased(); // Function WTL.WTLVehiclePawn.Server_BrakeReleased // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948f80
	void Server_BrakePressed(); // Function WTL.WTLVehiclePawn.Server_BrakePressed // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1948fb0
	void PlayVehicleAnimMontage(struct UAnimMontage* Montage, float Rate); // Function WTL.WTLVehiclePawn.PlayVehicleAnimMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x178a2b0
	void PlayHightGravityVehicleMontage(); // Function WTL.WTLVehiclePawn.PlayHightGravityVehicleMontage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0xe77850
	void OnRep_VehicleMeshVisibility(); // Function WTL.WTLVehiclePawn.OnRep_VehicleMeshVisibility // (Final|Native|Protected) // @ game+0x19490a0
	void OnRep_UseRadio(); // Function WTL.WTLVehiclePawn.OnRep_UseRadio // (Final|Native|Protected) // @ game+0x19490e0
	void OnRep_UseHeadlight(); // Function WTL.WTLVehiclePawn.OnRep_UseHeadlight // (Final|Native|Protected) // @ game+0x1949130
	void OnRep_PlayHightGravityMontage(); // Function WTL.WTLVehiclePawn.OnRep_PlayHightGravityMontage // (Final|Native|Private) // @ game+0x19493c0
	void OnRep_LeaveVehicle(); // Function WTL.WTLVehiclePawn.OnRep_LeaveVehicle // (Final|Native|Protected) // @ game+0x19492e0
	void OnRep_ItemInventoryID(); // Function WTL.WTLVehiclePawn.OnRep_ItemInventoryID // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_IsInAmomaly(); // Function WTL.WTLVehiclePawn.OnRep_IsInAmomaly // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_EngineBraking(); // Function WTL.WTLVehiclePawn.OnRep_EngineBraking // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_EjectCharacter(); // Function WTL.WTLVehiclePawn.OnRep_EjectCharacter // (Final|Native|Protected) // @ game+0xe77850
	void OnRep_BrakePressed(); // Function WTL.WTLVehiclePawn.OnRep_BrakePressed // (Final|Native|Protected) // @ game+0x1949370
	void NetMulticast_UseHorn(); // Function WTL.WTLVehiclePawn.NetMulticast_UseHorn // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1949010
	void NetMulticast_PlayVehicleAnimMontage(struct UAnimMontage* Montag, float Rate); // Function WTL.WTLVehiclePawn.NetMulticast_PlayVehicleAnimMontage // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1948990
	void NetMulticast_PlayUnlandingMontage(); // Function WTL.WTLVehiclePawn.NetMulticast_PlayUnlandingMontage // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1948850
	void NetMulticast_PlayLandingMontage(); // Function WTL.WTLVehiclePawn.NetMulticast_PlayLandingMontage // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x19488f0
	void NetMulticast_EjectCharacter(); // Function WTL.WTLVehiclePawn.NetMulticast_EjectCharacter // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0xe77850
	void K2_VehicleCustomEvent(struct FName TriggerName); // Function WTL.WTLVehiclePawn.K2_VehicleCustomEvent // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_UpdateHeadLight(float Intensity); // Function WTL.WTLVehiclePawn.K2_UpdateHeadLight // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetStoplight(bool State); // Function WTL.WTLVehiclePawn.K2_SetStoplight // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetRadio(bool State); // Function WTL.WTLVehiclePawn.K2_SetRadio // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetHighlight(bool Value); // Function WTL.WTLVehiclePawn.K2_SetHighlight // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_SetHeadlight(bool State, char Mode); // Function WTL.WTLVehiclePawn.K2_SetHeadlight // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void K2_ConditionChanged(float NewCondition); // Function WTL.WTLVehiclePawn.K2_ConditionChanged // (Event|Public|BlueprintEvent) // @ game+0x1ad0090
	void IsCharacterUnderground(); // Function WTL.WTLVehiclePawn.IsCharacterUnderground // (Final|Native|Private) // @ game+0x1949410
	enum class EWTLVehicleState GetVehicleState(); // Function WTL.WTLVehiclePawn.GetVehicleState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x19485d0
	struct USkeletalMeshComponent* GetVehicleMesh(); // Function WTL.WTLVehiclePawn.GetVehicleMesh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19484a0
	struct UAnimMontage* GetVehicleHighGravityMontage(); // Function WTL.WTLVehiclePawn.GetVehicleHighGravityMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x19482a0
	float GetSpeed(); // Function WTL.WTLVehiclePawn.GetSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948590
	float GetRearWheelRotationAngle(); // Function WTL.WTLVehiclePawn.GetRearWheelRotationAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948370
	float GetNormalizedSpeedSigned(); // Function WTL.WTLVehiclePawn.GetNormalizedSpeedSigned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948610
	float GetNormalizedSpeed(); // Function WTL.WTLVehiclePawn.GetNormalizedSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948660
	float GetMaxSpeed(); // Function WTL.WTLVehiclePawn.GetMaxSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19486b0
	bool GetIsInAnomaly(); // Function WTL.WTLVehiclePawn.GetIsInAnomaly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948550
	float GetFrontWheelRotationAngle(); // Function WTL.WTLVehiclePawn.GetFrontWheelRotationAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948390
	float GetForwardWheelAngle(); // Function WTL.WTLVehiclePawn.GetForwardWheelAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948480
	float GetCurrentSpeedSigned(); // Function WTL.WTLVehiclePawn.GetCurrentSpeedSigned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948570
	float GetCurrentSpeed(); // Function WTL.WTLVehiclePawn.GetCurrentSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948590
	struct FVector GetCurrentRootBoneOffset(); // Function WTL.WTLVehiclePawn.GetCurrentRootBoneOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x19484c0
	float GetCurrentRollValue(); // Function WTL.WTLVehiclePawn.GetCurrentRollValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x19484f0
	float GetCurrentForwardInputValue(); // Function WTL.WTLVehiclePawn.GetCurrentForwardInputValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948350
	float GetCurrentForwardAbsorberOffset(); // Function WTL.WTLVehiclePawn.GetCurrentForwardAbsorberOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948530
	float GetCurrentBackwardAbsorberOffset(); // Function WTL.WTLVehiclePawn.GetCurrentBackwardAbsorberOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1948510
	enum class EWTLCharacterStateInVehicle GetCharacterStateInVehicle(); // Function WTL.WTLVehiclePawn.GetCharacterStateInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x19485f0
	bool GetCharacterIsStunned(); // Function WTL.WTLVehiclePawn.GetCharacterIsStunned // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x19485b0
	void EnterInVehicle(struct AWTLCharacter* Character); // Function WTL.WTLVehiclePawn.EnterInVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x17941a0
	void Client_ResetCamera(); // Function WTL.WTLVehiclePawn.Client_ResetCamera // (Net|Native|Event|Protected|NetClient) // @ game+0x1948d70
	void Client_OnUpdateInVehicle(bool IsInVehicle); // Function WTL.WTLVehiclePawn.Client_OnUpdateInVehicle // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1948ba0
	void Client_OnPossessed(); // Function WTL.WTLVehiclePawn.Client_OnPossessed // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1948b80
};

// Class WTL.WTLVKSocialNetworkAdapter
// Size: 0x48 (Inherited: 0x48)
struct UWTLVKSocialNetworkAdapter : UWTLSocialNetworkAdapter {
};

// Class WTL.WTLVoiceController
// Size: 0x1058 (Inherited: 0x28)
struct UWTLVoiceController : UObject {
	char pad_28[0x1030]; // 0x28(0x1030)
};

// Class WTL.WTLVolumePortal
// Size: 0x2b8 (Inherited: 0x2b0)
struct AWTLVolumePortal : AWTLPortal {
	struct UStaticMeshComponent* ActivationZoneMesh; // 0x2b0(0x08)

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function WTL.WTLVolumePortal.OnEndOverlap // (Final|Native|Private) // @ game+0x17dfe30
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function WTL.WTLVolumePortal.OnBeginOverlap // (Final|Native|Private|HasOutParms) // @ game+0x17e0080
};

// Class WTL.WTLWaterSource
// Size: 0x280 (Inherited: 0x260)
struct AWTLWaterSource : AWTLInteractiveObject {
	char pad_260[0x8]; // 0x260(0x08)
	struct UStaticMeshComponent* Mesh; // 0x268(0x08)
	struct TArray<struct FWTLWaterContainer> Containers; // 0x270(0x10)
};

// Class WTL.WTLWeaponAnimInstance
// Size: 0x360 (Inherited: 0x2c0)
struct UWTLWeaponAnimInstance : UAnimInstance {
	bool bIsEmpty; // 0x2c0(0x01)
	bool bIsJammed; // 0x2c1(0x01)
	char pad_2C2[0x2]; // 0x2c2(0x02)
	struct FVector RightHand_Socket; // 0x2c4(0x0c)
	struct FVector LeftHand_Socket; // 0x2d0(0x0c)
	struct FVector Missile_Socket; // 0x2dc(0x0c)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct FTransform RightHand_Socket_Transform; // 0x2f0(0x30)
	struct FTransform LeftHand_Socket_Transform; // 0x320(0x30)
	float RightHand_Alpha; // 0x350(0x04)
	float LeftHand_Alpha; // 0x354(0x04)
	float HandlingAnimationType; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)

	struct AWTLCharacter* GetCharacter(); // Function WTL.WTLWeaponAnimInstance.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x194b660
};

// Class WTL.WTLWeaponAttachment
// Size: 0x4f0 (Inherited: 0x4d0)
struct UWTLWeaponAttachment : UStaticMeshComponent {
	char pad_4D0[0x20]; // 0x4d0(0x20)

	void Client_SetMesh(struct UStaticMesh* Mesh); // Function WTL.WTLWeaponAttachment.Client_SetMesh // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x194b710
};

// Class WTL.WTLWindTurbine
// Size: 0x268 (Inherited: 0x220)
struct AWTLWindTurbine : AActor {
	char pad_220[0x18]; // 0x220(0x18)
	struct UStaticMeshComponent* StandMesh; // 0x238(0x08)
	struct UStaticMeshComponent* BodyMesh; // 0x240(0x08)
	struct UStaticMeshComponent* FanMesh; // 0x248(0x08)
	struct UFMODAudioComponent* FMODAudioComponent; // 0x250(0x08)
	float WindSpeedToFanRotationMultiplier; // 0x258(0x04)
	float BodyMinAngle; // 0x25c(0x04)
	float BodyMaxAngle; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
};

// Class WTL.WTLWorldSettings
// Size: 0x3a0 (Inherited: 0x3a0)
struct AWTLWorldSettings : AWorldSettings {
};

