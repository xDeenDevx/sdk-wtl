/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// Package WTL.

/// Class /Script/WTL.EQSTest_AwayFromAllPawns
/// Size: 0x0000 (0x0001F8 - 0x0001F8)
class UEQSTest_AwayFromAllPawns : public UEnvQueryTest
{ 
public:
};

/// Class /Script/WTL.EQSTest_IsAlive
/// Size: 0x0008 (0x0001F8 - 0x000200)
class UEQSTest_IsAlive : public UEnvQueryTest
{ 
public:
	bool                                               IsAITargetInterface;                                        // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x01F9   (0x0007)  MISSED
};

/// Class /Script/WTL.EQSTest_IsOnTheGround
/// Size: 0x0000 (0x0001F8 - 0x0001F8)
class UEQSTest_IsOnTheGround : public UEnvQueryTest
{ 
public:
};

/// Class /Script/WTL.EQSTest_PointBehindTheEnemy
/// Size: 0x0000 (0x0001F8 - 0x0001F8)
class UEQSTest_PointBehindTheEnemy : public UEnvQueryTest
{ 
public:
};

/// Class /Script/WTL.EQSTest_TraceChannel
/// Size: 0x00E0 (0x0001F8 - 0x0002D8)
class UEQSTest_TraceChannel : public UEnvQueryTest
{ 
public:
	FEnvTraceData                                      TraceData;                                                  // 0x01F8   (0x0030)  
	FAIDataProviderBoolValue                           TraceFromContext;                                           // 0x0228   (0x0038)  
	FAIDataProviderFloatValue                          ItemHeightOffset;                                           // 0x0260   (0x0038)  
	FAIDataProviderFloatValue                          ContextHeightOffset;                                        // 0x0298   (0x0038)  
	UClass*                                            Context;                                                    // 0x02D0   (0x0008)  
};

/// Class /Script/WTL.EQSTest_VisibilityCone
/// Size: 0x0000 (0x0001F8 - 0x0001F8)
class UEQSTest_VisibilityCone : public UEnvQueryTest
{ 
public:
};

/// Class /Script/WTL.WTL3DActorHealth
/// Size: 0x0038 (0x000260 - 0x000298)
class UWTL3DActorHealth : public UUserWidget
{ 
public:
	UProgressBar*                                      pbActorHealth;                                              // 0x0260   (0x0008)  
	FLinearColor                                       HealthBarFillNormalColor;                                   // 0x0268   (0x0010)  
	FLinearColor                                       HealthBarFillWarningColor;                                  // 0x0278   (0x0010)  
	FLinearColor                                       HealthBarFillDangerColor;                                   // 0x0288   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTL3DActorHealth.SetActorHealth
	void SetActorHealth(float CurrentHealth, float MaxHealth);                                                               // [0x1772f20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTL3DActorName
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTL3DActorName : public UUserWidget
{ 
public:
	UTextBlock*                                        tbActorName;                                                // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0268   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTL3DActorName.SetActorNameText
	void SetActorNameText(FString ActorName);                                                                                // [0x1773250] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTL3DMobileStartPointParameters
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTL3DMobileStartPointParameters : public UUserWidget
{ 
public:
	UProgressBar*                                      pbPoint;                                                    // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTL3DMonsterIdentity
/// Size: 0x0018 (0x000270 - 0x000288)
class UWTL3DMonsterIdentity : public UWTL3DActorName
{ 
public:
	UImage*                                            imgIndicator;                                               // 0x0270   (0x0008)  
	UProgressBar*                                      pbHealth;                                                   // 0x0278   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x0280   (0x0008)  
};

/// Class /Script/WTL.WTL3DMonsterName
/// Size: 0x0000 (0x000270 - 0x000270)
class UWTL3DMonsterName : public UWTL3DActorName
{ 
public:
};

/// Class /Script/WTL.WTL3DPlayerIdentity
/// Size: 0x0028 (0x000270 - 0x000298)
class UWTL3DPlayerIdentity : public UWTL3DActorName
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0270   (0x0008)  MISSED
	UImage*                                            imgTeamLead;                                                // 0x0278   (0x0008)  
	UProgressBar*                                      pbHealth;                                                   // 0x0280   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x0288   (0x0008)  
	UBorder*                                           bHealth;                                                    // 0x0290   (0x0008)  
};

/// Class /Script/WTL.WTLAchievementSystem
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLAchievementSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLActionGameplayActivity
/// Size: 0x0030 (0x000220 - 0x000250)
class AWTLActionGameplayActivity : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemPreview;                                                // 0x0228   (0x0028)  
};

/// Class /Script/WTL.WTLFortificationObject
/// Size: 0x0050 (0x000220 - 0x000270)
class AWTLFortificationObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0220   (0x0020)  MISSED
	int32_t                                            ID;                                                         // 0x0240   (0x0004)  
	EWTLFortificationObjectType                        Type;                                                       // 0x0244   (0x0001)  
	char                                               SlotCount;                                                  // 0x0245   (0x0001)  
	bool                                               NeedSaveState;                                              // 0x0246   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0247   (0x0001)  MISSED
	float                                              SaveInterval;                                               // 0x0248   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x024C   (0x0004)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0250   (0x0008)  
	uint64_t                                           CharacterGroupID;                                           // 0x0258   (0x0008)  
	uint16_t                                           CharacterClanID;                                            // 0x0260   (0x0002)  
	EWTLFaction                                        Faction;                                                    // 0x0262   (0x0001)  
	unsigned char                                      UnknownData03_5[0x1];                                       // 0x0263   (0x0001)  MISSED
	int32_t                                            Condition;                                                  // 0x0264   (0x0004)  
	float                                              Energy;                                                     // 0x0268   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x026C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLActionGameplayMachinegun
/// Size: 0x0190 (0x000270 - 0x000400)
class AWTLActionGameplayMachinegun : public AWTLFortificationObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0270   (0x0010)  MISSED
	FWTLStorageContent                                 m_StorageContent;                                           // 0x0280   (0x00A8)  
	FRotator                                           MachinegunRotation;                                         // 0x0328   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0334   (0x0004)  MISSED
	UStaticMeshComponent*                              StandMesh;                                                  // 0x0338   (0x0008)  
	USkeletalMeshComponent*                            Mesh;                                                       // 0x0340   (0x0008)  
	UFMODAudioComponent*                               ShootAudioComponent;                                        // 0x0348   (0x0008)  
	FText                                              MachinegunName;                                             // 0x0350   (0x0018)  
	int32_t                                            WeaponID;                                                   // 0x0368   (0x0004)  
	int32_t                                            FireRate;                                                   // 0x036C   (0x0004)  
	float                                              TemperatureIncreasingPerShot;                               // 0x0370   (0x0004)  
	float                                              OverheatTemperature;                                        // 0x0374   (0x0004)  
	float                                              TemperatureToStartFire;                                     // 0x0378   (0x0004)  
	float                                              TemperatureCooldownPerSecond;                               // 0x037C   (0x0004)  
	float                                              OverheatAccuracy;                                           // 0x0380   (0x0004)  
	float                                              RotationSpeed;                                              // 0x0384   (0x0004)  
	int32_t                                            MaxAmmoWeight;                                              // 0x0388   (0x0004)  
	FWTLCameraLimits                                   CameraLimits;                                               // 0x038C   (0x000C)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x0398   (0x0010)  MISSED
	AWTLCharacter*                                     m_CurrentCharacter;                                         // 0x03A8   (0x0008)  
	unsigned char                                      UnknownData03_5[0x10];                                      // 0x03B0   (0x0010)  MISSED
	float                                              m_CurrentTemperatureOverheat;                               // 0x03C0   (0x0004)  
	bool                                               m_bIsCoolingDown;                                           // 0x03C4   (0x0001)  
	unsigned char                                      UnknownData04_5[0x13];                                      // 0x03C5   (0x0013)  MISSED
	bool                                               bIsInUse;                                                   // 0x03D8   (0x0001)  
	bool                                               bIsInAction;                                                // 0x03D9   (0x0001)  
	unsigned char                                      UnknownData05_6[0x26];                                      // 0x03DA   (0x0026)  MISSED


	/// Functions
	// Function /Script/WTL.WTLActionGameplayMachinegun.SetEnabled
	void SetEnabled(bool Value);                                                                                             // [0x1773b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnUse
	void OnUse();                                                                                                            // [0x1773ed0] Final|Native|Private 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnStorageCheck
	void OnStorageCheck();                                                                                                   // [0x1773d70] Final|Native|Private 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x1774050] Final|Native|Private 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnRep_MachinegunRortation
	void OnRep_MachinegunRortation();                                                                                        // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnRep_IsInUse
	void OnRep_IsInUse();                                                                                                    // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnRep_bIsAction
	void OnRep_bIsAction();                                                                                                  // [0x1773d50] Final|Native|Private 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnLocalClientAcion
	void OnLocalClientAcion();                                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnClientUsageStop
	void OnClientUsageStop();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActionGameplayMachinegun.OnClientUsageStart
	void OnClientUsageStart();                                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetPauseBetweenShots
	float GetPauseBetweenShots();                                                                                            // [0x1773c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetOverheatSafeTemperature
	float GetOverheatSafeTemperature();                                                                                      // [0x1773c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetOverheatPercent
	float GetOverheatPercent();                                                                                              // [0x1773cc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetMesh
	USkeletalMeshComponent* GetMesh();                                                                                       // [0x1773d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetIsInAction
	bool GetIsInAction();                                                                                                    // [0x1773cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetIsCoolingDown
	bool GetIsCoolingDown();                                                                                                 // [0x1773c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.GetCurrentCharacter
	AWTLCharacter* GetCurrentCharacter();                                                                                    // [0x1773a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLActionGameplayMachinegun.FillAmmo
	void FillAmmo(int32_t AmmoID, int32_t Count);                                                                            // [0x1773a50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLActionGameplayObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLActionGameplayObjectInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLAnomaly
/// Size: 0x0010 (0x000220 - 0x000230)
class AWTLAnomaly : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	bool                                               CharacterCanUseVehicleInside;                               // 0x0228   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLAnomaly.TeleportCharacterToRandomPointInRange
	void TeleportCharacterToRandomPointInRange(AWTLCharacter* Character, float MinRange, float MaxRange, EWTLAnomalyActionResult& Result); // [0x177e610] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.TeleportCharacterToRandomPointArray
	void TeleportCharacterToRandomPointArray(AWTLCharacter* Character, TArray<FVector> Locations, EWTLAnomalyActionResult& Result); // [0x177e850] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.TeleportCharacterToPoint
	void TeleportCharacterToPoint(AWTLCharacter* Character, FVector Location, EWTLAnomalyActionResult& Result);              // [0x177eac0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.OnEMPGrenadeExplosion
	void OnEMPGrenadeExplosion();                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAnomaly.IsCharacterHoldingBreath
	void IsCharacterHoldingBreath(AWTLCharacter* Character, EWTLAnomalyCheckResult& Result);                                 // [0x177fd60] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.ApplyRadialDamage
	void ApplyRadialDamage(float DamageValue, FVector DamageOrigin, float DamageRadius, UClass* DamageTypeClass, EWTLAnomalyActionResult& Result); // [0x177ec80] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.AddEffectToCharacterWithFalloff
	void AddEffectToCharacterWithFalloff(AWTLCharacter* Character, EWTLCharacterEffectType EffectType, float EffectValue, FVector Origin, float FalloffRadius, float MinEffectValue, EWTLAnomalyActionResult& Result); // [0x177f460] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.AddEffectToCharactersWithFalloff
	void AddEffectToCharactersWithFalloff(TArray<AWTLCharacter*> Characters, EWTLCharacterEffectType EffectType, float EffectValue, FVector Origin, float FalloffRadius, float MinEffectValue, EWTLAnomalyActionResult& Result); // [0x177f010] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.AddEffectToCharacters
	void AddEffectToCharacters(TArray<AWTLCharacter*> Characters, EWTLCharacterEffectType EffectType, float EffectValue, EWTLAnomalyActionResult& Result); // [0x177f820] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLAnomaly.AddEffectToCharacter
	void AddEffectToCharacter(AWTLCharacter* Character, EWTLCharacterEffectType EffectType, float EffectValue, EWTLAnomalyActionResult& Result); // [0x177fb10] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/WTL.WTLStaticAnomaly
/// Size: 0x0030 (0x000230 - 0x000260)
class AWTLStaticAnomaly : public AWTLAnomaly
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0230   (0x0028)  MISSED
	UStaticMeshComponent*                              ActivationVolume;                                           // 0x0258   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLStaticAnomaly.OnThrowingDeviceProjectileEnter
	void OnThrowingDeviceProjectileEnter(AWTLThrowingDeviceProjectile* ThrowingDeviceProjectile);                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnNutLeave
	void OnNutLeave(AWTLNut* Nut);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnNutEnter
	void OnNutEnter(AWTLNut* Nut);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnMonsterLeave
	void OnMonsterLeave(AWTLMonsterPawn* Monster);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnMonsterEnter
	void OnMonsterEnter(AWTLMonsterPawn* Monster);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLStaticAnomaly.OnCharacterLeave
	void OnCharacterLeave(AWTLCharacter* Character);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnCharacterEnter
	void OnCharacterEnter(AWTLCharacter* Character);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStaticAnomaly.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLStaticAnomaly.GetMonstersInVolume
	TArray<AWTLMonsterPawn*> GetMonstersInVolume();                                                                          // [0x1864d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLStaticAnomaly.GetCharactersInVolume
	TArray<AWTLCharacter*> GetCharactersInVolume();                                                                          // [0x1864e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLActivatableAnomaly
/// Size: 0x0038 (0x000260 - 0x000298)
class AWTLActivatableAnomaly : public AWTLStaticAnomaly
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0260   (0x0010)  MISSED
	float                                              MinEnergy;                                                  // 0x0270   (0x0004)  
	float                                              MaxEnergy;                                                  // 0x0274   (0x0004)  
	float                                              EnergyPerSecond;                                            // 0x0278   (0x0004)  
	float                                              Energy;                                                     // 0x027C   (0x0004)  
	EWTLActivatableAnomalyState                        State;                                                      // 0x0280   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              EnergyToActivate;                                           // 0x0284   (0x0004)  
	float                                              ActivationDelay;                                            // 0x0288   (0x0004)  
	float                                              StayActivatedTime;                                          // 0x028C   (0x0004)  
	float                                              EnergyDecrementAfterActivation;                             // 0x0290   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0294   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLActivatableAnomaly.ServerOnActivated
	void ServerOnActivated();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableAnomaly.OnRep_State
	void OnRep_State();                                                                                                      // [0x17756e0] Final|Native|Private 
	// Function /Script/WTL.WTLActivatableAnomaly.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x1775750] Final|Native|Private 
	// Function /Script/WTL.WTLActivatableAnomaly.OnEnergyChanged
	void OnEnergyChanged(float EnergyValue);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableAnomaly.ClientOnBeginActivate
	void ClientOnBeginActivate();                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableAnomaly.ClientOnActivated
	void ClientOnActivated();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLMovingAnomaly
/// Size: 0x0098 (0x000230 - 0x0002C8)
class AWTLMovingAnomaly : public AWTLAnomaly
{ 
public:
	unsigned char                                      UnknownData00_2[0x40];                                      // 0x0230   (0x0040)  MISSED
	TArray<FVector>                                    WayPoints;                                                  // 0x0270   (0x0010)  
	AWTLAnomalyWayPoint*                               StartWayPoint;                                              // 0x0280   (0x0008)  
	EWTLWayPointMovingType                             MovingType;                                                 // 0x0288   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0289   (0x0003)  MISSED
	float                                              MinSpeed;                                                   // 0x028C   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x0290   (0x0004)  
	float                                              PositionSynchronizationInterval;                            // 0x0294   (0x0004)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0298   (0x0008)  MISSED
	FVector_NetQuantize                                m_CurrentWayPointPosition;                                  // 0x02A0   (0x000C)  
	float                                              m_CurrentSpeed;                                             // 0x02AC   (0x0004)  
	FVector                                            m_SynchronizationPosition;                                  // 0x02B0   (0x000C)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x02BC   (0x0004)  MISSED
	UStaticMeshComponent*                              ActivationVolume;                                           // 0x02C0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLMovingAnomaly.OnRep_SynchronizationPosition
	void OnRep_SynchronizationPosition();                                                                                    // [0x1864f00] Final|Native|Protected 
	// Function /Script/WTL.WTLMovingAnomaly.OnNutLeave
	void OnNutLeave(AWTLNut* Nut);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnNutEnter
	void OnNutEnter(AWTLNut* Nut);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnNPCLeave
	void OnNPCLeave(AWTLEnemyNPC* NPC);                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnNPCEnter
	void OnNPCEnter(AWTLEnemyNPC* NPC);                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnMonsterLeave
	void OnMonsterLeave(AWTLMonsterPawn* Monster);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnMonsterEnter
	void OnMonsterEnter(AWTLMonsterPawn* Monster);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLMovingAnomaly.OnCharacterLeave
	void OnCharacterLeave(AWTLCharacter* Character);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnCharacterEnter
	void OnCharacterEnter(AWTLCharacter* Character);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMovingAnomaly.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMovingAnomaly.GetNPCInVolume
	TArray<AWTLEnemyNPC*> GetNPCInVolume();                                                                                  // [0x1864cc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMovingAnomaly.GetMonstersInVolume
	TArray<AWTLMonsterPawn*> GetMonstersInVolume();                                                                          // [0x1864d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMovingAnomaly.GetCharactersInVolume
	TArray<AWTLCharacter*> GetCharactersInVolume();                                                                          // [0x1864e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMovingAnomaly.GetActorsInVolume
	TArray<AActor*> GetActorsInVolume();                                                                                     // [0x1864c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLActivatableMovingAnomaly
/// Size: 0x0038 (0x0002C8 - 0x000300)
class AWTLActivatableMovingAnomaly : public AWTLMovingAnomaly
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x02C8   (0x0010)  MISSED
	float                                              MinEnergy;                                                  // 0x02D8   (0x0004)  
	float                                              MaxEnergy;                                                  // 0x02DC   (0x0004)  
	float                                              EnergyPerSecond;                                            // 0x02E0   (0x0004)  
	float                                              Energy;                                                     // 0x02E4   (0x0004)  
	EWTLActivatableAnomalyState                        State;                                                      // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02E9   (0x0003)  MISSED
	float                                              EnergyToActivate;                                           // 0x02EC   (0x0004)  
	float                                              ActivationDelay;                                            // 0x02F0   (0x0004)  
	float                                              StayActivatedTime;                                          // 0x02F4   (0x0004)  
	float                                              EnergyDecrementAfterActivation;                             // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02FC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLActivatableMovingAnomaly.ServerOnActivated
	void ServerOnActivated();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableMovingAnomaly.OnRep_State
	void OnRep_State();                                                                                                      // [0x1775af0] Final|Native|Private 
	// Function /Script/WTL.WTLActivatableMovingAnomaly.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x1775b60] Final|Native|Private 
	// Function /Script/WTL.WTLActivatableMovingAnomaly.OnEnergyChanged
	void OnEnergyChanged(float EnergyValue);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableMovingAnomaly.ClientOnBeginActivate
	void ClientOnBeginActivate();                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableMovingAnomaly.ClientOnActivated
	void ClientOnActivated();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLActivatableObject
/// Size: 0x0020 (0x000220 - 0x000240)
class AWTLActivatableObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0220   (0x0018)  MISSED
	float                                              PostActivationCooldown;                                     // 0x0238   (0x0004)  
	float                                              ActivationDelay;                                            // 0x023C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLActivatableObject.BP_NotifyActivationStarted
	void BP_NotifyActivationStarted(AWTLCharacter* Activator);                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableObject.BP_DeactivateObject
	void BP_DeactivateObject(AWTLCharacter* Activator);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLActivatableObject.BP_CanBeActivated
	bool BP_CanBeActivated();                                                                                                // [0x1775fb0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLActivatableObject.BP_ActivateObject
	void BP_ActivateObject(AWTLCharacter* Activator);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLActivatableObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLActivatableObjectInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLActivatorVolume
/// Size: 0x0028 (0x000258 - 0x000280)
class AWTLActivatorVolume : public AVolume
{ 
public:
	TArray<AWTLActivatableObject*>                     ObjectsToActivate;                                          // 0x0258   (0x0010)  
	int32_t                                            CharactersCountToActivate;                                  // 0x0268   (0x0004)  
	unsigned char                                      UnknownData00_6[0x14];                                      // 0x026C   (0x0014)  MISSED


	/// Functions
	// Function /Script/WTL.WTLActivatorVolume.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1776210] Final|Native|Private 
	// Function /Script/WTL.WTLActivatorVolume.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1776590] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLAIAnimInstance
/// Size: 0x0040 (0x0002C0 - 0x000300)
class UWTLAIAnimInstance : public UAnimInstance
{ 
public:
	float                                              VelocitySpeed;                                              // 0x02C0   (0x0004)  
	float                                              ForwardSpeed;                                               // 0x02C4   (0x0004)  
	float                                              RightSpeed;                                                 // 0x02C8   (0x0004)  
	float                                              UpSpeed;                                                    // 0x02CC   (0x0004)  
	FVector                                            Direction;                                                  // 0x02D0   (0x000C)  
	FRotator                                           RotationDelta;                                              // 0x02DC   (0x000C)  
	FVector                                            VectorDelta;                                                // 0x02E8   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x02F4   (0x000C)  MISSED
};

/// Class /Script/WTL.WTLAICharacter
/// Size: 0x04B0 (0x0004C0 - 0x000970)
class AWTLAICharacter : public ACharacter
{ 
public:
	unsigned char                                      UnknownData00_2[0x1D8];                                     // 0x04C0   (0x01D8)  MISSED
	TMap<EWTLWeaponType, float>                        WeaponTypeDamageMultipliers;                                // 0x0698   (0x0050)  
	TEnumAsByte<EPhysicalSurface>                      PhysicalSurface;                                            // 0x06E8   (0x0001)  
	char                                               Level;                                                      // 0x06E9   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x06EA   (0x0002)  MISSED
	float                                              HeadArmor;                                                  // 0x06EC   (0x0004)  
	float                                              BodyArmor;                                                  // 0x06F0   (0x0004)  
	float                                              ArmsArmor;                                                  // 0x06F4   (0x0004)  
	float                                              LegsArmor;                                                  // 0x06F8   (0x0004)  
	float                                              FeetArmor;                                                  // 0x06FC   (0x0004)  
	float                                              LifespanAfterDeath;                                         // 0x0700   (0x0004)  
	bool                                               IsBurst;                                                    // 0x0704   (0x0001)  
	char                                               PercentDamageBurst;                                         // 0x0705   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0706   (0x0002)  MISSED
	float                                              TakeDamageBurst;                                            // 0x0708   (0x0004)  
	char                                               MinLevelBurst;                                              // 0x070C   (0x0001)  
	char                                               MaxLevelBurst;                                              // 0x070D   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x070E   (0x0002)  MISSED
	FWTLStorageContent                                 m_PublicStorageContent;                                     // 0x0710   (0x00A8)  
	FWTLStorageContent                                 m_SummaryStorageContent;                                    // 0x07B8   (0x00A8)  
	FWTLStorageContent                                 m_PrivateStorageContent;                                    // 0x0860   (0x00A8)  
	TArray<FWTLItemDropInfo>                           AdditionalLoot;                                             // 0x0908   (0x0010)  
	char                                               MaxLevel;                                                   // 0x0918   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0919   (0x0003)  MISSED
	float                                              ExperienceDropCountMultiplierDelta;                         // 0x091C   (0x0004)  
	float                                              ExperienceDropChanceMultiplierDelta;                        // 0x0920   (0x0004)  
	float                                              m_MultiplierParameters;                                     // 0x0924   (0x0004)  
	FVector                                            m_LocationDead;                                             // 0x0928   (0x000C)  
	float                                              m_Health;                                                   // 0x0934   (0x0004)  
	bool                                               m_bIsInStealthMode;                                         // 0x0938   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0939   (0x0003)  MISSED
	int32_t                                            AICharacterID;                                              // 0x093C   (0x0004)  
	char                                               IDIcon;                                                     // 0x0940   (0x0001)  
	unsigned char                                      UnknownData06_5[0x7];                                       // 0x0941   (0x0007)  MISSED
	UPhysicsAsset*                                     MeshPhysicsAsset;                                           // 0x0948   (0x0008)  
	FRotator                                           OffsetRotationMesh;                                         // 0x0950   (0x000C)  
	float                                              DangerLevel;                                                // 0x095C   (0x0004)  
	float                                              KillZ;                                                      // 0x0960   (0x0004)  
	unsigned char                                      UnknownData07_6[0xC];                                       // 0x0964   (0x000C)  MISSED


	/// Functions
	// Function /Script/WTL.WTLAICharacter.SetStealthMode
	void SetStealthMode(bool Value);                                                                                         // [0x1777f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.SetSpawn
	void SetSpawn(AWTLSpawnAICharacter* Value);                                                                              // [0x17775a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.SetLifetime
	void SetLifetime(float Delta);                                                                                           // [0x17776a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.SetLifespanAfterDeath
	void SetLifespanAfterDeath(float Value);                                                                                 // [0x17774d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.SetApplyWeaponTypeDamageMultipliers
	void SetApplyWeaponTypeDamageMultipliers(bool Value);                                                                    // [0x1777830] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x1778070] Final|Native|Public  
	// Function /Script/WTL.WTLAICharacter.OnRep_IsInStealthMode
	void OnRep_IsInStealthMode();                                                                                            // [0x1778090] Final|Native|Public  
	// Function /Script/WTL.WTLAICharacter.OnRep_Health
	void OnRep_Health();                                                                                                     // [0xe77850] Final|Native|Public  
	// Function /Script/WTL.WTLAICharacter.NetMulticast_OnToDeath
	void NetMulticast_OnToDeath(FVector DeathPosition, FVector_NetQuantize ActorRotation, FVector_NetQuantize MeshRotation, FWTLAICharacterDeathData DeathData); // [0x1777940] Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults 
	// Function /Script/WTL.WTLAICharacter.NetMulticast_OnDeath
	void NetMulticast_OnDeath(FVector DeathPosition, FVector_NetQuantize ActorRotation, FVector_NetQuantize MeshRotation, FWTLAICharacterDeathData DeathData); // [0x1777c20] Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults 
	// Function /Script/WTL.WTLAICharacter.KillAiCharacter
	void KillAiCharacter();                                                                                                  // [0x1777f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.K2_OnToDeathEvent
	void K2_OnToDeathEvent(FVector& DeathPosition, FVector_NetQuantize ActorRotation, FVector_NetQuantize MeshRotation, FWTLAICharacterDeathData DeathData); // [0x1ad0090] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacter.K2_OnStealthModeChanged
	void K2_OnStealthModeChanged(bool Value);                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacter.K2_OnDeathEvent
	void K2_OnDeathEvent(FWTLAICharacterDeathData DeathData);                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacter.K2_OnBurst
	void K2_OnBurst(FWTLAICharacterDeathData DeathData);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacter.IsVisible
	bool IsVisible();                                                                                                        // [0x1777910] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAICharacter.IsApplyWeaponTypeDamageMultipliers
	bool IsApplyWeaponTypeDamageMultipliers();                                                                               // [0x1777810] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLAICharacter.IsAlive
	bool IsAlive();                                                                                                          // [0x17777e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAICharacter.GetSpawn
	AWTLSpawnAICharacter* GetSpawn();                                                                                        // [0x1777680] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLAICharacter.GetMaxHealth
	float GetMaxHealth();                                                                                                    // [0x1186200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAICharacter.GetHealth
	float GetHealth();                                                                                                       // [0x1777780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAICharacter.GetDangerLevel
	float GetDangerLevel();                                                                                                  // [0x17777a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAICharacter.GetAICharacterID
	int32_t GetAICharacterID();                                                                                              // [0x17777c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/WTL.WTLAICharacterController
/// Size: 0x01F8 (0x000328 - 0x000520)
class AWTLAICharacterController : public AAIController
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0328   (0x0008)  MISSED
	TEnumAsByte<ETraceTypeQuery>                       CollisionTraceQuery;                                        // 0x0330   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0331   (0x0003)  MISSED
	float                                              PredictionUpdatePeriod;                                     // 0x0334   (0x0004)  
	unsigned char                                      UnknownData02_6[0x1E8];                                     // 0x0338   (0x01E8)  MISSED


	/// Functions
	// Function /Script/WTL.WTLAICharacterController.OnTouchSenseUpdated
	void OnTouchSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                              // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacterController.OnTeamSenseUpdated
	void OnTeamSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                               // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacterController.OnSightSenseUpdated
	void OnSightSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                              // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacterController.OnPredictionUpdate
	void OnPredictionUpdate();                                                                                               // [0x17794e0] Final|Native|Public  
	// Function /Script/WTL.WTLAICharacterController.OnPredictionSenseUpdated
	void OnPredictionSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                         // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacterController.OnPerceptionUpdated
	void OnPerceptionUpdated(TArray<AActor*>& UpdatedActors);                                                                // [0x1779410] Final|Native|Public|HasOutParms 
	// Function /Script/WTL.WTLAICharacterController.OnHearingSenseUpdated
	void OnHearingSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                            // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacterController.OnDamageSenseUpdated
	void OnDamageSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State, float Value);                // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLAICharacterController.OnActorPerceptionUpdated
	void OnActorPerceptionUpdated(AActor* Actor, FAIStimulus Stimulus);                                                      // [0x17791f0] Final|Native|Public  
	// Function /Script/WTL.WTLAICharacterController.GetMyPawn
	AWTLAICharacter* GetMyPawn();                                                                                            // [0x1779500] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/WTL.WTLAIDestroyObject
/// Size: 0x0020 (0x000220 - 0x000240)
class AWTLAIDestroyObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	float                                              m_Condition;                                                // 0x0230   (0x0004)  
	float                                              m_MaxCondition;                                             // 0x0234   (0x0004)  
	bool                                               m_ObjectIsDestroyed;                                        // 0x0238   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0239   (0x0003)  MISSED
	float                                              ActivationTime;                                             // 0x023C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLAIDestroyObject.OnChangeCondition
	void OnChangeCondition(float DeltaCondition);                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAIDestroyObject.BPUse
	void BPUse(AWTLCharacter* Character);                                                                                    // [0x1779a60] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAIDestroyObject.BPSetHighlightState
	void BPSetHighlightState(bool Value);                                                                                    // [0x1779890] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAIDestroyObject.BPGetDisplayText
	FString BPGetDisplayText(AWTLCharacter* Character);                                                                      // [0x1779760] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAIDestroyObject.BPCanBeUsed
	bool BPCanBeUsed(AWTLCharacter* Character);                                                                              // [0x1779970] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAIDestroyObject.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0x1779c20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAIDestroyObject.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x1779b40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAIDestroyObject.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x1779d30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAIDestroyObject.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x1779ca0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAIDestroyObject.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x1779cf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLAIDestroyObject.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x1779c60] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLAIFlying
/// Size: 0x0000 (0x000970 - 0x000970)
class AWTLAIFlying : public AWTLAICharacter
{ 
public:
};

/// Class /Script/WTL.WTLAIFlyingController
/// Size: 0x0000 (0x000520 - 0x000520)
class AWTLAIFlyingController : public AWTLAICharacterController
{ 
public:
};

/// Class /Script/WTL.WTLAIMonsterPawn
/// Size: 0x0000 (0x0004C0 - 0x0004C0)
class AWTLAIMonsterPawn : public ACharacter
{ 
public:
};

/// Class /Script/WTL.WTLAIPerceptionComponent
/// Size: 0x0000 (0x000190 - 0x000190)
class UWTLAIPerceptionComponent : public UAIPerceptionComponent
{ 
public:
};

/// Class /Script/WTL.WTLAIPerceptionSystem
/// Size: 0x0000 (0x000130 - 0x000130)
class UWTLAIPerceptionSystem : public UAIPerceptionSystem
{ 
public:
};

/// Class /Script/WTL.WTLInteractiveObject
/// Size: 0x0040 (0x000220 - 0x000260)
class AWTLInteractiveObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	FText                                              m_LocalizationDisplayText;                                  // 0x0228   (0x0018)  
	FString                                            m_DisplayText;                                              // 0x0240   (0x0010)  
	float                                              ActivationTime;                                             // 0x0250   (0x0004)  
	float                                              MaxDistanceToStartUse;                                      // 0x0254   (0x0004)  
	UAnimMontage*                                      CharacterUsingAnimMontage;                                  // 0x0258   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLInteractiveObject.BPUse
	void BPUse(AWTLCharacter* Character);                                                                                    // [0x1779a60] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLInteractiveObject.BPSetHighlightState
	void BPSetHighlightState(bool Value);                                                                                    // [0x1779890] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLInteractiveObject.BPGetDisplayText
	FString BPGetDisplayText(AWTLCharacter* Character);                                                                      // [0x1779760] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLInteractiveObject.BPCanBeUsed
	bool BPCanBeUsed(AWTLCharacter* Character);                                                                              // [0x1779970] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLStorageBox
/// Size: 0x03D0 (0x000260 - 0x000630)
class AWTLStorageBox : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0260   (0x0008)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0268   (0x0008)  
	unsigned char                                      UnknownData01_5[0x170];                                     // 0x0270   (0x0170)  MISSED
	FWTLStorageContent                                 m_PublicStorageContent;                                     // 0x03E0   (0x00A8)  
	FWTLStorageContent                                 m_PrivateStorageContent;                                    // 0x0488   (0x00A8)  
	FWTLStorageContent                                 m_SummaryStorageContent;                                    // 0x0530   (0x00A8)  
	unsigned char                                      UnknownData02_5[0x20];                                      // 0x05D8   (0x0020)  MISSED
	FText                                              Name;                                                       // 0x05F8   (0x0018)  
	char                                               SlotsCount;                                                 // 0x0610   (0x0001)  
	bool                                               CanStoreItems;                                              // 0x0611   (0x0001)  
	unsigned char                                      UnknownData03_5[0x6];                                       // 0x0612   (0x0006)  MISSED
	TArray<FWTLItemSpawnInfo>                          SpawnItems;                                                 // 0x0618   (0x0010)  
	bool                                               CanUseLocationItemsSpawn;                                   // 0x0628   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0629   (0x0003)  MISSED
	int32_t                                            MaxLocationItemsSpawnQuality;                               // 0x062C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLStorageBox.SetCharacterDropChanceMultiplier
	void SetCharacterDropChanceMultiplier(AWTLCharacter* Character, float Multiplier);                                       // [0x192d740] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLStorageBox.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x192db20] Final|Native|Protected 
	// Function /Script/WTL.WTLStorageBox.AllowSpecialLootForCharacter
	void AllowSpecialLootForCharacter(AWTLCharacter* Character, float SpecialValue);                                         // [0x192d360] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLAirDropStorage
/// Size: 0x00A0 (0x000630 - 0x0006D0)
class AWTLAirDropStorage : public AWTLStorageBox
{ 
public:
	UWTLRadialForceComponent*                          RadialForce;                                                // 0x0630   (0x0008)  
	UParticleSystemComponent*                          Highlighting;                                               // 0x0638   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0640   (0x0010)  MISSED
	float                                              m_NewLifeTime;                                              // 0x0650   (0x0004)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x0654   (0x0028)  MISSED
	bool                                               m_bShowAll;                                                 // 0x067C   (0x0001)  
	bool                                               m_bShowPositionOnLocation;                                  // 0x067D   (0x0001)  
	bool                                               m_bSpawned;                                                 // 0x067E   (0x0001)  
	bool                                               UseCameraShake;                                             // 0x067F   (0x0001)  
	UClass*                                            CameraShake;                                                // 0x0680   (0x0008)  
	float                                              MaxDistance;                                                // 0x0688   (0x0004)  
	float                                              CameraShakeValue;                                           // 0x068C   (0x0004)  
	bool                                               HideUsableItem;                                             // 0x0690   (0x0001)  
	bool                                               RemoveAiming;                                               // 0x0691   (0x0001)  
	bool                                               NeedToKillCharacters;                                       // 0x0692   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x0693   (0x0001)  MISSED
	float                                              KillCharactersMaxDistance;                                  // 0x0694   (0x0004)  
	TWeakObjectPtr<UClass*>                            DestroyFX;                                                  // 0x0698   (0x0028)  
	float                                              TimeBeforeShowBox;                                          // 0x06C0   (0x0004)  
	float                                              LocationHighlightingTime;                                   // 0x06C4   (0x0004)  
	bool                                               CanSpawnGuard;                                              // 0x06C8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x06C9   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLAirDropStorage.OnRep_NewLifeTime
	void OnRep_NewLifeTime();                                                                                                // [0x177b2f0] Final|Native|Private 
	// Function /Script/WTL.WTLAirDropStorage.OnRep_bShowPosition
	void OnRep_bShowPosition();                                                                                              // [0x177b290] Final|Native|Private 
	// Function /Script/WTL.WTLAirDropStorage.OnRep_bShowAll
	void OnRep_bShowAll();                                                                                                   // [0x177b2d0] Final|Native|Private 
	// Function /Script/WTL.WTLAirDropStorage.NetMulsticast_Destroy
	void NetMulsticast_Destroy();                                                                                            // [0x177b270] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLAirDropStorage.BPShowAll
	void BPShowAll(bool ShowAll);                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLAirDropStorage.BPDestroy
	void BPDestroy();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLAITargetInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLAITargetInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLAmbientSound
/// Size: 0x0010 (0x000228 - 0x000238)
class AWTLAmbientSound : public AAmbientSound
{ 
public:
	unsigned char                                      UnknownData00_2[0xC];                                       // 0x0228   (0x000C)  MISSED
	EWTLAmbientSoundLocationType                       LocationType;                                               // 0x0234   (0x0001)  
	EWTLAmbientSoundDayTimeType                        DayTimeType;                                                // 0x0235   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0236   (0x0002)  MISSED
};

/// Class /Script/WTL.WTLAmmoCase
/// Size: 0x0040 (0x000220 - 0x000260)
class AWTLAmmoCase : public AActor
{ 
public:
	UCapsuleComponent*                                 CollisionComp;                                              // 0x0220   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x0228   (0x0008)  
	float                                              DropLifeSpan;                                               // 0x0230   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0234   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        DropSoundEvent;                                             // 0x0238   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLAmmoCase.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x177be60] Final|Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/WTL.WTLAnimalBase
/// Size: 0x0000 (0x000220 - 0x000220)
class AWTLAnimalBase : public AActor
{ 
public:
};

/// Class /Script/WTL.WTLAnimNotifyAmmoCaseEject
/// Size: 0x0048 (0x000038 - 0x000080)
class UWTLAnimNotifyAmmoCaseEject : public UAnimNotify
{ 
public:
	TWeakObjectPtr<UClass*>                            AmmoCaseClass;                                              // 0x0038   (0x0028)  
	float                                              AmmoCaseForce;                                              // 0x0060   (0x0004)  
	float                                              ForceRandomMultiplierValue;                                 // 0x0064   (0x0004)  
	FVector                                            AngularImpulse;                                             // 0x0068   (0x000C)  
	float                                              RandomRotationHalfCone;                                     // 0x0074   (0x0004)  
	FName                                              SocketName;                                                 // 0x0078   (0x0008)  
};

/// Class /Script/WTL.WTLAnimNotifyParticleAmmoCaseEject
/// Size: 0x0018 (0x000038 - 0x000050)
class UWTLAnimNotifyParticleAmmoCaseEject : public UAnimNotify
{ 
public:
	FVector                                            AmmoCaseInitialVelocity;                                    // 0x0038   (0x000C)  
	FName                                              InitialVelocityParamName;                                   // 0x0044   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLAnimNotifyParticleEffect
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UWTLAnimNotifyParticleEffect : public UAnimNotify
{ 
public:
	TWeakObjectPtr<UParticleSystem*>                   PSTemplate;                                                 // 0x0038   (0x0028)  
	FVector                                            LocationOffset;                                             // 0x0060   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x006C   (0x000C)  
	FVector                                            EmitterScale;                                               // 0x0078   (0x000C)  
	unsigned char                                      UnknownData00_5[0x1C];                                      // 0x0084   (0x001C)  MISSED
	bool                                               Attached;                                                   // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x3];                                       // 0x00A1   (0x0003)  MISSED
	FName                                              SocketName;                                                 // 0x00A4   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLAnimNotifyGunshot
/// Size: 0x0060 (0x000038 - 0x000098)
class UWTLAnimNotifyGunshot : public UAnimNotify
{ 
public:
	TWeakObjectPtr<UFMODEvent*>                        EditorEvent;                                                // 0x0038   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   EditParticleSystem;                                         // 0x0060   (0x0028)  
	FVector                                            EditorParticlesScale;                                       // 0x0088   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLAnimNotifyFootstep
/// Size: 0x0028 (0x000038 - 0x000060)
class UWTLAnimNotifyFootstep : public UAnimNotify
{ 
public:
	TWeakObjectPtr<UFMODEvent*>                        EditorEvent;                                                // 0x0038   (0x0028)  
};

/// Class /Script/WTL.WTLAnimNotifyCharacterBreath
/// Size: 0x0028 (0x000038 - 0x000060)
class UWTLAnimNotifyCharacterBreath : public UAnimNotify
{ 
public:
	TWeakObjectPtr<UFMODEvent*>                        EditorEvent;                                                // 0x0038   (0x0028)  
};

/// Class /Script/WTL.WTLAnimNotifyPlayCharacterSound
/// Size: 0x0000 (0x000058 - 0x000058)
class UWTLAnimNotifyPlayCharacterSound : public UAnimNotify_PlaySound
{ 
public:
};

/// Class /Script/WTL.WTLCharacterAdditionalMeshNotifyState
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UWTLCharacterAdditionalMeshNotifyState : public UAnimNotifyState
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0030   (0x0008)  MISSED
	FName                                              MeshComponentName;                                          // 0x0038   (0x0008)  
	TWeakObjectPtr<UStaticMesh*>                       Mesh;                                                       // 0x0040   (0x0028)  
	FName                                              AttachBoneName;                                             // 0x0068   (0x0008)  
	FTransform                                         MeshRelativeTransform;                                      // 0x0070   (0x0030)  
};

/// Class /Script/WTL.WTLCharacterAddStaticMeshNotify
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UWTLCharacterAddStaticMeshNotify : public UAnimNotify
{ 
public:
	UStaticMeshComponent*                              m_MeshComponent;                                            // 0x0038   (0x0008)  
	FName                                              MeshComponentName;                                          // 0x0040   (0x0008)  
	TWeakObjectPtr<UStaticMesh*>                       Mesh;                                                       // 0x0048   (0x0028)  
	FName                                              AttachBoneName;                                             // 0x0070   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0078   (0x0008)  MISSED
	FTransform                                         MeshRelativeTransform;                                      // 0x0080   (0x0030)  
};

/// Class /Script/WTL.WTLCharacterRemoveStaticMeshNotify
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLCharacterRemoveStaticMeshNotify : public UAnimNotify
{ 
public:
	FName                                              MeshComponentName;                                          // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLCharacterHandsNotifyState
/// Size: 0x0008 (0x000030 - 0x000038)
class UWTLCharacterHandsNotifyState : public UAnimNotifyState
{ 
public:
	EWTLHandsState                                     StartHandsState;                                            // 0x0030   (0x0001)  
	EWTLHandsState                                     EndHandsState;                                              // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Class /Script/WTL.WTLCharacterHandsStateChange
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLCharacterHandsStateChange : public UAnimNotify
{ 
public:
	EWTLHandsState                                     HandsState;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLReloadingStateChange
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLReloadingStateChange : public UAnimNotify
{ 
public:
	EWTLReloadingNotifyType                            NotifyType;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLUsableItemStateChange
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLUsableItemStateChange : public UAnimNotify
{ 
public:
	EWTLUsableItemState                                State;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLUsableItemCustomTrigger
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLUsableItemCustomTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLVehicleStateChange
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLVehicleStateChange : public UAnimNotify
{ 
public:
	EWTLVehicleState                                   State;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLVehicleCustomTrigger
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLVehicleCustomTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLPlaceableStuffCustomTrigger
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLPlaceableStuffCustomTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLNPCCustomTrigger
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLNPCCustomTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLMonsterActionTrigger
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLMonsterActionTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLMonsterAnimationTrigger
/// Size: 0x0010 (0x000038 - 0x000048)
class UWTLMonsterAnimationTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
	bool                                               Value;                                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            ID;                                                         // 0x0044   (0x0004)  
};

/// Class /Script/WTL.WTLNPCActionTrigger
/// Size: 0x0008 (0x000038 - 0x000040)
class UWTLNPCActionTrigger : public UAnimNotify
{ 
public:
	FName                                              TriggerName;                                                // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLMonsterEffect
/// Size: 0x0050 (0x000038 - 0x000088)
class UWTLMonsterEffect : public UAnimNotify
{ 
public:
	TMap<uint16_t, FWTLMonsterAction>                  ActionsPerMonsterID;                                        // 0x0038   (0x0050)  
};

/// Class /Script/WTL.WTLAnomalyWayPoint
/// Size: 0x0008 (0x000220 - 0x000228)
class AWTLAnomalyWayPoint : public AActor
{ 
public:
	AWTLAnomalyWayPoint*                               NextWayPoint;                                               // 0x0220   (0x0008)  
};

/// Class /Script/WTL.WTLArenaState
/// Size: 0x00A8 (0x000220 - 0x0002C8)
class AWTLArenaState : public AInfo
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0220   (0x0028)  MISSED
	EWTLArenaMatchState                                m_MatchState;                                               // 0x0248   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0249   (0x0003)  MISSED
	float                                              m_NextMatchStateChangeServerTime;                           // 0x024C   (0x0004)  
	TArray<FWTLArenaFactionScore>                      m_FactionScores;                                            // 0x0250   (0x0010)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x0260   (0x0010)  MISSED
	TArray<FWTLArenaLeaderboardRecord>                 m_Leaderboard;                                              // 0x0270   (0x0010)  
	TArray<FWTLArenaReward>                            Rewards;                                                    // 0x0280   (0x0010)  
	unsigned char                                      UnknownData03_5[0x20];                                      // 0x0290   (0x0020)  MISSED
	FTimespan                                          MatchWaitDuration;                                          // 0x02B0   (0x0008)  
	FTimespan                                          MatchDuration;                                              // 0x02B8   (0x0008)  
	FTimespan                                          MatchDoneDuration;                                          // 0x02C0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLArenaState.OnRep_MatchState
	void OnRep_MatchState();                                                                                                 // [0x17802d0] Final|Native|Protected 
};

/// Class /Script/WTL.WTLBallisticsSystem
/// Size: 0x0158 (0x000028 - 0x000180)
class UWTLBallisticsSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x148];                                     // 0x0028   (0x0148)  MISSED
	bool                                               bDrawActualTrajectory;                                      // 0x0170   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0171   (0x0003)  MISSED
	float                                              DebugInfoLifetime;                                          // 0x0174   (0x0004)  
	float                                              ActualTrajectoryThickness;                                  // 0x0178   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x017C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLBPLibraryCharacter
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLBPLibraryCharacter : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/WTL.WTLBPLibraryCommon
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLBPLibraryCommon : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/WTL.WTLBPLibraryQuestSystem
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLBPLibraryQuestSystem : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/WTL.WTLBTService_AICheckForAttack
/// Size: 0x0000 (0x000098 - 0x000098)
class UWTLBTService_AICheckForAttack : public UBTService_BlackboardBase
{ 
public:
};

/// Class /Script/WTL.WTLBTService_BlueprintBase
/// Size: 0x0000 (0x000098 - 0x000098)
class UWTLBTService_BlueprintBase : public UBTService_BlueprintBase
{ 
public:
};

/// Class /Script/WTL.WTLBTService_CheckEnemy
/// Size: 0x0018 (0x000098 - 0x0000B0)
class UWTLBTService_CheckEnemy : public UBTService_BlackboardBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0098   (0x0014)  MISSED
	EWTLMonsterState                                   SetState;                                                   // 0x00AC   (0x0001)  
	bool                                               ClearKeyVisibleEnemy;                                       // 0x00AD   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x00AE   (0x0002)  MISSED
};

/// Class /Script/WTL.WTLBTService_CheckForFarAttack
/// Size: 0x0000 (0x000098 - 0x000098)
class UWTLBTService_CheckForFarAttack : public UBTService_BlackboardBase
{ 
public:
};

/// Class /Script/WTL.WTLBTService_CheckForJump
/// Size: 0x0008 (0x000098 - 0x0000A0)
class UWTLBTService_CheckForJump : public UBTService_BlackboardBase
{ 
public:
	EWTLMonsterState                                   SetState;                                                   // 0x0098   (0x0001)  
	EWTLMonsterStateFollowTarget                       SetStateFollowTarget;                                       // 0x0099   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x009A   (0x0006)  MISSED
};

/// Class /Script/WTL.WTLBTService_Enemy_Sensing
/// Size: 0x0070 (0x000070 - 0x0000E0)
class UWTLBTService_Enemy_Sensing : public UBTService
{ 
public:
	bool                                               bSensePlayers;                                              // 0x0070   (0x0001)  
	bool                                               bSenseOtherEnemies;                                         // 0x0071   (0x0001)  
	bool                                               bHearNoises;                                                // 0x0072   (0x0001)  
	bool                                               bInterruptCurrentTaskOnSpotted;                             // 0x0073   (0x0001)  
	float                                              SightRadius;                                                // 0x0074   (0x0004)  
	float                                              PeripheralVisionAngle;                                      // 0x0078   (0x0004)  
	float                                              HearingMaxSoundAge;                                         // 0x007C   (0x0004)  
	float                                              HearingThreshold;                                           // 0x0080   (0x0004)  
	float                                              LOSHearingThreshold;                                        // 0x0084   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     SoundOcclusionChannel;                                      // 0x0088   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0089   (0x0007)  MISSED
	FBlackboardKeySelector                             TargetSpottedKey;                                           // 0x0090   (0x0028)  
	FBlackboardKeySelector                             RemoteLocationListenedKey;                                  // 0x00B8   (0x0028)  
};

/// Class /Script/WTL.WTLBTService_FrightRadius
/// Size: 0x0018 (0x000098 - 0x0000B0)
class UWTLBTService_FrightRadius : public UBTService_BlackboardBase
{ 
public:
	EWTLMonsterState                                   SetState;                                                   // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	float                                              ApplyRadius;                                                // 0x009C   (0x0004)  
	float                                              DelayExecution;                                             // 0x00A0   (0x0004)  
	float                                              RandomDelayExecution;                                       // 0x00A4   (0x0004)  
	float                                              m_CurrentDelayExecution;                                    // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLBTService_MonsterMovementMode
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTService_MonsterMovementMode : public UBTService
{ 
public:
	EWTLMonsterMovementMode                            MovementMode;                                               // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTService_SightAI
/// Size: 0x0008 (0x000098 - 0x0000A0)
class UWTLBTService_SightAI : public UBTService_BlackboardBase
{ 
public:
	EWTLMonsterState                                   SetState;                                                   // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTService_StateIfHealthLess
/// Size: 0x0010 (0x000098 - 0x0000A8)
class UWTLBTService_StateIfHealthLess : public UBTService_BlackboardBase
{ 
public:
	EWTLMonsterState                                   SetState;                                                   // 0x0098   (0x0001)  
	EWTMonsterSecondaryState                           SetSecondaryState;                                          // 0x0099   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x009A   (0x0002)  MISSED
	float                                              HealthPercent;                                              // 0x009C   (0x0004)  
	bool                                               InverseCondition;                                           // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTTask_ActionFromBlackBoard
/// Size: 0x0000 (0x000098 - 0x000098)
class UWTLBTTask_ActionFromBlackBoard : public UBTTask_BlackboardBase
{ 
public:
};

/// Class /Script/WTL.WTLBTTask_AvailableAction
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_AvailableAction : public UBTTaskNode
{ 
public:
	bool                                               bExceptMainAction;                                          // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTTask_BlueprintBase
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UWTLBTTask_BlueprintBase : public UBTTask_BlueprintBase
{ 
public:
};

/// Class /Script/WTL.WTLBTTask_EnemyNPC_MoveTo
/// Size: 0x0040 (0x000098 - 0x0000D8)
class UWTLBTTask_EnemyNPC_MoveTo : public UBTTask_BlackboardBase
{ 
public:
	float                                              AcceptableRadius;                                           // 0x0098   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x009C   (0x0004)  MISSED
	UClass*                                            FilterClass;                                                // 0x00A0   (0x0008)  
	float                                              ObservedBlackboardValueTolerance;                           // 0x00A8   (0x0004)  
	bool                                               bObserveBlackboardValue;                                    // 0x00AC:0 (0x0001)  
	bool                                               bAllowStrafe;                                               // 0x00AC:1 (0x0001)  
	bool                                               bAllowPartialPath;                                          // 0x00AC:2 (0x0001)  
	bool                                               bTrackMovingGoal;                                           // 0x00AC:3 (0x0001)  
	bool                                               bProjectGoalLocation;                                       // 0x00AC:4 (0x0001)  
	bool                                               bReachTestIncludesAgentRadius;                              // 0x00AC:5 (0x0001)  
	bool                                               bReachTestIncludesGoalRadius;                               // 0x00AC:6 (0x0001)  
	bool                                               bStopOnOverlap;                                             // 0x00AC:7 (0x0001)  
	bool                                               bStopOnOverlapNeedsUpdate;                                  // 0x00AD:0 (0x0001)  
	unsigned char                                      UnknownData01_4[0x2];                                       // 0x00AE   (0x0002)  MISSED
	FBlackboardKeySelector                             AcceptableRadiusKey;                                        // 0x00B0   (0x0028)  
};

/// Class /Script/WTL.WTLBTTask_FindClosestMonster
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_FindClosestMonster : public UBTTaskNode
{ 
public:
	float                                              ApplyRadius;                                                // 0x0070   (0x0004)  
	bool                                               EdibleForMonster;                                           // 0x0074   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Class /Script/WTL.WTLBTTask_FrightRadius
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_FrightRadius : public UBTTaskNode
{ 
public:
	float                                              ApplyRadius;                                                // 0x0070   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLBTTask_Idle
/// Size: 0x0000 (0x000070 - 0x000070)
class UWTLBTTask_Idle : public UBTTaskNode
{ 
public:
};

/// Class /Script/WTL.WTLBTTask_MonsterAction
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_MonsterAction : public UBTTaskNode
{ 
public:
	EWTLMonsterActionType                              Action;                                                     // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTTask_MoveDirectlyToward
/// Size: 0x0030 (0x0000B8 - 0x0000E8)
class UWTLBTTask_MoveDirectlyToward : public UBTTask_MoveDirectlyToward
{ 
public:
	bool                                               bUseAcceptableRadiusFromBlackboard;                         // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FBlackboardKeySelector                             AcceptableRadiusBlackboardKey;                              // 0x00C0   (0x0028)  
};

/// Class /Script/WTL.WTLBTTask_RunBehaviorStealth
/// Size: 0x0010 (0x000078 - 0x000088)
class UWTLBTTask_RunBehaviorStealth : public UBTTask_RunBehavior
{ 
public:
	TArray<EWTLMonsterState>                           StatesForExecute;                                           // 0x0078   (0x0010)  
};

/// Class /Script/WTL.WTLBTTask_SetAIState
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_SetAIState : public UBTTaskNode
{ 
public:
	EWTLMonsterState                                   SetState;                                                   // 0x0070   (0x0001)  
	EWTMonsterSecondaryState                           SetSecondaryState;                                          // 0x0071   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0072   (0x0006)  MISSED
};

/// Class /Script/WTL.WTLBTTask_SetMovementMode
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_SetMovementMode : public UBTTaskNode
{ 
public:
	EWTLMonsterMovementMode                            MovementMode;                                               // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTTask_SetStealthMode
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_SetStealthMode : public UBTTaskNode
{ 
public:
	bool                                               Value;                                                      // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLBTTask_WTLMoveTo
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UWTLBTTask_WTLMoveTo : public UBTTask_MoveTo
{ 
public:
	bool                                               bUseAcceptableRadiusFromBlackboard;                         // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FBlackboardKeySelector                             AcceptableRadiusBlackboardKey;                              // 0x00B8   (0x0028)  
};

/// Class /Script/WTL.WTLBulletHellBase
/// Size: 0x0220 (0x000220 - 0x000440)
class AWTLBulletHellBase : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x100];                                     // 0x0220   (0x0100)  MISSED
	UProceduralMeshComponent*                          m_ProcMesh;                                                 // 0x0320   (0x0008)  
	bool                                               UseBillboard;                                               // 0x0328   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0329   (0x0007)  MISSED
	UMaterialInterface*                                Material;                                                   // 0x0330   (0x0008)  
	UStaticMesh*                                       RenderMesh;                                                 // 0x0338   (0x0008)  
	UMaterialInterface*                                TailMaterial;                                               // 0x0340   (0x0008)  
	bool                                               AutoDestroy;                                                // 0x0348   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0349   (0x0003)  MISSED
	int32_t                                            AttackMode;                                                 // 0x034C   (0x0004)  
	FVector                                            SpawnAxisX;                                                 // 0x0350   (0x000C)  
	float                                              PhysicsFps;                                                 // 0x035C   (0x0004)  
	float                                              ServerStartDelay;                                           // 0x0360   (0x0004)  
	float                                              ClientStartDelay;                                           // 0x0364   (0x0004)  
	float                                              MeshUpdateRate;                                             // 0x0368   (0x0004)  
	float                                              LoopDuration;                                               // 0x036C   (0x0004)  
	float                                              SpawnRate;                                                  // 0x0370   (0x0004)  
	FRotator                                           RotateSpawnAxisX;                                           // 0x0374   (0x000C)  
	float                                              SpawnCountBurst;                                            // 0x0380   (0x0004)  
	bool                                               IsLinearSpawn;                                              // 0x0384   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0385   (0x0003)  MISSED
	FVector2D                                          BulletSpeed;                                                // 0x0388   (0x0008)  
	FVector2D                                          LifeTime;                                                   // 0x0390   (0x0008)  
	FVector2D                                          BounceCount;                                                // 0x0398   (0x0008)  
	bool                                               OnlyNegativeZ;                                              // 0x03A0   (0x0001)  
	bool                                               UseConeSpread;                                              // 0x03A1   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x03A2   (0x0002)  MISSED
	FVector2D                                          ConeSpread;                                                 // 0x03A4   (0x0008)  
	FVector2D                                          ConeSpreadRadius;                                           // 0x03AC   (0x0008)  
	FVector                                            Drag;                                                       // 0x03B4   (0x000C)  
	FVector                                            Gravity;                                                    // 0x03C0   (0x000C)  
	bool                                               UseCurveBulletSpeed;                                        // 0x03CC   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x03CD   (0x0003)  MISSED
	UCurveFloat*                                       CurveBulletSpeed;                                           // 0x03D0   (0x0008)  
	bool                                               UseCurveScaleLocation;                                      // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData06_5[0x7];                                       // 0x03D9   (0x0007)  MISSED
	UCurveVector*                                      CurveScaleLocation;                                         // 0x03E0   (0x0008)  
	float                                              CurveSpeedScale;                                            // 0x03E8   (0x0004)  
	bool                                               UseTail;                                                    // 0x03EC   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x03ED   (0x0003)  MISSED
	float                                              DistFromVelocity;                                           // 0x03F0   (0x0004)  
	FVector2D                                          Damage;                                                     // 0x03F4   (0x0008)  
	float                                              CollisionTime;                                              // 0x03FC   (0x0004)  
	float                                              SphereTraceRadius;                                          // 0x0400   (0x0004)  
	unsigned char                                      UnknownData08_5[0x4];                                       // 0x0404   (0x0004)  MISSED
	TArray<TEnumAsByte>                                CollisionTraceQuery;                                        // 0x0408   (0x0010)  
	bool                                               SpawnActorOnHit;                                            // 0x0418   (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0419   (0x0007)  MISSED
	UClass*                                            SpawnActor;                                                 // 0x0420   (0x0008)  
	float                                              DrawDebugTime;                                              // 0x0428   (0x0004)  
	TEnumAsByte<EDrawDebugTrace>                       ServerDrawDebugTrace;                                       // 0x042C   (0x0001)  
	TEnumAsByte<EDrawDebugTrace>                       ClientDrawDebugTrace;                                       // 0x042D   (0x0001)  
	unsigned char                                      UnknownData10_5[0x2];                                       // 0x042E   (0x0002)  MISSED
	float                                              BulletRadius;                                               // 0x0430   (0x0004)  
	float                                              StartTime;                                                  // 0x0434   (0x0004)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0438   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLBulletHellBillboardComponent
/// Size: 0x0010 (0x000470 - 0x000480)
class UWTLBulletHellBillboardComponent : public UMeshComponent
{ 
public:
	TArray<FWTLMaterialSpriteElement>                  Elements;                                                   // 0x0468   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0478   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLBulletHellBillboardComponent.SetElements
	void SetElements(TArray<FWTLMaterialSpriteElement>& NewElements);                                                        // [0x17a40a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLBulletHellBillboardComponent.AddElement
	void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve); // [0x17a3ca0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLBulletinBoard
/// Size: 0x00B8 (0x000220 - 0x0002D8)
class AWTLBulletinBoard : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0220   (0x0020)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0240   (0x0008)  
	UStaticMeshComponent*                              BulletinMesh1;                                              // 0x0248   (0x0008)  
	UStaticMeshComponent*                              BulletinMesh2;                                              // 0x0250   (0x0008)  
	UStaticMeshComponent*                              BulletinMesh3;                                              // 0x0258   (0x0008)  
	FVector                                            Bulletin1CenterLocation;                                    // 0x0260   (0x000C)  
	FVector                                            Bulletin2CenterLocation;                                    // 0x026C   (0x000C)  
	FVector                                            Bulletin3CenterLocation;                                    // 0x0278   (0x000C)  
	float                                              BulletinHorizontalLocationDelta;                            // 0x0284   (0x0004)  
	float                                              BulletinVerticalLocationDelta;                              // 0x0288   (0x0004)  
	float                                              BulletinRotationDelta;                                      // 0x028C   (0x0004)  
	FVector                                            BulletinOriginalScale;                                      // 0x0290   (0x000C)  
	float                                              BulletinScaleDelta;                                         // 0x029C   (0x0004)  
	TArray<UMaterialInstance*>                         BulletinMaterials;                                          // 0x02A0   (0x0010)  
	TArray<int32_t>                                    QuestList;                                                  // 0x02B0   (0x0010)  
	EWTLFaction                                        Faction;                                                    // 0x02C0   (0x0001)  
	bool                                               m_IsActive;                                                 // 0x02C1   (0x0001)  
	unsigned char                                      UnknownData01_6[0x16];                                      // 0x02C2   (0x0016)  MISSED


	/// Functions
	// Function /Script/WTL.WTLBulletinBoard.SetIsActive
	void SetIsActive(bool Value);                                                                                            // [0x1773b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLBulletinBoard.OnRep_IsActive
	void OnRep_IsActive();                                                                                                   // [0x17a5a70] Final|Native|Private 
	// Function /Script/WTL.WTLBulletinBoard.OnIsActiveChanged
	void OnIsActiveChanged(bool IsActive);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLBulletinBoard.GetIsActive
	bool GetIsActive();                                                                                                      // [0x17a5a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLProjectile
/// Size: 0x0028 (0x000220 - 0x000248)
class AWTLProjectile : public AActor
{ 
public:
	USphereComponent*                                  CollisionComp;                                              // 0x0220   (0x0008)  
	UWTLProjectileMovementComponent*                   ProjectileMovement;                                         // 0x0228   (0x0008)  
	EProjectileType                                    Type;                                                       // 0x0230   (0x0001)  
	bool                                               bShowDebugInfo;                                             // 0x0231   (0x0001)  
	bool                                               bDrawAimingTrajectory;                                      // 0x0232   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0233   (0x0001)  MISSED
	FColor                                             AimingTrajectoryColor;                                      // 0x0234   (0x0004)  
	float                                              AimingTrajectoryThickness;                                  // 0x0238   (0x0004)  
	bool                                               bDrawActualTrajectory;                                      // 0x023C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x023D   (0x0003)  MISSED
	float                                              ActualTrajectoryThickness;                                  // 0x0240   (0x0004)  
	float                                              DebugInfoLifetime;                                          // 0x0244   (0x0004)  
};

/// Class /Script/WTL.WTLBulletProjectile
/// Size: 0x00F0 (0x000248 - 0x000338)
class AWTLBulletProjectile : public AWTLProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0xB1];                                      // 0x0248   (0x00B1)  MISSED
	bool                                               CanRicochet;                                                // 0x02F9   (0x0001)  
	char                                               RicochetChance;                                             // 0x02FA   (0x0001)  
	char                                               MaxRicochetCount;                                           // 0x02FB   (0x0001)  
	float                                              MinRicochetAngle;                                           // 0x02FC   (0x0004)  
	float                                              MinRicochetVelocity;                                        // 0x0300   (0x0004)  
	float                                              MinRicochetVelocityDelta;                                   // 0x0304   (0x0004)  
	float                                              MaxRicochetVelocityDelta;                                   // 0x0308   (0x0004)  
	float                                              PenetrationEndRandomHalfCone;                               // 0x030C   (0x0004)  
	float                                              InitialDamage;                                              // 0x0310   (0x0004)  
	bool                                               bDrawHitPoints;                                             // 0x0314   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0315   (0x0003)  MISSED
	FColor                                             HitPointsColor;                                             // 0x0318   (0x0004)  
	bool                                               bDrawPenetrationExitPoints;                                 // 0x031C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x031D   (0x0003)  MISSED
	FColor                                             PenetrationExitPointsColor;                                 // 0x0320   (0x0004)  
	bool                                               bDrawRicochetPoints;                                        // 0x0324   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0325   (0x0003)  MISSED
	FColor                                             RicochetPointsColor;                                        // 0x0328   (0x0004)  
	bool                                               bDrawDestroyPoint;                                          // 0x032C   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x032D   (0x0003)  MISSED
	FColor                                             DestroyPointColor;                                          // 0x0330   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0334   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLBulletProjectile.OnProjectileBounce
	void OnProjectileBounce(FHitResult& ImpactResult, FVector& ImpactVelocity);                                              // [0x17a5d20] Final|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLBulletProjectile.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x17a5ef0] Final|Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/WTL.WTLBulletTracer
/// Size: 0x0090 (0x000220 - 0x0002B0)
class AWTLBulletTracer : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0220   (0x0060)  MISSED
	UWTLProjectileMovementComponent*                   ProjectileMovement;                                         // 0x0280   (0x0008)  
	float                                              InitialVelocity;                                            // 0x0288   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x028C   (0x0004)  MISSED
	UCurveFloat*                                       VelocityCurve;                                              // 0x0290   (0x0008)  
	UCurveFloat*                                       GravityCurve;                                               // 0x0298   (0x0008)  
	bool                                               DrawDebugInfo;                                              // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x02A1   (0x0003)  MISSED
	float                                              DebugInfoLifetime;                                          // 0x02A4   (0x0004)  
	float                                              DebugInfoLineThickness;                                     // 0x02A8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02AC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLBulletTracer.OnTracerDestroyed
	void OnTracerDestroyed(AActor* DestroyedActor);                                                                          // [0x17a6330] Final|Native|Private 
};

/// Class /Script/WTL.WTLUsable
/// Size: 0x01A0 (0x000220 - 0x0003C0)
class AWTLUsable : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0220   (0x0018)  MISSED
	int64_t                                            m_ItemID;                                                   // 0x0238   (0x0008)  
	int16_t                                            m_ItemTypeID;                                               // 0x0240   (0x0002)  
	unsigned char                                      UnknownData01_5[0x50];                                      // 0x0242   (0x0050)  MISSED
	bool                                               m_bIsSnuggled;                                              // 0x0292   (0x0001)  
	unsigned char                                      UnknownData02_5[0x25];                                      // 0x0293   (0x0025)  MISSED
	float                                              PauseBetweenUse;                                            // 0x02B8   (0x0004)  
	int32_t                                            m_FastAccessSlotIndex;                                      // 0x02BC   (0x0004)  
	USkeletalMeshComponent*                            SkeletalMesh;                                               // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x02C8   (0x0008)  MISSED
	bool                                               HideFastAccessSlots;                                        // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData04_5[0xF];                                       // 0x02D1   (0x000F)  MISSED
	FItemAnimationSet                                  EquipSequenceSet;                                           // 0x02E0   (0x0018)  
	float                                              EquipTimeWithoutAnimation;                                  // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x02FC   (0x0004)  MISSED
	FItemAnimationSet                                  UnequipSequenceSet;                                         // 0x0300   (0x0018)  
	float                                              UnequipTimeWithoutAnimation;                                // 0x0318   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x031C   (0x0004)  MISSED
	UAnimationAsset*                                   MaleIdleStateAnimation;                                     // 0x0320   (0x0008)  
	UAnimationAsset*                                   FemaleIdleStateAnimation;                                   // 0x0328   (0x0008)  
	UAnimationAsset*                                   MaleSnuggleAnimation;                                       // 0x0330   (0x0008)  
	UAnimationAsset*                                   FemaleSnuggleAnimation;                                     // 0x0338   (0x0008)  
	UAimOffsetBlendSpace1D*                            MaleAimOffsetBlendSpace;                                    // 0x0340   (0x0008)  
	UAimOffsetBlendSpace1D*                            FemaleAimOffsetBlendSpace;                                  // 0x0348   (0x0008)  
	TArray<FItemAnimationSet>                          IdleSequenceSetArray;                                       // 0x0350   (0x0010)  
	float                                              IdleAnimationTimeoutMin;                                    // 0x0360   (0x0004)  
	float                                              IdleAnimationTimeoutMax;                                    // 0x0364   (0x0004)  
	bool                                               bCanBeSnuggled;                                             // 0x0368   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0369   (0x0003)  MISSED
	float                                              SnuggleTraceRange;                                          // 0x036C   (0x0004)  
	TArray<float>                                      AnimationFloatParameters;                                   // 0x0370   (0x0010)  
	TArray<FVector>                                    AnimationVectorParameters;                                  // 0x0380   (0x0010)  
	TArray<float>                                      FemaleAnimationFloatParameters;                             // 0x0390   (0x0010)  
	TArray<FVector>                                    FemaleAnimationVectorParameters;                            // 0x03A0   (0x0010)  
	FVector                                            HandsOffset;                                                // 0x03B0   (0x000C)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x03BC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLUsable.NetMulticast_PutToInventory
	void NetMulticast_PutToInventory();                                                                                      // [0x17ee270] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLUsable.GetMesh
	USkeletalMeshComponent* GetMesh();                                                                                       // [0x19461e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLUsable.BP_CustomActionTrigger
	void BP_CustomActionTrigger(FName Name);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLStuff
/// Size: 0x0098 (0x0003C0 - 0x000458)
class AWTLStuff : public AWTLUsable
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x03C0   (0x0028)  MISSED
	FItemAnimationSet                                  UseSequenceSet;                                             // 0x03E8   (0x0018)  
	FItemAnimationSet                                  AlternateUseSequenceSet;                                    // 0x0400   (0x0018)  
	FItemAnimationSet                                  RechargeSequenceSet;                                        // 0x0418   (0x0018)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0430   (0x0004)  MISSED
	bool                                               UseActivity;                                                // 0x0434   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0435   (0x0003)  MISSED
	float                                              ActivityUpInterpSpeed;                                      // 0x0438   (0x0004)  
	float                                              ActivityDownInterpSpeed;                                    // 0x043C   (0x0004)  
	FVector                                            AimingHandsTranslationMale;                                 // 0x0440   (0x000C)  
	FVector                                            AimingHandsTranslationFemale;                               // 0x044C   (0x000C)  


	/// Functions
	// Function /Script/WTL.WTLStuff.Server_OnCharge
	void Server_OnCharge();                                                                                                  // [0x192dd70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLStuff.OnReload
	void OnReload();                                                                                                         // [0x10fc6a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLStuff.NetMulticast_Recharge
	void NetMulticast_Recharge();                                                                                            // [0x191d950] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Class /Script/WTL.WTLCameraDisplay
/// Size: 0x0080 (0x000458 - 0x0004D8)
class AWTLCameraDisplay : public AWTLStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0458   (0x0010)  MISSED
	float                                              DesiredFOV;                                                 // 0x0468   (0x0004)  
	float                                              FOVChangeSpeed;                                             // 0x046C   (0x0004)  
	UWidgetComponent*                                  ScreenWidget;                                               // 0x0470   (0x0008)  
	float                                              CameraPitchDesiredValue;                                    // 0x0478   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x047C   (0x0004)  MISSED
	TArray<FWTLDisplayAnimationSet>                    AnimationsList;                                             // 0x0480   (0x0010)  
	unsigned char                                      UnknownData02_5[0x20];                                      // 0x0490   (0x0020)  MISSED
	UAnimMontage*                                      CharacterUsingMontage;                                      // 0x04B0   (0x0008)  
	UAnimMontage*                                      TabletUsingMontage;                                         // 0x04B8   (0x0008)  
	UAnimMontage*                                      CharacterButtonMontage;                                     // 0x04C0   (0x0008)  
	UAnimMontage*                                      TabletButtonMontage;                                        // 0x04C8   (0x0008)  
	UAnimationAsset*                                   TabletWithOpenedAntennasAnim;                               // 0x04D0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLCameraDisplay.K2_StickInputDirection
	void K2_StickInputDirection(float InputUp, float InputRight);                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLStaticReplicatedActor
/// Size: 0x0000 (0x000220 - 0x000220)
class AWTLStaticReplicatedActor : public AActor
{ 
public:
};

/// Class /Script/WTL.WTLPlaceableStuff
/// Size: 0x0178 (0x000220 - 0x000398)
class AWTLPlaceableStuff : public AWTLStaticReplicatedActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0220   (0x0070)  MISSED
	uint64_t                                           m_CharacterID;                                              // 0x0290   (0x0008)  
	FString                                            m_CharacterName;                                            // 0x0298   (0x0010)  
	uint64_t                                           m_CharacterGroupID;                                         // 0x02A8   (0x0008)  
	uint16_t                                           m_CharacterClanID;                                          // 0x02B0   (0x0002)  
	EWTLFaction                                        m_CharacterFaction;                                         // 0x02B2   (0x0001)  
	unsigned char                                      UnknownData01_5[0xAD];                                      // 0x02B3   (0x00AD)  MISSED
	bool                                               CanTakeDamageFromFactionMembers;                            // 0x0360   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0361   (0x0003)  MISSED
	float                                              DamageToConditionMultiplier;                                // 0x0364   (0x0004)  
	float                                              ExplosionDamageMultiplier;                                  // 0x0368   (0x0004)  
	uint32_t                                           m_Condition;                                                // 0x036C   (0x0004)  
	int32_t                                            StuffID;                                                    // 0x0370   (0x0004)  
	bool                                               SaveStateToDB;                                              // 0x0374   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0375   (0x0003)  MISSED
	float                                              SaveStateToDBInterval;                                      // 0x0378   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x037C   (0x0004)  MISSED
	FText                                              FullStuffName;                                              // 0x0380   (0x0018)  


	/// Functions
	// Function /Script/WTL.WTLPlaceableStuff.OnTakedBack
	void OnTakedBack(AWTLCharacter* EventInstigator);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPlaceableStuff.OnRep_Condition
	void OnRep_Condition();                                                                                                  // [0xba4570] Native|Protected     
	// Function /Script/WTL.WTLPlaceableStuff.OnPlaced
	void OnPlaced(AWTLCharacter* EventInstigator);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPlaceableStuff.OnEnergyChanged
	void OnEnergyChanged(float EnergyValue);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPlaceableStuff.OnConditionChanged
	void OnConditionChanged(float ConditionValue);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPlaceableStuff.NetMulticast_OnDestroyed
	void NetMulticast_OnDestroyed();                                                                                         // [0x17ee270] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLPlaceableStuff.K2_OnDestroyed
	void K2_OnDestroyed();                                                                                                   // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Script/WTL.WTLPlaceableStuff.BPCustomAnimTrigger
	void BPCustomAnimTrigger(FName TriggerName);                                                                             // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Script/WTL.WTLPlaceableStuff.BP_GetMaxCondition
	int32_t BP_GetMaxCondition();                                                                                            // [0x1898480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLPlaceableStuff.BP_GetCondition
	int32_t BP_GetCondition();                                                                                               // [0x18984a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLCampfire
/// Size: 0x01B8 (0x000398 - 0x000550)
class AWTLCampfire : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0xA8];                                      // 0x0398   (0x00A8)  MISSED
	float                                              m_Energy;                                                   // 0x0440   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0444   (0x0004)  MISSED
	FWTLStorageContent                                 m_StorageContent;                                           // 0x0448   (0x00A8)  
	unsigned char                                      UnknownData02_5[0x30];                                      // 0x04F0   (0x0030)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0520   (0x0008)  
	TArray<TEnumAsByte>                                WarmzoneObjectTypes;                                        // 0x0528   (0x0010)  
	float                                              WarmzoneRadius;                                             // 0x0538   (0x0004)  
	float                                              WarmzoneHealingPercentPerSecond;                            // 0x053C   (0x0004)  
	float                                              StartEnergy;                                                // 0x0540   (0x0004)  
	float                                              MaxEnergy;                                                  // 0x0544   (0x0004)  
	float                                              EnergyDecrementPerSecond;                                   // 0x0548   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x054C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCampfire.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x17a6930] Final|Native|Private 
	// Function /Script/WTL.WTLCampfire.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x17a68b0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCanvasDrawableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLCanvasDrawableInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLCaptureComponent2D
/// Size: 0x0000 (0x0008B0 - 0x0008B0)
class UWTLCaptureComponent2D : public USceneCaptureComponent2D
{ 
public:
};

/// Class /Script/WTL.WTLCharacter
/// Size: 0x1510 (0x0004C0 - 0x0019D0)
class AWTLCharacter : public ACharacter
{ 
public:
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x04C0   (0x0070)  MISSED
	bool                                               bIsMovementEnabled;                                         // 0x0530   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1F];                                      // 0x0531   (0x001F)  MISSED
	float                                              m_ReplicatedStamina;                                        // 0x0550   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0554   (0x0004)  MISSED
	float                                              m_ReplicatedOxygen;                                         // 0x0558   (0x0004)  
	unsigned char                                      UnknownData03_5[0xBC];                                      // 0x055C   (0x00BC)  MISSED
	bool                                               m_FlashlightEnabled;                                        // 0x0618   (0x0001)  
	bool                                               m_IsInvulnerable;                                           // 0x0619   (0x0001)  
	bool                                               m_IsInSafeZone;                                             // 0x061A   (0x0001)  
	bool                                               m_CanSpawnOnSafeZone;                                       // 0x061B   (0x0001)  
	bool                                               m_IsInMobileResurectionPointWorkZone;                       // 0x061C   (0x0001)  
	bool                                               m_IsInPVPZone;                                              // 0x061D   (0x0001)  
	bool                                               m_IsTraveling;                                              // 0x061E   (0x0001)  
	unsigned char                                      UnknownData04_5[0x61];                                      // 0x061F   (0x0061)  MISSED
	AWTLEventPoint*                                    m_LastEventPoint;                                           // 0x0680   (0x0008)  
	bool                                               m_AdminSprintMode;                                          // 0x0688   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2F];                                      // 0x0689   (0x002F)  MISSED
	bool                                               m_IsHoldingBreath;                                          // 0x06B8   (0x0001)  
	unsigned char                                      UnknownData06_5[0x1F];                                      // 0x06B9   (0x001F)  MISSED
	bool                                               m_AgressorFlag;                                             // 0x06D8   (0x0001)  
	unsigned char                                      UnknownData07_5[0x17];                                      // 0x06D9   (0x0017)  MISSED
	bool                                               bIsInFishingZone;                                           // 0x06F0   (0x0001)  
	bool                                               bIsPlacingItem;                                             // 0x06F1   (0x0001)  
	unsigned char                                      UnknownData08_5[0x1];                                       // 0x06F2   (0x0001)  MISSED
	bool                                               m_bIsInQuickThrowingState;                                  // 0x06F3   (0x0001)  
	unsigned char                                      UnknownData09_5[0x24];                                      // 0x06F4   (0x0024)  MISSED
	float                                              m_CurrentRadiationLevel;                                    // 0x0718   (0x0004)  
	unsigned char                                      UnknownData10_5[0xBC];                                      // 0x071C   (0x00BC)  MISSED
	FSpeedModifiers                                    m_SpeedModifiers;                                           // 0x07D8   (0x0008)  
	float                                              ScopeOccluderDelta;                                         // 0x07E0   (0x0004)  
	float                                              MonocularOccluderDelta;                                     // 0x07E4   (0x0004)  
	TWeakObjectPtr<UFMODEvent*>                        DeathBreathSoundEvent;                                      // 0x07E8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        StartHoldingBreathSoundEvent;                               // 0x0810   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        StopHoldingBreathSoundEvent;                                // 0x0838   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        TeleportSoundEvent;                                         // 0x0860   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        HearingDamageEvent;                                         // 0x0888   (0x0028)  
	TWeakObjectPtr<USoundMix*>                         DrunkSoundMix;                                              // 0x08B0   (0x0028)  
	float                                              WalkFootstepMinInterval;                                    // 0x08D8   (0x0004)  
	float                                              WalkFootstepVolume;                                         // 0x08DC   (0x0004)  
	float                                              SprintFootstepMinInterval;                                  // 0x08E0   (0x0004)  
	float                                              SprintFootstepVolume;                                       // 0x08E4   (0x0004)  
	float                                              CrouchFootstepMinInterval;                                  // 0x08E8   (0x0004)  
	float                                              CrouchFootstepVolume;                                       // 0x08EC   (0x0004)  
	float                                              AimFootstepVolumeMultiplier;                                // 0x08F0   (0x0004)  
	unsigned char                                      UnknownData11_5[0xC];                                       // 0x08F4   (0x000C)  MISSED
	USkeletalMeshComponent*                            MeshTorso;                                                  // 0x0900   (0x0008)  
	USkeletalMeshComponent*                            MeshLegs;                                                   // 0x0908   (0x0008)  
	USkeletalMeshComponent*                            MeshFeet;                                                   // 0x0910   (0x0008)  
	USkeletalMeshComponent*                            MeshHead;                                                   // 0x0918   (0x0008)  
	USkeletalMeshComponent*                            MeshNeck;                                                   // 0x0920   (0x0008)  
	USkeletalMeshComponent*                            MeshHeadSlot;                                               // 0x0928   (0x0008)  
	USkeletalMeshComponent*                            MeshTorsoSlot;                                              // 0x0930   (0x0008)  
	USkeletalMeshComponent*                            MeshLegsSlot;                                               // 0x0938   (0x0008)  
	USkeletalMeshComponent*                            MeshFeetSlot;                                               // 0x0940   (0x0008)  
	USkeletalMeshComponent*                            BackpackSlot;                                               // 0x0948   (0x0008)  
	USkeletalMeshComponent*                            GlassesSlot;                                                // 0x0950   (0x0008)  
	USkeletalMeshComponent*                            WatchesSlot;                                                // 0x0958   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot1;                                             // 0x0960   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot2;                                             // 0x0968   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot3;                                             // 0x0970   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot4;                                             // 0x0978   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0;                                 // 0x0980   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0MuzzleMount;                      // 0x0988   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0MuzzleAttachment;                 // 0x0990   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0FlashlightMount;                  // 0x0998   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0FlashlightAttachment;             // 0x09A0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0ScopeMount;                       // 0x09A8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot0ScopeAttachment;                  // 0x09B0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1;                                 // 0x09B8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1MuzzleMount;                      // 0x09C0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1MuzzleAttachment;                 // 0x09C8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1FlashlightMount;                  // 0x09D0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1FlashlightAttachment;             // 0x09D8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1ScopeMount;                       // 0x09E0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponPreviewSlot1ScopeAttachment;                  // 0x09E8   (0x0008)  
	UStaticMeshComponent*                              EquippedStuffPreviewSlot5;                                  // 0x09F0   (0x0008)  
	UStaticMeshComponent*                              HolsterSlot;                                                // 0x09F8   (0x0008)  
	UStaticMeshComponent*                              EquippedPistolPreviewSlot;                                  // 0x0A00   (0x0008)  
	UStaticMeshComponent*                              SheathSlot;                                                 // 0x0A08   (0x0008)  
	UStaticMeshComponent*                              SheathPreviewSlot;                                          // 0x0A10   (0x0008)  
	UWTLFlashlightMountComponent*                      FlashlightComponent;                                        // 0x0A18   (0x0008)  
	USpotLightComponent*                               LightComponent;                                             // 0x0A20   (0x0008)  
	UStaticMeshComponent*                              FlashlightMesh;                                             // 0x0A28   (0x0008)  
	UStaticMeshComponent*                              ScopeOccluderMesh;                                          // 0x0A30   (0x0008)  
	USphereComponent*                                  BulletFlyNearVolume;                                        // 0x0A38   (0x0008)  
	UAudioComponent*                                   HeartbeatAudioComponent;                                    // 0x0A40   (0x0008)  
	UFMODAudioComponent*                               CharacterVoiceComponent;                                    // 0x0A48   (0x0008)  
	UFMODAudioComponent*                               NDPDetectorAudioComponent;                                  // 0x0A50   (0x0008)  
	UFMODAudioComponent*                               RadiationDetectorAudioComponent;                            // 0x0A58   (0x0008)  
	UWTLFMODCharacterVoiceComponent*                   VOIPComponent;                                              // 0x0A60   (0x0008)  
	UWTLCharacterIdentityComponent*                    IdentityComponent;                                          // 0x0A68   (0x0008)  
	UMaterialBillboardComponent*                       VOIPIndicatorSprite;                                        // 0x0A70   (0x0008)  
	unsigned char                                      UnknownData12_5[0x8];                                       // 0x0A78   (0x0008)  MISSED
	UPawnNoiseEmitterComponent*                        NoiseEmitterComponent;                                      // 0x0A80   (0x0008)  
	UWidgetInteractionComponent*                       WidgetInteraction;                                          // 0x0A88   (0x0008)  
	unsigned char                                      UnknownData13_5[0x4];                                       // 0x0A90   (0x0004)  MISSED
	bool                                               bIsDying;                                                   // 0x0A94   (0x0001)  
	bool                                               bIsAimToggle;                                               // 0x0A95   (0x0001)  
	bool                                               bIsCrouchToggle;                                            // 0x0A96   (0x0001)  
	bool                                               bIsSprintToggle;                                            // 0x0A97   (0x0001)  
	bool                                               bAllowRebasing;                                             // 0x0A98   (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0A99   (0x0003)  MISSED
	float                                              RebasingDistance;                                           // 0x0A9C   (0x0004)  
	FTakeHitInfo                                       LastTakeHitInfo;                                            // 0x0AA0   (0x0220)  
	unsigned char                                      UnknownData15_5[0x21];                                      // 0x0CC0   (0x0021)  MISSED
	EWTLHandsState                                     HandsState;                                                 // 0x0CE1   (0x0001)  
	unsigned char                                      UnknownData16_5[0x6];                                       // 0x0CE2   (0x0006)  MISSED
	AWTLUsable*                                        UsableItemInHands;                                          // 0x0CE8   (0x0008)  
	AWTLUsable*                                        QuickItemInHands;                                           // 0x0CF0   (0x0008)  
	bool                                               bIsAiming;                                                  // 0x0CF8   (0x0001)  
	bool                                               bIsSprinting;                                               // 0x0CF9   (0x0001)  
	unsigned char                                      UnknownData17_5[0x2];                                       // 0x0CFA   (0x0002)  MISSED
	bool                                               bIsJumping;                                                 // 0x0CFC   (0x0001)  
	EWTLCharacterPose                                  CurrentPose;                                                // 0x0CFD   (0x0001)  
	unsigned char                                      UnknownData18_5[0x2];                                       // 0x0CFE   (0x0002)  MISSED
	float                                              SprintSpeed;                                                // 0x0D00   (0x0004)  
	float                                              WalkSpeed;                                                  // 0x0D04   (0x0004)  
	float                                              CrouchSpeed;                                                // 0x0D08   (0x0004)  
	float                                              ProneSpeed;                                                 // 0x0D0C   (0x0004)  
	float                                              SwimSpeed;                                                  // 0x0D10   (0x0004)  
	float                                              AimSpeedMultiplier;                                         // 0x0D14   (0x0004)  
	float                                              MaxStamina;                                                 // 0x0D18   (0x0004)  
	float                                              StaminaNotMovingIncrement;                                  // 0x0D1C   (0x0004)  
	float                                              StaminaMovingIncrement;                                     // 0x0D20   (0x0004)  
	float                                              StaminaSprintDecrement;                                     // 0x0D24   (0x0004)  
	float                                              StaminaPercentSprintAvailability;                           // 0x0D28   (0x0004)  
	float                                              StaminaJumpDecrementPercent;                                // 0x0D2C   (0x0004)  
	float                                              StaminaHoldingBreathDecrement;                              // 0x0D30   (0x0004)  
	float                                              StaminaWaterMovementDecrement;                              // 0x0D34   (0x0004)  
	float                                              StaminaUnderwaterDecrement;                                 // 0x0D38   (0x0004)  
	float                                              MaxOxygen;                                                  // 0x0D3C   (0x0004)  
	float                                              OxygenNoBreatheDecrement;                                   // 0x0D40   (0x0004)  
	float                                              OxygenBreatheIncrement;                                     // 0x0D44   (0x0004)  
	float                                              StandMinPitchAngle;                                         // 0x0D48   (0x0004)  
	float                                              StandMaxPitchAngle;                                         // 0x0D4C   (0x0004)  
	float                                              CrouchMinPitchAngle;                                        // 0x0D50   (0x0004)  
	float                                              CrouchMaxPitchAngle;                                        // 0x0D54   (0x0004)  
	float                                              ProneMinPitchAngle;                                         // 0x0D58   (0x0004)  
	float                                              ProneMaxPitchAngle;                                         // 0x0D5C   (0x0004)  
	float                                              SwimMinPitchAngle;                                          // 0x0D60   (0x0004)  
	float                                              SwimMaxPitchAngle;                                          // 0x0D64   (0x0004)  
	float                                              GravityScaleInWater;                                        // 0x0D68   (0x0004)  
	float                                              GravityScaleUnderWater;                                     // 0x0D6C   (0x0004)  
	float                                              GravityScaleOnLand;                                         // 0x0D70   (0x0004)  
	unsigned char                                      UnknownData19_5[0x18];                                      // 0x0D74   (0x0018)  MISSED
	float                                              m_CameraOffsetInterpSpeed;                                  // 0x0D8C   (0x0004)  
	unsigned char                                      UnknownData20_5[0x1A8];                                     // 0x0D90   (0x01A8)  MISSED
	AActor*                                            m_InteractiveObjectInFocus;                                 // 0x0F38   (0x0008)  
	unsigned char                                      UnknownData21_5[0x10];                                      // 0x0F40   (0x0010)  MISSED
	TArray<TEnumAsByte>                                InterestObjectTypes;                                        // 0x0F50   (0x0010)  
	float                                              InterestTraceRadius;                                        // 0x0F60   (0x0004)  
	unsigned char                                      UnknownData22_5[0x24];                                      // 0x0F64   (0x0024)  MISSED
	bool                                               bEnableHandsStateDebugging;                                 // 0x0F88   (0x0001)  
	unsigned char                                      UnknownData23_5[0x1F];                                      // 0x0F89   (0x001F)  MISSED
	bool                                               m_bIsUnderWater;                                            // 0x0FA8   (0x0001)  
	bool                                               m_bIsInWater;                                               // 0x0FA9   (0x0001)  
	bool                                               m_bMovesOnWater;                                            // 0x0FAA   (0x0001)  
	unsigned char                                      UnknownData24_5[0x5];                                       // 0x0FAB   (0x0005)  MISSED
	TWeakObjectPtr<UTexture2D*>                        m_CharacterEffectsTexture;                                  // 0x0FB0   (0x0028)  
	TMap<EWTLCharacterEffectType, FVector2D>           m_CharacterEffectIconsCoords;                               // 0x0FD8   (0x0050)  
	TMap<EWTLCharacterStateIndicatorType, FVector2D>   m_CharacterIndicatorIconsCoords;                            // 0x1028   (0x0050)  
	TWeakObjectPtr<UFont*>                             Font;                                                       // 0x1078   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        DotPointerTexture;                                          // 0x10A0   (0x0028)  
	unsigned char                                      UnknownData25_5[0x5C];                                      // 0x10C8   (0x005C)  MISSED
	float                                              m_DesiredTiltValue;                                         // 0x1124   (0x0004)  
	TWeakObjectPtr<UMaterialInterface*>                m_PlacementPreviewItemMaterial;                             // 0x1128   (0x0028)  
	FLinearColor                                       m_RightPlacementColor;                                      // 0x1150   (0x0010)  
	FLinearColor                                       m_WrongPlacementColor;                                      // 0x1160   (0x0010)  
	unsigned char                                      UnknownData26_5[0x10];                                      // 0x1170   (0x0010)  MISSED
	AStaticMeshActor*                                  M_PlacementPointer;                                         // 0x1180   (0x0008)  
	unsigned char                                      UnknownData27_5[0x10];                                      // 0x1188   (0x0010)  MISSED
	UMaterialInstanceDynamic*                          m_PlacementPreviewMaterialInstance;                         // 0x1198   (0x0008)  
	unsigned char                                      UnknownData28_5[0xC];                                       // 0x11A0   (0x000C)  MISSED
	float                                              UndergroundFlashlightIntensityMultiplier;                   // 0x11AC   (0x0004)  
	float                                              OtherCharacterFlashlightIntensityMultiplier;                // 0x11B0   (0x0004)  
	unsigned char                                      UnknownData29_5[0x1C];                                      // 0x11B4   (0x001C)  MISSED
	bool                                               m_bIsFishing;                                               // 0x11D0   (0x0001)  
	unsigned char                                      UnknownData30_5[0x3];                                       // 0x11D1   (0x0003)  MISSED
	FWTLQTEState                                       QTEState;                                                   // 0x11D4   (0x0010)  
	unsigned char                                      UnknownData31_5[0x74];                                      // 0x11E4   (0x0074)  MISSED
	EWTLSex                                            BlueprintSex;                                               // 0x1258   (0x0001)  
	unsigned char                                      UnknownData32_5[0x87];                                      // 0x1259   (0x0087)  MISSED
	AActor*                                            m_CurrentActionGameplayActor;                               // 0x12E0   (0x0008)  
	unsigned char                                      UnknownData33_5[0x2];                                       // 0x12E8   (0x0002)  MISSED
	uint16_t                                           m_CurrentEmotionKey;                                        // 0x12EA   (0x0002)  
	unsigned char                                      UnknownData34_5[0x9];                                       // 0x12EC   (0x0009)  MISSED
	bool                                               m_LeavingFromVehicle;                                       // 0x12F5   (0x0001)  
	unsigned char                                      UnknownData35_5[0x23];                                      // 0x12F6   (0x0023)  MISSED
	bool                                               PersonalEnergyShieldState;                                  // 0x1319   (0x0001)  
	unsigned char                                      UnknownData36_5[0xE];                                       // 0x131A   (0x000E)  MISSED
	AWTLDrone*                                         m_Drone;                                                    // 0x1328   (0x0008)  
	AWTLCameraDisplay*                                 m_DroneCameraDisplay;                                       // 0x1330   (0x0008)  
	FMulticastInlineDelegate                           OnCharacterDestroy;                                         // 0x1338   (0x0010)  
	FMulticastInlineDelegate                           OnTravelingResult;                                          // 0x1348   (0x0010)  
	FMulticastInlineDelegate                           OnCharacterDied;                                            // 0x1358   (0x0010)  
	FMulticastInlineDelegate                           OnCoreHackngResult;                                         // 0x1368   (0x0010)  
	FMulticastInlineDelegate                           OnCharacterLeavedFishingZone;                               // 0x1378   (0x0010)  
	FMulticastInlineDelegate                           OnCharacterEnteredInFishingZone;                            // 0x1388   (0x0010)  
	FMulticastInlineDelegate                           OnGameplayActionStarted;                                    // 0x1398   (0x0010)  
	FMulticastInlineDelegate                           OnGameplayActionFinished;                                   // 0x13A8   (0x0010)  
	unsigned char                                      UnknownData37_5[0x1];                                       // 0x13B8   (0x0001)  MISSED
	bool                                               m_bCanUseVehicleInAnomaly;                                  // 0x13B9   (0x0001)  
	unsigned char                                      UnknownData38_5[0x26];                                      // 0x13BA   (0x0026)  MISSED
	TWeakObjectPtr<UClass*>                            MaleAnimBlueprint;                                          // 0x13E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            MaleWatchesAnimBlueprint;                                   // 0x1408   (0x0028)  
	TWeakObjectPtr<UClass*>                            FemaleAnimBlueprint;                                        // 0x1430   (0x0028)  
	TWeakObjectPtr<UClass*>                            FemaleWatchesAnimBlueprint;                                 // 0x1458   (0x0028)  
	FWTLLowerBodyAnimation                             StandLowerBodyRotation;                                     // 0x1480   (0x0010)  
	FWTLLowerBodyAnimation                             CrouchLowerBodyRotation;                                    // 0x1490   (0x0010)  
	UAnimMontage*                                      MaleTimeCheckAnimationMontage;                              // 0x14A0   (0x0008)  
	UAnimMontage*                                      FemaleTimeCheckAnimationMontage;                            // 0x14A8   (0x0008)  
	UAnimMontage*                                      LadderUpStartMontage;                                       // 0x14B0   (0x0008)  
	UAnimMontage*                                      LadderUpEndMontage;                                         // 0x14B8   (0x0008)  
	UAnimMontage*                                      LadderDownStartMontage;                                     // 0x14C0   (0x0008)  
	UAnimMontage*                                      LadderDownEndMontage;                                       // 0x14C8   (0x0008)  
	UAnimMontage*                                      ThrowNutMontage;                                            // 0x14D0   (0x0008)  
	UAnimMontage*                                      PickItemMontage;                                            // 0x14D8   (0x0008)  
	TMap<EWTLCharacterStunhitDirection, UAnimMontage*> StunhitAnimations;                                          // 0x14E0   (0x0050)  
	TArray<EWTLCharacterStunhitDirection>              DrunkAnimationStunhitSet;                                   // 0x1530   (0x0010)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleNeckMesh;                                               // 0x1540   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleNeckMesh;                                             // 0x1568   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleTorsoMeshFullArms;                                      // 0x1590   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleTorsoMeshHalfArms;                                      // 0x15B8   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleTorsoMeshHandsOnly;                                     // 0x15E0   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleTorsoMeshFullArms;                                    // 0x1608   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleTorsoMeshHalfArms;                                    // 0x1630   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleTorsoMeshHandsOnly;                                   // 0x1658   (0x0028)  
	TWeakObjectPtr<UClass*>                            CameraShakeMoveForward;                                     // 0x1680   (0x0028)  
	TWeakObjectPtr<UClass*>                            CameraShakeMoveForwardAiming;                               // 0x16A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CameraShakeMoveRight;                                       // 0x16D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CameraShakeMoveRightAiming;                                 // 0x16F8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CameraShakeSprint;                                          // 0x1720   (0x0028)  
	TWeakObjectPtr<UClass*>                            CameraShakeConsternation;                                   // 0x1748   (0x0028)  
	TWeakObjectPtr<UClass*>                            NutClass;                                                   // 0x1770   (0x0028)  
	float                                              NutThrowForce;                                              // 0x1798   (0x0004)  
	unsigned char                                      UnknownData39_5[0x4];                                       // 0x179C   (0x0004)  MISSED
	FTransform                                         AdditionalNutTransform;                                     // 0x17A0   (0x0030)  
	FVector                                            AdditionalNutRotation;                                      // 0x17D0   (0x000C)  
	bool                                               bIsDead;                                                    // 0x17DC   (0x0001)  
	unsigned char                                      UnknownData40_5[0x3];                                       // 0x17DD   (0x0003)  MISSED
	float                                              NormalFOV;                                                  // 0x17E0   (0x0004)  
	float                                              SprintFOV;                                                  // 0x17E4   (0x0004)  
	float                                              NormalFOVChangeSpeed;                                       // 0x17E8   (0x0004)  
	float                                              OpticsFOVChangeSpeed;                                       // 0x17EC   (0x0004)  
	FName                                              CameraBoneName;                                             // 0x17F0   (0x0008)  
	unsigned char                                      UnknownData41_5[0x4];                                       // 0x17F8   (0x0004)  MISSED
	float                                              DissolveLifespanTrigger;                                    // 0x17FC   (0x0004)  
	unsigned char                                      UnknownData42_5[0x10];                                      // 0x1800   (0x0010)  MISSED
	bool                                               bIsClimbingLadder;                                          // 0x1810   (0x0001)  
	unsigned char                                      UnknownData43_5[0xB7];                                      // 0x1811   (0x00B7)  MISSED
	char                                               m_ChickenStatus;                                            // 0x18C8   (0x0001)  
	unsigned char                                      UnknownData44_5[0xF];                                       // 0x18C9   (0x000F)  MISSED
	float                                              BaseTurnRate;                                               // 0x18D8   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x18DC   (0x0004)  
	float                                              MouseSensivityMultiplier;                                   // 0x18E0   (0x0004)  
	unsigned char                                      UnknownData45_5[0x4];                                       // 0x18E4   (0x0004)  MISSED
	UDataTable*                                        WeaponDataTable;                                            // 0x18E8   (0x0008)  
	FVector                                            IKFloorTraceOffset;                                         // 0x18F0   (0x000C)  
	float                                              IKFloorTraceLenth;                                          // 0x18FC   (0x0004)  
	bool                                               bIKIsEnabled;                                               // 0x1900   (0x0001)  
	bool                                               bIKIsDebug;                                                 // 0x1901   (0x0001)  
	unsigned char                                      UnknownData46_5[0x2];                                       // 0x1902   (0x0002)  MISSED
	float                                              IKTraceDistance;                                            // 0x1904   (0x0004)  
	FName                                              IKRightFootSocketName;                                      // 0x1908   (0x0008)  
	FName                                              IKLeftFootSocketName;                                       // 0x1910   (0x0008)  
	float                                              IKScale;                                                    // 0x1918   (0x0004)  
	float                                              PronedEyeHeight;                                            // 0x191C   (0x0004)  
	bool                                               bIsProned;                                                  // 0x1920:0 (0x0001)  
	unsigned char                                      UnknownData47_4[0x3];                                       // 0x1921   (0x0003)  MISSED
	bool                                               bIsQuickItemChange;                                         // 0x1924   (0x0001)  
	unsigned char                                      UnknownData48_5[0x7];                                       // 0x1925   (0x0007)  MISSED
	float                                              DissolveInterpSpeed;                                        // 0x192C   (0x0004)  
	unsigned char                                      UnknownData49_5[0xD];                                       // 0x1930   (0x000D)  MISSED
	bool                                               m_bLockCameraRotation;                                      // 0x193D   (0x0001)  
	unsigned char                                      UnknownData50_5[0x5A];                                      // 0x193E   (0x005A)  MISSED
	AWTLLadder*                                        CurrentLadder;                                              // 0x1998   (0x0008)  
	char                                               RemoteViewYaw;                                              // 0x19A0   (0x0001)  
	unsigned char                                      UnknownData51_5[0x7];                                       // 0x19A1   (0x0007)  MISSED
	uint64_t                                           StandaloneCharacterID;                                      // 0x19A8   (0x0008)  
	unsigned char                                      UnknownData52_5[0x8];                                       // 0x19B0   (0x0008)  MISSED
	bool                                               bIsMonstersFollowing;                                       // 0x19B8   (0x0001)  
	unsigned char                                      UnknownData53_5[0x3];                                       // 0x19B9   (0x0003)  MISSED
	int32_t                                            MaxNumMonstersFollowing;                                    // 0x19BC   (0x0004)  
	float                                              RadiusMonsterNear;                                          // 0x19C0   (0x0004)  
	unsigned char                                      UnknownData54_6[0xC];                                       // 0x19C4   (0x000C)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacter.UpdateEquipmentItemStates
	void UpdateEquipmentItemStates();                                                                                        // [0x17acb60] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.StopEmotion
	void StopEmotion();                                                                                                      // [0x17a8410] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.StopCameraShake
	void StopCameraShake(UClass* CameraShake);                                                                               // [0x17a9660] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.StartQTE
	void StartQTE(AActor* QTEInstigator);                                                                                    // [0x17aa910] Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.StartInteractionWithActionGameplayObject
	void StartInteractionWithActionGameplayObject(AActor* ActionGameplayActor);                                              // [0x17a8690] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.SpawnVehicle
	void SpawnVehicle(uint64_t ItemId, uint16_t VehicleID);                                                                  // [0x17b08b0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.ShowSteamStoreInterface
	void ShowSteamStoreInterface();                                                                                          // [0x17a8620] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.ShowDeathScreen
	void ShowDeathScreen();                                                                                                  // [0xe77850] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.ShowAllMeshesVisibleOnClient
	void ShowAllMeshesVisibleOnClient(bool bVisible);                                                                        // [0x17a8c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.SetShowAllMeshes
	void SetShowAllMeshes(bool ShowAllMeshes);                                                                               // [0x17ad470] Final|Native|Private|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.SetDeathFromAnomaly
	void SetDeathFromAnomaly(bool DeathFromAnomaly, bool ShowAllMeshes, bool DeathSimulatePhysics);                          // [0x17ad980] Final|Native|Private|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.SetDeathByTimer
	void SetDeathByTimer(float DelayValue, UClass* DamageTypeClass, EWTLCharacterEffectType EffectType, AController* DeathInstigator, AActor* DeathCauser); // [0x17a7d90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.SetCurrentPose
	void SetCurrentPose(EWTLCharacterPose Value);                                                                            // [0x17adb80] Final|Native|Private|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.SetAllMeshesVisible
	void SetAllMeshesVisible(bool bVisible);                                                                                 // [0x1773b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.Server_UseEquipmentSlot
	void Server_UseEquipmentSlot(char SlotNumber);                                                                           // [0x17ab600] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_Use
	void Server_Use(AActor* Actor);                                                                                          // [0x17ab490] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_ThrowNut
	void Server_ThrowNut();                                                                                                  // [0x17ab700] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SwitchFireMode
	void Server_SwitchFireMode();                                                                                            // [0x17afd50] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_Suicide
	void Server_Suicide();                                                                                                   // [0x17b1130] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_StopItemPlacement
	void Server_StopItemPlacement();                                                                                         // [0x17acd70] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_StopEmotion
	void Server_StopEmotion();                                                                                               // [0x17a8430] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_StartItemPlacement
	void Server_StartItemPlacement();                                                                                        // [0x17acdd0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SetSprintMode
	void Server_SetSprintMode(bool Value);                                                                                   // [0x17b1020] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SetHoldingBreath
	void Server_SetHoldingBreath(bool Value);                                                                                // [0x17b0d50] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SetFlashlightEnabled
	void Server_SetFlashlightEnabled(bool Value);                                                                            // [0x17a7940] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SetDeathFromAnomaly
	void Server_SetDeathFromAnomaly(bool DeathFromAnomaly, bool ShowAllMeshes, bool DeathSimulatePhysics);                   // [0x17ad750] Final|Native|Private|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.Server_SetCurrentPose
	void Server_SetCurrentPose(EWTLCharacterPose Value);                                                                     // [0x17adc80] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SetAppearanceProcessed
	void Server_SetAppearanceProcessed();                                                                                    // [0x17b13a0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SetAimMode
	void Server_SetAimMode(bool Value, bool IgnoreHandsState);                                                               // [0x17b0e80] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SendQTEAction
	void Server_SendQTEAction(char ActionID);                                                                                // [0x17b1280] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_SelectSlot
	void Server_SelectSlot(char SlotNumber, bool AllowReselect, bool Force);                                                 // [0x17b0680] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_RequestStuffPlacement
	void Server_RequestStuffPlacement(uint64_t StuffItemID);                                                                 // [0x17ad080] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_RequestSpecialStuffPlacement
	void Server_RequestSpecialStuffPlacement(uint16_t StuffID);                                                              // [0x17acf70] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_RequestActionGameplayActorToUse
	void Server_RequestActionGameplayActorToUse(AActor* ActionGameplayActor);                                                // [0x17ac840] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_RequestActionGameplayActorToStopUse
	void Server_RequestActionGameplayActorToStopUse();                                                                       // [0x17ac7e0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_QuickThrow
	void Server_QuickThrow();                                                                                                // [0x17ab430] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_QuickMeleeHit
	void Server_QuickMeleeHit();                                                                                             // [0x17ab5a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_ProcessBulletFlyNear
	void Server_ProcessBulletFlyNear(FVector_NetQuantize Location, EWTLCaliber Caliber);                                     // [0x17ab190] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_PlayEmotion
	void Server_PlayEmotion(int32_t EmotionTypeID, int32_t EmotionID);                                                       // [0x17a8490] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_PlaceStuff
	void Server_PlaceStuff();                                                                                                // [0x17acd10] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_OnUse
	void Server_OnUse(AActor* InteractiveActor);                                                                             // [0x17affb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_OnTiltRight
	void Server_OnTiltRight();                                                                                               // [0x17afcf0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_OnTiltLeft
	void Server_OnTiltLeft();                                                                                                // [0x17afc90] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_OnStopTilt
	void Server_OnStopTilt();                                                                                                // [0x17afc30] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_OnStartUse
	void Server_OnStartUse();                                                                                                // [0x17aff50] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_OnFinishUse
	void Server_OnFinishUse(AActor* InteractiveObject, bool Success);                                                        // [0x17afdb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_NotifyClientCheatState
	void Server_NotifyClientCheatState(EWTLCheatType CheatType, FString Info);                                               // [0x17b1400] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_MainUseStop
	void Server_MainUseStop(int32_t OptionalValue1, int32_t OptionalValue2);                                                 // [0x17b0ac0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_MainUseStart
	void Server_MainUseStart(FVector2D AimOffset);                                                                           // [0x17b0c50] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_HideItem
	void Server_HideItem(bool Force);                                                                                        // [0x17ad270] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_HideDrone
	void Server_HideDrone();                                                                                                 // [0x17accb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_CoreHacking_Process
	void Server_CoreHacking_Process(char InputValue, AWTLFortificationCommandCore* CommandCore);                             // [0x17aa660] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_ClearCurrentSlot
	void Server_ClearCurrentSlot();                                                                                          // [0x17b0620] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_CancelStuffPlacementMode
	void Server_CancelStuffPlacementMode();                                                                                  // [0x17acf10] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_CancelQTE
	void Server_CancelQTE();                                                                                                 // [0x17b1220] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_AssignItemToFastAccessSlot
	void Server_AssignItemToFastAccessSlot(char SlotNumber, EWTLItemType ItemType, uint64_t ItemId);                         // [0x17b03f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_AlternativeUseStop
	void Server_AlternativeUseStop();                                                                                        // [0x17b0a00] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.Server_AlternativeUseStart
	void Server_AlternativeUseStart();                                                                                       // [0x17b0a60] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacter.ResetIdleTimer
	void ResetIdleTimer();                                                                                                   // [0x17a6fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.PostDeath
	void PostDeath();                                                                                                        // [0x17ac3e0] Native|Public        
	// Function /Script/WTL.WTLCharacter.PlayStunhit
	void PlayStunhit(EWTLCharacterStunhitDirection StunhitDirection, bool IsHideUsableItem);                                 // [0x17a9280] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.PlaySoundEventAttached
	void PlaySoundEventAttached(UFMODEvent* Sound);                                                                          // [0x17a9a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.PlaySoundEvent2D
	void PlaySoundEvent2D(UFMODEvent* Sound);                                                                                // [0x17a9b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.PlayMontage
	void PlayMontage(UAnimMontage* MontageToPlay, bool BlockInput);                                                          // [0x17a9070] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.PlayCameraShake
	void PlayCameraShake(UClass* CameraShake, float Value, bool IsHideUsableItem, bool RemoveAiming);                        // [0x17a97b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.OnUnmuteCharacter
	void OnUnmuteCharacter();                                                                                                // [0x17ae260] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnTextChatUnmuteCharacter
	void OnTextChatUnmuteCharacter();                                                                                        // [0x17ae0c0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnTextChatMuteCharacter
	void OnTextChatMuteCharacter();                                                                                          // [0x17ae240] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnShowInformationAboutCharacter
	void OnShowInformationAboutCharacter();                                                                                  // [0x17ae720] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnShortCharacterInfoChanged
	void OnShortCharacterInfoChanged();                                                                                      // [0x17ad190] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnSendTextChatMessageToCharacter
	void OnSendTextChatMessageToCharacter();                                                                                 // [0x17ae700] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnReportCharacter
	void OnReportCharacter();                                                                                                // [0x17adf60] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_UsableItemInHands
	void OnRep_UsableItemInHands();                                                                                          // [0x17afa90] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_Stamina
	void OnRep_Stamina();                                                                                                    // [0x17af620] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_QTEState
	void OnRep_QTEState();                                                                                                   // [0x17b1380] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_PersonalEnergyShieldState
	void OnRep_PersonalEnergyShieldState();                                                                                  // [0x17b1a70] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_Oxygen
	void OnRep_Oxygen();                                                                                                     // [0x17af580] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_LastTakeHitInfo
	void OnRep_LastTakeHitInfo();                                                                                            // [0x17afa70] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_LastEventPoint
	void OnRep_LastEventPoint();                                                                                             // [0x17af420] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsTraveling
	void OnRep_IsTraveling();                                                                                                // [0x17af960] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsProned
	void OnRep_IsProned();                                                                                                   // [0x17ac6e0] Native|Public        
	// Function /Script/WTL.WTLCharacter.OnRep_IsPlacingItem
	void OnRep_IsPlacingItem();                                                                                              // [0x17af440] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsInvulnerable
	void OnRep_IsInvulnerable();                                                                                             // [0x17afa50] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsInSafeZone
	void OnRep_IsInSafeZone();                                                                                               // [0x17afa30] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsInPVPZone
	void OnRep_IsInPVPZone();                                                                                                // [0x17af9c0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsInMobileResurectionPointWorkZone
	void OnRep_IsInMobileResurectionPointWorkZone();                                                                         // [0x17af9c0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsInFishingZone
	void OnRep_IsInFishingZone();                                                                                            // [0x17af560] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsHoldingBreath
	void OnRep_IsHoldingBreath();                                                                                            // [0x17af7e0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_IsClimbingLadder
	void OnRep_IsClimbingLadder();                                                                                           // [0x17ac650] Final|Native|Public  
	// Function /Script/WTL.WTLCharacter.OnRep_HandsState
	void OnRep_HandsState(EWTLHandsState PreviousHandsState);                                                                // [0x17af710] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_FlashlightEnabled
	void OnRep_FlashlightEnabled();                                                                                          // [0x17af3e0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_DroneRenderTargetActor
	void OnRep_DroneRenderTargetActor();                                                                                     // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_Drone
	void OnRep_Drone();                                                                                                      // [0x17b1ac0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_CurrentRadiationLevel
	void OnRep_CurrentRadiationLevel();                                                                                      // [0x17af400] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_CurrentPose
	void OnRep_CurrentPose(EWTLCharacterPose PrevValue);                                                                     // [0x17afab0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_CurrentEmotionKey
	void OnRep_CurrentEmotionKey();                                                                                          // [0x17b15c0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_CurrentActionGameplayActor
	void OnRep_CurrentActionGameplayActor(AActor* PrevActor);                                                                // [0x17b15e0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_bIsSprinting
	void OnRep_bIsSprinting();                                                                                               // [0x17afbf0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_bIsJumping
	void OnRep_bIsJumping();                                                                                                 // [0x17afb80] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnRep_bIsAiming
	void OnRep_bIsAiming();                                                                                                  // [0x17afc10] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnPickupPlaceableStuffConfirmed
	void OnPickupPlaceableStuffConfirmed();                                                                                  // [0x17ade60] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnPickupPlaceableStuff
	void OnPickupPlaceableStuff();                                                                                           // [0x17adf40] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnOfferBarterToCharacter
	void OnOfferBarterToCharacter();                                                                                         // [0x17ae600] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnOfferBarter
	void OnOfferBarter(FString Message);                                                                                     // [0x17ae510] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnMuteCharacter
	void OnMuteCharacter();                                                                                                  // [0x17ae380] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnMontageStarted
	void OnMontageStarted(UAnimMontage* Montage);                                                                            // [0x17ae8f0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnMontageEnded
	void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);                                                           // [0x17ae9d0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnInviteCharacterToGroup
	void OnInviteCharacterToGroup();                                                                                         // [0x17ae4f0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnGiveTokensToCharacter
	void OnGiveTokensToCharacter();                                                                                          // [0x17ae620] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnCommendCharacter
	void OnCommendCharacter();                                                                                               // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnChargePlaceableStuff
	void OnChargePlaceableStuff();                                                                                           // [0x17add80] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnCharacterInfoChanged
	void OnCharacterInfoChanged();                                                                                           // [0x17ad1f0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.OnCapsuleEndOverlap
	void OnCapsuleEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17abdc0] Final|Native|Public  
	// Function /Script/WTL.WTLCharacter.OnCapsuleBeginOverlap
	void OnCapsuleBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17ac030] Final|Native|Public|HasOutParms 
	// Function /Script/WTL.WTLCharacter.OnBulletFlyNearVolumeBeginOverlap
	void OnBulletFlyNearVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17b16c0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCharacter.NetMulticast_ThrowNut
	void NetMulticast_ThrowNut();                                                                                            // [0x17ab9e0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.NetMulticast_ShowTeleportationDeviceEffect
	void NetMulticast_ShowTeleportationDeviceEffect();                                                                       // [0x17ab780] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.NetMulticast_SetBrokenLight
	void NetMulticast_SetBrokenLight(bool Value);                                                                            // [0x17a7a50] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.NetMulticast_PlayPickupAnimation
	void NetMulticast_PlayPickupAnimation(float Rate);                                                                       // [0x17ab910] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.NetMulticast_PlayAnimMontage
	void NetMulticast_PlayAnimMontage(UAnimMontage* Montage, float Rate);                                                    // [0x17ab7a0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.NetMulticast_OnTeleportedWithDevice
	void NetMulticast_OnTeleportedWithDevice();                                                                              // [0x17ab760] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.NetMulticast_OnStuffEquipmentStateChanged
	void NetMulticast_OnStuffEquipmentStateChanged(uint64_t CharacterID, uint16_t StuffID, bool State);                      // [0x17ac950] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLCharacter.LevelLoadedAtStart
	void LevelLoadedAtStart();                                                                                               // [0x17b11f0] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.Kill
	void Kill(AController* Killer, AActor* DamageCauser, UClass* DamageTypeClass, EWTLCharacterEffectType EffectType);       // [0x17ac400] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.K2_ShowTeleportationDeviceEffect
	void K2_ShowTeleportationDeviceEffect();                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_ShowExplosionEffectsAfterDeath
	void K2_ShowExplosionEffectsAfterDeath();                                                                                // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_ShowEffectsAfterDeath
	void K2_ShowEffectsAfterDeath();                                                                                         // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_SetMovementEnabled
	void K2_SetMovementEnabled(bool Value);                                                                                  // [0x17a72a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.K2_OnStartProne
	void K2_OnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_OnEndProne
	void K2_OnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_OnEffectRemoved
	void K2_OnEffectRemoved(EWTLCharacterEffectType EffectType);                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_OnEffectAdded
	void K2_OnEffectAdded(EWTLCharacterEffectType EffectType);                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_OnDeath
	void K2_OnDeath();                                                                                                       // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Script/WTL.WTLCharacter.K2_LockCameraRotation
	void K2_LockCameraRotation(bool Value);                                                                                  // [0x17a71c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.K2_GetGenericTeamID
	FGenericTeamId K2_GetGenericTeamID();                                                                                    // [0x17aa550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.K2_GetCharacterClass
	EWTLCharacterClass K2_GetCharacterClass();                                                                               // [0x17aa2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.K2_CanBeSeenFrom
	bool K2_CanBeSeenFrom(FVector& ObserverLocation, FVector& OutSeenLocation, int32_t& NumberOfLoSChecksPerformed, float& OutSightStrength, AActor* IgnoreActor); // [0x17a8070] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.IsReadyToSpawnVehicle
	bool IsReadyToSpawnVehicle();                                                                                            // [0x17a74d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsPVPEnabled
	bool IsPVPEnabled();                                                                                                     // [0x17aa0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsPlayingEmotion
	bool IsPlayingEmotion();                                                                                                 // [0x17a83e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInSafeZone
	bool IsInSafeZone();                                                                                                     // [0x17aa1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInPVPZone
	bool IsInPVPZone();                                                                                                      // [0x17aa120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInMobileResurectionPointWorkZone
	bool IsInMobileResurectionPointWorkZone();                                                                               // [0x17aa180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInFortificationScoreZone
	bool IsInFortificationScoreZone();                                                                                       // [0x17aa160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInFishingZone
	bool IsInFishingZone();                                                                                                  // [0x17a7d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInExactSafeZone
	bool IsInExactSafeZone(AWTLSafeZone* SafeZone);                                                                          // [0x17a9ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IsInAir
	bool IsInAir();                                                                                                          // [0x17a7120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.IncrementMonstersNear
	void IncrementMonstersNear(int32_t Value);                                                                               // [0x17a7790] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.IncrementMonstersFollowing
	void IncrementMonstersFollowing(int32_t Value);                                                                          // [0x17a7860] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.HideAllMeshes
	void HideAllMeshes();                                                                                                    // [0x17ad380] Final|Native|Private|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.GetSkeletalMeshComponentsByRef
	void GetSkeletalMeshComponentsByRef(TArray<USkeletalMeshComponent*>& Meshes);                                            // [0x17a7b30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.GetSkeletalMeshComponents
	TArray<USkeletalMeshComponent*> GetSkeletalMeshComponents();                                                             // [0x17a7cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.GetPercentHealth
	float GetPercentHealth();                                                                                                // [0x17aa4a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetLastEventPoint
	AWTLEventPoint* GetLastEventPoint();                                                                                     // [0x17a8770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetIsInQTE
	bool GetIsInQTE();                                                                                                       // [0x17a9e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetHUD
	AWTLHUD* GetHUD();                                                                                                       // [0x17aa4d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetDeathFromAnomaly
	bool GetDeathFromAnomaly();                                                                                              // [0x17a71a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetCurrentPose
	EWTLCharacterPose GetCurrentPose();                                                                                      // [0x17aa500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetCurrentActionGameplayObject
	AActor* GetCurrentActionGameplayObject();                                                                                // [0x17a8660] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.GetComplexion
	char GetComplexion();                                                                                                    // [0x17abd50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetChickenStatusAlpha
	float GetChickenStatusAlpha();                                                                                           // [0x17a70c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetChickenStatus
	char GetChickenStatus();                                                                                                 // [0x17a7100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetCharacterRankName
	FString GetCharacterRankName();                                                                                          // [0x17aab50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetCharacterRank
	char GetCharacterRank();                                                                                                 // [0x17aabd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetCharacterLevel
	char GetCharacterLevel();                                                                                                // [0x17aac00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.GetAITeam
	EWTLAITeam GetAITeam();                                                                                                  // [0x17aa520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.FinishInteractionWithActionGameplayObject
	void FinishInteractionWithActionGameplayObject();                                                                        // [0x17a8640] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.FailQTE
	void FailQTE();                                                                                                          // [0x17aa7f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.DecrementMonstersNear
	void DecrementMonstersNear(int32_t Value);                                                                               // [0x17a75a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.DecrementMonstersFollowing
	void DecrementMonstersFollowing(int32_t Value);                                                                          // [0x17a7690] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.Client_WrongPlacementSpotMessage
	void Client_WrongPlacementSpotMessage(FText Message);                                                                    // [0x17acb80] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_UpdateEquipmentItemStates
	void Client_UpdateEquipmentItemStates();                                                                                 // [0x17acb40] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ShowWarningText
	void Client_ShowWarningText(FText WarningText, bool IsPlaySound);                                                        // [0x17aba00] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ShowWarning
	void Client_ShowWarning(EWTLWarningTitleWidgetType WarningTitleWidgetType, bool IsPlaySound);                            // [0x17abbd0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ShowTeleportationDeviceWindowWidget
	void Client_ShowTeleportationDeviceWindowWidget(uint64_t TeleportationDeviceItemID);                                     // [0x17ac700] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ShowSteamStoreInterface
	void Client_ShowSteamStoreInterface();                                                                                   // [0x17abd30] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ShowContentInventory
	void Client_ShowContentInventory(AActor* Actor);                                                                         // [0x17ab350] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ShowActionTimerWidget
	void Client_ShowActionTimerWidget(float Timeout, EWTLActionTimerWidgetType Type, EWTLCountdownSliderWidgetFillingType FillingType); // [0x17aefb0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_SetDeathFromAnomaly
	void Client_SetDeathFromAnomaly(bool DeathFromAnomaly, bool ShowAllMeshes, bool DeathSimulatePhysics);                   // [0x17ad550] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_SetAllMeshesVisible
	void Client_SetAllMeshesVisible(bool bVisible);                                                                          // [0x17a8d50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_SetAdminGodMode
	void Client_SetAdminGodMode(bool Value);                                                                                 // [0x17a9d60] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_SetAdminDropMode
	void Client_SetAdminDropMode(bool Value);                                                                                // [0x17a9c80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_SelectSlot
	void Client_SelectSlot(char SlotNumber, bool AllowReselect, bool Force);                                                 // [0x17b01c0] Final|Net|NetReliableNative|Event|Private|NetClient|NetValidate 
	// Function /Script/WTL.WTLCharacter.Client_ResetCurrentInteractiveObjetHighlight
	void Client_ResetCurrentInteractiveObjetHighlight();                                                                     // [0x17a8c10] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.Client_ResetAimMode
	void Client_ResetAimMode();                                                                                              // [0x17b0e60] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_RadiationDetectorSignal
	void Client_RadiationDetectorSignal(float Power);                                                                        // [0x17a8a70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnUsePortalError
	void Client_OnUsePortalError();                                                                                          // [0x17aaf20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnUsePortal
	void Client_OnUsePortal();                                                                                               // [0x17aaf40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnStuffPlacementMode
	void Client_OnStuffPlacementMode(uint16_t StuffID);                                                                      // [0x17ace30] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnPostSelectSlot
	void Client_OnPostSelectSlot(char SlotNumber);                                                                           // [0x17b00c0] Final|Net|NetReliableNative|Event|Private|NetClient|NetValidate 
	// Function /Script/WTL.WTLCharacter.Client_OnPosses
	void Client_OnPosses(uint64_t PossesedCharacterID);                                                                      // [0x17af300] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnPlaceableStuffUsed
	void Client_OnPlaceableStuffUsed(AActor* Actor);                                                                         // [0x17ae7f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnMedicineApplied
	void Client_OnMedicineApplied(uint16_t MedicineID);                                                                      // [0x17a8990] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnItemUnequipped
	void Client_OnItemUnequipped();                                                                                          // [0x17ad210] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnItemEquipped
	void Client_OnItemEquipped();                                                                                            // [0x17ad230] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnHideItem
	void Client_OnHideItem();                                                                                                // [0x17ad250] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnEventZoneLeave
	void Client_OnEventZoneLeave(AWTLEventPoint* EventPoint);                                                                // [0x17aec90] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnEventZoneFinished
	void Client_OnEventZoneFinished(AWTLEventPoint* EventPoint, bool Successful);                                            // [0x17aeb30] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnEventZoneEnter
	void Client_OnEventZoneEnter(AWTLEventPoint* EventPoint, bool ShowInformer);                                             // [0x17aed70] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnEquipmentItemStateChanged
	void Client_OnEquipmentItemStateChanged(uint16_t StuffID, bool bIsEnabled);                                              // [0x17aa9f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnEffectRemoved
	void Client_OnEffectRemoved(EWTLCharacterEffectType EffectType);                                                         // [0x17aac30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnEffectAdded
	void Client_OnEffectAdded(EWTLCharacterEffectType EffectType);                                                           // [0x17aad00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnCharacterUsed
	void Client_OnCharacterUsed();                                                                                           // [0x17ae8d0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_OnBulletFlyNear
	void Client_OnBulletFlyNear(FVector_NetQuantize Position, EWTLCaliber Caliber);                                          // [0x17af190] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_NDPDetectorSignal
	void Client_NDPDetectorSignal(float Power);                                                                              // [0x17a8b40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_LockInputUnequipUsableItemAndUse
	void Client_LockInputUnequipUsableItemAndUse();                                                                          // [0x17a9e60] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_HideActionTimerWidget
	void Client_HideActionTimerWidget(bool Success);                                                                         // [0x17aeed0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_EffectCameraManager
	void Client_EffectCameraManager(float AddVingette, float AddFringe, bool IsHideUsableItem, bool RemoveAiming);           // [0x17a93d0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.Client_CoreHacking_Result
	void Client_CoreHacking_Result(char Result);                                                                             // [0x17aa590] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ClearChat
	void Client_ClearChat();                                                                                                 // [0x17a6fe0] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_ApplyHearingDamage
	void Client_ApplyHearingDamage(float Duration, float Falloff);                                                           // [0x17a9e80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.Client_AddMarkers
	void Client_AddMarkers(TArray<FWTLMarkerMemoryElement> Markers);                                                         // [0x17a7380] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLCharacter.CleanMotionVector
	void CleanMotionVector();                                                                                                // [0x17a8790] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.ChickenStatusDelta
	void ChickenStatusDelta(int32_t Delta);                                                                                  // [0x17a7000] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.CharacterStunned
	bool CharacterStunned();                                                                                                 // [0x17a74f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.CanSpawnOnSafeZone
	bool CanSpawnOnSafeZone();                                                                                               // [0x17aa1a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.CancelQTE
	void CancelQTE(bool bIsFromClientside);                                                                                  // [0x17aa810] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.Broadcast_SetAllMeshesVisible
	void Broadcast_SetAllMeshesVisible(bool bVisible);                                                                       // [0x17a8e30] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.Broadcast_PlayMontage
	void Broadcast_PlayMontage(UAnimMontage* MontageToPlay, bool BlockInput);                                                // [0x17a8f10] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.Broadcast_OnStunhit
	void Broadcast_OnStunhit(EWTLCharacterStunhitDirection StunhitDirection);                                                // [0x17a91b0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLCharacter.BPHavePremium
	bool BPHavePremium();                                                                                                    // [0x17aa1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.BPGetCharacterName
	FString BPGetCharacterName();                                                                                            // [0x17aa330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.BPGetCharacterID
	int64_t BPGetCharacterID();                                                                                              // [0x17aa420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AvailableNear
	bool AvailableNear();                                                                                                    // [0x17a7520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AvailableForPursuit
	bool AvailableForPursuit();                                                                                              // [0x17a7560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.ApplyHearingDamage
	void ApplyHearingDamage(float Duration, float Falloff);                                                                  // [0x17a9e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.ApplyEffectToCharacter
	void ApplyEffectToCharacter(EWTLCharacterEffectType EffectType, float Value);                                            // [0x17aadd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacter.AllLevelsLoadedAtStart
	void AllLevelsLoadedAtStart();                                                                                           // [0x17b1190] Final|Native|Private 
	// Function /Script/WTL.WTLCharacter.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0x17ab040] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17aaf60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17ab150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17ab0c0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17ab110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacter.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17ab080] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLAnimationMetaData
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLAnimationMetaData : public UAnimMetaData
{ 
public:
	bool                                               bShouldReplaceAnimInstance;                                 // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              RagdollBlendWeight;                                         // 0x002C   (0x0004)  
};

/// Class /Script/WTL.WTLRootMotionAnimationMetaData
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLRootMotionAnimationMetaData : public UAnimMetaData
{ 
public:
	EWTLRootMotionControlLockingType                   RootMotionControllerLockingType;                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLCameraLimitsAnimationMetaData
/// Size: 0x0010 (0x000028 - 0x000038)
class UWTLCameraLimitsAnimationMetaData : public UAnimMetaData
{ 
public:
	float                                              YawLimit;                                                   // 0x0028   (0x0004)  
	float                                              MinPitchLimit;                                              // 0x002C   (0x0004)  
	float                                              MaxPitchLimit;                                              // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLCameraStyleAnimationMetaData
/// Size: 0x0010 (0x000028 - 0x000038)
class UWTLCameraStyleAnimationMetaData : public UAnimMetaData
{ 
public:
	FName                                              CameraStyle;                                                // 0x0028   (0x0008)  
	float                                              FreeCameraDistance;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLPawnRotationLockingAnimationMetaData
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLPawnRotationLockingAnimationMetaData : public UAnimMetaData
{ 
public:
	bool                                               bOverrideUseControllerPitch;                                // 0x0028   (0x0001)  
	bool                                               bNewUseControllerPitchValue;                                // 0x0029   (0x0001)  
	bool                                               bOverrideUseControllerYaw;                                  // 0x002A   (0x0001)  
	bool                                               bNewUseControllerYawValue;                                  // 0x002B   (0x0001)  
	bool                                               bOverrideUseControllerRoll;                                 // 0x002C   (0x0001)  
	bool                                               bNewUseControllerRollValue;                                 // 0x002D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Class /Script/WTL.WTLSpecialStatesAnimationMetaData
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLSpecialStatesAnimationMetaData : public UAnimMetaData
{ 
public:
	bool                                               bOverrideCrouchState;                                       // 0x0028   (0x0001)  
	bool                                               bNewCrouchState;                                            // 0x0029   (0x0001)  
	bool                                               bLockMovement;                                              // 0x002A   (0x0001)  
	bool                                               BlockCameraRotation;                                        // 0x002B   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLPawnCapsuleCollisionRemover
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLPawnCapsuleCollisionRemover : public UAnimMetaData
{ 
public:
};

/// Class /Script/WTL.WTLPawnInVehicleMetaData
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLPawnInVehicleMetaData : public UAnimMetaData
{ 
public:
	bool                                               bShowCharacterMesh;                                         // 0x0028   (0x0001)  
	bool                                               bHideMeshIfMontageEnded;                                    // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Class /Script/WTL.WTLResetLowerBodyRotationAnimationMetaData
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLResetLowerBodyRotationAnimationMetaData : public UAnimMetaData
{ 
public:
};

/// Class /Script/WTL.WTLCharacterBodyAnimInstance
/// Size: 0x0CE0 (0x0002C0 - 0x000FA0)
class UWTLCharacterBodyAnimInstance : public UAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_2[0x40];                                      // 0x02C0   (0x0040)  MISSED
	FWTLCharacterAnimInstanceProxy                     CharacterProxy;                                             // 0x0300   (0x0770)  
	TMap<uint16_t, uint16_t>                           WeaponItemRemap;                                            // 0x0A70   (0x0050)  
	TMap<uint16_t, uint16_t>                           StuffItemRemap;                                             // 0x0AC0   (0x0050)  
	bool                                               IsFirstPerson;                                              // 0x0B10   (0x0001)  
	EWTLSex                                            CharacterSex;                                               // 0x0B11   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0B12   (0x0002)  MISSED
	FVector                                            LookDirection;                                              // 0x0B14   (0x000C)  
	float                                              CameraAimOffset;                                            // 0x0B20   (0x0004)  
	float                                              CameraAimOffsetInterpSpeedMultiplier;                       // 0x0B24   (0x0004)  
	float                                              MoveDirection;                                              // 0x0B28   (0x0004)  
	float                                              SnuggleValue;                                               // 0x0B2C   (0x0004)  
	float                                              MovementSpeed;                                              // 0x0B30   (0x0004)  
	float                                              VelocityZ;                                                  // 0x0B34   (0x0004)  
	float                                              BodyTilt;                                                   // 0x0B38   (0x0004)  
	bool                                               bIsInAir;                                                   // 0x0B3C   (0x0001)  
	bool                                               bIsUnderWater;                                              // 0x0B3D   (0x0001)  
	bool                                               bIsInWater;                                                 // 0x0B3E   (0x0001)  
	bool                                               bMovesOnWater;                                              // 0x0B3F   (0x0001)  
	bool                                               bIsAiming;                                                  // 0x0B40   (0x0001)  
	bool                                               bIsCrouch;                                                  // 0x0B41   (0x0001)  
	bool                                               bIsProne;                                                   // 0x0B42   (0x0001)  
	bool                                               bIsJumping;                                                 // 0x0B43   (0x0001)  
	bool                                               bIsSprinting;                                               // 0x0B44   (0x0001)  
	bool                                               bIsLadderClimbing;                                          // 0x0B45   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0B46   (0x0002)  MISSED
	FVector                                            InputVector;                                                // 0x0B48   (0x000C)  
	float                                              MoveSpeedValue;                                             // 0x0B54   (0x0004)  
	float                                              MoveTurnValue;                                              // 0x0B58   (0x0004)  
	EWTLCharacterMoveState                             MovementState;                                              // 0x0B5C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0B5D   (0x0003)  MISSED
	float                                              HoldingBreath;                                              // 0x0B60   (0x0004)  
	float                                              StaminaValue;                                               // 0x0B64   (0x0004)  
	float                                              TirednessValue;                                             // 0x0B68   (0x0004)  
	float                                              TirednessValueMultiplier;                                   // 0x0B6C   (0x0004)  
	UCurveVector*                                      AnimationCurve;                                             // 0x0B70   (0x0008)  
	FRotator                                           CurrentWeaponRotation;                                      // 0x0B78   (0x000C)  
	EWTLHandsState                                     HandsState;                                                 // 0x0B84   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0B85   (0x0003)  MISSED
	float                                              ItemEquipTime;                                              // 0x0B88   (0x0004)  
	float                                              ItemUnequipTime;                                            // 0x0B8C   (0x0004)  
	float                                              LeftHandThumbInputUp;                                       // 0x0B90   (0x0004)  
	float                                              LeftHandThumbInputRight;                                    // 0x0B94   (0x0004)  
	bool                                               CanUseHandsLocomotion;                                      // 0x0B98   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0B99   (0x0003)  MISSED
	FName                                              IKRightFootAlphaCurveName;                                  // 0x0B9C   (0x0008)  
	FName                                              IKLeftFootAlphaCurveName;                                   // 0x0BA4   (0x0008)  
	FName                                              IKRightKneeSocketName;                                      // 0x0BAC   (0x0008)  
	FName                                              IKLeftKneeSocketName;                                       // 0x0BB4   (0x0008)  
	float                                              IKHipInterpSpeed;                                           // 0x0BBC   (0x0004)  
	float                                              IKEffectorPositionInterpSpeed;                              // 0x0BC0   (0x0004)  
	float                                              IKAlphaInterpSpeed;                                         // 0x0BC4   (0x0004)  
	float                                              IKFootNormalInterpSpeed;                                    // 0x0BC8   (0x0004)  
	float                                              IKHipOffset;                                                // 0x0BCC   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x0BD0   (0x0004)  MISSED
	float                                              IKFloorTraceValue;                                          // 0x0BD4   (0x0004)  
	FVector                                            IKHipTarget;                                                // 0x0BD8   (0x000C)  
	FVector                                            IKRightFootEffectorPosition;                                // 0x0BE4   (0x000C)  
	unsigned char                                      UnknownData07_5[0xC];                                       // 0x0BF0   (0x000C)  MISSED
	FVector                                            IKLeftFootEffectorPosition;                                 // 0x0BFC   (0x000C)  
	unsigned char                                      UnknownData08_5[0xC];                                       // 0x0C08   (0x000C)  MISSED
	FVector                                            IKRightKneePosition;                                        // 0x0C14   (0x000C)  
	FVector                                            IKLeftKneePosition;                                         // 0x0C20   (0x000C)  
	FVector                                            IKRightFootNormal;                                          // 0x0C2C   (0x000C)  
	unsigned char                                      UnknownData09_5[0xC];                                       // 0x0C38   (0x000C)  MISSED
	FVector                                            IKLeftFootNormal;                                           // 0x0C44   (0x000C)  
	unsigned char                                      UnknownData10_5[0xC];                                       // 0x0C50   (0x000C)  MISSED
	bool                                               bIKRightFootHit;                                            // 0x0C5C   (0x0001)  
	bool                                               bIKLeftFootHit;                                             // 0x0C5D   (0x0001)  
	unsigned char                                      UnknownData11_5[0x2];                                       // 0x0C5E   (0x0002)  MISSED
	float                                              IKRightFootAlpha;                                           // 0x0C60   (0x0004)  
	float                                              IKLeftFootAlpha;                                            // 0x0C64   (0x0004)  
	FName                                              IKHandsOffsetBoneName;                                      // 0x0C68   (0x0008)  
	FTransform                                         IKHandsOffsetBoneTransform;                                 // 0x0C70   (0x0030)  
	int32_t                                            UsableItemID;                                               // 0x0CA0   (0x0004)  
	int32_t                                            LastUsableItemID;                                           // 0x0CA4   (0x0004)  
	EWTLItemType                                       UsableItemType;                                             // 0x0CA8   (0x0001)  
	unsigned char                                      UnknownData12_5[0x7];                                       // 0x0CA9   (0x0007)  MISSED
	TArray<float>                                      UsableItemAnimationFloatParameters;                         // 0x0CB0   (0x0010)  
	TArray<FVector>                                    UsableItemAnimationVectorParameters;                        // 0x0CC0   (0x0010)  
	FVector                                            HandsOffset;                                                // 0x0CD0   (0x000C)  
	EWTLWeaponType                                     CurrentWeaponType;                                          // 0x0CDC   (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x0CDD   (0x0003)  MISSED
	float                                              RotationSpeedVertical;                                      // 0x0CE0   (0x0004)  
	FVector                                            RecoilTranslation;                                          // 0x0CE4   (0x000C)  
	FRotator                                           RecoilRotation;                                             // 0x0CF0   (0x000C)  
	unsigned char                                      UnknownData14_5[0x4];                                       // 0x0CFC   (0x0004)  MISSED
	UAnimSequence*                                     IdleAnimation;                                              // 0x0D00   (0x0008)  
	UAnimSequence*                                     SnuggleAnimation;                                           // 0x0D08   (0x0008)  
	UAimOffsetBlendSpace1D*                            AimOffsetBlendSpace;                                        // 0x0D10   (0x0008)  
	FVector                                            AimingHandsTranslation;                                     // 0x0D18   (0x000C)  
	FVector                                            AimingHandsOffset;                                          // 0x0D24   (0x000C)  
	FVector                                            MissileSocketOffset;                                        // 0x0D30   (0x000C)  
	FVector                                            ThumbLOffset;                                               // 0x0D3C   (0x000C)  
	FVector                                            ThumbROffset;                                               // 0x0D48   (0x000C)  
	float                                              FirstSwingingAnimAlphaScaleParameter;                       // 0x0D54   (0x0004)  
	float                                              SecondSwingingAnimAlphaScaleParameter;                      // 0x0D58   (0x0004)  
	float                                              ThirdPersonSwingingAnimAlphaParameter;                      // 0x0D5C   (0x0004)  
	float                                              FirstPersonSwingingAnimAlphaParameter;                      // 0x0D60   (0x0004)  
	float                                              CombatBreathAnimPlayRateScaleParameter;                     // 0x0D64   (0x0004)  
	float                                              CombatBreathAnimPlayRateMaxValueParameter;                  // 0x0D68   (0x0004)  
	float                                              CombatBreathAnimPlayRateMinValueParameter;                  // 0x0D6C   (0x0004)  
	float                                              ThirdPersonCombatBreathAnimAimingAlphaMaxValueParameter;    // 0x0D70   (0x0004)  
	float                                              ThirdPersonCombatBreathAnimAimingAlphaMinValueParameter;    // 0x0D74   (0x0004)  
	float                                              FirstPersonCombatBreathAnimAlphaParameter;                  // 0x0D78   (0x0004)  
	float                                              ThirdPersonWeaponRotationAnimAlphaParameter;                // 0x0D7C   (0x0004)  
	float                                              FirstPersonWeaponRotationAnimStaminaAlphaMinValueParameter; // 0x0D80   (0x0004)  
	float                                              FirstPersonWeaponRotationAnimStaminaAlphaMaxValueParameter; // 0x0D84   (0x0004)  
	float                                              FirstPersonWeaponRotationAnimAimingAlphaMinValueParameter;  // 0x0D88   (0x0004)  
	float                                              FirstPersonWeaponRotationAnimAimingAlphaMaxValueParameter;  // 0x0D8C   (0x0004)  
	float                                              WeaponRotationLocomotionAimingAlphaMinValueParameter;       // 0x0D90   (0x0004)  
	float                                              WeaponRotationLocomotionAimingAlphaMaxValueParameter;       // 0x0D94   (0x0004)  
	float                                              WeaponRotationLocomotionHoldingBreathAlphaMinValueParameter; // 0x0D98   (0x0004)  
	float                                              WeaponRotationLocomotionHoldingBreathAlphaMaxValueParameter; // 0x0D9C   (0x0004)  
	FName                                              RightPocketLocationSocketName;                              // 0x0DA0   (0x0008)  
	FName                                              LeftPocketLocationSocketName;                               // 0x0DA8   (0x0008)  
	FName                                              LeftJointTargetSocketName;                                  // 0x0DB0   (0x0008)  
	FName                                              RightJointTargetSocketName;                                 // 0x0DB8   (0x0008)  
	float                                              AimingRecoilAlphaMinValueParameter;                         // 0x0DC0   (0x0004)  
	float                                              AimingRecoilAlphaMaxValueParameter;                         // 0x0DC4   (0x0004)  
	float                                              ThirdPersonStaminaValueAnimPlayRateMinValueParameter;       // 0x0DC8   (0x0004)  
	float                                              ThirdPersonStaminaValueAnimPlayRateMaxValueParameter;       // 0x0DCC   (0x0004)  
	float                                              WeaponRotationAimOffsetVelocityMinValueParameter;           // 0x0DD0   (0x0004)  
	float                                              WeaponRotationAimOffsetVelocityMaxValueParameter;           // 0x0DD4   (0x0004)  
	float                                              StaminaInterpolationSpeed;                                  // 0x0DD8   (0x0004)  
	float                                              NonSprintingSpeedTreshold;                                  // 0x0DDC   (0x0004)  
	FVector                                            FloorNormal;                                                // 0x0DE0   (0x000C)  
	float                                              DotPCapsule;                                                // 0x0DEC   (0x0004)  
	float                                              DotPRightFoot;                                              // 0x0DF0   (0x0004)  
	float                                              DotPLeftFoot;                                               // 0x0DF4   (0x0004)  
	float                                              ForwardVelocity;                                            // 0x0DF8   (0x0004)  
	float                                              SideVelocity;                                               // 0x0DFC   (0x0004)  
	float                                              LowerBodyRelativeAngle;                                     // 0x0E00   (0x0004)  
	float                                              LowerBodyFixedRelativeAngle;                                // 0x0E04   (0x0004)  
	EWTLCharacterAnimationInstanceMovementState        LocomotionState;                                            // 0x0E08   (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x0E09   (0x0003)  MISSED
	float                                              RotationSpeedHorizontalWithDirection;                       // 0x0E0C   (0x0004)  
	float                                              OneMinusIsNoMovementCurveValue;                             // 0x0E10   (0x0004)  
	float                                              OneMinusEmptyHandsCurveValue;                               // 0x0E14   (0x0004)  
	float                                              AimingRecoilAlpha;                                          // 0x0E18   (0x0004)  
	float                                              ThirdPersonStaminaValueAnimPlayRate;                        // 0x0E1C   (0x0004)  
	float                                              IsNotFirstPersonAlpha;                                      // 0x0E20   (0x0004)  
	float                                              WeaponRotationAimOffsetForwardVelocity;                     // 0x0E24   (0x0004)  
	float                                              WeaponRotationAimOffsetSideVelocity;                        // 0x0E28   (0x0004)  
	float                                              CombatBreathAnimPlayRate;                                   // 0x0E2C   (0x0004)  
	float                                              CombatBreathAnimAlpha;                                      // 0x0E30   (0x0004)  
	float                                              WeaponRotationAnimAlpha;                                    // 0x0E34   (0x0004)  
	float                                              WeaponRotationLocomotionAlpha;                              // 0x0E38   (0x0004)  
	FRotator                                           AimOffsetBoneRotation;                                      // 0x0E3C   (0x000C)  
	float                                              AimingAlphaCurveValue;                                      // 0x0E48   (0x0004)  
	bool                                               bIsInCombatMode;                                            // 0x0E4C   (0x0001)  
	unsigned char                                      UnknownData16_5[0x3];                                       // 0x0E4D   (0x0003)  MISSED
	float                                              FirstSwingAnimAlpha;                                        // 0x0E50   (0x0004)  
	float                                              SecondSwingAnimAlpha;                                       // 0x0E54   (0x0004)  
	float                                              AimOffsetBoneRotationAlpha;                                 // 0x0E58   (0x0004)  
	FVector                                            HandsTranslationOffset;                                     // 0x0E5C   (0x000C)  
	float                                              OneMinusAimingAlphaCurveValue;                              // 0x0E68   (0x0004)  
	FVector                                            AimingHandsTranslationOffset;                               // 0x0E6C   (0x000C)  
	FVector                                            HandsAimOffsetDownTranslationOffset;                        // 0x0E78   (0x000C)  
	float                                              HandsAimOffsetDownAlpha;                                    // 0x0E84   (0x0004)  
	FVector                                            RightPocketLocation;                                        // 0x0E88   (0x000C)  
	FVector                                            LeftPocketLocation;                                         // 0x0E94   (0x000C)  
	FVector                                            LeftJointTargetLocation;                                    // 0x0EA0   (0x000C)  
	FVector                                            RightJointTargetLocation;                                   // 0x0EAC   (0x000C)  
	float                                              RightHandAlphaCurveValue;                                   // 0x0EB8   (0x0004)  
	float                                              LeftHandAlphaCurveValue;                                    // 0x0EBC   (0x0004)  
	FRotator                                           LowerBodyRotation;                                          // 0x0EC0   (0x000C)  
	FRotator                                           IKFootRootBoneRotation;                                     // 0x0ECC   (0x000C)  
	FVector                                            PelvisOffset;                                               // 0x0ED8   (0x000C)  
	FRotator                                           RightFootRotation;                                          // 0x0EE4   (0x000C)  
	FRotator                                           LeftFootRotation;                                           // 0x0EF0   (0x000C)  
	float                                              LadderLoopAnimPlayRate;                                     // 0x0EFC   (0x0004)  
	bool                                               IsLadderNoMovement;                                         // 0x0F00   (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0F01   (0x0003)  MISSED
	FVector                                            ScaleRibCageVector;                                         // 0x0F04   (0x000C)  
	FVector                                            InvertScaleRibCageVector;                                   // 0x0F10   (0x000C)  
	FVector                                            ScaleNeckVector;                                            // 0x0F1C   (0x000C)  
	FVector                                            ScaleHeadVector;                                            // 0x0F28   (0x000C)  
	FVector                                            ScaleHandsVector;                                           // 0x0F34   (0x000C)  
	FVector                                            InvertScaleHandsVector;                                     // 0x0F40   (0x000C)  
	FVector                                            ScaleFeetVector;                                            // 0x0F4C   (0x000C)  
	FVector                                            InvertScaleFeetVector;                                      // 0x0F58   (0x000C)  
	bool                                               bIsUnequip;                                                 // 0x0F64   (0x0001)  
	unsigned char                                      UnknownData18_5[0x3];                                       // 0x0F65   (0x0003)  MISSED
	float                                              FIsUnequip;                                                 // 0x0F68   (0x0004)  
	float                                              FScaleNeck;                                                 // 0x0F6C   (0x0004)  
	float                                              FScaleHead;                                                 // 0x0F70   (0x0004)  
	float                                              FScaleRibCage;                                              // 0x0F74   (0x0004)  
	float                                              FScaleBody;                                                 // 0x0F78   (0x0004)  
	float                                              FScaleHands;                                                // 0x0F7C   (0x0004)  
	float                                              FScaleFeet;                                                 // 0x0F80   (0x0004)  
	float                                              FTiltXWithFishingRod;                                       // 0x0F84   (0x0004)  
	float                                              FTiltYWithFishingRod;                                       // 0x0F88   (0x0004)  
	float                                              FRodResistanceValue;                                        // 0x0F8C   (0x0004)  
	bool                                               InFishingMode;                                              // 0x0F90   (0x0001)  
	bool                                               NowIsFishing;                                               // 0x0F91   (0x0001)  
	bool                                               ShowCathedFish;                                             // 0x0F92   (0x0001)  
	unsigned char                                      UnknownData19_5[0x1];                                       // 0x0F93   (0x0001)  MISSED
	int32_t                                            Complexion;                                                 // 0x0F94   (0x0004)  
	unsigned char                                      UnknownData20_6[0x8];                                       // 0x0F98   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.UpdateComplexity
	void UpdateComplexity();                                                                                                 // [0x17b8d20] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.K2_MortarLoadingInProccess
	bool K2_MortarLoadingInProccess();                                                                                       // [0x17b8680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.K2_GetMortarSocketLocationInComponentSpace
	FVector K2_GetMortarSocketLocationInComponentSpace(FName Socket);                                                        // [0x17b8a00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.K2_GetMortarSocketLocationInBoneSpace
	FVector K2_GetMortarSocketLocationInBoneSpace(FName Bone, FName Socket);                                                 // [0x17b87c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.K2_GetMortarSocketLocation
	FVector K2_GetMortarSocketLocation(FName Socket);                                                                        // [0x17b8bd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.K2_GetMortarInclineAlpha
	float K2_GetMortarInclineAlpha();                                                                                        // [0x17b8710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.GetUsableItemAnimationVectorParameter
	FVector GetUsableItemAnimationVectorParameter(int32_t Index);                                                            // [0x17b8e40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterBodyAnimInstance.GetUsableItemAnimationFloatParameter
	float GetUsableItemAnimationFloatParameter(int32_t Index);                                                               // [0x17b8d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLCharacterCameraComponent
/// Size: 0x0010 (0x0007C0 - 0x0007D0)
class UWTLCharacterCameraComponent : public UCameraComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x07C0   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLCharacterCustomizationHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLCharacterCustomizationHelper : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLCharacterDrop
/// Size: 0x0108 (0x000260 - 0x000368)
class AWTLCharacterDrop : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0260   (0x0010)  MISSED
	uint64_t                                           m_CharacterID;                                              // 0x0270   (0x0008)  
	uint64_t                                           m_CharacterGroupID;                                         // 0x0278   (0x0008)  
	uint16_t                                           m_CharacterClanID;                                          // 0x0280   (0x0002)  
	EWTLFaction                                        m_CharacterFaction;                                         // 0x0282   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0283   (0x0001)  MISSED
	int32_t                                            m_SlotsCount;                                               // 0x0284   (0x0004)  
	FWTLStorageContent                                 m_StorageContent;                                           // 0x0288   (0x00A8)  
	USceneComponent*                                   m_SceneComponent;                                           // 0x0330   (0x0008)  
	UStaticMeshComponent*                              m_StaticMeshComponent;                                      // 0x0338   (0x0008)  
	bool                                               IsHighLighted;                                              // 0x0340   (0x0001)  
	unsigned char                                      UnknownData02_6[0x27];                                      // 0x0341   (0x0027)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterDrop.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x17b94c0] Final|Native|Public  
};

/// Class /Script/WTL.WTLCharacterEffectsSystem
/// Size: 0x0018 (0x000028 - 0x000040)
class UWTLCharacterEffectsSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLCharacterIdentityComponent
/// Size: 0x07D0 (0x0000B0 - 0x000880)
class UWTLCharacterIdentityComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_2[0x448];                                     // 0x00B0   (0x0448)  MISSED
	TMap<AActor*, FWTLIdentificationMemoryElement>     m_IdentificationMemory;                                     // 0x04F8   (0x0050)  
	TArray<FWTLMarkerMemoryElement>                    m_MarkersMemory;                                            // 0x0548   (0x0010)  
	UFont*                                             m_Font;                                                     // 0x0558   (0x0008)  
	UTexture2D*                                        m_IdentificationIconsAtlas;                                 // 0x0560   (0x0008)  
	UTexture2D*                                        m_IdentificationAIIconsAtlas;                               // 0x0568   (0x0008)  
	UTexture2D*                                        m_HealthbarSliceTexture;                                    // 0x0570   (0x0008)  
	UTexture2D*                                        m_BorderTexture;                                            // 0x0578   (0x0008)  
	UTexture2D*                                        m_MobileResurrectionPointIconTexture;                       // 0x0580   (0x0008)  
	UTexture2D*                                        m_MobileHealPointIconTexture;                               // 0x0588   (0x0008)  
	UTexture2D*                                        m_ElectronicBaitTexture;                                    // 0x0590   (0x0008)  
	UTexture2D*                                        m_FortificationSafeZoneJammerTexture;                       // 0x0598   (0x0008)  
	UTexture2D*                                        m_ConfederationIconTexture;                                 // 0x05A0   (0x0008)  
	UTexture2D*                                        m_BlackSunsetIconTexture;                                   // 0x05A8   (0x0008)  
	UTexture2D*                                        m_PVPEnabledIconTexture;                                    // 0x05B0   (0x0008)  
	UTexture2D*                                        m_FounderIconTexture;                                       // 0x05B8   (0x0008)  
	UTexture2D*                                        m_DroneIconTexture;                                         // 0x05C0   (0x0008)  
	UTexture2D*                                        m_MortarIconTexture;                                        // 0x05C8   (0x0008)  
	UTexture2D*                                        m_ConfederationHealthbarLogo;                               // 0x05D0   (0x0008)  
	UTexture2D*                                        m_BlackSunsetHealthbarLogo;                                 // 0x05D8   (0x0008)  
	UTexture2D*                                        m_HealthbarOnlyBackground;                                  // 0x05E0   (0x0008)  
	UTexture2D*                                        m_ClanMembersSimplifiedIcon;                                // 0x05E8   (0x0008)  
	UTexture2D*                                        m_ClanCommanderSimplifiedIcon;                              // 0x05F0   (0x0008)  
	TMap<EWTLCharacterClass, FCanvasIcon>              m_CharacterClassIcons;                                      // 0x05F8   (0x0050)  
	TMap<EWTLPlayerType, FCanvasIcon>                  m_CharacterStaffIcons;                                      // 0x0648   (0x0050)  
	TMap<EWTLCharacterEffectType, FCanvasIcon>         m_CharacterEffectIcons;                                     // 0x0698   (0x0050)  
	unsigned char                                      UnknownData01_5[0x58];                                      // 0x06E8   (0x0058)  MISSED
	UCurveFloat*                                       MemoryAlphaColorCurve;                                      // 0x0740   (0x0008)  
	FLinearColor                                       FriendTextColor;                                            // 0x0748   (0x0010)  
	FLinearColor                                       NeutralTextColor;                                           // 0x0758   (0x0010)  
	FLinearColor                                       EnemyTextColor;                                             // 0x0768   (0x0010)  
	FLinearColor                                       AgressorTextColor;                                          // 0x0778   (0x0010)  
	FLinearColor                                       FriendClanTextColor;                                        // 0x0788   (0x0010)  
	FLinearColor                                       NeutralClanTextColor;                                       // 0x0798   (0x0010)  
	FLinearColor                                       EnemyClanTextColor;                                         // 0x07A8   (0x0010)  
	FLinearColor                                       GroupMemberNameColor;                                       // 0x07B8   (0x0010)  
	FLinearColor                                       ClanMemberNameColor;                                        // 0x07C8   (0x0010)  
	UCurveLinearColor*                                 ReputationColorCurve;                                       // 0x07D8   (0x0008)  
	FLinearColor                                       IconTradeForExperienceColor;                                // 0x07E0   (0x0010)  
	FColor                                             MonsterDangerLevelColorNone;                                // 0x07F0   (0x0004)  
	FColor                                             MonsterDangerLevelColorLow;                                 // 0x07F4   (0x0004)  
	FColor                                             MonsterDangerLevelColorBelowNormal;                         // 0x07F8   (0x0004)  
	FColor                                             MonsterDangerLevelColorNormal;                              // 0x07FC   (0x0004)  
	FColor                                             MonsterDangerLevelColorAboveNormal;                         // 0x0800   (0x0004)  
	FColor                                             MonsterDangerLevelColorHigh;                                // 0x0804   (0x0004)  
	FColor                                             MonsterDangerLevelColorCritical;                            // 0x0808   (0x0004)  
	float                                              IdentityConeCheckInterval;                                  // 0x080C   (0x0004)  
	float                                              DistanceDependentIdentityWidgetOffset;                      // 0x0810   (0x0004)  
	float                                              IdentificationWidgetMinimumScale;                           // 0x0814   (0x0004)  
	float                                              IdentificationWidgetMaximumScale;                           // 0x0818   (0x0004)  
	float                                              IdentificationVerticalScreenPositionTreshold;               // 0x081C   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0820   (0x0004)  MISSED
	float                                              IdentityGainPerSec;                                         // 0x0824   (0x0004)  
	float                                              IdentityCooldownPerSec;                                     // 0x0828   (0x0004)  
	float                                              IdentityLimit;                                              // 0x082C   (0x0004)  
	float                                              IdentityLevelToSpot;                                        // 0x0830   (0x0004)  
	float                                              FarScreenRadiusStart;                                       // 0x0834   (0x0004)  
	float                                              FarScreenRadiusEnd;                                         // 0x0838   (0x0004)  
	bool                                               bIsDebugEnabled;                                            // 0x083C   (0x0001)  
	bool                                               bIsIdentityEnabled;                                         // 0x083D   (0x0001)  
	bool                                               bIsPlayersIdentityEnabled;                                  // 0x083E   (0x0001)  
	bool                                               bIsMonstersIdentityEnabled;                                 // 0x083F   (0x0001)  
	bool                                               bIsLevelObjectsIdentityEnabled;                             // 0x0840   (0x0001)  
	bool                                               bIsNPCIdentityEnabled;                                      // 0x0841   (0x0001)  
	bool                                               bIsEnemyNPCIdentityEnabled;                                 // 0x0842   (0x0001)  
	unsigned char                                      UnknownData03_5[0x1];                                       // 0x0843   (0x0001)  MISSED
	float                                              IdentityDistance;                                           // 0x0844   (0x0004)  
	float                                              FOVConeRadiusDivider;                                       // 0x0848   (0x0004)  
	float                                              IdentificationScaleup;                                      // 0x084C   (0x0004)  
	EWTLSimplifiedIdentificationType                   SimplifiedIdentificationType;                               // 0x0850   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0851   (0x0003)  MISSED
	float                                              IdentificationTransparency;                                 // 0x0854   (0x0004)  
	TWeakObjectPtr<UCurveFloat*>                       IdentificationOverheadOffsetByDistanceCurve;                // 0x0858   (0x0028)  
};

/// Class /Script/WTL.WTLCharacterMovementComponent
/// Size: 0x0070 (0x000B00 - 0x000B70)
class UWTLCharacterMovementComponent : public UCharacterMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_2[0x48];                                      // 0x0B00   (0x0048)  MISSED
	float                                              CrouchingSpeed;                                             // 0x0B48   (0x0004)  
	float                                              TiltAngle;                                                  // 0x0B4C   (0x0004)  
	float                                              TiltSpeed;                                                  // 0x0B50   (0x0004)  
	float                                              LadderClimbingSpeed;                                        // 0x0B54   (0x0004)  
	float                                              LadderClimbingFriction;                                     // 0x0B58   (0x0004)  
	float                                              LadderMovementFloorTraceDistance;                           // 0x0B5C   (0x0004)  
	float                                              PronedHalfHeight;                                           // 0x0B60   (0x0004)  
	float                                              SwimmedHalfHeight;                                          // 0x0B64   (0x0004)  
	bool                                               bTransportMovementMode;                                     // 0x0B68:0 (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0B69   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterMovementComponent.Server_SetLadderClimbing
	void Server_SetLadderClimbing(bool Value);                                                                               // [0x17ba560] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLCharacterMovementComponent.NetMulticast_PlayLadderMontage
	void NetMulticast_PlayLadderMontage(AWTLLadder* Ladder, EWTLLadderMontageType LadderMontageType);                        // [0x17ba400] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Class /Script/WTL.WTLCharacterPreview
/// Size: 0x03F0 (0x000220 - 0x000610)
class AWTLCharacterPreview : public AActor
{ 
public:
	USkeletalMeshComponent*                            Base;                                                       // 0x0220   (0x0008)  
	USkeletalMeshComponent*                            TorsoSlot;                                                  // 0x0228   (0x0008)  
	USkeletalMeshComponent*                            Head;                                                       // 0x0230   (0x0008)  
	USkeletalMeshComponent*                            HeadSlot;                                                   // 0x0238   (0x0008)  
	USkeletalMeshComponent*                            Legs;                                                       // 0x0240   (0x0008)  
	USkeletalMeshComponent*                            LegsSlot;                                                   // 0x0248   (0x0008)  
	USkeletalMeshComponent*                            Feet;                                                       // 0x0250   (0x0008)  
	USkeletalMeshComponent*                            FeetSlot;                                                   // 0x0258   (0x0008)  
	USkeletalMeshComponent*                            BackpackSlot;                                               // 0x0260   (0x0008)  
	USkeletalMeshComponent*                            GlassesSlot;                                                // 0x0268   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot1;                                             // 0x0270   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot2;                                             // 0x0278   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot3;                                             // 0x0280   (0x0008)  
	USkeletalMeshComponent*                            EquipmentSlot4;                                             // 0x0288   (0x0008)  
	USkeletalMeshComponent*                            WatchesSlot;                                                // 0x0290   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0;                                        // 0x0298   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0MuzzleMount;                             // 0x02A0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0MuzzleAttachment;                        // 0x02A8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0FlashlightMount;                         // 0x02B0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0FlashlightAttachment;                    // 0x02B8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0ScopeMount;                              // 0x02C0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot0ScopeAttachment;                         // 0x02C8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1;                                        // 0x02D0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1MuzzleMount;                             // 0x02D8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1MuzzleAttachment;                        // 0x02E0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1FlashlightMount;                         // 0x02E8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1FlashlightAttachment;                    // 0x02F0   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1ScopeMount;                              // 0x02F8   (0x0008)  
	UStaticMeshComponent*                              EquippedWeaponSlot1ScopeAttachment;                         // 0x0300   (0x0008)  
	UStaticMeshComponent*                              EquippedStuffSlot1;                                         // 0x0308   (0x0008)  
	UStaticMeshComponent*                              HolsterSlot;                                                // 0x0310   (0x0008)  
	UStaticMeshComponent*                              EquippedPistolPreviewSlot;                                  // 0x0318   (0x0008)  
	UStaticMeshComponent*                              SheathSlot;                                                 // 0x0320   (0x0008)  
	UStaticMeshComponent*                              SheathPreviewSlot;                                          // 0x0328   (0x0008)  
	UStaticMeshComponent*                              ItemInHands;                                                // 0x0330   (0x0008)  
	UStaticMeshComponent*                              ItemInHandsMuzzleMount;                                     // 0x0338   (0x0008)  
	UStaticMeshComponent*                              ItemInHandsMuzzleAttachmeht;                                // 0x0340   (0x0008)  
	UStaticMeshComponent*                              ItemInHandsFlashlightMount;                                 // 0x0348   (0x0008)  
	UStaticMeshComponent*                              ItemInHandsFlashlightAttachment;                            // 0x0350   (0x0008)  
	UStaticMeshComponent*                              ItemInHandsScopeMount;                                      // 0x0358   (0x0008)  
	UStaticMeshComponent*                              ItemInHandsScopeAttachment;                                 // 0x0360   (0x0008)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleTorsoMeshFullArms;                                      // 0x0368   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleTorsoMeshHalfArms;                                      // 0x0390   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleTorsoMeshHandsOnly;                                     // 0x03B8   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleTorsoMeshFullArms;                                    // 0x03E0   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleTorsoMeshHalfArms;                                    // 0x0408   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleTorsoMeshHandsOnly;                                   // 0x0430   (0x0028)  
	AWTLCharacterPreviewRoom*                          m_CharacterPreviewRoom;                                     // 0x0458   (0x0008)  
	unsigned char                                      UnknownData00_6[0x1B0];                                     // 0x0460   (0x01B0)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterPreview.UpdateFromStore
	void UpdateFromStore(AWTLCharacter* Character, FWTLShortCharacterInfo& ShortCharacterInfo, EWTLItemType ArmsItemType, int32_t ArmsItemTypeID, char CustomizationScalar, char CustomizationColor, int32_t MuzzleAttachmentTypeID, int32_t FlashlightAttachmentTypeID, int32_t ScopeAttachmentTypeID); // [0x17ba880] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLCharacterPreview.UpdateFromShortCharacterInfo
	void UpdateFromShortCharacterInfo(FWTLShortCharacterInfo& ShortCharacterInfo);                                           // [0x17bae00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLCharacterPreview.UpdateFromCharacter
	void UpdateFromCharacter(AWTLCharacter* Character);                                                                      // [0x17baf00] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCharacterPreview.SetCharacterPreviewType
	void SetCharacterPreviewType(EWTLCharacterPreviewType PreviewType);                                                      // [0x17bafe0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLCharacterPreviewAnimInstance
/// Size: 0x0090 (0x0002C0 - 0x000350)
class UWTLCharacterPreviewAnimInstance : public UAnimInstance
{ 
public:
	UAnimSequence*                                     SnuggleAnimation;                                           // 0x02B8   (0x0008)  
	UAnimSequence*                                     IdleAnimation;                                              // 0x02C0   (0x0008)  
	FVector                                            ScaleFeetVector;                                            // 0x02C8   (0x000C)  
	FVector                                            InvertScaleFeetVector;                                      // 0x02D4   (0x000C)  
	FVector                                            ScaleHandsVector;                                           // 0x02E0   (0x000C)  
	FVector                                            InvertScaleHandsVector;                                     // 0x02EC   (0x000C)  
	FVector                                            ScaleHeadVector;                                            // 0x02F8   (0x000C)  
	FVector                                            ScaleNeckVector;                                            // 0x0304   (0x000C)  
	FVector                                            InvertScaleRibCageVector;                                   // 0x0310   (0x000C)  
	FVector                                            ScaleRibCageVector;                                         // 0x031C   (0x000C)  
	float                                              FScaleHands;                                                // 0x0328   (0x0004)  
	float                                              FScaleRibCage;                                              // 0x032C   (0x0004)  
	float                                              FScaleFeet;                                                 // 0x0330   (0x0004)  
	float                                              FScaleHead;                                                 // 0x0334   (0x0004)  
	float                                              FScaleNeck;                                                 // 0x0338   (0x0004)  
	bool                                               bIsWeaponInHands;                                           // 0x033C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x033D   (0x0003)  MISSED
	FVector                                            IKHandParameter;                                            // 0x0340   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x034C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterPreviewAnimInstance.UpdateComplexity
	void UpdateComplexity(char BodyType);                                                                                    // [0x17bb1e0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/WTL.WTLCharacterPreviewRoom
/// Size: 0x0048 (0x000220 - 0x000268)
class AWTLCharacterPreviewRoom : public AActor
{ 
public:
	USceneComponent*                                   Root;                                                       // 0x0220   (0x0008)  
	USceneCaptureComponent2D*                          CaptureComponent;                                           // 0x0228   (0x0008)  
	UChildActorComponent*                              CharacterPreview;                                           // 0x0230   (0x0008)  
	unsigned char                                      UnknownData00_5[0x14];                                      // 0x0238   (0x0014)  MISSED
	FVector                                            CharacterFaceCaptureComponentLocation;                      // 0x024C   (0x000C)  
	FVector                                            CharacterFaceWhenItemInHandsCaptureComponentLocation;       // 0x0258   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0264   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterPreviewRoom.GetCharacterPreview
	AWTLCharacterPreview* GetCharacterPreview();                                                                             // [0x17bb480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLCharacterTransportBase
/// Size: 0x0050 (0x0004C0 - 0x000510)
class AWTLCharacterTransportBase : public ACharacter
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x04C0   (0x0038)  MISSED
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x04F8   (0x0010)  
	float                                              SpeedRotation;                                              // 0x0508   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x050C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCharacterTransportBase.K2_Use
	void K2_Use(AWTLCharacter* Character);                                                                                   // [0xf3f2f0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacterTransportBase.K2_SetHighlightState
	void K2_SetHighlightState(bool Value);                                                                                   // [0x17bb7f0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacterTransportBase.K2_GetDisplayText
	FString K2_GetDisplayText(AWTLCharacter* Character);                                                                     // [0x17bb6c0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacterTransportBase.K2_CanBeUsed
	bool K2_CanBeUsed(AWTLCharacter* Character);                                                                             // [0x17bb8d0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCharacterTransportBase.IsUses
	bool IsUses();                                                                                                           // [0x17bb650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterTransportBase.GetMyController
	AWTLPlayerController* GetMyController();                                                                                 // [0x17bb680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCharacterTransportBase.GetMyCharacter
	AWTLCharacter* GetMyCharacter();                                                                                         // [0x17bb6a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLCharacterWatchAnimInstance
/// Size: 0x0010 (0x0002C0 - 0x0002D0)
class UWTLCharacterWatchAnimInstance : public UAnimInstance
{ 
public:
	float                                              HourHandAngle;                                              // 0x02C0   (0x0004)  
	float                                              MinuteHandAngle;                                            // 0x02C4   (0x0004)  
	float                                              SecondHandAngle;                                            // 0x02C8   (0x0004)  
	int32_t                                            Complexion;                                                 // 0x02CC   (0x0004)  
};

/// Class /Script/WTL.WTLChargeablePlaceableStuff
/// Size: 0x0028 (0x000398 - 0x0003C0)
class AWTLChargeablePlaceableStuff : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x1C];                                      // 0x0398   (0x001C)  MISSED
	float                                              ChargeRange;                                                // 0x03B4   (0x0004)  
	float                                              EnergyChargePerSecond;                                      // 0x03B8   (0x0004)  
	float                                              m_Energy;                                                   // 0x03BC   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLChargeablePlaceableStuff.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x17bbd00] Native|Protected     
	// Function /Script/WTL.WTLChargeablePlaceableStuff.BPGetEnergy
	float BPGetEnergy();                                                                                                     // [0x17bbce0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLChargeablePlaceableStuff.BPGetCondition
	float BPGetCondition();                                                                                                  // [0x17bbcb0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLChargeablePlaceableStuff.BPCharged
	void BPCharged();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLRichTextBlock
/// Size: 0x0280 (0x000678 - 0x0008F8)
class UWTLRichTextBlock : public URichTextBlock
{ 
public:
	TArray<UDataTable*>                                AdditionalStyleSets;                                        // 0x0678   (0x0010)  
	FTextBlockStyle                                    DefaultTextBlockStyle;                                      // 0x0688   (0x0270)  
};

/// Class /Script/WTL.WTLChatTextBlock
/// Size: 0x0008 (0x0008F8 - 0x000900)
class UWTLChatTextBlock : public UWTLRichTextBlock
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x08F8   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLCommandCore
/// Size: 0x0068 (0x000220 - 0x000288)
class AWTLCommandCore : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	USphereComponent*                                  ZoneSphere;                                                 // 0x0230   (0x0008)  
	UStaticMeshComponent*                              GeneratorMesh;                                              // 0x0238   (0x0008)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x0240   (0x0018)  MISSED
	TArray<EWTLFaction>                                IntrudersFactionList;                                       // 0x0258   (0x0010)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x0268   (0x0010)  MISSED
	TArray<FWTLIntruderInfo>                           Intruders;                                                  // 0x0278   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLCommandCore.OnIntruderKilled
	void OnIntruderKilled(APawn* Victim);                                                                                    // [0x17941a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCommandCore.OnIntruderDetected
	void OnIntruderDetected(APawn* Intruder, bool bIsLethal);                                                                // [0x17a9070] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCommandCore.K2_OnIntruderKilled
	void K2_OnIntruderKilled(APawn* Victim);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCommandCore.IsIntruder
	bool IsIntruder(AWTLCharacter* Character);                                                                               // [0x17bd040] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLFortificationCommandCore
/// Size: 0x01F8 (0x000288 - 0x000480)
class AWTLFortificationCommandCore : public AWTLCommandCore
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0288   (0x0008)  MISSED
	AWTLFortificationSafeZone*                         FortificationSafeZone;                                      // 0x0290   (0x0008)  
	TArray<AWTLFortificationEnemyNPCSpawner*>          NPCSpawners;                                                // 0x0298   (0x0010)  
	TArray<AWTLSafeZone*>                              OppositeForcesSafeZones;                                    // 0x02A8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x02B8   (0x0028)  MISSED
	UFMODAudioComponent*                               m_AudioComponent;                                           // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData02_5[0x18];                                      // 0x02E8   (0x0018)  MISSED
	int32_t                                            CommandCoreID;                                              // 0x0300   (0x0004)  
	float                                              MaxEnergy;                                                  // 0x0304   (0x0004)  
	float                                              EnergyDrainPerSecond;                                       // 0x0308   (0x0004)  
	float                                              EnergyRecoverPerSecond;                                     // 0x030C   (0x0004)  
	float                                              EnergyPercentForSafeZoneFunctionality;                      // 0x0310   (0x0004)  
	float                                              SignalRange;                                                // 0x0314   (0x0004)  
	float                                              ScoreZoneRange;                                             // 0x0318   (0x0004)  
	char                                               HackingDificulty;                                           // 0x031C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x031D   (0x0003)  MISSED
	float                                              MaxHackingEnergyPercent;                                    // 0x0320   (0x0004)  
	float                                              SaveStateToDBInterval;                                      // 0x0324   (0x0004)  
	float                                              ScoreMultiplier;                                            // 0x0328   (0x0004)  
	float                                              m_Energy;                                                   // 0x032C   (0x0004)  
	float                                              HackingStateNoiseInterval;                                  // 0x0330   (0x0004)  
	float                                              NoiseEmittingRange;                                         // 0x0334   (0x0004)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0338   (0x0008)  MISSED
	TArray<FWTLFortificationReward>                    Rewards;                                                    // 0x0340   (0x0010)  
	FWTLDateTime                                       m_LastHackTime;                                             // 0x0350   (0x0008)  
	FWTLDateTime                                       m_TimeTillNextHack;                                         // 0x0358   (0x0008)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x0360   (0x0008)  MISSED
	FTimespan                                          HackingDelay;                                               // 0x0368   (0x0008)  
	FTimespan                                          CaptureTimeInterval;                                        // 0x0370   (0x0008)  
	FLinearColor                                       OperationStateScreenLightColor;                             // 0x0378   (0x0010)  
	FLinearColor                                       ExploitingStateScreenLightColor;                            // 0x0388   (0x0010)  
	UTexture*                                          OperationStateScreenTexture;                                // 0x0398   (0x0008)  
	UTexture*                                          ExploitingStateScreenTexture;                               // 0x03A0   (0x0008)  
	EWTLFaction                                        m_ControlFaction;                                           // 0x03A8   (0x0001)  
	bool                                               bUseDebugControlFaction;                                    // 0x03A9   (0x0001)  
	EWTLFaction                                        DebugControlFaction;                                        // 0x03AA   (0x0001)  
	unsigned char                                      UnknownData06_5[0x15];                                      // 0x03AB   (0x0015)  MISSED
	bool                                               bIsAnyEngineerConnected;                                    // 0x03C0   (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x03C1   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            CoreHackingWidgetClass;                                     // 0x03C8   (0x0028)  
	unsigned char                                      UnknownData08_6[0x90];                                      // 0x03F0   (0x0090)  MISSED


	/// Functions
	// Function /Script/WTL.WTLFortificationCommandCore.SetVulnerable
	void SetVulnerable();                                                                                                    // [0x17f1dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLFortificationCommandCore.OnRep_TimeTillNextHack
	void OnRep_TimeTillNextHack();                                                                                           // [0x17f2010] Final|Native|Protected 
	// Function /Script/WTL.WTLFortificationCommandCore.OnRep_IsAnyEngineerConnected
	void OnRep_IsAnyEngineerConnected();                                                                                     // [0x17f2050] Final|Native|Protected 
	// Function /Script/WTL.WTLFortificationCommandCore.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x17f21b0] Final|Native|Protected 
	// Function /Script/WTL.WTLFortificationCommandCore.OnRep_ControlFaction
	void OnRep_ControlFaction();                                                                                             // [0x17f2150] Final|Native|Protected 
	// Function /Script/WTL.WTLFortificationCommandCore.OnControlFactionChanged
	void OnControlFactionChanged(EWTLFaction Faction);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFortificationCommandCore.NetMulticast_OnCaptureEnded
	void NetMulticast_OnCaptureEnded();                                                                                      // [0xba4570] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLFortificationCommandCore.IsVulnerable
	bool IsVulnerable();                                                                                                     // [0x17f1ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.IsStateRestored
	bool IsStateRestored();                                                                                                  // [0x17f1cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.IsJammed
	bool IsJammed();                                                                                                         // [0x17f1ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.IsCaptureInProgress
	bool IsCaptureInProgress();                                                                                              // [0x17f1da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetTimeTillNextHack
	FWTLDateTime GetTimeTillNextHack();                                                                                      // [0x17ec6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetSignalRange
	float GetSignalRange();                                                                                                  // [0x17f1f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetNormalizedEnergy
	float GetNormalizedEnergy();                                                                                             // [0x17f1f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetMaxEnergy
	float GetMaxEnergy();                                                                                                    // [0x17f1f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetLastHackTime
	FWTLDateTime GetLastHackTime();                                                                                          // [0x17ec700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetHackEndTime
	FWTLDateTime GetHackEndTime();                                                                                           // [0x17f1d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetEnergyPercent
	float GetEnergyPercent();                                                                                                // [0x17f1f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetEnergy
	float GetEnergy();                                                                                                       // [0x17f1fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.GetControlFaction
	EWTLFaction GetControlFaction();                                                                                         // [0x1186730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationCommandCore.ClientStopInteraction
	void ClientStopInteraction();                                                                                            // [0x17f1d10] Final|Native|Public  
};

/// Class /Script/WTL.WTLCheckpointCommandCore
/// Size: 0x0008 (0x000480 - 0x000488)
class AWTLCheckpointCommandCore : public AWTLFortificationCommandCore
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0480   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLCheckpointControllerComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UWTLCheckpointControllerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x00B0   (0x0028)  MISSED
	TArray<AWTLCheckpointCommandCore*>                 Checkpoints;                                                // 0x00D8   (0x0010)  
	AWTLSafeZone*                                      SafeZone;                                                   // 0x00E8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLCheckpointControllerComponent.OnControlFactionChanged
	void OnControlFactionChanged(EWTLFaction Faction);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCheckpointControllerComponent.OnCheckpointStateRestored
	void OnCheckpointStateRestored();                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCheckpointControllerComponent.OnAllCheckpointsCaptured
	void OnAllCheckpointsCaptured();                                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCheckpointControllerComponent.GetControlFaction
	EWTLFaction GetControlFaction();                                                                                         // [0x17bc9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCheckpointControllerComponent.GetCaptureEndTime
	FDateTime GetCaptureEndTime();                                                                                           // [0x17bc9b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLCircularProgressBar
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLCircularProgressBar : public UUserWidget
{ 
public:
	UImage*                                            imgMaterial;                                                // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0268   (0x0008)  MISSED
	float                                              Percent;                                                    // 0x0270   (0x0004)  
	FLinearColor                                       Color;                                                      // 0x0274   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0284   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCircularProgressBar.SetPercent
	void SetPercent(float Value);                                                                                            // [0x17bcce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCircularProgressBar.SetColor
	void SetColor(FLinearColor NewColor);                                                                                    // [0x17bcc10] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/WTL.WTLDrone
/// Size: 0x0258 (0x000280 - 0x0004D8)
class AWTLDrone : public APawn
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0280   (0x0010)  MISSED
	USkeletalMeshComponent*                            DroneSkeletalMesh;                                          // 0x0290   (0x0008)  
	USphereComponent*                                  OverlapComponent;                                           // 0x0298   (0x0008)  
	UFMODAudioComponent*                               WingsSound;                                                 // 0x02A0   (0x0008)  
	float                                              LifeTimeInWorld;                                            // 0x02A8   (0x0004)  
	float                                              DroneMaxCondition;                                          // 0x02AC   (0x0004)  
	float                                              DroneDamageMultiplier;                                      // 0x02B0   (0x0004)  
	float                                              MaxDistanceFromCharacter;                                   // 0x02B4   (0x0004)  
	float                                              SelfDestructionDamageValue;                                 // 0x02B8   (0x0004)  
	float                                              SelfDestructionMinDamageValue;                              // 0x02BC   (0x0004)  
	float                                              SelfDestructionRadius;                                      // 0x02C0   (0x0004)  
	float                                              DissolvingSpeed;                                            // 0x02C4   (0x0004)  
	TWeakObjectPtr<UClass*>                            ExplosionFX;                                                // 0x02C8   (0x0028)  
	TWeakObjectPtr<UClass*>                            SelfDestructionExplosionFX;                                 // 0x02F0   (0x0028)  
	float                                              DroneHeight;                                                // 0x0318   (0x0004)  
	EWTLDroneMovementMode                              MovementMode;                                               // 0x031C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x031D   (0x0003)  MISSED
	float                                              RotationSpeed;                                              // 0x0320   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0324   (0x0004)  MISSED
	float                                              Radius;                                                     // 0x0328   (0x0004)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x032C   (0x0008)  MISSED
	float                                              Height;                                                     // 0x0334   (0x0004)  
	FVector                                            RotationAxis;                                               // 0x0338   (0x000C)  
	bool                                               Clockwise;                                                  // 0x0344   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0345   (0x0003)  MISSED
	float                                              HeightAboveCharacter;                                       // 0x0348   (0x0004)  
	unsigned char                                      UnknownData05_5[0xC];                                       // 0x034C   (0x000C)  MISSED
	bool                                               RotateAroundCharacter;                                      // 0x0358   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0359   (0x0003)  MISSED
	float                                              RotationSpeedIfFollowCharacterFromAbove;                    // 0x035C   (0x0004)  
	float                                              RotationRadiusIfFollowCharacterFromAbove;                   // 0x0360   (0x0004)  
	float                                              DroneHeightInterpSpeed;                                     // 0x0364   (0x0004)  
	unsigned char                                      UnknownData07_5[0x24];                                      // 0x0368   (0x0024)  MISSED
	float                                              MaxHeight;                                                  // 0x038C   (0x0004)  
	TMap<EWTLWeaponType, float>                        DamageMultipliers;                                          // 0x0390   (0x0050)  
	float                                              ReputationDelta;                                            // 0x03E0   (0x0004)  
	bool                                               AIMakeNoise;                                                // 0x03E4   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x03E5   (0x0003)  MISSED
	float                                              AINoiseDistance;                                            // 0x03E8   (0x0004)  
	FName                                              AINoiseTag;                                                 // 0x03EC   (0x0008)  
	unsigned char                                      UnknownData09_5[0x14];                                      // 0x03F4   (0x0014)  MISSED
	float                                              DroneCondition;                                             // 0x0408   (0x0004)  
	unsigned char                                      UnknownData10_5[0x1C];                                      // 0x040C   (0x001C)  MISSED
	uint64_t                                           DroneItemID;                                                // 0x0428   (0x0008)  
	uint16_t                                           DroneItemTypeID;                                            // 0x0430   (0x0002)  
	EWTLFaction                                        Faction;                                                    // 0x0432   (0x0001)  
	unsigned char                                      UnknownData11_5[0x5];                                       // 0x0433   (0x0005)  MISSED
	AWTLCharacter*                                     m_Character;                                                // 0x0438   (0x0008)  
	bool                                               m_bDestroyDrone;                                            // 0x0440   (0x0001)  
	bool                                               m_bIsFalling;                                               // 0x0441   (0x0001)  
	bool                                               m_bSelfDestruction;                                         // 0x0442   (0x0001)  
	unsigned char                                      UnknownData12_5[0x1];                                       // 0x0443   (0x0001)  MISSED
	int32_t                                            WeaponItemID;                                               // 0x0444   (0x0004)  
	int32_t                                            AmmoItemID;                                                 // 0x0448   (0x0004)  
	EWTLFireMode                                       FireMode;                                                   // 0x044C   (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x044D   (0x0003)  MISSED
	float                                              TimeBetweenShots;                                           // 0x0450   (0x0004)  
	unsigned char                                      UnknownData14_6[0x84];                                      // 0x0454   (0x0084)  MISSED


	/// Functions
	// Function /Script/WTL.WTLDrone.OnRep_IsFalling
	void OnRep_IsFalling();                                                                                                  // [0x17dd430] Final|Native|Protected 
	// Function /Script/WTL.WTLDrone.OnRep_DroneCondition
	void OnRep_DroneCondition();                                                                                             // [0x17dd450] Native|Protected     
	// Function /Script/WTL.WTLDrone.OnRep_DestroyDrone
	void OnRep_DestroyDrone();                                                                                               // [0x17dd240] Final|Native|Protected 
	// Function /Script/WTL.WTLDrone.OnRep_Character
	void OnRep_Character();                                                                                                  // [0x17dd260] Final|Native|Protected 
	// Function /Script/WTL.WTLDrone.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x17dc8e0] Native|Public|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLDrone.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dcc10] Native|Protected     
	// Function /Script/WTL.WTLDrone.OnCharacterDied
	void OnCharacterDied(AWTLCharacter* Character);                                                                          // [0x17941a0] Final|Native|Protected 
	// Function /Script/WTL.WTLDrone.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17dce90] Native|Protected|HasOutParms 
	// Function /Script/WTL.WTLDrone.K2_UpdateDroneCondition
	void K2_UpdateDroneCondition(float ConditionValue);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDrone.K2_InitilizeDrone
	void K2_InitilizeDrone(AWTLCharacter* Character);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDrone.IsFriendly
	bool IsFriendly(EWTLAITeam AIFaction);                                                                                   // [0x17dc530] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLDrone.GetSideVelocity
	float GetSideVelocity();                                                                                                 // [0x17dc8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.GetMovementSpeed
	float GetMovementSpeed();                                                                                                // [0x17dc860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.GetForwardVelocity
	float GetForwardVelocity();                                                                                              // [0x17dc8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.GetCharacter
	AWTLCharacter* GetCharacter();                                                                                           // [0x17dc880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0x17dc710] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17dc630] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17dc820] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17dc790] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17dc7e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDrone.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17dc750] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLCombatDrone
/// Size: 0x0000 (0x0004D8 - 0x0004D8)
class AWTLCombatDrone : public AWTLDrone
{ 
public:
};

/// Class /Script/WTL.WTLCommandCoreNode
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLCommandCoreNode : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLBTTask_TurretFindTarget
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_TurretFindTarget : public UBTTaskNode
{ 
public:
	float                                              ScanningInterval;                                           // 0x0070   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLBTTask_TurretExtermination
/// Size: 0x0008 (0x000070 - 0x000078)
class UWTLBTTask_TurretExtermination : public UBTTaskNode
{ 
public:
	float                                              TargetHitTimeout;                                           // 0x0070   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLCommandCoreTurret
/// Size: 0x00E0 (0x000280 - 0x000360)
class AWTLCommandCoreTurret : public APawn
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0280   (0x0018)  MISSED
	UStaticMeshComponent*                              Stand;                                                      // 0x0298   (0x0008)  
	USkeletalMeshComponent*                            Body;                                                       // 0x02A0   (0x0008)  
	UParticleSystemComponent*                          Muzzle;                                                     // 0x02A8   (0x0008)  
	UParticleSystemComponent*                          ProjectilesEmitter;                                         // 0x02B0   (0x0008)  
	USphereComponent*                                  VisionZone;                                                 // 0x02B8   (0x0008)  
	UFMODAudioComponent*                               AudioComponent;                                             // 0x02C0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        TurretSoundEvent;                                           // 0x02C8   (0x0028)  
	unsigned char                                      UnknownData01_5[0x34];                                      // 0x02F0   (0x0034)  MISSED
	float                                              FireRate;                                                   // 0x0324   (0x0004)  
	float                                              MinDamage;                                                  // 0x0328   (0x0004)  
	float                                              MaxDamage;                                                  // 0x032C   (0x0004)  
	float                                              Prewarm;                                                    // 0x0330   (0x0004)  
	float                                              Cooldown;                                                   // 0x0334   (0x0004)  
	APawn*                                             TargetToFollow;                                             // 0x0338   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0340   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommandCoreTurret.OnRep_TargetToFollow
	void OnRep_TargetToFollow(APawn* Previous);                                                                              // [0x17bd890] Final|Native|Private 
	// Function /Script/WTL.WTLCommandCoreTurret.K2_OnPawnKilled
	void K2_OnPawnKilled(APawn* TargetPawn);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLCommandSystem
/// Size: 0x0028 (0x000028 - 0x000050)
class UWTLCommandSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Class /Script/WTL.WTLWidgetBase
/// Size: 0x0000 (0x000260 - 0x000260)
class UWTLWidgetBase : public UUserWidget
{ 
public:
};

/// Class /Script/WTL.WTLCommonActionWaiting
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLCommonActionWaiting : public UWTLWidgetBase
{ 
public:
	UTextBlock*                                        tbWaitingStatus;                                            // 0x0260   (0x0008)  
	FText                                              WaitingStatusText;                                          // 0x0268   (0x0018)  
};

/// Class /Script/WTL.WTLCommonAlphaSectionProgressBar
/// Size: 0x0068 (0x000260 - 0x0002C8)
class UWTLCommonAlphaSectionProgressBar : public UUserWidget
{ 
public:
	UPanelWidget*                                      pwItemsBox;                                                 // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0268   (0x0018)  MISSED
	char                                               ItemsCount;                                                 // 0x0280   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0281   (0x0003)  MISSED
	FLinearColor                                       FillColor;                                                  // 0x0284   (0x0010)  
	bool                                               bIsUseInterpolation;                                        // 0x0294   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0295   (0x0003)  MISSED
	float                                              InterpolationSpeed;                                         // 0x0298   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x029C   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            ItemWidgetClass;                                            // 0x02A0   (0x0028)  
};

/// Class /Script/WTL.WTLCommonAlphaSectionProgressBarItem
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonAlphaSectionProgressBarItem : public UUserWidget
{ 
public:
	UImage*                                            imgItem;                                                    // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLCommonBase
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLCommonBase : public UUserWidget
{ 
public:
	bool                                               IsSetTooltipTextByCustomTooltipWidget;                      // 0x0260   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0261   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            ToolTipTextWidgetClass;                                     // 0x0268   (0x0028)  
};

/// Class /Script/WTL.WTLCommonButton
/// Size: 0x00B0 (0x000290 - 0x000340)
class UWTLCommonButton : public UWTLCommonBase
{ 
public:
	UFMODEvent*                                        PressedSoundEvent;                                          // 0x0290   (0x0008)  
	UFMODEvent*                                        HoveredSoundEvent;                                          // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x02A0   (0x0018)  MISSED
	UButton*                                           btnButton;                                                  // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData01_5[0x78];                                      // 0x02C0   (0x0078)  MISSED
	EWTLCommonButtonType                               CommonButtonType;                                           // 0x0338   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0339   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonButton.OnButtonUnhovered
	void OnButtonUnhovered();                                                                                                // [0x17c4d60] Native|Protected     
	// Function /Script/WTL.WTLCommonButton.OnButtonReleased
	void OnButtonReleased();                                                                                                 // [0x17c4da0] Native|Protected     
	// Function /Script/WTL.WTLCommonButton.OnButtonPressed
	void OnButtonPressed();                                                                                                  // [0x17c4dc0] Native|Protected     
	// Function /Script/WTL.WTLCommonButton.OnButtonHovered
	void OnButtonHovered();                                                                                                  // [0x17c4d80] Native|Protected     
	// Function /Script/WTL.WTLCommonButton.OnButtonClicked
	void OnButtonClicked();                                                                                                  // [0x17c4de0] Native|Protected     
};

/// Class /Script/WTL.WTLCommonWindowBase
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLCommonWindowBase : public UWTLWidgetBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0260   (0x0008)  MISSED
	UWTLCommonText*                                    ucTitle;                                                    // 0x0268   (0x0008)  
	UWTLCommonButton*                                  ucBtnClose;                                                 // 0x0270   (0x0008)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0278   (0x0001)  MISSED
	bool                                               bIsAlwaysShowBackgroundBlur;                                // 0x0279   (0x0001)  
	bool                                               bIsUseShowAnimation;                                        // 0x027A   (0x0001)  
	unsigned char                                      UnknownData02_5[0x5];                                       // 0x027B   (0x0005)  MISSED
	UWidgetAnimation*                                  ShowAnimation;                                              // 0x0280   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLCommonWindowBase.OnCloseBtnClicked
	void OnCloseBtnClicked();                                                                                                // [0x17c4d60] Native|Protected     
	// Function /Script/WTL.WTLCommonWindowBase.Close
	void Close();                                                                                                            // [0x17d38f0] Native|Protected     
};

/// Class /Script/WTL.WTLCommonCharacterPreviewWindow
/// Size: 0x0010 (0x000288 - 0x000298)
class UWTLCommonCharacterPreviewWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLCommonButton*                                  ucBtnBack;                                                  // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0290   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLCommonCharacterRotator
/// Size: 0x0068 (0x000260 - 0x0002C8)
class UWTLCommonCharacterRotator : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0260   (0x0060)  MISSED
	bool                                               bIsMainMenuCharacterRotation;                               // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02C1   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLCommonCheckBox
/// Size: 0x0060 (0x000290 - 0x0002F0)
class UWTLCommonCheckBox : public UWTLCommonBase
{ 
public:
	UCheckBox*                                         cbCheckBox;                                                 // 0x0290   (0x0008)  
	UFMODEvent*                                        CheckedSoundEvent;                                          // 0x0298   (0x0008)  
	UFMODEvent*                                        UncheckedSoundEvent;                                        // 0x02A0   (0x0008)  
	UFMODEvent*                                        HoveredSoundEvent;                                          // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x02B0   (0x0038)  MISSED
	EWTLCheckBoxType                                   CheckBoxType;                                               // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02E9   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonCheckBox.OnUnhovered
	void OnUnhovered();                                                                                                      // [0x17c4da0] Native|Protected     
	// Function /Script/WTL.WTLCommonCheckBox.OnHovered
	void OnHovered();                                                                                                        // [0x17c4dc0] Native|Protected     
	// Function /Script/WTL.WTLCommonCheckBox.OnCheckBoxStateChanged
	void OnCheckBoxStateChanged(bool bIsChecked);                                                                            // [0x17c5280] Native|Protected     
};

/// Class /Script/WTL.WTLCommonClickedItem
/// Size: 0x0020 (0x000290 - 0x0002B0)
class UWTLCommonClickedItem : public UWTLCommonBase
{ 
public:
	UBorder*                                           bBackground;                                                // 0x0290   (0x0008)  
	UFMODEvent*                                        MouseButtonDownSoundEvent;                                  // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02A0   (0x0008)  MISSED
	EWTLCommonClickedItemType                          CommonClickedItemType;                                      // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02A9   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonClickedItem.OnBackgroundBorderMouseButtonDown
	void OnBackgroundBorderMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                 // [0x17c5510] Native|Protected|HasOutParms 
};

/// Class /Script/WTL.WTLCommonColorButton
/// Size: 0x0058 (0x000290 - 0x0002E8)
class UWTLCommonColorButton : public UWTLCommonBase
{ 
public:
	UBorder*                                           bColor;                                                     // 0x0290   (0x0008)  
	UImage*                                            imgColor;                                                   // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02A0   (0x0020)  MISSED
	UFMODEvent*                                        PressedSoundEvent;                                          // 0x02C0   (0x0008)  
	UFMODEvent*                                        HoveredSoundEvent;                                          // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x02D0   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLCommonColorPicker
/// Size: 0x0070 (0x000260 - 0x0002D0)
class UWTLCommonColorPicker : public UUserWidget
{ 
public:
	UBorder*                                           bBackground;                                                // 0x0260   (0x0008)  
	UWTLUtilityColorPicker*                            ucColorPicker;                                              // 0x0268   (0x0008)  
	UBorder*                                           bButtons;                                                   // 0x0270   (0x0008)  
	UWTLCommonButton*                                  ucBtnOK;                                                    // 0x0278   (0x0008)  
	UWTLCommonButton*                                  ucBtnCancel;                                                // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_6[0x48];                                      // 0x0288   (0x0048)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonColorPicker.OnOKBtnClicked
	void OnOKBtnClicked();                                                                                                   // [0x17c5af0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonColorPicker.OnColorPickedColorChanged
	void OnColorPickedColorChanged(FLinearColor& ChangedColor);                                                              // [0x17c5b20] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLCommonColorPicker.OnCancelBtnClicked
	void OnCancelBtnClicked();                                                                                               // [0x17c5ac0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonColorPresetItem
/// Size: 0x0040 (0x000340 - 0x000380)
class UWTLCommonColorPresetItem : public UWTLCommonButton
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0340   (0x0040)  MISSED
};

/// Class /Script/WTL.WTLCommonColorPresets
/// Size: 0x00B0 (0x000260 - 0x000310)
class UWTLCommonColorPresets : public UUserWidget
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0260   (0x0008)  
	UWrapBox*                                          wbPresets;                                                  // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0270   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            ColorPresetItemWidgetClass;                                 // 0x0298   (0x0028)  
	unsigned char                                      UnknownData01_6[0x50];                                      // 0x02C0   (0x0050)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonColorPresets.OnColorPresetItemClicked
	void OnColorPresetItemClicked(int32_t Number, FLinearColor PresetColor, FLinearColor PreviewColor);                      // [0x17c5ea0] Final|Native|Private|HasDefaults 
};

/// Class /Script/WTL.WTLCommonComboBoxString
/// Size: 0x00A8 (0x000290 - 0x000338)
class UWTLCommonComboBoxString : public UWTLCommonBase
{ 
public:
	UComboBoxString*                                   cbsComboBoxString;                                          // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0298   (0x0008)  MISSED
	UFMODEvent*                                        PressedSoundEvent;                                          // 0x02A0   (0x0008)  
	UFMODEvent*                                        SelectionChangeSoundEvent;                                  // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x02B0   (0x0028)  MISSED
	EWTLComboBoxStringType                             ComboBoxStringType;                                         // 0x02D8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x02D9   (0x0007)  MISSED
	FSlateFontInfo                                     ComboBoxStringFont;                                         // 0x02E0   (0x0058)  


	/// Functions
	// Function /Script/WTL.WTLCommonComboBoxString.OnSelectionChangedEvent
	void OnSelectionChangedEvent(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);                              // [0x17c6380] Final|Native|Private 
	// Function /Script/WTL.WTLCommonComboBoxString.OnOpeningEvent
	void OnOpeningEvent();                                                                                                   // [0x17c6360] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonMessageDialog
/// Size: 0x00B0 (0x000260 - 0x000310)
class UWTLCommonMessageDialog : public UUserWidget
{ 
public:
	UWTLRichTextBlock*                                 rtbMain;                                                    // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0268   (0x0020)  MISSED
	UBorder*                                           bMessageBorder;                                             // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbButtonsBox;                                               // 0x0290   (0x0008)  
	TWeakObjectPtr<UClass*>                            ButtonWidgetClass;                                          // 0x0298   (0x0028)  
	UWidgetAnimation*                                  ShowAnimation;                                              // 0x02C0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        ShowSoundEvent;                                             // 0x02C8   (0x0028)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x02F0   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonMessageDialog.OnDialogBtnClicked
	void OnDialogBtnClicked(bool IsBoundAnyLogic);                                                                           // [0x17c9680] Final|Native|Private 
	// Function /Script/WTL.WTLCommonMessageDialog.Hide
	void Hide();                                                                                                             // [0x17c9660] Final|Native|Public  
};

/// Class /Script/WTL.WTLCommonConfirmationDialog
/// Size: 0x0088 (0x000310 - 0x000398)
class UWTLCommonConfirmationDialog : public UWTLCommonMessageDialog
{ 
public:
	UImage*                                            imgConfirmationType;                                        // 0x0310   (0x0008)  
	UWidget*                                           m_YesButtonWidget;                                          // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0320   (0x0008)  MISSED
	TMap<EWTLConfirmationType, TWeakObjectPtr>         ConfirmationTypesTextures;                                  // 0x0328   (0x0050)  
	FLinearColor                                       OrangeBrushColor;                                           // 0x0378   (0x0010)  
	FLinearColor                                       RedBrushColor;                                              // 0x0388   (0x0010)  
};

/// Class /Script/WTL.WTLCommonCoreHackingWindow
/// Size: 0x0058 (0x000288 - 0x0002E0)
class UWTLCommonCoreHackingWindow : public UWTLCommonWindowBase
{ 
public:
	AWTLCoreHackingPreviewRoom*                        m_Preview;                                                  // 0x0288   (0x0008)  
	UImage*                                            imgPreview;                                                 // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0298   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            CoreHackingPreviewRoomClass;                                // 0x02A0   (0x0028)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x02C8   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonCoreHackingWindow.OnCoreCaptured
	void OnCoreCaptured();                                                                                                   // [0xe77850] Final|Native|Public  
	// Function /Script/WTL.WTLCommonCoreHackingWindow.OnCharacterDied
	void OnCharacterDied();                                                                                                  // [0x17c67d0] Final|Native|Protected 
	// Function /Script/WTL.WTLCommonCoreHackingWindow.OnCaptureEnded
	void OnCaptureEnded();                                                                                                   // [0x17c67d0] Final|Native|Protected 
};

/// Class /Script/WTL.WTLCommonCountdownSlider
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLCommonCountdownSlider : public UUserWidget
{ 
public:
	UImage*                                            imgCountdownSlider;                                         // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x0268   (0x0030)  MISSED
	EWTLCountdownSliderWidgetFillingType               FillingType;                                                // 0x0298   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0299   (0x0003)  MISSED
	float                                              CircleThickness;                                            // 0x029C   (0x0004)  
};

/// Class /Script/WTL.WTLCommonCountdownWindow
/// Size: 0x00B0 (0x000260 - 0x000310)
class UWTLCommonCountdownWindow : public UWTLWidgetBase
{ 
public:
	UBackgroundBlur*                                   bBackgroundBlur;                                            // 0x0260   (0x0008)  
	UWTLRichTextBlock*                                 rtbCountDownTitle;                                          // 0x0268   (0x0008)  
	UWTLCommonCountdownSlider*                         ucCountdownSlider;                                          // 0x0270   (0x0008)  
	UTextBlock*                                        tbCountDown;                                                // 0x0278   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x0288   (0x0038)  MISSED
	FText                                              CountdownTitleText;                                         // 0x02C0   (0x0018)  
	int32_t                                            Timeout;                                                    // 0x02D8   (0x0004)  
	bool                                               bIsBlockCancelButton;                                       // 0x02DC   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02DD   (0x0003)  MISSED
	FWTLUFunctionInfo                                  CancelActionFunctionInfo;                                   // 0x02E0   (0x0018)  
	FWTLUFunctionInfo                                  CountdownActionFunctionInfo;                                // 0x02F8   (0x0018)  


	/// Functions
	// Function /Script/WTL.WTLCommonCountdownWindow.UpdateCountdown
	void UpdateCountdown();                                                                                                  // [0x17c6a20] Final|Native|Private 
	// Function /Script/WTL.WTLCommonCountdownWindow.UpdateBlockCancelButton
	void UpdateBlockCancelButton();                                                                                          // [0x17c6a00] Final|Native|Private 
	// Function /Script/WTL.WTLCommonCountdownWindow.OnCancelBtnClick
	void OnCancelBtnClick();                                                                                                 // [0x17c6a40] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonCreditsAmount
/// Size: 0x0058 (0x000290 - 0x0002E8)
class UWTLCommonCreditsAmount : public UWTLCommonBase
{ 
public:
	UTextBlock*                                        tbCreditsAmount;                                            // 0x0290   (0x0008)  
	UTextBlock*                                        tbCreditsAmountDelta;                                       // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02A0   (0x0010)  MISSED
	UWidgetAnimation*                                  CreditsTopUpAnimation;                                      // 0x02B0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        BalanceIncreasedSoundEvent;                                 // 0x02B8   (0x0028)  
	bool                                               bIsSilentMode;                                              // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02E1   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonCreditsAmount.OnAccountBalanceIncreased
	void OnAccountBalanceIncreased(int32_t Delta, int32_t CurrentBalance);                                                   // [0x17c6c90] Final|Native|Private 
	// Function /Script/WTL.WTLCommonCreditsAmount.OnAccountBalanceChanged
	void OnAccountBalanceChanged(int32_t Balance);                                                                           // [0x17c6df0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonCreditsAmountWithTopUp
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonCreditsAmountWithTopUp : public UUserWidget
{ 
public:
	UWTLCommonCreditsAmount*                           ucCreditsAmount;                                            // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLItemManipulationWidget
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLItemManipulationWidget : public UUserWidget
{ 
public:
	UImage*                                            imgPreview;                                                 // 0x0260   (0x0008)  
	AActor*                                            m_ManipulatedItem;                                          // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0270   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLCommonDeminingWindow
/// Size: 0x0030 (0x000280 - 0x0002B0)
class UWTLCommonDeminingWindow : public UWTLItemManipulationWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0280   (0x0010)  MISSED
	URichTextBlock*                                    rtbHintText;                                                // 0x0290   (0x0008)  
	UImage*                                            imgScissors;                                                // 0x0298   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x02A0   (0x0010)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonDeminingWindow.OnShowOrHideScissors
	void OnShowOrHideScissors(bool Value);                                                                                   // [0x17c71a0] Final|Native|Protected 
	// Function /Script/WTL.WTLCommonDeminingWindow.OnDemined
	void OnDemined();                                                                                                        // [0x17c7280] Final|Native|Protected 
	// Function /Script/WTL.WTLCommonDeminingWindow.OnCharacterDied
	void OnCharacterDied();                                                                                                  // [0x17c72a0] Final|Native|Protected 
};

/// Class /Script/WTL.WTLCommonFormattedTextBlock
/// Size: 0x0080 (0x000A38 - 0x000AB8)
class UWTLCommonFormattedTextBlock : public UEditableTextBox
{ 
public:
	int32_t                                            BlocksCount;                                                // 0x0A38   (0x0004)  
	int32_t                                            CharsInBlockCount;                                          // 0x0A3C   (0x0004)  
	FString                                            EmptyChar;                                                  // 0x0A40   (0x0010)  
	FString                                            Iterator;                                                   // 0x0A50   (0x0010)  
	unsigned char                                      UnknownData00_6[0x58];                                      // 0x0A60   (0x0058)  MISSED
};

/// Class /Script/WTL.WTLCommonTextButton
/// Size: 0x00B8 (0x000340 - 0x0003F8)
class UWTLCommonTextButton : public UWTLCommonButton
{ 
public:
	UTextBlock*                                        tbButton;                                                   // 0x0340   (0x0008)  
	FText                                              Text;                                                       // 0x0348   (0x0018)  
	EWTLButtonText                                     ButtonText;                                                 // 0x0360   (0x0001)  
	bool                                               bUseTextFont;                                               // 0x0361   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0362   (0x0006)  MISSED
	FSlateFontInfo                                     TextFont;                                                   // 0x0368   (0x0058)  
	bool                                               bUseTextFontSize;                                           // 0x03C0   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x03C1   (0x0003)  MISSED
	int32_t                                            TextFontSize;                                               // 0x03C4   (0x0004)  
	bool                                               bCapitalizeText;                                            // 0x03C8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x03C9   (0x0007)  MISSED
	FSlateColor                                        TextColor;                                                  // 0x03D0   (0x0028)  
};

/// Class /Script/WTL.WTLCommonHotkeyButton
/// Size: 0x0028 (0x0003F8 - 0x000420)
class UWTLCommonHotkeyButton : public UWTLCommonTextButton
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x03F8   (0x0010)  MISSED
	FKey                                               Key;                                                        // 0x0408   (0x0018)  
};

/// Class /Script/WTL.WTLCommonHoveredItem
/// Size: 0x0150 (0x0002B0 - 0x000400)
class UWTLCommonHoveredItem : public UWTLCommonClickedItem
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x02B0   (0x0008)  MISSED
	UFMODEvent*                                        HoveredSoundEvent;                                          // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData01_5[0x9];                                       // 0x02C0   (0x0009)  MISSED
	bool                                               bUseBrushes;                                                // 0x02C9   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x02CA   (0x0006)  MISSED
	FSlateBrush                                        DefaultBorderBrush;                                         // 0x02D0   (0x0088)  
	FSlateBrush                                        HoveredBorderBrush;                                         // 0x0358   (0x0088)  
	FLinearColor                                       DefaultBorderBrushColor;                                    // 0x03E0   (0x0010)  
	FLinearColor                                       HoveredBorderBrushColor;                                    // 0x03F0   (0x0010)  
};

/// Class /Script/WTL.WTLCommonImageButton
/// Size: 0x0008 (0x000340 - 0x000348)
class UWTLCommonImageButton : public UWTLCommonButton
{ 
public:
	UImage*                                            imgButton;                                                  // 0x0340   (0x0008)  
};

/// Class /Script/WTL.WTLCommonItemInformation
/// Size: 0x0520 (0x000260 - 0x000780)
class UWTLCommonItemInformation : public UUserWidget
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x0260   (0x0008)  
	UTextBlock*                                        tbCustomName;                                               // 0x0268   (0x0008)  
	UTextBlock*                                        tbItemType;                                                 // 0x0270   (0x0008)  
	UTextBlock*                                        tbItemSubType;                                              // 0x0278   (0x0008)  
	UTextBlock*                                        tbSuitableForClass;                                         // 0x0280   (0x0008)  
	UTextBlock*                                        tbNotSuitableForClass;                                      // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbCount;                                                    // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbItemTypeID;                                               // 0x0298   (0x0008)  
	UTextBlock*                                        tbItemTypeID;                                               // 0x02A0   (0x0008)  
	UTextBlock*                                        tbCount;                                                    // 0x02A8   (0x0008)  
	UVerticalBox*                                      vbRequirements;                                             // 0x02B0   (0x0008)  
	UVerticalBox*                                      vbParameters;                                               // 0x02B8   (0x0008)  
	UHorizontalBox*                                    hbCharacterFaction;                                         // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbCharacterClass;                                           // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbCharacterLevel;                                           // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbCharacterStrength;                                        // 0x02D8   (0x0008)  
	UHorizontalBox*                                    hbCharacterDexterity;                                       // 0x02E0   (0x0008)  
	UHorizontalBox*                                    hbCharacterStamina;                                         // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbCharacterAccuracy;                                        // 0x02F0   (0x0008)  
	UHorizontalBox*                                    hbCharacterIntelligence;                                    // 0x02F8   (0x0008)  
	UHorizontalBox*                                    hbCharacterFortune;                                         // 0x0300   (0x0008)  
	UHorizontalBox*                                    hbCaliber;                                                  // 0x0308   (0x0008)  
	UHorizontalBox*                                    hbDamage;                                                   // 0x0310   (0x0008)  
	UHorizontalBox*                                    hbArmorPiercing;                                            // 0x0318   (0x0008)  
	UHorizontalBox*                                    hbCriticalHitChanceMultiplier;                              // 0x0320   (0x0008)  
	UHorizontalBox*                                    hbMagazine;                                                 // 0x0328   (0x0008)  
	UHorizontalBox*                                    hbAccuracy;                                                 // 0x0330   (0x0008)  
	UHorizontalBox*                                    hbEffectiveRange;                                           // 0x0338   (0x0008)  
	UHorizontalBox*                                    hbArmorClass;                                               // 0x0340   (0x0008)  
	UHorizontalBox*                                    hbArmor;                                                    // 0x0348   (0x0008)  
	UHorizontalBox*                                    hbFrontArmor;                                               // 0x0350   (0x0008)  
	UHorizontalBox*                                    hbBackArmor;                                                // 0x0358   (0x0008)  
	UHorizontalBox*                                    hbCoverArms;                                                // 0x0360   (0x0008)  
	UHorizontalBox*                                    hbArmoredPlatesSlotsCount;                                  // 0x0368   (0x0008)  
	UHorizontalBox*                                    hbWearResistance;                                           // 0x0370   (0x0008)  
	UPanelWidget*                                      pwMedicineEffects;                                          // 0x0378   (0x0008)  
	UPanelWidget*                                      pwFoodEffects;                                              // 0x0380   (0x0008)  
	UPanelWidget*                                      pwCharacterEffectsInfluence;                                // 0x0388   (0x0008)  
	UVerticalBox*                                      vbEffectsOfModification;                                    // 0x0390   (0x0008)  
	UHorizontalBox*                                    hbWeight;                                                   // 0x0398   (0x0008)  
	UHorizontalBox*                                    hbTotalWeight;                                              // 0x03A0   (0x0008)  
	UHorizontalBox*                                    hbBasePrice;                                                // 0x03A8   (0x0008)  
	UHorizontalBox*                                    hbTotalBasePrice;                                           // 0x03B0   (0x0008)  
	UHorizontalBox*                                    hbCondition;                                                // 0x03B8   (0x0008)  
	UHorizontalBox*                                    hbDropChance;                                               // 0x03C0   (0x0008)  
	UHorizontalBox*                                    hbDescription;                                              // 0x03C8   (0x0008)  
	UTextBlock*                                        tbCharacterFactionCaption;                                  // 0x03D0   (0x0008)  
	UTextBlock*                                        tbCharacterClassCaption;                                    // 0x03D8   (0x0008)  
	UTextBlock*                                        tbCharacterLevelCaption;                                    // 0x03E0   (0x0008)  
	UTextBlock*                                        tbCharacterStrengthCaption;                                 // 0x03E8   (0x0008)  
	UTextBlock*                                        tbCharacterDexterityCaption;                                // 0x03F0   (0x0008)  
	UTextBlock*                                        tbCharacterStaminaCaption;                                  // 0x03F8   (0x0008)  
	UTextBlock*                                        tbCharacterAccuracyCaption;                                 // 0x0400   (0x0008)  
	UTextBlock*                                        tbCharacterIntelligenceCaption;                             // 0x0408   (0x0008)  
	UTextBlock*                                        tbCharacterFortuneCaption;                                  // 0x0410   (0x0008)  
	UTextBlock*                                        tbPDAModuleAlreadyInstalled;                                // 0x0418   (0x0008)  
	URichTextBlock*                                    rtbAttach;                                                  // 0x0420   (0x0008)  
	UHorizontalBox*                                    hbSilencerDamageMult;                                       // 0x0428   (0x0008)  
	UTextBlock*                                        tbSilencerDamageMult;                                       // 0x0430   (0x0008)  
	UWTLCommonToggleSwitcher*                          SilencerDamageArrow;                                        // 0x0438   (0x0008)  
	UHorizontalBox*                                    hbSilencerSpreadMult;                                       // 0x0440   (0x0008)  
	UTextBlock*                                        tbSilencerSpreadMult;                                       // 0x0448   (0x0008)  
	UWTLCommonToggleSwitcher*                          SilencerSpreadArrow;                                        // 0x0450   (0x0008)  
	URichTextBlock*                                    rtbSprayCanModification;                                    // 0x0458   (0x0008)  
	URichTextBlock*                                    rtbSprayCanModificationList;                                // 0x0460   (0x0008)  
	URichTextBlock*                                    rtbArmoredPlates;                                           // 0x0468   (0x0008)  
	UTextBlock*                                        tbRepairHint;                                               // 0x0470   (0x0008)  
	UTextBlock*                                        tbCannotUseItemCaption;                                     // 0x0478   (0x0008)  
	UTextBlock*                                        tbCharacterFaction;                                         // 0x0480   (0x0008)  
	UTextBlock*                                        tbCharacterClass;                                           // 0x0488   (0x0008)  
	UTextBlock*                                        tbCharacterLevel;                                           // 0x0490   (0x0008)  
	UTextBlock*                                        tbCharacterStrength;                                        // 0x0498   (0x0008)  
	UTextBlock*                                        tbCharacterDexterity;                                       // 0x04A0   (0x0008)  
	UTextBlock*                                        tbCharacterStamina;                                         // 0x04A8   (0x0008)  
	UTextBlock*                                        tbCharacterAccuracy;                                        // 0x04B0   (0x0008)  
	UTextBlock*                                        tbCharacterIntelligence;                                    // 0x04B8   (0x0008)  
	UTextBlock*                                        tbCharacterFortune;                                         // 0x04C0   (0x0008)  
	UTextBlock*                                        tbCaliber;                                                  // 0x04C8   (0x0008)  
	UTextBlock*                                        tbPvPDamage;                                                // 0x04D0   (0x0008)  
	UTextBlock*                                        tbPvEDamage;                                                // 0x04D8   (0x0008)  
	UTextBlock*                                        tbPvPArmorPiercing;                                         // 0x04E0   (0x0008)  
	UTextBlock*                                        tbPvEArmorPiercing;                                         // 0x04E8   (0x0008)  
	UTextBlock*                                        tbCriticalHitChanceMultiplier;                              // 0x04F0   (0x0008)  
	UTextBlock*                                        tbMagazine;                                                 // 0x04F8   (0x0008)  
	UTextBlock*                                        tbAccuracy;                                                 // 0x0500   (0x0008)  
	UProgressBar*                                      pbAccuracy;                                                 // 0x0508   (0x0008)  
	UTextBlock*                                        tbEffectiveRange;                                           // 0x0510   (0x0008)  
	UTextBlock*                                        tbArmorClass;                                               // 0x0518   (0x0008)  
	UTextBlock*                                        tbArmor;                                                    // 0x0520   (0x0008)  
	UTextBlock*                                        tbMonsterArmor;                                             // 0x0528   (0x0008)  
	UTextBlock*                                        tbFrontArmor;                                               // 0x0530   (0x0008)  
	UTextBlock*                                        tbFrontMonsterArmor;                                        // 0x0538   (0x0008)  
	UTextBlock*                                        tbBackArmor;                                                // 0x0540   (0x0008)  
	UTextBlock*                                        tbBackMonsterArmor;                                         // 0x0548   (0x0008)  
	UTextBlock*                                        tbCoverArmsValue;                                           // 0x0550   (0x0008)  
	UTextBlock*                                        tbArmoredPlatesSlotsCount;                                  // 0x0558   (0x0008)  
	UProgressBar*                                      pbWearResistance;                                           // 0x0560   (0x0008)  
	UPanelWidget*                                      pwMedicineEffectsBox;                                       // 0x0568   (0x0008)  
	UPanelWidget*                                      pwFoodEffectsBox;                                           // 0x0570   (0x0008)  
	UPanelWidget*                                      pwCharacterEffectsInfluenceBox;                             // 0x0578   (0x0008)  
	UVerticalBox*                                      vbEffectsOfModificationBox;                                 // 0x0580   (0x0008)  
	UTextBlock*                                        tbWeight;                                                   // 0x0588   (0x0008)  
	UTextBlock*                                        tbTotalWeight;                                              // 0x0590   (0x0008)  
	UTextBlock*                                        tbBasePrice;                                                // 0x0598   (0x0008)  
	UTextBlock*                                        tbTotalBasePrice;                                           // 0x05A0   (0x0008)  
	UTextBlock*                                        tbCondition;                                                // 0x05A8   (0x0008)  
	UTextBlock*                                        tbDropChance;                                               // 0x05B0   (0x0008)  
	UTextBlock*                                        tbDescription;                                              // 0x05B8   (0x0008)  
	UHorizontalBox*                                    hbHungerFoodEffect;                                         // 0x05C0   (0x0008)  
	UHorizontalBox*                                    hbThirstFoodEffect;                                         // 0x05C8   (0x0008)  
	UHorizontalBox*                                    hbHealthFoodEffect;                                         // 0x05D0   (0x0008)  
	UHorizontalBox*                                    hbStaminaFoodEffect;                                        // 0x05D8   (0x0008)  
	UHorizontalBox*                                    hbAlcoholFoodEffect;                                        // 0x05E0   (0x0008)  
	UHorizontalBox*                                    hbPoisonFoodEffect;                                         // 0x05E8   (0x0008)  
	UHorizontalBox*                                    hbRadiationFoodEffect;                                      // 0x05F0   (0x0008)  
	UHorizontalBox*                                    hbBleedingFoodEffect;                                       // 0x05F8   (0x0008)  
	UHorizontalBox*                                    hbWoundedFoodEffect;                                        // 0x0600   (0x0008)  
	UTextBlock*                                        tbHungerFoodEffect;                                         // 0x0608   (0x0008)  
	UTextBlock*                                        tbThirstFoodEffect;                                         // 0x0610   (0x0008)  
	UTextBlock*                                        tbHealthFoodEffect;                                         // 0x0618   (0x0008)  
	UTextBlock*                                        tbStaminaFoodEffect;                                        // 0x0620   (0x0008)  
	UTextBlock*                                        tbAlcoholFoodEffect;                                        // 0x0628   (0x0008)  
	UTextBlock*                                        tbPoisonFoodEffect;                                         // 0x0630   (0x0008)  
	UTextBlock*                                        tbRadiationFoodEffect;                                      // 0x0638   (0x0008)  
	UTextBlock*                                        tbBleedingFoodEffect;                                       // 0x0640   (0x0008)  
	UTextBlock*                                        tbWoundedFoodEffect;                                        // 0x0648   (0x0008)  
	UHorizontalBox*                                    hbDamageModificationEffect;                                 // 0x0650   (0x0008)  
	UHorizontalBox*                                    hbAccuracyModificationEffect;                               // 0x0658   (0x0008)  
	UHorizontalBox*                                    hbArmorModificationEffect;                                  // 0x0660   (0x0008)  
	UHorizontalBox*                                    hbWeightModificationEffect;                                 // 0x0668   (0x0008)  
	UHorizontalBox*                                    hbWearResistanceModificationEffect;                         // 0x0670   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucDamageModificationPercentDeltaMin;                        // 0x0678   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucDamageModificationPercentDeltaMax;                        // 0x0680   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucAccuracyModificationPercentDeltaMin;                      // 0x0688   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucAccuracyModificationPercentDeltaMax;                      // 0x0690   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucArmorModificationPercentDeltaMin;                         // 0x0698   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucArmorModificationPercentDeltaMax;                         // 0x06A0   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucWeightModificationPercentDeltaMin;                        // 0x06A8   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucWeightModificationPercentDeltaMax;                        // 0x06B0   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucWearResistanceModificationPercentDeltaMin;                // 0x06B8   (0x0008)  
	UWTLHUDItemsModificationPercentDelta*              ucWearResistanceModificationPercentDeltaMax;                // 0x06C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x06C8   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            MedicineEffectWidgetClass;                                  // 0x06D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            EffectInfluenceWidgetClass;                                 // 0x06F8   (0x0028)  
	FMargin                                            ParametersVerticalBoxOriginalPadding;                       // 0x0720   (0x0010)  
	FLinearColor                                       CustomNameTextColor;                                        // 0x0730   (0x0010)  
	FLinearColor                                       LowAccuracyBarFillColor;                                    // 0x0740   (0x0010)  
	FLinearColor                                       LowMiddleAccuracyBarFillColor;                              // 0x0750   (0x0010)  
	FLinearColor                                       HighMiddleAccuracyBarFillColor;                             // 0x0760   (0x0010)  
	FLinearColor                                       HighAccuracyBarFillColor;                                   // 0x0770   (0x0010)  
};

/// Class /Script/WTL.WTLCommonItemInformationWindow
/// Size: 0x0010 (0x000288 - 0x000298)
class UWTLCommonItemInformationWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLCommonButton*                                  ucBtnOK;                                                    // 0x0288   (0x0008)  
	UWTLCommonItemInformation*                         ucItemInformation;                                          // 0x0290   (0x0008)  
};

/// Class /Script/WTL.WTLCommonItemPreview
/// Size: 0x05B8 (0x000260 - 0x000818)
class UWTLCommonItemPreview : public UWTLWidgetBase
{ 
public:
	UBorder*                                           bItemPreview;                                               // 0x0260   (0x0008)  
	UImage*                                            imgItemPreview;                                             // 0x0268   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psPreviewMesh;                                              // 0x0270   (0x0008)  
	UButton*                                           btnAutoRotateLeft;                                          // 0x0278   (0x0008)  
	UButton*                                           btnAutoRotateRight;                                         // 0x0280   (0x0008)  
	UButton*                                           btnRotateTop;                                               // 0x0288   (0x0008)  
	UButton*                                           btnRotateDown;                                              // 0x0290   (0x0008)  
	UButton*                                           btnRotateLeft;                                              // 0x0298   (0x0008)  
	UButton*                                           btnRotateRight;                                             // 0x02A0   (0x0008)  
	UButton*                                           btnZoomIn;                                                  // 0x02A8   (0x0008)  
	UButton*                                           btnZoomOut;                                                 // 0x02B0   (0x0008)  
	UButton*                                           btnReset;                                                   // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x02C0   (0x0018)  MISSED
	FButtonStyle                                       NormalButtonStyle;                                          // 0x02D8   (0x0278)  
	FButtonStyle                                       ClickedButtonStyle;                                         // 0x0550   (0x0278)  
	TWeakObjectPtr<UMaterialInterface*>                SquareMI;                                                   // 0x07C8   (0x0028)  
	TWeakObjectPtr<UMaterialInterface*>                LandscapeMI;                                                // 0x07F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLCommonItemPreview.UpdateAutoRotate
	void UpdateAutoRotate();                                                                                                 // [0x17c8b90] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnZoomOutBtnClicked
	void OnZoomOutBtnClicked();                                                                                              // [0x17c8c10] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnZoomInBtnClicked
	void OnZoomInBtnClicked();                                                                                               // [0x17c8c30] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnRotateTopBtnClicked
	void OnRotateTopBtnClicked();                                                                                            // [0x17c8cb0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnRotateRightBtnClicked
	void OnRotateRightBtnClicked();                                                                                          // [0x17c8c50] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnRotateLeftBtnClicked
	void OnRotateLeftBtnClicked();                                                                                           // [0x17c8c70] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnRotateDownBtnClicked
	void OnRotateDownBtnClicked();                                                                                           // [0x17c8c90] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnResetBtnClicked
	void OnResetBtnClicked();                                                                                                // [0x17c8bb0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnPreviewMeshSwitcherValueChanged
	void OnPreviewMeshSwitcherValueChanged(int32_t CurrentIndex, FString Prefix);                                            // [0x17c8d10] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnItemPreviewBorderMouseButtonDown
	FEventReply OnItemPreviewBorderMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                         // [0x17c8ed0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonItemPreview.OnAutoRotateRightBtnClicked
	void OnAutoRotateRightBtnClicked();                                                                                      // [0x17c8cd0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonItemPreview.OnAutoRotateLeftBtnClicked
	void OnAutoRotateLeftBtnClicked();                                                                                       // [0x17c8cf0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonItemPreviewWindow
/// Size: 0x0010 (0x000288 - 0x000298)
class UWTLCommonItemPreviewWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLCommonItemPreview*                             ucItemPreview;                                              // 0x0288   (0x0008)  
	UWTLCommonButton*                                  ucBtnBack;                                                  // 0x0290   (0x0008)  
};

/// Class /Script/WTL.WTLCommonMapMarker
/// Size: 0x00B8 (0x000260 - 0x000318)
class UWTLCommonMapMarker : public UUserWidget
{ 
public:
	UImage*                                            imgMarkerType;                                              // 0x0260   (0x0008)  
	UTextBlock*                                        tbMarkerName;                                               // 0x0268   (0x0008)  
	UTextBlock*                                        tbMarkerTime;                                               // 0x0270   (0x0008)  
	UWTLCommonMapMarkerToolTipText*                    m_MapMarkerToolTipTextWidget;                               // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_5[0x70];                                      // 0x0280   (0x0070)  MISSED
	TWeakObjectPtr<UClass*>                            MapMarkerToolTipTextWidgetClass;                            // 0x02F0   (0x0028)  
};

/// Class /Script/WTL.WTLCommonMapMarkerToolTipText
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonMapMarkerToolTipText : public UUserWidget
{ 
public:
	UTextBlock*                                        tbToolTip;                                                  // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLCommonMessageDialogButton
/// Size: 0x0028 (0x000420 - 0x000448)
class UWTLCommonMessageDialogButton : public UWTLCommonHotkeyButton
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0420   (0x0028)  MISSED
};

/// Class /Script/WTL.WTLCommonSelectedItem
/// Size: 0x00A0 (0x000400 - 0x0004A0)
class UWTLCommonSelectedItem : public UWTLCommonHoveredItem
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0400   (0x0008)  MISSED
	FSlateBrush                                        SelectedBorderBrush;                                        // 0x0408   (0x0088)  
	FLinearColor                                       SelectedBorderBrushColor;                                   // 0x0490   (0x0010)  
};

/// Class /Script/WTL.WTLCommonMicrotransactionItem
/// Size: 0x00D0 (0x0004A0 - 0x000570)
class UWTLCommonMicrotransactionItem : public UWTLCommonSelectedItem
{ 
public:
	UImage*                                            imgItem;                                                    // 0x04A0   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x04A8   (0x0008)  
	UTextBlock*                                        tbPrice;                                                    // 0x04B0   (0x0008)  
	UImage*                                            imgCredits;                                                 // 0x04B8   (0x0008)  
	UBorder*                                           bDiscount;                                                  // 0x04C0   (0x0008)  
	UWidgetSwitcher*                                   wsDiscount;                                                 // 0x04C8   (0x0008)  
	UTextBlock*                                        tbDiscount;                                                 // 0x04D0   (0x0008)  
	UTextBlock*                                        tbCreditsDiscount;                                          // 0x04D8   (0x0008)  
	UBorder*                                           bPremiumDiscountPercent;                                    // 0x04E0   (0x0008)  
	UTextBlock*                                        tbPremiumDiscountPercent;                                   // 0x04E8   (0x0008)  
	UBackgroundBlur*                                   bBlock;                                                     // 0x04F0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x50];                                      // 0x04F8   (0x0050)  MISSED
	FSlateColor                                        NotEnoughCreditsColor;                                      // 0x0548   (0x0028)  
};

/// Class /Script/WTL.WTLCommonMicrotransactionWindow
/// Size: 0x00B0 (0x000288 - 0x000338)
class UWTLCommonMicrotransactionWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLCommonURLButton*                               btnPremiumBonuses;                                          // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbMicrotransactionItems;                                    // 0x0290   (0x0008)  
	URichTextBlock*                                    rtbCreditsPurchaseTooltip;                                  // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbPurchasingIssues;                                         // 0x02A0   (0x0008)  
	UWTLCommonURLButton*                               btnPurchasingIssues;                                        // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02B0   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            MicrotransactionItemWidgetClass;                            // 0x02D0   (0x0028)  
	TArray<FWTLCreditsItemData>                        CreditsData;                                                // 0x02F8   (0x0010)  
	TArray<FWTLPremiumItemData>                        PremiumData;                                                // 0x0308   (0x0010)  
	FString                                            SteamPurchasingIssuesURL;                                   // 0x0318   (0x0010)  
	FString                                            MailruPurchasingIssuesURL;                                  // 0x0328   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLCommonMicrotransactionWindow.OnPremiumBonusesButtonClicked
	void OnPremiumBonusesButtonClicked();                                                                                    // [0x17c9c60] Final|Native|Private 
	// Function /Script/WTL.WTLCommonMicrotransactionWindow.OnBuyPremiumResult
	void OnBuyPremiumResult(bool Success);                                                                                   // [0x17c9c80] Final|Native|Private 
	// Function /Script/WTL.WTLCommonMicrotransactionWindow.OnBuyPremiumConfirmed
	void OnBuyPremiumConfirmed();                                                                                            // [0x17c9d60] Final|Native|Private 
	// Function /Script/WTL.WTLCommonMicrotransactionWindow.OnBuyPremium
	void OnBuyPremium(int32_t PremiumDaysCount, int32_t Price);                                                              // [0x17c9d80] Final|Native|Private 
	// Function /Script/WTL.WTLCommonMicrotransactionWindow.OnBuyCredits
	void OnBuyCredits(uint64_t StoreItemID);                                                                                 // [0x17c9ee0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonNotificationItem
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLCommonNotificationItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbNotificationMessage;                                      // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0268   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLCommonNotificator
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UWTLCommonNotificator : public UUserWidget
{ 
public:
	UBorder*                                           bNotificationsList;                                         // 0x0260   (0x0008)  
	UScrollBox*                                        sbNotificationsList;                                        // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            NotificationItemWidgetClass;                                // 0x0278   (0x0028)  
	float                                              ChildHeight;                                                // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02A4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonNotificator.OnChildsCountChange
	void OnChildsCountChange();                                                                                              // [0x17ca210] Final|Native|Protected 
};

/// Class /Script/WTL.WTLCommonOptions
/// Size: 0x0188 (0x000260 - 0x0003E8)
class UWTLCommonOptions : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0260   (0x0038)  MISSED
	UCanvasPanel*                                      cpMain;                                                     // 0x0298   (0x0008)  
	UBackgroundBlur*                                   bBackgroundBlur;                                            // 0x02A0   (0x0008)  
	UHorizontalBox*                                    hbTabController;                                            // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbOptionsBtns;                                              // 0x02B0   (0x0008)  
	UBorder*                                           bBackground;                                                // 0x02B8   (0x0008)  
	UWidgetSwitcher*                                   wsOptions;                                                  // 0x02C0   (0x0008)  
	UWTLOptionsGame*                                   ucOptionsGame;                                              // 0x02C8   (0x0008)  
	UWTLOptionsGraphic*                                ucOptionsGraphic;                                           // 0x02D0   (0x0008)  
	UWTLOptionsPostProcess*                            ucOptionsPostProcess;                                       // 0x02D8   (0x0008)  
	UWTLOptionsAudio*                                  ucOptionsAudio;                                             // 0x02E0   (0x0008)  
	UWTLOptionsControl*                                ucOptionsControl;                                           // 0x02E8   (0x0008)  
	UWTLOptionsInterface*                              ucOptionsInterface;                                         // 0x02F0   (0x0008)  
	UWTLOptionsIdentification*                         ucOptionsIdentification;                                    // 0x02F8   (0x0008)  
	UWTLOptionsBase*                                   m_CurrentOptionsWidget;                                     // 0x0300   (0x0008)  
	UWTLCommonMessageDialog*                           m_MessageDialogWidget;                                      // 0x0308   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0310   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x0318   (0x0008)  
	UWTLCommonButton*                                  ucBtnApply;                                                 // 0x0320   (0x0008)  
	UWTLCommonButton*                                  ucBtnReset;                                                 // 0x0328   (0x0008)  
	UWTLCommonButton*                                  ucBtnResetAll;                                              // 0x0330   (0x0008)  
	UWTLCommonColorPicker*                             m_CrosshairColorPickerWidget;                               // 0x0338   (0x0008)  
	unsigned char                                      UnknownData01_5[0x30];                                      // 0x0340   (0x0030)  MISSED
	TWeakObjectPtr<UClass*>                            MessageDialogWidgetClass;                                   // 0x0370   (0x0028)  
	TWeakObjectPtr<UClass*>                            TabButtonClass;                                             // 0x0398   (0x0028)  
	TWeakObjectPtr<UClass*>                            CrosshairColorPickerWidgetClass;                            // 0x03C0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLCommonOptions.ShowNextApplySettingsMessage
	void ShowNextApplySettingsMessage();                                                                                     // [0x17cac50] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.ResetCurrentSetting
	void ResetCurrentSetting();                                                                                              // [0x17ca880] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.ResetAllSettings
	void ResetAllSettings();                                                                                                 // [0x17ca7c0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnTabBtnClicked
	void OnTabBtnClicked(char TabIndex);                                                                                     // [0x17cab80] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnResetBtnClicked
	void OnResetBtnClicked();                                                                                                // [0x17ca970] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnResetAllBtnClicked
	void OnResetAllBtnClicked();                                                                                             // [0x17ca950] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnOkBtnClickedConfirmed
	void OnOkBtnClickedConfirmed();                                                                                          // [0x17cab10] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnOKBtnClicked
	void OnOKBtnClicked();                                                                                                   // [0x17cab40] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnExperimentalTextureStreamingValueOnOKNotConfirmed
	void OnExperimentalTextureStreamingValueOnOKNotConfirmed();                                                              // [0x17caa90] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnExperimentalTextureStreamingValueOnApplyNotConfirmed
	void OnExperimentalTextureStreamingValueOnApplyNotConfirmed();                                                           // [0x17ca9b0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnCrosshairColorSelection
	void OnCrosshairColorSelection(FLinearColor& CurrentColor, FGeometry& Geometry, FPointerEvent& InMouseEvent);            // [0x17ca4f0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLCommonOptions.OnCrosshairColorPickingCanceled
	void OnCrosshairColorPickingCanceled();                                                                                  // [0x17ca2d0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnCrosshairColorPicked
	void OnCrosshairColorPicked(FLinearColor& PickedColor);                                                                  // [0x17ca2f0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLCommonOptions.OnCrosshairColorChanged
	void OnCrosshairColorChanged(FLinearColor& ChangedColor);                                                                // [0x17ca3d0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLCommonOptions.OnCancelBtnClicked
	void OnCancelBtnClicked();                                                                                               // [0x17ca990] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnApplySettingsConfirmed
	void OnApplySettingsConfirmed();                                                                                         // [0x17caa20] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.OnApplyBtnClicked
	void OnApplyBtnClicked();                                                                                                // [0x17caa40] Final|Native|Private 
	// Function /Script/WTL.WTLCommonOptions.ApplyAllSettings
	bool ApplyAllSettings();                                                                                                 // [0x17ca920] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonSwitcher
/// Size: 0x0038 (0x000290 - 0x0002C8)
class UWTLCommonSwitcher : public UWTLCommonBase
{ 
public:
	UFMODEvent*                                        ButtonPressedSoundEvent;                                    // 0x0290   (0x0008)  
	UFMODEvent*                                        ButtonHoveredSoundEvent;                                    // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02A0   (0x0010)  MISSED
	UButton*                                           btnPrevious;                                                // 0x02B0   (0x0008)  
	UButton*                                           btnNext;                                                    // 0x02B8   (0x0008)  
	EWTLSwitcherType                                   SwitcherType;                                               // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02C1   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonSwitcher.OnPreviousButtonClicked
	void OnPreviousButtonClicked();                                                                                          // [0x17c4de0] Native|Protected     
	// Function /Script/WTL.WTLCommonSwitcher.OnNextButtonClicked
	void OnNextButtonClicked();                                                                                              // [0x17c4dc0] Native|Protected     
	// Function /Script/WTL.WTLCommonSwitcher.OnButtonPressed
	void OnButtonPressed();                                                                                                  // [0x17d28c0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonSwitcher.OnButtonHovered
	void OnButtonHovered();                                                                                                  // [0x17d28a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonPageSwitcher
/// Size: 0x0030 (0x0002C8 - 0x0002F8)
class UWTLCommonPageSwitcher : public UWTLCommonSwitcher
{ 
public:
	UTextBlock*                                        tbCurrentPage;                                              // 0x02C8   (0x0008)  
	UTextBlock*                                        tbPagesCount;                                               // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x02D8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLCommonParameterName
/// Size: 0x0078 (0x000260 - 0x0002D8)
class UWTLCommonParameterName : public UUserWidget
{ 
public:
	UImage*                                            imgBackground;                                              // 0x0260   (0x0008)  
	UBorder*                                           bMain;                                                      // 0x0268   (0x0008)  
	UTextBlock*                                        tbParameterName;                                            // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0278   (0x0010)  MISSED
	FText                                              ParameterName;                                              // 0x0288   (0x0018)  
	FText                                              DescriptionText;                                            // 0x02A0   (0x0018)  
	FName                                              GameInstanceName;                                           // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x02C0   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLCommonParameterPointSpin
/// Size: 0x0040 (0x0002C8 - 0x000308)
class UWTLCommonParameterPointSpin : public UWTLCommonSwitcher
{ 
public:
	UTextBlock*                                        tbPointText;                                                // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x38];                                      // 0x02D0   (0x0038)  MISSED
};

/// Class /Script/WTL.WTLCommonPopupMenu
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLCommonPopupMenu : public UUserWidget
{ 
public:
	UVerticalBox*                                      vbPopupButtons;                                             // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0268   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            PopupMenuButtonWidgetClass;                                 // 0x0278   (0x0028)  
};

/// Class /Script/WTL.WTLCommonPopupMenuButton
/// Size: 0x0038 (0x000340 - 0x000378)
class UWTLCommonPopupMenuButton : public UWTLCommonButton
{ 
public:
	UTextBlock*                                        tbPopup;                                                    // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0348   (0x0030)  MISSED
};

/// Class /Script/WTL.WTLCommonPremiumBonusesWindow
/// Size: 0x0008 (0x000288 - 0x000290)
class UWTLCommonPremiumBonusesWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0288   (0x0008)  
};

/// Class /Script/WTL.WTLCommonPremiumButton
/// Size: 0x0040 (0x000340 - 0x000380)
class UWTLCommonPremiumButton : public UWTLCommonButton
{ 
public:
	UWidgetSwitcher*                                   wsPremiumImage;                                             // 0x0340   (0x0008)  
	UImage*                                            imgActive;                                                  // 0x0348   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0350   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonPremiumButton.OnInAppPaymentResult
	void OnInAppPaymentResult(bool Success);                                                                                 // [0x17cb6c0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonQuestInfo
/// Size: 0x01D8 (0x000290 - 0x000468)
class UWTLCommonQuestInfo : public UWTLCommonBase
{ 
public:
	UBorder*                                           bQuestName;                                                 // 0x0290   (0x0008)  
	UBorder*                                           bQuestInfoPart1;                                            // 0x0298   (0x0008)  
	UBorder*                                           bQuestInfoPart2;                                            // 0x02A0   (0x0008)  
	UBorder*                                           bQuestInfoPart3;                                            // 0x02A8   (0x0008)  
	UBorder*                                           bQuestInfoPart4;                                            // 0x02B0   (0x0008)  
	UBorder*                                           bQuestInfoPart5;                                            // 0x02B8   (0x0008)  
	UBorder*                                           bQuestInfoPart6;                                            // 0x02C0   (0x0008)  
	UBorder*                                           bQuestInfoPart7;                                            // 0x02C8   (0x0008)  
	UBorder*                                           bQuestInfoPart8;                                            // 0x02D0   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x02D8   (0x0008)  
	UImage*                                            imgQuestIcon;                                               // 0x02E0   (0x0008)  
	UTextBlock*                                        tbCanBePerformedInGroup;                                    // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbRecommendedCharacterLevel;                                // 0x02F0   (0x0008)  
	UTextBlock*                                        tbRecommendedCharacterLevel;                                // 0x02F8   (0x0008)  
	UHorizontalBox*                                    hbMaxCharacterLevel;                                        // 0x0300   (0x0008)  
	UTextBlock*                                        tbMaxCharacterLevel;                                        // 0x0308   (0x0008)  
	UHorizontalBox*                                    hbQuestTimeLimit;                                           // 0x0310   (0x0008)  
	UTextBlock*                                        tbQuestTimeLimit;                                           // 0x0318   (0x0008)  
	UTextBlock*                                        tbQuestDescription;                                         // 0x0320   (0x0008)  
	UTextBlock*                                        tbRequiredTitle;                                            // 0x0328   (0x0008)  
	UHorizontalBox*                                    hbRequiredMoney;                                            // 0x0330   (0x0008)  
	UTextBlock*                                        tbRequiredMoney;                                            // 0x0338   (0x0008)  
	UImage*                                            imgRequiredMoneyReady;                                      // 0x0340   (0x0008)  
	UTextBlock*                                        tbRequiredItemsTitle;                                       // 0x0348   (0x0008)  
	UWrapBox*                                          wpRequiredItems;                                            // 0x0350   (0x0008)  
	UTextBlock*                                        tbRequiredKillsTitle;                                       // 0x0358   (0x0008)  
	UVerticalBox*                                      vbRequiredKills;                                            // 0x0360   (0x0008)  
	UTextBlock*                                        tbCustomRequirementsTitle;                                  // 0x0368   (0x0008)  
	UVerticalBox*                                      vbCustomRequirements;                                       // 0x0370   (0x0008)  
	UTextBlock*                                        tbRewardsTitle;                                             // 0x0378   (0x0008)  
	UHorizontalBox*                                    hbRewardExperience;                                         // 0x0380   (0x0008)  
	UTextBlock*                                        tbRewardExperience;                                         // 0x0388   (0x0008)  
	UHorizontalBox*                                    hbRewardMoney;                                              // 0x0390   (0x0008)  
	UTextBlock*                                        tbRewardMoney;                                              // 0x0398   (0x0008)  
	UHorizontalBox*                                    hbRewardPvPScore;                                           // 0x03A0   (0x0008)  
	UTextBlock*                                        tbRewardPvPScore;                                           // 0x03A8   (0x0008)  
	UHorizontalBox*                                    hbRewardPvEScore;                                           // 0x03B0   (0x0008)  
	UTextBlock*                                        tbRewardPvEScore;                                           // 0x03B8   (0x0008)  
	UHorizontalBox*                                    hbRewardCraftScore;                                         // 0x03C0   (0x0008)  
	UTextBlock*                                        tbRewardCraftScore;                                         // 0x03C8   (0x0008)  
	UHorizontalBox*                                    hbRewardTechnologyScore;                                    // 0x03D0   (0x0008)  
	UTextBlock*                                        tbRewardTechnologyScore;                                    // 0x03D8   (0x0008)  
	UTextBlock*                                        tbRewardItemsTitle;                                         // 0x03E0   (0x0008)  
	UWrapBox*                                          wpRewardItems;                                              // 0x03E8   (0x0008)  
	TWeakObjectPtr<UClass*>                            QuestItemSlotWidgetClass;                                   // 0x03F0   (0x0028)  
	TWeakObjectPtr<UClass*>                            RequiredMonsterKillWidgetClass;                             // 0x0418   (0x0028)  
	TWeakObjectPtr<UClass*>                            CustomRequirementWidgetClass;                               // 0x0440   (0x0028)  
};

/// Class /Script/WTL.WTLCommonSexButton
/// Size: 0x0038 (0x000340 - 0x000378)
class UWTLCommonSexButton : public UWTLCommonButton
{ 
public:
	UImage*                                            imgSex;                                                     // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0348   (0x0018)  MISSED
	EWTLSex                                            Sex;                                                        // 0x0360   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0361   (0x0007)  MISSED
	TArray<FWTLSexTexture>                             Textures;                                                   // 0x0368   (0x0010)  
};

/// Class /Script/WTL.WTLCommonSortButton
/// Size: 0x0050 (0x0003F8 - 0x000448)
class UWTLCommonSortButton : public UWTLCommonTextButton
{ 
public:
	UBorder*                                           bContent;                                                   // 0x03F8   (0x0008)  
	UWidgetSwitcher*                                   wsSortType;                                                 // 0x0400   (0x0008)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x0408   (0x0030)  MISSED
	FLinearColor                                       HoveredContentColor;                                        // 0x0438   (0x0010)  
};

/// Class /Script/WTL.WTLCommonSpinBox
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UWTLCommonSpinBox : public UUserWidget
{ 
public:
	UWTLUtilityNumberTextBox*                          ntbCount;                                                   // 0x0260   (0x0008)  
	UWTLCommonButton*                                  ucBtnUp;                                                    // 0x0268   (0x0008)  
	UWTLCommonButton*                                  ucBtnDown;                                                  // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0278   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonSpinBox.OnUpButtonClicked
	void OnUpButtonClicked();                                                                                                // [0x17cbf90] Final|Native|Private 
	// Function /Script/WTL.WTLCommonSpinBox.OnDownButtonClicked
	void OnDownButtonClicked();                                                                                              // [0x17cbf60] Final|Native|Private 
	// Function /Script/WTL.WTLCommonSpinBox.OnCountNumberTextBoxValueChanged
	void OnCountNumberTextBoxValueChanged(int32_t CurrentValue);                                                             // [0x17cbfc0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonSpinBox.OnCountNumberTextBoxTextCommitted
	void OnCountNumberTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                              // [0x17cc0a0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLCommonStore
/// Size: 0x05B8 (0x000260 - 0x000818)
class UWTLCommonStore : public UWTLWidgetBase
{ 
public:
	UWidgetSwitcher*                                   wsTop;                                                      // 0x0260   (0x0008)  
	UWidgetSwitcher*                                   wsMain;                                                     // 0x0268   (0x0008)  
	UHorizontalBox*                                    hbItemTypeButtons;                                          // 0x0270   (0x0008)  
	UEditableTextBox*                                  etbSearch;                                                  // 0x0278   (0x0008)  
	UWTLCommonComboBoxString*                          cbsSorting;                                                 // 0x0280   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x0288   (0x0008)  
	UTextBlock*                                        tbItemType;                                                 // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsItemImage;                                                // 0x0298   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x02A0   (0x0008)  
	UWTLCommonButton*                                  ucItemInformationBtn;                                       // 0x02A8   (0x0008)  
	UWTLCommonButton*                                  ucItemPreviewBtn;                                           // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucCharacterPreviewBtn;                                      // 0x02B8   (0x0008)  
	UWTLCommonStoreItemDescription*                    ucItemDescription;                                          // 0x02C0   (0x0008)  
	UWTLCommonStoreItemBundleInfo*                     ucItemBundleInfo;                                           // 0x02C8   (0x0008)  
	UWTLCommonStoreItemRequirements*                   ucItemRequirements;                                         // 0x02D0   (0x0008)  
	UWTLCommonStoreItemWeaponTypeBonusInfo*            ucItemWeaponTypeBonusInfo;                                  // 0x02D8   (0x0008)  
	UWTLCommonStoreItemTags*                           ucItemTags;                                                 // 0x02E0   (0x0008)  
	UWTLCommonStoreItemSimilarItems*                   ucItemSimilarItems;                                         // 0x02E8   (0x0008)  
	UTextBlock*                                        tbItemPrice;                                                // 0x02F0   (0x0008)  
	UButton*                                           btnCountInCart;                                             // 0x02F8   (0x0008)  
	UTextBlock*                                        tbCountInCart;                                              // 0x0300   (0x0008)  
	UWTLCommonSpinBox*                                 ucAddToCartCount;                                           // 0x0308   (0x0008)  
	UWTLCommonTextButton*                              ucBtnAddToCart;                                             // 0x0310   (0x0008)  
	UTextBlock*                                        tbCartItemCount;                                            // 0x0318   (0x0008)  
	UWidgetSwitcher*                                   wsStore;                                                    // 0x0320   (0x0008)  
	UWidgetSwitcher*                                   wsItemsOffers;                                              // 0x0328   (0x0008)  
	UScrollBox*                                        sbItemsOffers;                                              // 0x0330   (0x0008)  
	UWrapBox*                                          wbItemsOffers;                                              // 0x0338   (0x0008)  
	UWidgetSwitcher*                                   wsItems;                                                    // 0x0340   (0x0008)  
	UScrollBox*                                        sbItems;                                                    // 0x0348   (0x0008)  
	UWrapBox*                                          wbItems;                                                    // 0x0350   (0x0008)  
	UWidgetSwitcher*                                   wsCart;                                                     // 0x0358   (0x0008)  
	UScrollBox*                                        sbCart;                                                     // 0x0360   (0x0008)  
	UTextBlock*                                        tbTotalCartPrice;                                           // 0x0368   (0x0008)  
	UWTLCommonButton*                                  ucBtnTopUpCreditsCart;                                      // 0x0370   (0x0008)  
	UWTLCommonButton*                                  ucBtnAccountInventory;                                      // 0x0378   (0x0008)  
	UWTLCommonTextButton*                              ucBtnCheckout;                                              // 0x0380   (0x0008)  
	UWTLCommonTextButton*                              ucBtnExit;                                                  // 0x0388   (0x0008)  
	UWTLCommonTextButton*                              ucBtnBack;                                                  // 0x0390   (0x0008)  
	UWTLCommonTextButton*                              ucBtnCart;                                                  // 0x0398   (0x0008)  
	UWTLCommonButton*                                  ucCodeButton;                                               // 0x03A0   (0x0008)  
	UWTLCommonFormattedTextBlock*                      ftbCodeTextBlock;                                           // 0x03A8   (0x0008)  
	UWTLCommonButton*                                  btSendCodeButton;                                           // 0x03B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x03B8   (0x0038)  MISSED
	TArray<UWTLCommonStoreItem*>                       m_StoreItemsWidgets;                                        // 0x03F0   (0x0010)  
	unsigned char                                      UnknownData01_5[0x128];                                     // 0x0400   (0x0128)  MISSED
	UWTLCommonStoreItem*                               m_CurrentViewedStoreItem;                                   // 0x0528   (0x0008)  
	unsigned char                                      UnknownData02_5[0x158];                                     // 0x0530   (0x0158)  MISSED
	UWTLCommonStoreItem*                               m_TagSearchStoreItem;                                       // 0x0688   (0x0008)  
	unsigned char                                      UnknownData03_5[0x20];                                      // 0x0690   (0x0020)  MISSED
	UWidgetSwitcher*                                   wsCodeResult;                                               // 0x06B0   (0x0008)  
	unsigned char                                      UnknownData04_5[0x30];                                      // 0x06B8   (0x0030)  MISSED
	TWeakObjectPtr<UClass*>                            ItemTypeButtonWidgetClass;                                  // 0x06E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            StoreItemWidgetClass;                                       // 0x0710   (0x0028)  
	TWeakObjectPtr<UClass*>                            StorePremiumItemWidgetClass;                                // 0x0738   (0x0028)  
	TWeakObjectPtr<UClass*>                            CartItemWidgetClass;                                        // 0x0760   (0x0028)  
	TArray<FWTLItemTypeStoreButtonStyle>               ItemTypeStoreButtonStyles;                                  // 0x0788   (0x0010)  
	FSlateColor                                        CreditsTextColor;                                           // 0x0798   (0x0028)  
	FSlateColor                                        WarningTextColor;                                           // 0x07C0   (0x0028)  
	UWidgetAnimation*                                  CartButtonBlinkingAnimation;                                // 0x07E8   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        PurchaseStoreItemsSoundEvent;                               // 0x07F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLCommonStore.ShowAccountInventoryTutorialMessage
	void ShowAccountInventoryTutorialMessage();                                                                              // [0x17cf060] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.SendCode
	void SendCode();                                                                                                         // [0x17cda50] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnTopUpCredits
	void OnTopUpCredits();                                                                                                   // [0x17ce3e0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnTagClicked
	void OnTagClicked(FText& TagText);                                                                                       // [0x17ce4e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStore.OnStoreItemsUpdated
	void OnStoreItemsUpdated(TArray<FWTLStoreItem>& StoreItems);                                                             // [0x17ce190] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStore.OnStoreItemClicked
	void OnStoreItemClicked(FWTLStoreItem& StoreItemData, UWTLCommonStoreItem* StoreItem);                                   // [0x17cdff0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStore.OnSortingComboBoxStringSelectionChanged
	void OnSortingComboBoxStringSelectionChanged(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);              // [0x17cec40] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x17cee60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStore.OnPurchaseStoreItems
	void OnPurchaseStoreItems(FWTLInAppPurchaseResult& InAppPurchaseResult);                                                 // [0x17ce6b0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStore.OnItemTypeButtonClicked
	void OnItemTypeButtonClicked(EWTLStoreItemType StoreItemType);                                                           // [0x17cef90] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnItemsScrollBoxScrolled
	void OnItemsScrollBoxScrolled(float CurrentOffset);                                                                      // [0x17cea40] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnItemsOffersScrollBoxScrolled
	void OnItemsOffersScrollBoxScrolled(float CurrentOffset);                                                                // [0x17ceb40] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnItemPreviewButtonClicked
	void OnItemPreviewButtonClicked();                                                                                       // [0x17cdef0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnItemInformationButtonClicked
	void OnItemInformationButtonClicked();                                                                                   // [0x17cdeb0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnExitButtonClicked
	void OnExitButtonClicked();                                                                                              // [0x17ce650] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCountInCartButtonClicked
	void OnCountInCartButtonClicked();                                                                                       // [0x17ce920] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCodeCommitted
	void OnCodeCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                                // [0x17cd780] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStore.OnCodeCannotBeSended
	void OnCodeCannotBeSended();                                                                                             // [0x17cda70] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCodeCanBeSended
	void OnCodeCanBeSended();                                                                                                // [0x17cdaa0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCodeActivationResult
	void OnCodeActivationResult(bool Value);                                                                                 // [0x17cd970] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCodeActivateButtonPressed
	void OnCodeActivateButtonPressed();                                                                                      // [0x17ce3c0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCheckoutConfirmed
	void OnCheckoutConfirmed();                                                                                              // [0x17ce850] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCheckoutButtonClicked
	void OnCheckoutButtonClicked();                                                                                          // [0x17ce870] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCharacterPreviewButtonClicked
	void OnCharacterPreviewButtonClicked();                                                                                  // [0x17cded0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCartScrollBoxScrolled
	void OnCartScrollBoxScrolled(float CurrentOffset);                                                                       // [0x17ce940] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCartItemRemoved
	void OnCartItemRemoved(uint64_t CartItemID, UWTLCommonStoreCartItem* StoreCartItem);                                     // [0x17cdc20] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCartItemCountChanged
	void OnCartItemCountChanged(uint64_t CartItemID, int32_t NewCount);                                                      // [0x17cdac0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCartItemClicked
	void OnCartItemClicked(uint64_t CartItemID);                                                                             // [0x17cdd80] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnCartButtonClicked
	void OnCartButtonClicked();                                                                                              // [0x17ce610] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnBackButtonClicked
	void OnBackButtonClicked();                                                                                              // [0x17ce630] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnAddToCartButtonClicked
	void OnAddToCartButtonClicked();                                                                                         // [0x17ce8c0] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnAddStoreItemToCart
	void OnAddStoreItemToCart(uint64_t StoreItemID);                                                                         // [0x17cdf10] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.OnAccountInventoryButtonClicked
	void OnAccountInventoryButtonClicked();                                                                                  // [0x17ce890] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStore.K2_OnCodeActivationResult
	void K2_OnCodeActivationResult(bool Value);                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLCommonStoreBundleInfoItem
/// Size: 0x0138 (0x000260 - 0x000398)
class UWTLCommonStoreBundleInfoItem : public UUserWidget
{ 
public:
	UWidgetSwitcher*                                   wsItemImage;                                                // 0x0260   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x0268   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbCount;                                                    // 0x0278   (0x0008)  
	UTextBlock*                                        tbCount;                                                    // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_6[0x110];                                     // 0x0288   (0x0110)  MISSED
};

/// Class /Script/WTL.WTLCommonStoreButton
/// Size: 0x0060 (0x000400 - 0x000460)
class UWTLCommonStoreButton : public UWTLCommonHoveredItem
{ 
public:
	UTextBlock*                                        tbStore;                                                    // 0x0400   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0408   (0x0028)  MISSED
	FString                                            ParentName;                                                 // 0x0430   (0x0010)  
	UWidgetAnimation*                                  IdleAnimation;                                              // 0x0440   (0x0008)  
	FText                                              StoreText;                                                  // 0x0448   (0x0018)  
};

/// Class /Script/WTL.WTLCommonStoreCartItem
/// Size: 0x0090 (0x000400 - 0x000490)
class UWTLCommonStoreCartItem : public UWTLCommonHoveredItem
{ 
public:
	UWTLCommonButton*                                  ucBtnRemove;                                                // 0x0400   (0x0008)  
	UWidgetSwitcher*                                   wsItemImage;                                                // 0x0408   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x0410   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x0418   (0x0008)  
	UTextBlock*                                        tbPrice;                                                    // 0x0420   (0x0008)  
	UWTLCommonSpinBox*                                 ucCount;                                                    // 0x0428   (0x0008)  
	UTextBlock*                                        tbTotalPrice;                                               // 0x0430   (0x0008)  
	unsigned char                                      UnknownData00_6[0x58];                                      // 0x0438   (0x0058)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonStoreCartItem.OnRemoveButtonClicked
	void OnRemoveButtonClicked();                                                                                            // [0x17cfd80] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStoreCartItem.OnItemImageLoaded
	void OnItemImageLoaded(UTexture2D* Texture);                                                                             // [0x17cfb30] Final|Native|Public  
	// Function /Script/WTL.WTLCommonStoreCartItem.OnCountSpinBoxValueChanged
	void OnCountSpinBoxValueChanged(int32_t CurrentValue);                                                                   // [0x17cfc20] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonStoreCountSpinBox
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class UWTLCommonStoreCountSpinBox : public UWTLCommonSpinBox
{ 
public:
};

/// Class /Script/WTL.WTLCommonStoreCurrentCharacterParameter
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLCommonStoreCurrentCharacterParameter : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbMain;                                                     // 0x0260   (0x0008)  
	UTextBlock*                                        tbCurrentCharacterParameter;                                // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLCommonStoreItemBase
/// Size: 0x0008 (0x000400 - 0x000408)
class UWTLCommonStoreItemBase : public UWTLCommonHoveredItem
{ 
public:
	bool                                               IsScaleOnHovered;                                           // 0x0400   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0401   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLCommonStoreItem
/// Size: 0x0210 (0x000408 - 0x000618)
class UWTLCommonStoreItem : public UWTLCommonStoreItemBase
{ 
public:
	UWidgetSwitcher*                                   wsItemImage;                                                // 0x0408   (0x0008)  
	UBorder*                                           bBorder;                                                    // 0x0410   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x0418   (0x0008)  
	UBorder*                                           bDiscount;                                                  // 0x0420   (0x0008)  
	UImage*                                            imgHidden;                                                  // 0x0428   (0x0008)  
	UTextBlock*                                        tbDiscount;                                                 // 0x0430   (0x0008)  
	UBorder*                                           bNew;                                                       // 0x0438   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x0440   (0x0008)  
	UHorizontalBox*                                    hbPrice;                                                    // 0x0448   (0x0008)  
	UTextBlock*                                        tbPrice;                                                    // 0x0450   (0x0008)  
	UWTLCommonButton*                                  ucBtnAddToCart;                                             // 0x0458   (0x0008)  
	unsigned char                                      UnknownData00_5[0x180];                                     // 0x0460   (0x0180)  MISSED
	TWeakObjectPtr<UClass*>                            StoreItemTooltipClass;                                      // 0x05E0   (0x0028)  
	bool                                               IsShowTooltipOnHovered;                                     // 0x0608   (0x0001)  
	bool                                               IsShowShortTooltip;                                         // 0x0609   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x060A   (0x0002)  MISSED
	FVector2D                                          ItemImageSize;                                              // 0x060C   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0614   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonStoreItem.OnAddToCartButtonClicked
	void OnAddToCartButtonClicked();                                                                                         // [0x17d0140] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonStoreItemBundleInfo
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UWTLCommonStoreItemBundleInfo : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbGameItems;                                                // 0x0260   (0x0008)  
	UVerticalBox*                                      vbGameItems;                                                // 0x0268   (0x0008)  
	UHorizontalBox*                                    hbCustomizationItems;                                       // 0x0270   (0x0008)  
	UVerticalBox*                                      vbCustomizationItems;                                       // 0x0278   (0x0008)  
	TWeakObjectPtr<UClass*>                            BundleInfoItemWidgetClass;                                  // 0x0280   (0x0028)  
};

/// Class /Script/WTL.WTLCommonStoreItemDescription
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonStoreItemDescription : public UUserWidget
{ 
public:
	URichTextBlock*                                    rtbDescription;                                             // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLCommonStoreItemRequirements
/// Size: 0x00F8 (0x000260 - 0x000358)
class UWTLCommonStoreItemRequirements : public UUserWidget
{ 
public:
	UVerticalBox*                                      vbMain;                                                     // 0x0260   (0x0008)  
	UHorizontalBox*                                    hbRequiredFaction;                                          // 0x0268   (0x0008)  
	UTextBlock*                                        tbRequiredFaction;                                          // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbCurrentFaction;                                           // 0x0278   (0x0008)  
	UTextBlock*                                        tbCurrentFaction;                                           // 0x0280   (0x0008)  
	UVerticalBox*                                      vbRequirements;                                             // 0x0288   (0x0008)  
	UWTLRichTextBlock*                                 rtbRequiredClass;                                           // 0x0290   (0x0008)  
	UVerticalBox*                                      vbRequiredParameters;                                       // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbRequiredLevel;                                            // 0x02A0   (0x0008)  
	UTextBlock*                                        tbRequiredLevel;                                            // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbCurrentLevel;                                             // 0x02B0   (0x0008)  
	UTextBlock*                                        tbCurrentLevel;                                             // 0x02B8   (0x0008)  
	UHorizontalBox*                                    hbRequiredStrength;                                         // 0x02C0   (0x0008)  
	UTextBlock*                                        tbRequiredStrength;                                         // 0x02C8   (0x0008)  
	UWTLCommonStoreCurrentCharacterParameter*          ucCurrentStrength;                                          // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbRequiredDexterity;                                        // 0x02D8   (0x0008)  
	UTextBlock*                                        tbRequiredDexterity;                                        // 0x02E0   (0x0008)  
	UWTLCommonStoreCurrentCharacterParameter*          ucCurrentDexterity;                                         // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbRequiredStamina;                                          // 0x02F0   (0x0008)  
	UTextBlock*                                        tbRequiredStamina;                                          // 0x02F8   (0x0008)  
	UWTLCommonStoreCurrentCharacterParameter*          ucCurrentStamina;                                           // 0x0300   (0x0008)  
	UHorizontalBox*                                    hbRequiredAccuracy;                                         // 0x0308   (0x0008)  
	UTextBlock*                                        tbRequiredAccuracy;                                         // 0x0310   (0x0008)  
	UWTLCommonStoreCurrentCharacterParameter*          ucCurrentAccuracy;                                          // 0x0318   (0x0008)  
	UHorizontalBox*                                    hbRequiredIntelligence;                                     // 0x0320   (0x0008)  
	UTextBlock*                                        tbRequiredIntelligence;                                     // 0x0328   (0x0008)  
	UWTLCommonStoreCurrentCharacterParameter*          ucCurrentIntelligence;                                      // 0x0330   (0x0008)  
	UHorizontalBox*                                    hbRequiredFortune;                                          // 0x0338   (0x0008)  
	UTextBlock*                                        tbRequiredFortune;                                          // 0x0340   (0x0008)  
	UWTLCommonStoreCurrentCharacterParameter*          ucCurrentFortune;                                           // 0x0348   (0x0008)  
	EFontSize                                          FontSize;                                                   // 0x0350   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0351   (0x0003)  MISSED
	float                                              RequiredClassWrapTextAt;                                    // 0x0354   (0x0004)  
};

/// Class /Script/WTL.WTLCommonStoreItemSimilarItems
/// Size: 0x0088 (0x000260 - 0x0002E8)
class UWTLCommonStoreItemSimilarItems : public UUserWidget
{ 
public:
	UWTLCommonButton*                                  ucBtnPrevious;                                              // 0x0260   (0x0008)  
	UTextBlock*                                        tbCaption;                                                  // 0x0268   (0x0008)  
	UHorizontalBox*                                    hbItems;                                                    // 0x0270   (0x0008)  
	UWTLCommonButton*                                  ucBtnNext;                                                  // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x0280   (0x0040)  MISSED
	TWeakObjectPtr<UClass*>                            StoreItemWidgetClass;                                       // 0x02C0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLCommonStoreItemSimilarItems.OnStoreItemClicked
	void OnStoreItemClicked(FWTLStoreItem& StoreItemData, UWTLCommonStoreItem* StoreItem);                                   // [0x17d0a30] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonStoreItemSimilarItems.OnPreviousButtonClicked
	void OnPreviousButtonClicked();                                                                                          // [0x17d0930] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStoreItemSimilarItems.OnNextButtonClicked
	void OnNextButtonClicked();                                                                                              // [0x17d0910] Final|Native|Private 
	// Function /Script/WTL.WTLCommonStoreItemSimilarItems.OnAddStoreItemToCart
	void OnAddStoreItemToCart(uint64_t StoreItemID);                                                                         // [0x17d0950] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonStoreItemTags
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UWTLCommonStoreItemTags : public UUserWidget
{ 
public:
	UWrapBox*                                          wbTags;                                                     // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0268   (0x0018)  MISSED
	TWeakObjectPtr<UClass*>                            TagButtonWidgetClass;                                       // 0x0280   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLCommonStoreItemTags.OnTagButtonClicked
	void OnTagButtonClicked(FText& TagText);                                                                                 // [0x17d0e60] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLCommonStoreItemTooltip
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLCommonStoreItemTooltip : public UUserWidget
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x0260   (0x0008)  
	UTextBlock*                                        tbType;                                                     // 0x0268   (0x0008)  
	UWTLCommonStoreItemDescription*                    ucItemDescription;                                          // 0x0270   (0x0008)  
	UWTLCommonStoreItemRequirements*                   ucItemRequirements;                                         // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLCommonTypeButton
/// Size: 0x0278 (0x000340 - 0x0005B8)
class UWTLCommonTypeButton : public UWTLCommonButton
{ 
public:
	unsigned char                                      UnknownData00_1[0x278];                                     // 0x0340   (0x0278)  MISSED
};

/// Class /Script/WTL.WTLCommonStoreItemTypeButton
/// Size: 0x0020 (0x0005B8 - 0x0005D8)
class UWTLCommonStoreItemTypeButton : public UWTLCommonTypeButton
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x05B8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLCommonStoreItemWeaponTypeBonusInfo
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonStoreItemWeaponTypeBonusInfo : public UUserWidget
{ 
public:
	UWTLRichTextBlock*                                 rtbWeaponTypeBonusInfo;                                     // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLCommonStorePremiumItem
/// Size: 0x0000 (0x000408 - 0x000408)
class UWTLCommonStorePremiumItem : public UWTLCommonStoreItemBase
{ 
public:
};

/// Class /Script/WTL.WTLCommonStoreTagButton
/// Size: 0x0048 (0x0003F8 - 0x000440)
class UWTLCommonStoreTagButton : public UWTLCommonTextButton
{ 
public:
	UTextBlock*                                        tbHashSign;                                                 // 0x03F8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0400   (0x0018)  MISSED
	FSlateColor                                        HoveredTextColor;                                           // 0x0418   (0x0028)  
};

/// Class /Script/WTL.WTLCommonSuggestionList
/// Size: 0x00A0 (0x000260 - 0x000300)
class UWTLCommonSuggestionList : public UUserWidget
{ 
public:
	UScrollBox*                                        SuggestionsScrollBox;                                       // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x68];                                      // 0x0268   (0x0068)  MISSED
	TWeakObjectPtr<UClass*>                            SuggestionTextWidgetClass;                                  // 0x02D0   (0x0028)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x02F8   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonSuggestionList.OnSuggestionsScrollBoxUserScrolled
	void OnSuggestionsScrollBoxUserScrolled(float CurrentOffset);                                                            // [0x17d2060] Final|Native|Private 
	// Function /Script/WTL.WTLCommonSuggestionList.OnSelected
	void OnSelected(FText& Suggestion);                                                                                      // [0x17d1f20] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLCommonSuggestionText
/// Size: 0x0038 (0x0004A0 - 0x0004D8)
class UWTLCommonSuggestionText : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        SuggestionTextBlock;                                        // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x04A8   (0x0030)  MISSED
};

/// Class /Script/WTL.WTLCommonSuggestionTextBox
/// Size: 0x00B0 (0x000260 - 0x000310)
class UWTLCommonSuggestionTextBox : public UUserWidget
{ 
public:
	UEditableTextBox*                                  TextBox;                                                    // 0x0260   (0x0008)  
	UMenuAnchor*                                       MenuAnchor;                                                 // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	UWTLCommonSuggestionList*                          m_SuggestionList;                                           // 0x0278   (0x0008)  
	TWeakObjectPtr<UClass*>                            SuggestionListWidgetClass;                                  // 0x0280   (0x0028)  
	int32_t                                            VisibleSuggestionsWithoutScroll;                            // 0x02A8   (0x0004)  
	float                                              SuggestionTextHeight;                                       // 0x02AC   (0x0004)  
	bool                                               bIsSuggestAccountCharacters;                                // 0x02B0   (0x0001)  
	bool                                               bIsSuggestFriends;                                          // 0x02B1   (0x0001)  
	bool                                               OverrideFont;                                               // 0x02B2   (0x0001)  
	unsigned char                                      UnknownData01_5[0x5];                                       // 0x02B3   (0x0005)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x02B8   (0x0058)  


	/// Functions
	// Function /Script/WTL.WTLCommonSuggestionTextBox.OnTextBoxTextChanged
	void OnTextBoxTextChanged(FText& Text);                                                                                  // [0x17d2650] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonSuggestionTextBox.OnSelectedSuggestion
	void OnSelectedSuggestion(FText& Suggestion);                                                                            // [0x17d24d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLCommonSuggestionTextBox.OnGetUserMenuContentEvent
	UWidget* OnGetUserMenuContentEvent();                                                                                    // [0x17d2630] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonTabButton
/// Size: 0x0F88 (0x000340 - 0x0012C8)
class UWTLCommonTabButton : public UWTLCommonButton
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0340   (0x0028)  MISSED
	FButtonStyle                                       TabNormalButtonStyle;                                       // 0x0368   (0x0278)  
	FButtonStyle                                       TabSelectedButtonStyle;                                     // 0x05E0   (0x0278)  
	FButtonStyle                                       TabFirstNormalButtonStyle;                                  // 0x0858   (0x0278)  
	FButtonStyle                                       TabFirstSelectedButtonStyle;                                // 0x0AD0   (0x0278)  
	FButtonStyle                                       TabLastNormalButtonStyle;                                   // 0x0D48   (0x0278)  
	FButtonStyle                                       TabLastSelectedButtonStyle;                                 // 0x0FC0   (0x0278)  
	FSlateColor                                        TabNormalSlateColor;                                        // 0x1238   (0x0028)  
	FSlateColor                                        TabHoveredSlateColor;                                       // 0x1260   (0x0028)  
	FSlateColor                                        TabSelectedSlateColor;                                      // 0x1288   (0x0028)  
	FText                                              Text;                                                       // 0x12B0   (0x0018)  
};

/// Class /Script/WTL.WTLCommonText
/// Size: 0x0020 (0x000290 - 0x0002B0)
class UWTLCommonText : public UWTLCommonBase
{ 
public:
	UTextBlock*                                        tbText;                                                     // 0x0290   (0x0008)  
	FText                                              Text;                                                       // 0x0298   (0x0018)  
};

/// Class /Script/WTL.WTLCommonTextCheckBox
/// Size: 0x0058 (0x0002F0 - 0x000348)
class UWTLCommonTextCheckBox : public UWTLCommonCheckBox
{ 
public:
	UButton*                                           btnCheckBox;                                                // 0x02F0   (0x0008)  
	UBorder*                                           bContent;                                                   // 0x02F8   (0x0008)  
	UTextBlock*                                        tbCheckBox;                                                 // 0x0300   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0308   (0x0010)  MISSED
	FText                                              Text;                                                       // 0x0318   (0x0018)  
	bool                                               bUseHoveredContentColor;                                    // 0x0330   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0331   (0x0003)  MISSED
	FLinearColor                                       HoveredContentColor;                                        // 0x0334   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0344   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonTextCheckBox.OnCheckBoxButtonClicked
	void OnCheckBoxButtonClicked();                                                                                          // [0x17d2cf0] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonTicker
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLCommonTicker : public UUserWidget
{ 
public:
	UTextBlock*                                        tbTicker;                                                   // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0xC];                                       // 0x0268   (0x000C)  MISSED
	float                                              WidgetSizeX;                                                // 0x0274   (0x0004)  
	float                                              Speed;                                                      // 0x0278   (0x0004)  
	bool                                               bIsManualColor;                                             // 0x027C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x027D   (0x0003)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCommonTicker.SetText
	void SetText(FText& Text);                                                                                               // [0x17d2ff0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLCommonTicker.SetColor
	void SetColor(FSlateColor& Color);                                                                                       // [0x17d2e90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLCommonTicker.ResetColor
	void ResetColor();                                                                                                       // [0x17d2e60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLCommonToggleSwitcher
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonToggleSwitcher : public UUserWidget
{ 
public:
	UWidgetSwitcher*                                   wsSwitcher;                                                 // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLCommonToolTipText
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLCommonToolTipText : public UUserWidget
{ 
public:
	UTextBlock*                                        tbToolTipText;                                              // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLCommonTopUpCreditsSmallButton
/// Size: 0x0000 (0x000340 - 0x000340)
class UWTLCommonTopUpCreditsSmallButton : public UWTLCommonButton
{ 
public:
};

/// Class /Script/WTL.WTLCommonTutorialWindow
/// Size: 0x00C0 (0x000288 - 0x000348)
class UWTLCommonTutorialWindow : public UWTLCommonWindowBase
{ 
public:
	UBorder*                                           bWidth;                                                     // 0x0288   (0x0008)  
	UBorder*                                           bHeight;                                                    // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbMessagesCount;                                            // 0x0298   (0x0008)  
	UImage*                                            imgMessage;                                                 // 0x02A0   (0x0008)  
	URichTextBlock*                                    rtbMessage;                                                 // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsCheckBox;                                                 // 0x02B0   (0x0008)  
	UWTLCommonCheckBox*                                cbDisableTutorial;                                          // 0x02B8   (0x0008)  
	UWTLCommonCheckBox*                                cbDoNotShowAgain;                                           // 0x02C0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02C8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnPrevious;                                              // 0x02D0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnNext;                                                  // 0x02D8   (0x0008)  
	UTextBlock*                                        tbCurrentMessageNumber;                                     // 0x02E0   (0x0008)  
	UTextBlock*                                        tbMessagesCount;                                            // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4C];                                      // 0x02F0   (0x004C)  MISSED
	float                                              MinWidth;                                                   // 0x033C   (0x0004)  
	float                                              MinHeight;                                                  // 0x0340   (0x0004)  
	float                                              PaddingSize;                                                // 0x0344   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLCommonTutorialWindow.OnPreviousBtnClicked
	void OnPreviousBtnClicked();                                                                                             // [0x17d3520] Final|Native|Private 
	// Function /Script/WTL.WTLCommonTutorialWindow.OnNextBtnClicked
	void OnNextBtnClicked();                                                                                                 // [0x17d3500] Final|Native|Private 
	// Function /Script/WTL.WTLCommonTutorialWindow.OnDoNotShowAgainCheckBoxCheckStateChanged
	void OnDoNotShowAgainCheckBoxCheckStateChanged(bool bIsChecked);                                                         // [0x17d3540] Final|Native|Private 
};

/// Class /Script/WTL.WTLCommonURLButton
/// Size: 0x0048 (0x0003F8 - 0x000440)
class UWTLCommonURLButton : public UWTLCommonTextButton
{ 
public:
	UBorder*                                           bUnderline;                                                 // 0x03F8   (0x0008)  
	FString                                            URL;                                                        // 0x0400   (0x0010)  
	FSlateColor                                        HoveredTextColor;                                           // 0x0410   (0x0028)  
	bool                                               IsShowUnderline;                                            // 0x0438   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0439   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLConsole
/// Size: 0x0000 (0x000130 - 0x000130)
class UWTLConsole : public UConsole
{ 
public:
};

/// Class /Script/WTL.WTLControlledAnimInstance
/// Size: 0x0020 (0x0002C0 - 0x0002E0)
class UWTLControlledAnimInstance : public UAnimInstance
{ 
public:
	AWTLControlledMonsterPawn*                         m_Pawn;                                                     // 0x02B8   (0x0008)  
	float                                              VelocitySpeed;                                              // 0x02C0   (0x0004)  
	FVector                                            VelocityDirection;                                          // 0x02C4   (0x000C)  
	bool                                               IsWalkableFloor;                                            // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData00_6[0xF];                                       // 0x02D1   (0x000F)  MISSED
};

/// Class /Script/WTL.WTLControlledDrone
/// Size: 0x0280 (0x0004D8 - 0x000758)
class AWTLControlledDrone : public AWTLDrone
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x04D8   (0x0038)  MISSED
	float                                              m_CurrentYawInputValue;                                     // 0x0510   (0x0004)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0514   (0x0001)  MISSED
	bool                                               m_bShowPreparing;                                           // 0x0515   (0x0001)  
	unsigned char                                      UnknownData02_5[0xC2];                                      // 0x0516   (0x00C2)  MISSED
	UWTLFloatingPawnMovement*                          m_MovementComponent;                                        // 0x05D8   (0x0008)  
	USceneCaptureComponent2D*                          CameraCaptureComponent;                                     // 0x05E0   (0x0008)  
	UFMODAudioComponent*                               Horn;                                                       // 0x05E8   (0x0008)  
	UFMODAudioComponent*                               HitSound;                                                   // 0x05F0   (0x0008)  
	UPointLightComponent*                              Indicator;                                                  // 0x05F8   (0x0008)  
	UParticleSystemComponent*                          Dust;                                                       // 0x0600   (0x0008)  
	UTexture*                                          TextureTarget;                                              // 0x0608   (0x0008)  
	bool                                               ReplicateCameraRotation;                                    // 0x0610   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0611   (0x0003)  MISSED
	float                                              CameraFramerate;                                            // 0x0614   (0x0004)  
	int32_t                                            RenderTargetWidth;                                          // 0x0618   (0x0004)  
	int32_t                                            RenderTargetHeight;                                         // 0x061C   (0x0004)  
	float                                              CameraMaxPitchAngle;                                        // 0x0620   (0x0004)  
	float                                              CameraMinPitchAngle;                                        // 0x0624   (0x0004)  
	float                                              CameraPitchSensivityMultiplier;                             // 0x0628   (0x0004)  
	float                                              CameraYawSensivityMultiplier;                               // 0x062C   (0x0004)  
	float                                              AlternativePitchSensivityMultiplier;                        // 0x0630   (0x0004)  
	float                                              AlternativeYawSensivityMultiplier;                          // 0x0634   (0x0004)  
	float                                              DroneAcceleration;                                          // 0x0638   (0x0004)  
	float                                              m_PreparationTime;                                          // 0x063C   (0x0004)  
	bool                                               UseAlternativeInputMode;                                    // 0x0640   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0641   (0x0003)  MISSED
	float                                              MinMovementRotationSpeedCorrection;                         // 0x0644   (0x0004)  
	float                                              MaxMovementRotationSpeedCorrection;                         // 0x0648   (0x0004)  
	float                                              YawInputDeadZone;                                           // 0x064C   (0x0004)  
	EWTLControlledDroneAbilityType                     MainAbilityType;                                            // 0x0650   (0x0001)  
	EWTLControlledDroneAbilityType                     SecondAbilityType;                                          // 0x0651   (0x0001)  
	TEnumAsByte<ETraceTypeQuery>                       InteractiveTrace;                                           // 0x0652   (0x0001)  
	unsigned char                                      UnknownData05_5[0x1D];                                      // 0x0653   (0x001D)  MISSED
	float                                              MaxDistanceForScaning;                                      // 0x0670   (0x0004)  
	float                                              PauseBetweenAbility1;                                       // 0x0674   (0x0004)  
	unsigned char                                      UnknownData06_5[0x8];                                       // 0x0678   (0x0008)  MISSED
	float                                              EnergyPercentConsumptionPerUseAbility;                      // 0x0680   (0x0004)  
	float                                              PreparationProgressPerSecond;                               // 0x0684   (0x0004)  
	float                                              AlternativeAbilityPreparationProgressPerSecond;             // 0x0688   (0x0004)  
	unsigned char                                      UnknownData07_5[0x4];                                       // 0x068C   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            MainAbilityEffect;                                          // 0x0690   (0x0028)  
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x06B8   (0x0010)  
	bool                                               CanSearchCharacters;                                        // 0x06C8   (0x0001)  
	bool                                               CanSearchMonsters;                                          // 0x06C9   (0x0001)  
	bool                                               CanSearchNPC;                                               // 0x06CA   (0x0001)  
	bool                                               CanSearchPlaceableStuffs;                                   // 0x06CB   (0x0001)  
	bool                                               CanSearchStashes;                                           // 0x06CC   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x06CD   (0x0003)  MISSED
	TArray<UMaterialInterface*>                        AlternativeDroneMaterials;                                  // 0x06D0   (0x0010)  
	unsigned char                                      UnknownData09_5[0x34];                                      // 0x06E0   (0x0034)  MISSED
	float                                              m_JammingIntencity;                                         // 0x0714   (0x0004)  
	unsigned char                                      UnknownData10_6[0x40];                                      // 0x0718   (0x0040)  MISSED


	/// Functions
	// Function /Script/WTL.WTLControlledDrone.Server_UpdateCameraPitch
	void Server_UpdateCameraPitch(float Value);                                                                              // [0x17d3f70] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_ShowPreparingToUseSecondAbility
	void Server_ShowPreparingToUseSecondAbility(bool Value);                                                                 // [0x17d4440] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_ShowPreparingToUseMainAbility
	void Server_ShowPreparingToUseMainAbility(bool Value);                                                                   // [0x17d4550] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_SetDroneRotationYaw
	void Server_SetDroneRotationYaw(float ClientYaw);                                                                        // [0x17d3d00] Final|Net|Native|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_SetBrake
	void Server_SetBrake(bool Value);                                                                                        // [0x17d4790] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_OnUseSecondAbility
	void Server_OnUseSecondAbility(FVector CameraDirection);                                                                 // [0x17d4230] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_OnUseMainAbility
	void Server_OnUseMainAbility(FVector ActualDronePosition);                                                               // [0x17d4660] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_OnUseHorn
	void Server_OnUseHorn();                                                                                                 // [0x17d40f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_OnStartSelfDestruction
	void Server_OnStartSelfDestruction();                                                                                    // [0x17d4070] Final|Net|Native|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_AddYawInput
	void Server_AddYawInput(float Value);                                                                                    // [0x17d48a0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_AddMoveUpInput
	void Server_AddMoveUpInput(float Value);                                                                                 // [0x17d4ba0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_AddMoveRightInput
	void Server_AddMoveRightInput(float Value);                                                                              // [0x17d49a0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.Server_AddMoveForwardInput
	void Server_AddMoveForwardInput(float Value);                                                                            // [0x17d4aa0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledDrone.OnRep_ShowPreparing
	void OnRep_ShowPreparing();                                                                                              // [0x17d3c80] Final|Native|Private 
	// Function /Script/WTL.WTLControlledDrone.NetMulticast_StartUse
	void NetMulticast_StartUse();                                                                                            // [0x17d4ca0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLControlledDrone.NetMulticast_OnUseSecondAbility
	void NetMulticast_OnUseSecondAbility(FVector CameraDirection);                                                           // [0x17d4150] Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults 
	// Function /Script/WTL.WTLControlledDrone.NetMulticast_OnUseMainAbility
	void NetMulticast_OnUseMainAbility(FVector CameraDirection);                                                             // [0x17d4360] Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults 
	// Function /Script/WTL.WTLControlledDrone.NetMulticast_OnUseHorn
	void NetMulticast_OnUseHorn();                                                                                           // [0x17d40d0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLControlledDrone.K2_StartUse
	void K2_StartUse();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledDrone.K2_ShowPreparing
	void K2_ShowPreparing(bool Show);                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledDrone.GetCaptureComponentWorldRotation
	FRotator GetCaptureComponentWorldRotation();                                                                             // [0x17d3c20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLControlledDrone.GetAngleBetweenCameraAndBody
	float GetAngleBetweenCameraAndBody();                                                                                    // [0x17d3c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLControlledDrone.Client_ShowScanningResult
	void Client_ShowScanningResult(TArray<FWTLMarkerMemoryElement> Markers);                                                 // [0x17d3e20] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLControlledDrone.Client_DestroyDrone
	void Client_DestroyDrone();                                                                                              // [0x17d3e00] Final|Net|Native|Event|Private|NetClient 
};

/// Class /Script/WTL.WTLControlledDroneScreen
/// Size: 0x0308 (0x000260 - 0x000568)
class UWTLControlledDroneScreen : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0260   (0x0008)  MISSED
	UTextBlock*                                        tbSpeed;                                                    // 0x0268   (0x0008)  
	UProgressBar*                                      pbScanning;                                                 // 0x0270   (0x0008)  
	UImage*                                            imgSignal1;                                                 // 0x0278   (0x0008)  
	UImage*                                            imgSignal2;                                                 // 0x0280   (0x0008)  
	UImage*                                            imgSignal3;                                                 // 0x0288   (0x0008)  
	UProgressBar*                                      pbHeight;                                                   // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsSwitcher;                                                 // 0x0298   (0x0008)  
	UCanvasPanel*                                      cpWarningMessage;                                           // 0x02A0   (0x0008)  
	UCanvasPanel*                                      cpScanningResult;                                           // 0x02A8   (0x0008)  
	UTextBlock*                                        tbScanningResultNum;                                        // 0x02B0   (0x0008)  
	UProgressBar*                                      pbCooldown;                                                 // 0x02B8   (0x0008)  
	UProgressBar*                                      pbCondition;                                                // 0x02C0   (0x0008)  
	float                                              CameraRotation;                                             // 0x02C8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x02CC   (0x0004)  MISSED
	UTextBlock*                                        tbDistance;                                                 // 0x02D0   (0x0008)  
	UProgressBar*                                      pbEnergy;                                                   // 0x02D8   (0x0008)  
	UTextBlock*                                        tbSerialNumber;                                             // 0x02E0   (0x0008)  
	UImage*                                            imgCircle;                                                  // 0x02E8   (0x0008)  
	UImage*                                            imgArrow;                                                   // 0x02F0   (0x0008)  
	UTextBlock*                                        tbNorth;                                                    // 0x02F8   (0x0008)  
	UTextBlock*                                        tbHeight;                                                   // 0x0300   (0x0008)  
	UTextBlock*                                        tbCooldown;                                                 // 0x0308   (0x0008)  
	UTextBlock*                                        tbCondiiton;                                                // 0x0310   (0x0008)  
	UTextBlock*                                        tbWarningMessage;                                           // 0x0318   (0x0008)  
	UThrobber*                                         thLoadingConf;                                              // 0x0320   (0x0008)  
	UImage*                                            imgConfLogo;                                                // 0x0328   (0x0008)  
	UImage*                                            imgBSLogo;                                                  // 0x0330   (0x0008)  
	UThrobber*                                         thLoadingBS;                                                // 0x0338   (0x0008)  
	UThrobber*                                         thLoadingNone;                                              // 0x0340   (0x0008)  
	UImage*                                            imgOrigin;                                                  // 0x0348   (0x0008)  
	UImage*                                            imgCross;                                                   // 0x0350   (0x0008)  
	UCanvasPanel*                                      cpSatellite;                                                // 0x0358   (0x0008)  
	UImage*                                            imgSatellite;                                               // 0x0360   (0x0008)  
	UImage*                                            imgSatelliteCross;                                          // 0x0368   (0x0008)  
	UCanvasPanel*                                      cpMainCanvasPanel;                                          // 0x0370   (0x0008)  
	UTextBlock*                                        tbDroneLocation;                                            // 0x0378   (0x0008)  
	UCanvasPanel*                                      cpSelfDestruction;                                          // 0x0380   (0x0008)  
	bool                                               bIsThirdPerson;                                             // 0x0388   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0389   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        SuccessfulScanSound;                                        // 0x0390   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        FailedScanSound;                                            // 0x03B8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        WarningSound;                                               // 0x03E0   (0x0028)  
	FSlateColor                                        MainColor;                                                  // 0x0408   (0x0028)  
	TWeakObjectPtr<UClass*>                            TargetWidget;                                               // 0x0430   (0x0028)  
	UTextBlock*                                        tbPongScore1;                                               // 0x0458   (0x0008)  
	UTextBlock*                                        tbPongScore2;                                               // 0x0460   (0x0008)  
	UImage*                                            imgPongPlayer1;                                             // 0x0468   (0x0008)  
	UImage*                                            imgPongPlayer2;                                             // 0x0470   (0x0008)  
	UImage*                                            imgPongBall;                                                // 0x0478   (0x0008)  
	float                                              PlatformSpeed;                                              // 0x0480   (0x0004)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0484   (0x0008)  MISSED
	float                                              BallSpeed;                                                  // 0x048C   (0x0004)  
	TWeakObjectPtr<UFMODEvent*>                        PongBallHitSound;                                           // 0x0490   (0x0028)  
	unsigned char                                      UnknownData04_5[0x8A];                                      // 0x04B8   (0x008A)  MISSED
	bool                                               m_bShowGlitch;                                              // 0x0542   (0x0001)  
	unsigned char                                      UnknownData05_5[0x5];                                       // 0x0543   (0x0005)  MISSED
	float                                              MinGlitchOpacity;                                           // 0x0548   (0x0004)  
	float                                              MaxGlitchOpacity;                                           // 0x054C   (0x0004)  
	bool                                               m_bLineTraceIsBlocked;                                      // 0x0550   (0x0001)  
	bool                                               m_bShowSatelliteCross;                                      // 0x0551   (0x0001)  
	unsigned char                                      UnknownData06_6[0x16];                                      // 0x0552   (0x0016)  MISSED


	/// Functions
	// Function /Script/WTL.WTLControlledDroneScreen.ShowScanningResult
	void ShowScanningResult(int32_t MarkersNum);                                                                             // [0x17d6610] Final|Native|Protected 
	// Function /Script/WTL.WTLControlledDroneScreen.ShowHit
	void ShowHit();                                                                                                          // [0x17d65d0] Final|Native|Protected 
	// Function /Script/WTL.WTLControlledDroneScreen.K2_ShowScanningResult
	void K2_ShowScanningResult();                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledDroneScreen.K2_ShowHit
	void K2_ShowHit(bool Show);                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledDroneScreen.K2_ShowGlitch
	void K2_ShowGlitch(bool Show);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLMonsterPawn
/// Size: 0x0A50 (0x0004C0 - 0x000F10)
class AWTLMonsterPawn : public ACharacter
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x04C0   (0x0018)  MISSED
	AWTLMonsterSpawner*                                m_MonsterSpawner;                                           // 0x04D8   (0x0008)  
	AWTLMonsterPawnAIController*                       m_Controller;                                               // 0x04E0   (0x0008)  
	unsigned char                                      UnknownData01_5[0xC0];                                      // 0x04E8   (0x00C0)  MISSED
	TWeakObjectPtr<UTexture2D*>                        m_RectTexture;                                              // 0x05A8   (0x0028)  
	TWeakObjectPtr<UFont*>                             m_HUDFont;                                                  // 0x05D0   (0x0028)  
	EWTLMonsterMovementMode                            m_MovementMode;                                             // 0x05F8   (0x0001)  
	EWTLMonsterActionType                              m_CurrentAction;                                            // 0x05F9   (0x0001)  
	EWTLMonsterActionType                              m_CurrentAdditiveAction;                                    // 0x05FA   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1D];                                      // 0x05FB   (0x001D)  MISSED
	uint32_t                                           m_ReplicatedStamina;                                        // 0x0618   (0x0004)  
	float                                              m_CurrentLevelOfStun;                                       // 0x061C   (0x0004)  
	int32_t                                            m_ConditionShield;                                          // 0x0620   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x0624   (0x0004)  MISSED
	bool                                               m_WasStunned;                                               // 0x0628   (0x0001)  
	unsigned char                                      UnknownData04_5[0x8F];                                      // 0x0629   (0x008F)  MISSED
	FWTLStorageContent                                 m_PublicStorageContent;                                     // 0x06B8   (0x00A8)  
	FWTLStorageContent                                 m_SummaryStorageContent;                                    // 0x0760   (0x00A8)  
	FWTLStorageContent                                 m_PrivateStorageContent;                                    // 0x0808   (0x00A8)  
	unsigned char                                      UnknownData05_5[0x40];                                      // 0x08B0   (0x0040)  MISSED
	bool                                               m_bIsInStealthMode;                                         // 0x08F0   (0x0001)  
	unsigned char                                      UnknownData06_5[0x9B];                                      // 0x08F1   (0x009B)  MISSED
	FVector                                            m_LocationDead;                                             // 0x098C   (0x000C)  
	unsigned char                                      UnknownData07_5[0xC0];                                      // 0x0998   (0x00C0)  MISSED
	uint32_t                                           m_ReplicatedHealth;                                         // 0x0A58   (0x0004)  
	unsigned char                                      UnknownData08_5[0x10];                                      // 0x0A5C   (0x0010)  MISSED
	float                                              m_Aggression;                                               // 0x0A6C   (0x0004)  
	unsigned char                                      UnknownData09_5[0x4];                                       // 0x0A70   (0x0004)  MISSED
	float                                              m_MultiplierParameters;                                     // 0x0A74   (0x0004)  
	bool                                               IsUseEyesViewPoint;                                         // 0x0A78   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0A79   (0x0003)  MISSED
	FVector                                            EyesViewPointLocation;                                      // 0x0A7C   (0x000C)  
	FRotator                                           EyesViewPointRotation;                                      // 0x0A88   (0x000C)  
	bool                                               bIncreaseDamageWhenChangingTarget;                          // 0x0A94   (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0A95   (0x0003)  MISSED
	float                                              DamageMultiplierIDCT;                                       // 0x0A98   (0x0004)  
	unsigned char                                      UnknownData12_5[0x4];                                       // 0x0A9C   (0x0004)  MISSED
	AActor*                                            OldTargetIDCT;                                              // 0x0AA0   (0x0008)  
	float                                              ActualDamageMultiplierIDCT;                                 // 0x0AA8   (0x0004)  
	bool                                               IsUseRotation;                                              // 0x0AAC   (0x0001)  
	bool                                               IsUseSlope;                                                 // 0x0AAD   (0x0001)  
	bool                                               IsRotationToForwardVector;                                  // 0x0AAE   (0x0001)  
	bool                                               IsUseRoll;                                                  // 0x0AAF   (0x0001)  
	bool                                               IsUseXRotation;                                             // 0x0AB0   (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x0AB1   (0x0003)  MISSED
	FRotator                                           OffsetRotationMesh;                                         // 0x0AB4   (0x000C)  
	bool                                               bIgnoreIsWalkableFloor;                                     // 0x0AC0   (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0AC1   (0x0003)  MISSED
	float                                              SpeedRotationPerSecond;                                     // 0x0AC4   (0x0004)  
	bool                                               isOffsetMeshNetLag;                                         // 0x0AC8   (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x0AC9   (0x0003)  MISSED
	int32_t                                            MonsterID;                                                  // 0x0ACC   (0x0004)  
	int32_t                                            GroupId;                                                    // 0x0AD0   (0x0004)  
	int32_t                                            MyRank;                                                     // 0x0AD4   (0x0004)  
	int32_t                                            CommandPointsPrice;                                         // 0x0AD8   (0x0004)  
	EWTLFaction                                        MyFaction;                                                  // 0x0ADC   (0x0001)  
	bool                                               DetectOnMap;                                                // 0x0ADD   (0x0001)  
	unsigned char                                      UnknownData16_5[0x2];                                       // 0x0ADE   (0x0002)  MISSED
	float                                              NormalActorTickInterval;                                    // 0x0AE0   (0x0004)  
	bool                                               ReactionToEMPWeapon;                                        // 0x0AE4   (0x0001)  
	bool                                               IsCanBeStunned;                                             // 0x0AE5   (0x0001)  
	bool                                               IsCanUseShield;                                             // 0x0AE6   (0x0001)  
	bool                                               CanTakeDamageFromEnvironment;                               // 0x0AE7   (0x0001)  
	float                                              StunRecoveryPerSecond;                                      // 0x0AE8   (0x0004)  
	bool                                               AnimationUpdateRate;                                        // 0x0AEC   (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0AED   (0x0003)  MISSED
	float                                              StaminaRecoveryPerSecond;                                   // 0x0AF0   (0x0004)  
	float                                              DangerLevel;                                                // 0x0AF4   (0x0004)  
	float                                              LifespanAfterDeath;                                         // 0x0AF8   (0x0004)  
	unsigned char                                      UnknownData18_5[0x4];                                       // 0x0AFC   (0x0004)  MISSED
	UPhysicsAsset*                                     MeshPhysicsAsset;                                           // 0x0B00   (0x0008)  
	float                                              KillZ;                                                      // 0x0B08   (0x0004)  
	FVector                                            OffsetFarAttackStart;                                       // 0x0B0C   (0x000C)  
	FVector                                            OffsetFarAttackEnd;                                         // 0x0B18   (0x000C)  
	bool                                               bCanJumpToEnemy;                                            // 0x0B24   (0x0001)  
	unsigned char                                      UnknownData19_5[0x3];                                       // 0x0B25   (0x0003)  MISSED
	float                                              DistanceForJump;                                            // 0x0B28   (0x0004)  
	float                                              PowerJump;                                                  // 0x0B2C   (0x0004)  
	bool                                               bCanBeUseStealth;                                           // 0x0B30   (0x0001)  
	bool                                               bCanMoveInStealth;                                          // 0x0B31   (0x0001)  
	unsigned char                                      UnknownData20_5[0x2];                                       // 0x0B32   (0x0002)  MISSED
	float                                              LoafSpeed;                                                  // 0x0B34   (0x0004)  
	float                                              WalkSpeed;                                                  // 0x0B38   (0x0004)  
	float                                              SprintSpeed;                                                // 0x0B3C   (0x0004)  
	float                                              SprintStaminaCost;                                          // 0x0B40   (0x0004)  
	float                                              NormalAcceleration;                                         // 0x0B44   (0x0004)  
	float                                              FastAcceleration;                                           // 0x0B48   (0x0004)  
	bool                                               bIsWounded;                                                 // 0x0B4C   (0x0001)  
	bool                                               IsInvulnerable;                                             // 0x0B4D   (0x0001)  
	unsigned char                                      UnknownData21_5[0x2];                                       // 0x0B4E   (0x0002)  MISSED
	TMap<EWTLMonsterActionType, float>                 StaminaCosts;                                               // 0x0B50   (0x0050)  
	int32_t                                            AvailableRandomActions;                                     // 0x0BA0   (0x0004)  
	float                                              MaxHeadArmor;                                               // 0x0BA4   (0x0004)  
	float                                              HeadArmor;                                                  // 0x0BA8   (0x0004)  
	float                                              MaxBodyArmor;                                               // 0x0BAC   (0x0004)  
	float                                              BodyArmor;                                                  // 0x0BB0   (0x0004)  
	float                                              MaxArmsArmor;                                               // 0x0BB4   (0x0004)  
	float                                              ArmsArmor;                                                  // 0x0BB8   (0x0004)  
	float                                              MaxLegsArmor;                                               // 0x0BBC   (0x0004)  
	float                                              LegsArmor;                                                  // 0x0BC0   (0x0004)  
	float                                              MaxFeetArmor;                                               // 0x0BC4   (0x0004)  
	float                                              FeetArmor;                                                  // 0x0BC8   (0x0004)  
	unsigned char                                      UnknownData22_5[0x4];                                       // 0x0BCC   (0x0004)  MISSED
	UAnimSequenceBase*                                 MainAttackAnimation;                                        // 0x0BD0   (0x0008)  
	UAnimSequenceBase*                                 SecondaryAttackAnimation;                                   // 0x0BD8   (0x0008)  
	UAnimSequenceBase*                                 DeathAnimation;                                             // 0x0BE0   (0x0008)  
	TArray<UAnimSequenceBase*>                         DeathAnimations;                                            // 0x0BE8   (0x0010)  
	TArray<UAnimSequenceBase*>                         SpecialAbilityAnimations;                                   // 0x0BF8   (0x0010)  
	TArray<UAnimSequenceBase*>                         IdleAnimations;                                             // 0x0C08   (0x0010)  
	TArray<UAnimSequenceBase*>                         CustomActionAnimations;                                     // 0x0C18   (0x0010)  
	TArray<FWTLMonsterActionBase>                      IdleAnimationsBase;                                         // 0x0C28   (0x0010)  
	TMap<EWTLMonsterActionType, FWTLMonsterActionBase> ActionAnimationsBase;                                       // 0x0C38   (0x0050)  
	int32_t                                            UseAnimationFromAnimInstance;                               // 0x0C88   (0x0004)  
	bool                                               bUseServerSideAnimations;                                   // 0x0C8C   (0x0001)  
	bool                                               bUseHUDCrosshair;                                           // 0x0C8D   (0x0001)  
	unsigned char                                      UnknownData23_5[0x2];                                       // 0x0C8E   (0x0002)  MISSED
	FVector2D                                          HUDCrosshairOffset;                                         // 0x0C90   (0x0008)  
	bool                                               bUseListTarget;                                             // 0x0C98   (0x0001)  
	unsigned char                                      UnknownData24_5[0x7];                                       // 0x0C99   (0x0007)  MISSED
	double                                             MaxAgeInListTargets;                                        // 0x0CA0   (0x0008)  
	bool                                               bUseVisibleTarget;                                          // 0x0CA8   (0x0001)  
	unsigned char                                      UnknownData25_5[0x3];                                       // 0x0CA9   (0x0003)  MISSED
	float                                              VisionDistance;                                             // 0x0CAC   (0x0004)  
	float                                              UpdateVisionInterval;                                       // 0x0CB0   (0x0004)  
	float                                              HalfAngleVision;                                            // 0x0CB4   (0x0004)  
	bool                                               bBroadcastDeathToKillers;                                   // 0x0CB8   (0x0001)  
	bool                                               bApplyFlyOffset;                                            // 0x0CB9   (0x0001)  
	EWTLMonsterState                                   m_BlackboardState;                                          // 0x0CBA   (0x0001)  
	EWTLMonsterState                                   RepBlackboardState;                                         // 0x0CBB   (0x0001)  
	unsigned char                                      UnknownData26_5[0x10];                                      // 0x0CBC   (0x0010)  MISSED
	FVector                                            OffsetIdentityPosition;                                     // 0x0CCC   (0x000C)  
	FMulticastInlineDelegate                           OnDeathDelegate;                                            // 0x0CD8   (0x0010)  
	AActor*                                            MonsterOwner;                                               // 0x0CE8   (0x0008)  
	AActor*                                            TargetWaypoint;                                             // 0x0CF0   (0x0008)  
	EWTLMonsterAttachState                             AttachedState;                                              // 0x0CF8   (0x0001)  
	bool                                               IsBurst;                                                    // 0x0CF9   (0x0001)  
	char                                               PercentDamageBurst;                                         // 0x0CFA   (0x0001)  
	unsigned char                                      UnknownData27_5[0x1];                                       // 0x0CFB   (0x0001)  MISSED
	float                                              TakeDamageBurst;                                            // 0x0CFC   (0x0004)  
	char                                               MinLevelBurst;                                              // 0x0D00   (0x0001)  
	char                                               MaxLevelBurst;                                              // 0x0D01   (0x0001)  
	TEnumAsByte<EPhysicalSurface>                      PhysicalSurface;                                            // 0x0D02   (0x0001)  
	unsigned char                                      UnknownData28_5[0x5];                                       // 0x0D03   (0x0005)  MISSED
	TMap<EWTLWeaponType, float>                        WeaponTypeDamageMultipliers;                                // 0x0D08   (0x0050)  
	TMap<EWTLColliderType, float>                      ColliderChancesDamage;                                      // 0x0D58   (0x0050)  
	bool                                               bUseAmmoDamageMultipliers;                                  // 0x0DA8   (0x0001)  
	unsigned char                                      UnknownData29_5[0x7];                                       // 0x0DA9   (0x0007)  MISSED
	TMap<int32_t, float>                               AmmoDamageMultipliers;                                      // 0x0DB0   (0x0050)  
	bool                                               bUseStunFromAmmoID;                                         // 0x0E00   (0x0001)  
	unsigned char                                      UnknownData30_5[0x7];                                       // 0x0E01   (0x0007)  MISSED
	TMap<int32_t, float>                               StunFromAmmo;                                               // 0x0E08   (0x0050)  
	bool                                               bUseTakeDamageInRange;                                      // 0x0E58   (0x0001)  
	unsigned char                                      UnknownData31_5[0x3];                                       // 0x0E59   (0x0003)  MISSED
	float                                              MinTakeDamageInRangeSquare;                                 // 0x0E5C   (0x0004)  
	float                                              MaxTakeDamageInRangeSquare;                                 // 0x0E60   (0x0004)  
	bool                                               CanFarAttack;                                               // 0x0E64   (0x0001)  
	unsigned char                                      UnknownData32_5[0x3];                                       // 0x0E65   (0x0003)  MISSED
	float                                              MinDistanceFarAttack;                                       // 0x0E68   (0x0004)  
	float                                              MaxDistanceFarAttack;                                       // 0x0E6C   (0x0004)  
	bool                                               CanFarAttackToBadCharacter;                                 // 0x0E70   (0x0001)  
	unsigned char                                      UnknownData33_5[0x7];                                       // 0x0E71   (0x0007)  MISSED
	TArray<FWTLItemDropInfo>                           AdditionalLoot;                                             // 0x0E78   (0x0010)  
	float                                              MinCharacterDamageForLoot;                                  // 0x0E88   (0x0004)  
	char                                               Level;                                                      // 0x0E8C   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0E8D   (0x0001)  
	bool                                               UseReputationBonus;                                         // 0x0E8E   (0x0001)  
	bool                                               ReactToPoison;                                              // 0x0E8F   (0x0001)  
	bool                                               EdibleForMonster;                                           // 0x0E90   (0x0001)  
	bool                                               ApplyAnimationsScale;                                       // 0x0E91   (0x0001)  
	unsigned char                                      UnknownData34_5[0x2];                                       // 0x0E92   (0x0002)  MISSED
	int32_t                                            MonsterExperienceDelta;                                     // 0x0E94   (0x0004)  
	float                                              MonsterExperienceTickInterval;                              // 0x0E98   (0x0004)  
	float                                              ExperienceDropCountMultiplierDelta;                         // 0x0E9C   (0x0004)  
	float                                              ExperienceDropChanceMultiplierDelta;                        // 0x0EA0   (0x0004)  
	float                                              ClientToServerMovementUpdateFrequency;                      // 0x0EA4   (0x0004)  
	float                                              ServerToClientsMovementUpdateFrequency;                     // 0x0EA8   (0x0004)  
	unsigned char                                      UnknownData35_5[0x54];                                      // 0x0EAC   (0x0054)  MISSED
	bool                                               IsFollowVisibleEnemy;                                       // 0x0F00   (0x0001)  
	bool                                               IsNearTheVisibleEnemy;                                      // 0x0F01   (0x0001)  
	unsigned char                                      UnknownData36_5[0x6];                                       // 0x0F02   (0x0006)  MISSED
	AWTLCharacter*                                     CurrentVisibleEnemy;                                        // 0x0F08   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLMonsterPawn.TargetEntersSafeZone
	void TargetEntersSafeZone(AWTLCharacter* Target);                                                                        // [0x17941a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SpawnProjectile
	AWTLMonsterProjectile* SpawnProjectile(FTransform SpawnTransform, UClass* ProjectileClass);                              // [0x18588a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetVisibleEnemy
	void SetVisibleEnemy(AActor* NewVisibleEnemy);                                                                           // [0x1856eb0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetUseAccelerationForPaths
	void SetUseAccelerationForPaths(bool Value, EWTLMonsterAcceleration eAcceleration);                                      // [0x1857d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetStealthMode
	void SetStealthMode(bool Value);                                                                                         // [0x1858790] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetStateDeath
	void SetStateDeath(EWTLMonsterStateDeath State);                                                                         // [0x185a480] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetRegenerateHealthPerSecond
	void SetRegenerateHealthPerSecond(float Value);                                                                          // [0x1856f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetReactionToEMPWeapon
	void SetReactionToEMPWeapon(bool Value);                                                                                 // [0x1857880] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetReactionOnElectronicBait
	void SetReactionOnElectronicBait(bool Value);                                                                            // [0x185b340] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetMovementMode
	void SetMovementMode(EWTLMonsterMovementMode Mode);                                                                      // [0x185ab90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetMonsterRank
	void SetMonsterRank(int32_t RankValue);                                                                                  // [0x1857210] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetLootAbility
	void SetLootAbility(bool Value);                                                                                         // [0x1773b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetLifetime
	void SetLifetime(float Delta);                                                                                           // [0x1857c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetLifespanAfterDeath
	void SetLifespanAfterDeath(float Value);                                                                                 // [0x185b270] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetIsInvulnerable
	void SetIsInvulnerable(bool Value);                                                                                      // [0x1773b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetHealth
	void SetHealth(float Value);                                                                                             // [0x185afc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetFaction
	void SetFaction(EWTLFaction MonsterFaction);                                                                             // [0x1857080] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetEventPoint
	void SetEventPoint(AWTLEventPoint* EventPoint);                                                                          // [0x1856b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetCurrentRotation
	void SetCurrentRotation(FRotator Rotation);                                                                              // [0x1858b90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetBlackBoardState
	void SetBlackBoardState(EWTLMonsterState State);                                                                         // [0x1856be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.SetApplyWeaponTypeDamageMultipliers
	void SetApplyWeaponTypeDamageMultipliers(bool Value);                                                                    // [0x1857f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.Server_SetMovementMode
	void Server_SetMovementMode(EWTLMonsterMovementMode Mode);                                                               // [0x185aa90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLMonsterPawn.Server_PossesBackToCharacter_PlayerInput
	void Server_PossesBackToCharacter_PlayerInput();                                                                         // [0x185bb30] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLMonsterPawn.Server_OnClientMove
	void Server_OnClientMove(FVector_NetQuantize Location, float Yaw, float Pitch);                                          // [0x185ac60] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLMonsterPawn.RunIdle
	void RunIdle(float& Duration);                                                                                           // [0x185a550] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.RunAvailableAdditiveFarAttack
	void RunAvailableAdditiveFarAttack(float& Duration);                                                                     // [0x185a630] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.RunAvailableAdditiveAction
	void RunAvailableAdditiveAction(float& Duration);                                                                        // [0x185a710] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.RunAdditiveAction
	void RunAdditiveAction(EWTLMonsterActionType ActionType, float& Duration);                                               // [0x185a7f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.RunAction
	void RunAction(EWTLMonsterActionType ActionType, float& Duration);                                                       // [0x185a940] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.RemoveCharacterFromListTargets
	void RemoveCharacterFromListTargets(AWTLCharacter* Character);                                                           // [0x17941a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.OnTick
	void OnTick(float DeltaTime);                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnStunned
	void OnStunned(bool IsStunned);                                                                                          // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnStealthModeChanged
	void OnStealthModeChanged(bool Value);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnServerDeathBpEvent
	void OnServerDeathBpEvent(FWTLMonsterDeathData DeathData);                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnReplicatedMovement
	void OnReplicatedMovement(float DeltaTime);                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x185baf0] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnRep_Stamina
	void OnRep_Stamina();                                                                                                    // [0x185ba10] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnRep_ShortMovementInfo
	void OnRep_ShortMovementInfo();                                                                                          // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnRep_MovementMode
	void OnRep_MovementMode();                                                                                               // [0x185bb10] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnRep_IsInStealthMode
	void OnRep_IsInStealthMode();                                                                                            // [0x185ba60] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnRep_Health
	void OnRep_Health();                                                                                                     // [0x185ba40] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnMonsterKillOnClient
	void OnMonsterKillOnClient();                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnHealthChanged
	void OnHealthChanged(float Delta);                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnElectronicBait
	void OnElectronicBait(AActor* Target);                                                                                   // [0x1857400] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.OnDeathEvent
	void OnDeathEvent(APawn* Killer);                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnDeathBpEvent
	void OnDeathBpEvent(FWTLMonsterDeathData DeathData);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnCurrentActionChanged
	void OnCurrentActionChanged(EWTLMonsterActionType NewAction, EWTLMonsterActionType PreviousAction);                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnCharacterDestroy
	void OnCharacterDestroy(AWTLCharacter* pCharacter);                                                                      // [0x17941a0] Final|Native|Protected 
	// Function /Script/WTL.WTLMonsterPawn.OnBurst
	void OnBurst(FWTLMonsterDeathData DeathData);                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.NetMulticast_SetBlackboardState
	void NetMulticast_SetBlackboardState(EWTLMonsterState BlackboardState);                                                  // [0x185b420] Net|NetReliableNative|Event|NetMulticast|Protected|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.NetMulticast_PlayAdditiveAction
	void NetMulticast_PlayAdditiveAction(EWTLMonsterActionType ActionType);                                                  // [0x185b4f0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLMonsterPawn.NetMulticast_PlayAction
	void NetMulticast_PlayAction(EWTLMonsterActionType ActionType, char IdleAnimIndex);                                      // [0x185b5c0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLMonsterPawn.NetMulticast_OnDeath
	void NetMulticast_OnDeath(FVector DeathPosition, FVector_NetQuantize ActorRotation, FVector_NetQuantize MeshRotation, FWTLMonsterDeathData DeathData); // [0x185b720] Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults 
	// Function /Script/WTL.WTLMonsterPawn.KillMonster
	void KillMonster(float KillTimeout);                                                                                     // [0x18586d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.K2_SetMonsterSpawner
	void K2_SetMonsterSpawner(AWTLMonsterSpawner* Spawner);                                                                  // [0x1857320] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.K2_SetHighlightState
	void K2_SetHighlightState(bool Value);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnElectronicBait
	void K2_OnElectronicBait(AActor* Target);                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnDeathEvent
	void K2_OnDeathEvent();                                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnConditionShieldChanged
	void K2_OnConditionShieldChanged(int32_t Value);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnClientBulletHit
	void K2_OnClientBulletHit(APawn* DamageInstigator, FHitResult& HitResult, int32_t WeaponID, int32_t AmmoID);             // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnChangeFaction
	void K2_OnChangeFaction(EWTLFaction NewFaction, EWTLFaction OldFaction);                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnBeginPlayFinish
	void K2_OnBeginPlayFinish();                                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_OnApplyDamageToShield
	void K2_OnApplyDamageToShield(APawn* DamageInstigator, FHitResult& HitResult, int32_t WeaponID, int32_t AmmoID, float DamageValue); // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawn.K2_GetMonsterSpawner
	AWTLMonsterSpawner* K2_GetMonsterSpawner();                                                                              // [0x1857300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsWasStunned
	bool IsWasStunned();                                                                                                     // [0x18577e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsVisible
	bool IsVisible();                                                                                                        // [0x1858a70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsReactionToEMPWeapon
	bool IsReactionToEMPWeapon();                                                                                            // [0x1857860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsInAdditiveAction
	bool IsInAdditiveAction();                                                                                               // [0x1858ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsGroundDrone
	bool IsGroundDrone();                                                                                                    // [0x1856e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsFlyingDrone
	bool IsFlyingDrone();                                                                                                    // [0x1856e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsEnoughStaminaForAction
	bool IsEnoughStaminaForAction(EWTLMonsterActionType ActionType);                                                         // [0x1858c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsDrone
	bool IsDrone();                                                                                                          // [0x1856e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsDetectOnMap
	bool IsDetectOnMap();                                                                                                    // [0x18571f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsDead
	bool IsDead();                                                                                                           // [0x1858b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsCharacterInBlackList
	bool IsCharacterInBlackList(AWTLCharacter* Character);                                                                   // [0x18583c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsCanBeLooted
	bool IsCanBeLooted();                                                                                                    // [0x1856db0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.IsApplyWeaponTypeDamageMultipliers
	bool IsApplyWeaponTypeDamageMultipliers();                                                                               // [0x1857f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.IsAlive
	bool IsAlive();                                                                                                          // [0x1858b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.InterruptIdleState
	void InterruptIdleState();                                                                                               // [0x18586a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.InterruptCurrentAction
	void InterruptCurrentAction();                                                                                           // [0x17d6c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.IncrementStamina
	void IncrementStamina(float Value);                                                                                      // [0x185aee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.IncrementShield
	void IncrementShield(int32_t Value);                                                                                     // [0x18575f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.IncrementLevelOfStun
	void IncrementLevelOfStun(float Value);                                                                                  // [0x18576e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.IncrementHealth
	void IncrementHealth(float Value);                                                                                       // [0x185b170] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.GetStateDeath
	EWTLMonsterStateDeath GetStateDeath();                                                                                   // [0x185a460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetStamina
	float GetStamina();                                                                                                      // [0x185aec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetRemotePitch
	float GetRemotePitch();                                                                                                  // [0xe5dd70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetReactionOnSafeZone
	bool GetReactionOnSafeZone();                                                                                            // [0x1858b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetReactionOnElectronicBait
	bool GetReactionOnElectronicBait();                                                                                      // [0x185b250] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.GetOldHealth
	float GetOldHealth();                                                                                                    // [0x1857bc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetMovementMode
	EWTLMonsterMovementMode GetMovementMode();                                                                               // [0x1857c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetMonsterRank
	char GetMonsterRank();                                                                                                   // [0x18572e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetMonsterID
	int32_t GetMonsterID();                                                                                                  // [0x1857ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetMaxHealth
	float GetMaxHealth();                                                                                                    // [0x1857b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetMasterMonsterID
	int32_t GetMasterMonsterID();                                                                                            // [0x1857ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetLifetime
	float GetLifetime();                                                                                                     // [0x1857c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.GetHumanReadableName
	FString GetHumanReadableName();                                                                                          // [0x1857b00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetHealthLost
	float GetHealthLost();                                                                                                   // [0x1857ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetHealth
	float GetHealth();                                                                                                       // [0x1857be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetFaction
	EWTLFaction GetFaction();                                                                                                // [0x1857190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetEventPoint
	AWTLEventPoint* GetEventPoint(EWTLBPActionResult& Result);                                                               // [0x1856a20] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.GetDangerLevelMultiplier
	float GetDangerLevelMultiplier();                                                                                        // [0x18571b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetDangerLevel
	float GetDangerLevel();                                                                                                  // [0x1857a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetCurrentLevelOfStun
	float GetCurrentLevelOfStun();                                                                                           // [0x1857840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetCurrentDamageVisualizationValue
	float GetCurrentDamageVisualizationValue();                                                                              // [0x1857060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetCurrentAction
	EWTLMonsterActionType GetCurrentAction();                                                                                // [0x1857c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetConditionShield
	int32_t GetConditionShield();                                                                                            // [0x1857800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.GetCharacterFromListVisibleTargets
	AWTLCharacter* GetCharacterFromListVisibleTargets(AWTLCharacter* Character, EWTLMonsterFindingVisibleCharacterType Type); // [0x1858040] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.GetCharacterFromListTargets
	AWTLCharacter* GetCharacterFromListTargets(AWTLCharacter* Character, EWTLMonsterFindingCharacterType Type, float InRadius); // [0x18581d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.GetAvailableActions
	TArray<EWTLMonsterActionType> GetAvailableActions(bool bExceptMainAttack);                                               // [0x1857960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.DecrementShield
	void DecrementShield(int32_t Value);                                                                                     // [0x1857500] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.DecrementHealth
	void DecrementHealth(float Value);                                                                                       // [0x185b090] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.ClearListTargets
	void ClearListTargets();                                                                                                 // [0xe77850] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.CheckListVisibleTargets
	void CheckListVisibleTargets();                                                                                          // [0x18581b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.CheckListTargets
	void CheckListTargets();                                                                                                 // [0xe77850] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.CanUseShield
	bool CanUseShield();                                                                                                     // [0x1857820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.CanUseBrains
	bool CanUseBrains();                                                                                                     // [0x1856dd0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.CanUseAdditiveAction
	bool CanUseAdditiveAction();                                                                                             // [0x1858aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.CanBeStunned
	bool CanBeStunned();                                                                                                     // [0x18577c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawn.BranchCanUseBrains
	void BranchCanUseBrains(EWTLBPCheckResult& Result);                                                                      // [0x1856cb0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.ApplyEffectToCharacter
	void ApplyEffectToCharacter(AWTLCharacter* Character, EWTLCharacterEffectType EffectType, float Amount);                 // [0x1858d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.ApplyDamageToCharacter
	float ApplyDamageToCharacter(AWTLCharacter* Character, FName BoneName, UClass* DamageType, EWTLMonsterAttackModificator DamageModificator, float DamageMultiplier, bool ApplyExpectedEffects, EWTLColliderType ColliderType, bool UseArmor); // [0x1859ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.ApplyDamageToAIInterface
	AWTLCharacter* ApplyDamageToAIInterface(AActor* TargetActor, UClass* DamageType, EWTLMonsterAttackModificator DamageModificator, float DamageMultiplier, bool ApplyExpectedEffects, EWTLColliderType ColliderType, bool UseArmor); // [0x1858f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.AddTargetToBlacklist
	void AddTargetToBlacklist(AWTLCharacter* Target, float Delay, float DamageMultiplier);                                   // [0x18584d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawn.AddCharacterToListTargets
	void AddCharacterToListTargets(AWTLCharacter* Character, float Damage);                                                  // [0x178a2b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLControlledMonsterPawn
/// Size: 0x0160 (0x000F10 - 0x001070)
class AWTLControlledMonsterPawn : public AWTLMonsterPawn
{ 
public:
	unsigned char                                      UnknownData00_2[0xB8];                                      // 0x0F10   (0x00B8)  MISSED
	TArray<AActor*>                                    ActorsTakeDamage;                                           // 0x0FC8   (0x0010)  
	EWTLControlledPawnType                             ControlledPawnType;                                         // 0x0FD8   (0x0001)  
	bool                                               ISeeChickenStatus;                                          // 0x0FD9   (0x0001)  
	bool                                               IsReactionOnSafeZone;                                       // 0x0FDA   (0x0001)  
	unsigned char                                      UnknownData01_5[0x5];                                       // 0x0FDB   (0x0005)  MISSED
	USpringArmComponent*                               SpringArm;                                                  // 0x0FE0   (0x0008)  
	TArray<FWTLNotificationForAction>                  CurrentNotificationList;                                    // 0x0FE8   (0x0010)  
	bool                                               IsMoveLocked;                                               // 0x0FF8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0FF9   (0x0003)  MISSED
	int32_t                                            CurrentExp;                                                 // 0x0FFC   (0x0004)  
	int32_t                                            NeededExpForLevelUp;                                        // 0x1000   (0x0004)  
	EWTLControlledActionKeyType                        ActionInProgress;                                           // 0x1004   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x1005   (0x0003)  MISSED
	float                                              DenominatorOfExp;                                           // 0x1008   (0x0004)  
	float                                              BaseExperience;                                             // 0x100C   (0x0004)  
	float                                              BaseTurnRate;                                               // 0x1010   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x1014   (0x0004)  
	bool                                               IsMovementBlocked;                                          // 0x1018   (0x0001)  
	bool                                               IsAiming;                                                   // 0x1019   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x101A   (0x0002)  MISSED
	float                                              AimingTurnRateMultiplier;                                   // 0x101C   (0x0004)  
	TMap<EWTLControlledActionKeyType, FWTLControlledMonsterActionBase> ActionDataList;                             // 0x1020   (0x0050)  


	/// Functions
	// Function /Script/WTL.WTLControlledMonsterPawn.RunActionControlled
	bool RunActionControlled(EWTLControlledActionKeyType ActionType);                                                        // [0x17d76b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLControlledMonsterPawn.PlayAnimationControlled
	void PlayAnimationControlled(EWTLControlledActionKeyType ActionType);                                                    // [0x17d75e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLControlledMonsterPawn.OnAction_PlayerInput
	void OnAction_PlayerInput(EWTLControlledActionKeyType ActionType);                                                       // [0x17d72f0] Final|Native|Public  
	// Function /Script/WTL.WTLControlledMonsterPawn.NetMulticast_OnDeathControlled
	void NetMulticast_OnDeathControlled(FVector DeathPosition, FVector_NetQuantize ActorRotation, FVector_NetQuantize MeshRotation, FWTLMonsterDeathData DeathData); // [0x17d7000] Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults 
	// Function /Script/WTL.WTLControlledMonsterPawn.K2_OnLevelUp
	void K2_OnLevelUp(int32_t NewLevel);                                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledMonsterPawn.K2_OnActionTriggerNotification
	void K2_OnActionTriggerNotification(FName ActionName);                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledMonsterPawn.K2_OnAction_PlayerInput
	void K2_OnAction_PlayerInput(EWTLControlledActionKeyType ActionType);                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledMonsterPawn.K2_On_DrawToCanvas
	void K2_On_DrawToCanvas(UCanvas* Canvas, float ScaleUI, float DeltaTime, bool bIsHUDHidden);                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLControlledMonsterPawn.IsRecoveryActionCompleted
	bool IsRecoveryActionCompleted(EWTLControlledActionKeyType ActionType);                                                  // [0x17d6f20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLControlledMonsterPawn.InterruptAction
	void InterruptAction();                                                                                                  // [0x17d6c00] Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLControlledMonsterPawn.GetCurrentCooldown
	float GetCurrentCooldown(EWTLControlledActionKeyType ActionType);                                                        // [0x17d6c20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLControlledMonsterPawn.GetActionInProgress
	EWTLControlledActionKeyType GetActionInProgress();                                                                       // [0x17d7e50] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLControlledMonsterPawn.Client_SetActionDelay
	void Client_SetActionDelay(float Value);                                                                                 // [0x17d6b30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLControlledMonsterPawn.Client_OnNightvisionStateChanged
	void Client_OnNightvisionStateChanged(bool bIsEnabled);                                                                  // [0x17a9c80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLControlledMonsterPawn.CanRunAction
	bool CanRunAction(EWTLControlledActionKeyType ActionType, bool CheckAnimation);                                          // [0x17d6db0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLControlledMonsterPawn.C2S_OnAction
	void C2S_OnAction(char Number);                                                                                          // [0x17d7d50] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLControlledMonsterPawn.ApplyDamageInCone
	void ApplyDamageInCone(UClass* DamageType, float StuffDamageMultiplier, float DamageMultiplier, bool ApplyExpectedEffects, float AttackRadius, float HalfAnglePitch, float HalfAngleYaw, bool DamageAll, EWTLColliderType ColliderType, bool UseArmor); // [0x17d7790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLControlledMonsterSpawnPoint
/// Size: 0x0000 (0x000220 - 0x000220)
class AWTLControlledMonsterSpawnPoint : public AActor
{ 
public:
};

/// Class /Script/WTL.WTLCoreHackingPreviewRoom
/// Size: 0x0040 (0x000220 - 0x000260)
class AWTLCoreHackingPreviewRoom : public AActor
{ 
public:
	USceneComponent*                                   Root;                                                       // 0x0220   (0x0008)  
	UWTLCaptureComponent2D*                            CoreCaptureComponent;                                       // 0x0228   (0x0008)  
	USkeletalMeshComponent*                            PreviewMesh;                                                // 0x0230   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0238   (0x0008)  MISSED
	UTextureRenderTarget2D*                            m_ViewTargetTexture;                                        // 0x0240   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0248   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.OnTestButtonPressed
	void OnTestButtonPressed();                                                                                              // [0x17d8660] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.OnSwitchButtonPressed
	void OnSwitchButtonPressed(char Index);                                                                                  // [0x17d8750] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.OnHackingResult
	void OnHackingResult(char Result);                                                                                       // [0x17d8890] Final|Native|Private 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.OnCaptureEnded
	void OnCaptureEnded();                                                                                                   // [0x17d8870] Final|Native|Public  
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_UpdateSwitchState
	void K2_UpdateSwitchState(char Index, bool Value);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_OnTestButtonPressed
	void K2_OnTestButtonPressed();                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_OnLineTrace
	void K2_OnLineTrace(FVector Position);                                                                                   // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_OnComponentPressed
	void K2_OnComponentPressed(UPrimitiveComponent* HitComponent);                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_IsSuccess
	void K2_IsSuccess(bool Value);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_HightlightStateIndicator
	void K2_HightlightStateIndicator();                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_HighlightIndicator
	void K2_HighlightIndicator(char Index, bool Value);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCoreHackingPreviewRoom.K2_GetViewTexture2D
	UTexture2D* K2_GetViewTexture2D(UTexture2D* InTexture);                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLCraftObject
/// Size: 0x0108 (0x000220 - 0x000328)
class AWTLCraftObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0xE0];                                      // 0x0220   (0x00E0)  MISSED
	bool                                               m_IsActive;                                                 // 0x0300   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0301   (0x0003)  MISSED
	int32_t                                            ID;                                                         // 0x0304   (0x0004)  
	EWTLCraftType                                      CraftType;                                                  // 0x0308   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0309   (0x0007)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0310   (0x0008)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0318   (0x0010)  MISSED


	/// Functions
	// Function /Script/WTL.WTLCraftObject.SetIsActive
	void SetIsActive(bool Value);                                                                                            // [0x1773b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLCraftObject.OnRep_IsActive
	void OnRep_IsActive();                                                                                                   // [0x17d8c60] Final|Native|Protected 
	// Function /Script/WTL.WTLCraftObject.OnIsActiveChanged
	void OnIsActiveChanged(bool IsActive);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCraftObject.GetIsActive
	bool GetIsActive();                                                                                                      // [0x17d8c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLCraftObject.BPStartCraftProcess
	void BPStartCraftProcess(float CraftTime);                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLCraftObject.BPCraftProcessCompleted
	void BPCraftProcessCompleted();                                                                                          // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLCustomizationSystem
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLCustomizationSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLDamageSystem
/// Size: 0x0018 (0x000028 - 0x000040)
class UWTLDamageSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLDatabaseAdapter
/// Size: 0x00F0 (0x000028 - 0x000118)
class UWTLDatabaseAdapter : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xF0];                                      // 0x0028   (0x00F0)  MISSED
};

/// Class /Script/WTL.WTLDataTable
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UWTLDataTable : public UDataTable
{ 
public:
};

/// Class /Script/WTL.WTLDaytimeBasedFMODAmbientSound
/// Size: 0x0010 (0x000228 - 0x000238)
class AWTLDaytimeBasedFMODAmbientSound : public AFMODAmbientSound
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0228   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLDebugHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLDebugHelper : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLDeminingActivity
/// Size: 0x0118 (0x000250 - 0x000368)
class AWTLDeminingActivity : public AWTLActionGameplayActivity
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0250   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            DeminingWidgetClass;                                        // 0x0258   (0x0028)  
	TArray<FColor>                                     WireColors;                                                 // 0x0280   (0x0010)  
	TArray<FWTLDeminingCombinations>                   m_CombinationsMap;                                          // 0x0290   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x02A0   (0x0010)  MISSED
	TArray<char>                                       m_WiresList;                                                // 0x02B0   (0x0010)  
	unsigned char                                      UnknownData02_5[0x14];                                      // 0x02C0   (0x0014)  MISSED
	float                                              m_RemainingTime;                                            // 0x02D4   (0x0004)  
	unsigned char                                      UnknownData03_5[0x28];                                      // 0x02D8   (0x0028)  MISSED
	AActor*                                            m_ExplosionActor;                                           // 0x0300   (0x0008)  
	unsigned char                                      UnknownData04_6[0x60];                                      // 0x0308   (0x0060)  MISSED


	/// Functions
	// Function /Script/WTL.WTLDeminingActivity.Server_OnCutWire
	void Server_OnCutWire(int32_t Index);                                                                                    // [0x17d9720] Net|Native|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLDeminingActivity.OnRep_WiresList
	void OnRep_WiresList();                                                                                                  // [0x17d9540] Final|Native|Protected 
	// Function /Script/WTL.WTLDeminingActivity.OnRep_RemainingTimer
	void OnRep_RemainingTimer();                                                                                             // [0x17d9500] Final|Native|Protected 
	// Function /Script/WTL.WTLDeminingActivity.OnCharacterDied
	void OnCharacterDied(AWTLCharacter* Character);                                                                          // [0x17941a0] Final|Native|Protected 
	// Function /Script/WTL.WTLDeminingActivity.Client_OnWireCutted
	void Client_OnWireCutted(int32_t Index);                                                                                 // [0x17d9640] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/WTL.WTLDynamicReplicatedActor
/// Size: 0x0000 (0x000220 - 0x000220)
class AWTLDynamicReplicatedActor : public AActor
{ 
public:
};

/// Class /Script/WTL.WTLThrowingDeviceProjectile
/// Size: 0x0070 (0x000220 - 0x000290)
class AWTLThrowingDeviceProjectile : public AWTLDynamicReplicatedActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	bool                                               bCanBeTeleportedByAnomaly;                                  // 0x0228   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0229   (0x0007)  MISSED
	bool                                               m_bIsActive;                                                // 0x0230   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0231   (0x0003)  MISSED
	float                                              m_ReplicatedInitialSpeed;                                   // 0x0234   (0x0004)  
	FVector                                            m_ThrowVector;                                              // 0x0238   (0x000C)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x0244   (0x0004)  MISSED
	UStaticMeshComponent*                              MeshComp;                                                   // 0x0248   (0x0008)  
	UWTLProjectileMovementComponent*                   m_MovementComponent;                                        // 0x0250   (0x0008)  
	bool                                               ActivateAfterHit;                                           // 0x0258   (0x0001)  
	bool                                               CanBeActivatedUnderWater;                                   // 0x0259   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x025A   (0x0002)  MISSED
	float                                              MinExplosionDelay;                                          // 0x025C   (0x0004)  
	float                                              MaxExplosionDelay;                                          // 0x0260   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x0264   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            WaterHit;                                                   // 0x0268   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLThrowingDeviceProjectile.OnRep_ReplicatedInitialSpeed
	void OnRep_ReplicatedInitialSpeed();                                                                                     // [0x1930370] Final|Native|Protected 
	// Function /Script/WTL.WTLThrowingDeviceProjectile.OnRep_IsActive
	void OnRep_IsActive();                                                                                                   // [0x1930310] Final|Native|Protected 
	// Function /Script/WTL.WTLThrowingDeviceProjectile.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x192ffe0] Native|Public|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLThrowingDeviceProjectile.IsUnderWater
	bool IsUnderWater();                                                                                                     // [0x192ffc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLThrowingDeviceProjectile.BPActivate
	void BPActivate();                                                                                                       // [0x1ad0090] Event|Protected|BlueprintEvent 
};

/// Class /Script/WTL.WTLDeminingGrenadeProjectile
/// Size: 0x0050 (0x000290 - 0x0002E0)
class AWTLDeminingGrenadeProjectile : public AWTLThrowingDeviceProjectile
{ 
public:
	float                                              Radius;                                                     // 0x0290   (0x0004)  
	float                                              TriggerSphereRadius;                                        // 0x0294   (0x0004)  
	bool                                               ShowDebugInfo;                                              // 0x0298   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0299   (0x0007)  MISSED
	USphereComponent*                                  TriggerVolume;                                              // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x38];                                      // 0x02A8   (0x0038)  MISSED


	/// Functions
	// Function /Script/WTL.WTLDeminingGrenadeProjectile.OnSphereBeginOverlap
	void OnSphereBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17da0c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/WTL.WTLItemManipulationRoom
/// Size: 0x0058 (0x000220 - 0x000278)
class AWTLItemManipulationRoom : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	USceneComponent*                                   Root;                                                       // 0x0230   (0x0008)  
	UWTLCaptureComponent2D*                            CaptureComponent;                                           // 0x0238   (0x0008)  
	USkeletalMeshComponent*                            PreviewMesh;                                                // 0x0240   (0x0008)  
	bool                                               LockHorizontalRotation;                                     // 0x0248   (0x0001)  
	bool                                               LockVerticalRotation;                                       // 0x0249   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2E];                                      // 0x024A   (0x002E)  MISSED


	/// Functions
	// Function /Script/WTL.WTLItemManipulationRoom.K2_HitLocation
	void K2_HitLocation(FVector HitLocation);                                                                                // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
};

/// Class /Script/WTL.WTLDeminingPreviewRoom
/// Size: 0x00F8 (0x000278 - 0x000370)
class AWTLDeminingPreviewRoom : public AWTLItemManipulationRoom
{ 
public:
	UStaticMeshComponent*                              WireMesh1;                                                  // 0x0278   (0x0008)  
	UStaticMeshComponent*                              WireMesh2;                                                  // 0x0280   (0x0008)  
	UStaticMeshComponent*                              WireMesh3;                                                  // 0x0288   (0x0008)  
	UStaticMeshComponent*                              WireMesh4;                                                  // 0x0290   (0x0008)  
	UStaticMeshComponent*                              CuttedWireMesh1;                                            // 0x0298   (0x0008)  
	UStaticMeshComponent*                              CuttedWireMesh2;                                            // 0x02A0   (0x0008)  
	UStaticMeshComponent*                              CuttedWireMesh3;                                            // 0x02A8   (0x0008)  
	UStaticMeshComponent*                              CuttedWireMesh4;                                            // 0x02B0   (0x0008)  
	UWidgetComponent*                                  TimerWidgetComponent;                                       // 0x02B8   (0x0008)  
	UMaterialInterface*                                TargetTextureMaterial;                                      // 0x02C0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        CutSound;                                                   // 0x02C8   (0x0028)  
	int32_t                                            ToolID;                                                     // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x7C];                                      // 0x02F4   (0x007C)  MISSED


	/// Functions
	// Function /Script/WTL.WTLDeminingPreviewRoom.OnWireCutted
	void OnWireCutted(int32_t Index);                                                                                        // [0x17dab30] Final|Native|Private 
	// Function /Script/WTL.WTLDeminingPreviewRoom.OnReminingTimerChanged
	void OnReminingTimerChanged(float Timer);                                                                                // [0x17da910] Final|Native|Private 
	// Function /Script/WTL.WTLDeminingPreviewRoom.OnDeminingWiresListChanged
	void OnDeminingWiresListChanged(TArray<char> List);                                                                      // [0x17daa00] Final|Native|Private 
	// Function /Script/WTL.WTLDeminingPreviewRoom.K2_RemainingTimerChanged
	void K2_RemainingTimerChanged(float Value);                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDeminingPreviewRoom.K2_CombinationSelected
	void K2_CombinationSelected(TArray<char>& Combination);                                                                  // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLDeminingPreviewRoom.GetRemainingTime
	float GetRemainingTime();                                                                                                // [0x17da8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDeminingPreviewRoom.GetOwnerName
	FString GetOwnerName();                                                                                                  // [0x17da760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDeminingPreviewRoom.GetOwnerFaction
	EWTLFaction GetOwnerFaction();                                                                                           // [0x17da6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLDetector
/// Size: 0x00A0 (0x000458 - 0x0004F8)
class AWTLDetector : public AWTLStuff
{ 
public:
	float                                              Distance;                                                   // 0x0458   (0x0004)  
	float                                              AliveCreaturesSearchDistance;                               // 0x045C   (0x0004)  
	float                                              PlaceableStuffsSearchDistance;                              // 0x0460   (0x0004)  
	float                                              MinDistance;                                                // 0x0464   (0x0004)  
	float                                              MaxAngle;                                                   // 0x0468   (0x0004)  
	float                                              Time;                                                       // 0x046C   (0x0004)  
	float                                              EnergyPerUsePercentInMinesMode;                             // 0x0470   (0x0004)  
	float                                              EnergyPerUsePercentInAliveCreaturesMode;                    // 0x0474   (0x0004)  
	float                                              EnergyPerUsePercentInStuffMode;                             // 0x0478   (0x0004)  
	EWTLDetectorMode                                   m_CurrentMode;                                              // 0x047C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x047D   (0x0003)  MISSED
	float                                              m_DisabledTime;                                             // 0x0480   (0x0004)  
	uint32_t                                           m_ShakingAnimationIndex;                                    // 0x0484   (0x0004)  
	unsigned char                                      UnknownData01_5[0x1C];                                      // 0x0488   (0x001C)  MISSED
	bool                                               m_bDisabled;                                                // 0x04A4   (0x0001)  
	bool                                               m_bIsActive;                                                // 0x04A5   (0x0001)  
	unsigned char                                      UnknownData02_5[0x22];                                      // 0x04A6   (0x0022)  MISSED
	UFMODAudioComponent*                               AudioComponent;                                             // 0x04C8   (0x0008)  
	FItemAnimationSet                                  SetModeSequenceSet;                                         // 0x04D0   (0x0018)  
	TArray<FItemAnimationSet>                          DeviceShakingSequenceSetsList;                              // 0x04E8   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLDetector.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17db590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLDetector.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17db5c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLDetector.Server_SetUsingModeIndex
	void Server_SetUsingModeIndex(char UsingModeIndex);                                                                      // [0x17db020] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLDetector.Server_SearchPlaceableStuffs
	void Server_SearchPlaceableStuffs();                                                                                     // [0x17db1a0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLDetector.Server_SearchPawns
	void Server_SearchPawns();                                                                                               // [0x17db1d0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLDetector.Server_SearchMines
	void Server_SearchMines();                                                                                               // [0x17db200] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLDetector.OnRep_IsActive
	void OnRep_IsActive();                                                                                                   // [0x17db760] Final|Native|Private 
	// Function /Script/WTL.WTLDetector.OnRep_Disable
	void OnRep_Disable();                                                                                                    // [0x17db0e0] Final|Native|Private 
	// Function /Script/WTL.WTLDetector.OnRep_CurrentMode
	void OnRep_CurrentMode();                                                                                                // [0x17db5f0] Final|Native|Private 
	// Function /Script/WTL.WTLDetector.NetMulticast_StopUse
	void NetMulticast_StopUse();                                                                                             // [0x17db350] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLDetector.NetMulticast_SetMode
	void NetMulticast_SetMode();                                                                                             // [0x17daf30] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLDetector.NetMulticast_OnUse
	void NetMulticast_OnUse(EWTLUsableItemUseType UseType);                                                                  // [0x17db420] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLDetector.NetMulticast_DeviceShaking
	void NetMulticast_DeviceShaking();                                                                                       // [0x17db230] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLDetector.GetEnergyValue
	float GetEnergyValue();                                                                                                  // [0x17dae20] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLDetector.GetCurrentMode
	EWTLDetectorMode GetCurrentMode();                                                                                       // [0x17dae00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDetector.GetActorsOnDisplayCount
	int32_t GetActorsOnDisplayCount();                                                                                       // [0x17dade0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDetector.Client_SetMode
	void Client_SetMode();                                                                                                   // [0x17dae70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLDetector.Client_SearchPlaceableStuffs
	void Client_SearchPlaceableStuffs();                                                                                     // [0x17db140] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLDetector.Client_SearchPawns
	void Client_SearchPawns();                                                                                               // [0x17db160] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLDetector.Client_SearchMines
	void Client_SearchMines();                                                                                               // [0x17db180] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLDetector.BPUpdateInformationOnDisplay
	void BPUpdateInformationOnDisplay();                                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDetector.BPStartUse
	void BPStartUse();                                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDetector.BPShowInterference
	void BPShowInterference(float InterferenceTime);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDetector.BPFinishUse
	void BPFinishUse();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDetector.BPDrawPlaceableStuffOnDisplay
	void BPDrawPlaceableStuffOnDisplay(AActor* VisibleActor, bool IsFriendly);                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDetector.BPDrawPawnOnDisplay
	void BPDrawPawnOnDisplay(AActor* VisibleActor, bool IsHuman, bool IsFriendly);                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLDetector.BPDrawMineOnDisplay
	void BPDrawMineOnDisplay(AActor* VisibleActor, bool IsFriendly);                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLDetonator
/// Size: 0x0010 (0x000458 - 0x000468)
class AWTLDetonator : public AWTLStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0458   (0x0008)  MISSED
	bool                                               UnequipNewType;                                             // 0x0460   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0461   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLDetonator.NetMulticast_StartUse
	void NetMulticast_StartUse();                                                                                            // [0x17dc270] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLDetonator.K2_OnOpened
	void K2_OnOpened();                                                                                                      // [0x1ad0090] Event|Protected|BlueprintEvent 
};

/// Class /Script/WTL.WTLDoor
/// Size: 0x0028 (0x000260 - 0x000288)
class AWTLDoor : public AWTLInteractiveObject
{ 
public:
	bool                                               m_bIsOpened;                                                // 0x0260   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0261   (0x0007)  MISSED
	UStaticMeshComponent*                              m_StaticMeshComponent;                                      // 0x0268   (0x0008)  
	USkeletalMeshComponent*                            m_SkeletalMeshComponent;                                    // 0x0270   (0x0008)  
	UAnimMontage*                                      m_DoorOpenAnimation;                                        // 0x0278   (0x0008)  
	UAnimMontage*                                      m_DoorCloseAnimation;                                       // 0x0280   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLDoor.OnRep_bIsOpened
	void OnRep_bIsOpened();                                                                                                  // [0x17dc360] Final|Native|Public  
};

/// Class /Script/WTL.WTLDroneDisplay
/// Size: 0x0000 (0x0004D8 - 0x0004D8)
class AWTLDroneDisplay : public AWTLCameraDisplay
{ 
public:
};

/// Class /Script/WTL.WTLDroneTargetWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLDroneTargetWidget : public UUserWidget
{ 
public:
	UImage*                                            imgTarget;                                                  // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLLevelScriptActor
/// Size: 0x0428 (0x000228 - 0x000650)
class AWTLLevelScriptActor : public ALevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x248];                                     // 0x0228   (0x0248)  MISSED
	float                                              IdentificationDistance;                                     // 0x0470   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0474   (0x0004)  MISSED
	float                                              DayTime;                                                    // 0x0478   (0x0004)  
	bool                                               bConnectToGameServer;                                       // 0x047C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x047D   (0x0003)  MISSED
	int32_t                                            LocationID;                                                 // 0x0480   (0x0004)  
	EWTLLocationType                                   LocationType;                                               // 0x0484   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0485   (0x0003)  MISSED
	int32_t                                            DefaultSafeZoneID;                                          // 0x0488   (0x0004)  
	bool                                               BarterAllowed;                                              // 0x048C   (0x0001)  
	bool                                               PVPAllowed;                                                 // 0x048D   (0x0001)  
	bool                                               FlashLightAllowed;                                          // 0x048E   (0x0001)  
	bool                                               VehicleAllowed;                                             // 0x048F   (0x0001)  
	bool                                               DronesAllowed;                                              // 0x0490   (0x0001)  
	bool                                               AllowOnlyFactionMembers;                                    // 0x0491   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x0492   (0x0002)  MISSED
	int32_t                                            LocationIDToMoveForNonFactionMembers;                       // 0x0494   (0x0004)  
	int32_t                                            PortalIDToMoveForNonFactionMembers;                         // 0x0498   (0x0004)  
	bool                                               m_bCanUseAlternativeFootstepSound;                          // 0x049C   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x049D   (0x0003)  MISSED
	float                                              CurrentTime;                                                // 0x04A0   (0x0004)  
	unsigned char                                      UnknownData06_5[0x1C];                                      // 0x04A4   (0x001C)  MISSED
	TWeakObjectPtr<UClass*>                            ItemPreviewClass;                                           // 0x04C0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterPreviewRoomClass;                                  // 0x04E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CoreHackingPreviewRoomClass;                                // 0x0510   (0x0028)  
	FVector                                            ItemPreviewPosition;                                        // 0x0538   (0x000C)  
	FVector                                            CharacterPreviewRoomPosition;                               // 0x0544   (0x000C)  
	FVector                                            CorePreviewRoomPosition;                                    // 0x0550   (0x000C)  
	float                                              AmbientMusicVolume;                                         // 0x055C   (0x0004)  
	float                                              AmbientMusicRandomStartMin;                                 // 0x0560   (0x0004)  
	float                                              AmbientMusicRandomStartMax;                                 // 0x0564   (0x0004)  
	TArray<FWTLLocationSpawnPickup>                    SpawnPickups;                                               // 0x0568   (0x0010)  
	TArray<FVector>                                    AirDropSpawnPoints;                                         // 0x0578   (0x0010)  
	TArray<int32_t>                                    AirDropIDs;                                                 // 0x0588   (0x0010)  
	float                                              AirDropTimeoutMin;                                          // 0x0598   (0x0004)  
	float                                              AirDropTimeoutMax;                                          // 0x059C   (0x0004)  
	float                                              AirDropMinDistanceBetweenSpawn;                             // 0x05A0   (0x0004)  
	float                                              AirDropLifespanMin;                                         // 0x05A4   (0x0004)  
	float                                              AirDropLifespanMax;                                         // 0x05A8   (0x0004)  
	unsigned char                                      UnknownData07_5[0x4];                                       // 0x05AC   (0x0004)  MISSED
	TArray<FVector>                                    ProjectXSpawnPoints;                                        // 0x05B0   (0x0010)  
	UClass*                                            ProjectXEventPointClass;                                    // 0x05C0   (0x0008)  
	uint64_t                                           MaxNumberOfMinesPerCharacter;                               // 0x05C8   (0x0008)  
	uint64_t                                           MaxNumberOfStickyMinesPerCharacter;                         // 0x05D0   (0x0008)  
	unsigned char                                      UnknownData08_5[0x10];                                      // 0x05D8   (0x0010)  MISSED
	UWTLGameInstance*                                  GameInstance;                                               // 0x05E8   (0x0008)  
	UCurveFloat*                                       DaySoundsVolumeCurve;                                       // 0x05F0   (0x0008)  
	UCurveFloat*                                       NightSoundsVolumeCurve;                                     // 0x05F8   (0x0008)  
	APostProcessVolume*                                PostProcessVolume;                                          // 0x0600   (0x0008)  
	UCurveFloat*                                       AutoExposureBiasCurve;                                      // 0x0608   (0x0008)  
	float                                              FlashlightIntensityMultiplier;                              // 0x0610   (0x0004)  
	unsigned char                                      UnknownData09_5[0x4];                                       // 0x0614   (0x0004)  MISSED
	TArray<FWTLConsoleScript>                          ConsoleScripts;                                             // 0x0618   (0x0010)  
	FString                                            StartUpScript;                                              // 0x0628   (0x0010)  
	float                                              StartUpScriptDelay;                                         // 0x0638   (0x0004)  
	float                                              DebugStartTime;                                             // 0x063C   (0x0004)  
	int32_t                                            DebugTimeScale;                                             // 0x0640   (0x0004)  
	bool                                               UseFixedTime;                                               // 0x0644   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0645   (0x0003)  MISSED
	float                                              FixedTime;                                                  // 0x0648   (0x0004)  
	int32_t                                            MaxSimultaneousEventsCount;                                 // 0x064C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLLevelScriptActor.NetMulticastReliable_OnMeleeHit
	void NetMulticastReliable_OnMeleeHit(UPrimitiveComponent* HitComponent, FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, TEnumAsByte<EPhysicalSurface> HitSurface, float Scale); // [0x18407b0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLLevelScriptActor.NetMulticast_OnCharacterTeleported
	void NetMulticast_OnCharacterTeleported(AWTLCharacter* Character);                                                       // [0xba4590] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLLevelScriptActor.IsNightVolumetric
	bool IsNightVolumetric();                                                                                                // [0x18406b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLLevelScriptActor.IsNight
	bool IsNight();                                                                                                          // [0x1840730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLLevelScriptActor.IsDayVolumetric
	bool IsDayVolumetric();                                                                                                  // [0x18406f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLLevelScriptActor.IsDay
	bool IsDay();                                                                                                            // [0x1840770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLLevelScriptActor.FindSafeZone
	AWTLSafeZone* FindSafeZone(int32_t SafeZoneID);                                                                          // [0x18405c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLLevelScriptActor.FindCraftObject
	AWTLCraftObject* FindCraftObject(int32_t CraftObjectID);                                                                 // [0x18404d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLLocationLevelScriptActor
/// Size: 0x0060 (0x000650 - 0x0006B0)
class AWTLLocationLevelScriptActor : public AWTLLevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0650   (0x0028)  MISSED
	EWTLItemType                                       FindSpawnItemType;                                          // 0x0678   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0679   (0x0003)  MISSED
	int32_t                                            FindSpawnItemTypeID;                                        // 0x067C   (0x0004)  
	unsigned char                                      UnknownData02_5[0x28];                                      // 0x0680   (0x0028)  MISSED
	UWTLNetworkController*                             NetworkController;                                          // 0x06A8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLLocationLevelScriptActor.OnStreamingLevelsLoaded
	void OnStreamingLevelsLoaded();                                                                                          // [0x18423e0] Final|Native|Public  
	// Function /Script/WTL.WTLLocationLevelScriptActor.OnLevelLoaded
	void OnLevelLoaded();                                                                                                    // [0x1842400] Final|Native|Private 
	// Function /Script/WTL.WTLLocationLevelScriptActor.OnDedicatedServerMessage
	void OnDedicatedServerMessage(FString MessageType, FString MessageData);                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnScriptedEventReceivedEvent
	void NetworkControllerOnScriptedEventReceivedEvent(FWTLEvent& Event);                                                    // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnGetWorldTimeResponse
	void NetworkControllerOnGetWorldTimeResponse(FWTLResponse& Response);                                                    // [0x18425e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnDisconnected
	void NetworkControllerOnDisconnected();                                                                                  // [0x18427b0] Final|Native|Private 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnDedicatedServerMessageEvent
	void NetworkControllerOnDedicatedServerMessageEvent(FWTLEvent& Event);                                                   // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnDedicatedServerAuthorizationResponse
	void NetworkControllerOnDedicatedServerAuthorizationResponse(FWTLResponse& Response);                                    // [0x18426e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnConnectError
	void NetworkControllerOnConnectError(FString ErrorInfo);                                                                 // [0x18427d0] Final|Native|Private 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnConnected
	void NetworkControllerOnConnected();                                                                                     // [0x18428e0] Final|Native|Private 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnCharacterLeaveLocationEvent
	void NetworkControllerOnCharacterLeaveLocationEvent(FWTLEvent& Event);                                                   // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLLocationLevelScriptActor.NetworkControllerOnCharacterEntersLocationEvent
	void NetworkControllerOnCharacterEntersLocationEvent(FWTLEvent& Event);                                                  // [0x1842430] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLLocationLevelScriptActor.IsAllLevelsLoaded
	bool IsAllLevelsLoaded();                                                                                                // [0x18423c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLDynamicSkyLevelScriptActor
/// Size: 0x0210 (0x0006B0 - 0x0008C0)
class AWTLDynamicSkyLevelScriptActor : public AWTLLocationLevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x06B0   (0x0078)  MISSED
	float                                              SkyDayTime;                                                 // 0x0728   (0x0004)  
	float                                              SkyDayTimeOffset;                                           // 0x072C   (0x0004)  
	float                                              m_DesiredWindSpeed;                                         // 0x0730   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0734   (0x0004)  MISSED
	float                                              m_DesiredWindActiveTime;                                    // 0x0738   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x073C   (0x0004)  MISSED
	float                                              m_DesiredWindAngle;                                         // 0x0740   (0x0004)  
	float                                              m_WindSpeedChangeSpeed;                                     // 0x0744   (0x0004)  
	float                                              m_WindAngleChangeSpeed;                                     // 0x0748   (0x0004)  
	bool                                               bCanWeatherChangeOnThisLocation;                            // 0x074C   (0x0001)  
	bool                                               bCanUseRainOnThisLocation;                                  // 0x074D   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x074E   (0x0002)  MISSED
	float                                              RainDensityScaleMultiplier;                                 // 0x0750   (0x0004)  
	unsigned char                                      UnknownData04_5[0x34];                                      // 0x0754   (0x0034)  MISSED
	float                                              m_WeatherChangeStartServerTime;                             // 0x0788   (0x0004)  
	float                                              m_WeatherChangeEndServerTime;                               // 0x078C   (0x0004)  
	EWTLWeatherType                                    m_CurrentWeather;                                           // 0x0790   (0x0001)  
	EWTLWeatherType                                    m_TransitionWeather;                                        // 0x0791   (0x0001)  
	unsigned char                                      UnknownData05_5[0x16];                                      // 0x0792   (0x0016)  MISSED
	int32_t                                            LightingTargetPointsCount;                                  // 0x07A8   (0x0004)  
	float                                              RainLightingIntervalMin;                                    // 0x07AC   (0x0004)  
	float                                              RainLightingIntervalMax;                                    // 0x07B0   (0x0004)  
	float                                              RainLighingChance;                                          // 0x07B4   (0x0004)  
	float                                              HeavyRainLightingIntervalMin;                               // 0x07B8   (0x0004)  
	float                                              HeavyRainLightingIntervalMax;                               // 0x07BC   (0x0004)  
	float                                              HeavyRainLighingChance;                                     // 0x07C0   (0x0004)  
	bool                                               UseWetSurfaceForLandscape;                                  // 0x07C4   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3B];                                      // 0x07C5   (0x003B)  MISSED
	bool                                               bShowDebugInfo;                                             // 0x0800   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0801   (0x0003)  MISSED
	float                                              DebugWeatherChangeSpeed;                                    // 0x0804   (0x0004)  
	USceneCaptureComponentCube*                        CaptureComponent;                                           // 0x0808   (0x0008)  
	bool                                               CaptureScene;                                               // 0x0810   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0811   (0x0007)  MISSED
	TArray<FWTLCaptureTarget>                          CaptureTargets;                                             // 0x0818   (0x0010)  
	UDirectionalLightComponent*                        SunLight;                                                   // 0x0828   (0x0008)  
	UDirectionalLightComponent*                        MoonLight;                                                  // 0x0830   (0x0008)  
	USkyLightComponent*                                SkyLightComponent;                                          // 0x0838   (0x0008)  
	AExponentialHeightFog*                             ExponentialHeightFog;                                       // 0x0840   (0x0008)  
	UCurveFloat*                                       ExponentialFogDesityCurve;                                  // 0x0848   (0x0008)  
	UCurveLinearColor*                                 ExponentialFogInscatteringColorCurve;                       // 0x0850   (0x0008)  
	unsigned char                                      UnknownData09_5[0x8];                                       // 0x0858   (0x0008)  MISSED
	AWindDirectionalSource*                            WindSource;                                                 // 0x0860   (0x0008)  
	bool                                               CanUseWindOnThisLocation;                                   // 0x0868   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0869   (0x0003)  MISSED
	float                                              WindMinGustAmountMin;                                       // 0x086C   (0x0004)  
	float                                              WindMinGustAmountMax;                                       // 0x0870   (0x0004)  
	float                                              WindMaxGustAmountMin;                                       // 0x0874   (0x0004)  
	float                                              WindMaxGustAmountMax;                                       // 0x0878   (0x0004)  
	float                                              WindSpeedMin;                                               // 0x087C   (0x0004)  
	float                                              WindSpeedMax;                                               // 0x0880   (0x0004)  
	float                                              WindActiveTimeMin;                                          // 0x0884   (0x0004)  
	float                                              WindActiveTimeMax;                                          // 0x0888   (0x0004)  
	float                                              WindChangeSpeedMin;                                         // 0x088C   (0x0004)  
	float                                              WindChangeSpeedMax;                                         // 0x0890   (0x0004)  
	float                                              WindChangeAngleSpeedMin;                                    // 0x0894   (0x0004)  
	float                                              WindChangeAngleSpeedMax;                                    // 0x0898   (0x0004)  
	float                                              WindMinSpeedWithClearWeather;                               // 0x089C   (0x0004)  
	float                                              WindMaxSpeedWithClearWeather;                               // 0x08A0   (0x0004)  
	float                                              WindMinSpeedWithCloudyWeather;                              // 0x08A4   (0x0004)  
	float                                              WindMaxSpeedWithCloudyWeather;                              // 0x08A8   (0x0004)  
	float                                              WindMinSpeedWithRainWeather;                                // 0x08AC   (0x0004)  
	float                                              WindMaxSpeedWithRainWeather;                                // 0x08B0   (0x0004)  
	float                                              WindMinSpeedWithHeavyRainWeather;                           // 0x08B4   (0x0004)  
	float                                              WindMaxSpeedWithHeavyRainWeather;                           // 0x08B8   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x08BC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLDynamicSkyLevelScriptActor.OnRep_WeatherChanged
	void OnRep_WeatherChanged();                                                                                             // [0x17de3c0] Final|Native|Private 
	// Function /Script/WTL.WTLDynamicSkyLevelScriptActor.OnRep_DesiredWindSpeed
	void OnRep_DesiredWindSpeed();                                                                                           // [0x17de3e0] Final|Native|Private 
	// Function /Script/WTL.WTLDynamicSkyLevelScriptActor.OnRep_DesiredWindActiveTime
	void OnRep_DesiredWindActiveTime();                                                                                      // [0x17de400] Final|Native|Private 
	// Function /Script/WTL.WTLDynamicSkyLevelScriptActor.NetworkControllerOnWeatherChangeEvent
	void NetworkControllerOnWeatherChangeEvent(FWTLEvent& Event);                                                            // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLDynamicSkyLevelScriptActor.GetUndergroundMode
	bool GetUndergroundMode();                                                                                               // [0x17de220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLDynamicSkyLevelScriptActor.ChangeWeather
	bool ChangeWeather(EWTLWeatherType WeatherType);                                                                         // [0x17de160] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLEconomicsSystem
/// Size: 0x0040 (0x000028 - 0x000068)
class UWTLEconomicsSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0028   (0x0040)  MISSED
};

/// Class /Script/WTL.WTLEffectVolume
/// Size: 0x0030 (0x000220 - 0x000250)
class AWTLEffectVolume : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	USphereComponent*                                  m_ZoneSphere;                                               // 0x0228   (0x0008)  
	UCurveFloat*                                       EffectByRadiusMultiplierCurve;                              // 0x0230   (0x0008)  
	UCurveFloat*                                       MaxEffectByRadiusMultiplierCurve;                           // 0x0238   (0x0008)  
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0240   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0241   (0x0003)  MISSED
	float                                              EffectValuePerSecond;                                       // 0x0244   (0x0004)  
	float                                              MaxEffectValue;                                             // 0x0248   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x024C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLElectricCoil
/// Size: 0x02D0 (0x000398 - 0x000668)
class AWTLElectricCoil : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0398   (0x0010)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x03A8   (0x0008)  
	UStaticMeshComponent*                              ZoneMesh;                                                   // 0x03B0   (0x0008)  
	float                                              EnergyPercentPerUse;                                        // 0x03B8   (0x0004)  
	float                                              DamageValue;                                                // 0x03BC   (0x0004)  
	float                                              MinDamage;                                                  // 0x03C0   (0x0004)  
	float                                              StuffDamageValue;                                           // 0x03C4   (0x0004)  
	float                                              EffectValue;                                                // 0x03C8   (0x0004)  
	int32_t                                            NumOfHits;                                                  // 0x03CC   (0x0004)  
	float                                              TimeToFirstActivate;                                        // 0x03D0   (0x0004)  
	float                                              TimeBetweenHits;                                            // 0x03D4   (0x0004)  
	unsigned char                                      UnknownData01_5[0x54];                                      // 0x03D8   (0x0054)  MISSED
	uint32_t                                           m_StuffIsCharged;                                           // 0x042C   (0x0004)  
	float                                              m_Energy;                                                   // 0x0430   (0x0004)  
	unsigned char                                      UnknownData02_5[0x10C];                                     // 0x0434   (0x010C)  MISSED
	AActor*                                            TargetActor;                                                // 0x0540   (0x0008)  
	unsigned char                                      UnknownData03_5[0x28];                                      // 0x0548   (0x0028)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        HitSound;                                                   // 0x0570   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ActivationSound;                                            // 0x0598   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        BackgroundSound;                                            // 0x05C0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ReloadingSound;                                             // 0x05E8   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   PartSyst;                                                   // 0x0610   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   ElectricDamage;                                             // 0x0638   (0x0028)  
	bool                                               bActivationProcess;                                         // 0x0660   (0x0001)  
	bool                                               bDeactivationProcess;                                       // 0x0661   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x0662   (0x0006)  MISSED


	/// Functions
	// Function /Script/WTL.WTLElectricCoil.OnRep_TargetActor
	void OnRep_TargetActor();                                                                                                // [0x17df780] Final|Native|Private 
	// Function /Script/WTL.WTLElectricCoil.OnRep_StuffIsCharged
	void OnRep_StuffIsCharged();                                                                                             // [0x17df7a0] Final|Native|Private 
	// Function /Script/WTL.WTLElectricCoil.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x17df7e0] Final|Native|Private 
	// Function /Script/WTL.WTLElectricCoil.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17df160] Final|Native|Private 
	// Function /Script/WTL.WTLElectricCoil.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17df3d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLElectricCoil.BPSetEnergyValueOnMaterial
	void BPSetEnergyValueOnMaterial(float Value);                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLElectricCoil.BPSetCondition
	void BPSetCondition(float Value);                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLElectricCoil.BPSetBeam
	void BPSetBeam(FVector Start, FVector EndPoint);                                                                         // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLElectricCoil.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0xe5dd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectricCoil.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17defb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectricCoil.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17df130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectricCoil.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17df0e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectricCoil.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17df110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectricCoil.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17df0c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLElectronicBait
/// Size: 0x0070 (0x000398 - 0x000408)
class AWTLElectronicBait : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0398   (0x0038)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x03D0   (0x0008)  
	UStaticMeshComponent*                              ZoneMesh;                                                   // 0x03D8   (0x0008)  
	float                                              NoiseLoudnessMin;                                           // 0x03E0   (0x0004)  
	float                                              NoiseLoudnessMax;                                           // 0x03E4   (0x0004)  
	float                                              NoiseRangeMin;                                              // 0x03E8   (0x0004)  
	float                                              NoiseRangeMax;                                              // 0x03EC   (0x0004)  
	float                                              ExplosionRadius;                                            // 0x03F0   (0x0004)  
	float                                              ExplosionDamageMin;                                         // 0x03F4   (0x0004)  
	float                                              ExplosionDamageMax;                                         // 0x03F8   (0x0004)  
	float                                              EnergyChargePerSecond;                                      // 0x03FC   (0x0004)  
	float                                              m_Energy;                                                   // 0x0400   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0404   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLElectronicBait.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x17e03e0] Final|Native|Private 
	// Function /Script/WTL.WTLElectronicBait.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLElectronicBait.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLElectronicBait.BPGetEnergy
	float BPGetEnergy();                                                                                                     // [0x17dfe10] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLElectronicBait.BPGetCondition
	float BPGetCondition();                                                                                                  // [0x17bbcb0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLElectronicBait.BPCharged
	void BPCharged();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLElectronicBait.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0xe5dd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectronicBait.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17defb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectronicBait.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17df130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectronicBait.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17df0e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectronicBait.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17df110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLElectronicBait.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17df0c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLGrenadeLauncherProjectile
/// Size: 0x01A0 (0x000248 - 0x0003E8)
class AWTLGrenadeLauncherProjectile : public AWTLProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0248   (0x0078)  MISSED
	TWeakObjectPtr<UClass*>                            ExplosionFX;                                                // 0x02C0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ExplosionFXConcrete;                                        // 0x02E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ExplosionFXGround;                                          // 0x0310   (0x0028)  
	TWeakObjectPtr<UClass*>                            ExplosionFXMetal;                                           // 0x0338   (0x0028)  
	TWeakObjectPtr<UClass*>                            WaterExplosionFX;                                           // 0x0360   (0x0028)  
	TWeakObjectPtr<UClass*>                            WaterHit;                                                   // 0x0388   (0x0028)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x03B0   (0x0008)  MISSED
	FRotator                                           ExplosionRotation;                                          // 0x03B8   (0x000C)  
	bool                                               CanBeExplodedInWater;                                       // 0x03C4   (0x0001)  
	bool                                               bExplodeAfterHit;                                           // 0x03C5   (0x0001)  
	bool                                               DestroyIfTimeIsOver;                                        // 0x03C6   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x03C7   (0x0001)  MISSED
	float                                              MinExplosionDelay;                                          // 0x03C8   (0x0004)  
	float                                              MaxExplosionDelay;                                          // 0x03CC   (0x0004)  
	float                                              Radius;                                                     // 0x03D0   (0x0004)  
	float                                              MaxDamageToProtectedActors;                                 // 0x03D4   (0x0004)  
	float                                              EnergyShieldDamageMultiplier;                               // 0x03D8   (0x0004)  
	bool                                               isLastingEffect;                                            // 0x03DC   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x03DD   (0x0003)  MISSED
	float                                              LastingEffect_LifeSpan;                                     // 0x03E0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x03E4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.SetExplosionFX
	void SetExplosionFX(UClass* NewExplosion);                                                                               // [0x1800bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.Server_RequestStatisticsForHit
	void Server_RequestStatisticsForHit(AActor* HitActor);                                                                   // [0x1801ca0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.Server_RequestExplode
	void Server_RequestExplode(FVector_NetQuantize ExplosionPosition);                                                       // [0x1801db0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1801970] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.NetMulticast_OnExplosion
	void NetMulticast_OnExplosion(FVector_NetQuantize ExplosionPosition);                                                    // [0x1801ee0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.GetWeaponDamage
	void GetWeaponDamage(float& MinDamage, float& MaxDamage);                                                                // [0x1800fc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.GetProjectileDamage
	void GetProjectileDamage(float& MinDamage, float& MaxDamage);                                                            // [0x1800dc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.Explode
	void Explode();                                                                                                          // [0x17ee920] Final|Native|Private 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.BPOnPawnHit
	void BPOnPawnHit(APawn* Pawn, FName NearestBone);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.BPOnExplode
	void BPOnExplode();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.BPOnApplyShrapnelDamageToMonster
	void BPOnApplyShrapnelDamageToMonster(AWTLMonsterPawn* Monster, float ActualDamage);                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.BPOnApplyShrapnelDamageToEnemyNPC
	void BPOnApplyShrapnelDamageToEnemyNPC(AWTLEnemyNPC* EnemyNPC, float ActualDamage);                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.BPOnApplyShrapnelDamageToCharacter
	void BPOnApplyShrapnelDamageToCharacter(AWTLCharacter* Character, float ActualDamage);                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.ApplyShrapnel
	bool ApplyShrapnel(int32_t ShrapnelCountMin, int32_t ShrapnelCountMax, float ShrapnelDamageMin, float ShrapnelDamageMax, float ShrapnelRadius, float ShrapnelRagdollImpulseMultiplier, bool ShrapnelUseReliableHitEvent); // [0x18011c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.ApplyExplosionDamageInZone
	void ApplyExplosionDamageInZone(UStaticMeshComponent* DamageZone, float MinDamage, float MaxDamage);                     // [0x18015a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGrenadeLauncherProjectile.ApplyExplosionDamage
	bool ApplyExplosionDamage(float ExplosionRadius, float MinDamage, float MaxDamage);                                      // [0x1801780] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLEMPGrenadeLauncherProjectile
/// Size: 0x0090 (0x0003E8 - 0x000478)
class AWTLEMPGrenadeLauncherProjectile : public AWTLGrenadeLauncherProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0x40];                                      // 0x03E8   (0x0040)  MISSED
	bool                                               m_bActivate;                                                // 0x0428   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0429   (0x0007)  MISSED
	TWeakObjectPtr<UParticleSystem*>                   Emitter;                                                    // 0x0430   (0x0028)  
	bool                                               MakeDamageToPlaceableStuff;                                 // 0x0458   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0459   (0x0003)  MISSED
	float                                              MinPlaceableStuffDamagePercent;                             // 0x045C   (0x0004)  
	float                                              MaxPlaceableStuffPercent;                                   // 0x0460   (0x0004)  
	float                                              MinEnergyPercent;                                           // 0x0464   (0x0004)  
	float                                              MaxEnergyPercent;                                           // 0x0468   (0x0004)  
	float                                              MinShieldDamage;                                            // 0x046C   (0x0004)  
	float                                              MaxShieldDamage;                                            // 0x0470   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0474   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLEMPGrenadeLauncherProjectile.OnRep_Activate
	void OnRep_Activate();                                                                                                   // [0x17e0850] Final|Native|Protected 
	// Function /Script/WTL.WTLEMPGrenadeLauncherProjectile.BPActivate
	void BPActivate();                                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLEMPWeaponProjectile
/// Size: 0x0100 (0x000290 - 0x000390)
class AWTLEMPWeaponProjectile : public AWTLThrowingDeviceProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0290   (0x0070)  MISSED
	bool                                               m_bActivate;                                                // 0x0300   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0301   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            Explosion;                                                  // 0x0308   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   Emitter;                                                    // 0x0330   (0x0028)  
	float                                              Radius;                                                     // 0x0358   (0x0004)  
	bool                                               MakeDamageToPlaceableStuff;                                 // 0x035C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x035D   (0x0003)  MISSED
	float                                              MinPlaceableStuffDamagePercent;                             // 0x0360   (0x0004)  
	float                                              MaxPlaceableStuffPercent;                                   // 0x0364   (0x0004)  
	float                                              MinEnergyPercent;                                           // 0x0368   (0x0004)  
	float                                              MaxEnergyPercent;                                           // 0x036C   (0x0004)  
	float                                              StuffDisabledTime;                                          // 0x0370   (0x0004)  
	float                                              MinShieldDamage;                                            // 0x0374   (0x0004)  
	float                                              MaxShieldDamage;                                            // 0x0378   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x037C   (0x0004)  MISSED
	TArray<int32_t>                                    EquipmentIDOnCharacter;                                     // 0x0380   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLEMPWeaponProjectile.OnRep_Activate
	void OnRep_Activate();                                                                                                   // [0x17e0a30] Final|Native|Protected 
};

/// Class /Script/WTL.WTLEnemyAIController
/// Size: 0x0070 (0x000328 - 0x000398)
class AWTLEnemyAIController : public AAIController
{ 
public:
	UBehaviorTree*                                     Behaviour;                                                  // 0x0328   (0x0008)  
	float                                              PredictionTime;                                             // 0x0330   (0x0004)  
	float                                              PredictionUpdatePeriod;                                     // 0x0334   (0x0004)  
	bool                                               bUpdatePreditionForAllSightedActors;                        // 0x0338   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5F];                                      // 0x0339   (0x005F)  MISSED


	/// Functions
	// Function /Script/WTL.WTLEnemyAIController.RestartBehaviour
	void RestartBehaviour();                                                                                                 // [0x17e0e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyAIController.OnTouchSenseUpdated
	void OnTouchSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                              // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnTeamSenseUpdated
	void OnTeamSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                               // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnSightSenseUpdated
	void OnSightSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                              // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnPredictionUpdate
	void OnPredictionUpdate();                                                                                               // [0x17e1aa0] Final|Native|Private 
	// Function /Script/WTL.WTLEnemyAIController.OnPredictionSenseUpdated
	void OnPredictionSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                         // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnPerceptionUpdated
	void OnPerceptionUpdated(TArray<AActor*>& UpdatedActors);                                                                // [0x1779410] Final|Native|Public|HasOutParms 
	// Function /Script/WTL.WTLEnemyAIController.OnPawnKilled
	void OnPawnKilled(APawn* VictimPawn);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnHearingSenseUpdated
	void OnHearingSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State);                            // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnDealedDamageToPawn
	void OnDealedDamageToPawn(APawn* VictimPawn, float Value);                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnDamageSenseUpdated
	void OnDamageSenseUpdated(AActor* StimulusInstigator, FVector StimulusLocation, bool State, float Value);                // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyAIController.OnActorPerceptionUpdated
	void OnActorPerceptionUpdated(AActor* Actor, FAIStimulus Stimulus);                                                      // [0x17e1840] Final|Native|Public  
	// Function /Script/WTL.WTLEnemyAIController.K2_GetGenericTeamID
	FGenericTeamId K2_GetGenericTeamID();                                                                                    // [0x17e1a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyAIController.IsEnemy
	bool IsEnemy(APawn* InPawn);                                                                                             // [0x17e0da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyAIController.IsActorInSight
	bool IsActorInSight(AActor* Actor);                                                                                      // [0x17e1660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyAIController.GetRelevantInterestPointForTarget
	bool GetRelevantInterestPointForTarget(AActor* Actor, FVector& InterestPoint, UClass*& SenseClass);                      // [0x17e1120] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyAIController.GetPredictionEvetns
	TArray<FWTLSenseEventInfo> GetPredictionEvetns();                                                                        // [0x17e1300] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLEnemyAIController.GetNoiseEvents
	TArray<FWTLTaggedSenseEventInfo> GetNoiseEvents();                                                                       // [0x17e1360] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLEnemyAIController.GetNearestTargetInSight
	bool GetNearestTargetInSight(AActor*& Target, bool bGetEnemy);                                                           // [0x17e1490] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyAIController.GetLatestInterestPoint
	bool GetLatestInterestPoint(FVector& InterestPoint, UClass*& SenseClass);                                                // [0x17e0fa0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyAIController.GetLatestFireNoiseLocation
	bool GetLatestFireNoiseLocation(FVector& FireLocation);                                                                  // [0x17e0eb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyAIController.GetDamageEvents
	TArray<FWTLSenseEventInfo> GetDamageEvents();                                                                            // [0x17e1330] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLEnemyAIController.GetActorsInSight
	TArray<AActor*> GetActorsInSight();                                                                                      // [0x17e1770] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/WTL.WTLHumanoidAnimInstance
/// Size: 0x0070 (0x0002C0 - 0x000330)
class UWTLHumanoidAnimInstance : public UAnimInstance
{ 
public:
	EWTLSex                                            Sex;                                                        // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02C1   (0x0003)  MISSED
	FVector                                            LookDirection;                                              // 0x02C4   (0x000C)  
	float                                              SideVelocity;                                               // 0x02D0   (0x0004)  
	float                                              ForwardVelocity;                                            // 0x02D4   (0x0004)  
	float                                              VelocityZ;                                                  // 0x02D8   (0x0004)  
	float                                              CameraAimOffset;                                            // 0x02DC   (0x0004)  
	bool                                               bIsInAir;                                                   // 0x02E0   (0x0001)  
	bool                                               bIsAiming;                                                  // 0x02E1   (0x0001)  
	bool                                               bIsCrouch;                                                  // 0x02E2   (0x0001)  
	bool                                               bIsInCombatMode;                                            // 0x02E3   (0x0001)  
	EWTLHumanoidAnimInstanceState                      InstanceState;                                              // 0x02E4   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02E5   (0x0003)  MISSED
	float                                              ItemEquipTime;                                              // 0x02E8   (0x0004)  
	float                                              ItemUnequipTime;                                            // 0x02EC   (0x0004)  
	int32_t                                            UsableItemID;                                               // 0x02F0   (0x0004)  
	EWTLItemType                                       UsableItemType;                                             // 0x02F4   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x02F5   (0x0003)  MISSED
	UAnimSequence*                                     IdleAnimation;                                              // 0x02F8   (0x0008)  
	UAnimSequence*                                     SnuggleAnimation;                                           // 0x0300   (0x0008)  
	UAimOffsetBlendSpace1D*                            AimOffsetBlendSpace;                                        // 0x0308   (0x0008)  
	FVector                                            AimingHandsTranslation;                                     // 0x0310   (0x000C)  
	FVector                                            AimingHandsOffset;                                          // 0x031C   (0x000C)  
	bool                                               bIsUnequip;                                                 // 0x0328   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0329   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLEnemyHumanoidAnimInstance
/// Size: 0x0020 (0x000330 - 0x000350)
class UWTLEnemyHumanoidAnimInstance : public UWTLHumanoidAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0330   (0x0008)  MISSED
	float                                              TargetLookFollowingAlpha;                                   // 0x0338   (0x0004)  
	FVector                                            TargetLocation;                                             // 0x033C   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0348   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLEnemyNPC
/// Size: 0x0690 (0x0004C0 - 0x000B50)
class AWTLEnemyNPC : public ACharacter
{ 
public:
	float                                              HealthValue;                                                // 0x04B8   (0x0004)  
	FWTLEnemyCurrentState                              CurrentState;                                               // 0x04BC   (0x001E)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x04DA   (0x0006)  MISSED
	TMap<EWTLEnemyNPCExclamationType, TWeakObjectPtr>  ExclamationMap;                                             // 0x04E0   (0x0050)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0530   (0x0001)  MISSED
	bool                                               bIsWeaponEmpty;                                             // 0x0531   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0532   (0x0006)  MISSED
	FTakeHitInfo                                       LastTakeHitInfo;                                            // 0x0538   (0x0220)  
	bool                                               bIsDead;                                                    // 0x0758   (0x0001)  
	EWTLHandsState                                     m_HandsState;                                               // 0x0759   (0x0001)  
	unsigned char                                      UnknownData03_5[0x62];                                      // 0x075A   (0x0062)  MISSED
	bool                                               bIsInvulnerable;                                            // 0x07BC   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x07BD   (0x0003)  MISSED
	FName                                              CameraBoneName;                                             // 0x07C0   (0x0008)  
	bool                                               bCanUseFlashlight;                                          // 0x07C8   (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x07C9   (0x0007)  MISSED
	FWTLCharacterInfo                                  CharacterInfo;                                              // 0x07D0   (0x0110)  
	float                                              DeathExclamationChance;                                     // 0x08E0   (0x0004)  
	float                                              TakeDamageExclamationChance;                                // 0x08E4   (0x0004)  
	TWeakObjectPtr<UFMODEvent*>                        DeathSoundEvent;                                            // 0x08E8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        TakeDamageLowHPEvent;                                       // 0x0910   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        TakeDamageMediumHPEvent;                                    // 0x0938   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        TakeDamageHighHPEvent;                                      // 0x0960   (0x0028)  
	FWTLFootstepSettings                               FootstepSettings;                                           // 0x0988   (0x000C)  
	unsigned char                                      UnknownData06_5[0x24];                                      // 0x0994   (0x0024)  MISSED
	AWTLUsable*                                        UsableItemInHands;                                          // 0x09B8   (0x0008)  
	unsigned char                                      UnknownData07_5[0x70];                                      // 0x09C0   (0x0070)  MISSED
	bool                                               bBroadcastDeathToKillers;                                   // 0x0A30   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0A31   (0x0007)  MISSED
	USkeletalMeshComponent*                            MeshHead;                                                   // 0x0A38   (0x0008)  
	USkeletalMeshComponent*                            MeshLegs;                                                   // 0x0A40   (0x0008)  
	USkeletalMeshComponent*                            MeshFeet;                                                   // 0x0A48   (0x0008)  
	USkeletalMeshComponent*                            MeshHeadSlot;                                               // 0x0A50   (0x0008)  
	USkeletalMeshComponent*                            MeshTorsoSlot;                                              // 0x0A58   (0x0008)  
	USkeletalMeshComponent*                            MeshLegsSlot;                                               // 0x0A60   (0x0008)  
	USkeletalMeshComponent*                            MeshFeetSlot;                                               // 0x0A68   (0x0008)  
	USkeletalMeshComponent*                            BackpackSlot;                                               // 0x0A70   (0x0008)  
	UStaticMeshComponent*                              WeaponPreviewSlot;                                          // 0x0A78   (0x0008)  
	UFMODAudioComponent*                               VoiceComponent;                                             // 0x0A80   (0x0008)  
	TArray<FWTLItemDropInfo>                           AdditionalLoot;                                             // 0x0A88   (0x0010)  
	unsigned char                                      UnknownData09_5[0xA0];                                      // 0x0A98   (0x00A0)  MISSED
	AActor*                                            CurrentTarget;                                              // 0x0B38   (0x0008)  
	unsigned char                                      UnknownData10_6[0x10];                                      // 0x0B40   (0x0010)  MISSED


	/// Functions
	// Function /Script/WTL.WTLEnemyNPC.UnequipWeapon
	float UnequipWeapon(bool bFullReload);                                                                                   // [0x17e3380] Final|Native|Protected|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.StopUse
	void StopUse();                                                                                                          // [0xe77850] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.StartUse
	void StartUse();                                                                                                         // [0xe77850] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.SetCanUseFlashlight
	void SetCanUseFlashlight(bool Value);                                                                                    // [0x17e2390] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.Reload
	void Reload();                                                                                                           // [0xe77850] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.PlayVoiceEvent
	void PlayVoiceEvent(EWTLEnemyNPCExclamationType VoiceEventType, float Chance, bool bInterruptCurrent);                   // [0x17e2ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.OnRep_UsableItemInHands
	void OnRep_UsableItemInHands();                                                                                          // [0x17e35b0] Final|Native|Private 
	// Function /Script/WTL.WTLEnemyNPC.OnRep_LastTakeHitInfo
	void OnRep_LastTakeHitInfo();                                                                                            // [0x17e35d0] Final|Native|Private 
	// Function /Script/WTL.WTLEnemyNPC.OnRep_IsWeaponEmpty
	void OnRep_IsWeaponEmpty();                                                                                              // [0x17e3450] Final|Native|Private 
	// Function /Script/WTL.WTLEnemyNPC.OnRep_CurrentState
	void OnRep_CurrentState();                                                                                               // [0x17e3760] Final|Native|Private 
	// Function /Script/WTL.WTLEnemyNPC.OnNPCKillOnClient
	void OnNPCKillOnClient();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyNPC.NetMulticast_PlayVoiceEvent
	void NetMulticast_PlayVoiceEvent(EWTLEnemyNPCExclamationType ExclamationType, bool bInterruptCurrent);                   // [0x17e3220] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLEnemyNPC.IsDead
	bool IsDead();                                                                                                           // [0x17e2620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.IsActionInProgress
	bool IsActionInProgress();                                                                                               // [0x17e25f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetWeaponRecoilSafeTime
	float GetWeaponRecoilSafeTime();                                                                                         // [0x17e2f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetWeaponPauseBetweenUse
	float GetWeaponPauseBetweenUse();                                                                                        // [0x17e2e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetWeaponEffectiveDistance
	float GetWeaponEffectiveDistance();                                                                                      // [0x17e2d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetTeam
	EWTLAITeam GetTeam();                                                                                                    // [0x17e2470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetMaxHealth
	float GetMaxHealth();                                                                                                    // [0x17e31f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetIsWeaponWithAutomaticFireMode
	bool GetIsWeaponWithAutomaticFireMode();                                                                                 // [0x17e3050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetIsWeaponFull
	bool GetIsWeaponFull();                                                                                                  // [0x17e24c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetIsWeaponEmpty
	bool GetIsWeaponEmpty();                                                                                                 // [0x17e25b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetIsItemEquipped
	bool GetIsItemEquipped();                                                                                                // [0x17e2490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetHealth
	float GetHealth();                                                                                                       // [0x17e2660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.GetHandsState
	EWTLHandsState GetHandsState();                                                                                          // [0x17e2640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEnemyNPC.EquipWeapon
	float EquipWeapon();                                                                                                     // [0xe5dd70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.EnemyHasEffect
	bool EnemyHasEffect(EWTLCharacterEffectType EffectType);                                                                 // [0x17e2840] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLEnemyNPC.DestroyNPC
	void DestroyNPC();                                                                                                       // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.ApplyMedicine
	void ApplyMedicine(int32_t MedicineID);                                                                                  // [0x17e2680] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEnemyNPC.AddCharacterEffect
	void AddCharacterEffect(EWTLCharacterEffectType EffectType, float Value);                                                // [0x17e2960] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLEnemyNPCDrop
/// Size: 0x0068 (0x000368 - 0x0003D0)
class AWTLEnemyNPCDrop : public AWTLCharacterDrop
{ 
public:
	unsigned char                                      UnknownData00_2[0x58];                                      // 0x0368   (0x0058)  MISSED
	TArray<FWTLItemDropInfo>                           AdditionalLoot;                                             // 0x03C0   (0x0010)  
};

/// Class /Script/WTL.WTLEnemyNPCSpawner
/// Size: 0x0088 (0x000220 - 0x0002A8)
class AWTLEnemyNPCSpawner : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0220   (0x0030)  MISSED
	UBillboardComponent*                               SpriteComponent;                                            // 0x0250   (0x0008)  
	EWTLEnemyNPCSpawnType                              SpawnType;                                                  // 0x0258   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0259   (0x0007)  MISSED
	TArray<AWTLEnemyNPCSpawnPoint*>                    SpawnPointList;                                             // 0x0260   (0x0010)  
	TArray<AWTLEnemyNPC*>                              EnemyNPCList;                                               // 0x0270   (0x0010)  
	TArray<FWTLEnemyNPCSpawnerRecord>                  SpawEnemies;                                                // 0x0280   (0x0010)  
	bool                                               bCanUseFlashlight;                                          // 0x0290   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0291   (0x0003)  MISSED
	float                                              ActiveRange;                                                // 0x0294   (0x0004)  
	float                                              RespawnTimeoutMin;                                          // 0x0298   (0x0004)  
	float                                              RespawnTimeoutMax;                                          // 0x029C   (0x0004)  
	UClass*                                            NavigationRaycastFilter;                                    // 0x02A0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLEnemyNPCSpawner.OnEnemyNPCDied
	void OnEnemyNPCDied(AWTLEnemyNPC* EnemyNPC, APawn* Killer);                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyNPCSpawner.OnBeforeSpawnWave
	void OnBeforeSpawnWave();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyNPCSpawner.OnAllEnemyNPCDied
	void OnAllEnemyNPCDied();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyNPCSpawner.OnAfterSpawnWave
	void OnAfterSpawnWave();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEnemyNPCSpawner.K2_OnEnemyNPCSpawned
	void K2_OnEnemyNPCSpawned(AWTLEnemyNPC* EnemyNPC);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLEnemyNPCSpawnPoint
/// Size: 0x0008 (0x000220 - 0x000228)
class AWTLEnemyNPCSpawnPoint : public AActor
{ 
public:
	int32_t                                            Rating;                                                     // 0x0220   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0224   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLThrowingDevice
/// Size: 0x0158 (0x000458 - 0x0005B0)
class AWTLThrowingDevice : public AWTLStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x2];                                       // 0x0458   (0x0002)  MISSED
	bool                                               m_bQuickThrow;                                              // 0x045A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x25];                                      // 0x045B   (0x0025)  MISSED
	UParticleSystemComponent*                          TargetLocation;                                             // 0x0480   (0x0008)  
	TWeakObjectPtr<UParticleSystem*>                   m_BeamParticleSystem;                                       // 0x0488   (0x0028)  
	unsigned char                                      UnknownData02_5[0x28];                                      // 0x04B0   (0x0028)  MISSED
	float                                              TrajectoryBeamTimeDelta;                                    // 0x04D8   (0x0004)  
	bool                                               bPredictTrajectory;                                         // 0x04DC   (0x0001)  
	unsigned char                                      UnknownData03_5[0x13];                                      // 0x04DD   (0x0013)  MISSED
	float                                              ThrowRandomConeAngle;                                       // 0x04F0   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x04F4   (0x0004)  MISSED
	FItemAnimationSet                                  ThrowSequenceSet;                                           // 0x04F8   (0x0018)  
	FItemAnimationSet                                  AlternateThrowSequenceSet;                                  // 0x0510   (0x0018)  
	FItemAnimationSet                                  QuickThrowSequenceSet;                                      // 0x0528   (0x0018)  
	TWeakObjectPtr<UClass*>                            ProjectileClass;                                            // 0x0540   (0x0028)  
	FVector                                            MissileSocketOffsetMale;                                    // 0x0568   (0x000C)  
	FVector                                            MissileSocketOffsetFemale;                                  // 0x0574   (0x000C)  
	FRotator                                           MainThrowRotationOffset;                                    // 0x0580   (0x000C)  
	FRotator                                           AlternativeThrowRotationOffset;                             // 0x058C   (0x000C)  
	float                                              ProjectileThrowSpeed;                                       // 0x0598   (0x0004)  
	bool                                               CanBeDeactivated;                                           // 0x059C   (0x0001)  
	bool                                               CanBeDropedAfterDeath;                                      // 0x059D   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x059E   (0x0002)  MISSED
	float                                              DropThrowForce;                                             // 0x05A0   (0x0004)  
	float                                              DropThrowForceAfterDeath;                                   // 0x05A4   (0x0004)  
	bool                                               ShowImpactPoint;                                            // 0x05A8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x05A9   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLThrowingDevice.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x192f9c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLThrowingDevice.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x192fa20] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLThrowingDevice.Server_ResetThrowingDevice
	void Server_ResetThrowingDevice();                                                                                       // [0x192f440] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLThrowingDevice.OnRep_QuickThrow
	void OnRep_QuickThrow();                                                                                                 // [0x192fa80] Final|Native|Private 
	// Function /Script/WTL.WTLThrowingDevice.NetMulticast_ResetDevice
	void NetMulticast_ResetDevice(AWTLCharacter* DeviceOwner);                                                               // [0x192f4a0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLThrowingDevice.NetMulticast_QuickThrow
	void NetMulticast_QuickThrow();                                                                                          // [0x192f800] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLThrowingDevice.NetMulticast_OnStopUse
	void NetMulticast_OnStopUse(EWTLUsableItemUseType UseType);                                                              // [0x192f820] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLThrowingDevice.NetMulticast_OnStartUse
	void NetMulticast_OnStartUse(EWTLUsableItemUseType UseType);                                                             // [0x192f8f0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLThrowingDevice.GetReadyToThrow
	bool GetReadyToThrow();                                                                                                  // [0x192f420] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLThrowingDevice.Client_ShowCountdownWidget
	void Client_ShowCountdownWidget(uint16_t WeaponID, float TimeValue, EWTLUsableItemUseType UseType, float ThrowSpeed);    // [0x192f580] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLThrowingDevice.Client_ResetDevice
	void Client_ResetDevice();                                                                                               // [0x17efde0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLThrowingDevice.Client_HideCountdownWidget
	void Client_HideCountdownWidget();                                                                                       // [0x191d9b0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLThrowingDevice.BPDeactivate
	void BPDeactivate();                                                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLThrowingDevice.BPActivationProcess
	void BPActivationProcess();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLEnergyShield
/// Size: 0x0000 (0x0005B0 - 0x0005B0)
class AWTLEnergyShield : public AWTLThrowingDevice
{ 
public:
};

/// Class /Script/WTL.WTLEnergyShieldProjectile
/// Size: 0x0088 (0x000290 - 0x000318)
class AWTLEnergyShieldProjectile : public AWTLThrowingDeviceProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0290   (0x0028)  MISSED
	bool                                               m_bDestroyInWater;                                          // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x02B9   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            ExplosionInWater;                                           // 0x02C0   (0x0028)  
	float                                              TraceDistance;                                              // 0x02E8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02EC   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            ShieldBP;                                                   // 0x02F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLEnergyShieldProjectile.OnRep_DestroyInWater
	void OnRep_DestroyInWater();                                                                                             // [0x17e4fc0] Final|Native|Private 
};

/// Class /Script/WTL.WTLEventPoint
/// Size: 0x01D8 (0x000220 - 0x0003F8)
class AWTLEventPoint : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0220   (0x0050)  MISSED
	EWTLEventPointType                                 PointType;                                                  // 0x0270   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0271   (0x0003)  MISSED
	float                                              Dificulty;                                                  // 0x0274   (0x0004)  
	EWTLEventPointActivationType                       ActivationType;                                             // 0x0278   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0279   (0x0007)  MISSED
	FText                                              EventName;                                                  // 0x0280   (0x0018)  
	FText                                              EventDescription;                                           // 0x0298   (0x0018)  
	bool                                               CanBeStartedAfterBeginPlay;                                 // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02B1   (0x0003)  MISSED
	float                                              MinStartDelay;                                              // 0x02B4   (0x0004)  
	float                                              MaxStartDelay;                                              // 0x02B8   (0x0004)  
	float                                              EventDuration;                                              // 0x02BC   (0x0004)  
	float                                              EventRange;                                                 // 0x02C0   (0x0004)  
	float                                              EventAbandonRange;                                          // 0x02C4   (0x0004)  
	char                                               MinCharacterLevel;                                          // 0x02C8   (0x0001)  
	char                                               MaxCharacterLevel;                                          // 0x02C9   (0x0001)  
	unsigned char                                      UnknownData04_5[0x6];                                       // 0x02CA   (0x0006)  MISSED
	TArray<EWTLFaction>                                AllowedFactions;                                            // 0x02D0   (0x0010)  
	float                                              ActivationZoneRange;                                        // 0x02E0   (0x0004)  
	int32_t                                            MinActivationZoneCharacterCountToStart;                     // 0x02E4   (0x0004)  
	TArray<FWTLEventTask>                              EventTasks;                                                 // 0x02E8   (0x0010)  
	bool                                               CanRunInParallel;                                           // 0x02F8   (0x0001)  
	bool                                               CanStartAtDayTime;                                          // 0x02F9   (0x0001)  
	bool                                               CanStartAtNightTime;                                        // 0x02FA   (0x0001)  
	bool                                               InProgress;                                                 // 0x02FB   (0x0001)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x02FC   (0x0004)  MISSED
	FDateTime                                          AvailableTimeBegin;                                         // 0x0300   (0x0008)  
	FDateTime                                          AvailableTimeEnd;                                           // 0x0308   (0x0008)  
	float                                              EventEndServerTime;                                         // 0x0310   (0x0004)  
	int32_t                                            ExperienceReward;                                           // 0x0314   (0x0004)  
	int32_t                                            MoneyReward;                                                // 0x0318   (0x0004)  
	int32_t                                            CompleteQuestID;                                            // 0x031C   (0x0004)  
	int32_t                                            AchievementID;                                              // 0x0320   (0x0004)  
	bool                                               CanGiveRandomGiftCards;                                     // 0x0324   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0325   (0x0003)  MISSED
	TArray<FWTLEventItemReward>                        ItemRewards;                                                // 0x0328   (0x0010)  
	unsigned char                                      UnknownData07_5[0x90];                                      // 0x0338   (0x0090)  MISSED
	int32_t                                            ID;                                                         // 0x03C8   (0x0004)  
	float                                              StartChanceValue;                                           // 0x03CC   (0x0004)  
	AVolume*                                           ActivationVolume;                                           // 0x03D0   (0x0008)  
	unsigned char                                      UnknownData08_5[0x10];                                      // 0x03D8   (0x0010)  MISSED
	int32_t                                            AmbientMusicLocationID;                                     // 0x03E8   (0x0004)  
	bool                                               LimitRewardByMonsterDamagePercent;                          // 0x03EC   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x03ED   (0x0003)  MISSED
	float                                              MinMonsterDamagePercentForReward;                           // 0x03F0   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x03F4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLEventPoint.TryStart
	void TryStart(EWTLBPActionResult& Result);                                                                               // [0x17ed080] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.RegisterMonsterTakenDamage
	void RegisterMonsterTakenDamage(AWTLMonsterPawn* Monster);                                                               // [0x17ec810] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.OnRep_InProgress
	void OnRep_InProgress();                                                                                                 // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLEventPoint.OnRep_EventTasks
	void OnRep_EventTasks();                                                                                                 // [0x17ed4e0] Final|Native|Protected 
	// Function /Script/WTL.WTLEventPoint.K2_OnStart
	void K2_OnStart();                                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEventPoint.K2_OnFinish
	void K2_OnFinish(bool Successful);                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEventPoint.K2_OnEventTaskCompleted
	void K2_OnEventTaskCompleted(int32_t TaskIndex);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEventPoint.K2_OnCharacterLeave
	void K2_OnCharacterLeave(AWTLCharacter* Character);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEventPoint.K2_OnCharacterEnter
	void K2_OnCharacterEnter(AWTLCharacter* Character);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEventPoint.K2_IsReadyToStart
	bool K2_IsReadyToStart();                                                                                                // [0xf43fc0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/WTL.WTLEventPoint.IsReadyToStart
	bool IsReadyToStart();                                                                                                   // [0x17ed4b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.IsInitialized
	bool IsInitialized();                                                                                                    // [0x17ec6a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.IncrementTaskValue
	void IncrementTaskValue(int32_t TaskIndex, int32_t Delta);                                                               // [0x17ed1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.GiveRewardToCharacters
	void GiveRewardToCharacters(TArray<AWTLCharacter*> Characters);                                                          // [0x17ecb10] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.GiveRewardToCharacter
	void GiveRewardToCharacter(AWTLCharacter* Character);                                                                    // [0x17ecc60] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.GetTotalProgressPercent
	float GetTotalProgressPercent();                                                                                         // [0x17ece60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetTimeLeftSeconds
	float GetTimeLeftSeconds();                                                                                              // [0x17ecdb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetTimeLeft
	FTimespan GetTimeLeft();                                                                                                 // [0x17ece20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetStartChance
	float GetStartChance();                                                                                                  // [0x17ecd70] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLEventPoint.GetNextAvailableTime
	FDateTime GetNextAvailableTime();                                                                                        // [0x17ec700] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetMonsterDamagePercent
	float GetMonsterDamagePercent(AWTLCharacter* Character);                                                                 // [0x17ec720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetID
	int32_t GetID();                                                                                                         // [0x1773c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetEventEndTime
	FDateTime GetEventEndTime();                                                                                             // [0x17ec6e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetCharactersInRange
	TArray<AWTLCharacter*> GetCharactersInRange();                                                                           // [0x17ec4b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GetCharactersCount
	int32_t GetCharactersCount();                                                                                            // [0x17ec570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.GenerateNewAvailableTime
	void GenerateNewAvailableTime();                                                                                         // [0x17ed180] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.ForceStart
	void ForceStart();                                                                                                       // [0x17ed060] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.ForceFinish
	void ForceFinish(bool Succeessful, bool GiveReward);                                                                     // [0x17ecee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.ForceCharacterEntersZone
	void ForceCharacterEntersZone(AWTLCharacter* Character, bool CheckCanJoinEvent);                                         // [0x17ec8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLEventPoint.CharacterJoinedEvent
	bool CharacterJoinedEvent(AWTLCharacter* Character);                                                                     // [0x17ec590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLEventPoint.CharacterCanJoinEvent
	bool CharacterCanJoinEvent(AWTLCharacter* Character);                                                                    // [0x17ed3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLExperienceSystem
/// Size: 0x00C0 (0x000028 - 0x0000E8)
class UWTLExperienceSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xC0];                                      // 0x0028   (0x00C0)  MISSED
};

/// Class /Script/WTL.WTLSocialNetworkAdapter
/// Size: 0x0020 (0x000028 - 0x000048)
class UWTLSocialNetworkAdapter : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0028   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLFacebookSocialNetworkAdapter
/// Size: 0x0000 (0x000048 - 0x000048)
class UWTLFacebookSocialNetworkAdapter : public UWTLSocialNetworkAdapter
{ 
public:
};

/// Class /Script/WTL.WTLFish
/// Size: 0x00D8 (0x000220 - 0x0002F8)
class AWTLFish : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0220   (0x0018)  MISSED
	FVector                                            DefaultVelocity;                                            // 0x0238   (0x000C)  
	float                                              SpeedMultiplier;                                            // 0x0244   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0248   (0x0004)  MISSED
	float                                              ForceInterpolationSpeed;                                    // 0x024C   (0x0004)  
	float                                              DirectionChangeSpeedMultiplier;                             // 0x0250   (0x0004)  
	float                                              StaminaRecoveryValue;                                       // 0x0254   (0x0004)  
	float                                              StaminaDecreaseValue;                                       // 0x0258   (0x0004)  
	float                                              MinStaminaValueToRecovering;                                // 0x025C   (0x0004)  
	float                                              MaxStaminaValueToRecovering;                                // 0x0260   (0x0004)  
	float                                              MinStaminaDeltaToChangeVelocity;                            // 0x0264   (0x0004)  
	float                                              MaxStaminaDeltaToChangeVelocity;                            // 0x0268   (0x0004)  
	FName                                              BodiesBelowSimulatePhysicsSocketName;                       // 0x026C   (0x0008)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0274   (0x0008)  MISSED
	FVector                                            FishOffset;                                                 // 0x027C   (0x000C)  
	EWTLFishState                                      m_FishState;                                                // 0x0288   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0289   (0x0003)  MISSED
	float                                              m_InterpolationHorizontalSpeed;                             // 0x028C   (0x0004)  
	float                                              m_InterpolationVerticalSpeed;                               // 0x0290   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0294   (0x0004)  MISSED
	UCurveFloat*                                       FishRadianSpeedCurve;                                       // 0x0298   (0x0008)  
	unsigned char                                      UnknownData05_5[0x28];                                      // 0x02A0   (0x0028)  MISSED
	AWTLFishingActivity*                               m_Activity;                                                 // 0x02C8   (0x0008)  
	USkeletalMeshComponent*                            Mesh;                                                       // 0x02D0   (0x0008)  
	UParticleSystemComponent*                          PeckingParticles;                                           // 0x02D8   (0x0008)  
	UParticleSystemComponent*                          RecoveringParticles;                                        // 0x02E0   (0x0008)  
	UParticleSystemComponent*                          RipplesParticles;                                           // 0x02E8   (0x0008)  
	UFMODAudioComponent*                               WavesSoundComponent;                                        // 0x02F0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLFish.OnRep_FishState
	void OnRep_FishState();                                                                                                  // [0x17ee290] Final|Native|Private 
	// Function /Script/WTL.WTLFish.NetMulticast_OnCathed
	void NetMulticast_OnCathed();                                                                                            // [0x17ee270] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLFish.K2_OnFishStateChanged
	void K2_OnFishStateChanged(EWTLFishState State);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFish.K2_OnCathed
	void K2_OnCathed();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLFishingActivity
/// Size: 0x0198 (0x000250 - 0x0003E8)
class AWTLFishingActivity : public AWTLActionGameplayActivity
{ 
public:
	AWTLCharacter*                                     m_Character;                                                // 0x0250   (0x0008)  
	AWTLFishingItem*                                   m_FishingRod;                                               // 0x0258   (0x0008)  
	AWTLFishingVolume*                                 m_FishingVolume;                                            // 0x0260   (0x0008)  
	AWTLFish*                                          m_Fish;                                                     // 0x0268   (0x0008)  
	bool                                               m_bFishingInProcess;                                        // 0x0270   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0271   (0x0003)  MISSED
	FVector                                            m_FloatStartPosition;                                       // 0x0274   (0x000C)  
	FVector                                            m_CharacterPosition;                                        // 0x0280   (0x000C)  
	unsigned char                                      UnknownData01_5[0x7C];                                      // 0x028C   (0x007C)  MISSED
	char                                               m_RodResistanceReplicated;                                  // 0x0308   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1B];                                      // 0x0309   (0x001B)  MISSED
	bool                                               m_bPulling;                                                 // 0x0324   (0x0001)  
	unsigned char                                      UnknownData03_5[0x13];                                      // 0x0325   (0x0013)  MISSED
	UCurveFloat*                                       FishingRodTiltCurve;                                        // 0x0338   (0x0008)  
	UCurveFloat*                                       FishingRodResistanceCurve;                                  // 0x0340   (0x0008)  
	float                                              MovementMultiplier;                                         // 0x0348   (0x0004)  
	float                                              PullingSpeed;                                               // 0x034C   (0x0004)  
	float                                              CameraShakeInterpSpeed;                                     // 0x0350   (0x0004)  
	char                                               ForwardAlphaToCatchFish;                                    // 0x0354   (0x0001)  
	bool                                               DrawDebugLines;                                             // 0x0355   (0x0001)  
	unsigned char                                      UnknownData04_5[0x6];                                       // 0x0356   (0x0006)  MISSED
	float                                              ZoneMaxWidth;                                               // 0x035C   (0x0004)  
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x0360   (0x0010)  
	UCameraShakeBase*                                  CameraShake;                                                // 0x0370   (0x0008)  
	UClass*                                            CameraShakeClass;                                           // 0x0378   (0x0008)  
	FWTLCameraLimits                                   CameraLimits;                                               // 0x0380   (0x000C)  
	float                                              DesiredFOV;                                                 // 0x038C   (0x0004)  
	float                                              m_FishingConeAngle;                                         // 0x0390   (0x0004)  
	float                                              m_ZoneMaxLenght;                                            // 0x0394   (0x0004)  
	FVector                                            m_DirectionToCharacter;                                     // 0x0398   (0x000C)  
	FVector                                            m_RightVector;                                              // 0x03A4   (0x000C)  
	unsigned char                                      UnknownData05_6[0x38];                                      // 0x03B0   (0x0038)  MISSED


	/// Functions
	// Function /Script/WTL.WTLFishingActivity.Server_StopPullFish
	void Server_StopPullFish();                                                                                              // [0x17ee720] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLFishingActivity.Server_StartPullFish
	void Server_StartPullFish();                                                                                             // [0x17ee780] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLFishingActivity.ResetAndDestroy
	void ResetAndDestroy();                                                                                                  // [0x17ee820] Final|Native|Protected 
	// Function /Script/WTL.WTLFishingActivity.OnRep_Shake
	void OnRep_Shake();                                                                                                      // [0x17ee9c0] Final|Native|Private 
	// Function /Script/WTL.WTLFishingActivity.OnRep_Resistance
	void OnRep_Resistance();                                                                                                 // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLFishingActivity.OnRep_Pulling
	void OnRep_Pulling();                                                                                                    // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLFishingActivity.OnRep_FishState
	void OnRep_FishState();                                                                                                  // [0x17eea40] Final|Native|Private 
	// Function /Script/WTL.WTLFishingActivity.OnRep_Fish
	void OnRep_Fish();                                                                                                       // [0x17ee940] Final|Native|Private 
	// Function /Script/WTL.WTLFishingActivity.OnCharacterDied
	void OnCharacterDied(AWTLCharacter* Character);                                                                          // [0x17ee840] Final|Native|Protected 
	// Function /Script/WTL.WTLFishingActivity.GetCharacterTiltX
	float GetCharacterTiltX();                                                                                               // [0x17ee7e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFishingActivity.Client_StartFishing
	void Client_StartFishing();                                                                                              // [0xba4a50] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLFishingActivity.Client_OnFishSpawned
	void Client_OnFishSpawned();                                                                                             // [0x10ff1a0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLFishingActivity.Client_OnFishingEnded
	void Client_OnFishingEnded();                                                                                            // [0xba4a70] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLFishingActivity.Client_FishingLineBroke
	void Client_FishingLineBroke();                                                                                          // [0x17ee920] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLFishingActivity.Client_FishingFinished
	void Client_FishingFinished();                                                                                           // [0xba4a30] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLFishingActivity.Client_CanNotFishing
	void Client_CanNotFishing();                                                                                             // [0x10fb3b0] Final|Net|NetReliableNative|Event|Private|NetClient 
};

/// Class /Script/WTL.WTLFishingItem
/// Size: 0x0188 (0x000458 - 0x0005E0)
class AWTLFishingItem : public AWTLStuff
{ 
public:
	AWTLPlayerController*                              m_Controller;                                               // 0x0458   (0x0008)  
	UAnimationAsset*                                   FloatFlowAnimation;                                         // 0x0460   (0x0008)  
	UAnimationAsset*                                   FloatBiteAnimation;                                         // 0x0468   (0x0008)  
	FName                                              FloatAttachSocket;                                          // 0x0470   (0x0008)  
	UClass*                                            FishingActivityAsset;                                       // 0x0478   (0x0008)  
	TArray<TEnumAsByte>                                HitCollisionObjectTypes;                                    // 0x0480   (0x0010)  
	UCurveFloat*                                       MouseSesivityCurve;                                         // 0x0490   (0x0008)  
	float                                              MouseSensivity;                                             // 0x0498   (0x0004)  
	bool                                               DrawDebugLines;                                             // 0x049C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x049D   (0x0003)  MISSED
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x04A0   (0x0010)  
	TWeakObjectPtr<UClass*>                            CrosshairWidgetClass;                                       // 0x04B0   (0x0028)  
	bool                                               m_bFloatVisibility;                                         // 0x04D8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x04D9   (0x0003)  MISSED
	FVector                                            m_FloatLocation;                                            // 0x04DC   (0x000C)  
	unsigned char                                      UnknownData02_5[0x20];                                      // 0x04E8   (0x0020)  MISSED
	UAnimMontage*                                      FishingThrowAnimMontage;                                    // 0x0508   (0x0008)  
	UAnimMontage*                                      FishingThrowEndAnimMontage;                                 // 0x0510   (0x0008)  
	UAnimMontage*                                      FishingPecksAnimMontage;                                    // 0x0518   (0x0008)  
	UAnimMontage*                                      FishingPecksEndAnimMontage;                                 // 0x0520   (0x0008)  
	UAnimMontage*                                      FishingLeftHookAnimMontage;                                 // 0x0528   (0x0008)  
	UAnimMontage*                                      FishingUpHookAnimMontage;                                   // 0x0530   (0x0008)  
	UAnimMontage*                                      FishingRightHookAnimMontage;                                // 0x0538   (0x0008)  
	UAnimMontage*                                      FishingDownHookAnimMontage;                                 // 0x0540   (0x0008)  
	UAnimMontage*                                      m_FishingCurrentAnimMontage;                                // 0x0548   (0x0008)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0x0550   (0x0008)  MISSED
	float                                              m_RodHorizontalTilt;                                        // 0x0558   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x055C   (0x0004)  MISSED
	float                                              m_Resistance;                                               // 0x0560   (0x0004)  
	unsigned char                                      UnknownData05_5[0x14];                                      // 0x0564   (0x0014)  MISSED
	AWTLFishingActivity*                               m_Activity;                                                 // 0x0578   (0x0008)  
	unsigned char                                      UnknownData06_5[0x8];                                       // 0x0580   (0x0008)  MISSED
	int32_t                                            m_LastFishingZoneID;                                        // 0x0588   (0x0004)  
	int32_t                                            m_CathedFishID;                                             // 0x058C   (0x0004)  
	unsigned char                                      UnknownData07_5[0x8];                                       // 0x0590   (0x0008)  MISSED
	FMulticastInlineDelegate                           OnFishingItemPutToInventory;                                // 0x0598   (0x0010)  
	FMulticastInlineDelegate                           OnFishingRodCanThrow;                                       // 0x05A8   (0x0010)  
	FMulticastInlineDelegate                           OnFloatVisibilityChanged;                                   // 0x05B8   (0x0010)  
	USkeletalMeshComponent*                            FloatMesh;                                                  // 0x05C8   (0x0008)  
	UCableComponent*                                   FishingRope;                                                // 0x05D0   (0x0008)  
	USkeletalMeshComponent*                            FishMesh;                                                   // 0x05D8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLFishingItem.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17efed0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLFishingItem.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17eff30] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLFishingItem.Server_ChangeHorizontalAlpha
	void Server_ChangeHorizontalAlpha(float Alpha);                                                                          // [0x17efbd0] Final|Net|Native|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLFishingItem.OnRep_MouseDeltaX
	void OnRep_MouseDeltaX();                                                                                                // [0x17efcf0] Final|Native|Private 
	// Function /Script/WTL.WTLFishingItem.OnRep_FloatVisibility
	void OnRep_FloatVisibility();                                                                                            // [0x17efda0] Final|Native|Private 
	// Function /Script/WTL.WTLFishingItem.OnRep_FloatLocation
	void OnRep_FloatLocation();                                                                                              // [0x17efd40] Final|Native|Private 
	// Function /Script/WTL.WTLFishingItem.OnRep_FishingActivity
	void OnRep_FishingActivity();                                                                                            // [0x17efdc0] Final|Native|Private 
	// Function /Script/WTL.WTLFishingItem.OnRep_CathedFishID
	void OnRep_CathedFishID();                                                                                               // [0x17efcd0] Final|Native|Private 
	// Function /Script/WTL.WTLFishingItem.OnActivityDestroyed
	void OnActivityDestroyed(AActor* DestroyedActor);                                                                        // [0x17efaf0] Final|Native|Private 
	// Function /Script/WTL.WTLFishingItem.NowIsPulling
	bool NowIsPulling();                                                                                                     // [0x17ef960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFishingItem.NetMulticast_ResetAll
	void NetMulticast_ResetAll(bool AttachFish);                                                                             // [0x17efa10] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLFishingItem.NetMulticast_PlayAnimation
	void NetMulticast_PlayAnimation(EWTLFishingMontageType MontageType);                                                     // [0x17efe00] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLFishingItem.NetMulticast_MakeHit
	void NetMulticast_MakeHit();                                                                                             // [0x17efde0] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLFishingItem.K2_SimulateRope
	void K2_SimulateRope(bool Simulate);                                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFishingItem.K2_OnFishCatched
	void K2_OnFishCatched(bool IsSuccess);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFishingItem.K2_DeatachRopeEnd
	void K2_DeatachRopeEnd(bool Value);                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFishingItem.GetVisualResistance
	float GetVisualResistance();                                                                                             // [0x17ef980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFishingItem.GetResistance
	float GetResistance();                                                                                                   // [0x17ef9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFishingItem.GetMouseHorizontalAlpha
	float GetMouseHorizontalAlpha();                                                                                         // [0x17ef9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFishingItem.GetFloatLocation
	FVector GetFloatLocation();                                                                                              // [0x17ef9e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLFishingVolume
/// Size: 0x0068 (0x000258 - 0x0002C0)
class AWTLFishingVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0258   (0x0008)  MISSED
	bool                                               AutoSpawnSeagulls;                                          // 0x0260   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0261   (0x0007)  MISSED
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x0268   (0x0010)  
	unsigned char                                      UnknownData02_5[0x40];                                      // 0x0278   (0x0040)  MISSED
	bool                                               ZoneEnabled;                                                // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02B9   (0x0003)  MISSED
	int32_t                                            FishingID;                                                  // 0x02BC   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLFishingVolume.OnVolumeEndOverlap
	void OnVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLFishingVolume.OnVolumeBeginOverlap
	void OnVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLFlashlightMountComponent
/// Size: 0x00A0 (0x000280 - 0x000320)
class UWTLFlashlightMountComponent : public USpringArmComponent
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0280   (0x0018)  MISSED
	float                                              FlashDeltaTime;                                             // 0x0298   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x029C   (0x0004)  MISSED
	USpotLightComponent*                               LightComponent;                                             // 0x02A0   (0x0008)  
	UStaticMeshComponent*                              FlashlightMesh;                                             // 0x02A8   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        ToggleSoundEvent;                                           // 0x02B0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        BrokenFlashlightEvent;                                      // 0x02D8   (0x0028)  
	UCurveFloat*                                       FaultyFlashlightCurve;                                      // 0x0300   (0x0008)  
	float                                              MinTimeBetweenFlashes;                                      // 0x0308   (0x0004)  
	float                                              MaxTimeBetweenFlashes;                                      // 0x030C   (0x0004)  
	bool                                               bBrokenFlash;                                               // 0x0310   (0x0001)  
	unsigned char                                      UnknownData02_6[0xF];                                       // 0x0311   (0x000F)  MISSED


	/// Functions
	// Function /Script/WTL.WTLFlashlightMountComponent.Server_Toggle
	void Server_Toggle();                                                                                                    // [0x17f12e0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
};

/// Class /Script/WTL.WTLFloatingPawnMovement
/// Size: 0x0000 (0x000150 - 0x000150)
class UWTLFloatingPawnMovement : public UFloatingPawnMovement
{ 
public:
};

/// Class /Script/WTL.WTLFMODCharacterVoiceComponent
/// Size: 0x16B0 (0x0003E0 - 0x001A90)
class UWTLFMODCharacterVoiceComponent : public UFMODAudioComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x16B0];                                    // 0x03E0   (0x16B0)  MISSED
};

/// Class /Script/WTL.WTLFMODReverbZone
/// Size: 0x0008 (0x000258 - 0x000260)
class AWTLFMODReverbZone : public AVolume
{ 
public:
	UFMODAudioComponent*                               SoundEvent;                                                 // 0x0258   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLFMODReverbZone.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17f1440] Final|Native|Private 
	// Function /Script/WTL.WTLFMODReverbZone.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17f16f0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLFortificationEnemyNPCSpawner
/// Size: 0x0010 (0x0002A8 - 0x0002B8)
class AWTLFortificationEnemyNPCSpawner : public AWTLEnemyNPCSpawner
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x02A8   (0x0008)  MISSED
	int32_t                                            MaxFactionPlayersToSpawn;                                   // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02B4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLFortificationEnemyNPCSpawner.UpdateOwnerFaction
	void UpdateOwnerFaction(EWTLFaction Faction);                                                                            // [0x17f2a30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLFortificationSafeZoneAnimScriptInstance
/// Size: 0x0000 (0x0002C0 - 0x0002C0)
class UWTLFortificationSafeZoneAnimScriptInstance : public UAnimInstance
{ 
public:
};

/// Class /Script/WTL.WTLSafeZone
/// Size: 0x0060 (0x000220 - 0x000280)
class AWTLSafeZone : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	USphereComponent*                                  SphereComponent;                                            // 0x0228   (0x0008)  
	UStaticMeshComponent*                              MeshComponent;                                              // 0x0230   (0x0008)  
	UNavModifierComponent*                             NavModifierComponent;                                       // 0x0238   (0x0008)  
	int32_t                                            ID;                                                         // 0x0240   (0x0004)  
	EWTLFaction                                        Faction;                                                    // 0x0244   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	int32_t                                            RedirectSafeZoneID;                                         // 0x0248   (0x0004)  
	bool                                               Active;                                                     // 0x024C   (0x0001)  
	bool                                               bNeedToHideSphereOnDeactivation;                            // 0x024D   (0x0001)  
	EWTLSafeZoneType                                   Type;                                                       // 0x024E   (0x0001)  
	bool                                               CanRespawnWhenDisabled;                                     // 0x024F   (0x0001)  
	bool                                               bAllowToShowOnMinimap;                                      // 0x0250   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0251   (0x0007)  MISSED
	TArray<AWTLPlayerStart*>                           m_PlayerStarts;                                             // 0x0258   (0x0010)  
	int32_t                                            m_PlayerStartsCount;                                        // 0x0268   (0x0004)  
	unsigned char                                      UnknownData03_6[0x14];                                      // 0x026C   (0x0014)  MISSED


	/// Functions
	// Function /Script/WTL.WTLSafeZone.SetFaction
	void SetFaction(EWTLFaction Value);                                                                                      // [0x1922c70] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSafeZone.OnTriggerVolumeEndOverlap
	void OnTriggerVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLSafeZone.OnTriggerVolumeBeginOverlap
	void OnTriggerVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLSafeZone.OnRep_Faction
	void OnRep_Faction();                                                                                                    // [0xba4570] Final|Native|Private 
	// Function /Script/WTL.WTLSafeZone.OnRep_Active
	void OnRep_Active();                                                                                                     // [0x17ee270] Final|Native|Private 
	// Function /Script/WTL.WTLSafeZone.GetFaction
	EWTLFaction GetFaction();                                                                                                // [0x1922d40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLSafeZone.EnabledSafeZone
	void EnabledSafeZone();                                                                                                  // [0x1922dc0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSafeZone.DisableSafeZone
	void DisableSafeZone();                                                                                                  // [0x1922d70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSafeZone.CheckCharacterInZone
	bool CheckCharacterInZone(AWTLCharacter* Character);                                                                     // [0x1922e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLFortificationSafeZone
/// Size: 0x0040 (0x000280 - 0x0002C0)
class AWTLFortificationSafeZone : public AWTLSafeZone
{ 
public:
	USkeletalMeshComponent*                            GeneratorMesh;                                              // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0288   (0x0018)  MISSED
	UFMODAudioComponent*                               AlarmSoundComponent;                                        // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x02A8   (0x0008)  MISSED
	AWTLSafeZone*                                      ConfederationFallbackSafeZone;                              // 0x02B0   (0x0008)  
	AWTLSafeZone*                                      BlackSunsetFallbackSafeZone;                                // 0x02B8   (0x0008)  
};

/// Class /Script/WTL.WTLFortificationSafeZoneJammer
/// Size: 0x0048 (0x0003C0 - 0x000408)
class AWTLFortificationSafeZoneJammer : public AWTLChargeablePlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x03C0   (0x0010)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x03D0   (0x0008)  
	EWTLFortificationJammerState                       State;                                                      // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData01_5[0xF];                                       // 0x03D9   (0x000F)  MISSED
	float                                              NoiseNotificationInterval;                                  // 0x03E8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x03EC   (0x0004)  MISSED
	float                                              NoiseRange;                                                 // 0x03F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x14];                                      // 0x03F4   (0x0014)  MISSED


	/// Functions
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.OnStateChanged
	void OnStateChanged(EWTLFortificationJammerState NewState);                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.OnRep_State
	void OnRep_State();                                                                                                      // [0x17f3140] Final|Native|Private 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.GetState
	EWTLFortificationJammerState GetState();                                                                                 // [0x17f3100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.GetNearestCommandCore
	AWTLFortificationCommandCore* GetNearestCommandCore();                                                                   // [0x17f3120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0xe5dd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17defb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17df130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17df0e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17df110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLFortificationSafeZoneJammer.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17df0c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLFractionFlag
/// Size: 0x0038 (0x000220 - 0x000258)
class AWTLFractionFlag : public AActor
{ 
public:
	USceneComponent*                                   FlagRoot;                                                   // 0x0220   (0x0008)  
	UStaticMeshComponent*                              FlagpoleMesh;                                               // 0x0228   (0x0008)  
	USkeletalMeshComponent*                            FlagMesh;                                                   // 0x0230   (0x0008)  
	float                                              InfluenceInterpSpeed;                                       // 0x0238   (0x0004)  
	bool                                               bUseInfluenceInterpolation;                                 // 0x023C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1B];                                      // 0x023D   (0x001B)  MISSED


	/// Functions
	// Function /Script/WTL.WTLFractionFlag.UpdateFactionInfluence
	void UpdateFactionInfluence(float FactionValue, float InfluenceValue);                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLFractionFlag.Client_SetFactionInfluence
	void Client_SetFactionInfluence(EWTLFaction Faction, float Influence);                                                   // [0x17aadd0] Final|Net|NetReliableNative|Event|Private|NetClient 
};

/// Class /Script/WTL.WTLFurnace
/// Size: 0x0000 (0x000328 - 0x000328)
class AWTLFurnace : public AWTLCraftObject
{ 
public:
};

/// Class /Script/WTL.WTLGameInstance
/// Size: 0x1040 (0x0001A8 - 0x0011E8)
class UWTLGameInstance : public UGameInstance
{ 
public:
	unsigned char                                      UnknownData00_2[0x128];                                     // 0x01A8   (0x0128)  MISSED
	FWTLClanList                                       m_ClanList;                                                 // 0x02D0   (0x0038)  
	TMap<uint16_t, FWTLClanIcons>                      m_ClanIcons;                                                // 0x0308   (0x0050)  
	unsigned char                                      UnknownData01_5[0x20];                                      // 0x0358   (0x0020)  MISSED
	FWTLSteamInventoryItemList                         m_SteamItemDefinitions;                                     // 0x0378   (0x0038)  
	FWTLAccountInventoryItemList                       m_AccountInventory;                                         // 0x03B0   (0x0040)  
	FWTLStoreItemList                                  m_StoreItemList;                                            // 0x03F0   (0x0038)  
	unsigned char                                      UnknownData02_5[0x140];                                     // 0x0428   (0x0140)  MISSED
	UWTLLoadingScreenLocation*                         m_LoadingScreenLocationWidget;                              // 0x0568   (0x0008)  
	UWTLLoadingScreenSimple*                           m_LoadingScreenSimpleWidget;                                // 0x0570   (0x0008)  
	unsigned char                                      UnknownData03_5[0x18];                                      // 0x0578   (0x0018)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        AmbientEvent;                                               // 0x0590   (0x0028)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x05B8   (0x0008)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        EventPointsEvent;                                           // 0x05C0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        EventPointsSnapshotEvent;                                   // 0x05E8   (0x0028)  
	unsigned char                                      UnknownData05_5[0x110];                                     // 0x0610   (0x0110)  MISSED
	UFMODBus*                                          MasterBus;                                                  // 0x0720   (0x0008)  
	UFMODBus*                                          MusicBus;                                                   // 0x0728   (0x0008)  
	UFMODBus*                                          EffectsBus;                                                 // 0x0730   (0x0008)  
	UFMODBus*                                          CharacterVoiceBus;                                          // 0x0738   (0x0008)  
	UFMODBus*                                          SpeechBus;                                                  // 0x0740   (0x0008)  
	UFMODBus*                                          UIBus;                                                      // 0x0748   (0x0008)  
	TArray<FWTLBulletImpactEffect>                     HitEffects;                                                 // 0x0750   (0x0010)  
	TArray<FWTLBulletImpactEffect>                     RicochetEffects;                                            // 0x0760   (0x0010)  
	TArray<FWTLFootstepEffect>                         FootstepEffects;                                            // 0x0770   (0x0010)  
	TArray<FWTLBulletFlyNearEffect>                    BulletFlyNearEffects;                                       // 0x0780   (0x0010)  
	TArray<FWTLCharacterDamageEffect>                  CharacterDamageEffects;                                     // 0x0790   (0x0010)  
	TArray<FWTLKnifeImpactEffect>                      KnifeHitEffects;                                            // 0x07A0   (0x0010)  
	TArray<FWTLCommonButtonSound>                      CommonButtonSounds;                                         // 0x07B0   (0x0010)  
	TArray<FWTLCommonClickedItemSound>                 CommonClickedItemSounds;                                    // 0x07C0   (0x0010)  
	TArray<FWTLSwitcherSound>                          SwitcherSounds;                                             // 0x07D0   (0x0010)  
	TArray<FWTLCheckBoxSound>                          CheckBoxSounds;                                             // 0x07E0   (0x0010)  
	TArray<FWTLComboBoxStringSound>                    ComboBoxStringSounds;                                       // 0x07F0   (0x0010)  
	TMap<EWTLCharacterClass, FWTLDefaultClassParameters> DefaultClassesParameters;                                 // 0x0800   (0x0050)  
	int32_t                                            MaleDefaultHeadPartID;                                      // 0x0850   (0x0004)  
	int32_t                                            MaleDefaultTorsoPartID;                                     // 0x0854   (0x0004)  
	int32_t                                            MaleDefaultLegsPartID;                                      // 0x0858   (0x0004)  
	int32_t                                            MaleDefaultFeetPartID;                                      // 0x085C   (0x0004)  
	int32_t                                            MaleDefaultGlassesPartID;                                   // 0x0860   (0x0004)  
	int32_t                                            MaleDefaultWatchesPartID;                                   // 0x0864   (0x0004)  
	int32_t                                            MaleMinerDefaultBackpackPartID;                             // 0x0868   (0x0004)  
	int32_t                                            MaleHunterDefaultBackpackPartID;                            // 0x086C   (0x0004)  
	int32_t                                            MaleMercenaryDefaultBackpackPartID;                         // 0x0870   (0x0004)  
	int32_t                                            MaleEngineerDefaultBackpackPartID;                          // 0x0874   (0x0004)  
	int32_t                                            FemaleDefaultHeadPartID;                                    // 0x0878   (0x0004)  
	int32_t                                            FemaleDefaultTorsoPartID;                                   // 0x087C   (0x0004)  
	int32_t                                            FemaleDefaultLegsPartID;                                    // 0x0880   (0x0004)  
	int32_t                                            FemaleDefaultFeetPartID;                                    // 0x0884   (0x0004)  
	int32_t                                            FemaleDefaultGlassesPartID;                                 // 0x0888   (0x0004)  
	int32_t                                            FemaleDefaultWatchesPartID;                                 // 0x088C   (0x0004)  
	int32_t                                            FemaleMinerDefaultBackpackPartID;                           // 0x0890   (0x0004)  
	int32_t                                            FemaleHunterDefaultBackpackPartID;                          // 0x0894   (0x0004)  
	int32_t                                            FemaleMercenaryDefaultBackpackPartID;                       // 0x0898   (0x0004)  
	int32_t                                            FemaleEngineerDefaultBackpackPartID;                        // 0x089C   (0x0004)  
	FLinearColor                                       MaleHairDefaultColor;                                       // 0x08A0   (0x0010)  
	FLinearColor                                       FemaleHairDefaultColor;                                     // 0x08B0   (0x0010)  
	FLinearColor                                       SkinDefaultColor;                                           // 0x08C0   (0x0010)  
	EWTLPlatform                                       DebugPlatform;                                              // 0x08D0   (0x0001)  
	bool                                               DebugViewportPositionForUI;                                 // 0x08D1   (0x0001)  
	bool                                               DebugIsFounder;                                             // 0x08D2   (0x0001)  
	bool                                               DebugHavePremium;                                           // 0x08D3   (0x0001)  
	bool                                               IsUseDebugCreditsAmount;                                    // 0x08D4   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x08D5   (0x0003)  MISSED
	int32_t                                            DebugCreditsAmount;                                         // 0x08D8   (0x0004)  
	bool                                               DebugShowHiddenStoreItems;                                  // 0x08DC   (0x0001)  
	EWTLPlayerType                                     DebugCharacterPlayerType;                                   // 0x08DD   (0x0001)  
	unsigned char                                      UnknownData07_5[0x2];                                       // 0x08DE   (0x0002)  MISSED
	FWTLDateTime                                       DebugCharacterCreationDate;                                 // 0x08E0   (0x0008)  
	EWTLSex                                            DebugCharacterSex;                                          // 0x08E8   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x08E9   (0x0003)  MISSED
	int32_t                                            DebugCharacterLevel;                                        // 0x08EC   (0x0004)  
	EWTLCharacterClass                                 DebugCharacterClass;                                        // 0x08F0   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x08F1   (0x0003)  MISSED
	int32_t                                            DebugCharacterBodyType;                                     // 0x08F4   (0x0004)  
	EWTLFaction                                        DebugCharacterFaction;                                      // 0x08F8   (0x0001)  
	bool                                               DebugCharacterIsInClan;                                     // 0x08F9   (0x0001)  
	unsigned char                                      UnknownData10_5[0x2];                                       // 0x08FA   (0x0002)  MISSED
	int32_t                                            DebugCharacterClanID;                                       // 0x08FC   (0x0004)  
	EWTLClanMemberType                                 DebugCharacterClanMemberType;                               // 0x0900   (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x0901   (0x0007)  MISSED
	TArray<FWTLDebugCharacterClanInfo>                 DebugCharacterClanInfoArray;                                // 0x0908   (0x0010)  
	int32_t                                            DebugCharacterID;                                           // 0x0918   (0x0004)  
	bool                                               DebugCheckMinLevelAndTimeForBarterAndUseMailBox;            // 0x091C   (0x0001)  
	bool                                               DebugCharacterCanUseAllItems;                               // 0x091D   (0x0001)  
	bool                                               bIsDebugDisablePlayInEditorCheckingInMainMenuCustomization; // 0x091E   (0x0001)  
	unsigned char                                      UnknownData12_5[0x1];                                       // 0x091F   (0x0001)  MISSED
	int32_t                                            DebugGameServerID;                                          // 0x0920   (0x0004)  
	int32_t                                            DebugCreditsToMoneyRate;                                    // 0x0924   (0x0004)  
	FString                                            DebugVOIPTestHost;                                          // 0x0928   (0x0010)  
	int32_t                                            DebugVOIPTestPort;                                          // 0x0938   (0x0004)  
	unsigned char                                      UnknownData13_5[0x4];                                       // 0x093C   (0x0004)  MISSED
	FString                                            DebugVOIPTestGUID;                                          // 0x0940   (0x0010)  
	FWTLClientAuthorizationResult                      AuthorizationInfo;                                          // 0x0950   (0x0128)  
	unsigned char                                      UnknownData14_5[0x8];                                       // 0x0A78   (0x0008)  MISSED
	FWTLLocalCharactersData                            LocalCharactersData;                                        // 0x0A80   (0x0050)  
	unsigned char                                      UnknownData15_5[0x20];                                      // 0x0AD0   (0x0020)  MISSED
	FWTLSettings                                       Settings;                                                   // 0x0AF0   (0x0420)  
	UWTLSecurityController*                            SecurityController;                                         // 0x0F10   (0x0008)  
	UWTLNetworkController*                             NetworkController;                                          // 0x0F18   (0x0008)  
	UWTLVoiceController*                               VoiceController;                                            // 0x0F20   (0x0008)  
	UWTLSharedData*                                    SharedData;                                                 // 0x0F28   (0x0008)  
	UWTLExperienceSystem*                              ExperienceSystem;                                           // 0x0F30   (0x0008)  
	UWTLSkillSystem*                                   SkillSystem;                                                // 0x0F38   (0x0008)  
	UWTLBallisticsSystem*                              BallisticsSystem;                                           // 0x0F40   (0x0008)  
	UWTLDamageSystem*                                  DamageSystem;                                               // 0x0F48   (0x0008)  
	UWTLItemSystem*                                    ItemSystem;                                                 // 0x0F50   (0x0008)  
	UWTLAchievementSystem*                             AchievementSystem;                                          // 0x0F58   (0x0008)  
	UWTLEconomicsSystem*                               EconomicsSystem;                                            // 0x0F60   (0x0008)  
	UWTLQuestSystem*                                   QuestSystem;                                                // 0x0F68   (0x0008)  
	UWTLReputationSystem*                              ReputationSystem;                                           // 0x0F70   (0x0008)  
	UWTLRankSystem*                                    RankSystem;                                                 // 0x0F78   (0x0008)  
	UWTLSecuritySystem*                                SecuritySystem;                                             // 0x0F80   (0x0008)  
	UWTLStatisticsSystem*                              StatisticsSystem;                                           // 0x0F88   (0x0008)  
	UWTLGeoSystem*                                     GeoSystem;                                                  // 0x0F90   (0x0008)  
	UWTLCharacterEffectsSystem*                        CharacterEffectsSystem;                                     // 0x0F98   (0x0008)  
	UWTLCustomizationSystem*                           CustomizationSystem;                                        // 0x0FA0   (0x0008)  
	UWTLDatabaseAdapter*                               DatabaseAdapter;                                            // 0x0FA8   (0x0008)  
	UWTLMailSystem*                                    MailSystem;                                                 // 0x0FB0   (0x0008)  
	UWTLSocialSystem*                                  SocialSystem;                                               // 0x0FB8   (0x0008)  
	UWTLCommandSystem*                                 CommandSystem;                                              // 0x0FC0   (0x0008)  
	UWTLNvidiaHighlightsLibrary*                       HighlightsLibrary;                                          // 0x0FC8   (0x0008)  
	UWTLScriptedEventsSystem*                          ScriptedEventsSystem;                                       // 0x0FD0   (0x0008)  
	TMap<EWTLSocialNetworkType, UWTLSocialNetworkAdapter*> SocialNetworkAdapters;                                  // 0x0FD8   (0x0050)  
	FText                                              DevelopmentStage;                                           // 0x1028   (0x0018)  
	TWeakObjectPtr<UClass*>                            LoadingScreenLocationWidgetClass;                           // 0x1040   (0x0028)  
	TWeakObjectPtr<UClass*>                            LoadingScreenSimpleWidgetClass;                             // 0x1068   (0x0028)  
	UCurveFloat*                                       RainDensityScaleByRainAlpha;                                // 0x1090   (0x0008)  
	UCurveFloat*                                       RainDensityScaleByHeavyRainAlpha;                           // 0x1098   (0x0008)  
	TWeakObjectPtr<UParticleSystem*>                   RainParticleSystem;                                         // 0x10A0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        RainAmbientSoundEvent;                                      // 0x10C8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SandStormAmbientSoundEvent;                                 // 0x10F0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        WindAmbientSoundEvent;                                      // 0x1118   (0x0028)  
	TWeakObjectPtr<UClass*>                            SkyBlueprintClass;                                          // 0x1140   (0x0028)  
	TWeakObjectPtr<UClass*>                            LightingBoltBlueprintClass;                                 // 0x1168   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        DefaultMarkerTexture;                                       // 0x1190   (0x0028)  
	TArray<FWTLMarkerInfo>                             Markers;                                                    // 0x11B8   (0x0010)  
	unsigned char                                      UnknownData16_6[0x20];                                      // 0x11C8   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLGameInstance.Tick
	bool Tick(float DeltaTime);                                                                                              // [0x17f6720] Final|Native|Private 
	// Function /Script/WTL.WTLGameInstance.SyncAccountInfoTimer
	void SyncAccountInfoTimer();                                                                                             // [0x17f6c40] Final|Native|Private 
	// Function /Script/WTL.WTLGameInstance.SetCanSendCode
	void SetCanSendCode();                                                                                                   // [0x17f3f80] Final|Native|Private 
	// Function /Script/WTL.WTLGameInstance.OnUpdateClanLeader
	void OnUpdateClanLeader(FWTLEvent& Event);                                                                               // [0x17f3fb0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnUpdateClanDescription
	void OnUpdateClanDescription(FWTLEvent& Event);                                                                          // [0x17f4160] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnUpdateClan
	void OnUpdateClan(FWTLEvent& Event);                                                                                     // [0x17f4b80] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnSyncAccountInfoResultEvent
	void OnSyncAccountInfoResultEvent(FWTLEvent& Event);                                                                     // [0x17f5240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnRemoveClanSkill
	void OnRemoveClanSkill(FWTLEvent& Event);                                                                                // [0x17f4310] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnRemoveClanMemberRequestEvent
	void OnRemoveClanMemberRequestEvent(FWTLEvent& Event);                                                                   // [0x17f5900] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnRemoveClanMember
	void OnRemoveClanMember(FWTLEvent& Event);                                                                               // [0x17f4820] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnPurchaseStoreItemsResultEvent
	void OnPurchaseStoreItemsResultEvent(FWTLEvent& Event);                                                                  // [0x17f5750] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnNewClanMemberRequestEvent
	void OnNewClanMemberRequestEvent(FWTLEvent& Event);                                                                      // [0x17f5ab0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnNewClanMember
	void OnNewClanMember(FWTLEvent& Event);                                                                                  // [0x17f49d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnLoadTransitionMap
	void OnLoadTransitionMap();                                                                                              // [0x17f6800] Final|Native|Private 
	// Function /Script/WTL.WTLGameInstance.OnInAppPaymentResultEvent
	void OnInAppPaymentResultEvent(FWTLEvent& Event);                                                                        // [0x17f53f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnGetSteamInventoryItemDefinitionsResponse
	void OnGetSteamInventoryItemDefinitionsResponse(FWTLResponse& Response);                                                 // [0x17f5d60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnGetClanMemberRequestListResponse
	void OnGetClanMemberRequestListResponse(FWTLResponse& Response);                                                         // [0x17f5e60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnGetClanListResponse
	void OnGetClanListResponse(FWTLResponse& Response);                                                                      // [0x17f5c60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnGetAccountAchievementsPercentageResponse
	void OnGetAccountAchievementsPercentageResponse(FWTLResponse& Response);                                                 // [0x17f5f60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnEACServerMessageEvent
	void OnEACServerMessageEvent(FWTLEvent& Event);                                                                          // [0x17f6850] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnDisconnected
	void OnDisconnected();                                                                                                   // [0x17f6bb0] Final|Native|Private 
	// Function /Script/WTL.WTLGameInstance.OnDeleteClan
	void OnDeleteClan(FWTLEvent& Event);                                                                                     // [0x17f4d30] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnConnected
	void OnConnected();                                                                                                      // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLGameInstance.OnCodeActivationResultEvent
	void OnCodeActivationResultEvent(FWTLEvent& Event);                                                                      // [0x17f5090] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnClanScoreChange
	void OnClanScoreChange(FWTLEvent& Event);                                                                                // [0x17f4670] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnCharacterMoveToLocationEvent
	void OnCharacterMoveToLocationEvent(FWTLEvent& Event);                                                                   // [0x17f6a00] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAddClanSkill
	void OnAddClanSkill(FWTLEvent& Event);                                                                                   // [0x17f44c0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAddClan
	void OnAddClan(FWTLEvent& Event);                                                                                        // [0x17f4ee0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAccountStatisticsParameterUpdate
	void OnAccountStatisticsParameterUpdate(FWTLEvent& Event);                                                               // [0x17f63c0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAccountInventoryItems
	void OnAccountInventoryItems(FWTLEvent& Event);                                                                          // [0x17f6060] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAccountBalanceChangedEvent
	void OnAccountBalanceChangedEvent(FWTLEvent& Event);                                                                     // [0x17f55a0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAccountAchievementsTrigger
	void OnAccountAchievementsTrigger(FWTLEvent& Event);                                                                     // [0x17f6210] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameInstance.OnAccountAchievementsAndStatsReceived
	void OnAccountAchievementsAndStatsReceived(FWTLEvent& Event);                                                            // [0x17f6570] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLGameMode
/// Size: 0x00E0 (0x000308 - 0x0003E8)
class AWTLGameMode : public AGameMode
{ 
public:
	unsigned char                                      UnknownData00_1[0xE0];                                      // 0x0308   (0x00E0)  MISSED
};

/// Class /Script/WTL.WTLGameModeZone
/// Size: 0x0010 (0x000258 - 0x000268)
class AWTLGameModeZone : public AVolume
{ 
public:
	bool                                               PVPEnabled;                                                 // 0x0258   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0259   (0x0003)  MISSED
	int32_t                                            RedirectSafeZoneID;                                         // 0x025C   (0x0004)  
	bool                                               ZoneEnabled;                                                // 0x0260   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0261   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLGameModeZone.OnVolumeEndOverlap
	void OnVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLGameModeZone.OnVolumeBeginOverlap
	void OnVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameModeZone.IsZoneEnabled
	bool IsZoneEnabled();                                                                                                    // [0x17f8d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGameModeZone.EnableZone
	void EnableZone();                                                                                                       // [0x17f8bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGameModeZone.DisableZone
	void DisableZone();                                                                                                      // [0x17f8ac0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLGameNetworkManager
/// Size: 0x0078 (0x0002D0 - 0x000348)
class AWTLGameNetworkManager : public AGameNetworkManager
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x02D0   (0x0078)  MISSED
};

/// Class /Script/WTL.WTLGameSession
/// Size: 0x0000 (0x000238 - 0x000238)
class AWTLGameSession : public AGameSession
{ 
public:
};

/// Class /Script/WTL.WTLGameState
/// Size: 0x0740 (0x000290 - 0x0009D0)
class AWTLGameState : public AGameState
{ 
public:
	unsigned char                                      UnknownData00_2[0xE4];                                      // 0x0290   (0x00E4)  MISSED
	float                                              m_WorldCurrentTime;                                         // 0x0374   (0x0004)  
	float                                              m_WorldTimeScale;                                           // 0x0378   (0x0004)  
	float                                              m_LastSyncServerWorldTime;                                  // 0x037C   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0380   (0x0004)  MISSED
	uint16_t                                           m_CreditsToMoneyRate;                                       // 0x0384   (0x0002)  
	unsigned char                                      UnknownData02_5[0xB2];                                      // 0x0386   (0x00B2)  MISSED
	TArray<FWTLMailPackageRecord>                      m_MailPackages;                                             // 0x0438   (0x0010)  
	TArray<FWTLAccountInventoryItemList>               m_AccountInventoryList;                                     // 0x0448   (0x0010)  
	unsigned char                                      UnknownData03_5[0x4F0];                                     // 0x0458   (0x04F0)  MISSED
	uint16_t                                           m_CurrentRadioTrack;                                        // 0x0948   (0x0002)  
	unsigned char                                      UnknownData04_5[0xE];                                       // 0x094A   (0x000E)  MISSED
	FWTLServerEventInfo                                m_ServerEventInfo;                                          // 0x0958   (0x0040)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x0998   (0x0008)  MISSED
	char                                               m_ServerKeepAlive;                                          // 0x09A0   (0x0001)  
	unsigned char                                      UnknownData06_5[0x2];                                       // 0x09A1   (0x0002)  MISSED
	bool                                               m_bIsReputationEnabled;                                     // 0x09A3   (0x0001)  
	unsigned char                                      UnknownData07_5[0x14];                                      // 0x09A4   (0x0014)  MISSED
	TArray<FWTLKillStats>                              KillsStatsInfo;                                             // 0x09B8   (0x0010)  
	int32_t                                            MaxCharacterLevelForPVEMode;                                // 0x09C8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x09CC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLGameState.OnWorldConfigChanged
	void OnWorldConfigChanged(FWTLEvent& Event);                                                                             // [0x17f9750] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnUpdateGroup
	void OnUpdateGroup(FWTLEvent& Event);                                                                                    // [0x17f9d90] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnUnmuteCharacter
	void OnUnmuteCharacter(FWTLEvent& Event);                                                                                // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnSyncAccountInfoResult
	void OnSyncAccountInfoResult(FWTLEvent& Event);                                                                          // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnServerEvent
	void OnServerEvent(FWTLEvent& Event);                                                                                    // [0x17f9be0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnRep_ServerKeepAlive
	void OnRep_ServerKeepAlive();                                                                                            // [0x17fa570] Final|Native|Private 
	// Function /Script/WTL.WTLGameState.OnRep_ServerEventInfo
	void OnRep_ServerEventInfo();                                                                                            // [0x17fa3d0] Final|Native|Private 
	// Function /Script/WTL.WTLGameState.OnRep_PlayersInfo
	void OnRep_PlayersInfo();                                                                                                // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLGameState.OnRep_KillsStatsInfo
	void OnRep_KillsStatsInfo();                                                                                             // [0x17fa6f0] Final|Native|Private 
	// Function /Script/WTL.WTLGameState.OnRep_CurrentRadioTrack
	void OnRep_CurrentRadioTrack();                                                                                          // [0xe77850] Final|Native|Public  
	// Function /Script/WTL.WTLGameState.OnRemoveMailPackage
	void OnRemoveMailPackage(FWTLEvent& Event);                                                                              // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnPutItemToAccountInventoryResult
	void OnPutItemToAccountInventoryResult(FWTLEvent& Event);                                                                // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnNewCharacterMailMessage
	void OnNewCharacterMailMessage(FWTLEvent& Event);                                                                        // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnMuteCharacter
	void OnMuteCharacter(FWTLEvent& Event);                                                                                  // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnMasterServerConsoleCommand
	void OnMasterServerConsoleCommand(FWTLEvent& Event);                                                                     // [0x17f9900] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnInAppPaymentResult
	void OnInAppPaymentResult(FWTLEvent& Event);                                                                             // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnGetItemFromAccountInventoryResult
	void OnGetItemFromAccountInventoryResult(FWTLEvent& Event);                                                              // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnDeleteGroup
	void OnDeleteGroup(FWTLEvent& Event);                                                                                    // [0x17f9f40] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnAddMailPackage
	void OnAddMailPackage(FWTLEvent& Event);                                                                                 // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnAddGroup
	void OnAddGroup(FWTLEvent& Event);                                                                                       // [0x17fa220] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.OnAccountInventoryItems
	void OnAccountInventoryItems(FWTLEvent& Event);                                                                          // [0x17de240] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLGameState.GetPlayerArrayInRadius
	TArray<AWTLCharacter*> GetPlayerArrayInRadius(FVector& Location, float Radius);                                          // [0x17f93e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLGameState.GetPlaceableStuffArray
	TArray<AWTLPlaceableStuff*> GetPlaceableStuffArray();                                                                    // [0x17f95a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLGameState.GetMonsterArrayInRadius
	TArray<AWTLMonsterPawn*> GetMonsterArrayInRadius(FVector& Location, float Radius);                                       // [0x17f90c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLGameState.GetMonsterArray
	TArray<AWTLMonsterPawn*> GetMonsterArray();                                                                              // [0x17f96c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLGameState.GetCharacterArray
	TArray<AWTLCharacter*> GetCharacterArray();                                                                              // [0x17f9630] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/WTL.WTLGameUserSettings
/// Size: 0x0040 (0x000120 - 0x000160)
class UWTLGameUserSettings : public UGameUserSettings
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0120   (0x0040)  MISSED
};

/// Class /Script/WTL.WTLGameViewportClient
/// Size: 0x0020 (0x000360 - 0x000380)
class UWTLGameViewportClient : public UGameViewportClient
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0360   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLGasGrenadeLauncherProjectile
/// Size: 0x0058 (0x0003E8 - 0x000440)
class AWTLGasGrenadeLauncherProjectile : public AWTLGrenadeLauncherProjectile
{ 
public:
	char                                               m_ParticleProgress;                                         // 0x03E8   (0x0001)  
	char                                               m_CollisionProgress;                                        // 0x03E9   (0x0001)  
	bool                                               m_bNeedDestroyParticles;                                    // 0x03EA   (0x0001)  
	unsigned char                                      UnknownData00_5[0x11];                                      // 0x03EB   (0x0011)  MISSED
	FVector                                            m_ExplodeLocation;                                          // 0x03FC   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0408   (0x0008)  MISSED
	UStaticMeshComponent*                              Cylinder;                                                   // 0x0410   (0x0008)  
	float                                              DamageValueToMonstersAndNPC;                                // 0x0418   (0x0004)  
	float                                              MinDamageValueToMonstersAndNPC;                             // 0x041C   (0x0004)  
	float                                              MaxChemicalEffectValue;                                     // 0x0420   (0x0004)  
	int32_t                                            MinCharactersLevelToMakeDamage;                             // 0x0424   (0x0004)  
	float                                              Distance;                                                   // 0x0428   (0x0004)  
	float                                              TimeBetweenHits;                                            // 0x042C   (0x0004)  
	float                                              TimeBetweenHitsToCharacter;                                 // 0x0430   (0x0004)  
	float                                              TimeToHideIdentify;                                         // 0x0434   (0x0004)  
	float                                              TimeToStopHideIdentify;                                     // 0x0438   (0x0004)  
	float                                              TimeToDestroyFX;                                            // 0x043C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.OnRep_ParticleProgress
	void OnRep_ParticleProgress();                                                                                           // [0x17fb5d0] Final|Native|Public  
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.OnRep_ExplodeLocation
	void OnRep_ExplodeLocation();                                                                                            // [0x17fb550] Final|Native|Public  
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.OnRep_DestroyParticles
	void OnRep_DestroyParticles();                                                                                           // [0x17fb5f0] Final|Native|Private 
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.OnRep_CollisionProgress
	void OnRep_CollisionProgress();                                                                                          // [0x17fb5b0] Final|Native|Public  
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.OnComponentHit
	void OnComponentHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x17fbcd0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.EndOverlap
	void EndOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17fb6b0] Final|Native|Private 
	// Function /Script/WTL.WTLGasGrenadeLauncherProjectile.BeginOverlap
	void BeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17fb920] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMissileWeaponProjectile
/// Size: 0x00C8 (0x000220 - 0x0002E8)
class AWTLMissileWeaponProjectile : public AWTLDynamicReplicatedActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	UStaticMeshComponent*                              MeshComp;                                                   // 0x0228   (0x0008)  
	UWTLProjectileMovementComponent*                   m_MovementComponent;                                        // 0x0230   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        SurfaceHitEvent;                                            // 0x0238   (0x0028)  
	FName                                              SurfaceHitNoiseName;                                        // 0x0260   (0x0008)  
	bool                                               MagicValue;                                                 // 0x0268   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0269   (0x0003)  MISSED
	float                                              m_ReplicatedInitialSpeed;                                   // 0x026C   (0x0004)  
	FVector                                            m_ThrowVector;                                              // 0x0270   (0x000C)  
	unsigned char                                      UnknownData02_5[0x48];                                      // 0x027C   (0x0048)  MISSED
	float                                              Damage;                                                     // 0x02C4   (0x0004)  
	float                                              MinDamage;                                                  // 0x02C8   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x02CC   (0x0004)  MISSED
	TArray<TEnumAsByte>                                DestructibleObjectTypes;                                    // 0x02D0   (0x0010)  
	float                                              DestructibleImpulse;                                        // 0x02E0   (0x0004)  
	float                                              DestructibleDamageMultiplier;                               // 0x02E4   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLMissileWeaponProjectile.OnRep_ReplicatedInitialSpeed
	void OnRep_ReplicatedInitialSpeed();                                                                                     // [0x18551c0] Final|Native|Private 
	// Function /Script/WTL.WTLMissileWeaponProjectile.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1854e90] Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/WTL.WTLGrenadeProjectile
/// Size: 0x0128 (0x0002E8 - 0x000410)
class AWTLGrenadeProjectile : public AWTLMissileWeaponProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x02E8   (0x0030)  MISSED
	AActor*                                            ExplosionActor;                                             // 0x0318   (0x0008)  
	TWeakObjectPtr<UClass*>                            ExplosionFX;                                                // 0x0320   (0x0028)  
	TWeakObjectPtr<UClass*>                            WaterExplosionFX;                                           // 0x0348   (0x0028)  
	TWeakObjectPtr<UClass*>                            WaterHit;                                                   // 0x0370   (0x0028)  
	int32_t                                            MaxHitCount;                                                // 0x0398   (0x0004)  
	bool                                               CanBeExplodedInWater;                                       // 0x039C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x039D   (0x0003)  MISSED
	float                                              ExplosionDelayMin;                                          // 0x03A0   (0x0004)  
	float                                              ExplosionDelayMax;                                          // 0x03A4   (0x0004)  
	float                                              ExplosionRadius;                                            // 0x03A8   (0x0004)  
	bool                                               ExplodesOnContact;                                          // 0x03AC   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x03AD   (0x0003)  MISSED
	float                                              EnergyShieldDamageMultiplier;                               // 0x03B0   (0x0004)  
	float                                              DamageToPlaceableStuff;                                     // 0x03B4   (0x0004)  
	int32_t                                            ShrapnelCountMin;                                           // 0x03B8   (0x0004)  
	int32_t                                            ShrapnelCountMax;                                           // 0x03BC   (0x0004)  
	float                                              ShrapnelDamageMin;                                          // 0x03C0   (0x0004)  
	float                                              ShrapnelDamageMax;                                          // 0x03C4   (0x0004)  
	float                                              ShrapnelRadius;                                             // 0x03C8   (0x0004)  
	float                                              ShrapnelRagdollImpulseMultiplier;                           // 0x03CC   (0x0004)  
	bool                                               ShrapnelUseReliableHitEvent;                                // 0x03D0   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x03D1   (0x0003)  MISSED
	float                                              DamageFalloff;                                              // 0x03D4   (0x0004)  
	bool                                               TacticalGrenade;                                            // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x03D9   (0x0003)  MISSED
	float                                              NewLifeSpan;                                                // 0x03DC   (0x0004)  
	unsigned char                                      UnknownData05_6[0x30];                                      // 0x03E0   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLGrenadeProjectile.Server_RequestExplode
	void Server_RequestExplode(FVector_NetQuantize ExplosionPosition);                                                       // [0x1801db0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLGrenadeProjectile.NetMulticast_OnExplosion
	void NetMulticast_OnExplosion(FVector_NetQuantize ExplosionPosition, float ExplosionDamage, FRotator Rotator);           // [0x1802590] Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults 
	// Function /Script/WTL.WTLGrenadeProjectile.GetUnprotectedCharacters
	TArray<AWTLCharacter*> GetUnprotectedCharacters();                                                                       // [0x18024d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGrenadeProjectile.GetProtectedPlaceableStuffs
	TArray<AActor*> GetProtectedPlaceableStuffs();                                                                           // [0x1802350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGrenadeProjectile.GetProtectedCharacters
	TArray<AWTLCharacter*> GetProtectedCharacters();                                                                         // [0x1802410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGrenadeProjectile.BPOnExplode
	void BPOnExplode();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeProjectile.BPOnApplyShrapnelDamageToMonster
	void BPOnApplyShrapnelDamageToMonster(AWTLMonsterPawn* Monster, float ActualDamage);                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeProjectile.BPOnApplyShrapnelDamageToEnemyNPC
	void BPOnApplyShrapnelDamageToEnemyNPC(AWTLEnemyNPC* EnemyNPC, float ActualDamage);                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGrenadeProjectile.BPOnApplyShrapnelDamageToCharacter
	void BPOnApplyShrapnelDamageToCharacter(AWTLCharacter* Character, float ActualDamage);                                   // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLGasGrenadeProjectile
/// Size: 0x0060 (0x000410 - 0x000470)
class AWTLGasGrenadeProjectile : public AWTLGrenadeProjectile
{ 
public:
	char                                               m_ParticleProgress;                                         // 0x0410   (0x0001)  
	char                                               m_CollisionProgress;                                        // 0x0411   (0x0001)  
	bool                                               m_bNeedDestroyParticles;                                    // 0x0412   (0x0001)  
	unsigned char                                      UnknownData00_5[0x19];                                      // 0x0413   (0x0019)  MISSED
	FVector                                            m_ExplodeLocation;                                          // 0x042C   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0438   (0x0008)  MISSED
	UStaticMeshComponent*                              Cylinder;                                                   // 0x0440   (0x0008)  
	float                                              DamageValueToMonstersAndNPC;                                // 0x0448   (0x0004)  
	int32_t                                            MinCharactersLevelToMakeDamage;                             // 0x044C   (0x0004)  
	float                                              MaxChemicalEffectValue;                                     // 0x0450   (0x0004)  
	float                                              MinDamageValueToMonstersAndNPC;                             // 0x0454   (0x0004)  
	float                                              Distance;                                                   // 0x0458   (0x0004)  
	float                                              TimeBetweenHits;                                            // 0x045C   (0x0004)  
	float                                              TimeBetweenHitsToCharacter;                                 // 0x0460   (0x0004)  
	float                                              TimeToHideIdentify;                                         // 0x0464   (0x0004)  
	float                                              TimeToStopHideIdentify;                                     // 0x0468   (0x0004)  
	float                                              TimeToDestroyFX;                                            // 0x046C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLGasGrenadeProjectile.OnRep_ParticleProgress
	void OnRep_ParticleProgress();                                                                                           // [0x17fc550] Final|Native|Public  
	// Function /Script/WTL.WTLGasGrenadeProjectile.OnRep_ExplodeLocation
	void OnRep_ExplodeLocation();                                                                                            // [0x17fc4d0] Final|Native|Public  
	// Function /Script/WTL.WTLGasGrenadeProjectile.OnRep_DestroyParticles
	void OnRep_DestroyParticles();                                                                                           // [0x17fc570] Final|Native|Private 
	// Function /Script/WTL.WTLGasGrenadeProjectile.OnRep_CollisionProgress
	void OnRep_CollisionProgress();                                                                                          // [0x17fc530] Final|Native|Public  
	// Function /Script/WTL.WTLGasGrenadeProjectile.EndOverlap
	void EndOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17fc630] Final|Native|Private 
	// Function /Script/WTL.WTLGasGrenadeProjectile.BeginOverlap
	void BeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17fc8a0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLGeoSystem
/// Size: 0x0028 (0x000028 - 0x000050)
class UWTLGeoSystem : public UObject
{ 
public:
	UWTLGameInstance*                                  m_GameInstance;                                             // 0x0028   (0x0008)  
	UWorld*                                            m_World;                                                    // 0x0030   (0x0008)  
	AWTLLevelScriptActor*                              m_LevelScriptActor;                                         // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0040   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLGlobalLevelObject
/// Size: 0x0030 (0x000220 - 0x000250)
class AWTLGlobalLevelObject : public AActor
{ 
public:
	int32_t                                            ID;                                                         // 0x0220   (0x0004)  
	EWTLGlobalLevelObjectType                          Type;                                                       // 0x0224   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0225   (0x0003)  MISSED
	int32_t                                            State;                                                      // 0x0228   (0x0004)  
	unsigned char                                      UnknownData01_6[0x24];                                      // 0x022C   (0x0024)  MISSED


	/// Functions
	// Function /Script/WTL.WTLGlobalLevelObject.SetStateInfoString
	void SetStateInfoString(FString ParamName, FString Value);                                                               // [0x17fd280] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.SetStateInfoInt32
	void SetStateInfoInt32(FString ParamName, int32_t Value);                                                                // [0x17fd5b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.SetStateInfoFloat
	void SetStateInfoFloat(FString ParamName, float Value);                                                                  // [0x17fd420] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.SetStateInfoBool
	void SetStateInfoBool(FString ParamName, bool Value);                                                                    // [0x17fd740] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.OnStateRestored
	void OnStateRestored();                                                                                                  // [0x17fd160] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.OnRep_State
	void OnRep_State(int32_t OldState);                                                                                      // [0x17d9640] Native|Protected     
	// Function /Script/WTL.WTLGlobalLevelObject.GetStateInfoString
	FString GetStateInfoString(FString ParamName, FString DefaultValue);                                                     // [0x17fd8d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGlobalLevelObject.GetStateInfoInt64
	int64_t GetStateInfoInt64(FString ParamName, int64_t DefaultValue);                                                      // [0x17fde90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGlobalLevelObject.GetStateInfoInt32
	int32_t GetStateInfoInt32(FString ParamName, int32_t DefaultValue);                                                      // [0x17fe0f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGlobalLevelObject.GetStateInfoFloat
	float GetStateInfoFloat(FString ParamName, float DefaultValue);                                                          // [0x17fdc10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGlobalLevelObject.GetStateInfoBool
	bool GetStateInfoBool(FString ParamName, bool DefaultValue);                                                             // [0x17fe340] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLGlobalLevelObject.ForceSaveState
	void ForceSaveState();                                                                                                   // [0x17fd260] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.ForceLoadState
	void ForceLoadState();                                                                                                   // [0x17fd1c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLGlobalLevelObject.BPPrepareStateInfo
	void BPPrepareStateInfo();                                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGlobalLevelObject.BPOnStateRestored
	void BPOnStateRestored();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLGlobalLevelObject.BPOnResetData
	void BPOnResetData();                                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLHealingDrone
/// Size: 0x0030 (0x0004D8 - 0x000508)
class AWTLHealingDrone : public AWTLDrone
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x04D8   (0x0004)  MISSED
	float                                              HealingPercenPerSec;                                        // 0x04DC   (0x0004)  
	UParticleSystemComponent*                          HealingRayLeft;                                             // 0x04E0   (0x0008)  
	UParticleSystemComponent*                          HealingRayRight;                                            // 0x04E8   (0x0008)  
	TArray<FName>                                      TargetBonesList;                                            // 0x04F0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0500   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHealingItem
/// Size: 0x0130 (0x000458 - 0x000588)
class AWTLHealingItem : public AWTLStuff
{ 
public:
	UParticleSystemComponent*                          HealingRay;                                                 // 0x0458   (0x0008)  
	UParticleSystemComponent*                          CharacterHealingEffect;                                     // 0x0460   (0x0008)  
	bool                                               HighlightCharacter;                                         // 0x0468   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0469   (0x0003)  MISSED
	int32_t                                            StencilValue;                                               // 0x046C   (0x0004)  
	TEnumAsByte<ETraceTypeQuery>                       InteractiveTrace;                                           // 0x0470   (0x0001)  
	unsigned char                                      UnknownData01_5[0x53];                                      // 0x0471   (0x0053)  MISSED
	float                                              Distance;                                                   // 0x04C4   (0x0004)  
	float                                              WorkDistance;                                               // 0x04C8   (0x0004)  
	float                                              SphereRadius;                                               // 0x04CC   (0x0004)  
	float                                              PercentPerUse;                                              // 0x04D0   (0x0004)  
	float                                              PercentPerUseMin;                                           // 0x04D4   (0x0004)  
	float                                              HealthPerUse;                                               // 0x04D8   (0x0004)  
	float                                              PercentPerUseToOwner;                                       // 0x04DC   (0x0004)  
	float                                              MaxAngleBetweenCharacters;                                  // 0x04E0   (0x0004)  
	float                                              MinHealthPercenToGetExp;                                    // 0x04E4   (0x0004)  
	float                                              MinDamageValue;                                             // 0x04E8   (0x0004)  
	float                                              MaxDamageValue;                                             // 0x04EC   (0x0004)  
	float                                              EnergyPerUse;                                               // 0x04F0   (0x0004)  
	bool                                               HealOwner;                                                  // 0x04F4   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x04F5   (0x0003)  MISSED
	float                                              StimulatorValue;                                            // 0x04F8   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x04FC   (0x0004)  MISSED
	TArray<EWTLCharacterEffectType>                    NegativeEffects;                                            // 0x0500   (0x0010)  
	float                                              ReputationDelta;                                            // 0x0510   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0514   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            HealingEffect;                                              // 0x0518   (0x0028)  
	TWeakObjectPtr<UClass*>                            HealingLight;                                               // 0x0540   (0x0028)  
	TEnumAsByte<ETraceTypeQuery>                       CollisionTraceQuery;                                        // 0x0568   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0569   (0x0003)  MISSED
	float                                              ReplicatedEnergyValue;                                      // 0x056C   (0x0004)  
	AWTLCharacter*                                     CharacterInFocus;                                           // 0x0570   (0x0008)  
	AWTLMonsterPawn*                                   MonsterInFocus;                                             // 0x0578   (0x0008)  
	bool                                               IsCharged;                                                  // 0x0580   (0x0001)  
	bool                                               bSpawnEffects;                                              // 0x0581   (0x0001)  
	bool                                               bDeactivateAllEffects;                                      // 0x0582   (0x0001)  
	unsigned char                                      UnknownData06_6[0x5];                                       // 0x0583   (0x0005)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHealingItem.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17db590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLHealingItem.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17db5c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLHealingItem.Server_SetCharacterInFocus
	void Server_SetCharacterInFocus(AWTLCharacter* NewCharacter, bool bAddNewHealer);                                        // [0x1803270] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLHealingItem.Server_MakeDamageToMonster
	void Server_MakeDamageToMonster(AWTLMonsterPawn* Monster);                                                               // [0x1802dc0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLHealingItem.Server_HealingProcess
	void Server_HealingProcess(AWTLCharacter* NewCharacter, bool bAddNewHealer);                                             // [0x1802e90] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLHealingItem.OnRep_SpawnEffectsNearCharacter
	void OnRep_SpawnEffectsNearCharacter();                                                                                  // [0x1802ae0] Final|Native|Public  
	// Function /Script/WTL.WTLHealingItem.OnRep_MonsterInFocus
	void OnRep_MonsterInFocus();                                                                                             // [0x1802c70] Final|Native|Public  
	// Function /Script/WTL.WTLHealingItem.OnRep_IsCharged
	void OnRep_IsCharged();                                                                                                  // [0x1802c10] Final|Native|Public  
	// Function /Script/WTL.WTLHealingItem.OnRep_EnergyValue
	void OnRep_EnergyValue();                                                                                                // [0x1802bc0] Final|Native|Public  
	// Function /Script/WTL.WTLHealingItem.OnRep_DeactivateAllEffects
	void OnRep_DeactivateAllEffects();                                                                                       // [0x1802ac0] Final|Native|Public  
	// Function /Script/WTL.WTLHealingItem.OnRep_CharacterInFocus
	void OnRep_CharacterInFocus();                                                                                           // [0x1802da0] Final|Native|Public  
	// Function /Script/WTL.WTLHealingItem.NetMulticast_OnUse
	void NetMulticast_OnUse(EWTLUsableItemUseType UseType);                                                                  // [0x1802fe0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLHealingItem.Client_SetEnergyOnMaterial
	void Client_SetEnergyOnMaterial();                                                                                       // [0x18030b0] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLHealingItem.Client_EffectsUnderWater
	void Client_EffectsUnderWater();                                                                                         // [0x1802b10] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLHealingItem.Client_Charge
	void Client_Charge(float Value);                                                                                         // [0x1803170] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/WTL.WTLHealingItem.BPSetLightOnMuzzle
	void BPSetLightOnMuzzle(bool Value);                                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHealingItem.BPSetEnergyOnMaterial
	void BPSetEnergyOnMaterial(float Value);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHealingItem.BPSetBeamsEndPoint
	void BPSetBeamsEndPoint(FVector EndPoint);                                                                               // [0x1ad0090] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLHealingItem.BPEffectsUnderWater
	void BPEffectsUnderWater();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHealingItem.BPDeactivateEffects
	void BPDeactivateEffects();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHealingItem.BPChargeItem
	void BPChargeItem(float Value);                                                                                          // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLHealthVolume
/// Size: 0x0008 (0x000258 - 0x000260)
class AWTLHealthVolume : public AVolume
{ 
public:
	bool                                               RecoverHealthAtBeginOverlap;                                // 0x0258   (0x0001)  
	bool                                               EndlessHealth;                                              // 0x0259   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x025A   (0x0006)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHealthVolume.OnVolumeEndOverlap
	void OnVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLHealthVolume.OnVolumeBeginOverlap
	void OnVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDBase
/// Size: 0x01E8 (0x000310 - 0x0004F8)
class AWTLHUDBase : public AHUD
{ 
public:
	UWTLCommonMessageDialog*                           m_MessageDialogWidget;                                      // 0x0310   (0x0008)  
	UWTLCommonCountdownWindow*                         m_CountdownWindowWidget;                                    // 0x0318   (0x0008)  
	UWTLCommonStore*                                   m_StoreWidget;                                              // 0x0320   (0x0008)  
	UWTLCommonMicrotransactionWindow*                  m_MicrotransactionWindowWidget;                             // 0x0328   (0x0008)  
	UWTLCommonTutorialWindow*                          m_TutorialWindowWidget;                                     // 0x0330   (0x0008)  
	UWTLCommonItemPreviewWindow*                       m_ItemPreviewWindowWidget;                                  // 0x0338   (0x0008)  
	UWTLCommonCharacterPreviewWindow*                  m_CharacterPreviewWindowWidget;                             // 0x0340   (0x0008)  
	UWTLCommonPremiumBonusesWindow*                    m_PremiumBonusesWindowWidget;                               // 0x0348   (0x0008)  
	UWTLCommonItemInformationWindow*                   m_ItemInformationWindowWidget;                              // 0x0350   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0358   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            MessageDialogWidgetClass;                                   // 0x0368   (0x0028)  
	TWeakObjectPtr<UClass*>                            ConfirmationDialogWidgetClass;                              // 0x0390   (0x0028)  
	TWeakObjectPtr<UClass*>                            CountdownWindowWidgetClass;                                 // 0x03B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            StoreWidgetClass;                                           // 0x03E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            MicrotransactionWindowWidgetClass;                          // 0x0408   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommonTutorialWindowWidgetClass;                            // 0x0430   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommonItemPreviewWindowWidgetClass;                         // 0x0458   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommonCharacterPreviewWindowWidgetClass;                    // 0x0480   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommonPremiumBonusesWindowWidgetClass;                      // 0x04A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommonItemInformationWindowWidgetClass;                     // 0x04D0   (0x0028)  
};

/// Class /Script/WTL.WTLHUD
/// Size: 0x12F8 (0x0004F8 - 0x0017F0)
class AWTLHUD : public AWTLHUDBase
{ 
public:
	UWTLHUDLayer*                                      m_InteractiveWidgetMainLayer;                               // 0x04F8   (0x0008)  
	UWTLHUDDamagePointer*                              m_DamagePointerWidget;                                      // 0x0500   (0x0008)  
	UWTLHUDPlayerStatus*                               m_PlayerStatusWidget;                                       // 0x0508   (0x0008)  
	UWTLHUDFastAccessSlots*                            m_FastAccessSlotsWidget;                                    // 0x0510   (0x0008)  
	UWTLHUDWeaponCountdown*                            m_WeaponCountdownWidget;                                    // 0x0518   (0x0008)  
	UWTLHUDWeaponInfo*                                 m_WeaponInfoWidget;                                         // 0x0520   (0x0008)  
	UWTLHUDMinimap*                                    m_MinimapWidget;                                            // 0x0528   (0x0008)  
	UWTLHUDCrosshair*                                  m_CrosshairWidget;                                          // 0x0530   (0x0008)  
	UWTLHUDInGameMenu*                                 m_InGameMenuWidget;                                         // 0x0538   (0x0008)  
	UWTLHUDObjectInfo*                                 m_ObjectInfoWidget;                                         // 0x0540   (0x0008)  
	UWTLHUDTextChatArea*                               m_TextChatAreaWidget;                                       // 0x0548   (0x0008)  
	UWTLHUDEventNotificator*                           m_EventNotificatorWidget;                                   // 0x0550   (0x0008)  
	UWTLHUDLevelBar*                                   m_LevelBarWidget;                                           // 0x0558   (0x0008)  
	UWTLHUDFPSCounter*                                 m_FPSCounterWidget;                                         // 0x0560   (0x0008)  
	UWTLHUDInteractiveSubstrate*                       m_InteractiveSubstrateWidget;                               // 0x0568   (0x0008)  
	UWTLHUDPlayerInventory*                            m_PlayerInventoryWidget;                                    // 0x0570   (0x0008)  
	UWTLHUDContentInventory*                           m_ContentInventoryWidget;                                   // 0x0578   (0x0008)  
	UWTLHUDTrade*                                      m_TradeWidget;                                              // 0x0580   (0x0008)  
	UWTLHUDRepair*                                     m_RepairWidget;                                             // 0x0588   (0x0008)  
	UWTLHUDExtractor*                                  m_ExtractorWidget;                                          // 0x0590   (0x0008)  
	UWTLHUDNPCDialogWindow*                            m_NPCDialogWindowWidget;                                    // 0x0598   (0x0008)  
	UWTLHUDItemSplitWindow*                            m_ItemSplitWindowWidget;                                    // 0x05A0   (0x0008)  
	UWTLHUDItemSplitBuyWindow*                         m_ItemSplitBuyWindowWidget;                                 // 0x05A8   (0x0008)  
	UWTLHUDItemViewWindow*                             m_ItemViewWindowWidget;                                     // 0x05B0   (0x0008)  
	UWTLHUDItemReadWindow*                             m_ItemReadWindowWidget;                                     // 0x05B8   (0x0008)  
	UWTLHUDGameVersionInfo*                            m_GameVersionInfoWidget;                                    // 0x05C0   (0x0008)  
	UWTLHUDActiveQuestInfo*                            m_ActiveQuestInfoWidget;                                    // 0x05C8   (0x0008)  
	UWTLHUDWarningTitle*                               m_WarningTitleWidget;                                       // 0x05D0   (0x0008)  
	UWTLHUDCharacterInfoWindow*                        m_CharacterInfoWindowWidget;                                // 0x05D8   (0x0008)  
	UWTLCommonActionWaiting*                           m_ActionWaitingWidget;                                      // 0x05E0   (0x0008)  
	UWTLCommonActionWaiting*                           m_ActionWaitingWidgetFullscreen;                            // 0x05E8   (0x0008)  
	UWTLHUDItemsCustomization*                         m_ItemsCustomizationWidget;                                 // 0x05F0   (0x0008)  
	UWTLHUDInformationDialogWindow*                    m_InformationDialogWindowWidget;                            // 0x05F8   (0x0008)  
	UWTLHUDServerEventInfo*                            m_ServerEventInfoWidget;                                    // 0x0600   (0x0008)  
	UWTLHUDActionTimer*                                m_ActionTimerWidget;                                        // 0x0608   (0x0008)  
	UWTLHUDMoneyTransferWindow*                        m_MoneyTransferWindowWidget;                                // 0x0610   (0x0008)  
	UWTLHUDCraft*                                      m_CraftWidget;                                              // 0x0618   (0x0008)  
	UWTLHUDCommissionAddUpdateWindow*                  m_CommissionAddUpdateWindowWidget;                          // 0x0620   (0x0008)  
	UWTLHUDItemPlacementHint*                          m_ItemPlacementHintWidget;                                  // 0x0628   (0x0008)  
	UWTLHUDObjectCraft*                                m_ObjectCraftWidget;                                        // 0x0630   (0x0008)  
	UWTLHUDRobotsCraft*                                m_RobotsCraftWidget;                                        // 0x0638   (0x0008)  
	UWTLHUDClanInfoWindow*                             m_ClanInfoWindowWidget;                                     // 0x0640   (0x0008)  
	UWTLHUDClanStorage*                                m_ClanStorageWidget;                                        // 0x0648   (0x0008)  
	UWTLHUDCommentaryWindow*                           m_CommentaryWindowWidget;                                   // 0x0650   (0x0008)  
	UWTLHUDClanStoragePolicyWindow*                    m_ClanStoragePolicyWindowWidget;                            // 0x0658   (0x0008)  
	UWTLHUDClanStorageTabImageSelectWindow*            m_ClanStorageTabImageSelectWindowWidget;                    // 0x0660   (0x0008)  
	UWTLHUDBarter*                                     m_BarterWidget;                                             // 0x0668   (0x0008)  
	UWTLHUDLoader*                                     m_LoaderWidget;                                             // 0x0670   (0x0008)  
	UWTLHUDSteamInventory*                             m_SteamInventoryWidget;                                     // 0x0678   (0x0008)  
	UWTLHUDRadialMenu*                                 m_RadialMenuWidget;                                         // 0x0680   (0x0008)  
	UWTLHUDFeedbackWindow*                             m_FeedbackWindowWidget;                                     // 0x0688   (0x0008)  
	UWTLHUDBulletinBoardWindow*                        m_BulletinBoardWindowWidget;                                // 0x0690   (0x0008)  
	UWTLHUDItemsModification*                          m_ItemsModificationWidget;                                  // 0x0698   (0x0008)  
	UWTLHUDBadConnection*                              m_BadConnectionWidget;                                      // 0x06A0   (0x0008)  
	UUserWidget*                                       m_QTEWidget;                                                // 0x06A8   (0x0008)  
	UWTLHUDMailBox*                                    m_MailBoxWidget;                                            // 0x06B0   (0x0008)  
	UWTLHUDArenaState*                                 m_ArenaStateWidget;                                         // 0x06B8   (0x0008)  
	UWTLHUDArenaStateLeaderboardWindow*                m_ArenaStateLeaderboardWindowWidget;                        // 0x06C0   (0x0008)  
	UWTLHUDEmotionStateExitHint*                       m_EmotionStateExitHintWidget;                               // 0x06C8   (0x0008)  
	UWTLHUDThrowingStateExitHint*                      m_ThrowingStateExitHintWidget;                              // 0x06D0   (0x0008)  
	UWTLHUDLevelUp*                                    m_LevelUpWidget;                                            // 0x06D8   (0x0008)  
	UWTLHUDEventPointInfo*                             m_EventPointInfoWidget;                                     // 0x06E0   (0x0008)  
	UWTLHUDArenaRewardWindow*                          m_ArenaRewardWindowWidget;                                  // 0x06E8   (0x0008)  
	UWTLHUDChangeClassWindow*                          m_ChangeClassWindowWidget;                                  // 0x06F0   (0x0008)  
	UWTLHUDSwitchInfoWidgetsHint*                      m_SwitchInfoWidgetsHintWidget;                              // 0x06F8   (0x0008)  
	UWTLHUDSteamInventoryNewItemsWindow*               m_SteamInventoryNewItemsWindowWidget;                       // 0x0700   (0x0008)  
	UWTLHUDClanStorageTabBuyWindow*                    m_ClanStorageTabBuyWindowWidget;                            // 0x0708   (0x0008)  
	UWTLHUDEventMessageWindow*                         m_EventMessageWindowWidget;                                 // 0x0710   (0x0008)  
	UWTLHUDSlotMachinePayTableWindow*                  m_SlotMachinePayTableWindowWidget;                          // 0x0718   (0x0008)  
	UWTLHUDSlotMachineRewardWindow*                    m_SlotMachineRewardWindowWidget;                            // 0x0720   (0x0008)  
	UWTLHUDAccountInventory*                           m_AccountInventoryWidget;                                   // 0x0728   (0x0008)  
	UWTLHUDAchievementUnlocked*                        m_AchievementUnlockedWidget;                                // 0x0730   (0x0008)  
	UWTLHUDJunkMachine*                                m_JunkMachineWidget;                                        // 0x0738   (0x0008)  
	UWTLHUDObstacleCourseHelpWindow*                   m_ObstacleCourseHelpWindowWidget;                           // 0x0740   (0x0008)  
	UWTLHUDIndicators*                                 m_IndicatorsWidget;                                         // 0x0748   (0x0008)  
	UWTLHUDQuestInformationWindow*                     m_QuestInformationWindowWidget;                             // 0x0750   (0x0008)  
	UWTLHUDQuestDependenciesWindow*                    m_QuestDependenciesWindowWidget;                            // 0x0758   (0x0008)  
	UWTLHUDTeleportationDeviceWindow*                  m_TeleportationDeviceWindowWidget;                          // 0x0760   (0x0008)  
	UWTLHUDVehicleExitHint*                            m_VehicleExitHintWidget;                                    // 0x0768   (0x0008)  
	UWTLHUDFinishFishingHint*                          m_FinishFishingHintWidget;                                  // 0x0770   (0x0008)  
	UWTLHUDGroupInfo*                                  m_GroupInfoWidget;                                          // 0x0778   (0x0008)  
	UWTLHUDPlayersTableWindow*                         m_PlayersTableWindowWidget;                                 // 0x0780   (0x0008)  
	UWTLHUDBreakWeaponItem*                            m_BreakWeaponItemWidget;                                    // 0x0788   (0x0008)  
	UWTLHUDWeaponPartsExchange*                        m_WeaponPartsExchangeWidget;                                // 0x0790   (0x0008)  
	UWTLHUDGodConsole*                                 m_GodConsoleWidget;                                         // 0x0798   (0x0008)  
	UWTLHUDInventory*                                  m_InventoryWidget;                                          // 0x07A0   (0x0008)  
	UWTLHUDSpectatorModeExitHint*                      m_SpectatorModeExitHintWidget;                              // 0x07A8   (0x0008)  
	UWTLHUDMonsterState*                               m_MonsterStateWidget;                                       // 0x07B0   (0x0008)  
	UWTLHUDMonsterAbilities*                           m_MonsterAbilitiesWidget;                                   // 0x07B8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x07C0   (0x0040)  MISSED
	UWTLPDAMain*                                       m_PDAWidget;                                                // 0x0800   (0x0008)  
	UWTLHUDRequestWindow*                              m_RequestWindowWidget;                                      // 0x0808   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0810   (0x0008)  MISSED
	UWTLHUDInteractiveWidget*                          m_CurrentInteractiveWidget;                                 // 0x0818   (0x0008)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x0820   (0x0010)  MISSED
	TArray<UWTLHUDWidgetBase*>                         m_HiddenHUDVisibleWidget;                                   // 0x0830   (0x0010)  
	TArray<UWTLHUDWidgetBase*>                         m_PreviousWidgetExceptions;                                 // 0x0840   (0x0010)  
	unsigned char                                      UnknownData03_5[0x28];                                      // 0x0850   (0x0028)  MISSED
	TArray<UWTLHUDInfoWidget*>                         m_InfoWidgets;                                              // 0x0878   (0x0010)  
	UWTLHUDInfoWidget*                                 m_CurrentInfoWidget;                                        // 0x0888   (0x0008)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x0890   (0x0008)  MISSED
	FMulticastInlineDelegate                           OnToggleHUDVisibility;                                      // 0x0898   (0x0010)  
	FMulticastInlineDelegate                           OnToggleFullScreenWidgetVisibility;                         // 0x08A8   (0x0010)  
	bool                                               bIsPermissionToShowHUD;                                     // 0x08B8   (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x08B9   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            LayerClass;                                                 // 0x08C0   (0x0028)  
	TWeakObjectPtr<UClass*>                            DamagePointerWidgetClass;                                   // 0x08E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            PlayerStatusWidgetClass;                                    // 0x0910   (0x0028)  
	TWeakObjectPtr<UClass*>                            FastAccessSlotsWidgetClass;                                 // 0x0938   (0x0028)  
	TWeakObjectPtr<UClass*>                            WeaponCountdownWidgetClass;                                 // 0x0960   (0x0028)  
	TWeakObjectPtr<UClass*>                            WeaponInfoWidgetClass;                                      // 0x0988   (0x0028)  
	TWeakObjectPtr<UClass*>                            MinimapWidgetClass;                                         // 0x09B0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CrosshairWidgetClass;                                       // 0x09D8   (0x0028)  
	TWeakObjectPtr<UClass*>                            InGameMenuWidgetClass;                                      // 0x0A00   (0x0028)  
	TWeakObjectPtr<UClass*>                            ObjectInfoWidgetClass;                                      // 0x0A28   (0x0028)  
	TWeakObjectPtr<UClass*>                            TextChatAreaWidgetClass;                                    // 0x0A50   (0x0028)  
	TWeakObjectPtr<UClass*>                            EventNotificatorWidgetClass;                                // 0x0A78   (0x0028)  
	TWeakObjectPtr<UClass*>                            LevelBarWidgetClass;                                        // 0x0AA0   (0x0028)  
	TWeakObjectPtr<UClass*>                            FPSCounterWidgetClass;                                      // 0x0AC8   (0x0028)  
	TWeakObjectPtr<UClass*>                            InteractiveSubstrateWidgetClass;                            // 0x0AF0   (0x0028)  
	TWeakObjectPtr<UClass*>                            PlayerInventoryWidgetClass;                                 // 0x0B18   (0x0028)  
	TWeakObjectPtr<UClass*>                            ContentInventoryWidgetClass;                                // 0x0B40   (0x0028)  
	TWeakObjectPtr<UClass*>                            TradeWidgetClass;                                           // 0x0B68   (0x0028)  
	TWeakObjectPtr<UClass*>                            RepairWidgetClass;                                          // 0x0B90   (0x0028)  
	TWeakObjectPtr<UClass*>                            ExtractorWidgetClass;                                       // 0x0BB8   (0x0028)  
	TWeakObjectPtr<UClass*>                            PDAWidgetClass;                                             // 0x0BE0   (0x0028)  
	TWeakObjectPtr<UClass*>                            StoreMessageDialogWidgetClass;                              // 0x0C08   (0x0028)  
	TWeakObjectPtr<UClass*>                            NPCDialogWindowWidgetClass;                                 // 0x0C30   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemSplitWindowWidgetClass;                                 // 0x0C58   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemSplitBuyWindowWidgetClass;                              // 0x0C80   (0x0028)  
	TWeakObjectPtr<UClass*>                            HUDItemInformationWindowWidgetClass;                        // 0x0CA8   (0x0028)  
	TWeakObjectPtr<UClass*>                            HUDItemPreviewWindowWidgetClass;                            // 0x0CD0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemViewWindowWidgetClass;                                  // 0x0CF8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemReadWindowWidgetClass;                                  // 0x0D20   (0x0028)  
	TWeakObjectPtr<UClass*>                            GameVersionInfoWidgetClass;                                 // 0x0D48   (0x0028)  
	TWeakObjectPtr<UClass*>                            ActiveQuestInfoWidgetClass;                                 // 0x0D70   (0x0028)  
	TWeakObjectPtr<UClass*>                            WarningTitleWidgetClass;                                    // 0x0D98   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterInfoWindowWidgetClass;                             // 0x0DC0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ActionWaitingWidgetClass;                                   // 0x0DE8   (0x0028)  
	TWeakObjectPtr<UClass*>                            StoreActionWaitingWidgetClass;                              // 0x0E10   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemsCustomizationWidgetClass;                              // 0x0E38   (0x0028)  
	TWeakObjectPtr<UClass*>                            InformationDialogWindowWidgetClass;                         // 0x0E60   (0x0028)  
	TWeakObjectPtr<UClass*>                            ServerEventInfoWidgetClass;                                 // 0x0E88   (0x0028)  
	TWeakObjectPtr<UClass*>                            ActionTimerWidgetClass;                                     // 0x0EB0   (0x0028)  
	TWeakObjectPtr<UClass*>                            MoneyTransferWindowWidgetClass;                             // 0x0ED8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CraftWidgetClass;                                           // 0x0F00   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommissionAddUpdateWindowWidgetClass;                       // 0x0F28   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPlacementItemWidgetClass;                               // 0x0F50   (0x0028)  
	TWeakObjectPtr<UClass*>                            ObjectCraftWidgetClass;                                     // 0x0F78   (0x0028)  
	TWeakObjectPtr<UClass*>                            RobotsCraftWidgetClass;                                     // 0x0FA0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanInfoWindowWidgetClass;                                  // 0x0FC8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStorageWidgetClass;                                     // 0x0FF0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommentaryWindowWidgetClass;                                // 0x1018   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStoragePolicyWindowWidgetClass;                         // 0x1040   (0x0028)  
	TWeakObjectPtr<UClass*>                            RequestWindowWidgetClass;                                   // 0x1068   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStorageTabImageSelectWindowWidgetClass;                 // 0x1090   (0x0028)  
	TWeakObjectPtr<UClass*>                            BarterWidgetClass;                                          // 0x10B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            LoaderWidgetClass;                                          // 0x10E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            SteamInventoryWidgetClass;                                  // 0x1108   (0x0028)  
	TWeakObjectPtr<UClass*>                            RadialMenuWidgetClass;                                      // 0x1130   (0x0028)  
	TWeakObjectPtr<UClass*>                            FeedbackWindowWidgetClass;                                  // 0x1158   (0x0028)  
	TWeakObjectPtr<UClass*>                            BulletinBoardWindowWidgetClass;                             // 0x1180   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemsModificationWidgetClass;                               // 0x11A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            BadConnectionWidgetClass;                                   // 0x11D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            QTEPanelWidgetClass;                                        // 0x11F8   (0x0028)  
	TWeakObjectPtr<UClass*>                            QTEFishingWidgetClass;                                      // 0x1220   (0x0028)  
	TWeakObjectPtr<UClass*>                            HUDTutorialWindowWidgetClass;                               // 0x1248   (0x0028)  
	TWeakObjectPtr<UClass*>                            MailBoxWidgetClass;                                         // 0x1270   (0x0028)  
	TWeakObjectPtr<UClass*>                            ArenaStateWidgetClass;                                      // 0x1298   (0x0028)  
	TWeakObjectPtr<UClass*>                            ArenaStateLeaderboardWindowWidgetClass;                     // 0x12C0   (0x0028)  
	TWeakObjectPtr<UClass*>                            EmotionStateExitHintWidgetClass;                            // 0x12E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ThrowingStateExitHintWidgetClass;                           // 0x1310   (0x0028)  
	TWeakObjectPtr<UClass*>                            LevelUpWidgetClass;                                         // 0x1338   (0x0028)  
	TWeakObjectPtr<UClass*>                            InventoryWidgetClass;                                       // 0x1360   (0x0028)  
	TWeakObjectPtr<UClass*>                            EventPointInfoWidgetClass;                                  // 0x1388   (0x0028)  
	TWeakObjectPtr<UClass*>                            ArenaRewardWindowWidgetClass;                               // 0x13B0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ChangeClassWindowWidgetClass;                               // 0x13D8   (0x0028)  
	TWeakObjectPtr<UClass*>                            HUDCharacterPreviewWindowWidgetClass;                       // 0x1400   (0x0028)  
	TWeakObjectPtr<UClass*>                            SwitchInfoWidgetsHintWidgetClass;                           // 0x1428   (0x0028)  
	TWeakObjectPtr<UClass*>                            SteamInventoryNewItemsWindowWidgetClass;                    // 0x1450   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStorageTabBuyWindowWidgetClass;                         // 0x1478   (0x0028)  
	TWeakObjectPtr<UClass*>                            EventMessageWindowWidgetClass;                              // 0x14A0   (0x0028)  
	TWeakObjectPtr<UClass*>                            SlotMachinePayTableWindowWidgetClass;                       // 0x14C8   (0x0028)  
	TWeakObjectPtr<UClass*>                            SlotMachineRewardWindowWidgetClass;                         // 0x14F0   (0x0028)  
	TWeakObjectPtr<UClass*>                            AccountInventoryWidgetClass;                                // 0x1518   (0x0028)  
	TWeakObjectPtr<UClass*>                            AchievementUnlockedWidgetClass;                             // 0x1540   (0x0028)  
	TWeakObjectPtr<UClass*>                            JunkMachineWidgetClass;                                     // 0x1568   (0x0028)  
	TWeakObjectPtr<UClass*>                            ObstacleCourseHelpWindowWidgetClass;                        // 0x1590   (0x0028)  
	TWeakObjectPtr<UClass*>                            IndicatorsWidgetClass;                                      // 0x15B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            QuestInformationWindowWidgetClass;                          // 0x15E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            QuestDependenciesWindowWidgetClass;                         // 0x1608   (0x0028)  
	TWeakObjectPtr<UClass*>                            TeleportationDeviceWindowWidgetClass;                       // 0x1630   (0x0028)  
	TWeakObjectPtr<UClass*>                            VehicleExitHintWidgetClass;                                 // 0x1658   (0x0028)  
	TWeakObjectPtr<UClass*>                            FinishFishingHintWidgetClass;                               // 0x1680   (0x0028)  
	TWeakObjectPtr<UClass*>                            GroupInfoWidgetClass;                                       // 0x16A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            PlayersTableWindowWidgetClass;                              // 0x16D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            BreakWeaponItemWidgetClass;                                 // 0x16F8   (0x0028)  
	TWeakObjectPtr<UClass*>                            WeaponPartsExchangeWidgetClass;                             // 0x1720   (0x0028)  
	TWeakObjectPtr<UClass*>                            GodConsoleWidgetClass;                                      // 0x1748   (0x0028)  
	TWeakObjectPtr<UClass*>                            SpectatorModeExitHintWidgetClass;                           // 0x1770   (0x0028)  
	TWeakObjectPtr<UClass*>                            MonsterStateWidgetClass;                                    // 0x1798   (0x0028)  
	TWeakObjectPtr<UClass*>                            MonsterAbilitiesWidgetClass;                                // 0x17C0   (0x0028)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x17E8   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUD.OnArenaMatchStarted
	void OnArenaMatchStarted();                                                                                              // [0x1804160] Final|Native|Private 
	// Function /Script/WTL.WTLHUD.OnArenaMatchEnded
	void OnArenaMatchEnded(EWTLFaction WinningFaction, TArray<FWTLArenaLeaderboardRecord>& Leaderboard);                     // [0x1803fd0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDWidgetBase
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLHUDWidgetBase : public UWTLWidgetBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0260   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDInteractiveWidget
/// Size: 0x0010 (0x000268 - 0x000278)
class UWTLHUDInteractiveWidget : public UWTLHUDWidgetBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0268   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLHUDAccountInventory
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDAccountInventory : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDAccountInventoryWindow*                     ucAccountInventoryWindow;                                   // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDAccountInventoryDropArea
/// Size: 0x0088 (0x000260 - 0x0002E8)
class UWTLHUDAccountInventoryDropArea : public UUserWidget
{ 
public:
	UBackgroundBlur*                                   bBackgroundBlur;                                            // 0x0260   (0x0008)  
	UWidgetSwitcher*                                   wsDropArea;                                                 // 0x0268   (0x0008)  
	UWidgetSwitcher*                                   wsCannotActionType;                                         // 0x0270   (0x0008)  
	UWidgetSwitcher*                                   wsCannotPutText;                                            // 0x0278   (0x0008)  
	UWidgetSwitcher*                                   wsCannotTakeText;                                           // 0x0280   (0x0008)  
	UWidgetSwitcher*                                   wsCanPutText;                                               // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x48];                                      // 0x0290   (0x0048)  MISSED
	UWidgetAnimation*                                  CannotPutAnimation;                                         // 0x02D8   (0x0008)  
	UWidgetAnimation*                                  CanPutAnimation;                                            // 0x02E0   (0x0008)  
};

/// Class /Script/WTL.WTLHUDItemTypeSlot
/// Size: 0x0138 (0x000260 - 0x000398)
class UWTLHUDItemTypeSlot : public UUserWidget
{ 
public:
	UImage*                                            imgItemType;                                                // 0x0260   (0x0008)  
	UTextBlock*                                        tbItemTypeID;                                               // 0x0268   (0x0008)  
	UBorder*                                           bAmmoType;                                                  // 0x0270   (0x0008)  
	UTextBlock*                                        tbAmmoType;                                                 // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0280   (0x0028)  MISSED
	UWTLCommonPopupMenu*                               m_ItemPopupMenuWidget;                                      // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x02B0   (0x0008)  MISSED
	UImage*                                            imgItem;                                                    // 0x02B8   (0x0008)  
	UTextBlock*                                        tbItemCount;                                                // 0x02C0   (0x0008)  
	UMenuAnchor*                                       maItem;                                                     // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData02_5[0x38];                                      // 0x02D0   (0x0038)  MISSED
	UWTLHUDItemInformationShort*                       m_ItemInformationShortWidget;                               // 0x0308   (0x0008)  
	TWeakObjectPtr<UClass*>                            HUDPopupMenuWidgetClass;                                    // 0x0310   (0x0028)  
	TWeakObjectPtr<UClass*>                            PDAPopupMenuWidgetClass;                                    // 0x0338   (0x0028)  
	bool                                               bUsePDAPopupMenuWidgetClass;                                // 0x0360   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0361   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            ItemInformationShortWidgetClass;                            // 0x0368   (0x0028)  
	bool                                               AllowToReadOrViewItem;                                      // 0x0390   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0391   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDItemTypeSlot.ViewItem
	void ViewItem();                                                                                                         // [0x1829c20] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemTypeSlot.ShowItemInformation
	void ShowItemInformation();                                                                                              // [0x1829be0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemTypeSlot.ReadItem
	void ReadItem();                                                                                                         // [0x1829c00] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemTypeSlot.OnMenuOpenChanged
	void OnMenuOpenChanged(bool bIsOpen);                                                                                    // [0x1829c40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemTypeSlot.OnGetItemMenuContent
	UWidget* OnGetItemMenuContent();                                                                                         // [0x1829d20] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDAccountInventorySlot
/// Size: 0x0060 (0x000398 - 0x0003F8)
class UWTLHUDAccountInventorySlot : public UWTLHUDItemTypeSlot
{ 
public:
	UCanvasPanel*                                      cpContent;                                                  // 0x0398   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x03A0   (0x0018)  MISSED
	TWeakObjectPtr<UClass*>                            DraggedSlotClass;                                           // 0x03B8   (0x0028)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x03E0   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDAccountInventorySlot.TakeItemFromAccountInventory
	void TakeItemFromAccountInventory();                                                                                     // [0x1806d10] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDWindowBase
/// Size: 0x0000 (0x000288 - 0x000288)
class UWTLHUDWindowBase : public UWTLCommonWindowBase
{ 
public:
};

/// Class /Script/WTL.WTLHUDAccountInventoryWindow
/// Size: 0x0170 (0x000288 - 0x0003F8)
class UWTLHUDAccountInventoryWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbPutItemsHint;                                             // 0x0288   (0x0008)  
	UBorder*                                           bItems;                                                     // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsItems;                                                    // 0x0298   (0x0008)  
	UScrollBox*                                        sbItems;                                                    // 0x02A0   (0x0008)  
	UWrapBox*                                          wbItems;                                                    // 0x02A8   (0x0008)  
	UWTLHUDAccountInventoryDropArea*                   ucItemsDropArea;                                            // 0x02B0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnUpdateItems;                                           // 0x02B8   (0x0008)  
	TArray<FWTLAccountInventoryItem>                   m_DebugAccountInventoryItems;                               // 0x02C0   (0x0010)  
	unsigned char                                      UnknownData00_5[0xD8];                                      // 0x02D0   (0x00D8)  MISSED
	TArray<UWTLHUDInventorySlot*>                      m_AccountInventorySlots;                                    // 0x03A8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x03B8   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            InventorySlotWidgetClass;                                   // 0x03C8   (0x0028)  
	bool                                               bIsGenerateNewDebugItemsDataWhenUpdate;                     // 0x03F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x03F1   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDAccountInventoryWindow.TakeItemConfirmed
	void TakeItemConfirmed();                                                                                                // [0x1807130] Final|Native|Private 
	// Function /Script/WTL.WTLHUDAccountInventoryWindow.PutItemConfirmed
	void PutItemConfirmed();                                                                                                 // [0x1807100] Final|Native|Private 
	// Function /Script/WTL.WTLHUDAccountInventoryWindow.OnUpdateItemsButtonClicked
	void OnUpdateItemsButtonClicked();                                                                                       // [0x1807260] Final|Native|Private 
	// Function /Script/WTL.WTLHUDAccountInventoryWindow.OnItemsScrollBoxUserScrolled
	void OnItemsScrollBoxUserScrolled(float CurrentOffset);                                                                  // [0x1807160] Final|Native|Private 
	// Function /Script/WTL.WTLHUDAccountInventoryWindow.OnAccountInventoryItemsUpdated
	void OnAccountInventoryItemsUpdated(TArray<FWTLAccountInventoryItem>& AccountInventoryItems);                            // [0x18072c0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDAchievementUnlocked
/// Size: 0x0070 (0x000268 - 0x0002D8)
class UWTLHUDAchievementUnlocked : public UWTLHUDWidgetBase
{ 
public:
	UImage*                                            imgAchievement;                                             // 0x0268   (0x0008)  
	UTextBlock*                                        tbAchievementName;                                          // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x24];                                      // 0x0278   (0x0024)  MISSED
	float                                              HideDelayTime;                                              // 0x029C   (0x0004)  
	TWeakObjectPtr<UFMODEvent*>                        AchievementUnlockedSoundEvent;                              // 0x02A0   (0x0028)  
	UWidgetAnimation*                                  ShowAnimation;                                              // 0x02C8   (0x0008)  
	UWidgetAnimation*                                  HideAnimation;                                              // 0x02D0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDAchievementUnlocked.OnShowAnimationFinished
	void OnShowAnimationFinished();                                                                                          // [0x1807610] Final|Native|Private 
	// Function /Script/WTL.WTLHUDAchievementUnlocked.OnHideAnimationFinished
	void OnHideAnimationFinished();                                                                                          // [0x18075f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDActionTimer
/// Size: 0x0048 (0x000268 - 0x0002B0)
class UWTLHUDActionTimer : public UWTLHUDWidgetBase
{ 
public:
	UWTLCommonCountdownSlider*                         ucCountdownSlider;                                          // 0x0268   (0x0008)  
	UImage*                                            imgActionTimerType;                                         // 0x0270   (0x0008)  
	UImage*                                            imgReady;                                                   // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0280   (0x0018)  MISSED
	UWidgetAnimation*                                  ReadyAnimation;                                             // 0x0298   (0x0008)  
	TArray<FWTLActionTimerWidgetType>                  ActionTimerWidgetTypes;                                     // 0x02A0   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDActionTimer.OnReadyAnimationFinished
	void OnReadyAnimationFinished();                                                                                         // [0x1807760] Final|Native|Private 
	// Function /Script/WTL.WTLHUDActionTimer.OnCountdownSliderFinished
	void OnCountdownSliderFinished();                                                                                        // [0x18077a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDInfoWidget
/// Size: 0x0000 (0x000268 - 0x000268)
class UWTLHUDInfoWidget : public UWTLHUDWidgetBase
{ 
public:
};

/// Class /Script/WTL.WTLHUDActiveQuestInfo
/// Size: 0x00C8 (0x000268 - 0x000330)
class UWTLHUDActiveQuestInfo : public UWTLHUDInfoWidget
{ 
public:
	UTextBlock*                                        tbQuestName;                                                // 0x0268   (0x0008)  
	UImage*                                            imgQuestIcon;                                               // 0x0270   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucItemStartQuest;                                           // 0x0278   (0x0008)  
	UTextBlock*                                        tbCustomTextRequirement;                                    // 0x0280   (0x0008)  
	UHorizontalBox*                                    hbRequiredMoney;                                            // 0x0288   (0x0008)  
	UTextBlock*                                        tbRequiredMoney;                                            // 0x0290   (0x0008)  
	UImage*                                            imgRequiredMoneyReady;                                      // 0x0298   (0x0008)  
	UPanelWidget*                                      pwRequiredItems;                                            // 0x02A0   (0x0008)  
	UVerticalBox*                                      vbRequiredKills;                                            // 0x02A8   (0x0008)  
	UVerticalBox*                                      vbCustomRequirements;                                       // 0x02B0   (0x0008)  
	TWeakObjectPtr<UClass*>                            QuestItemSlotWidgetClass;                                   // 0x02B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            RequiredMonsterKillWidgetClass;                             // 0x02E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CustomRequirementWidgetClass;                               // 0x0308   (0x0028)  
};

/// Class /Script/WTL.WTLHUDArenaRewardWindow
/// Size: 0x0138 (0x000288 - 0x0003C0)
class UWTLHUDArenaRewardWindow : public UWTLHUDWindowBase
{ 
public:
	UImage*                                            imgLootBoxType;                                             // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbMoneyAmount;                                              // 0x0290   (0x0008)  
	UTextBlock*                                        tbMoneyAmount;                                              // 0x0298   (0x0008)  
	UVerticalBox*                                      vbItems;                                                    // 0x02A0   (0x0008)  
	UHorizontalBox*                                    hbItems;                                                    // 0x02A8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02B0   (0x0008)  
	FWTLStorageContent                                 m_Items;                                                    // 0x02B8   (0x00A8)  
	TWeakObjectPtr<UClass*>                            ItemSlotWidgetClass;                                        // 0x0360   (0x0028)  
	TArray<FWTLLootBoxTypeImage>                       LootBoxTypesImages;                                         // 0x0388   (0x0010)  
	TWeakObjectPtr<UFMODEvent*>                        ShowSoundEvent;                                             // 0x0398   (0x0028)  
};

/// Class /Script/WTL.WTLHUDArenaState
/// Size: 0x0058 (0x000268 - 0x0002C0)
class UWTLHUDArenaState : public UWTLHUDInfoWidget
{ 
public:
	UVerticalBox*                                      vbMain;                                                     // 0x0268   (0x0008)  
	UTextBlock*                                        tbArenaMatchState;                                          // 0x0270   (0x0008)  
	UTextBlock*                                        tbNextMatchStateChangeDate;                                 // 0x0278   (0x0008)  
	UVerticalBox*                                      vbFactionScores;                                            // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0288   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            ArenaStateItemWidgetClass;                                  // 0x0298   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDArenaState.OnArenaMatchEnded
	void OnArenaMatchEnded(EWTLFaction WinningFaction, TArray<FWTLArenaLeaderboardRecord>& Leaderboard);                     // [0x18079f0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDArenaStateItem
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLHUDArenaStateItem : public UUserWidget
{ 
public:
	UImage*                                            imgFaction;                                                 // 0x0260   (0x0008)  
	UTextBlock*                                        tbFactionScore;                                             // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	TArray<FWTLFactionTexture>                         FactionTextures;                                            // 0x0278   (0x0010)  
};

/// Class /Script/WTL.WTLHUDArenaStateLeaderboardWindow
/// Size: 0x0078 (0x000288 - 0x000300)
class UWTLHUDArenaStateLeaderboardWindow : public UWTLHUDWindowBase
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0288   (0x0008)  
	UTextBlock*                                        tbEndMatch;                                                 // 0x0290   (0x0008)  
	UTextBlock*                                        tbEndMatchWinner;                                           // 0x0298   (0x0008)  
	UTextBlock*                                        tbEndMatchExclamation;                                      // 0x02A0   (0x0008)  
	UScrollBox*                                        sbFactionsLeaderboards;                                     // 0x02A8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02B8   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ArenaStateLeaderboardWindowItemWidgetClass;                 // 0x02C0   (0x0028)  
	float                                              ReducedSizeX;                                               // 0x02E8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x02EC   (0x0004)  MISSED
	TArray<FWTLFactionColor>                           FactionColors;                                              // 0x02F0   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDArenaStateLeaderboardWindow.OnFactionsLeaderboardsListScrolled
	void OnFactionsLeaderboardsListScrolled(float CurrentOffset);                                                            // [0x1807d30] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDArenaStateLeaderboardWindowItem
/// Size: 0x0078 (0x000260 - 0x0002D8)
class UWTLHUDArenaStateLeaderboardWindowItem : public UUserWidget
{ 
public:
	UBorder*                                           bFaction;                                                   // 0x0260   (0x0008)  
	UImage*                                            imgFaction;                                                 // 0x0268   (0x0008)  
	UTextBlock*                                        tbFactionName;                                              // 0x0270   (0x0008)  
	UTextBlock*                                        tbFactionScore;                                             // 0x0278   (0x0008)  
	UScrollBox*                                        sbLeaders;                                                  // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0288   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ArenaStateLeaderboardWindowItemRecordWidgetClass;           // 0x0290   (0x0028)  
	TArray<FWTLFactionTexture>                         FactionTextures;                                            // 0x02B8   (0x0010)  
	TArray<FWTLFactionColor>                           FactionColors;                                              // 0x02C8   (0x0010)  
};

/// Class /Script/WTL.WTLHUDArenaStateLeaderboardWindowItemRecord
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLHUDArenaStateLeaderboardWindowItemRecord : public UUserWidget
{ 
public:
	UTextBlock*                                        tbNumber;                                                   // 0x0260   (0x0008)  
	UImage*                                            imgCharacterClass;                                          // 0x0268   (0x0008)  
	UTextBlock*                                        tbCharacterName;                                            // 0x0270   (0x0008)  
	UTextBlock*                                        tbScore;                                                    // 0x0278   (0x0008)  
	TArray<FWTLCharacterClassTexture>                  CharacterClassTextures;                                     // 0x0280   (0x0010)  
};

/// Class /Script/WTL.WTLHUDItemSlot
/// Size: 0x0948 (0x000268 - 0x000BB0)
class UWTLHUDItemSlot : public UWTLHUDWidgetBase
{ 
public:
	UWTLHUDItemInformationShort*                       m_ItemInformationShortWidget;                               // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x90];                                      // 0x0270   (0x0090)  MISSED
	UWTLCommonPopupMenu*                               m_ItemPopupMenuWidget;                                      // 0x0300   (0x0008)  
	UImage*                                            imgBackground;                                              // 0x0308   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x0310   (0x0008)  
	UImage*                                            imgBorder;                                                  // 0x0318   (0x0008)  
	UImage*                                            imgItemType;                                                // 0x0320   (0x0008)  
	UTextBlock*                                        tbItemTypeID;                                               // 0x0328   (0x0008)  
	UTextBlock*                                        tbItemCount;                                                // 0x0330   (0x0008)  
	UMenuAnchor*                                       maItem;                                                     // 0x0338   (0x0008)  
	unsigned char                                      UnknownData01_5[0x530];                                     // 0x0340   (0x0530)  MISSED
	UWTLHUDBaseActionStorage*                          m_BaseActionStorage;                                        // 0x0870   (0x0008)  
	unsigned char                                      UnknownData02_5[0x78];                                      // 0x0878   (0x0078)  MISSED
	TWeakObjectPtr<UClass*>                            DraggedSlotClass;                                           // 0x08F0   (0x0028)  
	TWeakObjectPtr<UClass*>                            PopupMenuWidgetClass;                                       // 0x0918   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemInformationShortWidgetClass;                            // 0x0940   (0x0028)  
	TWeakObjectPtr<UClass*>                            ShowCharacterPreviewToolTipWidgetClass;                     // 0x0968   (0x0028)  
	FSlateBrush                                        OriginalItemBackgroundBrush;                                // 0x0990   (0x0088)  
	FSlateBrush                                        QuestItemBackgroundBrush;                                   // 0x0A18   (0x0088)  
	FSlateBrush                                        QuestItemLockedInInventoryBackgroundBrush;                  // 0x0AA0   (0x0088)  
	FSlateBrush                                        BadWeaponConditionBackgroundBrush;                          // 0x0B28   (0x0088)  


	/// Functions
	// Function /Script/WTL.WTLHUDItemSlot.ViewItem
	void ViewItem();                                                                                                         // [0x1825a70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UseNewPassport
	void UseNewPassport();                                                                                                   // [0x1825e80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UseItemFromStorage
	void UseItemFromStorage();                                                                                               // [0x1825b30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UseItem
	void UseItem();                                                                                                          // [0x1825c40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UseGenderChangeConfirmed
	void UseGenderChangeConfirmed();                                                                                         // [0x1825cc0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UseGenderChangeCertificate
	void UseGenderChangeCertificate();                                                                                       // [0x1825d30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UseClassCertificate
	void UseClassCertificate();                                                                                              // [0x1825d50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UnloadWeaponItemWithDropAmmoConfirm
	void UnloadWeaponItemWithDropAmmoConfirm();                                                                              // [0x1824d70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UnloadWeaponItem
	void UnloadWeaponItem();                                                                                                 // [0x18257b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UnequipStuffItem
	void UnequipStuffItem();                                                                                                 // [0x1823f80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.UnequipClothesItem
	void UnequipClothesItem();                                                                                               // [0x1824080] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.TakeFromStorage
	void TakeFromStorage(bool IsTakeAll);                                                                                    // [0x1826650] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.TakeFromClanStorage
	void TakeFromClanStorage(bool IsTakeAll);                                                                                // [0x1826510] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.TakeFromAccountInventory
	void TakeFromAccountInventory();                                                                                         // [0x18263e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.SplitItem
	void SplitItem();                                                                                                        // [0x1826020] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ShowItemShortInformation
	void ShowItemShortInformation();                                                                                         // [0x1823dc0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ShowItemInformation
	void ShowItemInformation();                                                                                              // [0x1823da0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ShowDropItemConfirmation
	void ShowDropItemConfirmation();                                                                                         // [0x1823d80] Final|Native|Public  
	// Function /Script/WTL.WTLHUDItemSlot.ShowDestroyItemConfirmation
	void ShowDestroyItemConfirmation();                                                                                      // [0x1823ec0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RepairWeaponByKitByWeaponID
	void RepairWeaponByKitByWeaponID(uint64_t WeaponID);                                                                     // [0x18249c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RepairWeaponByKit
	void RepairWeaponByKit();                                                                                                // [0x1824ad0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RepairClothesByKitByClothesID
	void RepairClothesByKitByClothesID(uint64_t ClothesID);                                                                  // [0x1824890] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RepairClothesByKit
	void RepairClothesByKit();                                                                                               // [0x18249a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RepairByRepairDeviceByItemID
	void RepairByRepairDeviceByItemID(uint64_t StuffID);                                                                     // [0x1824790] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RepairByRepairDevice
	void RepairByRepairDevice();                                                                                             // [0x1824870] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveWeaponPartFromExchange
	void RemoveWeaponPartFromExchange();                                                                                     // [0x1826260] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveWeaponAttachmentByTypeID
	void RemoveWeaponAttachmentByTypeID(uint64_t AttachmentTypeID);                                                          // [0x1824fd0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveWeaponAttachmentBySlotTypeNumber
	void RemoveWeaponAttachmentBySlotTypeNumber(uint64_t WeaponAttachmentSlotTypeEnumNumber);                                // [0x1824e30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveWeaponAttachmentBySlotType
	void RemoveWeaponAttachmentBySlotType();                                                                                 // [0x1824e10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveWeaponAttachment
	void RemoveWeaponAttachment();                                                                                           // [0x1824fb0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveSelfFromBaseActionStorage
	void RemoveSelfFromBaseActionStorage();                                                                                  // [0x1826160] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveFromStimulatorContainerSlot
	void RemoveFromStimulatorContainerSlot();                                                                                // [0x1826240] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveFromModification
	void RemoveFromModification();                                                                                           // [0x1826280] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveFromFastAccess
	void RemoveFromFastAccess();                                                                                             // [0x1826040] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveFromCustomization
	void RemoveFromCustomization();                                                                                          // [0x18263c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveFromBaseActionStorage
	void RemoveFromBaseActionStorage(UWTLHUDItemSlot* ItemSlot);                                                             // [0x1826080] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveArtefactItemFromContainer
	void RemoveArtefactItemFromContainer();                                                                                  // [0x1825330] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveAllWeaponAttachments
	void RemoveAllWeaponAttachments();                                                                                       // [0x1824df0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.RemoveAllArmoredPlates
	void RemoveAllArmoredPlates();                                                                                           // [0x1823fc0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ReadItem
	void ReadItem();                                                                                                         // [0x1825a50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PutToAccountInventory
	void PutToAccountInventory();                                                                                            // [0x1826460] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PutInStorage
	void PutInStorage();                                                                                                     // [0x1826730] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PutInClanStorage
	void PutInClanStorage();                                                                                                 // [0x18265f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PlaceStuffItem
	void PlaceStuffItem();                                                                                                   // [0x18240c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PlaceItemToStorageContent
	bool PlaceItemToStorageContent(bool IsClanStorage, bool IsCheckCount, UWTLHUDItemSlot* ItemSlot);                        // [0x1826a60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PlaceItemToClanStorage
	void PlaceItemToClanStorage(FString Description);                                                                        // [0x1826880] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PlaceArtefactItemInContainerByContainerID
	void PlaceArtefactItemInContainerByContainerID(uint64_t ContainerID);                                                    // [0x18253d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PlaceArtefactItemInContainer
	void PlaceArtefactItemInContainer();                                                                                     // [0x18254b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PickupItemFromClanStorage
	void PickupItemFromClanStorage(FString Description);                                                                     // [0x1826790] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PaintWeaponBySprayCanByWeaponID
	void PaintWeaponBySprayCanByWeaponID(uint64_t WeaponID);                                                                 // [0x18244a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PaintWeaponBySprayCan
	void PaintWeaponBySprayCan();                                                                                            // [0x1824600] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PaintItemWithSprayCanConfirm
	void PaintItemWithSprayCanConfirm();                                                                                     // [0x1824270] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PaintClothesBySprayCanByClothesID
	void PaintClothesBySprayCanByClothesID(uint64_t ClothesID);                                                              // [0x1824320] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.PaintClothesBySprayCan
	void PaintClothesBySprayCan();                                                                                           // [0x1824480] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OpenExtractor
	void OpenExtractor();                                                                                                    // [0x1825890] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OpenArmoredPlatesWindow
	void OpenArmoredPlatesWindow();                                                                                          // [0x1824060] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OnRepairItemByKitConfirmed
	void OnRepairItemByKitConfirmed();                                                                                       // [0x18246f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OnRepairItemByKitConfirmationDialogHide
	void OnRepairItemByKitConfirmationDialogHide();                                                                          // [0x18246c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OnRepairByRepairDeviceConfirmed
	void OnRepairByRepairDeviceConfirmed();                                                                                  // [0x1824710] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OnMenuOpenChanged
	void OnMenuOpenChanged(bool bIsOpen);                                                                                    // [0x1826c60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.OnGetItemMenuContent
	UWidget* OnGetItemMenuContent();                                                                                         // [0x1826d50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ModifyItemByKit
	void ModifyItemByKit();                                                                                                  // [0x1824620] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.LoadWeaponItemByAmmoID
	void LoadWeaponItemByAmmoID(uint64_t ID);                                                                                // [0x1824c90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.LoadWeaponItem
	void LoadWeaponItem();                                                                                                   // [0x18257d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.LoadAmmoToWeaponItem
	void LoadAmmoToWeaponItem();                                                                                             // [0x1824c70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.LoadAmmoToWeaponByWeaponID
	void LoadAmmoToWeaponByWeaponID(uint64_t ID);                                                                            // [0x1824b90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.InstallPDAModule
	void InstallPDAModule();                                                                                                 // [0x1824af0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.EquipStuffItem
	void EquipStuffItem();                                                                                                   // [0x1823fa0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.EquipClothesItem
	void EquipClothesItem();                                                                                                 // [0x18240a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.EngraveItem
	void EngraveItem(FString CustomizationName);                                                                             // [0x1826970] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.DropItem
	void DropItem();                                                                                                         // [0x1823ee0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.DestroyItem
	void DestroyItem();                                                                                                      // [0x1823e20] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.CutFish
	void CutFish();                                                                                                          // [0x18259b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.CombineItemWithItemID
	void CombineItemWithItemID(uint64_t ItemId);                                                                             // [0x1825f20] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.CombineItem
	void CombineItem();                                                                                                      // [0x1826000] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.CloseExtractor
	void CloseExtractor();                                                                                                   // [0x18257f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ChargeStuffItemByEnergySourceItemByEnergySourceItemID
	void ChargeStuffItemByEnergySourceItemByEnergySourceItemID(uint64_t EnergySourceItemID);                                 // [0x18254f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ChargeStuffItemByEnergySourceItem
	void ChargeStuffItemByEnergySourceItem();                                                                                // [0x18254d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ChargeEnergySourceItemToStuffItemByStuffItemID
	void ChargeEnergySourceItemToStuffItemByStuffItemID(uint64_t StuffItemID);                                               // [0x18255f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.ChargeEnergySourceItemToStuffItem
	void ChargeEnergySourceItemToStuffItem();                                                                                // [0x18255d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.BreakWeaponItem
	void BreakWeaponItem();                                                                                                  // [0x18256d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AttachToWeaponByStuffItemID
	void AttachToWeaponByStuffItemID(uint64_t AttachmentID);                                                                 // [0x1825250] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AttachToWeaponByStuffItem
	void AttachToWeaponByStuffItem();                                                                                        // [0x1825230] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AttachStuffItemToWeaponByWeaponID
	void AttachStuffItemToWeaponByWeaponID(uint64_t WeaponID);                                                               // [0x1825150] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AttachStuffItemToWeapon
	void AttachStuffItemToWeapon();                                                                                          // [0x1825130] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AssignToFastAccess
	void AssignToFastAccess();                                                                                               // [0x1826060] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AddWeaponPartToExchange
	void AddWeaponPartToExchange();                                                                                          // [0x18261c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AddToStimulatorContainerSlot
	void AddToStimulatorContainerSlot();                                                                                     // [0x1826180] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AddToCommission
	void AddToCommission();                                                                                                  // [0x18261a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AddToActionStorage
	void AddToActionStorage();                                                                                               // [0x1826220] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AddOnCustomization
	void AddOnCustomization();                                                                                               // [0x1826200] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSlot.AddForModification
	void AddForModification();                                                                                               // [0x18261e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDArmoredPlateSlot
/// Size: 0x0050 (0x000BB0 - 0x000C00)
class UWTLHUDArmoredPlateSlot : public UWTLHUDItemSlot
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x0BB0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x48];                                      // 0x0BB8   (0x0048)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDArmoredPlateSlot.RemoveArmoredPlate
	void RemoveArmoredPlate();                                                                                               // [0x1808030] Final|Native|Private 
	// Function /Script/WTL.WTLHUDArmoredPlateSlot.InstallArmoredPlateByArmorPlateID
	void InstallArmoredPlateByArmorPlateID(uint64_t ArmorPlateItemID);                                                       // [0x1808120] Final|Native|Private 
	// Function /Script/WTL.WTLHUDArmoredPlateSlot.InstallArmoredPlate
	void InstallArmoredPlate();                                                                                              // [0x18082a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDArmoredPlatesWindow
/// Size: 0x01A0 (0x000288 - 0x000428)
class UWTLHUDArmoredPlatesWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbArmorName;                                                // 0x0288   (0x0008)  
	UWTLHUDArmoredPlateSlot*                           ucFrontPlateItemSlot;                                       // 0x0290   (0x0008)  
	UWTLHUDArmoredPlateSlot*                           ucBackPlateItemSlot;                                        // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_6[0x188];                                     // 0x02A0   (0x0188)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDArmoredPlatesWindow.OnRemoveArmoredPlate
	void OnRemoveArmoredPlate(EWTLArmorPlateType ArmoredPlateType);                                                          // [0x18085a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDArmoredPlatesWindow.OnInstallArmoredPlate
	void OnInstallArmoredPlate(EWTLArmorPlateType ArmoredPlateType, uint64_t ArmorPlateItemID);                              // [0x1808670] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDArmorSlot
/// Size: 0x0018 (0x000BB0 - 0x000BC8)
class UWTLHUDArmorSlot : public UWTLHUDItemSlot
{ 
public:
	UImage*                                            imgProhibit;                                                // 0x0BB0   (0x0008)  
	UTextBlock*                                        tbBodyPart;                                                 // 0x0BB8   (0x0008)  
	EWTLBodyPart                                       SlotBodyPart;                                               // 0x0BC0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0BC1   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLHUDBadConnection
/// Size: 0x0008 (0x000268 - 0x000270)
class UWTLHUDBadConnection : public UWTLHUDWidgetBase
{ 
public:
	UWidgetAnimation*                                  ConnectionAnimation;                                        // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLHUDBarter
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDBarter : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDBarterWindow*                               ucBarterWindow;                                             // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDBaseActionStorage
/// Size: 0x0058 (0x000268 - 0x0002C0)
class UWTLHUDBaseActionStorage : public UWTLHUDWidgetBase
{ 
public:
	UWTLCommonTextButton*                              ucBtnAction;                                                // 0x0268   (0x0008)  
	UWTLHUDBaseActionDropArea*                         ucDropArea;                                                 // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0278   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            InventorySlotClass;                                         // 0x0298   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDBaseActionStorage.OnSlotRemove
	void OnSlotRemove(EWTLItemType ItemType, uint64_t ItemId, bool IsHasAnyItems);                                           // [0x1809820] Native|Protected     
	// Function /Script/WTL.WTLHUDBaseActionStorage.OnSlotAdd
	void OnSlotAdd(UWTLHUDInventorySlot* InventorySlot);                                                                     // [0x1809a10] Native|Protected     
	// Function /Script/WTL.WTLHUDBaseActionStorage.OnActionBtnClick
	void OnActionBtnClick();                                                                                                 // [0x1809af0] Native|Protected     
	// Function /Script/WTL.WTLHUDBaseActionStorage.ActionConfirmed
	void ActionConfirmed();                                                                                                  // [0x1809800] Native|Protected     
};

/// Class /Script/WTL.WTLHUDBarterStorage
/// Size: 0x05A0 (0x0002C0 - 0x000860)
class UWTLHUDBarterStorage : public UWTLHUDBaseActionStorage
{ 
public:
	UVerticalBox*                                      vbMyOfferrings;                                             // 0x02C0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbMyTokensAmount;                                          // 0x02C8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnReadyForBarter;                                        // 0x02D0   (0x0008)  
	UTextBlock*                                        tbCharacterName1;                                           // 0x02D8   (0x0008)  
	UTextBlock*                                        tbCharacterName2;                                           // 0x02E0   (0x0008)  
	UTextBlock*                                        tbCharacterName3;                                           // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbCharacterReady;                                           // 0x02F0   (0x0008)  
	UWidgetSwitcher*                                   wsCharacterOfferings;                                       // 0x02F8   (0x0008)  
	UWrapBox*                                          wpCharacterItems;                                           // 0x0300   (0x0008)  
	UTextBlock*                                        tbNoCharacterItemsAdded;                                    // 0x0308   (0x0008)  
	UTextBlock*                                        tbCharacterTokensAmount;                                    // 0x0310   (0x0008)  
	UWidgetSwitcher*                                   wsBarterStatus;                                             // 0x0318   (0x0008)  
	UTextBlock*                                        tbErrorMessage;                                             // 0x0320   (0x0008)  
	UWidgetSwitcher*                                   wsCharacterAgreementStatus;                                 // 0x0328   (0x0008)  
	UTextBlock*                                        tbAgreeForBarter;                                           // 0x0330   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0338   (0x0020)  MISSED
	FButtonStyle                                       DefaultActionBtnStyle;                                      // 0x0358   (0x0278)  
	FButtonStyle                                       ReadyActionBtnStyle;                                        // 0x05D0   (0x0278)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0848   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDBarterStorage.OnReadyForBarterButtonClicked
	void OnReadyForBarterButtonClicked();                                                                                    // [0x1808d30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBarterStorage.OnMyTokensAmountTextBoxValueChange
	void OnMyTokensAmountTextBoxValueChange(int32_t Value);                                                                  // [0x1808f10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBarterStorage.OnMyTokensAmountTextBoxTextCommitted
	void OnMyTokensAmountTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                           // [0x1808d50] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDBarterStorage.OnHideAgreeForBarterWarning
	void OnHideAgreeForBarterWarning();                                                                                      // [0x1808d10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBarterStorage.OnBarterDealChanged
	void OnBarterDealChanged();                                                                                              // [0x1809020] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDBarterWindow
/// Size: 0x0008 (0x000288 - 0x000290)
class UWTLHUDBarterWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLHUDBarterStorage*                              ucBarterStorage;                                            // 0x0288   (0x0008)  
};

/// Class /Script/WTL.WTLHUDBaseActionDropArea
/// Size: 0x00D8 (0x000268 - 0x000340)
class UWTLHUDBaseActionDropArea : public UWTLHUDWidgetBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0268   (0x0008)  MISSED
	UBorder*                                           bMain;                                                      // 0x0270   (0x0008)  
	UImage*                                            imgDottedSquare;                                            // 0x0278   (0x0008)  
	UImage*                                            imgBorder;                                                  // 0x0280   (0x0008)  
	UWrapBox*                                          wbItemsList;                                                // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbHint;                                                     // 0x0290   (0x0008)  
	UTextBlock*                                        tbHint;                                                     // 0x0298   (0x0008)  
	unsigned char                                      UnknownData01_5[0x78];                                      // 0x02A0   (0x0078)  MISSED
	int32_t                                            ItemsCountInDropArea;                                       // 0x0318   (0x0004)  
	FLinearColor                                       MainBorderDefaultColor;                                     // 0x031C   (0x0010)  
	FLinearColor                                       MainBorderDragEnterColor;                                   // 0x032C   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x033C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDBaseActionDropArea.RemoveItemFromStorage
	void RemoveItemFromStorage(uint64_t ItemId);                                                                             // [0x18094d0] Native|Protected     
	// Function /Script/WTL.WTLHUDBaseActionDropArea.DropItemToBuyStorageConfirmed
	void DropItemToBuyStorageConfirmed();                                                                                    // [0x18096b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBaseActionDropArea.DropItemToBuyStorageCanceled
	void DropItemToBuyStorageCanceled();                                                                                     // [0x1809690] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBaseActionDropArea.AddItemToStorage
	void AddItemToStorage(UWTLHUDInventorySlot* Item);                                                                       // [0x18095b0] Native|Protected     
};

/// Class /Script/WTL.WTLHUDBreakWeaponItem
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDBreakWeaponItem : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDBreakWeaponItemWindow*                      ucBreakWeaponItemWindow;                                    // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDBreakWeaponItemWindow
/// Size: 0x0060 (0x000288 - 0x0002E8)
class UWTLHUDBreakWeaponItemWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLHUDItemSlot*                                   ucWeaponItemSlotToBreak;                                    // 0x0288   (0x0008)  
	UPanelWidget*                                      pwPartItems;                                                // 0x0290   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucDamagePartItemTypeSlot;                                   // 0x0298   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucAccuracyPartItemTypeSlot;                                 // 0x02A0   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucDurabilityPartItemTypeSlot;                               // 0x02A8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnBreak;                                                 // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x02B8   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDBreakWeaponItemWindow.OnBreakConfirmed
	void OnBreakConfirmed();                                                                                                 // [0x180afa0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBreakWeaponItemWindow.OnBreakBtnClicked
	void OnBreakBtnClicked();                                                                                                // [0x180b070] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDBulletinBoardItem
/// Size: 0x00D8 (0x000260 - 0x000338)
class UWTLHUDBulletinBoardItem : public UUserWidget
{ 
public:
	UImage*                                            imgQuestIcon;                                               // 0x0260   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x0268   (0x0008)  
	UHorizontalBox*                                    hbRecommendedLevel;                                         // 0x0270   (0x0008)  
	UTextBlock*                                        tbRecommendedLevel;                                         // 0x0278   (0x0008)  
	UHorizontalBox*                                    hbMaxLevel;                                                 // 0x0280   (0x0008)  
	UTextBlock*                                        tbMaxLevel;                                                 // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbTimeLimit;                                                // 0x0290   (0x0008)  
	UTextBlock*                                        tbTimeLimit;                                                // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbRewardExperience;                                         // 0x02A0   (0x0008)  
	UTextBlock*                                        tbRewardExperience;                                         // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbRewardMoney;                                              // 0x02B0   (0x0008)  
	UTextBlock*                                        tbRewardMoney;                                              // 0x02B8   (0x0008)  
	UWrapBox*                                          wbRewardItems;                                              // 0x02C0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnTakeQuest;                                             // 0x02C8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnDetails;                                               // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x02D8   (0x0038)  MISSED
	TWeakObjectPtr<UClass*>                            QuestItemSlotWidgetClass;                                   // 0x0310   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDBulletinBoardItem.OnTakeQuestBtnClicked
	void OnTakeQuestBtnClicked();                                                                                            // [0x180b280] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBulletinBoardItem.OnDetailsBtnClicked
	void OnDetailsBtnClicked();                                                                                              // [0x180b250] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDBulletinBoardWindow
/// Size: 0x0100 (0x000288 - 0x000388)
class UWTLHUDBulletinBoardWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLCommonTextButton*                              ucBtnBack;                                                  // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbBulletinCount;                                            // 0x0290   (0x0008)  
	UTextBlock*                                        tbBulletinCount;                                            // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsQuestList;                                                // 0x02A0   (0x0008)  
	UScrollBox*                                        sbQuestList;                                                // 0x02A8   (0x0008)  
	UWTLCommonQuestInfo*                               ucQuestInfo;                                                // 0x02B0   (0x0008)  
	UCanvasPanel*                                      cpBtnTakeQuest;                                             // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnTakeQuest;                                             // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02C8   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            BulletinBoardItemWidgetClass;                               // 0x02E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            QuestItemSlotWidgetClass;                                   // 0x0310   (0x0028)  
	TWeakObjectPtr<UClass*>                            RequiredMonsterKillWidgetClass;                             // 0x0338   (0x0028)  
	TWeakObjectPtr<UClass*>                            CustomRequirementWidgetClass;                               // 0x0360   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDBulletinBoardWindow.OnUpdateAllowingTimerOut
	void OnUpdateAllowingTimerOut();                                                                                         // [0x180b3e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBulletinBoardWindow.OnTakeQuestBtnClicked
	void OnTakeQuestBtnClicked();                                                                                            // [0x180b380] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBulletinBoardWindow.OnBulletinBoardItemTakeQuestClicked
	void OnBulletinBoardItemTakeQuestClicked(int32_t QuestID);                                                               // [0x180b4d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBulletinBoardWindow.OnBulletinBoardItemDetailsClicked
	void OnBulletinBoardItemDetailsClicked(int32_t QuestID);                                                                 // [0x180b400] Final|Native|Private 
	// Function /Script/WTL.WTLHUDBulletinBoardWindow.OnBackBtnClicked
	void OnBackBtnClicked();                                                                                                 // [0x180b3c0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDInventorySlot
/// Size: 0x0110 (0x000BB0 - 0x000CC0)
class UWTLHUDInventorySlot : public UWTLHUDItemSlot
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0BB0   (0x0038)  MISSED
	UBorder*                                           bAmmoType;                                                  // 0x0BE8   (0x0008)  
	UTextBlock*                                        tbAmmoType;                                                 // 0x0BF0   (0x0008)  
	unsigned char                                      UnknownData01_5[0x40];                                      // 0x0BF8   (0x0040)  MISSED
	FSlateBrush                                        DefaultArtefactItemInContainerBrush;                        // 0x0C38   (0x0088)  
};

/// Class /Script/WTL.WTLHUDPriceSlot
/// Size: 0x0010 (0x000CC0 - 0x000CD0)
class UWTLHUDPriceSlot : public UWTLHUDInventorySlot
{ 
public:
	UTextBlock*                                        tbActionPrice;                                              // 0x0CC0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0CC8   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDBuySlot
/// Size: 0x0000 (0x000CD0 - 0x000CD0)
class UWTLHUDBuySlot : public UWTLHUDPriceSlot
{ 
public:
};

/// Class /Script/WTL.WTLHUDPriceStorage
/// Size: 0x0018 (0x0002C0 - 0x0002D8)
class UWTLHUDPriceStorage : public UWTLHUDBaseActionStorage
{ 
public:
	UTextBlock*                                        tbActionPrice;                                              // 0x02C0   (0x0008)  
	UTextBlock*                                        tbTotalActionPriceCaption;                                  // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x02D0   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDBuyStorage
/// Size: 0x0050 (0x0002D8 - 0x000328)
class UWTLHUDBuyStorage : public UWTLHUDPriceStorage
{ 
public:
	UTextBlock*                                        tbTotalWeight;                                              // 0x02D8   (0x0008)  
	UTextBlock*                                        tbTotalActionPrice;                                         // 0x02E0   (0x0008)  
	UTextBlock*                                        tbTotalWeightCaption;                                       // 0x02E8   (0x0008)  
	UTextBlock*                                        tbActionPriceCaption;                                       // 0x02F0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02F8   (0x0008)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        BuySellItemsSoundEvent;                                     // 0x0300   (0x0028)  
};

/// Class /Script/WTL.WTLHUDChangeClassWindow
/// Size: 0x0060 (0x000288 - 0x0002E8)
class UWTLHUDChangeClassWindow : public UWTLHUDWindowBase
{ 
public:
	UPanelWidget*                                      hbCharacterClasses;                                         // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnChangeClass;                                           // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0298   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            ChangeClassWindowItemWidgetClass;                           // 0x02A8   (0x0028)  
	TArray<FWTLCharacterClass>                         CharacterClasses;                                           // 0x02D0   (0x0010)  
	float                                              ItemsRightPadding;                                          // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02E4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDChangeClassWindow.OnChangeClassWindowItemClicked
	void OnChangeClassWindowItemClicked(EWTLCharacterClass SelectedCharacterClass);                                          // [0x180ba40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDChangeClassWindow.OnChangeClassConfirmed
	void OnChangeClassConfirmed();                                                                                           // [0x180b960] Final|Native|Private 
	// Function /Script/WTL.WTLHUDChangeClassWindow.OnChangeClassButtonClicked
	void OnChangeClassButtonClicked();                                                                                       // [0x180ba20] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDChangeClassWindowItem
/// Size: 0x0520 (0x000340 - 0x000860)
class UWTLHUDChangeClassWindowItem : public UWTLCommonButton
{ 
public:
	UTextBlock*                                        tbCharacterClass;                                           // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0348   (0x0008)  MISSED
	UTexture2D*                                        m_Texture;                                                  // 0x0350   (0x0008)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x0358   (0x0018)  MISSED
	FButtonStyle                                       DefaultButtonStyle;                                         // 0x0370   (0x0278)  
	FButtonStyle                                       SelectedButtonStyle;                                        // 0x05E8   (0x0278)  
};

/// Class /Script/WTL.WTLHUDCharacterEffectInfluence
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLHUDCharacterEffectInfluence : public UUserWidget
{ 
public:
	UTextBlock*                                        tbEffectType;                                               // 0x0260   (0x0008)  
	UTextBlock*                                        tbAtStart;                                                  // 0x0268   (0x0008)  
	UTextBlock*                                        tbPerTick;                                                  // 0x0270   (0x0008)  
	UTextBlock*                                        tbDuration;                                                 // 0x0278   (0x0008)  
	TArray<FWTLCharacterEffectTypeColor>               CharacterEffectTypeColors;                                  // 0x0280   (0x0010)  
};

/// Class /Script/WTL.WTLHUDCharacterEquipment
/// Size: 0x0068 (0x000268 - 0x0002D0)
class UWTLHUDCharacterEquipment : public UWTLHUDWidgetBase
{ 
public:
	UWidgetSwitcher*                                   wsCharacterPreview;                                         // 0x0268   (0x0008)  
	UWTLCommonCharacterRotator*                        ucCharacterRotator;                                         // 0x0270   (0x0008)  
	UWidgetSwitcher*                                   wsSilhouette;                                               // 0x0278   (0x0008)  
	UWTLCommonCheckBox*                                cbCharacterPreview;                                         // 0x0280   (0x0008)  
	UCanvasPanel*                                      cpArmorSlots;                                               // 0x0288   (0x0008)  
	UPanelWidget*                                      pwStuffSlots;                                               // 0x0290   (0x0008)  
	UProgressBar*                                      pbHunger;                                                   // 0x0298   (0x0008)  
	UProgressBar*                                      pbThirst;                                                   // 0x02A0   (0x0008)  
	UTextBlock*                                        tbHunger;                                                   // 0x02A8   (0x0008)  
	UTextBlock*                                        tbThirst;                                                   // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnHungerTutorial;                                        // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnThirstTutorial;                                        // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x02C8   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDCharacterEquipment.OnThirstTutorialButtonClicked
	void OnThirstTutorialButtonClicked();                                                                                    // [0x180be70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCharacterEquipment.OnHungerTutorialButtonClicked
	void OnHungerTutorialButtonClicked();                                                                                    // [0x180be90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCharacterEquipment.OnCharacterRotatorRotateStop
	void OnCharacterRotatorRotateStop();                                                                                     // [0x180bfe0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCharacterEquipment.OnCharacterRotatorRotateStart
	void OnCharacterRotatorRotateStart();                                                                                    // [0x180c030] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCharacterEquipment.OnCharacterPreviewCheckBoxCheckStateChanged
	void OnCharacterPreviewCheckBoxCheckStateChanged(bool bIsChecked);                                                       // [0x180beb0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDCharacterInfoWindow
/// Size: 0x0200 (0x000288 - 0x000488)
class UWTLHUDCharacterInfoWindow : public UWTLHUDWindowBase
{ 
public:
	UImage*                                            imgFounder;                                                 // 0x0288   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbID;                                                       // 0x0298   (0x0008)  
	UTextBlock*                                        tbID;                                                       // 0x02A0   (0x0008)  
	UProgressBar*                                      pbHealth;                                                   // 0x02A8   (0x0008)  
	UTextBlock*                                        tbHealth;                                                   // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbClan;                                                     // 0x02B8   (0x0008)  
	UButton*                                           btnClanImage;                                               // 0x02C0   (0x0008)  
	UImage*                                            imgClan;                                                    // 0x02C8   (0x0008)  
	UTextBlock*                                        tbClanName;                                                 // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbPlayerType;                                               // 0x02D8   (0x0008)  
	UTextBlock*                                        tbPlayerType;                                               // 0x02E0   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x02E8   (0x0008)  
	UTextBlock*                                        tbClass;                                                    // 0x02F0   (0x0008)  
	UTextBlock*                                        tbSex;                                                      // 0x02F8   (0x0008)  
	UProgressBar*                                      pbStrength;                                                 // 0x0300   (0x0008)  
	UTextBlock*                                        tbStrength;                                                 // 0x0308   (0x0008)  
	UProgressBar*                                      pbDexterity;                                                // 0x0310   (0x0008)  
	UTextBlock*                                        tbDexterity;                                                // 0x0318   (0x0008)  
	UProgressBar*                                      pbStamina;                                                  // 0x0320   (0x0008)  
	UTextBlock*                                        tbStamina;                                                  // 0x0328   (0x0008)  
	UProgressBar*                                      pbAccuracy;                                                 // 0x0330   (0x0008)  
	UTextBlock*                                        tbAccuracy;                                                 // 0x0338   (0x0008)  
	UProgressBar*                                      pbIntelligence;                                             // 0x0340   (0x0008)  
	UTextBlock*                                        tbIntelligence;                                             // 0x0348   (0x0008)  
	UProgressBar*                                      pbFortune;                                                  // 0x0350   (0x0008)  
	UTextBlock*                                        tbFortune;                                                  // 0x0358   (0x0008)  
	UWidgetSwitcher*                                   wsFractionImage;                                            // 0x0360   (0x0008)  
	UTextBlock*                                        tbFraction;                                                 // 0x0368   (0x0008)  
	UHorizontalBox*                                    hbRank;                                                     // 0x0370   (0x0008)  
	UImage*                                            imgRank;                                                    // 0x0378   (0x0008)  
	UTextBlock*                                        tbRank;                                                     // 0x0380   (0x0008)  
	UProgressBar*                                      pbReputation;                                               // 0x0388   (0x0008)  
	UTextBlock*                                        tbReputation;                                               // 0x0390   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendMessage;                                           // 0x0398   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendInviteToGroup;                                     // 0x03A0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x03A8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x03B0   (0x0020)  MISSED
	FLinearColor                                       RedColorParam;                                              // 0x03D0   (0x0010)  
	FLinearColor                                       YellowColorParam;                                           // 0x03E0   (0x0010)  
	FLinearColor                                       GreenColorParam;                                            // 0x03F0   (0x0010)  
	FSlateBrush                                        DefaultClanIconBrush;                                       // 0x0400   (0x0088)  


	/// Functions
	// Function /Script/WTL.WTLHUDCharacterInfoWindow.OnSendMessageBtnClick
	void OnSendMessageBtnClick();                                                                                            // [0x180c290] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCharacterInfoWindow.OnSendInviteToGroupBtnClick
	void OnSendInviteToGroupBtnClick();                                                                                      // [0x180c270] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCharacterInfoWindow.OnClanImageBtnClicked
	void OnClanImageBtnClicked();                                                                                            // [0x180c250] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDChatSmileButton
/// Size: 0x0040 (0x000340 - 0x000380)
class UWTLHUDChatSmileButton : public UWTLCommonButton
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0340   (0x0020)  MISSED
	FString                                            TextAliases;                                                // 0x0360   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0370   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLHUDChatTabButton
/// Size: 0x0020 (0x0012C8 - 0x0012E8)
class UWTLHUDChatTabButton : public UWTLCommonTabButton
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x12C8   (0x0018)  MISSED
	EWTLFiltersChat                                    FilterChat;                                                 // 0x12E0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x12E1   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLHUDClanInfoWindow
/// Size: 0x00F8 (0x000288 - 0x000380)
class UWTLHUDClanInfoWindow : public UWTLHUDWindowBase
{ 
public:
	UImage*                                            imgClan;                                                    // 0x0288   (0x0008)  
	UTextBlock*                                        tbClanName;                                                 // 0x0290   (0x0008)  
	UTextBlock*                                        tbClanLevel;                                                // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbFraction;                                                 // 0x02A0   (0x0008)  
	UTextBlock*                                        tbFractionName;                                             // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsFractionImage;                                            // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbLeaderName;                                               // 0x02B8   (0x0008)  
	UTextBlock*                                        tbLeaderName;                                               // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbStewardName;                                              // 0x02C8   (0x0008)  
	UTextBlock*                                        tbStewardName;                                              // 0x02D0   (0x0008)  
	UTextBlock*                                        tbMemberCount;                                              // 0x02D8   (0x0008)  
	UTextBlock*                                        tbCandidateCount;                                           // 0x02E0   (0x0008)  
	UTextBlock*                                        tbPvPScore;                                                 // 0x02E8   (0x0008)  
	UTextBlock*                                        tbPvEScore;                                                 // 0x02F0   (0x0008)  
	UTextBlock*                                        tbCraftScore;                                               // 0x02F8   (0x0008)  
	UProgressBar*                                      pbReputation;                                               // 0x0300   (0x0008)  
	UTextBlock*                                        tbReputation;                                               // 0x0308   (0x0008)  
	UTextBlock*                                        tbScore;                                                    // 0x0310   (0x0008)  
	UWidgetSwitcher*                                   wsClanDescription;                                          // 0x0318   (0x0008)  
	UTextBlock*                                        tbClanDescriptionShort;                                     // 0x0320   (0x0008)  
	UTextBlock*                                        tbClanDescriptionLong;                                      // 0x0328   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnClanApplication;                                       // 0x0330   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0338   (0x0008)  
	UCanvasPanel*                                      cpApply;                                                    // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0348   (0x0004)  MISSED
	FLinearColor                                       BadClanReputationProgressBarFillColor;                      // 0x034C   (0x0010)  
	FLinearColor                                       MeduimClanReputationProgressBarFillColor;                   // 0x035C   (0x0010)  
	FLinearColor                                       GoodClanReputationProgressBarFillColor;                     // 0x036C   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x037C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLHUDClanStorage
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDClanStorage : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDClanStorageWindow*                          ucClanStorageWindow;                                        // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDClanStorageLogItem
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLHUDClanStorageLogItem : public UUserWidget
{ 
public:
	URichTextBlock*                                    rtbLogText;                                                 // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLHUDClanStoragePolicyGroupItem
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLHUDClanStoragePolicyGroupItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x0260   (0x0008)  
	UCheckBox*                                         cbCanPut;                                                   // 0x0268   (0x0008)  
	UCheckBox*                                         cbCanTake;                                                  // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x0278   (0x0040)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDClanStoragePolicyGroupItem.OnCanTakeCheckBoxStateChanged
	void OnCanTakeCheckBoxStateChanged(bool bIsChecked);                                                                     // [0x180c710] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStoragePolicyGroupItem.OnCanPutCheckBoxStateChanged
	void OnCanPutCheckBoxStateChanged(bool bIsChecked);                                                                      // [0x180c7f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDClanStoragePolicyWindow
/// Size: 0x0090 (0x000288 - 0x000318)
class UWTLHUDClanStoragePolicyWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbTabName;                                                  // 0x0288   (0x0008)  
	UCheckBox*                                         cbCanPutAll;                                                // 0x0290   (0x0008)  
	UCheckBox*                                         cbCanTakeAll;                                               // 0x0298   (0x0008)  
	UScrollBox*                                        sbPolicyGroupItems;                                         // 0x02A0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnApply;                                                 // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x02B0   (0x0040)  MISSED
	TWeakObjectPtr<UClass*>                            PolicyGroupItemWidgetClass;                                 // 0x02F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDClanStoragePolicyWindow.OnPolicyGroupItemCanTakeCheckBoxStateChanged
	void OnPolicyGroupItemCanTakeCheckBoxStateChanged(bool bIsChecked);                                                      // [0x180ca90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStoragePolicyWindow.OnPolicyGroupItemCanPutCheckBoxStateChanged
	void OnPolicyGroupItemCanPutCheckBoxStateChanged(bool bIsChecked);                                                       // [0x180cb70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStoragePolicyWindow.OnCanTakeAllCheckBoxStateChanged
	void OnCanTakeAllCheckBoxStateChanged(bool bIsChecked);                                                                  // [0x180cc50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStoragePolicyWindow.OnCanPutAllCheckBoxStateChanged
	void OnCanPutAllCheckBoxStateChanged(bool bIsChecked);                                                                   // [0x180cd30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStoragePolicyWindow.OnApplyBtnClicked
	void OnApplyBtnClicked();                                                                                                // [0x180ca70] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDClanStorageSlot
/// Size: 0x0030 (0x000CC0 - 0x000CF0)
class UWTLHUDClanStorageSlot : public UWTLHUDInventorySlot
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0CC0   (0x0030)  MISSED
};

/// Class /Script/WTL.WTLHUDClanStorageTabButton
/// Size: 0x00B8 (0x0012C8 - 0x001380)
class UWTLHUDClanStorageTabButton : public UWTLCommonTabButton
{ 
public:
	UImage*                                            imgTab;                                                     // 0x12C8   (0x0008)  
	FSlateBrush                                        BuyStorageTabImageBrush;                                    // 0x12D0   (0x0088)  
	TWeakObjectPtr<UTexture2D*>                        NoAccessTexture;                                            // 0x1358   (0x0028)  
};

/// Class /Script/WTL.WTLHUDClanStorageTabBuyWindow
/// Size: 0x0068 (0x000288 - 0x0002F0)
class UWTLHUDClanStorageTabBuyWindow : public UWTLHUDWindowBase
{ 
public:
	UVerticalBox*                                      vbRequiredItems;                                            // 0x0288   (0x0008)  
	UWrapBox*                                          wpRequiredItems;                                            // 0x0290   (0x0008)  
	UVerticalBox*                                      vbRequiredTokens;                                           // 0x0298   (0x0008)  
	UTextBlock*                                        tbCurrentTokens;                                            // 0x02A0   (0x0008)  
	UTextBlock*                                        tbRequiredTokens;                                           // 0x02A8   (0x0008)  
	UImage*                                            imgTokensDone;                                              // 0x02B0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnBuy;                                                   // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02C0   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemSlotWidgetClass;                                        // 0x02C8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDClanStorageTabBuyWindow.OnBuyConfirmed
	void OnBuyConfirmed();                                                                                                   // [0x180d130] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageTabBuyWindow.OnBuyButtonClicked
	void OnBuyButtonClicked();                                                                                               // [0x180d1d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDClanStorageTabImageItem
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class UWTLHUDClanStorageTabImageItem : public UWTLCommonSelectedItem
{ 
public:
	UImage*                                            imgTab;                                                     // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04A8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLHUDClanStorageTabImageSelectWindow
/// Size: 0x0050 (0x000288 - 0x0002D8)
class UWTLHUDClanStorageTabImageSelectWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbTabName;                                                  // 0x0288   (0x0008)  
	UWrapBox*                                          wbTabImageItems;                                            // 0x0290   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnApply;                                                 // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02A0   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            ClanStorageTabImageItemWidgetClass;                         // 0x02B0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDClanStorageTabImageSelectWindow.OnTabImageItemClicked
	void OnTabImageItemClicked(char ImageIndex);                                                                             // [0x180d4b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageTabImageSelectWindow.OnApplyBtnClicked
	void OnApplyBtnClicked();                                                                                                // [0x180d440] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDClanStorageTabSettingsItem
/// Size: 0x00F0 (0x000260 - 0x000350)
class UWTLHUDClanStorageTabSettingsItem : public UUserWidget
{ 
public:
	UButton*                                           btnPreviousImage;                                           // 0x0260   (0x0008)  
	UButton*                                           btnNextImage;                                               // 0x0268   (0x0008)  
	UImage*                                            imgTab;                                                     // 0x0270   (0x0008)  
	UEditableTextBox*                                  etbTabName;                                                 // 0x0278   (0x0008)  
	UEditableTextBox*                                  etbTabDescription;                                          // 0x0280   (0x0008)  
	UButton*                                           btnConfigureAccessPolicy;                                   // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0xC0];                                      // 0x0290   (0x00C0)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDClanStorageTabSettingsItem.OnTabNameTextBoxTextChanged
	void OnTabNameTextBoxTextChanged(FText& InText);                                                                         // [0x180d920] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDClanStorageTabSettingsItem.OnTabImageMouseButtonDown
	FEventReply OnTabImageMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                  // [0x180dab0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDClanStorageTabSettingsItem.OnTabDescriptionTextBoxTextChanged
	void OnTabDescriptionTextBoxTextChanged(FText& InText);                                                                  // [0x180d7f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDClanStorageTabSettingsItem.OnPreviousImageBtnClicked
	void OnPreviousImageBtnClicked();                                                                                        // [0x180dd00] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageTabSettingsItem.OnNextImageBtnClicked
	void OnNextImageBtnClicked();                                                                                            // [0x180da50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageTabSettingsItem.OnConfigureAccessPolicyBtnClicked
	void OnConfigureAccessPolicyBtnClicked();                                                                                // [0x180d7d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDClanStorageTabStorage
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLHUDClanStorageTabStorage : public UUserWidget
{ 
public:
	UPanelWidget*                                      pwStorage;                                                  // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLHUDInteractiveSlotsStorage
/// Size: 0x0078 (0x000288 - 0x000300)
class UWTLHUDInteractiveSlotsStorage : public UWTLHUDWindowBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0288   (0x0008)  MISSED
	UBorder*                                           bStorage;                                                   // 0x0290   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0298   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemSlotClass;                                              // 0x02A0   (0x0028)  
	FLinearColor                                       NormalWeightColor;                                          // 0x02C8   (0x0010)  
	FLinearColor                                       MediumWeightColor;                                          // 0x02D8   (0x0010)  
	FLinearColor                                       HighWeightColor;                                            // 0x02E8   (0x0010)  
	float                                              DefaultStorageWidth;                                        // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02FC   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLHUDClanStorageWindow
/// Size: 0x04E8 (0x000300 - 0x0007E8)
class UWTLHUDClanStorageWindow : public UWTLHUDInteractiveSlotsStorage
{ 
public:
	UWidgetSwitcher*                                   wsClanStorage;                                              // 0x0300   (0x0008)  
	UTextBlock*                                        tbTabName;                                                  // 0x0308   (0x0008)  
	UCanvasPanel*                                      cpTabDescription;                                           // 0x0310   (0x0008)  
	UScrollBox*                                        sbTabDescription;                                           // 0x0318   (0x0008)  
	UTextBlock*                                        tbTabDescription;                                           // 0x0320   (0x0008)  
	UWTLCommonTextButton*                              ucBtnLog;                                                   // 0x0328   (0x0008)  
	UWidgetSwitcher*                                   wsButtons;                                                  // 0x0330   (0x0008)  
	UWTLCommonTextButton*                              ucBtnSettings;                                              // 0x0338   (0x0008)  
	UWTLCommonTextButton*                              ucBtnBack;                                                  // 0x0340   (0x0008)  
	UWTLCommonTextButton*                              ucBtnApplySettings;                                         // 0x0348   (0x0008)  
	UWidgetSwitcher*                                   wsStorage;                                                  // 0x0350   (0x0008)  
	UWidgetSwitcher*                                   wsStorageSlots;                                             // 0x0358   (0x0008)  
	UWidgetSwitcher*                                   wsStorages;                                                 // 0x0360   (0x0008)  
	UHorizontalBox*                                    hbTools;                                                    // 0x0368   (0x0008)  
	UCanvasPanel*                                      cpWeight;                                                   // 0x0370   (0x0008)  
	UHorizontalBox*                                    hbWeightPBArea;                                             // 0x0378   (0x0008)  
	UProgressBar*                                      pbWeight;                                                   // 0x0380   (0x0008)  
	UHorizontalBox*                                    hbWeightPBTextArea;                                         // 0x0388   (0x0008)  
	UTextBlock*                                        tbCurrentWeight;                                            // 0x0390   (0x0008)  
	UTextBlock*                                        tbMaxWeight;                                                // 0x0398   (0x0008)  
	UHorizontalBox*                                    hbToolsBtns;                                                // 0x03A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnUniteAllItems;                                         // 0x03A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnOptimizeItems;                                         // 0x03B0   (0x0008)  
	UVerticalBox*                                      vbTabs;                                                     // 0x03B8   (0x0008)  
	UImage*                                            imgClan;                                                    // 0x03C0   (0x0008)  
	UVerticalBox*                                      vbTabSettingsList;                                          // 0x03C8   (0x0008)  
	UWidgetSwitcher*                                   wsLog;                                                      // 0x03D0   (0x0008)  
	UHorizontalBox*                                    hbLogTypeTabButtons;                                        // 0x03D8   (0x0008)  
	UHorizontalBox*                                    hbLogFilters;                                               // 0x03E0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsLogOperationType;                                        // 0x03E8   (0x0008)  
	UEditableTextBox*                                  etbLogCharacterName;                                        // 0x03F0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsLogTab;                                                  // 0x03F8   (0x0008)  
	UScrollBox*                                        sbLog;                                                      // 0x0400   (0x0008)  
	UHorizontalBox*                                    hbLogPagesManage;                                           // 0x0408   (0x0008)  
	UWTLCommonComboBoxString*                          cbsLogItemsPerPage;                                         // 0x0410   (0x0008)  
	UTextBlock*                                        tbLogCurrentPageIndex;                                      // 0x0418   (0x0008)  
	UTextBlock*                                        tbLogPagesCount;                                            // 0x0420   (0x0008)  
	UButton*                                           btnPreviousLogPage;                                         // 0x0428   (0x0008)  
	UButton*                                           btnNextLogPage;                                             // 0x0430   (0x0008)  
	UHorizontalBox*                                    hbTabBalance;                                               // 0x0438   (0x0008)  
	UTextBlock*                                        tbTabBalance;                                               // 0x0440   (0x0008)  
	UWTLCommonTextButton*                              ucBtnWithdrawTokens;                                        // 0x0448   (0x0008)  
	UWTLCommonTextButton*                              ucBtnDepositTokens;                                         // 0x0450   (0x0008)  
	unsigned char                                      UnknownData00_5[0x70];                                      // 0x0458   (0x0070)  MISSED
	TWeakObjectPtr<UClass*>                            ClanStorageTabButtonWidgetClass;                            // 0x04C8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStorageTabSettingsItemWidgetClass;                      // 0x04F0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStorageTabStorageWidgetClass;                           // 0x0518   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStorageLogItemWidgetClass;                              // 0x0540   (0x0028)  
	float                                              WithClanIconWithToolsBtnsWeightBarWidth;                    // 0x0568   (0x0004)  
	float                                              WithClanIconNonToolsBtnsWeightBarWidth;                     // 0x056C   (0x0004)  
	FButtonStyle                                       ApplySettingsButtonStyle;                                   // 0x0570   (0x0278)  


	/// Functions
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnWithdrawTokensBtnClicked
	void OnWithdrawTokensBtnClicked();                                                                                       // [0x180f5a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnUniteAllItemsBtnClick
	void OnUniteAllItemsBtnClick();                                                                                          // [0x180f5e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnTabSettingsInfoChanged
	void OnTabSettingsInfoChanged();                                                                                         // [0x180ff60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnTabBtnClicked
	void OnTabBtnClicked(char TabIndex);                                                                                     // [0x180f150] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnSettingsBtnClicked
	void OnSettingsBtnClicked();                                                                                             // [0x180f660] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnPreviousLogPageBtnClicked
	void OnPreviousLogPageBtnClicked();                                                                                      // [0x180f6c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnOptimizeItemsBtnClick
	void OnOptimizeItemsBtnClick();                                                                                          // [0x180f5c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x180f4a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnNextLogPageBtnClicked
	void OnNextLogPageBtnClicked();                                                                                          // [0x180f680] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogTypeTabButtonClicked
	void OnLogTypeTabButtonClicked(char LogTypeIndex);                                                                       // [0x180fe70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogTabSelectionChanged
	void OnLogTabSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                           // [0x180f8c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogOperationTypeSelectionChanged
	void OnLogOperationTypeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                 // [0x180fc80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogItemsPerPageSelectionChanged
	void OnLogItemsPerPageSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                  // [0x180f6f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogDataChanged
	void OnLogDataChanged();                                                                                                 // [0x180f600] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogCharacterNameTextCommitted
	void OnLogCharacterNameTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                // [0x180fab0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnLogBtnClicked
	void OnLogBtnClicked();                                                                                                  // [0x180ff40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnDepositTokensBtnClicked
	void OnDepositTokensBtnClicked();                                                                                        // [0x180f580] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnContentChanged
	void OnContentChanged();                                                                                                 // [0x180f480] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnClanStorageSlotDragDetected
	void OnClanStorageSlotDragDetected();                                                                                    // [0x180f120] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnClanStorageSlotDragCancelled
	void OnClanStorageSlotDragCancelled();                                                                                   // [0x180f0f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnBuyStorageTabConfirm
	void OnBuyStorageTabConfirm();                                                                                           // [0x180f0d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnBackBtnClicked
	void OnBackBtnClicked();                                                                                                 // [0x180f640] Final|Native|Private 
	// Function /Script/WTL.WTLHUDClanStorageWindow.OnApplySettingsBtnClicked
	void OnApplySettingsBtnClicked();                                                                                        // [0x180f620] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDCommentaryWindow
/// Size: 0x00B0 (0x000288 - 0x000338)
class UWTLHUDCommentaryWindow : public UWTLHUDWindowBase
{ 
public:
	UEditableTextBox*                                  etbCommentary;                                              // 0x0288   (0x0008)  
	UTextBlock*                                        tbErrorMessage;                                             // 0x0290   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0298   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x90];                                      // 0x02A8   (0x0090)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDCommentaryWindow.OnOKBtnClicked
	void OnOKBtnClicked();                                                                                                   // [0x1810750] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommentaryWindow.OnCommentaryTextBoxCommitted
	void OnCommentaryTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                   // [0x1810570] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDCommentaryWindow.OnCommentaryTextBoxChanged
	void OnCommentaryTextBoxChanged(FText& InText);                                                                          // [0x1810440] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDCommissionAddUpdateWindow
/// Size: 0x0100 (0x000288 - 0x000388)
class UWTLHUDCommissionAddUpdateWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLHUDItemSlot*                                   ucCommissionItemSlot;                                       // 0x0288   (0x0008)  
	UTextBlock*                                        tbMinItemPrice;                                             // 0x0290   (0x0008)  
	UTextBlock*                                        tbPercent;                                                  // 0x0298   (0x0008)  
	UTextBlock*                                        tbDayTax;                                                   // 0x02A0   (0x0008)  
	UTextBlock*                                        tbMaxDaysCount;                                             // 0x02A8   (0x0008)  
	UTextBlock*                                        tbMinBuyCount;                                              // 0x02B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbMinBuyCount;                                             // 0x02B8   (0x0008)  
	USpacer*                                           spMinBuyCount;                                              // 0x02C0   (0x0008)  
	UEditableTextBox*                                  etbPrice;                                                   // 0x02C8   (0x0008)  
	UTextBlock*                                        tbLowPriceWarning;                                          // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbDays;                                                     // 0x02D8   (0x0008)  
	UTextBlock*                                        tbDaysPlus;                                                 // 0x02E0   (0x0008)  
	UTextBlock*                                        tbDaysCount;                                                // 0x02E8   (0x0008)  
	UWTLCommonButton*                                  ucBtnMaxDaysDown;                                           // 0x02F0   (0x0008)  
	UWTLCommonButton*                                  ucBtnDaysDown;                                              // 0x02F8   (0x0008)  
	UWTLCommonButton*                                  ucBtnDaysUp;                                                // 0x0300   (0x0008)  
	UWTLCommonButton*                                  ucBtnMaxDaysUp;                                             // 0x0308   (0x0008)  
	UHorizontalBox*                                    hbTotalItemPrice;                                           // 0x0310   (0x0008)  
	UTextBlock*                                        tbTotalItemPrice;                                           // 0x0318   (0x0008)  
	UHorizontalBox*                                    hbCommissionTax;                                            // 0x0320   (0x0008)  
	UTextBlock*                                        tbCommissionTax;                                            // 0x0328   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnAction;                                                // 0x0330   (0x0008)  
	unsigned char                                      UnknownData00_6[0x50];                                      // 0x0338   (0x0050)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnPriceTextBoxTextCommitted
	void OnPriceTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                    // [0x1810af0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnPriceTextBoxTextChanged
	void OnPriceTextBoxTextChanged(FText& Text);                                                                             // [0x1810cc0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnMinBuyCountTextBoxTextCommitted
	void OnMinBuyCountTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                              // [0x1810910] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnBtnMaxDaysUpClicked
	void OnBtnMaxDaysUpClicked();                                                                                            // [0x1810890] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnBtnMaxDaysDownClicked
	void OnBtnMaxDaysDownClicked();                                                                                          // [0x18108f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnBtnDaysUpClicked
	void OnBtnDaysUpClicked();                                                                                               // [0x18108b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnBtnDaysDownClicked
	void OnBtnDaysDownClicked();                                                                                             // [0x18108d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionAddUpdateWindow.OnActionBtnClicked
	void OnActionBtnClicked();                                                                                               // [0x1810870] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDCommissionDropArea
/// Size: 0x0050 (0x000268 - 0x0002B8)
class UWTLHUDCommissionDropArea : public UWTLHUDWidgetBase
{ 
public:
	UBorder*                                           bBorder;                                                    // 0x0268   (0x0008)  
	UWidgetSwitcher*                                   wsHint;                                                     // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0278   (0x0010)  MISSED
	FLinearColor                                       DefaultBorderColor;                                         // 0x0288   (0x0010)  
	FLinearColor                                       HoveredBorderColor;                                         // 0x0298   (0x0010)  
	FLinearColor                                       ProhibitedBorderColor;                                      // 0x02A8   (0x0010)  
};

/// Class /Script/WTL.WTLHUDCommissionList
/// Size: 0x00D8 (0x000268 - 0x000340)
class UWTLHUDCommissionList : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbCommissionMoney;                                          // 0x0268   (0x0008)  
	UWTLCommonTextButton*                              ucBtnTakeCommissionMoney;                                   // 0x0270   (0x0008)  
	UTextBlock*                                        tbCurrentCommissionItemCount;                               // 0x0278   (0x0008)  
	UTextBlock*                                        tbMaxCommissionItemCount;                                   // 0x0280   (0x0008)  
	UHorizontalBox*                                    hbManageButtons;                                            // 0x0288   (0x0008)  
	UWTLCommonButton*                                  ucBtnWarning;                                               // 0x0290   (0x0008)  
	UWTLCommonButton*                                  ucBtnUpdateCommissionItem;                                  // 0x0298   (0x0008)  
	UWTLCommonButton*                                  ucBtnRemoveItemFromCommission;                              // 0x02A0   (0x0008)  
	UVerticalBox*                                      vbList;                                                     // 0x02A8   (0x0008)  
	UScrollBox*                                        sbList;                                                     // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x58];                                      // 0x02B8   (0x0058)  MISSED
	UWTLHUDItemSlot*                                   m_DroppedItemSlot;                                          // 0x0310   (0x0008)  
	TWeakObjectPtr<UClass*>                            CommissionListItemWidgetClass;                              // 0x0318   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDCommissionList.OnWarningBtnClicked
	void OnWarningBtnClicked();                                                                                              // [0x1811790] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnUpdateCommissionBtnClicked
	void OnUpdateCommissionBtnClicked();                                                                                     // [0x1811770] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnTakeCommissionMoneyBtnClicked
	void OnTakeCommissionMoneyBtnClicked();                                                                                  // [0x18117b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnRemoveItemFromCommissionConfirm
	void OnRemoveItemFromCommissionConfirm();                                                                                // [0x1811730] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnRemoveItemFromCommissionBtnClicked
	void OnRemoveItemFromCommissionBtnClicked();                                                                             // [0x1811750] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnMessageDialogHide
	void OnMessageDialogHide();                                                                                              // [0x18117d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnCommissionListItemClicked
	void OnCommissionListItemClicked(EWTLItemType ItemType, uint64_t ItemId);                                                // [0x18115d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnAddItemDropped
	void OnAddItemDropped(EWTLItemType ListItemType, uint64_t ListItemID, uint16_t ListItemTypeID, int32_t ListItemCount, UWTLHUDItemSlot* DroppedItemSlot); // [0x18112c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionList.OnAddItemConfirm
	void OnAddItemConfirm();                                                                                                 // [0x1811180] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDCommissionListItem
/// Size: 0x0078 (0x0004A0 - 0x000518)
class UWTLHUDCommissionListItem : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x04A0   (0x0008)  
	UTextBlock*                                        tbCount;                                                    // 0x04A8   (0x0008)  
	UTextBlock*                                        tbMinBuyCount;                                              // 0x04B0   (0x0008)  
	UTextBlock*                                        tbPrice;                                                    // 0x04B8   (0x0008)  
	UTextBlock*                                        tbDate;                                                     // 0x04C0   (0x0008)  
	UTextBlock*                                        tbExpireDate;                                               // 0x04C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x48];                                      // 0x04D0   (0x0048)  MISSED
};

/// Class /Script/WTL.WTLHUDSellStorageBase
/// Size: 0x0188 (0x000268 - 0x0003F0)
class UWTLHUDSellStorageBase : public UWTLHUDWidgetBase
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0268   (0x0008)  
	UHorizontalBox*                                    hbItemTypesTabButtons;                                      // 0x0270   (0x0008)  
	UWidgetSwitcher*                                   wsStorage;                                                  // 0x0278   (0x0008)  
	UScrollBox*                                        sbStorage;                                                  // 0x0280   (0x0008)  
	UWrapBox*                                          wbStorage;                                                  // 0x0288   (0x0008)  
	UTextBlock*                                        tbNoItemsFound;                                             // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbSubType;                                                  // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbWeaponCaliber;                                            // 0x02A0   (0x0008)  
	UHorizontalBox*                                    hbItemSort;                                                 // 0x02A8   (0x0008)  
	UWTLCommonComboBoxString*                          cbsItemSubTypes;                                            // 0x02B0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsWeaponCaliber;                                           // 0x02B8   (0x0008)  
	UWTLCommonComboBoxString*                          cbsItemSort;                                                // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0xB0];                                      // 0x02C8   (0x00B0)  MISSED
	TWeakObjectPtr<UClass*>                            ItemTypeTabButtonClass;                                     // 0x0378   (0x0028)  
	TWeakObjectPtr<UClass*>                            SellStorageItemClass;                                       // 0x03A0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        BuySellItemsSoundEvent;                                     // 0x03C8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDSellStorageBase.SelectItemTypeCategory
	void SelectItemTypeCategory(EWTLItemType ItemType);                                                                      // [0x18345b0] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnWeaponCaliberSelectionChanged
	void OnWeaponCaliberSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                    // [0x1834210] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnTabBtnClicked
	void OnTabBtnClicked(EWTLItemType ItemType);                                                                             // [0x1834680] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnSellItemsChanged
	void OnSellItemsChanged();                                                                                               // [0x1833da0] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnItemSubTypeSelectionChanged
	void OnItemSubTypeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                      // [0x18343e0] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnItemSortSelectionChanged
	void OnItemSortSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                         // [0x1834040] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnBuyItemConfirmed
	void OnBuyItemConfirmed();                                                                                               // [0x1833df0] Native|Protected     
	// Function /Script/WTL.WTLHUDSellStorageBase.OnBuyItemCanceled
	void OnBuyItemCanceled();                                                                                                // [0x1833dc0] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDSellStorageBase.OnBuyItem
	void OnBuyItem(FWTLSellItemInfo& SellItemInfo, bool bIsCannotUseItem);                                                   // [0x1833e30] Final|Native|Protected|HasOutParms 
	// Function /Script/WTL.WTLHUDSellStorageBase.BuyItem
	void BuyItem();                                                                                                          // [0x1833e10] Final|Native|Protected 
};

/// Class /Script/WTL.WTLHUDCommissionSellStorage
/// Size: 0x0040 (0x0003F0 - 0x000430)
class UWTLHUDCommissionSellStorage : public UWTLHUDSellStorageBase
{ 
public:
	UWidgetSwitcher*                                   wsMain;                                                     // 0x03F0   (0x0008)  
	UHorizontalBox*                                    hbFilters;                                                  // 0x03F8   (0x0008)  
	UHorizontalBox*                                    hbPagesManage;                                              // 0x0400   (0x0008)  
	UWTLCommonComboBoxString*                          cbsItemsPerPage;                                            // 0x0408   (0x0008)  
	UWTLCommonPageSwitcher*                            ucPageSwitcher;                                             // 0x0410   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0418   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDCommissionSellStorage.OnUpdateDelay
	void OnUpdateDelay();                                                                                                    // [0x1811e50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionSellStorage.OnPageSwitched
	void OnPageSwitched(int32_t CurrentPageIndex);                                                                           // [0x1811e70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCommissionSellStorage.OnItemsPerPageSelectionChanged
	void OnItemsPerPageSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                     // [0x1811f40] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDContentInventory
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDContentInventory : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDContentInventoryStorage*                    ucContentInventoryStorage;                                  // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDContentInventoryStorage
/// Size: 0x0C70 (0x000300 - 0x000F70)
class UWTLHUDContentInventoryStorage : public UWTLHUDInteractiveSlotsStorage
{ 
public:
	UImage*                                            imgStashBackground;                                         // 0x0300   (0x0008)  
	UImage*                                            imgPremiumStashBackground;                                  // 0x0308   (0x0008)  
	UImage*                                            imgFurnaceBackground;                                       // 0x0310   (0x0008)  
	UImage*                                            imgPressMachineBackground;                                  // 0x0318   (0x0008)  
	UImage*                                            imgAmmoPressBackground;                                     // 0x0320   (0x0008)  
	UImage*                                            imgChemicalStationBackground;                               // 0x0328   (0x0008)  
	UWTLCommonButton*                                  ucBtnCloseStash;                                            // 0x0330   (0x0008)  
	UHorizontalBox*                                    hbMain;                                                     // 0x0338   (0x0008)  
	UWidgetSwitcher*                                   wsStorage;                                                  // 0x0340   (0x0008)  
	UTextBlock*                                        tbCharacterName;                                            // 0x0348   (0x0008)  
	UHorizontalBox*                                    hbOldWeight;                                                // 0x0350   (0x0008)  
	UProgressBar*                                      pbOldWeight;                                                // 0x0358   (0x0008)  
	UTextBlock*                                        tbCurrentOldWeight;                                         // 0x0360   (0x0008)  
	UTextBlock*                                        tbMaxOldWeight;                                             // 0x0368   (0x0008)  
	UHorizontalBox*                                    hbBar;                                                      // 0x0370   (0x0008)  
	UHorizontalBox*                                    hbWeight;                                                   // 0x0378   (0x0008)  
	UProgressBar*                                      pbWeight;                                                   // 0x0380   (0x0008)  
	UTextBlock*                                        tbCurrentWeight;                                            // 0x0388   (0x0008)  
	UTextBlock*                                        tbMaxWeight;                                                // 0x0390   (0x0008)  
	UButton*                                           btnPutGift;                                                 // 0x0398   (0x0008)  
	UWidgetSwitcher*                                   wsBtns;                                                     // 0x03A0   (0x0008)  
	UButton*                                           btnExtinguishCampfire;                                      // 0x03A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnRemoveStash;                                           // 0x03B0   (0x0008)  
	UHorizontalBox*                                    hbToolsBtns;                                                // 0x03B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnUniteAllItems;                                         // 0x03C0   (0x0008)  
	UWTLCommonButton*                                  ucBtnOptimizeItems;                                         // 0x03C8   (0x0008)  
	UCanvasPanel*                                      cpStorage;                                                  // 0x03D0   (0x0008)  
	UScrollBox*                                        sbStorage;                                                  // 0x03D8   (0x0008)  
	UHorizontalBox*                                    hbCaliberName;                                              // 0x03E0   (0x0008)  
	UTextBlock*                                        tbCaliberName;                                              // 0x03E8   (0x0008)  
	UHorizontalBox*                                    hbTakeAllBtn;                                               // 0x03F0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnTakeAll;                                               // 0x03F8   (0x0008)  
	UBorder*                                           bCampfireEnergy;                                            // 0x0400   (0x0008)  
	UProgressBar*                                      pbCampfireEnergyImage;                                      // 0x0408   (0x0008)  
	UBorder*                                           bStorageItemsBasePrice;                                     // 0x0410   (0x0008)  
	UTextBlock*                                        tbStorageItemsBasePrice;                                    // 0x0418   (0x0008)  
	unsigned char                                      UnknownData00_5[0xC8];                                      // 0x0420   (0x00C8)  MISSED
	float                                              InitialStorageHeight;                                       // 0x04E8   (0x0004)  
	FLinearColor                                       NormalNewWeightColor;                                       // 0x04EC   (0x0010)  
	FLinearColor                                       MediumNewWeightColor;                                       // 0x04FC   (0x0010)  
	FLinearColor                                       HighNewWeightColor;                                         // 0x050C   (0x0010)  
	FLinearColor                                       DefaultStorageBorderBrushColor;                             // 0x051C   (0x0010)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x052C   (0x0004)  MISSED
	FSlateBrush                                        DefaultStorageBorderBrush;                                  // 0x0530   (0x0088)  
	FSlateBrush                                        NPCActorStorageBorderBrush;                                 // 0x05B8   (0x0088)  
	FSlateBrush                                        StorageBoxStorageBorderBrush;                               // 0x0640   (0x0088)  
	FSlateBrush                                        MachinegunStorageBorderBrush;                               // 0x06C8   (0x0088)  
	FProgressBarStyle                                  DefaultStorageWeightProgressBarStyle;                       // 0x0750   (0x01A0)  
	FProgressBarStyle                                  NPCActorStorageWeightProgressBarStyle;                      // 0x08F0   (0x01A0)  
	FProgressBarStyle                                  StashStorageWeightProgressBarStyle;                         // 0x0A90   (0x01A0)  
	FProgressBarStyle                                  PremiumStashStorageWeightProgressBarStyle;                  // 0x0C30   (0x01A0)  
	FProgressBarStyle                                  CampfireStorageWeightProgressBarStyle;                      // 0x0DD0   (0x01A0)  


	/// Functions
	// Function /Script/WTL.WTLHUDContentInventoryStorage.TakeAllConfirmed
	void TakeAllConfirmed();                                                                                                 // [0x1812400] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnUniteAllItemsBtnClick
	void OnUniteAllItemsBtnClick();                                                                                          // [0x18123e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnTakeAllBtnClick
	void OnTakeAllBtnClick();                                                                                                // [0x1812420] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnStorageScrolled
	void OnStorageScrolled(float CurrentOffset);                                                                             // [0x1812440] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnRemoveStashBtnClick
	void OnRemoveStashBtnClick();                                                                                            // [0x1812380] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnPutGiftBtnClick
	void OnPutGiftBtnClick();                                                                                                // [0x1812360] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnOptimizeItemsBtnClick
	void OnOptimizeItemsBtnClick();                                                                                          // [0x18123c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnObjectDestroyed
	void OnObjectDestroyed();                                                                                                // [0x1812320] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x180f4a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnExtinguishCampfireBtnClick
	void OnExtinguishCampfireBtnClick();                                                                                     // [0x18123a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnContentChanged
	void OnContentChanged();                                                                                                 // [0x1812340] Final|Native|Private 
	// Function /Script/WTL.WTLHUDContentInventoryStorage.OnCampfireWasExtinguish
	void OnCampfireWasExtinguish();                                                                                          // [0x1812300] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDCraft
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDCraft : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDCraftWindow*                                ucCraftWindow;                                              // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDNeedCountSlot
/// Size: 0x0020 (0x000398 - 0x0003B8)
class UWTLHUDNeedCountSlot : public UWTLHUDItemTypeSlot
{ 
public:
	UImage*                                            imgDone;                                                    // 0x0398   (0x0008)  
	UTextBlock*                                        tbItemFindCount;                                            // 0x03A0   (0x0008)  
	UTextBlock*                                        tbItemCountSeparator;                                       // 0x03A8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x03B0   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDCraftIngredientSlot
/// Size: 0x0020 (0x0003B8 - 0x0003D8)
class UWTLHUDCraftIngredientSlot : public UWTLHUDNeedCountSlot
{ 
public:
	UWTLHUDCraftInstrumentIcon*                        ucCraftInstrumentIcon;                                      // 0x03B8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x03C0   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLHUDCraftInstrumentIcon
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLHUDCraftInstrumentIcon : public UUserWidget
{ 
public:
	UWTLHUDCraftInstrumentInfo*                        m_CraftInstrumentInfoWidget;                                // 0x0260   (0x0008)  
	TWeakObjectPtr<UClass*>                            CraftInstrumentInfoWidgetClass;                             // 0x0268   (0x0028)  
};

/// Class /Script/WTL.WTLHUDCraftInstrumentInfo
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLHUDCraftInstrumentInfo : public UUserWidget
{ 
public:
	UWidgetSwitcher*                                   wsInfo;                                                     // 0x0260   (0x0008)  
	UHorizontalBox*                                    hbMinEnergy;                                                // 0x0268   (0x0008)  
	UTextBlock*                                        tbMinEnergyPercent;                                         // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbEnergyCost;                                               // 0x0278   (0x0008)  
	UTextBlock*                                        tbEnergyCostPercent;                                        // 0x0280   (0x0008)  
	UTextBlock*                                        tbMinConditionPercent;                                      // 0x0288   (0x0008)  
	UTextBlock*                                        tbWearPercent;                                              // 0x0290   (0x0008)  
	UTextBlock*                                        tbWillBeConsumedWithFullWear;                               // 0x0298   (0x0008)  
};

/// Class /Script/WTL.WTLHUDCraftResultSlot
/// Size: 0x0038 (0x000398 - 0x0003D0)
class UWTLHUDCraftResultSlot : public UWTLHUDItemTypeSlot
{ 
public:
	UWTLHUDPossibleModificationIcon*                   ucPossibleModificationIcon;                                 // 0x0398   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x03A0   (0x0030)  MISSED
};

/// Class /Script/WTL.WTLHUDCraftWindow
/// Size: 0x0150 (0x000288 - 0x0003D8)
class UWTLHUDCraftWindow : public UWTLHUDWindowBase
{ 
public:
	UWidgetSwitcher*                                   wsRecipesList;                                              // 0x0288   (0x0008)  
	UTextBlock*                                        tbCraftType;                                                // 0x0290   (0x0008)  
	UScrollBox*                                        sbCraftItemsList;                                           // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsRecipe;                                                   // 0x02A0   (0x0008)  
	UScrollBox*                                        sbRecipeInfo;                                               // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbRecipeID;                                                 // 0x02B0   (0x0008)  
	UTextBlock*                                        tbRecipeID;                                                 // 0x02B8   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x02C0   (0x0008)  
	UTextBlock*                                        tbDescription;                                              // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbNeedCraftExperience;                                      // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbNeedSurvivalExperience;                                   // 0x02D8   (0x0008)  
	UTextBlock*                                        tbNeedCraftExperience;                                      // 0x02E0   (0x0008)  
	UTextBlock*                                        tbNeedSurvivalExperience;                                   // 0x02E8   (0x0008)  
	UWidgetSwitcher*                                   wsReadyCraftExperience;                                     // 0x02F0   (0x0008)  
	UHorizontalBox*                                    hbCurrentCraftExperience;                                   // 0x02F8   (0x0008)  
	UTextBlock*                                        tbCurrentCraftExperience;                                   // 0x0300   (0x0008)  
	UWidgetSwitcher*                                   wsReadySurvivalExperience;                                  // 0x0308   (0x0008)  
	UHorizontalBox*                                    hbCurrentSurvivalExperience;                                // 0x0310   (0x0008)  
	UTextBlock*                                        tbCurrentSurvivalExperience;                                // 0x0318   (0x0008)  
	UTextBlock*                                        tbRequiredItems;                                            // 0x0320   (0x0008)  
	UWrapBox*                                          wbIngredients;                                              // 0x0328   (0x0008)  
	UWrapBox*                                          wbResults;                                                  // 0x0330   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCreate;                                                // 0x0338   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0340   (0x0018)  MISSED
	EWTLCraftType                                      CraftType;                                                  // 0x0358   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0359   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            CraftWindowItemWidgetClass;                                 // 0x0360   (0x0028)  
	TWeakObjectPtr<UClass*>                            IngredientItemSlotWidgetClass;                              // 0x0388   (0x0028)  
	TWeakObjectPtr<UClass*>                            ResultItemSlotWidgetClass;                                  // 0x03B0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDCraftWindow.OnCraftWindowItemClicked
	void OnCraftWindowItemClicked(int32_t CraftItemID);                                                                      // [0x1812f10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCraftWindow.OnCraftObjectActiveStateChanged
	void OnCraftObjectActiveStateChanged(bool IsActive);                                                                     // [0x1812fe0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDCraftWindow.OnBtnCreateClicked
	void OnBtnCreateClicked();                                                                                               // [0x1812ef0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDCraftWindowItem
/// Size: 0x0038 (0x0004A0 - 0x0004D8)
class UWTLHUDCraftWindowItem : public UWTLCommonSelectedItem
{ 
public:
	UImage*                                            imgCraftIcon;                                               // 0x04A0   (0x0008)  
	UBorder*                                           bText;                                                      // 0x04A8   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x04B0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04B8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLHUDCrosshair
/// Size: 0x0068 (0x000268 - 0x0002D0)
class UWTLHUDCrosshair : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0268   (0x0008)  
	UBorder*                                           bLeftSector;                                                // 0x0270   (0x0008)  
	UBorder*                                           bTopSector;                                                 // 0x0278   (0x0008)  
	UBorder*                                           bRightSector;                                               // 0x0280   (0x0008)  
	UBorder*                                           bBottomSector;                                              // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x1C];                                      // 0x0290   (0x001C)  MISSED
	float                                              SectorsCalmPositionStand;                                   // 0x02AC   (0x0004)  
	float                                              SectorsCalmPositionCrouch;                                  // 0x02B0   (0x0004)  
	float                                              SectorsCalmPositionProne;                                   // 0x02B4   (0x0004)  
	float                                              SectorsCalmLength;                                          // 0x02B8   (0x0004)  
	float                                              SectorsIncreasePositionStep;                                // 0x02BC   (0x0004)  
	float                                              SectorsLengthMultiplierPerStep;                             // 0x02C0   (0x0004)  
	float                                              MaxSectorsIncreasePosition;                                 // 0x02C4   (0x0004)  
	float                                              SectorsPositionDecreaseInterpSpeed;                         // 0x02C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02CC   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLHUDDamagePointer
/// Size: 0x0068 (0x000268 - 0x0002D0)
class UWTLHUDDamagePointer : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0268   (0x0008)  
	TArray<UWTLHUDDamagePointerItem*>                  m_IndicatorPool;                                            // 0x0270   (0x0010)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0280   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            DamagePointerItemWidgetClass;                               // 0x0290   (0x0028)  
	float                                              ItemPositionY;                                              // 0x02B8   (0x0004)  
	FVector2D                                          ItemSize;                                                   // 0x02BC   (0x0008)  
	FVector2D                                          ItemPivot;                                                  // 0x02C4   (0x0008)  
	int32_t                                            IndicatorPoolSize;                                          // 0x02CC   (0x0004)  
};

/// Class /Script/WTL.WTLHUDDamagePointerItem
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLHUDDamagePointerItem : public UUserWidget
{ 
public:
	UImage*                                            imgDamagePointer;                                           // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0268   (0x0018)  MISSED
	UWidgetAnimation*                                  DisappearAnimation;                                         // 0x0280   (0x0008)  
	float                                              DisappearDelayTime;                                         // 0x0288   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x028C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLHUDDraggedSlot
/// Size: 0x0018 (0x000260 - 0x000278)
class UWTLHUDDraggedSlot : public UUserWidget
{ 
public:
	UImage*                                            imgItem;                                                    // 0x0260   (0x0008)  
	UImage*                                            imgItemType;                                                // 0x0268   (0x0008)  
	UTextBlock*                                        tbItemTypeID;                                               // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLHUDEmotionStateExitHint
/// Size: 0x0010 (0x000268 - 0x000278)
class UWTLHUDEmotionStateExitHint : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbToggleEmotionsMenuKey;                                    // 0x0268   (0x0008)  
	UWidgetSwitcher*                                   wsHint;                                                     // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLHUDEventMessageWindow
/// Size: 0x0018 (0x000288 - 0x0002A0)
class UWTLHUDEventMessageWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbTitleMessage;                                             // 0x0288   (0x0008)  
	UTextBlock*                                        tbEventMessage;                                             // 0x0290   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0298   (0x0008)  
};

/// Class /Script/WTL.WTLHUDEventNotificationItem
/// Size: 0x0028 (0x000280 - 0x0002A8)
class UWTLHUDEventNotificationItem : public UWTLCommonNotificationItem
{ 
public:
	UBorder*                                           bNotificationImage;                                         // 0x0280   (0x0008)  
	UBorder*                                           bNotificationMessage;                                       // 0x0288   (0x0008)  
	UImage*                                            imgNotification;                                            // 0x0290   (0x0008)  
	TArray<FWTLNotificationTypeConfig>                 NotificationConfig;                                         // 0x0298   (0x0010)  
};

/// Class /Script/WTL.WTLHUDEventNotificator
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class UWTLHUDEventNotificator : public UWTLCommonNotificator
{ 
public:
};

/// Class /Script/WTL.WTLHUDEventPointInfo
/// Size: 0x0060 (0x000268 - 0x0002C8)
class UWTLHUDEventPointInfo : public UWTLHUDInfoWidget
{ 
public:
	UTextBlock*                                        tbEventName;                                                // 0x0268   (0x0008)  
	UTextBlock*                                        tbTimeLeft;                                                 // 0x0270   (0x0008)  
	UProgressBar*                                      pbProgress;                                                 // 0x0278   (0x0008)  
	UTextBlock*                                        tbEventDescription;                                         // 0x0280   (0x0008)  
	UVerticalBox*                                      vbEventTasks;                                               // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0290   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            EventPointInfoTaskWidgetClass;                              // 0x02A0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDEventPointInfo.UpdateEventTasks
	void UpdateEventTasks();                                                                                                 // [0x1813590] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDEventPointInfoTask
/// Size: 0x0018 (0x000260 - 0x000278)
class UWTLHUDEventPointInfoTask : public UUserWidget
{ 
public:
	UTextBlock*                                        tbTaskName;                                                 // 0x0260   (0x0008)  
	UTextBlock*                                        tbCurrentValue;                                             // 0x0268   (0x0008)  
	UTextBlock*                                        tbNeedValue;                                                // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLHUDExtractor
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDExtractor : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDExtractorWindow*                            ucExtractorWindow;                                          // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDExtractorStorage
/// Size: 0x0050 (0x0002C0 - 0x000310)
class UWTLHUDExtractorStorage : public UWTLHUDBaseActionStorage
{ 
public:
	UWTLHUDInventorySlot*                              ucContainerSlot;                                            // 0x02C0   (0x0008)  
	UWidgetSwitcher*                                   wsInfluences;                                               // 0x02C8   (0x0008)  
	UScrollBox*                                        sbInfluences;                                               // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02D8   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            CharacterEffectInfluenceWidgetClass;                        // 0x02E8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDExtractorStorage.OnContainerSlotInit
	void OnContainerSlotInit(UWTLHUDInventorySlot* InventorySlot);                                                           // [0x1813810] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDExtractorStorage.OnContainerSlotClear
	void OnContainerSlotClear(uint64_t ItemId);                                                                              // [0x1813730] Final|Native|Protected 
};

/// Class /Script/WTL.WTLHUDExtractorWindow
/// Size: 0x0008 (0x000288 - 0x000290)
class UWTLHUDExtractorWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLHUDExtractorStorage*                           ucExtractorStorage;                                         // 0x0288   (0x0008)  
};

/// Class /Script/WTL.WTLHUDFastAccessSlot
/// Size: 0x0040 (0x000BB0 - 0x000BF0)
class UWTLHUDFastAccessSlot : public UWTLHUDItemSlot
{ 
public:
	UTextBlock*                                        tbSlotNumber;                                               // 0x0BB0   (0x0008)  
	UTextBlock*                                        tbActionKey;                                                // 0x0BB8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0BC0   (0x0030)  MISSED
};

/// Class /Script/WTL.WTLHUDFastAccessSlots
/// Size: 0x00F8 (0x000268 - 0x000360)
class UWTLHUDFastAccessSlots : public UWTLHUDWidgetBase
{ 
public:
	UPanelWidget*                                      hbMain;                                                     // 0x0268   (0x0008)  
	UPanelWidget*                                      hbStorage;                                                  // 0x0270   (0x0008)  
	UImage*                                            imgPDAItemBackground;                                       // 0x0278   (0x0008)  
	UUserWidget*                                       ucPDANotification;                                          // 0x0280   (0x0008)  
	UTextBlock*                                        tbPDAActionKey;                                             // 0x0288   (0x0008)  
	UButton*                                           btnPDAItem;                                                 // 0x0290   (0x0008)  
	UImage*                                            imgFeedbackWindowBackground;                                // 0x0298   (0x0008)  
	UTextBlock*                                        tbFeedbackWindowActionKey;                                  // 0x02A0   (0x0008)  
	UButton*                                           btnFeedbackWindow;                                          // 0x02A8   (0x0008)  
	UCanvasPanel*                                      cpGodConsoleBtn;                                            // 0x02B0   (0x0008)  
	UImage*                                            imgGodConsoleBtnBackground;                                 // 0x02B8   (0x0008)  
	UTextBlock*                                        tbGodConsoleActionKey;                                      // 0x02C0   (0x0008)  
	UButton*                                           btnGodConsole;                                              // 0x02C8   (0x0008)  
	UWTLCommonButton*                                  ucBtnAccountInventory;                                      // 0x02D0   (0x0008)  
	UUserWidget*                                       ucAccountInventoryNotification;                             // 0x02D8   (0x0008)  
	UTextBlock*                                        tbAccountInventoryActionKey;                                // 0x02E0   (0x0008)  
	UWTLHUDBaseActionStorage*                          m_BaseActionStorage;                                        // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02F0   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            ItemSlotClass;                                              // 0x0318   (0x0028)  
	float                                              StartWidgetSizeX;                                           // 0x0340   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0344   (0x0004)  MISSED
	UWidgetAnimation*                                  HideAnimation;                                              // 0x0348   (0x0008)  
	UWidgetAnimation*                                  ShowAnimation;                                              // 0x0350   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0358   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDFastAccessSlots.UpdatePDANotifications
	void UpdatePDANotifications();                                                                                           // [0x1813f80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnPDAItemBtnUnhover
	void OnPDAItemBtnUnhover();                                                                                              // [0x1813e70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnPDAItemBtnHover
	void OnPDAItemBtnHover();                                                                                                // [0x1813ec0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnPDAItemBtnClick
	void OnPDAItemBtnClick();                                                                                                // [0x1813f10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnGodConsoleBtnUnhover
	void OnGodConsoleBtnUnhover();                                                                                           // [0x1813ca0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnGodConsoleBtnHover
	void OnGodConsoleBtnHover();                                                                                             // [0x1813cf0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnGodConsoleBtnClick
	void OnGodConsoleBtnClick();                                                                                             // [0x1813d40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnFeedbackWindowBtnUnhover
	void OnFeedbackWindowBtnUnhover();                                                                                       // [0x1813d60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnFeedbackWindowBtnHover
	void OnFeedbackWindowBtnHover();                                                                                         // [0x1813db0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnFeedbackWindowBtnClick
	void OnFeedbackWindowBtnClick();                                                                                         // [0x1813e00] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnAccountInventoryItemsUpdated
	void OnAccountInventoryItemsUpdated(TArray<FWTLAccountInventoryItem>& AccountInventoryItems);                            // [0x1813fa0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDFastAccessSlots.OnAccountInventoryBtnClick
	void OnAccountInventoryBtnClick();                                                                                       // [0x1813c60] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDFeedbackWindow
/// Size: 0x0258 (0x000288 - 0x0004E0)
class UWTLHUDFeedbackWindow : public UWTLHUDWindowBase
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsPanelsSelector;                                           // 0x0290   (0x0008)  
	UWTLCommonComboBoxString*                          cbsFeedbackType;                                            // 0x0298   (0x0008)  
	UEditableTextBox*                                  etbEmail;                                                   // 0x02A0   (0x0008)  
	UMultiLineEditableTextBox*                         etbReportText;                                              // 0x02A8   (0x0008)  
	UWTLCommonCheckBox*                                cbAttachScreenshot;                                         // 0x02B0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnSendReport;                                            // 0x02B8   (0x0008)  
	UImage*                                            imgRequestResult;                                           // 0x02C0   (0x0008)  
	UTextBlock*                                        tbFeedbackResult;                                           // 0x02C8   (0x0008)  
	UTextBlock*                                        tbFeedbackResultLabel;                                      // 0x02D0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnResultOK;                                              // 0x02D8   (0x0008)  
	UEditableTextBox*                                  etbSuspectPlayerName;                                       // 0x02E0   (0x0008)  
	UTextBlock*                                        tbReportLetterCurrent;                                      // 0x02E8   (0x0008)  
	UTextBlock*                                        tbReportLetterMax;                                          // 0x02F0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x48];                                      // 0x02F8   (0x0048)  MISSED
	FSlateBrush                                        RequestSuccessBrush;                                        // 0x0340   (0x0088)  
	FSlateBrush                                        ServerDoesNotResponseBrush;                                 // 0x03C8   (0x0088)  
	FSlateBrush                                        RequestErrorBrush;                                          // 0x0450   (0x0088)  
	UWidgetAnimation*                                  FileTransferAnimation;                                      // 0x04D8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnSuspectPlayerNameTextBoxCommitted
	void OnSuspectPlayerNameTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                            // [0x1814750] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnSendReportButtonClick
	void OnSendReportButtonClick();                                                                                          // [0x1814440] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnResultOKButtonClick
	void OnResultOKButtonClick();                                                                                            // [0x1814420] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnReportTextBoxCommitted
	void OnReportTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                       // [0x1814460] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnReportTextBoxChanged
	void OnReportTextBoxChanged(FText& Text);                                                                                // [0x1814620] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnFeedbackTypeSelectionChanged
	void OnFeedbackTypeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                     // [0x1814e10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnEmailTextBoxCommitted
	void OnEmailTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                        // [0x1814990] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDFeedbackWindow.OnEmailTextBoxChanged
	void OnEmailTextBoxChanged(FText& Text);                                                                                 // [0x1814cb0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDFinishFishingHint
/// Size: 0x0018 (0x000268 - 0x000280)
class UWTLHUDFinishFishingHint : public UWTLHUDWidgetBase
{ 
public:
	URichTextBlock*                                    rtbHintText;                                                // 0x0268   (0x0008)  
	UCanvasPanel*                                      cpMain;                                                     // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0278   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDFPSCounter
/// Size: 0x00B8 (0x000268 - 0x000320)
class UWTLHUDFPSCounter : public UWTLHUDWidgetBase
{ 
public:
	UHorizontalBox*                                    hbMain;                                                     // 0x0268   (0x0008)  
	UTextBlock*                                        tbFPSCounter;                                               // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0278   (0x0020)  MISSED
	FSlateColor                                        LowFPSColor;                                                // 0x0298   (0x0028)  
	FSlateColor                                        MediumFPSColor;                                             // 0x02C0   (0x0028)  
	FSlateColor                                        HighFPSColor;                                               // 0x02E8   (0x0028)  
	FVector2D                                          PositionWhenMinimapIsVisible;                               // 0x0310   (0x0008)  
	FVector2D                                          PositionWhenMinimapNotVisible;                              // 0x0318   (0x0008)  
};

/// Class /Script/WTL.WTLHUDGameVersionInfo
/// Size: 0x0028 (0x000268 - 0x000290)
class UWTLHUDGameVersionInfo : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbDevelopmentStage;                                         // 0x0268   (0x0008)  
	UTextBlock*                                        tbVersion;                                                  // 0x0270   (0x0008)  
	UTextBlock*                                        tbPing;                                                     // 0x0278   (0x0008)  
	UTextBlock*                                        tbCharacterID;                                              // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDGodConsole
/// Size: 0x0010 (0x000278 - 0x000288)
class UWTLHUDGodConsole : public UWTLHUDInteractiveWidget
{ 
public:
	UBackgroundBlur*                                   bBackgroundBlur;                                            // 0x0278   (0x0008)  
	UWTLHUDGodConsoleWindow*                           ucGodConsoleWindow;                                         // 0x0280   (0x0008)  
};

/// Class /Script/WTL.WTLHUDGodConsoleFavouriteButton
/// Size: 0x04F0 (0x000340 - 0x000830)
class UWTLHUDGodConsoleFavouriteButton : public UWTLCommonButton
{ 
public:
	FButtonStyle                                       NotAddedButtonStyle;                                        // 0x0340   (0x0278)  
	FButtonStyle                                       WasAddedButtonStyle;                                        // 0x05B8   (0x0278)  
};

/// Class /Script/WTL.WTLHUDGodConsoleWindow
/// Size: 0x00A0 (0x000288 - 0x000328)
class UWTLHUDGodConsoleWindow : public UWTLHUDWindowBase
{ 
public:
	UHorizontalBox*                                    hbTopTabBtns;                                               // 0x0288   (0x0008)  
	UWTLCommonTabButton*                               tbtnGameInstance;                                           // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbBottomTabBtns;                                            // 0x0298   (0x0008)  
	UWTLCommonTabButton*                               tbtnItems;                                                  // 0x02A0   (0x0008)  
	UWTLCommonTabButton*                               tbtnKits;                                                   // 0x02A8   (0x0008)  
	UWTLCommonTabButton*                               tbtnLocations;                                              // 0x02B0   (0x0008)  
	UWTLCommonTabButton*                               tbtnQuests;                                                 // 0x02B8   (0x0008)  
	UWidgetSwitcher*                                   wsTab;                                                      // 0x02C0   (0x0008)  
	UWTLHUDGodConsoleWindowCommands*                   ucCommands;                                                 // 0x02C8   (0x0008)  
	UWTLHUDGodConsoleWindowTab*                        ucGameInstance;                                             // 0x02D0   (0x0008)  
	UWTLHUDGodConsoleWindowTab*                        ucScripts;                                                  // 0x02D8   (0x0008)  
	UWTLHUDGodConsoleWindowItems*                      ucItems;                                                    // 0x02E0   (0x0008)  
	UWTLHUDGodConsoleWindowKitsList*                   ucKitsList;                                                 // 0x02E8   (0x0008)  
	UWTLHUDGodConsoleWindowMonstersList*               ucMonstersList;                                             // 0x02F0   (0x0008)  
	UWTLHUDGodConsoleWindowLocationsList*              ucLocationsList;                                            // 0x02F8   (0x0008)  
	UWTLHUDGodConsoleWindowQuestsList*                 ucQuestsList;                                               // 0x0300   (0x0008)  
	UWTLCommonTextButton*                              btnDestroyAllInventoryItems;                                // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0310   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindow.OnTabBtnClicked
	void OnTabBtnClicked(char TabIndex);                                                                                     // [0x1815720] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindow.OnDestroyAllInventoryItemsButtonClicked
	void OnDestroyAllInventoryItemsButtonClicked();                                                                          // [0x18156b0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowTab
/// Size: 0x0000 (0x000260 - 0x000260)
class UWTLHUDGodConsoleWindowTab : public UUserWidget
{ 
public:
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowCommands
/// Size: 0x05A0 (0x000260 - 0x000800)
class UWTLHUDGodConsoleWindowCommands : public UWTLHUDGodConsoleWindowTab
{ 
public:
	UPanelWidget*                                      pwTabButtons;                                               // 0x0260   (0x0008)  
	UWTLCommonTabButton*                               tbCharacterSelf;                                            // 0x0268   (0x0008)  
	UWTLCommonTabButton*                               tbClan;                                                     // 0x0270   (0x0008)  
	UWTLCommonTabButton*                               tbVehicle;                                                  // 0x0278   (0x0008)  
	UWidgetSwitcher*                                   wsTab;                                                      // 0x0280   (0x0008)  
	UWTLCommonTextCheckBox*                            cbPvP;                                                      // 0x0288   (0x0008)  
	UWTLCommonTextCheckBox*                            cbNPCActivity;                                              // 0x0290   (0x0008)  
	UWTLCommonTextButton*                              btnKillAllNPC;                                              // 0x0298   (0x0008)  
	UWTLCommonTextButton*                              btnGetMeshInfo;                                             // 0x02A0   (0x0008)  
	UWTLCommonTextButton*                              btnListPlayers;                                             // 0x02A8   (0x0008)  
	UWTLCommonTextButton*                              btnKick;                                                    // 0x02B0   (0x0008)  
	UWTLCommonTextButton*                              btnKill;                                                    // 0x02B8   (0x0008)  
	UEditableTextBox*                                  etbKKCharacterName;                                         // 0x02C0   (0x0008)  
	UWTLCommonTextButton*                              btnSystemEvent;                                             // 0x02C8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbSETime;                                                  // 0x02D0   (0x0008)  
	UEditableTextBox*                                  etbSEComment;                                               // 0x02D8   (0x0008)  
	UWTLCommonTextButton*                              btnSystemMessage;                                           // 0x02E0   (0x0008)  
	UEditableTextBox*                                  etbSMText;                                                  // 0x02E8   (0x0008)  
	UWTLCommonTextButton*                              btnSafeZoneEnable;                                          // 0x02F0   (0x0008)  
	UWTLCommonTextButton*                              btnSafeZoneDisable;                                         // 0x02F8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbSafeZoneID;                                              // 0x0300   (0x0008)  
	UWTLCommonTextButton*                              btnForceInformer;                                           // 0x0308   (0x0008)  
	UWTLCommonTextButton*                              btnGameState;                                               // 0x0310   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbChatContextMenuOpenMethod;                               // 0x0318   (0x0008)  
	UWTLCommonTextButton*                              btnRepairAll;                                               // 0x0320   (0x0008)  
	UWTLCommonTextButton*                              btnAddPDAModule;                                            // 0x0328   (0x0008)  
	UWTLCommonTextButton*                              btnRemovePDAModule;                                         // 0x0330   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbPDAModuleID;                                             // 0x0338   (0x0008)  
	UWTLCommonTextButton*                              btnVisitPortal;                                             // 0x0340   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbPortalID;                                                // 0x0348   (0x0008)  
	UWTLCommonTextButton*                              btnSetHunger;                                               // 0x0350   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbHungerValue;                                             // 0x0358   (0x0008)  
	UWTLCommonTextButton*                              btnSetThirst;                                               // 0x0360   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbThirstValue;                                             // 0x0368   (0x0008)  
	UWTLCommonTextButton*                              btnSetCustomizationPart;                                    // 0x0370   (0x0008)  
	UWTLCommonComboBoxString*                          cbsCustomizationPart;                                       // 0x0378   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCustomizationPartID;                                     // 0x0380   (0x0008)  
	UWTLCommonTextButton*                              btnSetExperience;                                           // 0x0388   (0x0008)  
	UWTLCommonComboBoxString*                          cbsExperienceType;                                          // 0x0390   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbExperienceValue;                                         // 0x0398   (0x0008)  
	UWTLCommonTextButton*                              btnSetItemCondition;                                        // 0x03A0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbInventorySlotNumber;                                     // 0x03A8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbItemConditionValue;                                      // 0x03B0   (0x0008)  
	UHorizontalBox*                                    hbCharacterModes;                                           // 0x03B8   (0x0008)  
	UWTLCommonTextCheckBox*                            cbGodMode;                                                  // 0x03C0   (0x0008)  
	UWTLCommonTextCheckBox*                            cbSprintMode;                                               // 0x03C8   (0x0008)  
	UWTLCommonTextCheckBox*                            cbDropMode;                                                 // 0x03D0   (0x0008)  
	UWTLCommonTextCheckBox*                            cbPvPMode;                                                  // 0x03D8   (0x0008)  
	UHorizontalBox*                                    hbCharacterRecover;                                         // 0x03E0   (0x0008)  
	UWTLCommonTextButton*                              btnRecoverHealth;                                           // 0x03E8   (0x0008)  
	UWTLCommonTextButton*                              btnRecoverStamina;                                          // 0x03F0   (0x0008)  
	UWTLCommonTextButton*                              btnRecoverAll;                                              // 0x03F8   (0x0008)  
	UHorizontalBox*                                    hbCharacterSexAndClass;                                     // 0x0400   (0x0008)  
	UWTLCommonTextButton*                              btnChangeSex;                                               // 0x0408   (0x0008)  
	UWTLCommonComboBoxString*                          cbsCharacterClasses;                                        // 0x0410   (0x0008)  
	UWTLCommonTextButton*                              btnClearSkills;                                             // 0x0418   (0x0008)  
	UWTLCommonTextButton*                              btnCraftGiveItems;                                          // 0x0420   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCraftItemID;                                             // 0x0428   (0x0008)  
	UWTLCommonTextButton*                              btnAddEffect;                                               // 0x0430   (0x0008)  
	UWTLCommonComboBoxString*                          cbsCharacterEffectType;                                     // 0x0438   (0x0008)  
	USpinBox*                                          sbCharacterEffectValue;                                     // 0x0440   (0x0008)  
	UWTLCommonTextButton*                              btnTeleport;                                                // 0x0448   (0x0008)  
	UEditableTextBox*                                  etbTeleportParameter;                                       // 0x0450   (0x0008)  
	UEditableTextBox*                                  etbCharacterName;                                           // 0x0458   (0x0008)  
	UWTLCommonTextButton*                              btnGiveExperience;                                          // 0x0460   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbGEValue;                                                 // 0x0468   (0x0008)  
	UWTLCommonTextButton*                              btnClearExperience;                                         // 0x0470   (0x0008)  
	UWTLCommonTextButton*                              btnGiveLevel;                                               // 0x0478   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbGLCharacterLevel;                                        // 0x0480   (0x0008)  
	UWTLCommonTextButton*                              btnGiveMoney;                                               // 0x0488   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbGMValue;                                                 // 0x0490   (0x0008)  
	UWTLCommonTextButton*                              btnSetFaction;                                              // 0x0498   (0x0008)  
	UWTLCommonComboBoxString*                          cbsCharacterFactions;                                       // 0x04A0   (0x0008)  
	UWTLCommonTextButton*                              btnSetClan;                                                 // 0x04A8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbSetClanID;                                               // 0x04B0   (0x0008)  
	UWTLCommonTextButton*                              btnSetReputation;                                           // 0x04B8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbSRValue;                                                 // 0x04C0   (0x0008)  
	UTextBlock*                                        tbReputationPercentHint;                                    // 0x04C8   (0x0008)  
	UWTLCommonTextButton*                              btnSpawnAsMonster;                                          // 0x04D0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbMonsterID;                                               // 0x04D8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbMonsterLevel;                                            // 0x04E0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbMonsterLifeSpan;                                         // 0x04E8   (0x0008)  
	UWTLCommonTextButton*                              btnGiveScore;                                               // 0x04F0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbScoreDeltaValue;                                         // 0x04F8   (0x0008)  
	UWTLCommonTextButton*                              btnSetWeaponExperience;                                     // 0x0500   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbWeaponID;                                                // 0x0508   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbWeaponExperienceValue;                                   // 0x0510   (0x0008)  
	UWTLCommonTextButton*                              btnTeleportCharacter;                                       // 0x0518   (0x0008)  
	UEditableTextBox*                                  etbTeleportCharacterParameter;                              // 0x0520   (0x0008)  
	UWTLCommonTextButton*                              btnAirDropForce;                                            // 0x0528   (0x0008)  
	UWTLCommonTextButton*                              btnAirDropWhen;                                             // 0x0530   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbAirDropID;                                               // 0x0538   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbAirDropLifeTime;                                         // 0x0540   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbAirDropMaxUse;                                           // 0x0548   (0x0008)  
	UWTLCommonTextButton*                              btnAirDropSpawn;                                            // 0x0550   (0x0008)  
	UWTLCommonTextButton*                              btnCurrentWeather;                                          // 0x0558   (0x0008)  
	UWTLCommonTextButton*                              btnChangeWeather;                                           // 0x0560   (0x0008)  
	UWTLCommonComboBoxString*                          cbsWeatherTypes;                                            // 0x0568   (0x0008)  
	UWTLCommonTextButton*                              btnLightningToCharacter;                                    // 0x0570   (0x0008)  
	UEditableTextBox*                                  etbWLCharacterName;                                         // 0x0578   (0x0008)  
	UWTLCommonTextButton*                              btnLightningToViewpoint;                                    // 0x0580   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbClanPvPScore;                                            // 0x0588   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbClanPvEScore;                                            // 0x0590   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbClanCraftScore;                                          // 0x0598   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbClanTechnologyScore;                                     // 0x05A0   (0x0008)  
	UWTLCommonTextButton*                              btnGiveClanScore;                                           // 0x05A8   (0x0008)  
	UWTLCommonTextButton*                              btnGiveClanSkill;                                           // 0x05B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbClanSkillID;                                             // 0x05B8   (0x0008)  
	UWTLCommonTextButton*                              btnClearClanSkills;                                         // 0x05C0   (0x0008)  
	UWTLCommonTextButton*                              btnBecomeClanLeader;                                        // 0x05C8   (0x0008)  
	UWTLCommonTextButton*                              btnSpawnVehicle;                                            // 0x05D0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbVehicleID;                                               // 0x05D8   (0x0008)  
	UWidgetSwitcher*                                   wsSpectatorMode;                                            // 0x05E0   (0x0008)  
	UWTLCommonTextButton*                              btnExitSpectator;                                           // 0x05E8   (0x0008)  
	UWTLCommonTextButton*                              btnBecomeSpectator;                                         // 0x05F0   (0x0008)  
	UHorizontalBox*                                    hbSpectate;                                                 // 0x05F8   (0x0008)  
	UWTLCommonTextButton*                              btnSpectate;                                                // 0x0600   (0x0008)  
	UEditableTextBox*                                  etbSpectateCharacterName;                                   // 0x0608   (0x0008)  
	UTextBlock*                                        tbSpectatorSpeedUpKey;                                      // 0x0610   (0x0008)  
	UTextBlock*                                        tbSpectatorSpeedDownKey;                                    // 0x0618   (0x0008)  
	UTextBlock*                                        tbSpectatorViewNextPlayerKey;                               // 0x0620   (0x0008)  
	UTextBlock*                                        tbSpectatorViewPreviousPlayerKey;                           // 0x0628   (0x0008)  
	UTextBlock*                                        tbSpectatorViewSelfKey;                                     // 0x0630   (0x0008)  
	UTextBlock*                                        tbSpectatorToggleNoclipKey;                                 // 0x0638   (0x0008)  
	UTextBlock*                                        tbSpectatorToggleHUDKey;                                    // 0x0640   (0x0008)  
	UTextBlock*                                        tbSpectatorToggleDebugHUDKey;                               // 0x0648   (0x0008)  
	UTextBlock*                                        tbSpectatorChangeViewModeKey;                               // 0x0650   (0x0008)  
	UBorder*                                           bSendingMailMessages;                                       // 0x0658   (0x0008)  
	UEditableTextBox*                                  etbSendMailToCharacterName;                                 // 0x0660   (0x0008)  
	UEditableTextBox*                                  etbSendMailMessageSubject;                                  // 0x0668   (0x0008)  
	UMultiLineEditableTextBox*                         metbSendMailMessageText;                                    // 0x0670   (0x0008)  
	UWTLCommonTextButton*                              btnSendMailMessage;                                         // 0x0678   (0x0008)  
	UEditableTextBox*                                  etbSLBToCharacterName;                                      // 0x0680   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbSLBLootBoxID;                                            // 0x0688   (0x0008)  
	UWTLCommonTextButton*                              btnSendLootBox;                                             // 0x0690   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0698   (0x0020)  MISSED
	TArray<UWTLCommonTabButton*>                       m_TabButtons;                                               // 0x06B8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x138];                                     // 0x06C8   (0x0138)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnVisitPortalButtonClicked
	void OnVisitPortalButtonClicked();                                                                                       // [0x1818150] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnVehicleButtonClicked
	void OnVehicleButtonClicked();                                                                                           // [0x1817350] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnTeleportCharacterButtonClicked
	void OnTeleportCharacterButtonClicked();                                                                                 // [0x18174d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnTeleportButtonClicked
	void OnTeleportButtonClicked();                                                                                          // [0x1817870] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnTabButtonClicked
	void OnTabButtonClicked(char TabIndex);                                                                                  // [0x1818640] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSystemMessageConfirmed
	void OnSystemMessageConfirmed();                                                                                         // [0x1818250] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSystemMessageButtonClicked
	void OnSystemMessageButtonClicked();                                                                                     // [0x18182f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSystemEventConfirmed
	void OnSystemEventConfirmed();                                                                                           // [0x1818310] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSystemEventButtonClicked
	void OnSystemEventButtonClicked();                                                                                       // [0x18183c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSprintModeCheckBoxStateChanged
	void OnSprintModeCheckBoxStateChanged(bool bIsChecked);                                                                  // [0x1817ef0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSpectateButtonClicked
	void OnSpectateButtonClicked();                                                                                          // [0x18172f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSpawnAsMonsterButtonClicked
	void OnSpawnAsMonsterButtonClicked();                                                                                    // [0x1817530] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSLBToCharacterNameChanged
	void OnSLBToCharacterNameChanged(FText& Text);                                                                           // [0x1816e10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetWeaponExperienceButtonClicked
	void OnSetWeaponExperienceButtonClicked();                                                                               // [0x18174f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetThirstButtonClicked
	void OnSetThirstButtonClicked();                                                                                         // [0x1818110] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetReputationButtonClicked
	void OnSetReputationButtonClicked();                                                                                     // [0x1817620] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetItemConditionButtonClicked
	void OnSetItemConditionButtonClicked();                                                                                  // [0x18180b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetHungerButtonClicked
	void OnSetHungerButtonClicked();                                                                                         // [0x1818130] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetFactionButtonClicked
	void OnSetFactionButtonClicked();                                                                                        // [0x1817660] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetExperienceButtonClicked
	void OnSetExperienceButtonClicked();                                                                                     // [0x18180d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetCustomizationPartButtonClicked
	void OnSetCustomizationPartButtonClicked();                                                                              // [0x18180f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSetClanButtonClicked
	void OnSetClanButtonClicked();                                                                                           // [0x1817640] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSendMailToCharacterNameChanged
	void OnSendMailToCharacterNameChanged(FText& Text);                                                                      // [0x18171c0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSendMailMessageTextChanged
	void OnSendMailMessageTextChanged(FText& Text);                                                                          // [0x1816f60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSendMailMessageSubjectChanged
	void OnSendMailMessageSubjectChanged(FText& Text);                                                                       // [0x1817090] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSendMailMessageButtonClicked
	void OnSendMailMessageButtonClicked();                                                                                   // [0x1816f40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSendLootBoxButtonClicked
	void OnSendLootBoxButtonClicked();                                                                                       // [0x1816df0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSafeZoneEnableButtonClicked
	void OnSafeZoneEnableButtonClicked();                                                                                    // [0x1818230] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnSafeZoneDisableButtonClicked
	void OnSafeZoneDisableButtonClicked();                                                                                   // [0x1818210] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnReputationValueChanged
	void OnReputationValueChanged(int32_t Value);                                                                            // [0x1817550] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnRepairAllButtonClicked
	void OnRepairAllButtonClicked();                                                                                         // [0x18181b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnRemovePDAModuleButtonClicked
	void OnRemovePDAModuleButtonClicked();                                                                                   // [0x1818170] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnRecoverStaminaButtonClicked
	void OnRecoverStaminaButtonClicked();                                                                                    // [0x1817cb0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnRecoverHealthButtonClicked
	void OnRecoverHealthButtonClicked();                                                                                     // [0x1817cd0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnRecoverAllButtonClicked
	void OnRecoverAllButtonClicked();                                                                                        // [0x1817c90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnPvPModeCheckBoxStateChanged
	void OnPvPModeCheckBoxStateChanged(bool bIsChecked);                                                                     // [0x1817cf0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnPvPCheckBoxStateChanged
	void OnPvPCheckBoxStateChanged(bool bIsChecked);                                                                         // [0x1818560] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnNPCActivityCheckBoxStateChanged
	void OnNPCActivityCheckBoxStateChanged(bool bIsChecked);                                                                 // [0x1818480] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnListPlayersButtonClicked
	void OnListPlayersButtonClicked();                                                                                       // [0x1818420] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnLightningToViewpointButtonClicked
	void OnLightningToViewpointButtonClicked();                                                                              // [0x18173f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnLightnigToCharacterNameButtonClicked
	void OnLightnigToCharacterNameButtonClicked();                                                                           // [0x1817410] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnKillButtonClicked
	void OnKillButtonClicked();                                                                                              // [0x18183e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnKillAllNPCButtonClicked
	void OnKillAllNPCButtonClicked();                                                                                        // [0x1818460] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnKickButtonClicked
	void OnKickButtonClicked();                                                                                              // [0x1818400] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGodModeCheckBoxStateChanged
	void OnGodModeCheckBoxStateChanged(bool bIsChecked);                                                                     // [0x1817fd0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGiveScoreButtonClicked
	void OnGiveScoreButtonClicked();                                                                                         // [0x1817510] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGiveMoneyButtonClicked
	void OnGiveMoneyButtonClicked();                                                                                         // [0x1817680] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGiveLevelButtonClicked
	void OnGiveLevelButtonClicked();                                                                                         // [0x18176a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGiveExperienceButtonClicked
	void OnGiveExperienceButtonClicked();                                                                                    // [0x18176e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGiveClanSkillButtonClicked
	void OnGiveClanSkillButtonClicked();                                                                                     // [0x18173b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGiveClanScoreButtonClicked
	void OnGiveClanScoreButtonClicked();                                                                                     // [0x18173d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGetMeshInfoButtonClicked
	void OnGetMeshInfoButtonClicked();                                                                                       // [0x1818440] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnGameStateButtonClicked
	void OnGameStateButtonClicked();                                                                                         // [0x18181d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnForceInformerButtonClicked
	void OnForceInformerButtonClicked();                                                                                     // [0x18181f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnExitSpectatorButtonClicked
	void OnExitSpectatorButtonClicked();                                                                                     // [0x1817330] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnDropModeCheckBoxStateChanged
	void OnDropModeCheckBoxStateChanged(bool bIsChecked);                                                                    // [0x1817e10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnCurrentWeatherButtonClicked
	void OnCurrentWeatherButtonClicked();                                                                                    // [0x1817450] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnCraftGiveItemsButtonClicked
	void OnCraftGiveItemsButtonClicked();                                                                                    // [0x1817a70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnClearSkillsButtonClicked
	void OnClearSkillsButtonClicked();                                                                                       // [0x1817a90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnClearExperienceButtonClicked
	void OnClearExperienceButtonClicked();                                                                                   // [0x18176c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnClearClanSkillsButtonClicked
	void OnClearClanSkillsButtonClicked();                                                                                   // [0x1817390] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnChatContextMenuOpenMethodValueChange
	void OnChatContextMenuOpenMethodValueChange(int32_t Value);                                                              // [0x17a7000] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnCharacterNameTextBoxTextChanged
	void OnCharacterNameTextBoxTextChanged(FText& Text);                                                                     // [0x1817700] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnCharacterEffectTypeComboBoxSelectionChanged
	void OnCharacterEffectTypeComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);      // [0x1817890] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnCharacterClassesComboBoxSelectionChanged
	void OnCharacterClassesComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);         // [0x1817ab0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnChangeWeatherButtonClicked
	void OnChangeWeatherButtonClicked();                                                                                     // [0x1817430] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnChangeSexButtonClicked
	void OnChangeSexButtonClicked();                                                                                         // [0x1817c70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnBecomeSpectatorButtonClicked
	void OnBecomeSpectatorButtonClicked();                                                                                   // [0x1817310] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnBecomeClanLeaderButtonClicked
	void OnBecomeClanLeaderButtonClicked();                                                                                  // [0x1817370] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnAirDropWhenButtonClicked
	void OnAirDropWhenButtonClicked();                                                                                       // [0x1817490] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnAirDropSpawnButtonClicked
	void OnAirDropSpawnButtonClicked();                                                                                      // [0x1817470] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnAirDropForceButtonClicked
	void OnAirDropForceButtonClicked();                                                                                      // [0x18174b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnAddPDAModuleButtonClicked
	void OnAddPDAModuleButtonClicked();                                                                                      // [0x1818190] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowCommands.OnAddEffectButtonClicked
	void OnAddEffectButtonClicked();                                                                                         // [0x1817a50] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowGameInstance
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLHUDGodConsoleWindowGameInstance : public UWTLHUDGodConsoleWindowTab
{ 
public:
	UWTLCommonTextCheckBox*                            cbNumberTextBoxValidation;                                  // 0x0260   (0x0008)  
	UVerticalBox*                                      vbEditorOnlyDebugParameters;                                // 0x0268   (0x0008)  
	UWTLCommonTextCheckBox*                            cbDebugIsFounder;                                           // 0x0270   (0x0008)  
	UWTLCommonTextCheckBox*                            cbDebugHavePremium;                                         // 0x0278   (0x0008)  
	UWTLCommonComboBoxString*                          cbsPlayerTypes;                                             // 0x0280   (0x0008)  
	UWTLCommonComboBoxString*                          cbsBodyTypes;                                               // 0x0288   (0x0008)  
	UWTLCommonTextCheckBox*                            cbDebugCharacterIsInClan;                                   // 0x0290   (0x0008)  
	UWTLCommonComboBoxString*                          cbsClanMemberTypes;                                         // 0x0298   (0x0008)  
	UWTLCommonTextCheckBox*                            cbDebugCharacterCanUseAllItems;                             // 0x02A0   (0x0008)  
	UWTLCommonTextCheckBox*                            cbDebugCheckMinLevelAndTimeForBarterAndUseMailBox;          // 0x02A8   (0x0008)  
	UWTLGameInstance*                                  m_GI;                                                       // 0x02B0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnPlayerTypesComboBoxSelectionChanged
	void OnPlayerTypesComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);              // [0x1819c80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnNumberTextBoxValidationCheckBoxStateChanged
	void OnNumberTextBoxValidationCheckBoxStateChanged(bool bIsChecked);                                                     // [0x1819ea0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugIsFounderCheckBoxStateChanged
	void OnDebugIsFounderCheckBoxStateChanged(bool bIsChecked);                                                              // [0x1773b90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugHavePremiumCheckBoxStateChanged
	void OnDebugHavePremiumCheckBoxStateChanged(bool bIsChecked);                                                            // [0x1773b90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugCheckMinLevelAndTimeForBarterAndUseMailBoxCheckBoxStateChanged
	void OnDebugCheckMinLevelAndTimeForBarterAndUseMailBoxCheckBoxStateChanged(bool bIsChecked);                             // [0x1819610] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugCharacterIsInClanCheckBoxStateChanged
	void OnDebugCharacterIsInClanCheckBoxStateChanged(bool bIsChecked);                                                      // [0x1819990] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnDebugCharacterCanUseAllItemsCheckBoxStateChanged
	void OnDebugCharacterCanUseAllItemsCheckBoxStateChanged(bool bIsChecked);                                                // [0x18196f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnClanMemberTypesComboBoxSelectionChanged
	void OnClanMemberTypesComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);          // [0x18197d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowGameInstance.OnBodyTypesComboBoxSelectionChanged
	void OnBodyTypesComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                // [0x1819a70] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowListItemBase
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class UWTLHUDGodConsoleWindowListItemBase : public UWTLCommonSelectedItem
{ 
public:
	UWTLHUDGodConsoleFavouriteButton*                  ucBtnFavourite;                                             // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04A8   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowListItemBase.OnFavouriteBtnClicked
	void OnFavouriteBtnClicked();                                                                                            // [0x181ba60] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowListItem
/// Size: 0x0010 (0x0004C8 - 0x0004D8)
class UWTLHUDGodConsoleWindowListItem : public UWTLHUDGodConsoleWindowListItemBase
{ 
public:
	UWTLCommonTextButton*                              ucBtnReceive;                                               // 0x04C8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCount;                                                   // 0x04D0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowListItem.OnReceiveBtnClicked
	void OnReceiveBtnClicked();                                                                                              // [0x17c4d60] Native|Protected     
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowItem
/// Size: 0x0090 (0x0004D8 - 0x000568)
class UWTLHUDGodConsoleWindowItem : public UWTLHUDGodConsoleWindowListItem
{ 
public:
	UWTLHUDItemImage*                                  ucItemImage;                                                // 0x04D8   (0x0008)  
	UVerticalBox*                                      vbPreviewButtons;                                           // 0x04E0   (0x0008)  
	UCanvasPanel*                                      cpBtnPreview;                                               // 0x04E8   (0x0008)  
	UCanvasPanel*                                      cpBtnCharacterPreview;                                      // 0x04F0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnPreview;                                               // 0x04F8   (0x0008)  
	UWTLCommonButton*                                  ucBtnCharacterPreview;                                      // 0x0500   (0x0008)  
	UTextBlock*                                        tbItemTypeID;                                               // 0x0508   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x0510   (0x0008)  
	UTextBlock*                                        tbItemSubTypeName;                                          // 0x0518   (0x0008)  
	UHorizontalBox*                                    hbCaliber;                                                  // 0x0520   (0x0008)  
	UTextBlock*                                        tbCaliber;                                                  // 0x0528   (0x0008)  
	UTextBlock*                                        tbWeight;                                                   // 0x0530   (0x0008)  
	UTextBlock*                                        tbBasePrice;                                                // 0x0538   (0x0008)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x0540   (0x0028)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowItem.OnPreviewBtnClicked
	void OnPreviewBtnClicked();                                                                                              // [0x181a520] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowItem.OnCharacterPreviewBtnClicked
	void OnCharacterPreviewBtnClicked();                                                                                     // [0x181a500] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowItems
/// Size: 0x0098 (0x000260 - 0x0002F8)
class UWTLHUDGodConsoleWindowItems : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbItemTypeTabBtns;                                          // 0x0260   (0x0008)  
	UWidgetSwitcher*                                   wsItemType;                                                 // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	TMap<EWTLItemType, UDataTable*>                    m_DataTables;                                               // 0x0278   (0x0050)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x02C8   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemTypeTabButtonClass;                                     // 0x02D0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowItems.OnItemTypeTabBtnClicked
	void OnItemTypeTabBtnClicked(EWTLItemType ItemType);                                                                     // [0x181a750] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowListBase
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLHUDGodConsoleWindowListBase : public UWTLHUDGodConsoleWindowTab
{ 
public:
	UWTLCommonCheckBox*                                cbShowFavourites;                                           // 0x0260   (0x0008)  
	UScrollBox*                                        sbContent;                                                  // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0270   (0x0020)  MISSED
	FString                                            ListName;                                                   // 0x0290   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowListBase.OnShowFavouritesCheckBoxStateChanged
	void OnShowFavouritesCheckBoxStateChanged(bool bIsChecked);                                                              // [0x181b830] Native|Protected     
	// Function /Script/WTL.WTLHUDGodConsoleWindowListBase.OnFavouriteBtnClicked
	void OnFavouriteBtnClicked(uint16_t ID, UWTLHUDGodConsoleWindowListItemBase* ListItemBase);                              // [0x181b6d0] Final|Native|Protected 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowItemsList
/// Size: 0x00B8 (0x0002A0 - 0x000358)
class UWTLHUDGodConsoleWindowItemsList : public UWTLHUDGodConsoleWindowListBase
{ 
public:
	UHorizontalBox*                                    hbSubType;                                                  // 0x02A0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsItemSubTypes;                                            // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbWeaponCaliber;                                            // 0x02B0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsWeaponCaliber;                                           // 0x02B8   (0x0008)  
	UEditableTextBox*                                  etbSearch;                                                  // 0x02C0   (0x0008)  
	UWidgetSwitcher*                                   wsItems;                                                    // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02D0   (0x0008)  MISSED
	TArray<UWTLHUDGodConsoleWindowItem*>               m_Items;                                                    // 0x02D8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x48];                                      // 0x02E8   (0x0048)  MISSED
	TWeakObjectPtr<UClass*>                            ItemTypeItemClass;                                          // 0x0330   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowItemsList.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x181acf0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowItemsList.OnReceiveItem
	void OnReceiveItem(EWTLItemType ItemType, uint16_t ItemTypeID, int32_t ItemCount);                                       // [0x181ab00] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowItemsList.OnComboBoxSelectionChanged
	void OnComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                         // [0x181ae20] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowKit
/// Size: 0x0068 (0x0004D8 - 0x000540)
class UWTLHUDGodConsoleWindowKit : public UWTLHUDGodConsoleWindowListItem
{ 
public:
	UTextBlock*                                        tbKitID;                                                    // 0x04D8   (0x0008)  
	UTextBlock*                                        tbKitName;                                                  // 0x04E0   (0x0008)  
	UScrollBox*                                        sbKitItems;                                                 // 0x04E8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x04F0   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            ItemTypeSlotWidgetClass;                                    // 0x0518   (0x0028)  
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowKitsList
/// Size: 0x0060 (0x0002A0 - 0x000300)
class UWTLHUDGodConsoleWindowKitsList : public UWTLHUDGodConsoleWindowListBase
{ 
public:
	UWidgetSwitcher*                                   wsKits;                                                     // 0x02A0   (0x0008)  
	UEditableTextBox*                                  etbSearch;                                                  // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02B0   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            KitWidgetClass;                                             // 0x02D8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowKitsList.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x181b4d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowKitsList.OnReceiveBtnClicked
	void OnReceiveBtnClicked(FWTLKitItemData& KitItemData, int32_t KitCount);                                                // [0x181b320] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowLocation
/// Size: 0x0150 (0x0004C8 - 0x000618)
class UWTLHUDGodConsoleWindowLocation : public UWTLHUDGodConsoleWindowListItemBase
{ 
public:
	UTextBlock*                                        tbLocationID;                                               // 0x04C8   (0x0008)  
	UHorizontalBox*                                    hbMasterLocationID;                                         // 0x04D0   (0x0008)  
	UTextBlock*                                        tbMasterLocationID;                                         // 0x04D8   (0x0008)  
	UTextBlock*                                        tbLocationName;                                             // 0x04E0   (0x0008)  
	UHorizontalBox*                                    hbMasterLocationName;                                       // 0x04E8   (0x0008)  
	UTextBlock*                                        tbMasterLocationName;                                       // 0x04F0   (0x0008)  
	UHorizontalBox*                                    hbPDAModuleID;                                              // 0x04F8   (0x0008)  
	UTextBlock*                                        tbPDAModuleIDCaption;                                       // 0x0500   (0x0008)  
	UTextBlock*                                        tbPDAModuleID;                                              // 0x0508   (0x0008)  
	UWTLCommonURLButton*                               ucBtnReceivePDAModule;                                      // 0x0510   (0x0008)  
	UWTLCommonTextButton*                              ucBtnMoveTo;                                                // 0x0518   (0x0008)  
	UWTLCommonTextButton*                              ucBtnVisit;                                                 // 0x0520   (0x0008)  
	UWTLCommonTextButton*                              ucBtnUnvisit;                                               // 0x0528   (0x0008)  
	UWidgetSwitcher*                                   wsMapTexturePreview;                                        // 0x0530   (0x0008)  
	UImage*                                            imgMapTexturePreview;                                       // 0x0538   (0x0008)  
	unsigned char                                      UnknownData00_5[0x88];                                      // 0x0540   (0x0088)  MISSED
	FSlateColor                                        PDAModuleIDCaptionGreenColor;                               // 0x05C8   (0x0028)  
	FSlateColor                                        PDAModuleIDCaptionRedColor;                                 // 0x05F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocation.OnVisitBtnClicked
	void OnVisitBtnClicked();                                                                                                // [0x181bd40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocation.OnUnvisitBtnClicked
	void OnUnvisitBtnClicked();                                                                                              // [0x181bd10] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocation.OnReceivePDAModuleBtnClicked
	void OnReceivePDAModuleBtnClicked();                                                                                     // [0x181bda0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocation.OnMoveToBtnClicked
	void OnMoveToBtnClicked();                                                                                               // [0x181bd70] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowLocationsList
/// Size: 0x0060 (0x0002A0 - 0x000300)
class UWTLHUDGodConsoleWindowLocationsList : public UWTLHUDGodConsoleWindowListBase
{ 
public:
	UWidgetSwitcher*                                   wsLocations;                                                // 0x02A0   (0x0008)  
	UEditableTextBox*                                  etbSearch;                                                  // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02B0   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            LocationWidgetClass;                                        // 0x02D8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocationsList.OnVisitLocationBtnClicked
	void OnVisitLocationBtnClicked(uint16_t LocationID);                                                                     // [0x181c0d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocationsList.OnUnvisitLocationBtnClicked
	void OnUnvisitLocationBtnClicked(uint16_t LocationID);                                                                   // [0x181bfb0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocationsList.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x181b4d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocationsList.OnReceivePDAModuleForLocationBtnClicked
	void OnReceivePDAModuleForLocationBtnClicked(uint16_t PDAModuleTypeID);                                                  // [0x181c310] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowLocationsList.OnMoveToLocationBtnClicked
	void OnMoveToLocationBtnClicked(uint16_t LocationID);                                                                    // [0x181c1f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowMonster
/// Size: 0x00F0 (0x0004C8 - 0x0005B8)
class UWTLHUDGodConsoleWindowMonster : public UWTLHUDGodConsoleWindowListItemBase
{ 
public:
	UTextBlock*                                        tbMonsterID;                                                // 0x04C8   (0x0008)  
	UTextBlock*                                        tbMonsterName;                                              // 0x04D0   (0x0008)  
	UTextBlock*                                        tbMonsterHealth;                                            // 0x04D8   (0x0008)  
	UTextBlock*                                        tbCloseAttackMinDamage;                                     // 0x04E0   (0x0008)  
	UTextBlock*                                        tbCloseAttackMaxDamage;                                     // 0x04E8   (0x0008)  
	UTextBlock*                                        tbFarAttackMinDamage;                                       // 0x04F0   (0x0008)  
	UTextBlock*                                        tbFarAttackMaxDamage;                                       // 0x04F8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbLevel;                                                   // 0x0500   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbLifeTime;                                                // 0x0508   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCount;                                                   // 0x0510   (0x0008)  
	UWTLCommonTextButton*                              ucBtnSpawn;                                                 // 0x0518   (0x0008)  
	UWTLCommonTextButton*                              ucBtnSpawnAs;                                               // 0x0520   (0x0008)  
	UWTLCommonTextButton*                              ucBtnKill;                                                  // 0x0528   (0x0008)  
	UWTLCommonTextButton*                              ucBtnRestartLogic;                                          // 0x0530   (0x0008)  
	unsigned char                                      UnknownData00_6[0x80];                                      // 0x0538   (0x0080)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonster.OnSpawnBtnClicked
	void OnSpawnBtnClicked();                                                                                                // [0x181c770] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonster.OnSpawnAsBtnClicked
	void OnSpawnAsBtnClicked();                                                                                              // [0x181c750] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonster.OnRestartLogicBtnClicked
	void OnRestartLogicBtnClicked();                                                                                         // [0x181c6f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonster.OnLevelValueChange
	void OnLevelValueChange(int32_t Value);                                                                                  // [0x181c790] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonster.OnKillBtnClicked
	void OnKillBtnClicked();                                                                                                 // [0x181c720] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowMonstersList
/// Size: 0x0080 (0x0002A0 - 0x000320)
class UWTLHUDGodConsoleWindowMonstersList : public UWTLHUDGodConsoleWindowListBase
{ 
public:
	UWidgetSwitcher*                                   wsMonsters;                                                 // 0x02A0   (0x0008)  
	UEditableTextBox*                                  etbSearch;                                                  // 0x02A8   (0x0008)  
	UWTLCommonTextButton*                              btnKillInRadius;                                            // 0x02B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbKillInRadius;                                            // 0x02B8   (0x0008)  
	UWTLCommonTextButton*                              btnKillAllMonsters;                                         // 0x02C0   (0x0008)  
	UWTLCommonTextButton*                              btnRestartAllMonstersLogic;                                 // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02D0   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            MonsterWidgetClass;                                         // 0x02F8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnSpawnBtnClicked
	void OnSpawnBtnClicked(uint16_t MonsterID, int32_t MonsterLevel, int32_t LifeTime, int32_t Count);                       // [0x181cff0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnSpawnAsBtnClicked
	void OnSpawnAsBtnClicked(uint16_t MonsterID, int32_t MonsterLevel, int32_t LifeTime);                                    // [0x181cdd0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x181d260] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnRestartLogicBtnClicked
	void OnRestartLogicBtnClicked(uint16_t MonsterID);                                                                       // [0x181cb90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnRestartAllMonstersLogicButtonClicked
	void OnRestartAllMonstersLogicButtonClicked();                                                                           // [0x181cb30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnKillInRadiusButtonClicked
	void OnKillInRadiusButtonClicked();                                                                                      // [0x181cb70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnKillBtnClicked
	void OnKillBtnClicked(uint16_t MonsterID);                                                                               // [0x181ccb0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowMonstersList.OnKillAllMonstersButtonClicked
	void OnKillAllMonstersButtonClicked();                                                                                   // [0x181cb50] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowQuest
/// Size: 0x0138 (0x0004C8 - 0x000600)
class UWTLHUDGodConsoleWindowQuest : public UWTLHUDGodConsoleWindowListItemBase
{ 
public:
	UTextBlock*                                        tbQuestID;                                                  // 0x04C8   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x04D0   (0x0008)  
	UHorizontalBox*                                    hbQuestFaction;                                             // 0x04D8   (0x0008)  
	UTextBlock*                                        tbQuestFactionName;                                         // 0x04E0   (0x0008)  
	UImage*                                            imgQuestFaction;                                            // 0x04E8   (0x0008)  
	UWidgetSwitcher*                                   wsQuestIcon;                                                // 0x04F0   (0x0008)  
	UImage*                                            imgQuestIcon;                                               // 0x04F8   (0x0008)  
	UWTLCommonURLButton*                               ucBtnShowDependencies;                                      // 0x0500   (0x0008)  
	UWTLCommonComboBoxString*                          cbsQuestStates;                                             // 0x0508   (0x0008)  
	UWTLCommonTextButton*                              ucBtnClearState;                                            // 0x0510   (0x0008)  
	UWTLCommonTextButton*                              ucBtnInfo;                                                  // 0x0518   (0x0008)  
	UWTLCommonTextButton*                              ucBtnGiveItems;                                             // 0x0520   (0x0008)  
	unsigned char                                      UnknownData00_5[0x88];                                      // 0x0528   (0x0088)  MISSED
	TMap<EWTLFaction, FWTLQuestFactionSetting>         QuestFactionSettings;                                       // 0x05B0   (0x0050)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuest.OnShowDependenciesBtnClicked
	void OnShowDependenciesBtnClicked();                                                                                     // [0x181da50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuest.OnQuestStateComboBoxSelectionChanged
	void OnQuestStateComboBoxSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);               // [0x181d890] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuest.OnInfoBtnClicked
	void OnInfoBtnClicked();                                                                                                 // [0x181bd70] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuest.OnGiveItemsBtnClicked
	void OnGiveItemsBtnClicked();                                                                                            // [0x181d840] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuest.OnClearStateBtnClicked
	void OnClearStateBtnClicked();                                                                                           // [0x181d860] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowQuestsList
/// Size: 0x0078 (0x0002A0 - 0x000318)
class UWTLHUDGodConsoleWindowQuestsList : public UWTLHUDGodConsoleWindowListBase
{ 
public:
	UWidgetSwitcher*                                   wsQuests;                                                   // 0x02A0   (0x0008)  
	UEditableTextBox*                                  etbSearch;                                                  // 0x02A8   (0x0008)  
	UWTLCommonTextButton*                              btnCompleteAllQuests;                                       // 0x02B0   (0x0008)  
	UWTLCommonTextButton*                              btnGiveItemsForActiveQuest;                                 // 0x02B8   (0x0008)  
	UWTLCommonTextButton*                              btnClearQuestStates;                                        // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02C8   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            QuestWidgetClass;                                           // 0x02F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x181e910] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestStateChanged
	void OnQuestStateChanged(uint16_t QuestID, int32_t QuestStateIndex);                                                     // [0x181e660] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestShowDependenciesClicked
	void OnQuestShowDependenciesClicked(uint16_t QuestID);                                                                   // [0x181e830] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestInfoClicked
	void OnQuestInfoClicked(uint16_t QuestID);                                                                               // [0x181e4a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestGiveItemsClicked
	void OnQuestGiveItemsClicked(uint16_t QuestID, FWTLQuestItemData& QuestItemData);                                        // [0x181dda0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnQuestClearStateClicked
	void OnQuestClearStateClicked(uint16_t QuestID);                                                                         // [0x181e580] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnGiveItemsForActiveQuestButtonClicked
	void OnGiveItemsForActiveQuestButtonClicked();                                                                           // [0x181dd60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnCompleteAllQuestsButtonClicked
	void OnCompleteAllQuestsButtonClicked();                                                                                 // [0x181dd80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowQuestsList.OnClearQuestStatesButtonClicked
	void OnClearQuestStatesButtonClicked();                                                                                  // [0x181dd40] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowScript
/// Size: 0x0048 (0x0004A0 - 0x0004E8)
class UWTLHUDGodConsoleWindowScript : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbScriptFileName;                                           // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x04A8   (0x0040)  MISSED
};

/// Class /Script/WTL.WTLHUDGodConsoleWindowScripts
/// Size: 0x0140 (0x000260 - 0x0003A0)
class UWTLHUDGodConsoleWindowScripts : public UWTLHUDGodConsoleWindowTab
{ 
public:
	UCanvasPanel*                                      cpToolBar;                                                  // 0x0260   (0x0008)  
	UWidgetSwitcher*                                   wsToolBar;                                                  // 0x0268   (0x0008)  
	UWTLCommonTextButton*                              btnBack;                                                    // 0x0270   (0x0008)  
	UTextBlock*                                        tbCurrentEditableScript;                                    // 0x0278   (0x0008)  
	UTextBlock*                                        tbScriptsCount;                                             // 0x0280   (0x0008)  
	UWidgetSwitcher*                                   wsScripts;                                                  // 0x0288   (0x0008)  
	UScrollBox*                                        sbScripts;                                                  // 0x0290   (0x0008)  
	UMultiLineEditableTextBox*                         etbScriptText;                                              // 0x0298   (0x0008)  
	UWTLCommonTextButton*                              btnExecute;                                                 // 0x02A0   (0x0008)  
	UWTLCommonTextButton*                              btnSave;                                                    // 0x02A8   (0x0008)  
	UVerticalBox*                                      vbManageButtons;                                            // 0x02B0   (0x0008)  
	UWTLCommonTextButton*                              btnCreate;                                                  // 0x02B8   (0x0008)  
	UWTLCommonTextButton*                              btnEdit;                                                    // 0x02C0   (0x0008)  
	UWTLCommonTextButton*                              btnRename;                                                  // 0x02C8   (0x0008)  
	UEditableTextBox*                                  etbNewScriptFileName;                                       // 0x02D0   (0x0008)  
	UWTLCommonTextButton*                              btnDelete;                                                  // 0x02D8   (0x0008)  
	UWTLCommonTextButton*                              btnDeleteAll;                                               // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02E8   (0x0010)  MISSED
	TArray<UWTLHUDGodConsoleWindowScript*>             m_ScriptsWidgets;                                           // 0x02F8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0308   (0x0010)  MISSED
	UWTLHUDGodConsoleWindowScript*                     m_SelectedScriptWidget;                                     // 0x0318   (0x0008)  
	unsigned char                                      UnknownData02_5[0x58];                                      // 0x0320   (0x0058)  MISSED
	TWeakObjectPtr<UClass*>                            ScriptWidgetClass;                                          // 0x0378   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnScriptTextBoxTextChanged
	void OnScriptTextBoxTextChanged(FText& Text);                                                                            // [0x181f570] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnScriptsScrollBoxScrolled
	void OnScriptsScrollBoxScrolled(float CurrentOffset);                                                                    // [0x181f940] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnScriptSelected
	void OnScriptSelected(FString ScriptFileName, UWTLHUDGodConsoleWindowScript* SelectedScriptWidget);                      // [0x181f720] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnSavedConfirmed
	void OnSavedConfirmed();                                                                                                 // [0x181f8e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnSavedCanceled
	void OnSavedCanceled();                                                                                                  // [0x181f8a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnSaveButtonClicked
	void OnSaveButtonClicked();                                                                                              // [0x181f6d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnRenameButtonClicked
	void OnRenameButtonClicked();                                                                                            // [0x181f550] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnNewScriptNameTextBoxTextChanged
	void OnNewScriptNameTextBoxTextChanged(FText& Text);                                                                     // [0x181f420] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnExecuteButtonClicked
	void OnExecuteButtonClicked();                                                                                           // [0x181f700] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnEditButtonClicked
	void OnEditButtonClicked();                                                                                              // [0x181f690] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnDeleteConfirmed
	void OnDeleteConfirmed();                                                                                                // [0x181f320] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnDeleteButtonClicked
	void OnDeleteButtonClicked();                                                                                            // [0x181f400] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnDeleteAllConfirmed
	void OnDeleteAllConfirmed();                                                                                             // [0x181f170] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnDeleteAllButtonClicked
	void OnDeleteAllButtonClicked();                                                                                         // [0x181f300] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnCreateButtonClicked
	void OnCreateButtonClicked();                                                                                            // [0x181f6b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDGodConsoleWindowScripts.OnBackButtonClicked
	void OnBackButtonClicked();                                                                                              // [0x181fa40] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGroupInfo
/// Size: 0x0070 (0x000268 - 0x0002D8)
class UWTLHUDGroupInfo : public UWTLHUDWidgetBase
{ 
public:
	UPanelWidget*                                      pwGroupMembersList;                                         // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0270   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            GroupInfoItemWidgetClass;                                   // 0x0290   (0x0028)  
	FVector2D                                          CornerPosition;                                             // 0x02B8   (0x0008)  
	FVector2D                                          CenterPosition;                                             // 0x02C0   (0x0008)  
	FVector2D                                          CornerSize;                                                 // 0x02C8   (0x0008)  
	FVector2D                                          CenterSize;                                                 // 0x02D0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDGroupInfo.UpdateGroupMembersData
	void UpdateGroupMembersData();                                                                                           // [0x1820ff0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDGroupInfo_Item
/// Size: 0x0120 (0x000260 - 0x000380)
class UWTLHUDGroupInfo_Item : public UUserWidget
{ 
public:
	UProgressBar*                                      pbCharacterHealth;                                          // 0x0260   (0x0008)  
	UImage*                                            imgPlayerClass;                                             // 0x0268   (0x0008)  
	UTextBlock*                                        tbCharacterName;                                            // 0x0270   (0x0008)  
	UImage*                                            imgGroupLead;                                               // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0280   (0x0008)  MISSED
	TWeakObjectPtr<UTexture2D*>                        NonePlayerClassIcon;                                        // 0x0288   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MinerPlayerClassIcon;                                       // 0x02B0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        HunterPlayerClassIcon;                                      // 0x02D8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MercenaryPlayerClassIcon;                                   // 0x0300   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        EngineerPlayerClassIcon;                                    // 0x0328   (0x0028)  
	FLinearColor                                       LowCharacterHealthProgressBarColor;                         // 0x0350   (0x0010)  
	FLinearColor                                       MediumCharacterHealthProgressBarColor;                      // 0x0360   (0x0010)  
	FLinearColor                                       HighCharacterHealthProgressBarColor;                        // 0x0370   (0x0010)  
};

/// Class /Script/WTL.WTLHUDIndicatorBase
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLHUDIndicatorBase : public UUserWidget
{ 
public:
	UBorder*                                           bIconBorder;                                                // 0x0260   (0x0008)  
	UImage*                                            imgIcon;                                                    // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLHUDIndicatorCharacterEffect
/// Size: 0x00C8 (0x000270 - 0x000338)
class UWTLHUDIndicatorCharacterEffect : public UWTLHUDIndicatorBase
{ 
public:
	UTextBlock*                                        tbValue;                                                    // 0x0270   (0x0008)  
	UTextBlock*                                        tbDuration;                                                 // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_6[0xB8];                                      // 0x0280   (0x00B8)  MISSED
};

/// Class /Script/WTL.WTLHUDIndicatorCharacterState
/// Size: 0x0048 (0x000270 - 0x0002B8)
class UWTLHUDIndicatorCharacterState : public UWTLHUDIndicatorBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0270   (0x0004)  MISSED
	FLinearColor                                       NeutralNatureTypeIconBorderColor;                           // 0x0274   (0x0010)  
	FLinearColor                                       PositiveNatureTypeIconBorderColor;                          // 0x0284   (0x0010)  
	FLinearColor                                       NegativeAverageNatureTypeIconBorderColor;                   // 0x0294   (0x0010)  
	FLinearColor                                       NegativeSevereNatureTypeIconBorderColor;                    // 0x02A4   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02B4   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLHUDIndicatorEquipmentSlotItemUse
/// Size: 0x0010 (0x000270 - 0x000280)
class UWTLHUDIndicatorEquipmentSlotItemUse : public UWTLHUDIndicatorBase
{ 
public:
	UTextBlock*                                        tbCurrentEnergy;                                            // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0278   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDIndicatorMedicineItemEffect
/// Size: 0x0010 (0x000270 - 0x000280)
class UWTLHUDIndicatorMedicineItemEffect : public UWTLHUDIndicatorBase
{ 
public:
	UTextBlock*                                        tbDuration;                                                 // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0278   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDIndicators
/// Size: 0x0120 (0x000268 - 0x000388)
class UWTLHUDIndicators : public UWTLHUDWidgetBase
{ 
public:
	UWorld*                                            m_World;                                                    // 0x0268   (0x0008)  
	UWTLSharedData*                                    m_SharedData;                                               // 0x0270   (0x0008)  
	UCanvasPanel*                                      cpMain;                                                     // 0x0278   (0x0008)  
	UWrapBox*                                          wbIndicators;                                               // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_5[0x50];                                      // 0x0288   (0x0050)  MISSED
	TWeakObjectPtr<UClass*>                            CharacterStateIndicatorWidgetClass;                         // 0x02D8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterEffectIndicatorWidgetClass;                        // 0x0300   (0x0028)  
	TWeakObjectPtr<UClass*>                            MedicineItemEffectIndicatorWidgetClass;                     // 0x0328   (0x0028)  
	TWeakObjectPtr<UClass*>                            EquipmentSlotItemUseIndicatorWidgetClass;                   // 0x0350   (0x0028)  
	bool                                               bDebugShowAllCharacterStateIndicators;                      // 0x0378   (0x0001)  
	bool                                               bDebugShowAllCharacterEffectsIndicators;                    // 0x0379   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x037A   (0x0002)  MISSED
	float                                              IndicatorsWrapBoxDefaultWidth;                              // 0x037C   (0x0004)  
	float                                              IndicatorsWrapBoxShorterWidth;                              // 0x0380   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0384   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLHUDInformationDialogWindow
/// Size: 0x0018 (0x000288 - 0x0002A0)
class UWTLHUDInformationDialogWindow : public UWTLHUDWindowBase
{ 
public:
	UMultiLineEditableText*                            etDialogText;                                               // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0298   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDInGameMenu
/// Size: 0x00B8 (0x000268 - 0x000320)
class UWTLHUDInGameMenu : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpMenu;                                                     // 0x0268   (0x0008)  
	UBackgroundBlur*                                   bBackgroundBlur;                                            // 0x0270   (0x0008)  
	UWTLCommonTextButton*                              ucBtnReturnToGame;                                          // 0x0278   (0x0008)  
	UWTLCommonTextButton*                              ucBtnSuicide;                                               // 0x0280   (0x0008)  
	UWTLCommonTextButton*                              ucBtnOptions;                                               // 0x0288   (0x0008)  
	UWTLCommonTextButton*                              ucBtnStore;                                                 // 0x0290   (0x0008)  
	UCanvasPanel*                                      cpHighlightsBtn;                                            // 0x0298   (0x0008)  
	UWTLCommonButton*                                  ucBtnHighlights;                                            // 0x02A0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnQuitToMainMenu;                                        // 0x02A8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnExitGame;                                              // 0x02B0   (0x0008)  
	UWTLCommonStoreButton*                             ucStoreButton;                                              // 0x02B8   (0x0008)  
	UCanvasPanel*                                      cpWidgetContainer;                                          // 0x02C0   (0x0008)  
	UUserWidget*                                       m_CurrentWidget;                                            // 0x02C8   (0x0008)  
	TWeakObjectPtr<UClass*>                            CommonOptionsWidgetClass;                                   // 0x02D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            StoreWidgetClass;                                           // 0x02F8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDInGameMenu.ShowMenu
	void ShowMenu();                                                                                                         // [0x18219b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.QuitToMainMenu
	void QuitToMainMenu();                                                                                                   // [0x1821960] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnSuicideConfirmation
	void OnSuicideConfirmation();                                                                                            // [0x1821a50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnSuicideBtnClick
	void OnSuicideBtnClick();                                                                                                // [0x1821a50] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnStoreButtonClicked
	void OnStoreButtonClicked();                                                                                             // [0x18218f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnReturnToGameBtnClick
	void OnReturnToGameBtnClick();                                                                                           // [0x1821ac0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnQuitToMainMenuBtnClick
	void OnQuitToMainMenuBtnClick();                                                                                         // [0x1821960] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnOptionsBtnClick
	void OnOptionsBtnClick();                                                                                                // [0x1821a30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnHighlightsButtonClicked
	void OnHighlightsButtonClicked();                                                                                        // [0x18219d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.OnExitGameBtnClick
	void OnExitGameBtnClick();                                                                                               // [0x1821910] Final|Native|Private 
	// Function /Script/WTL.WTLHUDInGameMenu.ExitGame
	void ExitGame();                                                                                                         // [0x1821910] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDInteractiveSubstrate
/// Size: 0x0020 (0x000268 - 0x000288)
class UWTLHUDInteractiveSubstrate : public UWTLHUDWidgetBase
{ 
public:
	UBorder*                                           bUnlockedMouseCursorHint;                                   // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	AActor*                                            m_CurrentHighlightObject;                                   // 0x0278   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0280   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDInteractiveSubstrate.OnUnlockedMouseCursorHintMouseButtonDown
	FEventReply OnUnlockedMouseCursorHintMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                   // [0x1821dc0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDInteractiveSubstrate.OnInteractiveTraceShot
	void OnInteractiveTraceShot();                                                                                           // [0x1822000] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDInventory
/// Size: 0x0060 (0x000268 - 0x0002C8)
class UWTLHUDInventory : public UWTLHUDWidgetBase
{ 
public:
	UWTLHUDPlayerInventoryStorage*                     ucPlayerInventoryStorage;                                   // 0x0268   (0x0008)  
	UWTLHUDArmoredPlatesWindow*                        ucArmoredPlatesWindow;                                      // 0x0270   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        ShowSoundEvent;                                             // 0x0278   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        HideSoundEvent;                                             // 0x02A0   (0x0028)  
};

/// Class /Script/WTL.WTLHUDItemImage
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLHUDItemImage : public UUserWidget
{ 
public:
	UImage*                                            imgItem;                                                    // 0x0260   (0x0008)  
	UWTLHUDItemInformationBase*                        m_ItemInformationShortWidget;                               // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemInformationShortWidgetClass;                            // 0x0278   (0x0028)  
};

/// Class /Script/WTL.WTLHUDItemInformationBase
/// Size: 0x0148 (0x000780 - 0x0008C8)
class UWTLHUDItemInformationBase : public UWTLCommonItemInformation
{ 
public:
	UImage*                                            imgCustomizationPattern;                                    // 0x0780   (0x0008)  
	UTextBlock*                                        tbQuestItem;                                                // 0x0788   (0x0008)  
	UTextBlock*                                        tbItemStartQuest;                                           // 0x0790   (0x0008)  
	UTextBlock*                                        tbCanBePutIntoAccountInventory;                             // 0x0798   (0x0008)  
	URichTextBlock*                                    rtbNeedForQuests;                                           // 0x07A0   (0x0008)  
	URichTextBlock*                                    rtbStorageObject;                                           // 0x07A8   (0x0008)  
	UTextBlock*                                        tbLockedInInventoryWeightHint;                              // 0x07B0   (0x0008)  
	UTextBlock*                                        tbCannotBeUsedVehicleReason;                                // 0x07B8   (0x0008)  
	UHorizontalBox*                                    hbSerialNumber;                                             // 0x07C0   (0x0008)  
	UTextBlock*                                        tbSerialNumber;                                             // 0x07C8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageChangingArrow;                                      // 0x07D0   (0x0008)  
	UTextBlock*                                        tbDamageChangingPercent;                                    // 0x07D8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsAccuracyChangingArrow;                                    // 0x07E0   (0x0008)  
	UTextBlock*                                        tbAccuracyChangingPercent;                                  // 0x07E8   (0x0008)  
	UHorizontalBox*                                    hbModCount;                                                 // 0x07F0   (0x0008)  
	UTextBlock*                                        tbModCount;                                                 // 0x07F8   (0x0008)  
	UPanelWidget*                                      pwMuzzleAttachment;                                         // 0x0800   (0x0008)  
	UPanelWidget*                                      pwFlashlightAttachment;                                     // 0x0808   (0x0008)  
	UPanelWidget*                                      pwScopeAttachment;                                          // 0x0810   (0x0008)  
	UTextBlock*                                        tbMuzzleAttachment;                                         // 0x0818   (0x0008)  
	UTextBlock*                                        tbFlashlightAttachment;                                     // 0x0820   (0x0008)  
	UTextBlock*                                        tbScopeAttachment;                                          // 0x0828   (0x0008)  
	UPanelWidget*                                      pwInstalledArmoredPlates;                                   // 0x0830   (0x0008)  
	UPanelWidget*                                      pwFrontInstalledArmoredPlate;                               // 0x0838   (0x0008)  
	UPanelWidget*                                      pwBackInstalledArmoredPlate;                                // 0x0840   (0x0008)  
	UTextBlock*                                        tbFrontInstalledArmoredPlateName;                           // 0x0848   (0x0008)  
	UTextBlock*                                        tbBackInstalledArmoredPlateName;                            // 0x0850   (0x0008)  
	UHorizontalBox*                                    hbEnergy;                                                   // 0x0858   (0x0008)  
	UTextBlock*                                        tbEnergyCaption;                                            // 0x0860   (0x0008)  
	UTextBlock*                                        tbEnergy;                                                   // 0x0868   (0x0008)  
	UProgressBar*                                      pbEnergy;                                                   // 0x0870   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWearResistanceChangingArrow;                              // 0x0878   (0x0008)  
	UTextBlock*                                        tbWearResistanceChangingPercent;                            // 0x0880   (0x0008)  
	UHorizontalBox*                                    hbPaintType;                                                // 0x0888   (0x0008)  
	UTextBlock*                                        tbPaintTypeCaption;                                         // 0x0890   (0x0008)  
	UTextBlock*                                        tbPaintType;                                                // 0x0898   (0x0008)  
	UHorizontalBox*                                    hbValidityDate;                                             // 0x08A0   (0x0008)  
	UTextBlock*                                        tbValidityDate;                                             // 0x08A8   (0x0008)  
	UHorizontalBox*                                    hbCreationCharacterName;                                    // 0x08B0   (0x0008)  
	UTextBlock*                                        tbCreationCharacterName;                                    // 0x08B8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x08C0   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDItemInformation
/// Size: 0x0310 (0x0008C8 - 0x000BD8)
class UWTLHUDItemInformation : public UWTLHUDItemInformationBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x08C8   (0x0010)  MISSED
	UImage*                                            imgItem;                                                    // 0x08D8   (0x0008)  
	UImage*                                            imgItemType;                                                // 0x08E0   (0x0008)  
	UTextBlock*                                        tbItemTypeIDImage;                                          // 0x08E8   (0x0008)  
	UHorizontalBox*                                    hbWeaponAttachments;                                        // 0x08F0   (0x0008)  
	UHorizontalBox*                                    hbSellPrice;                                                // 0x08F8   (0x0008)  
	UHorizontalBox*                                    hbTotalSellPrice;                                           // 0x0900   (0x0008)  
	UImage*                                            imgMuzzleAttachment;                                        // 0x0908   (0x0008)  
	UImage*                                            imgFlashlightAttachment;                                    // 0x0910   (0x0008)  
	UImage*                                            imgScopeAttachment;                                         // 0x0918   (0x0008)  
	UProgressBar*                                      pbMuzzleAttachmentCondition;                                // 0x0920   (0x0008)  
	UProgressBar*                                      pbFlashlightAttachmentCondition;                            // 0x0928   (0x0008)  
	UProgressBar*                                      pbScopeAttachmentCondition;                                 // 0x0930   (0x0008)  
	UImage*                                            imgFrontInstalledArmoredPlate;                              // 0x0938   (0x0008)  
	UImage*                                            imgBackInstalledArmoredPlate;                               // 0x0940   (0x0008)  
	UProgressBar*                                      pbFrontInstalledArmoredPlateCondition;                      // 0x0948   (0x0008)  
	UProgressBar*                                      pbBackInstalledArmoredPlateCondition;                       // 0x0950   (0x0008)  
	UTextBlock*                                        tbSellPrice;                                                // 0x0958   (0x0008)  
	UTextBlock*                                        tbTotalSellPrice;                                           // 0x0960   (0x0008)  
	UCanvasPanel*                                      cpBtnPreview;                                               // 0x0968   (0x0008)  
	UCanvasPanel*                                      cpBtnCharacterPreview;                                      // 0x0970   (0x0008)  
	UWTLCommonButton*                                  ucBtnPreview;                                               // 0x0978   (0x0008)  
	UWTLCommonButton*                                  ucBtnCharacterPreview;                                      // 0x0980   (0x0008)  
	FSlateBrush                                        MuzzleAttachmentDefaultBrush;                               // 0x0988   (0x0088)  
	FSlateBrush                                        FlashlightAttachmentDefaultBrush;                           // 0x0A10   (0x0088)  
	FSlateBrush                                        ScopeAttachmentDefaultBrush;                                // 0x0A98   (0x0088)  
	FSlateBrush                                        ArmoredPlateDefaultBrush;                                   // 0x0B20   (0x0088)  
	FLinearColor                                       GoodWeaponAttachmentConditionColor;                         // 0x0BA8   (0x0010)  
	FLinearColor                                       NormalWeaponAttachmentConditionColor;                       // 0x0BB8   (0x0010)  
	FLinearColor                                       BadWeaponAttachmentConditionColor;                          // 0x0BC8   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDItemInformation.OnPreviewBtnClick
	void OnPreviewBtnClick();                                                                                                // [0x1822330] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemInformation.OnCharacterPreviewBtnClick
	void OnCharacterPreviewBtnClick();                                                                                       // [0x1822310] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDItemInformationEffectInfluence
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLHUDItemInformationEffectInfluence : public UUserWidget
{ 
public:
	UImage*                                            imgCharacterEffect;                                         // 0x0260   (0x0008)  
	UTextBlock*                                        tbInfluenceAtStart;                                         // 0x0268   (0x0008)  
	UTextBlock*                                        tbInfluencePerTick;                                         // 0x0270   (0x0008)  
	FVector2D                                          ImageSize;                                                  // 0x0278   (0x0008)  
	bool                                               bIsShortRecord;                                             // 0x0280   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0281   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLHUDItemInformationMedicineEffect
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLHUDItemInformationMedicineEffect : public UUserWidget
{ 
public:
	UImage*                                            imgEffect;                                                  // 0x0260   (0x0008)  
	UTextBlock*                                        tbRange;                                                    // 0x0268   (0x0008)  
	UCanvasPanel*                                      cpCurve;                                                    // 0x0270   (0x0008)  
	TArray<FWTLMedicineEffectImageInfo>                ImagesInfo;                                                 // 0x0278   (0x0010)  
};

/// Class /Script/WTL.WTLHUDItemInformationShort
/// Size: 0x0028 (0x0008C8 - 0x0008F0)
class UWTLHUDItemInformationShort : public UWTLHUDItemInformationBase
{ 
public:
	UVerticalBox*                                      vbHotkeys;                                                  // 0x08C8   (0x0008)  
	UHorizontalBox*                                    hbShiftHotkey;                                              // 0x08D0   (0x0008)  
	UTextBlock*                                        tbShiftHotkeyAction;                                        // 0x08D8   (0x0008)  
	UWTLHUDCraftInstrumentInfo*                        ucCraftInstrumentInfo;                                      // 0x08E0   (0x0008)  
	UWTLHUDPossibleModificationInfo*                   ucPossibleModificationInfo;                                 // 0x08E8   (0x0008)  
};

/// Class /Script/WTL.WTLHUDItemInformationWindow
/// Size: 0x0000 (0x000298 - 0x000298)
class UWTLHUDItemInformationWindow : public UWTLCommonItemInformationWindow
{ 
public:
};

/// Class /Script/WTL.WTLHUDItemPlacementHint
/// Size: 0x0028 (0x000268 - 0x000290)
class UWTLHUDItemPlacementHint : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbPlaceKeyName;                                             // 0x0268   (0x0008)  
	UTextBlock*                                        tbCancelKeyName;                                            // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0278   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLHUDItemReadWindow
/// Size: 0x0020 (0x000288 - 0x0002A8)
class UWTLHUDItemReadWindow : public UWTLHUDWindowBase
{ 
public:
	UScrollBox*                                        sbContent;                                                  // 0x0288   (0x0008)  
	UTextBlock*                                        tbContent;                                                  // 0x0290   (0x0008)  
	UTextBlock*                                        tbCloseKey;                                                 // 0x0298   (0x0008)  
	UTextBlock*                                        tbCloseKeyActionName;                                       // 0x02A0   (0x0008)  
};

/// Class /Script/WTL.WTLHUDItemsCustomization
/// Size: 0x0010 (0x000278 - 0x000288)
class UWTLHUDItemsCustomization : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDItemsCustomizationWindow*                   ucItemsCustomizationWindow;                                 // 0x0278   (0x0008)  
	UWTLCommonColorPresets*                            ucColorPresets;                                             // 0x0280   (0x0008)  
};

/// Class /Script/WTL.WTLHUDItemsCustomizationWindow
/// Size: 0x0100 (0x000288 - 0x000388)
class UWTLHUDItemsCustomizationWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLCommonItemPreview*                             ucItemPreview;                                              // 0x0288   (0x0008)  
	UWTLHUDInventorySlot*                              ucCustomizationSlot;                                        // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbScalar;                                                   // 0x0298   (0x0008)  
	UWTLOptionsParameterSwitcher*                      ucPatternSwitcher;                                          // 0x02A0   (0x0008)  
	UHorizontalBox*                                    hbColor;                                                    // 0x02A8   (0x0008)  
	UWTLCommonColorButton*                             ucColorButton;                                              // 0x02B0   (0x0008)  
	UTextBlock*                                        tbDefaultColor;                                             // 0x02B8   (0x0008)  
	UButton*                                           btnResetColor;                                              // 0x02C0   (0x0008)  
	UScrollBox*                                        sbColorIngredients;                                         // 0x02C8   (0x0008)  
	UWrapBox*                                          wbColorIngredients;                                         // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbCurrentSettings;                                          // 0x02D8   (0x0008)  
	UTextBlock*                                        tbCurrentSettings;                                          // 0x02E0   (0x0008)  
	UHorizontalBox*                                    hbActionPrice;                                              // 0x02E8   (0x0008)  
	UTextBlock*                                        tbActionPrice;                                              // 0x02F0   (0x0008)  
	UImage*                                            imgBalanceDone;                                             // 0x02F8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnApply;                                                 // 0x0300   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0308   (0x0008)  MISSED
	AWTLNPCActor*                                      m_NPCActor;                                                 // 0x0310   (0x0008)  
	unsigned char                                      UnknownData01_5[0x38];                                      // 0x0318   (0x0038)  MISSED
	TWeakObjectPtr<UClass*>                            IngredientItemSlotWidgetClass;                              // 0x0350   (0x0028)  
	FMargin                                            IngredientSlotPadding;                                      // 0x0378   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnResetColorBtnClicked
	void OnResetColorBtnClicked();                                                                                           // [0x1822a60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnPatternSwitcherValueChanged
	void OnPatternSwitcherValueChanged(int32_t CurrentIndex, FString Prefix);                                                // [0x1822cb0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x1823000] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnItemColorPicked
	void OnItemColorPicked(EWTLCustomizationColorPresetType ColorPresetType, int32_t Number, FLinearColor& Color, FLinearColor& PreviewColor); // [0x18227c0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnCustomizationSlotInit
	void OnCustomizationSlotInit(UWTLHUDInventorySlot* InventorySlot);                                                       // [0x1822f20] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnCustomizationSlotClear
	void OnCustomizationSlotClear(uint64_t ItemId);                                                                          // [0x1822e40] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnColorBtnClicked
	void OnColorBtnClicked(FGeometry& BtnGeometry, FPointerEvent& InMouseEvent);                                             // [0x1822a80] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDItemsCustomizationWindow.OnApplyBtnClicked
	void OnApplyBtnClicked();                                                                                                // [0x1822a40] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDItemsModification
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDItemsModification : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDItemsModificationWindow*                    ucItemsModificationWindow;                                  // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDItemsModificationBarChart
/// Size: 0x0050 (0x000260 - 0x0002B0)
class UWTLHUDItemsModificationBarChart : public UUserWidget
{ 
public:
	UTextBlock*                                        tbCurrentValue;                                             // 0x0260   (0x0008)  
	UTextBlock*                                        tbModifiedValue;                                            // 0x0268   (0x0008)  
	UProgressBar*                                      pbCurrentValue;                                             // 0x0270   (0x0008)  
	UProgressBar*                                      pbModifiedValue;                                            // 0x0278   (0x0008)  
	FLinearColor                                       DefaultBarFillColor;                                        // 0x0280   (0x0010)  
	FLinearColor                                       IncreasedBarFillColor;                                      // 0x0290   (0x0010)  
	FLinearColor                                       DecreasedBarFillColor;                                      // 0x02A0   (0x0010)  
};

/// Class /Script/WTL.WTLHUDItemsModificationPercentDelta
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLHUDItemsModificationPercentDelta : public UUserWidget
{ 
public:
	UTextBlock*                                        tbPercentDelta;                                             // 0x0260   (0x0008)  
	UTextBlock*                                        tbPercentSign;                                              // 0x0268   (0x0008)  
	FLinearColor                                       IncreasedColor;                                             // 0x0270   (0x0010)  
	FLinearColor                                       DecreasedColor;                                             // 0x0280   (0x0010)  
};

/// Class /Script/WTL.WTLHUDItemsModificationWindow
/// Size: 0x0270 (0x000288 - 0x0004F8)
class UWTLHUDItemsModificationWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLHUDItemSlot*                                   ucModificationKitItemSlot;                                  // 0x0288   (0x0008)  
	UWTLHUDInventorySlot*                              ucItemForModificationSlot;                                  // 0x0290   (0x0008)  
	UTextBlock*                                        tbDropItemHint;                                             // 0x0298   (0x0008)  
	UTextBlock*                                        tbNoModificationDataHint;                                   // 0x02A0   (0x0008)  
	UBorder*                                           bHintAreaHeightRegulator;                                   // 0x02A8   (0x0008)  
	UVerticalBox*                                      vbModificators;                                             // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbDamage;                                                   // 0x02B8   (0x0008)  
	UTextBlock*                                        tbDamageMin;                                                // 0x02C0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageDeltaMinFirstRangeSign;                             // 0x02C8   (0x0008)  
	UTextBlock*                                        tbDamageDeltaMinFirstRange;                                 // 0x02D0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageDeltaMinSecondRangeSign;                            // 0x02D8   (0x0008)  
	UTextBlock*                                        tbDamageDeltaMinSecondRange;                                // 0x02E0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageDeltaMinArrow;                                      // 0x02E8   (0x0008)  
	UTextBlock*                                        tbDamageMax;                                                // 0x02F0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageDeltaMaxFirstRangeSign;                             // 0x02F8   (0x0008)  
	UTextBlock*                                        tbDamageDeltaMaxFirstRange;                                 // 0x0300   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageDeltaMaxSecondRangeSign;                            // 0x0308   (0x0008)  
	UTextBlock*                                        tbDamageDeltaMaxSecondRange;                                // 0x0310   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsDamageDeltaMaxArrow;                                      // 0x0318   (0x0008)  
	UHorizontalBox*                                    hbAccuracy;                                                 // 0x0320   (0x0008)  
	UTextBlock*                                        tbAccuracy;                                                 // 0x0328   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsAccuracyDeltaMinRangeSign;                                // 0x0330   (0x0008)  
	UTextBlock*                                        tbAccuracyDeltaMinRange;                                    // 0x0338   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsAccuracyDeltaMaxRangeSign;                                // 0x0340   (0x0008)  
	UTextBlock*                                        tbAccuracyDeltaMaxRange;                                    // 0x0348   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsAccuracyDeltaArrow;                                       // 0x0350   (0x0008)  
	UHorizontalBox*                                    hbArmor;                                                    // 0x0358   (0x0008)  
	UTextBlock*                                        tbArmorMin;                                                 // 0x0360   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsArmorDeltaMinFirstRangeSign;                              // 0x0368   (0x0008)  
	UTextBlock*                                        tbArmorDeltaMinFirstRange;                                  // 0x0370   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsArmorDeltaMinSecondRangeSign;                             // 0x0378   (0x0008)  
	UTextBlock*                                        tbArmorDeltaMinSecondRange;                                 // 0x0380   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsArmorDeltaMinArrow;                                       // 0x0388   (0x0008)  
	UTextBlock*                                        tbArmorMax;                                                 // 0x0390   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsArmorDeltaMaxFirstRangeSign;                              // 0x0398   (0x0008)  
	UTextBlock*                                        tbArmorDeltaMaxFirstRange;                                  // 0x03A0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsArmorDeltaMaxSecondRangeSign;                             // 0x03A8   (0x0008)  
	UTextBlock*                                        tbArmorDeltaMaxSecondRange;                                 // 0x03B0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsArmorDeltaMaxArrow;                                       // 0x03B8   (0x0008)  
	UTextBlock*                                        tbMonsterArmorMin;                                          // 0x03C0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMonsterArmorDeltaMinFirstRangeSign;                       // 0x03C8   (0x0008)  
	UTextBlock*                                        tbMonsterArmorDeltaMinFirstRange;                           // 0x03D0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMonsterArmorDeltaMinSecondRangeSign;                      // 0x03D8   (0x0008)  
	UTextBlock*                                        tbMonsterArmorDeltaMinSecondRange;                          // 0x03E0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMonsterArmorDeltaMinArrow;                                // 0x03E8   (0x0008)  
	UTextBlock*                                        tbMonsterArmorMax;                                          // 0x03F0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMonsterArmorDeltaMaxFirstRangeSign;                       // 0x03F8   (0x0008)  
	UTextBlock*                                        tbMonsterArmorDeltaMaxFirstRange;                           // 0x0400   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMonsterArmorDeltaMaxSecondRangeSign;                      // 0x0408   (0x0008)  
	UTextBlock*                                        tbMonsterArmorDeltaMaxSecondRange;                          // 0x0410   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMonsterArmorDeltaMaxArrow;                                // 0x0418   (0x0008)  
	UHorizontalBox*                                    hbWeight;                                                   // 0x0420   (0x0008)  
	UTextBlock*                                        tbWeight;                                                   // 0x0428   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWeightDeltaMinRangeSign;                                  // 0x0430   (0x0008)  
	UTextBlock*                                        tbWeightDeltaMinRange;                                      // 0x0438   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWeightDeltaMaxRangeSign;                                  // 0x0440   (0x0008)  
	UTextBlock*                                        tbWeightDeltaMaxRange;                                      // 0x0448   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWeightDeltaArrow;                                         // 0x0450   (0x0008)  
	UHorizontalBox*                                    hbWearResistance;                                           // 0x0458   (0x0008)  
	UTextBlock*                                        tbWearResistance;                                           // 0x0460   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWearResistanceDeltaMinRangeSign;                          // 0x0468   (0x0008)  
	UTextBlock*                                        tbWearResistanceDeltaMinRange;                              // 0x0470   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWearResistanceDeltaMaxRangeSign;                          // 0x0478   (0x0008)  
	UTextBlock*                                        tbWearResistanceDeltaMaxRange;                              // 0x0480   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWearResistanceDeltaArrow;                                 // 0x0488   (0x0008)  
	UHorizontalBox*                                    hbModificationChance;                                       // 0x0490   (0x0008)  
	UBorder*                                           bModificationChance;                                        // 0x0498   (0x0008)  
	UTextBlock*                                        tbModificationChance;                                       // 0x04A0   (0x0008)  
	UTextBlock*                                        tbModificationWarning;                                      // 0x04A8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnApply;                                                 // 0x04B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x04B8   (0x0010)  MISSED
	FLinearColor                                       ModificationChanceHighColor;                                // 0x04C8   (0x0010)  
	FLinearColor                                       ModificationChanceMediumColor;                              // 0x04D8   (0x0010)  
	FLinearColor                                       ModificationChanceLowColor;                                 // 0x04E8   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDItemsModificationWindow.OnUseModificationKitResult
	void OnUseModificationKitResult(bool IsSuccess);                                                                         // [0x18281e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsModificationWindow.OnItemForModificationSlotInit
	void OnItemForModificationSlotInit(UWTLHUDInventorySlot* InventorySlot);                                                 // [0x1828490] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsModificationWindow.OnItemForModificationSlotClear
	void OnItemForModificationSlotClear(uint64_t ItemId);                                                                    // [0x18283c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsModificationWindow.OnApplyModificationKitConfirm
	void OnApplyModificationKitConfirm();                                                                                    // [0x18282c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemsModificationWindow.OnApplyBtnClicked
	void OnApplyBtnClicked();                                                                                                // [0x18283a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDItemSplitBuyWindow
/// Size: 0x00F0 (0x000288 - 0x000378)
class UWTLHUDItemSplitBuyWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbItemName;                                                 // 0x0288   (0x0008)  
	UTextBlock*                                        tbTotalWeight;                                              // 0x0290   (0x0008)  
	UTextBlock*                                        tbTotalPrice;                                               // 0x0298   (0x0008)  
	UTextBlock*                                        tbErrorNotify;                                              // 0x02A0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCountToBuy;                                              // 0x02A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnCountUp;                                               // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnCountDown;                                             // 0x02B8   (0x0008)  
	UButton*                                           btnCountAll;                                                // 0x02C0   (0x0008)  
	UButton*                                           btnCountMoneyAll;                                           // 0x02C8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02D0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x02D8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x70];                                      // 0x02E0   (0x0070)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        BuySellItemsSoundEvent;                                     // 0x0350   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnOKBtnClick
	void OnOKBtnClick();                                                                                                     // [0x18289a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnCountUpBtnClick
	void OnCountUpBtnClick();                                                                                                // [0x1828a20] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnCountToBuyValueChange
	void OnCountToBuyValueChange(int32_t NewCount);                                                                          // [0x18288b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnCountToBuyTextBoxCommitted
	void OnCountToBuyTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                   // [0x18286d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnCountMoneyAllBtnClick
	void OnCountMoneyAllBtnClick();                                                                                          // [0x18289c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnCountDownBtnClick
	void OnCountDownBtnClick();                                                                                              // [0x1828a00] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnCountAllBtnClick
	void OnCountAllBtnClick();                                                                                               // [0x18289e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitBuyWindow.OnBuyItemConfirm
	void OnBuyItemConfirm();                                                                                                 // [0x1828980] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDItemSplitWindow
/// Size: 0x00B8 (0x000288 - 0x000340)
class UWTLHUDItemSplitWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbItemName;                                                 // 0x0288   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x0290   (0x0008)  
	UTextBlock*                                        tbItemSplitCount;                                           // 0x0298   (0x0008)  
	UTextBlock*                                        tbFromWeight;                                               // 0x02A0   (0x0008)  
	UTextBlock*                                        tbToWeight;                                                 // 0x02A8   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbFrom;                                                    // 0x02B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbTo;                                                      // 0x02B8   (0x0008)  
	USlider*                                           slSplit;                                                    // 0x02C0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02C8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x68];                                      // 0x02D8   (0x0068)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnToValueCommitted
	void OnToValueCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                             // [0x1828f50] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnToValueChanged
	void OnToValueChanged(int32_t Value);                                                                                    // [0x18293e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnTakeFromClanStorage
	void OnTakeFromClanStorage(FString Description);                                                                         // [0x18298a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnSplitSliderValueChanged
	void OnSplitSliderValueChanged(float Value);                                                                             // [0x1829310] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnPutToClanStorage
	void OnPutToClanStorage(FString Description);                                                                            // [0x18297b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnOKBtnClick
	void OnOKBtnClick();                                                                                                     // [0x1829790] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnFromValueCommitted
	void OnFromValueCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                           // [0x1829130] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnFromValueChanged
	void OnFromValueChanged(int32_t Value);                                                                                  // [0x18294f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnDropFromInventoryConfirmed
	void OnDropFromInventoryConfirmed();                                                                                     // [0x18296c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemSplitWindow.OnDestroyInInventoryConfirmed
	void OnDestroyInInventoryConfirmed();                                                                                    // [0x18295f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDItemTypeTabButton
/// Size: 0x0028 (0x0012C8 - 0x0012F0)
class UWTLHUDItemTypeTabButton : public UWTLCommonTabButton
{ 
public:
	UImage*                                            imgTab;                                                     // 0x12C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x12D0   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLHUDItemViewWindow
/// Size: 0x0098 (0x000288 - 0x000320)
class UWTLHUDItemViewWindow : public UWTLHUDWindowBase
{ 
public:
	UBorder*                                           bBackground;                                                // 0x0288   (0x0008)  
	UTextBlock*                                        tbNoImage;                                                  // 0x0290   (0x0008)  
	UImage*                                            imgView;                                                    // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbReadHint;                                                 // 0x02A0   (0x0008)  
	UTextBlock*                                        tbReadKey;                                                  // 0x02A8   (0x0008)  
	UTextBlock*                                        tbReadKeyActionName;                                        // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbShowTranslationHint;                                      // 0x02B8   (0x0008)  
	UTextBlock*                                        tbCloseKey;                                                 // 0x02C0   (0x0008)  
	UTextBlock*                                        tbCloseKeyActionName;                                       // 0x02C8   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psViewPages;                                                // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x24];                                      // 0x02D8   (0x0024)  MISSED
	float                                              MAX_IMAGE_VIEW_SIZE_X;                                      // 0x02FC   (0x0004)  
	float                                              MAX_IMAGE_VIEW_SIZE_Y;                                      // 0x0300   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0304   (0x0004)  MISSED
	FKey                                               ReadKey;                                                    // 0x0308   (0x0018)  


	/// Functions
	// Function /Script/WTL.WTLHUDItemViewWindow.OnViewPagesValueChanged
	void OnViewPagesValueChanged(int32_t CurrentIndex, FString Prefix);                                                      // [0x1829fc0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDItemViewWindow.OnBackgroundMouseButtonDown
	FEventReply OnBackgroundMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                // [0x182a120] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDJunkMachine
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDJunkMachine : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDJunkMachineWindow*                          ucJunkMachineWindow;                                        // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDJunkMachineWindow
/// Size: 0x00D8 (0x000288 - 0x000360)
class UWTLHUDJunkMachineWindow : public UWTLHUDWindowBase
{ 
public:
	UHorizontalBox*                                    hbTabBtns;                                                  // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsMain;                                                     // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsUtilization;                                              // 0x0298   (0x0008)  
	UWTLHUDUtilizationStorage*                         ucUtilizationStorage;                                       // 0x02A0   (0x0008)  
	UWidgetSwitcher*                                   wsExchange;                                                 // 0x02A8   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucExchangedItemTypeSlot;                                    // 0x02B0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnExchange;                                              // 0x02B8   (0x0008)  
	UTextBlock*                                        tbInventorySlotsCheck;                                      // 0x02C0   (0x0008)  
	UWidgetSwitcher*                                   wsFirstSlotCheck;                                           // 0x02C8   (0x0008)  
	UWidgetSwitcher*                                   wsSecondSlotCheck;                                          // 0x02D0   (0x0008)  
	UWidgetSwitcher*                                   wsThirdSlotCheck;                                           // 0x02D8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02E0   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            TabButtonClass;                                             // 0x02E8   (0x0028)  
	FSlateColor                                        InventorySlotsCheckValidColor;                              // 0x0310   (0x0028)  
	FSlateColor                                        InventorySlotsCheckNotValidColor;                           // 0x0338   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDJunkMachineWindow.OnTabBtnClicked
	void OnTabBtnClicked(char TabIndex);                                                                                     // [0x182a700] Final|Native|Private 
	// Function /Script/WTL.WTLHUDJunkMachineWindow.OnJunkMachineBlackListChanged
	void OnJunkMachineBlackListChanged();                                                                                    // [0x182a7d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDJunkMachineWindow.OnExchangeConfirmed
	void OnExchangeConfirmed();                                                                                              // [0x182a660] Final|Native|Private 
	// Function /Script/WTL.WTLHUDJunkMachineWindow.OnExchangeBtnClicked
	void OnExchangeBtnClicked();                                                                                             // [0x182a6e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDLayer
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLHUDLayer : public UUserWidget
{ 
public:
	UCanvasPanel*                                      cpLayer;                                                    // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLHUDLevelBar
/// Size: 0x0008 (0x000268 - 0x000270)
class UWTLHUDLevelBar : public UWTLHUDWidgetBase
{ 
public:
	UProgressBar*                                      pbLevel;                                                    // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLHUDLevelUp
/// Size: 0x00C0 (0x000268 - 0x000328)
class UWTLHUDLevelUp : public UWTLHUDWidgetBase
{ 
public:
	UBorder*                                           bBackground;                                                // 0x0268   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbParametersPoints;                                         // 0x0278   (0x0008)  
	UTextBlock*                                        tbParametersPoints;                                         // 0x0280   (0x0008)  
	UTextBlock*                                        tbParametersPointsCaption;                                  // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbSkillPoints;                                              // 0x0290   (0x0008)  
	UTextBlock*                                        tbSkillPoints;                                              // 0x0298   (0x0008)  
	UTextBlock*                                        tbSkillPointsCaption;                                       // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x24];                                      // 0x02A8   (0x0024)  MISSED
	float                                              DefaultBackgroundHeight;                                    // 0x02CC   (0x0004)  
	float                                              ValueHeightDelta;                                           // 0x02D0   (0x0004)  
	float                                              StartShowParametersPointsAnimDelay;                         // 0x02D4   (0x0004)  
	float                                              StartShowSkillPointsAnimDelay;                              // 0x02D8   (0x0004)  
	float                                              HideDelayTime;                                              // 0x02DC   (0x0004)  
	TWeakObjectPtr<UFMODEvent*>                        LevelUpSoundEvent;                                          // 0x02E0   (0x0028)  
	UWidgetAnimation*                                  ShowAnimation;                                              // 0x0308   (0x0008)  
	UWidgetAnimation*                                  HideAnimation;                                              // 0x0310   (0x0008)  
	UWidgetAnimation*                                  ShowParametersPointsAnimation;                              // 0x0318   (0x0008)  
	UWidgetAnimation*                                  ShowSkillPointsAnimation;                                   // 0x0320   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDLevelUp.OnShowAnimationFinished
	void OnShowAnimationFinished();                                                                                          // [0x182aad0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDLevelUp.OnHideAnimationFinished
	void OnHideAnimationFinished();                                                                                          // [0x182aab0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDLoader
/// Size: 0x0008 (0x000268 - 0x000270)
class UWTLHUDLoader : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbLoaderStatus;                                             // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLHUDMailBox
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDMailBox : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDMailBoxWindow*                              ucMailBoxWindow;                                            // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDMailBoxInboxListItem
/// Size: 0x02E0 (0x000260 - 0x000540)
class UWTLHUDMailBoxInboxListItem : public UUserWidget
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0260   (0x0008)  
	UImage*                                            imgIcon;                                                    // 0x0268   (0x0008)  
	UTextBlock*                                        tbFrom;                                                     // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbWeight;                                                   // 0x0278   (0x0008)  
	UTextBlock*                                        tbWeight;                                                   // 0x0280   (0x0008)  
	UImage*                                            imgDeleteRemainingTime;                                     // 0x0288   (0x0008)  
	UTextBlock*                                        tbDeleteRemainingTime;                                      // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbTokensAmountHead;                                         // 0x0298   (0x0008)  
	UTextBlock*                                        tbTokensAmountHead;                                         // 0x02A0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnAction;                                                // 0x02A8   (0x0008)  
	UVerticalBox*                                      vbContent;                                                  // 0x02B0   (0x0008)  
	UCanvasPanel*                                      cpMessageText;                                              // 0x02B8   (0x0008)  
	UTextBlock*                                        tbMessageText;                                              // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbItems;                                                    // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbTokensAmountBody;                                         // 0x02D0   (0x0008)  
	UTextBlock*                                        tbTokensAmountBody;                                         // 0x02D8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnReceive;                                               // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x150];                                     // 0x02E8   (0x0150)  MISSED
	TWeakObjectPtr<UClass*>                            ItemSlotWidgetClass;                                        // 0x0438   (0x0028)  
	float                                              DefaultHeight;                                              // 0x0460   (0x0004)  
	float                                              MessageTextHeight;                                          // 0x0464   (0x0004)  
	float                                              ItemsHeight;                                                // 0x0468   (0x0004)  
	float                                              hbTokensAmountBodyHeight;                                   // 0x046C   (0x0004)  
	float                                              hbReceiveBtnHeight;                                         // 0x0470   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0474   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        LetterIcon;                                                 // 0x0478   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        ItemsIcon;                                                  // 0x04A0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        TokensIcon;                                                 // 0x04C8   (0x0028)  
	char                                               MaxItemsToAdd;                                              // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4F];                                      // 0x04F1   (0x004F)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDMailBoxInboxListItem.OnReceiveBtnClicked
	void OnReceiveBtnClicked();                                                                                              // [0x182afd0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxInboxListItem.OnActionBtnClicked
	void OnActionBtnClicked();                                                                                               // [0x182b020] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDMailBoxSentMailListItem
/// Size: 0x0110 (0x000260 - 0x000370)
class UWTLHUDMailBoxSentMailListItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbToCharacterName;                                          // 0x0260   (0x0008)  
	UTextBlock*                                        tbMailDate;                                                 // 0x0268   (0x0008)  
	UTextBlock*                                        tbDeliveryType;                                             // 0x0270   (0x0008)  
	UTextBlock*                                        tbTotalWeight;                                              // 0x0278   (0x0008)  
	UTextBlock*                                        tbTotalPrice;                                               // 0x0280   (0x0008)  
	UImage*                                            imgMessageText;                                             // 0x0288   (0x0008)  
	UTextBlock*                                        tbState;                                                    // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsStateInfo;                                                // 0x0298   (0x0008)  
	UTextBlock*                                        tbFactDeliveryDate;                                         // 0x02A0   (0x0008)  
	FSlateColor                                        TravelingStateTextColor;                                    // 0x02A8   (0x0028)  
	FSlateColor                                        ReadyToPickupStateTextColor;                                // 0x02D0   (0x0028)  
	FSlateColor                                        DeliveredStateTextColor;                                    // 0x02F8   (0x0028)  
	FSlateColor                                        ExpiredStateTextColor;                                      // 0x0320   (0x0028)  
	TWeakObjectPtr<UClass*>                            HUDToolTipTextWidgetClass;                                  // 0x0348   (0x0028)  
};

/// Class /Script/WTL.WTLHUDMailBoxStorage
/// Size: 0x00C8 (0x0002D8 - 0x0003A0)
class UWTLHUDMailBoxStorage : public UWTLHUDPriceStorage
{ 
public:
	UWTLCommonSuggestionTextBox*                       stbRecipientName;                                           // 0x02D8   (0x0008)  
	UEditableTextBox*                                  etbRecipientName;                                           // 0x02E0   (0x0008)  
	UWidgetSwitcher*                                   wsRecipientNameValidation;                                  // 0x02E8   (0x0008)  
	UEditableTextBox*                                  etbSubject;                                                 // 0x02F0   (0x0008)  
	UMultiLineEditableTextBox*                         etbMessageText;                                             // 0x02F8   (0x0008)  
	UTextBlock*                                        tbMessageCharactersCountCurrent;                            // 0x0300   (0x0008)  
	UTextBlock*                                        tbMessageCharactersCountMax;                                // 0x0308   (0x0008)  
	UTextBlock*                                        tbWeightLimit;                                              // 0x0310   (0x0008)  
	UTextBlock*                                        tbCurrentWeight;                                            // 0x0318   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbTokensAmountToSend;                                      // 0x0320   (0x0008)  
	UWTLCommonComboBoxString*                          cbsDeliveryType;                                            // 0x0328   (0x0008)  
	UTextBlock*                                        tbDeliveryDelay;                                            // 0x0330   (0x0008)  
	UTextBlock*                                        tbDeliveryDelayHours;                                       // 0x0338   (0x0008)  
	UThrobber*                                         thSendLoader;                                               // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_6[0x58];                                      // 0x0348   (0x0058)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnTokensAmountToSendValueChange
	void OnTokensAmountToSendValueChange(int32_t Value);                                                                     // [0x182b840] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnTokensAmountToSendCommitted
	void OnTokensAmountToSendCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                  // [0x182b660] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnSendMailSuccessResultDialogHide
	void OnSendMailSuccessResultDialogHide();                                                                                // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnSendCheckRecipientNameRequest
	void OnSendCheckRecipientNameRequest();                                                                                  // [0x182b460] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnRecipientNameCommitted
	void OnRecipientNameCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                       // [0x182bc10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnRecipientNameChanged
	void OnRecipientNameChanged(FText& Text);                                                                                // [0x182bdd0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnMessageTextCommitted
	void OnMessageTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                         // [0x182b920] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnMessageTextChanged
	void OnMessageTextChanged(FText& Text);                                                                                  // [0x182bae0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnMailPackageSent
	void OnMailPackageSent();                                                                                                // [0x182b340] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnMailPackageSendTimeout
	void OnMailPackageSendTimeout();                                                                                         // [0x182b320] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnDeliveryTypeSelectionChanged
	void OnDeliveryTypeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                     // [0x182b480] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxStorage.OnCheckRecipientNameAvailableResponse
	void OnCheckRecipientNameAvailableResponse(FWTLResponse& Response);                                                      // [0x182b360] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDMailBoxWindow
/// Size: 0x0150 (0x000288 - 0x0003D8)
class UWTLHUDMailBoxWindow : public UWTLHUDWindowBase
{ 
public:
	UHorizontalBox*                                    hbTabBtns;                                                  // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsMail;                                                     // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0298   (0x0008)  MISSED
	UWidgetSwitcher*                                   wsInbox;                                                    // 0x02A0   (0x0008)  
	UWidgetSwitcher*                                   wsInboxList;                                                // 0x02A8   (0x0008)  
	UScrollBox*                                        sbInboxList;                                                // 0x02B0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnUpdateInbox;                                           // 0x02B8   (0x0008)  
	UWTLCommonPageSwitcher*                            ucPageSwitcher;                                             // 0x02C0   (0x0008)  
	UWidgetSwitcher*                                   wsUpdateTextInbox;                                          // 0x02C8   (0x0008)  
	UWidgetSwitcher*                                   wsSentMail;                                                 // 0x02D0   (0x0008)  
	UScrollBox*                                        sbSentMailList;                                             // 0x02D8   (0x0008)  
	unsigned char                                      UnknownData01_5[0x78];                                      // 0x02E0   (0x0078)  MISSED
	UWTLHUDMailBoxStorage*                             ucMailBoxStorage;                                           // 0x0358   (0x0008)  
	TWeakObjectPtr<UClass*>                            TabButtonClass;                                             // 0x0360   (0x0028)  
	TWeakObjectPtr<UClass*>                            MailBoxInboxListItemWidgetClass;                            // 0x0388   (0x0028)  
	TWeakObjectPtr<UClass*>                            MailBoxSentMailListItemWidgetClass;                         // 0x03B0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDMailBoxWindow.UpdateInboxList
	void UpdateInboxList(int32_t CurrentPageIndex);                                                                          // [0x182d000] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.UpdateInbox
	void UpdateInbox();                                                                                                      // [0x182d0d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnTabBtnClicked
	void OnTabBtnClicked(char TabIndex);                                                                                     // [0x182c5a0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnSentMailListScrolled
	void OnSentMailListScrolled(float CurrentOffset);                                                                        // [0x182c670] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailPackageReceived
	void OnMailPackageReceived(uint64_t MailPackageID);                                                                      // [0x182cc90] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailPackageReceiveClicked
	void OnMailPackageReceiveClicked(FWTLMailPackageRecord MailPackage);                                                     // [0x182cab0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailPackageOpenClicked
	void OnMailPackageOpenClicked(UWTLHUDMailBoxInboxListItem* OpenedInboxListItem, FWTLMailPackageRecord& MailPackage);     // [0x182c790] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailPackageListReceived
	void OnMailPackageListReceived(TArray<FWTLMailPackageRecord>& MailPackages);                                             // [0x182cd70] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailPackageCountReceived
	void OnMailPackageCountReceived(int32_t Count);                                                                          // [0x182cf30] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailPackageCloseClicked
	void OnMailPackageCloseClicked();                                                                                        // [0x182c770] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnMailBoxActiveStateChanged
	void OnMailBoxActiveStateChanged(bool IsActive);                                                                         // [0x1823000] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMailBoxWindow.OnInboxListScrolled
	void OnInboxListScrolled(float CurrentOffset);                                                                           // [0x182d0f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDMainMenu
/// Size: 0x0400 (0x0004F8 - 0x0008F8)
class AWTLHUDMainMenu : public AWTLHUDBase
{ 
public:
	UWTLMainMenuCredits*                               m_Credits;                                                  // 0x04F8   (0x0008)  
	UWTLMainMenuAnnouncer*                             m_AnnouncerWidget;                                          // 0x0500   (0x0008)  
	UWTLCommonButton*                                  m_OptionsButtonWidget;                                      // 0x0508   (0x0008)  
	UWTLCommonOptions*                                 m_OptionsWidget;                                            // 0x0510   (0x0008)  
	UWTLMainMenuCreditsAmountWithTopUp*                m_CreditsAmountWithTopUpWidget;                             // 0x0518   (0x0008)  
	UWTLMainMenuChooseLanguage*                        m_ChooseLanguageWidget;                                     // 0x0520   (0x0008)  
	UWTLMainMenuChooseAccountType*                     m_ChooseAccountTypeWidget;                                  // 0x0528   (0x0008)  
	UWTLMainMenuServerAuthorization*                   m_ServerAuthorizationWidget;                                // 0x0530   (0x0008)  
	UWTLMainMenuActionWaiting*                         m_ActionWaitingWidget;                                      // 0x0538   (0x0008)  
	UWTLCommonNotificator*                             m_ErrorNotificatorWidget;                                   // 0x0540   (0x0008)  
	UWTLMainMenuGameVersionInfo*                       m_GameVersionInfoWidget;                                    // 0x0548   (0x0008)  
	UWTLMainMenuMoviePlayer*                           m_MoviePlayerWidget;                                        // 0x0550   (0x0008)  
	UWTLMainMenuCharacterSelectToActionWindow*         m_CharacterSelectToActionWindowWidget;                      // 0x0558   (0x0008)  
	UWTLMainMenuSexSelectToPreviewWindow*              m_SexSelectToPreviewWindowWidget;                           // 0x0560   (0x0008)  
	UWTLMainMenuStart*                                 m_StartWidget;                                              // 0x0568   (0x0008)  
	UWTLMainMenuServerList*                            m_ServerListWidget;                                         // 0x0570   (0x0008)  
	UWTLMainMenuCharacterSelect*                       m_CharacterSelectWidget;                                    // 0x0578   (0x0008)  
	UWTLMainMenuCharacterCreate*                       m_CharacterCreateWidget;                                    // 0x0580   (0x0008)  
	UWTLMainMenuCustomizationEdit*                     m_CustomizationEditWidget;                                  // 0x0588   (0x0008)  
	UWTLMainMenuBase*                                  m_CurrentMainMenuWidget;                                    // 0x0590   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0598   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            AnnouncerWidgetClass;                                       // 0x05A0   (0x0028)  
	TWeakObjectPtr<UClass*>                            OptionsButtonWidgetClass;                                   // 0x05C8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CommonOptionsWidgetClass;                                   // 0x05F0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CreditsAmountWithTopUpWidgetClass;                          // 0x0618   (0x0028)  
	TWeakObjectPtr<UClass*>                            ChooseLanguageWidgetClass;                                  // 0x0640   (0x0028)  
	TWeakObjectPtr<UClass*>                            ChooseAccountTypeWidgetClass;                               // 0x0668   (0x0028)  
	TWeakObjectPtr<UClass*>                            ServerAuthorizationWidgetClass;                             // 0x0690   (0x0028)  
	TWeakObjectPtr<UClass*>                            ActionWaitingWidgetClass;                                   // 0x06B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ErrorNotificatorWidgetClass;                                // 0x06E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            GameVersionInfoWidgetClass;                                 // 0x0708   (0x0028)  
	TWeakObjectPtr<UClass*>                            MoviePlayerWidgetClass;                                     // 0x0730   (0x0028)  
	TWeakObjectPtr<UClass*>                            CreditsWidgetClass;                                         // 0x0758   (0x0028)  
	TWeakObjectPtr<UClass*>                            StartWidgetClass;                                           // 0x0780   (0x0028)  
	TWeakObjectPtr<UClass*>                            ServerListWidgetClass;                                      // 0x07A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterSelectWidgetClass;                                 // 0x07D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterCreateWidgetClass;                                 // 0x07F8   (0x0028)  
	TWeakObjectPtr<UClass*>                            CustomizationEditWidgetClass;                               // 0x0820   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterSelectToActionWindowWidgetClass;                   // 0x0848   (0x0028)  
	TWeakObjectPtr<UClass*>                            SexSelectToPreviewWindowWidgetClass;                        // 0x0870   (0x0028)  
	unsigned char                                      UnknownData01_6[0x60];                                      // 0x0898   (0x0060)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDMainMenu.ShowItemInformation
	void ShowItemInformation(FWTLStoreItem& StoreItemToShowInformation, FWTLFullCharacterInfo& CharacterInfo, FWTLCharacterCurrentState& CharacterCurrentState); // [0x182d4f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMainMenu.ShowCharacterPreview
	void ShowCharacterPreview(FWTLStoreItem& StoreItemToPreview, FWTLFullCharacterInfo& FullCharacterInfo, FWTLCharacterCurrentState& CharacterCurrentState); // [0x182da40] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMainMenu.OnWindowHide
	void OnWindowHide();                                                                                                     // [0x182d4b0] Final|Native|Public  
	// Function /Script/WTL.WTLHUDMainMenu.OnStoreClosed
	void OnStoreClosed();                                                                                                    // [0x182e120] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMainMenu.OnShowCodeActivationWindow
	void OnShowCodeActivationWindow();                                                                                       // [0x182d4d0] Final|Native|Public  
	// Function /Script/WTL.WTLHUDMainMenu.OnSexSelectToPreview
	void OnSexSelectToPreview(FWTLStoreItem& StoreItemToPreview, EWTLSex Sex);                                               // [0x182df80] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMainMenu.OnOptionsClosed
	void OnOptionsClosed();                                                                                                  // [0x182e140] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMainMenu.OnOptionsButtonClicked
	void OnOptionsButtonClicked();                                                                                           // [0x182e160] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMainMenu.OnMoviePlayerHide
	void OnMoviePlayerHide();                                                                                                // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMainMenu.OnCreditsClosed
	void OnCreditsClosed();                                                                                                  // [0x182e180] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMainMenu.OnAuthorizeCancel
	void OnAuthorizeCancel();                                                                                                // [0x182e1a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDMinimap
/// Size: 0x01E8 (0x000268 - 0x000450)
class UWTLHUDMinimap : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0268   (0x0008)  
	UImage*                                            imgAzimuth;                                                 // 0x0270   (0x0008)  
	URetainerBox*                                      rbMarker;                                                   // 0x0278   (0x0008)  
	UCanvasPanel*                                      cpMarker;                                                   // 0x0280   (0x0008)  
	UImage*                                            imgMinimap;                                                 // 0x0288   (0x0008)  
	UImage*                                            imgPlayerPointer;                                           // 0x0290   (0x0008)  
	UCanvasPanel*                                      cpNoSatelliteSignal;                                        // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbBar;                                                      // 0x02A0   (0x0008)  
	UBorder*                                           bSectorPosition;                                            // 0x02A8   (0x0008)  
	UTextBlock*                                        tbSectorPosition;                                           // 0x02B0   (0x0008)  
	UBorder*                                           bCurrentLevelTime;                                          // 0x02B8   (0x0008)  
	UTextBlock*                                        tbCurrentLevelTime;                                         // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02C8   (0x0020)  MISSED
	TArray<FWTLMapCanvasMarker>                        m_MinimapCanvasMarkers;                                     // 0x02E8   (0x0010)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x02F8   (0x0018)  MISSED
	FWTLMapItemData                                    DefaultMapItemData;                                         // 0x0310   (0x0118)  
	TWeakObjectPtr<UClass*>                            MinimapMarkerClass;                                         // 0x0428   (0x0028)  
};

/// Class /Script/WTL.WTLHUDMoneyTransferWindow
/// Size: 0x0088 (0x000288 - 0x000310)
class UWTLHUDMoneyTransferWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbReceiverName;                                             // 0x0288   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbAmount;                                                  // 0x0290   (0x0008)  
	UEditableTextBox*                                  etbCommentary;                                              // 0x0298   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnConfirm;                                               // 0x02A0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x60];                                      // 0x02B0   (0x0060)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.OnMoneyTransferConfirm
	void OnMoneyTransferConfirm();                                                                                           // [0x182ed00] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.OnConfirmBtnClick
	void OnConfirmBtnClick();                                                                                                // [0x182f4c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.OnCommentaryTextBoxCommitted
	void OnCommentaryTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                   // [0x182ee50] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.OnCommentaryTextBoxChanged
	void OnCommentaryTextBoxChanged(FText& InText);                                                                          // [0x182ed20] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.OnAmountTextBoxCommitted
	void OnAmountTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                       // [0x182f160] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.OnAmountTextBoxChanged
	void OnAmountTextBoxChanged(FText& InText);                                                                              // [0x182f030] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDMoneyTransferWindow.CheckCharacterActorOnTimer
	void CheckCharacterActorOnTimer();                                                                                       // [0x182f4e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDMonsterAbilities
/// Size: 0x0000 (0x000268 - 0x000268)
class UWTLHUDMonsterAbilities : public UWTLHUDWidgetBase
{ 
public:
};

/// Class /Script/WTL.WTLHUDMonsterState
/// Size: 0x0000 (0x000268 - 0x000268)
class UWTLHUDMonsterState : public UWTLHUDWidgetBase
{ 
public:
};

/// Class /Script/WTL.WTLHUDReplicaButton
/// Size: 0x0078 (0x000340 - 0x0003B8)
class UWTLHUDReplicaButton : public UWTLCommonButton
{ 
public:
	UTextBlock*                                        tbReplicaNumber;                                            // 0x0340   (0x0008)  
	UTextBlock*                                        tbReplicaText;                                              // 0x0348   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x0350   (0x0018)  MISSED
	FSlateColor                                        HoveredReplicaTextColor;                                    // 0x0368   (0x0028)  
	int32_t                                            ReplicaNumber;                                              // 0x0390   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0394   (0x0004)  MISSED
	FText                                              ReplicaText;                                                // 0x0398   (0x0018)  
	int32_t                                            ReplicaID;                                                  // 0x03B0   (0x0004)  
	bool                                               UseReplicaNumberAsReplicaID;                                // 0x03B4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x03B5   (0x0003)  MISSED
};

/// Class /Script/WTL.WTLHUDNPCDialogButton
/// Size: 0x0038 (0x0003B8 - 0x0003F0)
class UWTLHUDNPCDialogButton : public UWTLHUDReplicaButton
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x03B8   (0x0038)  MISSED
};

/// Class /Script/WTL.WTLHUDNPCDialogReplicaBase
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLHUDNPCDialogReplicaBase : public UUserWidget
{ 
public:
	UBorder*                                           bBackground;                                                // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLHUDNPCDialogQuestReward
/// Size: 0x00A0 (0x000268 - 0x000308)
class UWTLHUDNPCDialogQuestReward : public UWTLHUDNPCDialogReplicaBase
{ 
public:
	UHorizontalBox*                                    hbRewardExperience;                                         // 0x0268   (0x0008)  
	UTextBlock*                                        tbRewardExperience;                                         // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbRewardMoney;                                              // 0x0278   (0x0008)  
	UTextBlock*                                        tbRewardMoney;                                              // 0x0280   (0x0008)  
	UHorizontalBox*                                    hbRewardPvPScore;                                           // 0x0288   (0x0008)  
	UTextBlock*                                        tbRewardPvPScore;                                           // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbRewardPvEScore;                                           // 0x0298   (0x0008)  
	UTextBlock*                                        tbRewardPvEScore;                                           // 0x02A0   (0x0008)  
	UHorizontalBox*                                    hbRewardCraftScore;                                         // 0x02A8   (0x0008)  
	UTextBlock*                                        tbRewardCraftScore;                                         // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbRewardTechnologyScore;                                    // 0x02B8   (0x0008)  
	UTextBlock*                                        tbRewardTechnologyScore;                                    // 0x02C0   (0x0008)  
	UTextBlock*                                        tbCustomTextReward;                                         // 0x02C8   (0x0008)  
	UTextBlock*                                        tbRewardItemsTitle;                                         // 0x02D0   (0x0008)  
	UWrapBox*                                          wpRewardItems;                                              // 0x02D8   (0x0008)  
	TWeakObjectPtr<UClass*>                            QuestItemSlotWidgetClass;                                   // 0x02E0   (0x0028)  
};

/// Class /Script/WTL.WTLHUDNPCDialogReplica
/// Size: 0x0030 (0x000268 - 0x000298)
class UWTLHUDNPCDialogReplica : public UWTLHUDNPCDialogReplicaBase
{ 
public:
	UTextBlock*                                        tbReplicaOwner;                                             // 0x0268   (0x0008)  
	UTextBlock*                                        tbReplicaText;                                              // 0x0270   (0x0008)  
	FLinearColor                                       NPCBackgroundColor;                                         // 0x0278   (0x0010)  
	FLinearColor                                       CharacterBackgroundColor;                                   // 0x0288   (0x0010)  
};

/// Class /Script/WTL.WTLHUDNPCDialogWindow
/// Size: 0x00A0 (0x000288 - 0x000328)
class UWTLHUDNPCDialogWindow : public UWTLHUDWindowBase
{ 
public:
	UScrollBox*                                        sbDialog;                                                   // 0x0288   (0x0008)  
	UPanelWidget*                                      pwDialogButtons;                                            // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0298   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            NPCDialogReplicaClass;                                      // 0x02A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            NPCDialogQuestRewardClass;                                  // 0x02D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            NPCDialogButtonClass;                                       // 0x02F8   (0x0028)  
	float                                              ReplicaTopPadding;                                          // 0x0320   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0324   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDNPCDialogWindow.OnReplicaSelected
	void OnReplicaSelected(FWTLReplica& SelectedReplica);                                                                    // [0x182fbc0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDNPCDialogWindow.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x182fd00] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDObjectCraft
/// Size: 0x0010 (0x000280 - 0x000290)
class UWTLHUDObjectCraft : public UWTLHUDCraft
{ 
public:
	UWTLHUDContentInventoryStorage*                    ucContentInventoryStorage;                                  // 0x0280   (0x0008)  
	UWTLHUDObjectCraftProcess*                         ucObjectCraftProcess;                                       // 0x0288   (0x0008)  
};

/// Class /Script/WTL.WTLHUDObjectCraftProcess
/// Size: 0x0060 (0x000268 - 0x0002C8)
class UWTLHUDObjectCraftProcess : public UWTLHUDWidgetBase
{ 
public:
	UWrapBox*                                          wbProcessItemsQueue;                                        // 0x0268   (0x0008)  
	UWidgetSwitcher*                                   wsProcessInfo;                                              // 0x0270   (0x0008)  
	UProgressBar*                                      pbCurrentProductionTimeLeft;                                // 0x0278   (0x0008)  
	UHorizontalBox*                                    hbCurrentProductionTimeLeft;                                // 0x0280   (0x0008)  
	UTextBlock*                                        tbCurrentProductionTimeLeft;                                // 0x0288   (0x0008)  
	UTextBlock*                                        tbTotalProductionTimeLeft;                                  // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0298   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemTypeSlotWidgetClass;                                    // 0x02A0   (0x0028)  
};

/// Class /Script/WTL.WTLHUDObjectInfo
/// Size: 0x00C8 (0x000268 - 0x000330)
class UWTLHUDObjectInfo : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpUseSliders;                                               // 0x0268   (0x0008)  
	UBorder*                                           bObjectInfo;                                                // 0x0270   (0x0008)  
	UTextBlock*                                        tbObjectName;                                               // 0x0278   (0x0008)  
	UHorizontalBox*                                    hbObjectID;                                                 // 0x0280   (0x0008)  
	UTextBlock*                                        tbObjectID;                                                 // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbHotkeyDescription;                                        // 0x0290   (0x0008)  
	UTextBlock*                                        tbPressType;                                                // 0x0298   (0x0008)  
	UTextBlock*                                        tbUseKey;                                                   // 0x02A0   (0x0008)  
	UTextBlock*                                        tbActionType;                                               // 0x02A8   (0x0008)  
	UBorder*                                           bPremiumRequired;                                           // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02B8   (0x0020)  MISSED
	UWidgetAnimation*                                  AnimationCircleIncrease;                                    // 0x02D8   (0x0008)  
	FSlateColor                                        DefaultObjectNameTextColor;                                 // 0x02E0   (0x0028)  
	FSlateColor                                        PremiumStashObjectNameTextColor;                            // 0x0308   (0x0028)  
};

/// Class /Script/WTL.WTLHUDObstacleCourseHelpWindow
/// Size: 0x0020 (0x000288 - 0x0002A8)
class UWTLHUDObstacleCourseHelpWindow : public UWTLHUDWindowBase
{ 
public:
	UVerticalBox*                                      vbReplicaButtons;                                           // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0290   (0x0008)  
	AWTLObstacleCourseHelpButton*                      m_ObstacleCourseHelpButtonActor;                            // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x02A0   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDObstacleCourseHelpWindow.OnActionConfirmed
	void OnActionConfirmed();                                                                                                // [0x18300e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDPlayerInventory
/// Size: 0x0040 (0x000278 - 0x0002B8)
class UWTLHUDPlayerInventory : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDCharacterEquipment*                         ucCharacterEquipment;                                       // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_6[0x38];                                      // 0x0280   (0x0038)  MISSED
};

/// Class /Script/WTL.WTLHUDPlayerInventoryStorage
/// Size: 0x01C8 (0x000300 - 0x0004C8)
class UWTLHUDPlayerInventoryStorage : public UWTLHUDInteractiveSlotsStorage
{ 
public:
	UWidgetSwitcher*                                   wsPremiumStar;                                              // 0x0300   (0x0008)  
	UWTLCommonButton*                                  ucBtnAccountInventory;                                      // 0x0308   (0x0008)  
	UTextBlock*                                        tbAccountInventoryItemsCount;                               // 0x0310   (0x0008)  
	UProgressBar*                                      pbWeight;                                                   // 0x0318   (0x0008)  
	UTextBlock*                                        tbWeight;                                                   // 0x0320   (0x0008)  
	UTextBlock*                                        tbMaxWeight;                                                // 0x0328   (0x0008)  
	UTextBlock*                                        tbBalance;                                                  // 0x0330   (0x0008)  
	UWidgetSwitcher*                                   wsStash;                                                    // 0x0338   (0x0008)  
	UMenuAnchor*                                       maPlaceStashPopup;                                          // 0x0340   (0x0008)  
	UWTLCommonButton*                                  ucBtnPlaceStash;                                            // 0x0348   (0x0008)  
	UWTLCommonButton*                                  ucBtnRemoveStash;                                           // 0x0350   (0x0008)  
	UWTLCommonButton*                                  ucBtnCraft;                                                 // 0x0358   (0x0008)  
	UWTLCommonButton*                                  ucBtnUniteAllItems;                                         // 0x0360   (0x0008)  
	UWTLCommonButton*                                  ucBtnOptimizeItems;                                         // 0x0368   (0x0008)  
	UScrollBox*                                        sbStorage;                                                  // 0x0370   (0x0008)  
	UWTLHUDAccountInventoryDropArea*                   ucAccountInventoryDropArea;                                 // 0x0378   (0x0008)  
	UBorder*                                           bAccountInventoryDropArea;                                  // 0x0380   (0x0008)  
	UCanvasPanel*                                      cpReload;                                                   // 0x0388   (0x0008)  
	UWTLCommonPopupMenu*                               m_PlaceStashPopupMenuWidget;                                // 0x0390   (0x0008)  
	UWTLHUDBaseActionStorage*                          m_BaseActionStorage;                                        // 0x0398   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x03A0   (0x0038)  MISSED
	TWeakObjectPtr<UClass*>                            ToolTipWidgetClass;                                         // 0x03D8   (0x0028)  
	TWeakObjectPtr<UClass*>                            WeightToolTipWidgetClass;                                   // 0x0400   (0x0028)  
	TWeakObjectPtr<UClass*>                            PopupMenuWidgetClass;                                       // 0x0428   (0x0028)  
	FSlateColor                                        PlacePremiumStashPopupMenuButtonTextColor;                  // 0x0450   (0x0028)  
	FSlateColor                                        MaxWeightDefaultColor;                                      // 0x0478   (0x0028)  
	FSlateColor                                        MaxWeightReducedColor;                                      // 0x04A0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.UpdateMaxInventoryWeight
	void UpdateMaxInventoryWeight(uint32_t MaxInventoryWeight);                                                              // [0x18308b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.UpdateInventoryWeight
	void UpdateInventoryWeight(float InventoryLoad, uint32_t InventoryWeight);                                               // [0x1830980] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.UniteAllItemsBtnClick
	void UniteAllItemsBtnClick();                                                                                            // [0x1830610] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OptimizeItemsBtnClick
	void OptimizeItemsBtnClick();                                                                                            // [0x1830630] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnRemoveStashConfirmed
	void OnRemoveStashConfirmed();                                                                                           // [0x1830670] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnRemoveStashBtnClick
	void OnRemoveStashBtnClick();                                                                                            // [0x18306e0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnPlaceUsualStash
	void OnPlaceUsualStash();                                                                                                // [0x1830720] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnPlaceStashPopupMenuOpenChanged
	void OnPlaceStashPopupMenuOpenChanged(bool bIsOpen);                                                                     // [0x1830760] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnPlaceStashPopupGetMenuContentEvent
	UWidget* OnPlaceStashPopupGetMenuContentEvent();                                                                         // [0x1830870] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnPlaceStashBtnClick
	void OnPlaceStashBtnClick();                                                                                             // [0x1830740] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnPlacePremiumStash
	void OnPlacePremiumStash();                                                                                              // [0x1830700] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnCraftBtnClick
	void OnCraftBtnClick();                                                                                                  // [0x1830650] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnAccountInventoryItemsUpdated
	void OnAccountInventoryItemsUpdated(TArray<FWTLAccountInventoryItem>& AccountInventoryItems);                            // [0x1830ae0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDPlayerInventoryStorage.OnAccountInventoryBtnClick
	void OnAccountInventoryBtnClick();                                                                                       // [0x1830890] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDPlayerInventoryStorageWeightToolTip
/// Size: 0x0030 (0x000268 - 0x000298)
class UWTLHUDPlayerInventoryStorageWeightToolTip : public UWTLCommonToolTipText
{ 
public:
	UVerticalBox*                                      vbPhysicalExhaustion;                                       // 0x0268   (0x0008)  
	FSlateColor                                        RedColor;                                                   // 0x0270   (0x0028)  
};

/// Class /Script/WTL.WTLHUDPlayersTableItem
/// Size: 0x01A8 (0x000260 - 0x000408)
class UWTLHUDPlayersTableItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbNumber;                                                   // 0x0260   (0x0008)  
	UTextBlock*                                        tbPlayerName;                                               // 0x0268   (0x0008)  
	UTextBlock*                                        tbPlayerLevel;                                              // 0x0270   (0x0008)  
	UWidgetSwitcher*                                   wsPlayerType;                                               // 0x0278   (0x0008)  
	UImage*                                            imgCharacterClass;                                          // 0x0280   (0x0008)  
	UTextBlock*                                        tbCharacterClass;                                           // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsFractionImage;                                            // 0x0290   (0x0008)  
	UTextBlock*                                        tbPlayerReputation;                                         // 0x0298   (0x0008)  
	UTextBlock*                                        tbPlayerPing;                                               // 0x02A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnCharacterInfo;                                         // 0x02A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendMessage;                                           // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendInviteToGroup;                                     // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnSpectate;                                              // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x78];                                      // 0x02C8   (0x0078)  MISSED
	TWeakObjectPtr<UTexture2D*>                        NonePlayerClassIcon;                                        // 0x0340   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MinerPlayerClassIcon;                                       // 0x0368   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        HunterPlayerClassIcon;                                      // 0x0390   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MercenaryPlayerClassIcon;                                   // 0x03B8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        EngineerPlayerClassIcon;                                    // 0x03E0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDPlayersTableItem.OnSpectateBtnClicked
	void OnSpectateBtnClicked();                                                                                             // [0x1831510] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableItem.OnSendMessageBtnClicked
	void OnSendMessageBtnClicked();                                                                                          // [0x1831540] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableItem.OnSendInviteToGroupBtnClicked
	void OnSendInviteToGroupBtnClicked();                                                                                    // [0x18314d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableItem.OnCharacterInfoBtnClicked
	void OnCharacterInfoBtnClicked();                                                                                        // [0x1831570] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDPlayersTableWindow
/// Size: 0x0070 (0x000288 - 0x0002F8)
class UWTLHUDPlayersTableWindow : public UWTLHUDWindowBase
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0288   (0x0008)  
	UScrollBox*                                        sbPlayersItems;                                             // 0x0290   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0298   (0x0008)  
	TArray<UWTLHUDPlayersTableItem*>                   m_PlayersTableItems;                                        // 0x02A0   (0x0010)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02B0   (0x0008)  MISSED
	int32_t                                            MaxVisibileItemsCountInTable;                               // 0x02B8   (0x0004)  
	float                                              OriginalMainBorderSizeX;                                    // 0x02BC   (0x0004)  
	float                                              ExtendedMainBorderSizeX;                                    // 0x02C0   (0x0004)  
	float                                              OriginalPlayersItemsScrollBoxSizeX;                         // 0x02C4   (0x0004)  
	float                                              ExtendedPlayersItemsScrollBoxSizeX;                         // 0x02C8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x02CC   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            PlayersTableItemWidgetClass;                                // 0x02D0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDPlayersTableWindow.OnSpectateButtonClicked
	void OnSpectateButtonClicked(FString CharacterName);                                                                     // [0x18318d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableWindow.OnSendMessageButtonClicked
	void OnSendMessageButtonClicked(FString CharacterName);                                                                  // [0x1831a60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableWindow.OnSendInviteToGroupButtonClicked
	void OnSendInviteToGroupButtonClicked(uint64_t CharacterID, FString CharacterName);                                      // [0x1831740] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableWindow.OnPlayersItemsScrollBoxUserScrolled
	void OnPlayersItemsScrollBoxUserScrolled(float CurrentOffset);                                                           // [0x181f940] Final|Native|Private 
	// Function /Script/WTL.WTLHUDPlayersTableWindow.OnCharacterInfoButtonClicked
	void OnCharacterInfoButtonClicked(uint64_t CharacterID);                                                                 // [0x1831b50] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDPlayerStatus
/// Size: 0x0130 (0x000268 - 0x000398)
class UWTLHUDPlayerStatus : public UWTLHUDWidgetBase
{ 
public:
	UWTLCommonAlphaSectionProgressBar*                 pbHealth;                                                   // 0x0268   (0x0008)  
	UWTLCommonAlphaSectionProgressBar*                 pbStamina;                                                  // 0x0270   (0x0008)  
	UBorder*                                           bHunger;                                                    // 0x0278   (0x0008)  
	UWTLCommonAlphaSectionProgressBar*                 pbHunger;                                                   // 0x0280   (0x0008)  
	UTextBlock*                                        tbHunger;                                                   // 0x0288   (0x0008)  
	UBorder*                                           bThirst;                                                    // 0x0290   (0x0008)  
	UWTLCommonAlphaSectionProgressBar*                 pbThirst;                                                   // 0x0298   (0x0008)  
	UTextBlock*                                        tbThirst;                                                   // 0x02A0   (0x0008)  
	UWTLCommonAlphaSectionProgressBar*                 pbOxygen;                                                   // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsPlayerInVehicle;                                          // 0x02B0   (0x0008)  
	UWidgetSwitcher*                                   wsPlayerPose;                                               // 0x02B8   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x02C0   (0x0008)  
	UTextBlock*                                        tbPvPMode;                                                  // 0x02C8   (0x0008)  
	UImage*                                            imgHoldBreath;                                              // 0x02D0   (0x0008)  
	UImage*                                            imgArmorCondition;                                          // 0x02D8   (0x0008)  
	UImage*                                            imgProhibitedPvP;                                           // 0x02E0   (0x0008)  
	UCanvasPanel*                                      cpChatMute;                                                 // 0x02E8   (0x0008)  
	UCanvasPanel*                                      cpVoice;                                                    // 0x02F0   (0x0008)  
	UImage*                                            imgVoice;                                                   // 0x02F8   (0x0008)  
	UImage*                                            imgVoiceMute;                                               // 0x0300   (0x0008)  
	UWidgetSwitcher*                                   wsTurretZoneMark;                                           // 0x0308   (0x0008)  
	AWTLPlayerController*                              m_PlayerController;                                         // 0x0310   (0x0008)  
	AWTLPlayerState*                                   m_PlayerState;                                              // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_5[0x2C];                                      // 0x0320   (0x002C)  MISSED
	FLinearColor                                       DefaultStaminaProgressBarColor;                             // 0x034C   (0x0010)  
	FLinearColor                                       LowStaminaProgressBarColor;                                 // 0x035C   (0x0010)  
	FLinearColor                                       ArmorMediumCondition;                                       // 0x036C   (0x0010)  
	FLinearColor                                       ArmorLowCondition;                                          // 0x037C   (0x0010)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x038C   (0x0004)  MISSED
	UWidgetAnimation*                                  StaminaProgressBarFlickerAnimation;                         // 0x0390   (0x0008)  
};

/// Class /Script/WTL.WTLHUDPossibleModificationIcon
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLHUDPossibleModificationIcon : public UUserWidget
{ 
public:
	UWTLHUDPossibleModificationInfo*                   m_PossibleModicationInfoWidget;                             // 0x0260   (0x0008)  
	TWeakObjectPtr<UClass*>                            PossibleModificationInfoWidgetClass;                        // 0x0268   (0x0028)  
};

/// Class /Script/WTL.WTLHUDPossibleModificationInfo
/// Size: 0x00C8 (0x000260 - 0x000328)
class UWTLHUDPossibleModificationInfo : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbMinDamageChange;                                          // 0x0260   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMinDamageSign;                                            // 0x0268   (0x0008)  
	UTextBlock*                                        tbMinDamageChange;                                          // 0x0270   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMinDamageArrow;                                           // 0x0278   (0x0008)  
	UHorizontalBox*                                    hbMaxDamageChange;                                          // 0x0280   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMaxDamageSign;                                            // 0x0288   (0x0008)  
	UTextBlock*                                        tbMaxDamageChange;                                          // 0x0290   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMaxDamageArrow;                                           // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbWearResistanceChange;                                     // 0x02A0   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWearResistanceSign;                                       // 0x02A8   (0x0008)  
	UTextBlock*                                        tbWearResistanceChange;                                     // 0x02B0   (0x0008)  
	UTextBlock*                                        tbWearResistanceBase;                                       // 0x02B8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsWearResistanceArrow;                                      // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbAccuracyChange;                                           // 0x02C8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsAccuracySign;                                             // 0x02D0   (0x0008)  
	UTextBlock*                                        tbAccuracyChange;                                           // 0x02D8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsAccuracyArrow;                                            // 0x02E0   (0x0008)  
	UHorizontalBox*                                    hbMinArmorChange;                                           // 0x02E8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMinArmorSign;                                             // 0x02F0   (0x0008)  
	UTextBlock*                                        tbMinArmorChange;                                           // 0x02F8   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMinArmorArrow;                                            // 0x0300   (0x0008)  
	UHorizontalBox*                                    hbMaxArmorChange;                                           // 0x0308   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMaxArmorSign;                                             // 0x0310   (0x0008)  
	UTextBlock*                                        tbMaxArmorChange;                                           // 0x0318   (0x0008)  
	UWTLCommonToggleSwitcher*                          tsMaxArmorArrow;                                            // 0x0320   (0x0008)  
};

/// Class /Script/WTL.WTLHUDQTEFishing
/// Size: 0x0140 (0x000260 - 0x0003A0)
class UWTLHUDQTEFishing : public UUserWidget
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0260   (0x0008)  
	UBorder*                                           bDifficulty;                                                // 0x0268   (0x0008)  
	UImage*                                            imgTimeLimit;                                               // 0x0270   (0x0008)  
	UImage*                                            imgQTEProgress;                                             // 0x0278   (0x0008)  
	UCanvasPanel*                                      cpButton;                                                   // 0x0280   (0x0008)  
	UTextBlock*                                        tbButtonName;                                               // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0290   (0x0028)  MISSED
	UWTLHUDQTEFishingHookButton*                       m_CurrentHookButton;                                        // 0x02B8   (0x0008)  
	TWeakObjectPtr<UClass*>                            HookButtonWidgetClass;                                      // 0x02C0   (0x0028)  
	UWidgetAnimation*                                  HighlightBlinkAnimation;                                    // 0x02E8   (0x0008)  
	UWidgetAnimation*                                  PressedAnimation;                                           // 0x02F0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        ButtonPressedSoundEvent;                                    // 0x02F8   (0x0028)  
	FLinearColor                                       TimeLimitGreenColor;                                        // 0x0320   (0x0010)  
	FLinearColor                                       TimeLimitYellowColor;                                       // 0x0330   (0x0010)  
	FLinearColor                                       TimeLimitRedColor;                                          // 0x0340   (0x0010)  
	FLinearColor                                       VeryEasyDifficultyColor;                                    // 0x0350   (0x0010)  
	FLinearColor                                       EasyDifficultyColor;                                        // 0x0360   (0x0010)  
	FLinearColor                                       MediumDifficultyColor;                                      // 0x0370   (0x0010)  
	FLinearColor                                       HighDifficultyColor;                                        // 0x0380   (0x0010)  
	FLinearColor                                       VeryHighDifficultyColor;                                    // 0x0390   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLHUDQTEFishing.OnHookButtonMustRemoved
	void OnHookButtonMustRemoved();                                                                                          // [0x18328c0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDQTEFishingHookButton
/// Size: 0x0070 (0x000260 - 0x0002D0)
class UWTLHUDQTEFishingHookButton : public UUserWidget
{ 
public:
	UWidgetSwitcher*                                   wsButtonKey;                                                // 0x0260   (0x0008)  
	UProgressBar*                                      pbHookTimeLimit;                                            // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x0270   (0x0038)  MISSED
	UWidgetAnimation*                                  HighlightBlinkSlowAnimation;                                // 0x02A8   (0x0008)  
	UWidgetAnimation*                                  PulseAnimation;                                             // 0x02B0   (0x0008)  
	UWidgetAnimation*                                  RightPressedAnimation;                                      // 0x02B8   (0x0008)  
	UWidgetAnimation*                                  WrongPressedAnimation;                                      // 0x02C0   (0x0008)  
	UWidgetAnimation*                                  NotPressedAnimation;                                        // 0x02C8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDQTEFishingHookButton.OnMustRemovedBroadcast
	void OnMustRemovedBroadcast();                                                                                           // [0x1832a70] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDQuestDependenciesTreePart
/// Size: 0x0018 (0x000260 - 0x000278)
class UWTLHUDQuestDependenciesTreePart : public UUserWidget
{ 
public:
	UBorder*                                           bTreeLine;                                                  // 0x0260   (0x0008)  
	UVerticalBox*                                      vbTreePart;                                                 // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0270   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDQuestDependenciesWindow
/// Size: 0x0088 (0x000288 - 0x000310)
class UWTLHUDQuestDependenciesWindow : public UWTLCommonWindowBase
{ 
public:
	UCanvasPanel*                                      cpTree;                                                     // 0x0288   (0x0008)  
	UScrollBox*                                        sbTree;                                                     // 0x0290   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02A0   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            QuestDependencyWidgetClass;                                 // 0x02C0   (0x0028)  
	TWeakObjectPtr<UClass*>                            QuestDependenciesTreePartWidgetClass;                       // 0x02E8   (0x0028)  
};

/// Class /Script/WTL.WTLHUDQuestDependency
/// Size: 0x0078 (0x000260 - 0x0002D8)
class UWTLHUDQuestDependency : public UUserWidget
{ 
public:
	UCanvasPanel*                                      cpArrow;                                                    // 0x0260   (0x0008)  
	UTextBlock*                                        tbQuestID;                                                  // 0x0268   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x0270   (0x0008)  
	UBorder*                                           bQuestState;                                                // 0x0278   (0x0008)  
	UTextBlock*                                        tbQuestState;                                               // 0x0280   (0x0008)  
	TMap<EWTLQuestState, FLinearColor>                 QuestStateColors;                                           // 0x0288   (0x0050)  
};

/// Class /Script/WTL.WTLHUDQuestInformationWindow
/// Size: 0x0010 (0x000288 - 0x000298)
class UWTLHUDQuestInformationWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLCommonQuestInfo*                               ucQuestInfo;                                                // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0290   (0x0008)  
};

/// Class /Script/WTL.WTLHUDQuestSlot
/// Size: 0x0008 (0x0003B8 - 0x0003C0)
class UWTLHUDQuestSlot : public UWTLHUDNeedCountSlot
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x03B8   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDRadialMenu
/// Size: 0x00B8 (0x000278 - 0x000330)
class UWTLHUDRadialMenu : public UWTLHUDInteractiveWidget
{ 
public:
	UCanvasPanel*                                      cpPIEMenu;                                                  // 0x0278   (0x0008)  
	UWidgetSwitcher*                                   wsActionType;                                               // 0x0280   (0x0008)  
	UBorder*                                           bQuickSelectHint;                                           // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsQuickSelectHintText;                                      // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x60];                                      // 0x0298   (0x0060)  MISSED
	TArray<FWTLUseMenuActionInfo>                      UseTypes;                                                   // 0x02F8   (0x0010)  
	TWeakObjectPtr<UTexture2D*>                        LockButtonTexture;                                          // 0x0308   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDRadialMenu.GetHoveredButton
	int32_t GetHoveredButton();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHUDRadialMenu.CreateRadialMenuWidget
	void CreateRadialMenuWidget();                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHUDRadialMenu.AddRadialMenuWidgetAsChild
	void AddRadialMenuWidgetAsChild();                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLHUDRadialMenu.AddRadialButton
	void AddRadialButton(UTexture2D* Icon, FText& Description, FString DebugPreviewText);                                    // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/WTL.WTLHUDRepair
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDRepair : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDRepairWindow*                               ucRepairWindow;                                             // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDRepairStorage
/// Size: 0x0028 (0x0002D8 - 0x000300)
class UWTLHUDRepairStorage : public UWTLHUDPriceStorage
{ 
public:
	TWeakObjectPtr<UFMODEvent*>                        RepairItemsSoundEvent;                                      // 0x02D8   (0x0028)  
};

/// Class /Script/WTL.WTLHUDRepairWindow
/// Size: 0x0010 (0x000288 - 0x000298)
class UWTLHUDRepairWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLHUDRepairStorage*                              ucRepairStorage;                                            // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0290   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDRepairWindow.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x1833260] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDRequestWindow
/// Size: 0x0050 (0x000268 - 0x0002B8)
class UWTLHUDRequestWindow : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbRequestTypeTitle;                                         // 0x0268   (0x0008)  
	UTextBlock*                                        tbRequestInstigatorName;                                    // 0x0270   (0x0008)  
	UButton*                                           btnAcceptRequest;                                           // 0x0278   (0x0008)  
	UButton*                                           btnDeclineRequest;                                          // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0288   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDRequestWindow.OnDeclineRequestBtnClicked
	void OnDeclineRequestBtnClicked();                                                                                       // [0x18334b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDRequestWindow.OnAcceptRequestBtnClicked
	void OnAcceptRequestBtnClicked();                                                                                        // [0x18334d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDRobotsCraft
/// Size: 0x0010 (0x000278 - 0x000288)
class UWTLHUDRobotsCraft : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDRobotsCraftWindow*                          ucRobotsCraftWindow;                                        // 0x0278   (0x0008)  
	UWTLHUDContentInventoryStorage*                    ucContentInventoryStorage;                                  // 0x0280   (0x0008)  
};

/// Class /Script/WTL.WTLHUDRobotsCraftWindow
/// Size: 0x00E8 (0x000288 - 0x000370)
class UWTLHUDRobotsCraftWindow : public UWTLHUDWindowBase
{ 
public:
	UTextBlock*                                        tbRobotCraftStationDisplayText;                             // 0x0288   (0x0008)  
	UTextBlock*                                        tbRobotName;                                                // 0x0290   (0x0008)  
	UImage*                                            imgRobot;                                                   // 0x0298   (0x0008)  
	UTextBlock*                                        tbRobotMinLevel;                                            // 0x02A0   (0x0008)  
	UTextBlock*                                        tbRobotMaxLevel;                                            // 0x02A8   (0x0008)  
	UTextBlock*                                        tbRobotRank;                                                // 0x02B0   (0x0008)  
	UCanvasPanel*                                      cpRobotDescription;                                         // 0x02B8   (0x0008)  
	UTextBlock*                                        tbRobotDescription;                                         // 0x02C0   (0x0008)  
	UWrapBox*                                          wbRequiredItems;                                            // 0x02C8   (0x0008)  
	UWidgetSwitcher*                                   wsProduction;                                               // 0x02D0   (0x0008)  
	UWidgetSwitcher*                                   wsCreationLimit;                                            // 0x02D8   (0x0008)  
	UTextBlock*                                        tbCurrentCreationLimit;                                     // 0x02E0   (0x0008)  
	UTextBlock*                                        tbMaxCreationLimit;                                         // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbCreationLimitReached;                                     // 0x02F0   (0x0008)  
	UVerticalBox*                                      vbProductionTimeLeft;                                       // 0x02F8   (0x0008)  
	UTextBlock*                                        tbProductionTimeLeft;                                       // 0x0300   (0x0008)  
	UProgressBar*                                      pbProductionTimeLeft;                                       // 0x0308   (0x0008)  
	UWidgetSwitcher*                                   wsProductionStatus;                                         // 0x0310   (0x0008)  
	AWTLRobotCraftStation*                             m_RobotCraftStation;                                        // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0320   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            RequiredItemSlotWidgetClass;                                // 0x0340   (0x0028)  
	UWidgetAnimation*                                  NotWorkingTextBlinkingAnimation;                            // 0x0368   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDRobotsCraftWindow.OnStorageContentChanged
	void OnStorageContentChanged();                                                                                          // [0x1833960] Final|Native|Private 
	// Function /Script/WTL.WTLHUDRobotsCraftWindow.OnMaxRobotCountChanged
	void OnMaxRobotCountChanged(int32_t MaxRobotCount);                                                                      // [0x18336b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDRobotsCraftWindow.OnCurrentRobotCountChanged
	void OnCurrentRobotCountChanged(int32_t CurrentRobotCount);                                                              // [0x18337d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDSellStorage
/// Size: 0x0088 (0x0003F0 - 0x000478)
class UWTLHUDSellStorage : public UWTLHUDSellStorageBase
{ 
public:
	UEditableTextBox*                                  etbSearch;                                                  // 0x03F0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x78];                                      // 0x03F8   (0x0078)  MISSED
	float                                              DefaultHeight;                                              // 0x0470   (0x0004)  
	float                                              ExternalHeight;                                             // 0x0474   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLHUDSellStorage.OnSearchTextBoxTextChanged
	void OnSearchTextBoxTextChanged(FText& Text);                                                                            // [0x1833bd0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLHUDSellStorageItem
/// Size: 0x0390 (0x000268 - 0x0005F8)
class UWTLHUDSellStorageItem : public UWTLHUDWidgetBase
{ 
public:
	UImage*                                            imgBackground;                                              // 0x0268   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x0270   (0x0008)  
	UImage*                                            imgBorder;                                                  // 0x0278   (0x0008)  
	UImage*                                            imgItemType;                                                // 0x0280   (0x0008)  
	UTextBlock*                                        tbItemTypeID;                                               // 0x0288   (0x0008)  
	UImage*                                            imgProhibited;                                              // 0x0290   (0x0008)  
	UTextBlock*                                        tbItemCount;                                                // 0x0298   (0x0008)  
	UBorder*                                           bWeaponAttachments;                                         // 0x02A0   (0x0008)  
	UBorder*                                           bMuzzleAttachment;                                          // 0x02A8   (0x0008)  
	UBorder*                                           bFlashlightAttachment;                                      // 0x02B0   (0x0008)  
	UBorder*                                           bScopeAttachment;                                           // 0x02B8   (0x0008)  
	UImage*                                            imgContainerItem;                                           // 0x02C0   (0x0008)  
	UImage*                                            imgItemCustomized;                                          // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbArmoredPlates;                                            // 0x02D0   (0x0008)  
	UTextBlock*                                        tbArmoredPlatesCount;                                       // 0x02D8   (0x0008)  
	UBorder*                                           bModificationsCount;                                        // 0x02E0   (0x0008)  
	UTextBlock*                                        tbModificationsCount;                                       // 0x02E8   (0x0008)  
	UTextBlock*                                        tbRequiredParameters;                                       // 0x02F0   (0x0008)  
	UHorizontalBox*                                    hbRequiredLevel;                                            // 0x02F8   (0x0008)  
	UBorder*                                           bRequiredLevel;                                             // 0x0300   (0x0008)  
	UTextBlock*                                        tbRequiredLevel;                                            // 0x0308   (0x0008)  
	UHorizontalBox*                                    hbMinBuyCount;                                              // 0x0310   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x0318   (0x0008)  
	UTextBlock*                                        tbMinBuyCount;                                              // 0x0320   (0x0008)  
	UTextBlock*                                        tbItemPrice;                                                // 0x0328   (0x0008)  
	UTextBlock*                                        tbItemSubType;                                              // 0x0330   (0x0008)  
	UVerticalBox*                                      vbShortInfoItems;                                           // 0x0338   (0x0008)  
	UHorizontalBox*                                    hbDamage;                                                   // 0x0340   (0x0008)  
	UHorizontalBox*                                    hbAccuracy;                                                 // 0x0348   (0x0008)  
	UHorizontalBox*                                    hbArmor;                                                    // 0x0350   (0x0008)  
	UHorizontalBox*                                    hbFrontArmor;                                               // 0x0358   (0x0008)  
	UHorizontalBox*                                    hbBackArmor;                                                // 0x0360   (0x0008)  
	UHorizontalBox*                                    hbArmorClass;                                               // 0x0368   (0x0008)  
	UHorizontalBox*                                    hbArmorPiercing;                                            // 0x0370   (0x0008)  
	UTextBlock*                                        tbPDAModuleInstalled;                                       // 0x0378   (0x0008)  
	UHorizontalBox*                                    hbValidityDate;                                             // 0x0380   (0x0008)  
	UHorizontalBox*                                    hbContents;                                                 // 0x0388   (0x0008)  
	UHorizontalBox*                                    hbEnergy;                                                   // 0x0390   (0x0008)  
	UHorizontalBox*                                    hbCondition;                                                // 0x0398   (0x0008)  
	UHorizontalBox*                                    hbCommissionCharacterName;                                  // 0x03A0   (0x0008)  
	UTextBlock*                                        tbPvPDamage;                                                // 0x03A8   (0x0008)  
	UTextBlock*                                        tbPvEDamage;                                                // 0x03B0   (0x0008)  
	UTextBlock*                                        tbAccuracy;                                                 // 0x03B8   (0x0008)  
	UTextBlock*                                        tbArmor;                                                    // 0x03C0   (0x0008)  
	UTextBlock*                                        tbMonsterArmor;                                             // 0x03C8   (0x0008)  
	UTextBlock*                                        tbFrontArmor;                                               // 0x03D0   (0x0008)  
	UTextBlock*                                        tbFrontMonsterArmor;                                        // 0x03D8   (0x0008)  
	UTextBlock*                                        tbBackArmor;                                                // 0x03E0   (0x0008)  
	UTextBlock*                                        tbBackMonsterArmor;                                         // 0x03E8   (0x0008)  
	UTextBlock*                                        tbArmorClass;                                               // 0x03F0   (0x0008)  
	UTextBlock*                                        tbPvPArmorPiercing;                                         // 0x03F8   (0x0008)  
	UTextBlock*                                        tbPvEArmorPiercing;                                         // 0x0400   (0x0008)  
	UTextBlock*                                        tbValidityDate;                                             // 0x0408   (0x0008)  
	UTextBlock*                                        tbContents;                                                 // 0x0410   (0x0008)  
	UTextBlock*                                        tbEnergyCaption;                                            // 0x0418   (0x0008)  
	UTextBlock*                                        tbEnergy;                                                   // 0x0420   (0x0008)  
	UTextBlock*                                        tbCondition;                                                // 0x0428   (0x0008)  
	UTextBlock*                                        tbCommissionCharacterName;                                  // 0x0430   (0x0008)  
	UWTLCommonTextButton*                              ucBtnBuy;                                                   // 0x0438   (0x0008)  
	UWTLCommonTextButton*                              ucBtnItemInfo;                                              // 0x0440   (0x0008)  
	UCanvasPanel*                                      cpBtnPreview;                                               // 0x0448   (0x0008)  
	UCanvasPanel*                                      cpBtnCharacterPreview;                                      // 0x0450   (0x0008)  
	UWTLCommonTextButton*                              ucBtnPreview;                                               // 0x0458   (0x0008)  
	UWTLCommonButton*                                  ucBtnCharacterPreview;                                      // 0x0460   (0x0008)  
	FSlateColor                                        NormalRemainingColor;                                       // 0x0468   (0x0028)  
	FSlateColor                                        LowRemainingColor;                                          // 0x0490   (0x0028)  
	FSlateColor                                        VeryLowRemainingColor;                                      // 0x04B8   (0x0028)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x04E0   (0x0030)  MISSED
	FWTLSellItemInfo                                   m_SellItemInfo;                                             // 0x0510   (0x0048)  
	unsigned char                                      UnknownData01_5[0x18];                                      // 0x0558   (0x0018)  MISSED
	FSlateBrush                                        DefaultArtefactItemInContainerBrush;                        // 0x0570   (0x0088)  


	/// Functions
	// Function /Script/WTL.WTLHUDSellStorageItem.OnPreviewBtnClick
	void OnPreviewBtnClick();                                                                                                // [0x1834dc0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSellStorageItem.OnItemInfoBtnClick
	void OnItemInfoBtnClick();                                                                                               // [0x1834e20] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSellStorageItem.OnCharacterPreviewBtnClick
	void OnCharacterPreviewBtnClick();                                                                                       // [0x1834da0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSellStorageItem.OnBuyBtnClick
	void OnBuyBtnClick();                                                                                                    // [0x1834e40] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDServerEventInfo
/// Size: 0x0030 (0x000268 - 0x000298)
class UWTLHUDServerEventInfo : public UWTLHUDWidgetBase
{ 
public:
	UBorder*                                           bServerEventInfo;                                           // 0x0268   (0x0008)  
	UTextBlock*                                        tbEventName;                                                // 0x0270   (0x0008)  
	UTextBlock*                                        tbTimeLeft;                                                 // 0x0278   (0x0008)  
	UTextBlock*                                        tbComment;                                                  // 0x0280   (0x0008)  
	TArray<FWTLServerEventTypeColor>                   EventTypesColors;                                           // 0x0288   (0x0010)  
};

/// Class /Script/WTL.WTLHUDSlotMachinePayTableWindow
/// Size: 0x0010 (0x000288 - 0x000298)
class UWTLHUDSlotMachinePayTableWindow : public UWTLHUDWindowBase
{ 
public:
	UWTLSlotMachinePayTableWidget*                     ucSlotMachinePayTable;                                      // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0290   (0x0008)  
};

/// Class /Script/WTL.WTLHUDSlotMachineRewardWindow
/// Size: 0x0120 (0x000288 - 0x0003A8)
class UWTLHUDSlotMachineRewardWindow : public UWTLHUDWindowBase
{ 
public:
	UHorizontalBox*                                    hbItems;                                                    // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbItemsToolTip;                                             // 0x0290   (0x0008)  
	UTextBlock*                                        tbItemsToolTip;                                             // 0x0298   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02A0   (0x0008)  
	FWTLStorageContent                                 m_Items;                                                    // 0x02A8   (0x00A8)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0350   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ItemSlotWidgetClass;                                        // 0x0358   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ShowSoundEvent;                                             // 0x0380   (0x0028)  
};

/// Class /Script/WTL.WTLHUDSpectatorModeExitHint
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLHUDSpectatorModeExitHint : public UUserWidget
{ 
public:
	UTextBlock*                                        tbExitSpectatorHotKey;                                      // 0x0260   (0x0008)  
	UTextBlock*                                        tbActionText;                                               // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLHUDSteamInventory
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDSteamInventory : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDSteamInventoryWindow*                       ucSteamInventoryWindow;                                     // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDSteamInventoryItem
/// Size: 0x0088 (0x0004A0 - 0x000528)
class UWTLHUDSteamInventoryItem : public UWTLCommonSelectedItem
{ 
public:
	UBorder*                                           bItemBackground;                                            // 0x04A0   (0x0008)  
	UBorder*                                           bBorder;                                                    // 0x04A8   (0x0008)  
	UWidgetSwitcher*                                   wsImage;                                                    // 0x04B0   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x04B8   (0x0008)  
	UTextBlock*                                        tbQuantity;                                                 // 0x04C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x60];                                      // 0x04C8   (0x0060)  MISSED
};

/// Class /Script/WTL.WTLHUDSteamInventoryNewItemsWindow
/// Size: 0x0068 (0x000288 - 0x0002F0)
class UWTLHUDSteamInventoryNewItemsWindow : public UWTLHUDWindowBase
{ 
public:
	UHorizontalBox*                                    hbItemsCount;                                               // 0x0288   (0x0008)  
	UTextBlock*                                        tbCurrentItemNumber;                                        // 0x0290   (0x0008)  
	UTextBlock*                                        tbItemsCount;                                               // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsItemImage;                                                // 0x02A0   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x02A8   (0x0008)  
	UButton*                                           btnPreviousItem;                                            // 0x02B0   (0x0008)  
	UButton*                                           btnNextItem;                                                // 0x02B8   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x02C0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x02D0   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDSteamInventoryNewItemsWindow.OnPreviousItemButtonClicked
	void OnPreviousItemButtonClicked();                                                                                      // [0x18360b0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSteamInventoryNewItemsWindow.OnNextItemButtonClicked
	void OnNextItemButtonClicked();                                                                                          // [0x1836050] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDSteamInventoryStorage
/// Size: 0x0000 (0x0002C0 - 0x0002C0)
class UWTLHUDSteamInventoryStorage : public UWTLHUDBaseActionStorage
{ 
public:
};

/// Class /Script/WTL.WTLHUDSteamInventoryWindow
/// Size: 0x0130 (0x000288 - 0x0003B8)
class UWTLHUDSteamInventoryWindow : public UWTLHUDWindowBase
{ 
public:
	UWidgetSwitcher*                                   wsItems;                                                    // 0x0288   (0x0008)  
	UWrapBox*                                          wbItems;                                                    // 0x0290   (0x0008)  
	UBorder*                                           bItemDescription;                                           // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsItemImage;                                                // 0x02A0   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x02A8   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x02B0   (0x0008)  
	UScrollBox*                                        sbItemInfo;                                                 // 0x02B8   (0x0008)  
	URichTextBlock*                                    rtbItemDescription;                                         // 0x02C0   (0x0008)  
	UTextBlock*                                        tbContainsCaption;                                          // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbTokensContains;                                           // 0x02D0   (0x0008)  
	UTextBlock*                                        tbTokensContains;                                           // 0x02D8   (0x0008)  
	UWrapBox*                                          wbItemsContains;                                            // 0x02E0   (0x0008)  
	UThrobber*                                         thTakeResponse;                                             // 0x02E8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnTake;                                                  // 0x02F0   (0x0008)  
	UWTLHUDSteamInventoryStorage*                      ucSteamInventoryStorage;                                    // 0x02F8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x0300   (0x0040)  MISSED
	TWeakObjectPtr<UClass*>                            SteamInventoryItemWidgetClass;                              // 0x0340   (0x0028)  
	TWeakObjectPtr<UClass*>                            EmptyInventoryItemWidgetClass;                              // 0x0368   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemDefinitionWidgetClass;                                  // 0x0390   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDSteamInventoryWindow.OnUpdateInventory
	void OnUpdateInventory(int32_t UpdateHandle);                                                                            // [0x1836800] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSteamInventoryWindow.OnTakeBtnClicked
	void OnTakeBtnClicked();                                                                                                 // [0x18368d0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSteamInventoryWindow.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x1823000] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSteamInventoryWindow.OnInventoryItemSelected
	void OnInventoryItemSelected(UWTLHUDSteamInventoryItem* ItemWidget, uint64_t ItemId, int32_t itemdefid);                 // [0x1836610] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSteamInventoryWindow.OnInventoryItemImageUpdated
	void OnInventoryItemImageUpdated(UWTLHUDSteamInventoryItem* ItemWidget);                                                 // [0x18364f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDSteamInventoryWindow.OnConsumeItemTimeout
	void OnConsumeItemTimeout();                                                                                             // [0x18364d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDStuffSlot
/// Size: 0x0038 (0x000BB0 - 0x000BE8)
class UWTLHUDStuffSlot : public UWTLHUDItemSlot
{ 
public:
	UVerticalBox*                                      vbMain;                                                     // 0x0BB0   (0x0008)  
	UImage*                                            imgEquipmentType;                                           // 0x0BB8   (0x0008)  
	UImage*                                            imgProhibit;                                                // 0x0BC0   (0x0008)  
	UTextBlock*                                        tbActionKey;                                                // 0x0BC8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0BD0   (0x0008)  MISSED
	TArray<FWTLEquipmentTypeTexture>                   EquipmentTypeTextures;                                      // 0x0BD8   (0x0010)  
};

/// Class /Script/WTL.WTLHUDSwitchInfoWidgetsHint
/// Size: 0x0010 (0x000268 - 0x000278)
class UWTLHUDSwitchInfoWidgetsHint : public UWTLHUDWidgetBase
{ 
public:
	URichTextBlock*                                    rtbSwitchInfoWidgetsHint;                                   // 0x0268   (0x0008)  
	URichTextBlock*                                    rtbSwitchActiveQuestHint;                                   // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLHUDTabButton
/// Size: 0x0000 (0x0012C8 - 0x0012C8)
class UWTLHUDTabButton : public UWTLCommonTabButton
{ 
public:
};

/// Class /Script/WTL.WTLHUDTeleportationDeviceWindow
/// Size: 0x0078 (0x000288 - 0x000300)
class UWTLHUDTeleportationDeviceWindow : public UWTLCommonWindowBase
{ 
public:
	UTextBlock*                                        tbDeviceEnergyPercent;                                      // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsHint;                                                     // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsMain;                                                     // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbPoints;                                                   // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x18];                                      // 0x02A8   (0x0018)  MISSED
	TArray<UWTLHUDTeleportationPoint*>                 m_TeleporationPoints;                                       // 0x02C0   (0x0010)  
	TWeakObjectPtr<UClass*>                            TeleportationPointWidgetClass;                              // 0x02D0   (0x0028)  
	UWidgetAnimation*                                  DeviceIsCompletelyDischargedTextBlinkingAnimation;          // 0x02F8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDTeleportationDeviceWindow.OnTeleportationPointSelected
	void OnTeleportationPointSelected(AWTLFortificationCommandCore* FortificationCommandCore);                               // [0x1836ca0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDTeleportationPoint
/// Size: 0x00C0 (0x0004A0 - 0x000560)
class UWTLHUDTeleportationPoint : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbNumber;                                                   // 0x04A0   (0x0008)  
	UTextBlock*                                        tbPointCoords;                                              // 0x04A8   (0x0008)  
	UWidgetSwitcher*                                   wsControlFaction;                                           // 0x04B0   (0x0008)  
	UWidgetSwitcher*                                   wsStatus;                                                   // 0x04B8   (0x0008)  
	UTextBlock*                                        tbCoreEnergy;                                               // 0x04C0   (0x0008)  
	UTextBlock*                                        tbTimeLeft;                                                 // 0x04C8   (0x0008)  
	UBorder*                                           bForbiddenBackground;                                       // 0x04D0   (0x0008)  
	UTextBlock*                                        tbReason;                                                   // 0x04D8   (0x0008)  
	AWTLFortificationCommandCore*                      m_FortificationCommandCore;                                 // 0x04E0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x58];                                      // 0x04E8   (0x0058)  MISSED
	UWidgetAnimation*                                  CaptureInProgressTextBlinkingAnimation;                     // 0x0540   (0x0008)  
	UWidgetAnimation*                                  ShowForbiddenBackgroundAnimation;                           // 0x0548   (0x0008)  
	FLinearColor                                       ForbiddenBorderBrushColor;                                  // 0x0550   (0x0010)  
};

/// Class /Script/WTL.WTLHUDTextChatArea
/// Size: 0x0228 (0x000268 - 0x000490)
class UWTLHUDTextChatArea : public UWTLHUDWidgetBase
{ 
public:
	UMenuAnchor*                                       maPopup;                                                    // 0x0268   (0x0008)  
	UWTLCommonPopupMenu*                               m_PopupMenuWidget;                                          // 0x0270   (0x0008)  
	UBorder*                                           bChatList;                                                  // 0x0278   (0x0008)  
	UScrollBox*                                        sbChatList;                                                 // 0x0280   (0x0008)  
	UBorder*                                           bButtonsTab;                                                // 0x0288   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabCommon;                                               // 0x0290   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabChat;                                                 // 0x0298   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabLog;                                                  // 0x02A0   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabBattle;                                               // 0x02A8   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabEnvironment;                                          // 0x02B0   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabLoot;                                                 // 0x02B8   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabGroup;                                                // 0x02C0   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabClan;                                                 // 0x02C8   (0x0008)  
	UWTLHUDChatTabButton*                              btnTabFaction;                                              // 0x02D0   (0x0008)  
	UWTLHUDChatTabButton*                              btnCollapseChat;                                            // 0x02D8   (0x0008)  
	UBorder*                                           bChatMessage;                                               // 0x02E0   (0x0008)  
	UEditableTextBox*                                  etbChatMessage;                                             // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbMessageTextLength;                                        // 0x02F0   (0x0008)  
	UTextBlock*                                        tbMessageTextCurrentLength;                                 // 0x02F8   (0x0008)  
	UTextBlock*                                        tbMessageTextMaxLength;                                     // 0x0300   (0x0008)  
	UWTLCommonButton*                                  btnCopyAll;                                                 // 0x0308   (0x0008)  
	UWTLCommonButton*                                  btnShowHideSmiles;                                          // 0x0310   (0x0008)  
	UBorder*                                           bSmiles;                                                    // 0x0318   (0x0008)  
	UWrapBox*                                          wbSmiles;                                                   // 0x0320   (0x0008)  
	unsigned char                                      UnknownData00_5[0xA0];                                      // 0x0328   (0x00A0)  MISSED
	UWidgetAnimation*                                  CollapseExpandChatAnim;                                     // 0x03C8   (0x0008)  
	UWidgetAnimation*                                  ShowHideChatAnim;                                           // 0x03D0   (0x0008)  
	UWidgetAnimation*                                  ShowHideSmilesAnim;                                         // 0x03D8   (0x0008)  
	float                                              DelayHide;                                                  // 0x03E0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x03E4   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        PrivateMessageSoundEvent;                                   // 0x03E8   (0x0028)  
	TWeakObjectPtr<UClass*>                            TextChatItemClass;                                          // 0x0410   (0x0028)  
	TWeakObjectPtr<UClass*>                            ChatSmileButtonWidgetClass;                                 // 0x0438   (0x0028)  
	TWeakObjectPtr<UClass*>                            PopupMenuWidgetClass;                                       // 0x0460   (0x0028)  
	float                                              SmilesPanelWidth;                                           // 0x0488   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x048C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDTextChatArea.OnUnmuteCharacter
	void OnUnmuteCharacter();                                                                                                // [0x18371e0] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnSmileButtonClicked
	void OnSmileButtonClicked(FString TextAliases);                                                                          // [0x1837450] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnShowHideSmilesButtonClicked
	void OnShowHideSmilesButtonClicked();                                                                                    // [0x1837590] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnSendMessage
	void OnSendMessage();                                                                                                    // [0x1837430] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnReportCharacter
	void OnReportCharacter();                                                                                                // [0x1836f80] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnRemoveCharacterFromContactList
	void OnRemoveCharacterFromContactList();                                                                                 // [0x1837000] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnMuteCharacter
	void OnMuteCharacter();                                                                                                  // [0x1837280] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnMenuOpenChanged
	void OnMenuOpenChanged(bool bIsOpen);                                                                                    // [0x18379a0] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnInviteToGroup
	void OnInviteToGroup();                                                                                                  // [0x1837360] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnGetPopupMenuContent
	UWidget* OnGetPopupMenuContent();                                                                                        // [0x1837a80] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnCopyAllButtonClicked
	void OnCopyAllButtonClicked();                                                                                           // [0x18375b0] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnChatTabBtnClicked
	void OnChatTabBtnClicked(EWTLFiltersChat FiltersChat);                                                                   // [0x18375d0] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnChatMessageTextBoxCommitted
	void OnChatMessageTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                  // [0x18376a0] Final|Native|Protected|HasOutParms 
	// Function /Script/WTL.WTLHUDTextChatArea.OnChatMessageTextBoxChanged
	void OnChatMessageTextBoxChanged(FText& InText);                                                                         // [0x1837870] Final|Native|Protected|HasOutParms 
	// Function /Script/WTL.WTLHUDTextChatArea.OnAddCharacterToContactListAsFriend
	void OnAddCharacterToContactListAsFriend();                                                                              // [0x1837130] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.OnAddCharacterToContactListAsEnemy
	void OnAddCharacterToContactListAsEnemy();                                                                               // [0x1837080] Final|Native|Protected 
	// Function /Script/WTL.WTLHUDTextChatArea.K2_SynchronizeProperties
	void K2_SynchronizeProperties();                                                                                         // [0x1836f40] Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLHUDTextChatItem
/// Size: 0x0028 (0x000268 - 0x000290)
class UWTLHUDTextChatItem : public UWTLHUDWidgetBase
{ 
public:
	UWTLCommonButton*                                  btnCopy;                                                    // 0x0268   (0x0008)  
	UInvalidationBox*                                  ibMessage;                                                  // 0x0270   (0x0008)  
	UWTLChatTextBlock*                                 tbMessage;                                                  // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0280   (0x0008)  MISSED
	UWidgetAnimation*                                  CopyButtonShowHideAnimation;                                // 0x0288   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDTextChatItem.OnCopyButtonClicked
	void OnCopyButtonClicked();                                                                                              // [0x1837e40] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDThrowingStateExitHint
/// Size: 0x0010 (0x000268 - 0x000278)
class UWTLHUDThrowingStateExitHint : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbHideUsableItemKey;                                        // 0x0268   (0x0008)  
	UTextBlock*                                        tbAimKey;                                                   // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLHUDTrade
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDTrade : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDTradeTabsWindow*                            ucTradeTabsWindow;                                          // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLHUDTradeTabsWindow
/// Size: 0x0078 (0x000288 - 0x000300)
class UWTLHUDTradeTabsWindow : public UWTLHUDWindowBase
{ 
public:
	UHorizontalBox*                                    hbTabBtns;                                                  // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsTab;                                                      // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsSellStorage;                                              // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsBuyStorage;                                               // 0x02A0   (0x0008)  
	UWTLHUDSellStorage*                                ucSellStorage;                                              // 0x02A8   (0x0008)  
	UWTLHUDBuyStorage*                                 ucBuyStorage;                                               // 0x02B0   (0x0008)  
	UWTLHUDCommissionSellStorage*                      ucCommissionSellStorage;                                    // 0x02B8   (0x0008)  
	UWTLHUDCommissionList*                             ucCommissionList;                                           // 0x02C0   (0x0008)  
	UWTLHUDCommissionDropArea*                         ucCommissionDropArea;                                       // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02D0   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            TabButtonClass;                                             // 0x02D8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLHUDTradeTabsWindow.OnTabBtnClicked
	void OnTabBtnClicked(char TabIndex);                                                                                     // [0x18380c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDTradeTabsWindow.OnNPCActorActiveStateChanged
	void OnNPCActorActiveStateChanged(bool IsActive);                                                                        // [0x1823000] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDTutorialWindow
/// Size: 0x00C0 (0x000288 - 0x000348)
class UWTLHUDTutorialWindow : public UWTLHUDWindowBase
{ 
public:
	UBorder*                                           bWidth;                                                     // 0x0288   (0x0008)  
	UBorder*                                           bHeight;                                                    // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbMessagesCount;                                            // 0x0298   (0x0008)  
	UImage*                                            imgMessage;                                                 // 0x02A0   (0x0008)  
	URichTextBlock*                                    rtbMessage;                                                 // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsCheckBox;                                                 // 0x02B0   (0x0008)  
	UWTLCommonCheckBox*                                cbDisableTutorial;                                          // 0x02B8   (0x0008)  
	UWTLCommonCheckBox*                                cbDoNotShowAgain;                                           // 0x02C0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x02C8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnPrevious;                                              // 0x02D0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnNext;                                                  // 0x02D8   (0x0008)  
	UTextBlock*                                        tbCurrentMessageNumber;                                     // 0x02E0   (0x0008)  
	UTextBlock*                                        tbMessagesCount;                                            // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4C];                                      // 0x02F0   (0x004C)  MISSED
	float                                              MinWidth;                                                   // 0x033C   (0x0004)  
	float                                              MinHeight;                                                  // 0x0340   (0x0004)  
	float                                              PaddingSize;                                                // 0x0344   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLHUDTutorialWindow.OnPreviousBtnClicked
	void OnPreviousBtnClicked();                                                                                             // [0x1838330] Final|Native|Private 
	// Function /Script/WTL.WTLHUDTutorialWindow.OnNextBtnClicked
	void OnNextBtnClicked();                                                                                                 // [0x1838310] Final|Native|Private 
	// Function /Script/WTL.WTLHUDTutorialWindow.OnDoNotShowAgainCheckBoxCheckStateChanged
	void OnDoNotShowAgainCheckBoxCheckStateChanged(bool bIsChecked);                                                         // [0x17d3540] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDUtilizationStorage
/// Size: 0x0010 (0x0002C0 - 0x0002D0)
class UWTLHUDUtilizationStorage : public UWTLHUDBaseActionStorage
{ 
public:
	UWidgetSwitcher*                                   wsReward;                                                   // 0x02C0   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucRewardItemTypeSlot;                                       // 0x02C8   (0x0008)  
};

/// Class /Script/WTL.WTLHUDVehicleExitHint
/// Size: 0x0020 (0x000268 - 0x000288)
class UWTLHUDVehicleExitHint : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0268   (0x0008)  
	UTextBlock*                                        tbVehicleExitKey;                                           // 0x0270   (0x0008)  
	UTextBlock*                                        tbVehicleExitHintText;                                      // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0280   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLHUDWarningTitle
/// Size: 0x00A8 (0x000268 - 0x000310)
class UWTLHUDWarningTitle : public UWTLHUDWidgetBase
{ 
public:
	UTextBlock*                                        tbWarning;                                                  // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0270   (0x0010)  MISSED
	UWidgetAnimation*                                  ShakingAnimation;                                           // 0x0280   (0x0008)  
	UWidgetAnimation*                                  AppearAnimation;                                            // 0x0288   (0x0008)  
	FLinearColor                                       WarningColor;                                               // 0x0290   (0x0010)  
	FLinearColor                                       WarningColorNotSound;                                       // 0x02A0   (0x0010)  
	FLinearColor                                       EventColor;                                                 // 0x02B0   (0x0010)  
	TWeakObjectPtr<UFMODEvent*>                        WarningSoundEvent;                                          // 0x02C0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        EventSoundEvent;                                            // 0x02E8   (0x0028)  
};

/// Class /Script/WTL.WTLHUDWeaponCountdown
/// Size: 0x0018 (0x000268 - 0x000280)
class UWTLHUDWeaponCountdown : public UWTLHUDWidgetBase
{ 
public:
	UWTLCommonCountdownSlider*                         ucCountdownSlider;                                          // 0x0268   (0x0008)  
	UImage*                                            imgWeapon;                                                  // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0278   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDWeaponCountdown.OnCountdownSliderFinished
	void OnCountdownSliderFinished();                                                                                        // [0x1838500] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDWeaponInfo
/// Size: 0x00E0 (0x000268 - 0x000348)
class UWTLHUDWeaponInfo : public UWTLHUDWidgetBase
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0268   (0x0008)  
	UTextBlock*                                        tbCurrentAmmoCount;                                         // 0x0270   (0x0008)  
	UTextBlock*                                        tbAmmoName;                                                 // 0x0278   (0x0008)  
	UImage*                                            imgOverheat;                                                // 0x0280   (0x0008)  
	UProgressBar*                                      pbCondition;                                                // 0x0288   (0x0008)  
	UImage*                                            imgProhibited;                                              // 0x0290   (0x0008)  
	UImage*                                            imgWeapon;                                                  // 0x0298   (0x0008)  
	UImage*                                            imgCorner;                                                  // 0x02A0   (0x0008)  
	UImage*                                            imgValueCircle;                                             // 0x02A8   (0x0008)  
	UImage*                                            imgValueItem;                                               // 0x02B0   (0x0008)  
	UVerticalBox*                                      vbValue;                                                    // 0x02B8   (0x0008)  
	UTextBlock*                                        tbValue;                                                    // 0x02C0   (0x0008)  
	UTextBlock*                                        tbAdditionalValue;                                          // 0x02C8   (0x0008)  
	UWidgetSwitcher*                                   wsFireMode;                                                 // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02D8   (0x0010)  MISSED
	FLinearColor                                       GoodItemConditionColor;                                     // 0x02E8   (0x0010)  
	FLinearColor                                       NormalItemConditionColor;                                   // 0x02F8   (0x0010)  
	FLinearColor                                       BadItemConditionColor;                                      // 0x0308   (0x0010)  
	FSlateColor                                        ItemEnergyColor;                                            // 0x0318   (0x0028)  
	UWidgetAnimation*                                  ConditionProgressBarFlickerAnimation;                       // 0x0340   (0x0008)  
};

/// Class /Script/WTL.WTLHUDWeaponPartsExchange
/// Size: 0x0008 (0x000278 - 0x000280)
class UWTLHUDWeaponPartsExchange : public UWTLHUDInteractiveWidget
{ 
public:
	UWTLHUDWeaponPartsExchangeWindow*                  ucWeaponPartsExchangeWindow;                                // 0x0278   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLHUDWeaponPartsExchange.OnLostFocusOnWeaponPartsExchangeWindow
	void OnLostFocusOnWeaponPartsExchangeWindow();                                                                           // [0x18391a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLHUDWeaponPartsExchangeWindow
/// Size: 0x0078 (0x000288 - 0x000300)
class UWTLHUDWeaponPartsExchangeWindow : public UWTLCommonWindowBase
{ 
public:
	UWTLHUDInventorySlot*                              ucWeaponPartItemToExchangeSlot;                             // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsMain;                                                     // 0x0290   (0x0008)  
	UWTLCommonComboBoxString*                          cbsWeaponModificationPartsTypeToExchange;                   // 0x0298   (0x0008)  
	UTextBlock*                                        tbExchangeRate;                                             // 0x02A0   (0x0008)  
	UWTLCommonSpinBox*                                 sbItemCountToExchange;                                      // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsWeaponPartItemResultSlot;                                 // 0x02B0   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucWeaponPartItemResultSlot;                                 // 0x02B8   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnExchange;                                              // 0x02C0   (0x0008)  
	AWTLNPCActor*                                      m_NPCActor;                                                 // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x02D0   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnWeaponPartItemToExchangeSlotInit
	void OnWeaponPartItemToExchangeSlotInit(UWTLHUDInventorySlot* InventorySlot);                                            // [0x1839b60] Final|Native|Private 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnWeaponPartItemToExchangeSlotClear
	void OnWeaponPartItemToExchangeSlotClear(uint64_t ItemId);                                                               // [0x1839a80] Final|Native|Private 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnWeaponModificationPartsTypeToExchangeSelectionChanged
	void OnWeaponModificationPartsTypeToExchangeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType); // [0x1839870] Final|Native|Private 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnMessageDialogHide
	void OnMessageDialogHide();                                                                                              // [0x18393c0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnItemCountToExchangeValueChanged
	void OnItemCountToExchangeValueChanged(int32_t Value);                                                                   // [0x1839520] Final|Native|Private 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnItemCountToExchangeTextCommitted
	void OnItemCountToExchangeTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                             // [0x1839660] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnExchangeConfirmed
	void OnExchangeConfirmed();                                                                                              // [0x18393f0] Final|Native|Private 
	// Function /Script/WTL.WTLHUDWeaponPartsExchangeWindow.OnExchangeBtnClicked
	void OnExchangeBtnClicked();                                                                                             // [0x1839500] Final|Native|Private 
};

/// Class /Script/WTL.WTLInputDataValidator
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLInputDataValidator : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLIntegerSpinBox
/// Size: 0x0400 (0x000108 - 0x000508)
class UWTLIntegerSpinBox : public UWidget
{ 
public:
	int32_t                                            Value;                                                      // 0x0108   (0x0004)  
	FDelegateProperty                                  ValueDelegate;                                              // 0x010C   (0x0010)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x011C   (0x0004)  MISSED
	FSpinBoxStyle                                      WidgetStyle;                                                // 0x0120   (0x02E8)  
	USlateWidgetStyleAsset*                            Style;                                                      // 0x0408   (0x0008)  
	int32_t                                            Delta;                                                      // 0x0410   (0x0004)  
	float                                              SliderExponent;                                             // 0x0414   (0x0004)  
	FSlateFontInfo                                     Font;                                                       // 0x0418   (0x0058)  
	float                                              MinDesiredWidth;                                            // 0x0470   (0x0004)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x0474   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x0475   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0476   (0x0002)  MISSED
	FSlateColor                                        ForegroundColor;                                            // 0x0478   (0x0028)  
	FMulticastInlineDelegate                           OnValueChanged;                                             // 0x04A0   (0x0010)  
	FMulticastInlineDelegate                           OnValueCommitted;                                           // 0x04B0   (0x0010)  
	FMulticastInlineDelegate                           OnBeginSliderMovement;                                      // 0x04C0   (0x0010)  
	FMulticastInlineDelegate                           OnEndSliderMovement;                                        // 0x04D0   (0x0010)  
	bool                                               bOverride_MinValue;                                         // 0x04E0:0 (0x0001)  
	bool                                               bOverride_MaxValue;                                         // 0x04E0:1 (0x0001)  
	bool                                               bOverride_MinSliderValue;                                   // 0x04E0:2 (0x0001)  
	bool                                               bOverride_MaxSliderValue;                                   // 0x04E0:3 (0x0001)  
	unsigned char                                      UnknownData02_4[0x3];                                       // 0x04E1   (0x0003)  MISSED
	int32_t                                            MinValue;                                                   // 0x04E4   (0x0004)  
	int32_t                                            MaxValue;                                                   // 0x04E8   (0x0004)  
	int32_t                                            MinSliderValue;                                             // 0x04EC   (0x0004)  
	int32_t                                            MaxSliderValue;                                             // 0x04F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x14];                                      // 0x04F4   (0x0014)  MISSED


	/// Functions
	// Function /Script/WTL.WTLIntegerSpinBox.SetValue
	void SetValue(int32_t NewValue);                                                                                         // [0x183a930] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.SetMinValue
	void SetMinValue(int32_t NewValue);                                                                                      // [0x183a7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.SetMinSliderValue
	void SetMinSliderValue(int32_t NewValue);                                                                                // [0x183a500] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.SetMaxValue
	void SetMaxValue(int32_t NewValue);                                                                                      // [0x183a670] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.SetMaxSliderValue
	void SetMaxSliderValue(int32_t NewValue);                                                                                // [0x183a370] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.SetForegroundColor
	void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x183a210] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.OnIntegerSpinBoxValueCommittedEvent__DelegateSignature
	void OnIntegerSpinBoxValueCommittedEvent__DelegateSignature(int32_t InValue, TEnumAsByte<ETextCommit> CommitMethod);     // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLIntegerSpinBox.OnIntegerSpinBoxValueChangedEvent__DelegateSignature
	void OnIntegerSpinBoxValueChangedEvent__DelegateSignature(int32_t InValue);                                              // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLIntegerSpinBox.OnIntegerSpinBoxBeginSliderMovement__DelegateSignature
	void OnIntegerSpinBoxBeginSliderMovement__DelegateSignature();                                                           // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLIntegerSpinBox.GetValue
	int32_t GetValue();                                                                                                      // [0x183aae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLIntegerSpinBox.GetMinValue
	int32_t GetMinValue();                                                                                                   // [0x183a8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLIntegerSpinBox.GetMinSliderValue
	int32_t GetMinSliderValue();                                                                                             // [0x183a5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLIntegerSpinBox.GetMaxValue
	int32_t GetMaxValue();                                                                                                   // [0x183a740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLIntegerSpinBox.GetMaxSliderValue
	int32_t GetMaxSliderValue();                                                                                             // [0x183a440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLIntegerSpinBox.ClearMinValue
	void ClearMinValue();                                                                                                    // [0x183a7c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.ClearMinSliderValue
	void ClearMinSliderValue();                                                                                              // [0x183a4e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.ClearMaxValue
	void ClearMaxValue();                                                                                                    // [0x183a650] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLIntegerSpinBox.ClearMaxSliderValue
	void ClearMaxSliderValue();                                                                                              // [0x183a350] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLInteractiveBlockedObject
/// Size: 0x0008 (0x000260 - 0x000268)
class AWTLInteractiveBlockedObject : public AWTLInteractiveObject
{ 
public:
	float                                              ActivationTimePicklock;                                     // 0x0260   (0x0004)  
	float                                              ActivationTimeKey;                                          // 0x0264   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLInteractiveBlockedObject.BPOnStartInteraction
	void BPOnStartInteraction(AWTLCharacter* Character);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLInteractiveBlockedObject.BPOnFinishInteraction
	void BPOnFinishInteraction(AWTLCharacter* Character, bool Success);                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLInteractiveBlockedObject.BPGetActivationTime
	float BPGetActivationTime(AWTLCharacter* Character);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLInteractiveObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLInteractiveObjectInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLInteractivePlant
/// Size: 0x0030 (0x000260 - 0x000290)
class AWTLInteractivePlant : public AWTLInteractiveObject
{ 
public:
	USceneComponent*                                   PlantRootComponent;                                         // 0x0260   (0x0008)  
	UBoxComponent*                                     BoxComponent;                                               // 0x0268   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0278   (0x0008)  MISSED
	int32_t                                            ResourceID;                                                 // 0x0280   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0284   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x0288   (0x0004)  
	int32_t                                            Count;                                                      // 0x028C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLInteractivePlant.OnItemDestroyed
	void OnItemDestroyed(AActor* DestroyedActor);                                                                            // [0x17941a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLPlantInstancedStaticMeshComponent
/// Size: 0x0010 (0x000580 - 0x000590)
class UWTLPlantInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
public:
	float                                              Chance;                                                     // 0x0578   (0x0004)  
	int32_t                                            MaxInstanceCount;                                           // 0x057C   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0580   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0581   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0584   (0x0004)  
	int32_t                                            MinItemCount;                                               // 0x0588   (0x0004)  
	int32_t                                            MaxItemCount;                                               // 0x058C   (0x0004)  
};

/// Class /Script/WTL.WTLInteractivePlantSpawnField
/// Size: 0x0070 (0x000220 - 0x000290)
class AWTLInteractivePlantSpawnField : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0220   (0x0018)  MISSED
	TArray<FWTLInteractivePlanSpawnFieldPoint>         GeneratedSpawnPoints;                                       // 0x0238   (0x0010)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0248   (0x0010)  MISSED
	UBoxComponent*                                     SpawnVolume;                                                // 0x0258   (0x0008)  
	float                                              MinStartDelay;                                              // 0x0260   (0x0004)  
	float                                              MaxStartDelay;                                              // 0x0264   (0x0004)  
	float                                              MinSpawnDelay;                                              // 0x0268   (0x0004)  
	float                                              MaxSpawnDelay;                                              // 0x026C   (0x0004)  
	int32_t                                            CountLimit;                                                 // 0x0270   (0x0004)  
	int32_t                                            MinSpawnCount;                                              // 0x0274   (0x0004)  
	int32_t                                            MaxSpawnCount;                                              // 0x0278   (0x0004)  
	bool                                               AlignPlantToNormal;                                         // 0x027C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x027D   (0x0003)  MISSED
	float                                              RotationMin;                                                // 0x0280   (0x0004)  
	float                                              RotationMax;                                                // 0x0284   (0x0004)  
	float                                              MaxSlopeAngle;                                              // 0x0288   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x028C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLInteractivePlantSpawnField.OnRep_SpawnedItems
	void OnRep_SpawnedItems();                                                                                               // [0x183b650] Final|Native|Private 
};

/// Class /Script/WTL.WTLInteractivePlantSpawnPoint
/// Size: 0x0108 (0x000220 - 0x000328)
class AWTLInteractivePlantSpawnPoint : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0220   (0x0078)  MISSED
	bool                                               SpawnActive;                                                // 0x0298   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0299   (0x0007)  MISSED
	TMap<TWeakObjectPtr, FWTLInteractivePlantSpawnInfo> PlantsToSpawn;                                             // 0x02A0   (0x0050)  
	UBoxComponent*                                     SpawnVolume;                                                // 0x02F0   (0x0008)  
	float                                              MinStartDelay;                                              // 0x02F8   (0x0004)  
	float                                              MaxStartDelay;                                              // 0x02FC   (0x0004)  
	float                                              MinSpawnDelay;                                              // 0x0300   (0x0004)  
	float                                              MaxSpawnDelay;                                              // 0x0304   (0x0004)  
	int32_t                                            CountLimit;                                                 // 0x0308   (0x0004)  
	int32_t                                            MinSpawnCount;                                              // 0x030C   (0x0004)  
	int32_t                                            MaxSpawnCount;                                              // 0x0310   (0x0004)  
	bool                                               AlignPlantToNormal;                                         // 0x0314   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0315   (0x0003)  MISSED
	float                                              RotationMin;                                                // 0x0318   (0x0004)  
	float                                              RotationMax;                                                // 0x031C   (0x0004)  
	float                                              MaxSlopeAngle;                                              // 0x0320   (0x0004)  
	float                                              MaxPlantSize;                                               // 0x0324   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLInteractivePlantSpawnPoint.DeactivateSpawn
	void DeactivateSpawn(bool RemoveSpawnedPlants);                                                                          // [0x1773b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLInteractivePlantSpawnPoint.ActivateSpawn
	void ActivateSpawn(bool ResetSpawnedCounter);                                                                            // [0x1773b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLInteractiveResource
/// Size: 0x00A0 (0x000260 - 0x000300)
class AWTLInteractiveResource : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0260   (0x0060)  MISSED
	USceneComponent*                                   PlantRootComponent;                                         // 0x02C0   (0x0008)  
	UBoxComponent*                                     BoxComponent;                                               // 0x02C8   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x02D0   (0x0008)  
	int32_t                                            ResourceID;                                                 // 0x02D8   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x02DC   (0x0004)  
	int32_t                                            MinIncrementCount;                                          // 0x02E0   (0x0004)  
	int32_t                                            MaxIncrementCount;                                          // 0x02E4   (0x0004)  
	float                                              MinIncrementDelay;                                          // 0x02E8   (0x0004)  
	float                                              MaxIncrementDelay;                                          // 0x02EC   (0x0004)  
	bool                                               AddToBlackListAfterGiveItem;                                // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02F1   (0x0003)  MISSED
	float                                              BlackListTimeout;                                           // 0x02F4   (0x0004)  
	int32_t                                            Count;                                                      // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02FC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLInteractiveResource.OnRep_Count
	void OnRep_Count();                                                                                                      // [0x183b990] Final|Native|Private 
};

/// Class /Script/WTL.WTLInteractiveResourceSource
/// Size: 0x00B8 (0x000260 - 0x000318)
class AWTLInteractiveResourceSource : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0260   (0x0060)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x02C0   (0x0008)  
	TArray<FWTLInteractiveResourceGatherType>          GatherTypes;                                                // 0x02C8   (0x0010)  
	FText                                              SourceName;                                                 // 0x02D8   (0x0018)  
	float                                              CurrentValue;                                               // 0x02F0   (0x0004)  
	float                                              StartValue;                                                 // 0x02F4   (0x0004)  
	float                                              MaxValue;                                                   // 0x02F8   (0x0004)  
	float                                              MinValueIncrement;                                          // 0x02FC   (0x0004)  
	float                                              MaxValueIncrement;                                          // 0x0300   (0x0004)  
	float                                              MinValueIncrementTime;                                      // 0x0304   (0x0004)  
	float                                              MaxValueIncrementTime;                                      // 0x0308   (0x0004)  
	bool                                               AddToBlackListAfterGather;                                  // 0x030C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x030D   (0x0003)  MISSED
	float                                              BlackListTime;                                              // 0x0310   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0314   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLInteractiveResourceSource.OnRep_CurrentValue
	void OnRep_CurrentValue();                                                                                               // [0xe77850] Final|Native|Private 
};

/// Class /Script/WTL.WTLQuickTimeEventInstigator
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLQuickTimeEventInstigator : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLItemManipulationIntreface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLItemManipulationIntreface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLItemPickup
/// Size: 0x0028 (0x000260 - 0x000288)
class AWTLItemPickup : public AWTLInteractiveObject
{ 
public:
	UBoxComponent*                                     BoxComponent;                                               // 0x0260   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x0268   (0x0008)  
	bool                                               CanAlwaysPickup;                                            // 0x0270   (0x0001)  
	bool                                               AddItemToInventory;                                         // 0x0271   (0x0001)  
	bool                                               IsHighLighted;                                              // 0x0272   (0x0001)  
	unsigned char                                      UnknownData00_6[0x15];                                      // 0x0273   (0x0015)  MISSED


	/// Functions
	// Function /Script/WTL.WTLItemPickup.OnItemDestroyed
	void OnItemDestroyed(AActor* DestroyedActor);                                                                            // [0x17941a0] Final|Native|Public  
	// Function /Script/WTL.WTLItemPickup.OnHit
	void OnHit(AActor* SelfActor, AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                               // [0x183d500] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLItemPickup.NetMulticast_OnStopFreeFall
	void NetMulticast_OnStopFreeFall(FTransform StopFreeFallTransform);                                                      // [0x183d7a0] Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults 
	// Function /Script/WTL.WTLItemPickup.MakeFreeFall
	void MakeFreeFall(TArray<AActor*>& IgnoredActors);                                                                       // [0x1779410] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLItemPickup.GetItemTypeID
	int32_t GetItemTypeID();                                                                                                 // [0x183d4a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLItemPickup.GetItemType
	EWTLItemType GetItemType();                                                                                              // [0x183d4d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLItemPickup.BPOnTakeItem
	void BPOnTakeItem(AWTLCharacter* Character);                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLWeaponPickup
/// Size: 0x00D8 (0x000288 - 0x000360)
class AWTLWeaponPickup : public AWTLItemPickup
{ 
public:
	FWTLWeaponItem                                     ItemInfo;                                                   // 0x0288   (0x00D8)  


	/// Functions
	// Function /Script/WTL.WTLWeaponPickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183dad0] Final|Native|Private 
};

/// Class /Script/WTL.WTLAmmoPickup
/// Size: 0x00D0 (0x000288 - 0x000358)
class AWTLAmmoPickup : public AWTLItemPickup
{ 
public:
	FWTLAmmoItem                                       ItemInfo;                                                   // 0x0288   (0x0098)  
	FLinearColor                                       BoxColor;                                                   // 0x0320   (0x0010)  
	TWeakObjectPtr<UTexture*>                          BoxSticker;                                                 // 0x0330   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLAmmoPickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183dc80] Final|Native|Private 
};

/// Class /Script/WTL.WTLMedicinePickup
/// Size: 0x00A8 (0x000288 - 0x000330)
class AWTLMedicinePickup : public AWTLItemPickup
{ 
public:
	FWTLMedicineItem                                   ItemInfo;                                                   // 0x0288   (0x00A8)  


	/// Functions
	// Function /Script/WTL.WTLMedicinePickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183dea0] Final|Native|Private 
};

/// Class /Script/WTL.WTLStuffPickup
/// Size: 0x0098 (0x000288 - 0x000320)
class AWTLStuffPickup : public AWTLItemPickup
{ 
public:
	FWTLStuffItem                                      ItemInfo;                                                   // 0x0288   (0x0098)  


	/// Functions
	// Function /Script/WTL.WTLStuffPickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183e0c0] Final|Native|Private 
};

/// Class /Script/WTL.WTLClothesPickup
/// Size: 0x00B0 (0x000288 - 0x000338)
class AWTLClothesPickup : public AWTLItemPickup
{ 
public:
	FWTLClothesItem                                    ItemInfo;                                                   // 0x0288   (0x00B0)  


	/// Functions
	// Function /Script/WTL.WTLClothesPickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183e2e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLResourcePickup
/// Size: 0x0070 (0x000288 - 0x0002F8)
class AWTLResourcePickup : public AWTLItemPickup
{ 
public:
	FWTLResourceItem                                   ItemInfo;                                                   // 0x0288   (0x0070)  


	/// Functions
	// Function /Script/WTL.WTLResourcePickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183e490] Final|Native|Private 
};

/// Class /Script/WTL.WTLArtefactPickup
/// Size: 0x00A0 (0x000288 - 0x000328)
class AWTLArtefactPickup : public AWTLItemPickup
{ 
public:
	FWTLArtefactItem                                   ItemInfo;                                                   // 0x0288   (0x00A0)  


	/// Functions
	// Function /Script/WTL.WTLArtefactPickup.OnRep_ItemInfo
	void OnRep_ItemInfo();                                                                                                   // [0x183e6b0] Final|Native|Private 
};

/// Class /Script/WTL.WTLActiveArtefactPickup
/// Size: 0x0000 (0x000328 - 0x000328)
class AWTLActiveArtefactPickup : public AWTLArtefactPickup
{ 
public:
};

/// Class /Script/WTL.WTLItemPickupSpawnPoint
/// Size: 0x0098 (0x000220 - 0x0002B8)
class AWTLItemPickupSpawnPoint : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0220   (0x0020)  MISSED
	TWeakObjectPtr<UClass*>                            ItemClass;                                                  // 0x0240   (0x0028)  
	UBoxComponent*                                     SpawnVolume;                                                // 0x0268   (0x0008)  
	bool                                               AutoEnableSpawn;                                            // 0x0270   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0271   (0x0003)  MISSED
	float                                              StartDelay;                                                 // 0x0274   (0x0004)  
	float                                              SpawnDelay;                                                 // 0x0278   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x027C   (0x0004)  
	int32_t                                            CountLimit;                                                 // 0x0280   (0x0004)  
	float                                              SpawnChance;                                                // 0x0284   (0x0004)  
	FRotator                                           RotationMin;                                                // 0x0288   (0x000C)  
	FRotator                                           RotationMax;                                                // 0x0294   (0x000C)  
	FWTLPickupSpawnPointScalabilitySettings            ScalabilitySettings;                                        // 0x02A0   (0x0014)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02B4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLItemPickupSpawnPoint.SpawnSingleItem
	void SpawnSingleItem(float SpawnTimeout, bool SpawnOnlyIfNotExists);                                                     // [0x183ebc0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLItemPickupSpawnPoint.ResetSpawnTimer
	void ResetSpawnTimer();                                                                                                  // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLItemPickupSpawnPoint.GetSpawnItemTypeID
	int32_t GetSpawnItemTypeID();                                                                                            // [0x183eaa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLItemPickupSpawnPoint.GetSpawnItemType
	EWTLItemType GetSpawnItemType();                                                                                         // [0x183eb30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLItemPickupSpawnPoint.EnableSpawn
	void EnableSpawn();                                                                                                      // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLItemPickupSpawnPoint.DisableSpawn
	void DisableSpawn();                                                                                                     // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLItemPreview
/// Size: 0x0180 (0x000220 - 0x0003A0)
class AWTLItemPreview : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0220   (0x0078)  MISSED
	UBoxComponent*                                     BoxComponent;                                               // 0x0298   (0x0008)  
	UStaticMeshComponent*                              StaticMesh;                                                 // 0x02A0   (0x0008)  
	UStaticMeshComponent*                              BackgroundPlane;                                            // 0x02A8   (0x0008)  
	USceneCaptureComponent2D*                          SceneCapture;                                               // 0x02B0   (0x0008)  
	UWTLWeaponAttachment*                              MuzzleAttachment;                                           // 0x02B8   (0x0008)  
	UStaticMeshComponent*                              MuzzleMount;                                                // 0x02C0   (0x0008)  
	UWTLWeaponAttachment*                              FlashlightAttachment;                                       // 0x02C8   (0x0008)  
	UStaticMeshComponent*                              FlashlightMount;                                            // 0x02D0   (0x0008)  
	UWTLWeaponAttachment*                              ScopeAttachment;                                            // 0x02D8   (0x0008)  
	UStaticMeshComponent*                              ScopeMount;                                                 // 0x02E0   (0x0008)  
	UTextureRenderTarget2D*                            RenderTargetSquare;                                         // 0x02E8   (0x0008)  
	UTextureRenderTarget2D*                            RenderTargetLandscape;                                      // 0x02F0   (0x0008)  
	FVector                                            SquareTextureBackgroundPlaneScale;                          // 0x02F8   (0x000C)  
	FVector                                            LandscapeTextureBackgroundPlaneScale;                       // 0x0304   (0x000C)  
	TWeakObjectPtr<UMaterialInterface*>                SquareItemPreviewStudioMaterial;                            // 0x0310   (0x0028)  
	TWeakObjectPtr<UMaterialInterface*>                LandscapeItemPreviewStudioMaterial;                         // 0x0338   (0x0028)  
	FVector                                            SquareBackgroundPlaneLocationOffset;                        // 0x0360   (0x000C)  
	FVector                                            LandscapeBackgroundPlaneLocationOffset;                     // 0x036C   (0x000C)  
	FVector                                            Light1LocationOffset;                                       // 0x0378   (0x000C)  
	FVector                                            Light2LocationOffset;                                       // 0x0384   (0x000C)  
	float                                              ClothesHelmetZOffset;                                       // 0x0390   (0x0004)  
	float                                              ClothesJacketZOffset;                                       // 0x0394   (0x0004)  
	bool                                               ZoomingParallax;                                            // 0x0398   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0399   (0x0003)  MISSED
	float                                              IntensityMultiplier;                                        // 0x039C   (0x0004)  
};

/// Class /Script/WTL.WTLItemSystem
/// Size: 0x02A0 (0x000028 - 0x0002C8)
class UWTLItemSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0028   (0x0070)  MISSED
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_WeaponLocalizationCache;                                  // 0x0098   (0x0050)  
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_AmmoLocalizationCache;                                    // 0x00E8   (0x0050)  
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_MedicineLocalizationCache;                                // 0x0138   (0x0050)  
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_StuffLocalizationCache;                                   // 0x0188   (0x0050)  
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_ClothesLocalizationCache;                                 // 0x01D8   (0x0050)  
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_ResourceLocalizationCache;                                // 0x0228   (0x0050)  
	TMap<uint16_t, FWTLLocalizationCacheRecord>        m_ArtefactLocalizationCache;                                // 0x0278   (0x0050)  
};

/// Class /Script/WTL.WTLJunkMachineBase
/// Size: 0x0388 (0x000260 - 0x0005E8)
class AWTLJunkMachineBase : public AWTLInteractiveObject
{ 
public:
	char                                               NeedEmptySlotsInInventoryToGetCards;                        // 0x0260   (0x0001)  
	char                                               NeedEmptySlotsInInventoryToGetItems;                        // 0x0261   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0262   (0x0006)  MISSED
	uint64_t                                           PriceForOneCard;                                            // 0x0268   (0x0008)  
	EWTLItemType                                       CardItemType;                                               // 0x0270   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0271   (0x0007)  MISSED
	TArray<uint16_t>                                   CardItemTypeIDsToExchange;                                  // 0x0278   (0x0010)  
	uint16_t                                           RewardCardItemTypeID;                                       // 0x0288   (0x0002)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x028A   (0x0006)  MISSED
	TArray<uint32_t>                                   GetCardsDays;                                               // 0x0290   (0x0010)  
	bool                                               UseAdditionalChance;                                        // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02A1   (0x0003)  MISSED
	int32_t                                            TimeToStartUseChanceMultiplier;                             // 0x02A4   (0x0004)  
	int32_t                                            TimeToStopUseChanceMultiplier;                              // 0x02A8   (0x0004)  
	char                                               MaxNumberOfUsesInJunkMode;                                  // 0x02AC   (0x0001)  
	char                                               MaxNumberOfUsesInCardsMode;                                 // 0x02AD   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x02AE   (0x0002)  MISSED
	TArray<FWTLJunkMachineBundleData>                  BundlesList;                                                // 0x02B0   (0x0010)  
	TArray<FWTLJunkMachineBundleData>                  ComfortingRewardList;                                       // 0x02C0   (0x0010)  
	float                                              WeaponItemPriceMultiplier;                                  // 0x02D0   (0x0004)  
	float                                              AmmoItemPriceMultiplier;                                    // 0x02D4   (0x0004)  
	float                                              MedicineItemPriceMultiplier;                                // 0x02D8   (0x0004)  
	float                                              StuffItemPriceMultiplier;                                   // 0x02DC   (0x0004)  
	float                                              ClothesItemPriceMultiplier;                                 // 0x02E0   (0x0004)  
	float                                              ResourceItemPriceMultiplier;                                // 0x02E4   (0x0004)  
	float                                              ArtefactItemPriceMultiplier;                                // 0x02E8   (0x0004)  
	bool                                               CanBuyStrangeArtefactItems;                                 // 0x02EC   (0x0001)  
	bool                                               CanBuyWeaponItems;                                          // 0x02ED   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x02EE   (0x0002)  MISSED
	TArray<int32_t>                                    BuyOnlyWeaponItems;                                         // 0x02F0   (0x0010)  
	TArray<int32_t>                                    BuyExceptWeaponItems;                                       // 0x0300   (0x0010)  
	bool                                               CanBuyAmmoItems;                                            // 0x0310   (0x0001)  
	unsigned char                                      UnknownData06_5[0x7];                                       // 0x0311   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyAmmoItems;                                           // 0x0318   (0x0010)  
	TArray<int32_t>                                    BuyExceptAmmoItems;                                         // 0x0328   (0x0010)  
	bool                                               CanBuyMedicineItems;                                        // 0x0338   (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x0339   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyMedicineItems;                                       // 0x0340   (0x0010)  
	TArray<int32_t>                                    BuyExceptMedicineItems;                                     // 0x0350   (0x0010)  
	bool                                               CanBuyStuffItems;                                           // 0x0360   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0361   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyStuffItems;                                          // 0x0368   (0x0010)  
	TArray<int32_t>                                    BuyExceptStuffItems;                                        // 0x0378   (0x0010)  
	bool                                               CanBuyClothesItems;                                         // 0x0388   (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0389   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyClothesItems;                                        // 0x0390   (0x0010)  
	TArray<int32_t>                                    BuyExceptClothesItems;                                      // 0x03A0   (0x0010)  
	bool                                               CanBuyResourceItems;                                        // 0x03B0   (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x03B1   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyResourceItems;                                       // 0x03B8   (0x0010)  
	TArray<int32_t>                                    BuyExceptResourceItems;                                     // 0x03C8   (0x0010)  
	bool                                               CanBuyArtefactItems;                                        // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x03D9   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyArtefactItems;                                       // 0x03E0   (0x0010)  
	TArray<int32_t>                                    BuyExceptArtefactItems;                                     // 0x03F0   (0x0010)  
	unsigned char                                      UnknownData12_5[0xA8];                                      // 0x0400   (0x00A8)  MISSED
	TArray<uint64_t>                                   m_CharactersBlackListInJunkMode;                            // 0x04A8   (0x0010)  
	TArray<uint64_t>                                   m_CharactersBlackListInCardsMode;                           // 0x04B8   (0x0010)  
	unsigned char                                      UnknownData13_5[0x28];                                      // 0x04C8   (0x0028)  MISSED
	bool                                               m_CanAcceptCards;                                           // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData14_5[0x17];                                      // 0x04F1   (0x0017)  MISSED
	FWTLSellItems                                      SellItems;                                                  // 0x0508   (0x0070)  
	FWTLSellItems                                      CommissionSellItemsPage;                                    // 0x0578   (0x0070)  


	/// Functions
	// Function /Script/WTL.WTLJunkMachineBase.OnRep_BlackListInJunkMode
	void OnRep_BlackListInJunkMode();                                                                                        // [0x183f1f0] Final|Native|Private 
	// Function /Script/WTL.WTLJunkMachineBase.OnRep_BlackListInCardsMode
	void OnRep_BlackListInCardsMode();                                                                                       // [0x183f1f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLKeyNameHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLKeyNameHelper : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLLadder
/// Size: 0x0050 (0x000228 - 0x000278)
class AWTLLadder : public ATriggerBox
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0228   (0x0008)  MISSED
	float                                              SnappingDistance;                                           // 0x0230   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0234   (0x0004)  MISSED
	TArray<AStaticMeshActor*>                          LadderMeshes;                                               // 0x0238   (0x0010)  
	FText                                              InteractiveObjectName;                                      // 0x0248   (0x0018)  
	UArrowComponent*                                   DownStartPoint;                                             // 0x0260   (0x0008)  
	UArrowComponent*                                   UpEndPoint;                                                 // 0x0268   (0x0008)  
	UArrowComponent*                                   TrajectoryPoint;                                            // 0x0270   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLLadder.Server_Use
	void Server_Use(AWTLCharacter* Character);                                                                               // [0x18400c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
};

/// Class /Script/WTL.WTLLevelPickupSpawnPoint
/// Size: 0x0028 (0x000220 - 0x000248)
class AWTLLevelPickupSpawnPoint : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0220   (0x0020)  MISSED
	int32_t                                            MinQuality;                                                 // 0x0240   (0x0004)  
	int32_t                                            MaxQuality;                                                 // 0x0244   (0x0004)  
};

/// Class /Script/WTL.WTLLevelStreamingVolume
/// Size: 0x0028 (0x000258 - 0x000280)
class AWTLLevelStreamingVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0258   (0x0010)  MISSED
	TArray<FName>                                      StreamingLevelNames;                                        // 0x0268   (0x0010)  
	float                                              UnloadLevelTimeout;                                         // 0x0278   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x027C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLLevelStreamingVolume.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1841030] Final|Native|Private 
	// Function /Script/WTL.WTLLevelStreamingVolume.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18412a0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLLightChangeVolume
/// Size: 0x0010 (0x000258 - 0x000268)
class AWTLLightChangeVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0258   (0x0008)  MISSED
	float                                              SkyLightIntencity;                                          // 0x0260   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0264   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLLightChangeVolume.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1841710] Final|Native|Private 
	// Function /Script/WTL.WTLLightChangeVolume.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1841980] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLLightingGrenadeProjectile
/// Size: 0x0060 (0x000290 - 0x0002F0)
class AWTLLightingGrenadeProjectile : public AWTLThrowingDeviceProjectile
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0290   (0x0028)  MISSED
	float                                              Radius;                                                     // 0x02B8   (0x0004)  
	char                                               MinHits;                                                    // 0x02BC   (0x0001)  
	char                                               MaxHits;                                                    // 0x02BD   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x02BE   (0x0002)  MISSED
	float                                              MinTimeBetweenHits;                                         // 0x02C0   (0x0004)  
	float                                              MaxTimeBetweenHits;                                         // 0x02C4   (0x0004)  
	TWeakObjectPtr<UClass*>                            FX;                                                         // 0x02C8   (0x0028)  
};

/// Class /Script/WTL.WTLLoadingScreenLocation
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLLoadingScreenLocation : public UUserWidget
{ 
public:
	UTextBlock*                                        tbDevelopmentStage;                                         // 0x0260   (0x0008)  
	UTextBlock*                                        tbVersion;                                                  // 0x0268   (0x0008)  
	UTextBlock*                                        tbLocationName;                                             // 0x0270   (0x0008)  
	UImage*                                            imgLoadingImageBackground;                                  // 0x0278   (0x0008)  
	UImage*                                            imgLoadingImage;                                            // 0x0280   (0x0008)  
	UTextBlock*                                        tbAdvice;                                                   // 0x0288   (0x0008)  
	UTextBlock*                                        tbProcessStatus;                                            // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0298   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLLoadingScreenSimple
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLLoadingScreenSimple : public UUserWidget
{ 
public:
	UTextBlock*                                        tbDevelopmentStage;                                         // 0x0260   (0x0008)  
	UTextBlock*                                        tbVersion;                                                  // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLLoadingScreenTestLevelScriptActor
/// Size: 0x0030 (0x000228 - 0x000258)
class AWTLLoadingScreenTestLevelScriptActor : public ALevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0228   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            LoadingScreenTestMenuClass;                                 // 0x0230   (0x0028)  
};

/// Class /Script/WTL.WTLLoadingScreenTestMenu
/// Size: 0x0018 (0x000260 - 0x000278)
class UWTLLoadingScreenTestMenu : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0260   (0x0008)  MISSED
	UButton*                                           btnMainMenu;                                                // 0x0268   (0x0008)  
	UButton*                                           btnLocation;                                                // 0x0270   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLLoadingScreenTestMenu.MainMenuBtnClick
	void MainMenuBtnClick();                                                                                                 // [0x1842100] Final|Native|Private 
	// Function /Script/WTL.WTLLoadingScreenTestMenu.LocationBtnClick
	void LocationBtnClick();                                                                                                 // [0x1842090] Final|Native|Private 
};

/// Class /Script/WTL.WTLLocalizationHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLLocalizationHelper : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLLocalPlayer
/// Size: 0x0010 (0x000258 - 0x000268)
class UWTLLocalPlayer : public ULocalPlayer
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0258   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLLockpickingActivity
/// Size: 0x00C0 (0x000250 - 0x000310)
class AWTLLockpickingActivity : public AWTLActionGameplayActivity
{ 
public:
	unsigned char                                      UnknownData00_2[0x40];                                      // 0x0250   (0x0040)  MISSED
	FMulticastInlineDelegate                           OnInteractionFinished;                                      // 0x0290   (0x0010)  
	int32_t                                            NumPins;                                                    // 0x02A0   (0x0004)  
	bool                                               IsPremium;                                                  // 0x02A4   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02A5   (0x0003)  MISSED
	int32_t                                            AssistantType;                                              // 0x02A8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02AC   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnResetGame;                                                // 0x02B0   (0x0010)  
	FMulticastInlineDelegate                           OnResetPin;                                                 // 0x02C0   (0x0010)  
	FMulticastInlineDelegate                           OnCloseGame;                                                // 0x02D0   (0x0010)  
	FMulticastInlineDelegate                           OnCompleteGame;                                             // 0x02E0   (0x0010)  
	FMulticastInlineDelegate                           OnBreakLockpick;                                            // 0x02F0   (0x0010)  
	FMulticastInlineDelegate                           OnCheckPinResult;                                           // 0x0300   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLLockpickingActivity.Server_CheckPin
	void Server_CheckPin(int32_t pin_id);                                                                                    // [0x1843670] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/WTL.WTLLockpickingActivity.ResetPin
	void ResetPin(int32_t pin_id);                                                                                           // [0x18434b0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLLockpickingActivity.ResetGame
	void ResetGame(bool IsBreakLockpick);                                                                                    // [0x1843590] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLLockpickingActivity.OnResetPin__DelegateSignature
	void OnResetPin__DelegateSignature(int32_t PinID);                                                                       // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.OnResetGame__DelegateSignature
	void OnResetGame__DelegateSignature(bool IsBreakLockpick);                                                               // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.OnInteractionFinished__DelegateSignature
	void OnInteractionFinished__DelegateSignature(AWTLLockpickingActivity* ActionGameplayActor);                             // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.OnCompleteGame__DelegateSignature
	void OnCompleteGame__DelegateSignature(AWTLCharacter* Character);                                                        // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.OnCloseGame__DelegateSignature
	void OnCloseGame__DelegateSignature();                                                                                   // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.OnCheckPinResult__DelegateSignature
	void OnCheckPinResult__DelegateSignature(int32_t Num, int32_t PinID, bool IsValid);                                      // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.OnBreakLockpick__DelegateSignature
	void OnBreakLockpick__DelegateSignature();                                                                               // [0x1ad0090] MulticastDelegate|Public|Delegate 
	// Function /Script/WTL.WTLLockpickingActivity.Init
	void Init(int32_t num_pins, int32_t Seed);                                                                               // [0x1843780] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.CompleteGame
	void CompleteGame(AWTLCharacter* Character);                                                                             // [0x18433d0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLLockpickingActivity.CloseGame
	void CloseGame();                                                                                                        // [0xba4a50] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLLockpickingActivity.Client_ResetPin
	void Client_ResetPin(int32_t pin_id);                                                                                    // [0x1843120] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.Client_ResetGame
	void Client_ResetGame(bool IsBreakLockpick);                                                                             // [0xf43dd0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.Client_CompleteGame
	void Client_CompleteGame(AWTLCharacter* Character);                                                                      // [0x1843040] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.Client_CloseGame
	void Client_CloseGame();                                                                                                 // [0x17ed060] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.Client_CheckPinResult
	void Client_CheckPinResult(int32_t Num, int32_t PinID, bool IsValid);                                                    // [0x1842e60] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.Client_BreakLockpick
	void Client_BreakLockpick();                                                                                             // [0x10fb3b0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/WTL.WTLLockpickingActivity.CanUseAssistant
	bool CanUseAssistant();                                                                                                  // [0x1843200] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/WTL.WTLLootCollectorDrone
/// Size: 0x0010 (0x0004D8 - 0x0004E8)
class AWTLLootCollectorDrone : public AWTLDrone
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x04D8   (0x0004)  MISSED
	float                                              SearchRadius;                                               // 0x04DC   (0x0004)  
	float                                              SearchInterval;                                             // 0x04E0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x04E4   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLMailBox
/// Size: 0x0050 (0x000220 - 0x000270)
class AWTLMailBox : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0220   (0x0020)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0240   (0x0008)  
	int32_t                                            ID;                                                         // 0x0248   (0x0004)  
	int32_t                                            MaxPackageWeight;                                           // 0x024C   (0x0004)  
	bool                                               m_IsActive;                                                 // 0x0250   (0x0001)  
	unsigned char                                      UnknownData01_5[0x17];                                      // 0x0251   (0x0017)  MISSED
	float                                              NormalDeliveryPricePercent;                                 // 0x0268   (0x0004)  
	float                                              FastDeliveryPricePercent;                                   // 0x026C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLMailBox.SetIsActive
	void SetIsActive(bool Value);                                                                                            // [0x1773b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMailBox.OnRep_IsActive
	void OnRep_IsActive();                                                                                                   // [0x1844a50] Final|Native|Private 
	// Function /Script/WTL.WTLMailBox.OnIsActiveChanged
	void OnIsActiveChanged(bool IsActive);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMailBox.GetIsActive
	bool GetIsActive();                                                                                                      // [0x1844a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLMailSystem
/// Size: 0x0028 (0x000028 - 0x000050)
class UWTLMailSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Class /Script/WTL.WTLMainMenuActionWaiting
/// Size: 0x0048 (0x000280 - 0x0002C8)
class UWTLMainMenuActionWaiting : public UWTLCommonActionWaiting
{ 
public:
	UCanvasPanel*                                      cpBtnCancel;                                                // 0x0280   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCancel;                                                // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x0290   (0x0030)  MISSED
	bool                                               bIsShowCancelBtn;                                           // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02C1   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuActionWaiting.OnCancelBtnClicked
	void OnCancelBtnClicked();                                                                                               // [0x1844e10] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuAnnouncer
/// Size: 0x0070 (0x000260 - 0x0002D0)
class UWTLMainMenuAnnouncer : public UUserWidget
{ 
public:
	UBorder*                                           bAnnouncer;                                                 // 0x0260   (0x0008)  
	UTextBlock*                                        tbAnnouncerText;                                            // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x0270   (0x0030)  MISSED
	UWidgetAnimation*                                  NewAnnouncementAnimation;                                   // 0x02A0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        NewAnnouncementSoundEvent;                                  // 0x02A8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuAnnouncer.AnnouncerHttpCall
	void AnnouncerHttpCall();                                                                                                // [0x1844f40] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuBase
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLMainMenuBase : public UWTLWidgetBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0260   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLMainMenuBodyPartTypeButton
/// Size: 0x0020 (0x0005B8 - 0x0005D8)
class UWTLMainMenuBodyPartTypeButton : public UWTLCommonTypeButton
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x05B8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLMainMenuCharacter
/// Size: 0x00E0 (0x0004C0 - 0x0005A0)
class AWTLMainMenuCharacter : public ACharacter
{ 
public:
	USkeletalMeshComponent*                            MeshHead;                                                   // 0x04B8   (0x0008)  
	USkeletalMeshComponent*                            MeshTorso;                                                  // 0x04C0   (0x0008)  
	USkeletalMeshComponent*                            MeshLegs;                                                   // 0x04C8   (0x0008)  
	USkeletalMeshComponent*                            MeshFeet;                                                   // 0x04D0   (0x0008)  
	USkeletalMeshComponent*                            BackpackSlot;                                               // 0x04D8   (0x0008)  
	USkeletalMeshComponent*                            GlassesSlot;                                                // 0x04E0   (0x0008)  
	USkeletalMeshComponent*                            WatchesSlot;                                                // 0x04E8   (0x0008)  
	char                                               Complexion;                                                 // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x04F1   (0x0007)  MISSED
	TWeakObjectPtr<USkeletalMesh*>                     MaleRootSkeletalMesh;                                       // 0x04F8   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleRootSkeletalMesh;                                     // 0x0520   (0x0028)  
	TWeakObjectPtr<UClass*>                            MaleAnimBlueprint;                                          // 0x0548   (0x0028)  
	TWeakObjectPtr<UClass*>                            FemaleAnimBlueprint;                                        // 0x0570   (0x0028)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0598   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLMainMenuCharacterCreate
/// Size: 0x0088 (0x000268 - 0x0002F0)
class UWTLMainMenuCharacterCreate : public UWTLMainMenuBase
{ 
public:
	UWTLCommonCharacterRotator*                        ucCharacterRotator;                                         // 0x0268   (0x0008)  
	UWTLMainMenuCustomization*                         ucCustomization;                                            // 0x0270   (0x0008)  
	UPanelWidget*                                      pwPlayerClass;                                              // 0x0278   (0x0008)  
	UBorder*                                           bClassDescription;                                          // 0x0280   (0x0008)  
	UTextBlock*                                        tbClassName;                                                // 0x0288   (0x0008)  
	UImage*                                            imgClassFullSize;                                           // 0x0290   (0x0008)  
	UTextBlock*                                        tbClassDescription;                                         // 0x0298   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnBack;                                                  // 0x02A0   (0x0008)  
	UWTLMainMenuCharacterName*                         ucCharacterName;                                            // 0x02A8   (0x0008)  
	UUserWidget*                                       ucCharacterNameWarning;                                     // 0x02B0   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnCreateCharacter;                                       // 0x02B8   (0x0008)  
	UThrobber*                                         thCharacterCreateLoader;                                    // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x02C8   (0x0028)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnYesBackBtnClick
	void OnYesBackBtnClick();                                                                                                // [0x1845630] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCustomizationPurchasedItemsOnCreateOrApply
	void OnCustomizationPurchasedItemsOnCreateOrApply();                                                                     // [0x1845610] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCustomizationDataChanged
	void OnCustomizationDataChanged();                                                                                       // [0x18456c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCreateCharacterBtnClick
	void OnCreateCharacterBtnClick();                                                                                        // [0x1845610] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCharacterRotatorMouseButtonDown
	void OnCharacterRotatorMouseButtonDown();                                                                                // [0x18456f0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCharacterNameCommitted
	void OnCharacterNameCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                       // [0x1845420] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCharacterNameCheckResponseReceived
	void OnCharacterNameCheckResponseReceived(bool Success);                                                                 // [0x18451e0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnCharacterNameChanged
	void OnCharacterNameChanged(FText& Text);                                                                                // [0x18452d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterCreate.OnBackBtnClick
	void OnBackBtnClick();                                                                                                   // [0x18456a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuCharacterListItem
/// Size: 0x0D48 (0x0004A0 - 0x0011E8)
class UWTLMainMenuCharacterListItem : public UWTLCommonSelectedItem
{ 
public:
	UBorder*                                           bPlayerNotSet;                                              // 0x04A0   (0x0008)  
	UBorder*                                           bSlotNotBuy;                                                // 0x04A8   (0x0008)  
	UBorder*                                           bPlayerParameters;                                          // 0x04B0   (0x0008)  
	UImage*                                            imgCharacterCreate;                                         // 0x04B8   (0x0008)  
	UImage*                                            imgCharacterClass;                                          // 0x04C0   (0x0008)  
	UVerticalBox*                                      vbState;                                                    // 0x04C8   (0x0008)  
	UTextBlock*                                        tbState;                                                    // 0x04D0   (0x0008)  
	UTextBlock*                                        tbStateDescription;                                         // 0x04D8   (0x0008)  
	UTextBlock*                                        tbPlayerName;                                               // 0x04E0   (0x0008)  
	UTextBlock*                                        tbPlayerClass;                                              // 0x04E8   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x04F0   (0x0008)  
	UTextBlock*                                        tbSex;                                                      // 0x04F8   (0x0008)  
	UTextBlock*                                        tbBalance;                                                  // 0x0500   (0x0008)  
	UHorizontalBox*                                    hbLocationName;                                             // 0x0508   (0x0008)  
	UTextBlock*                                        tbLocationName;                                             // 0x0510   (0x0008)  
	UTextBlock*                                        tbCreationDate;                                             // 0x0518   (0x0008)  
	UTextBlock*                                        tbStrength;                                                 // 0x0520   (0x0008)  
	UTextBlock*                                        tbDexterity;                                                // 0x0528   (0x0008)  
	UTextBlock*                                        tbStamina;                                                  // 0x0530   (0x0008)  
	UTextBlock*                                        tbIntelligence;                                             // 0x0538   (0x0008)  
	UTextBlock*                                        tbAccuracy;                                                 // 0x0540   (0x0008)  
	UTextBlock*                                        tbFortune;                                                  // 0x0548   (0x0008)  
	UTextBlock*                                        tbExperience;                                               // 0x0550   (0x0008)  
	UTextBlock*                                        tbFraction;                                                 // 0x0558   (0x0008)  
	UWidgetSwitcher*                                   wsFractionImage;                                            // 0x0560   (0x0008)  
	UTextBlock*                                        tbReputation;                                               // 0x0568   (0x0008)  
	UProgressBar*                                      pbStrength;                                                 // 0x0570   (0x0008)  
	UProgressBar*                                      pbDexterity;                                                // 0x0578   (0x0008)  
	UProgressBar*                                      pbStamina;                                                  // 0x0580   (0x0008)  
	UProgressBar*                                      pbIntelligence;                                             // 0x0588   (0x0008)  
	UProgressBar*                                      pbAccuracy;                                                 // 0x0590   (0x0008)  
	UProgressBar*                                      pbFortune;                                                  // 0x0598   (0x0008)  
	UProgressBar*                                      pbExperience;                                               // 0x05A0   (0x0008)  
	UProgressBar*                                      pbReputation;                                               // 0x05A8   (0x0008)  
	UButton*                                           btnDelete;                                                  // 0x05B0   (0x0008)  
	UButton*                                           btnCancelDelete;                                            // 0x05B8   (0x0008)  
	UButton*                                           btnEdit;                                                    // 0x05C0   (0x0008)  
	UButton*                                           btnExchangeCredits;                                         // 0x05C8   (0x0008)  
	UTextBlock*                                        tbBuySlotPrice;                                             // 0x05D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnBuySlot;                                               // 0x05D8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x05E0   (0x0028)  MISSED
	FSlateBrush                                        NoneClassBrush;                                             // 0x0608   (0x0088)  
	FSlateBrush                                        FemaleMinerClassBrush;                                      // 0x0690   (0x0088)  
	FSlateBrush                                        FemaleHunterClassBrush;                                     // 0x0718   (0x0088)  
	FSlateBrush                                        FemaleMercenaryClassBrush;                                  // 0x07A0   (0x0088)  
	FSlateBrush                                        FemaleEngineerClassBrush;                                   // 0x0828   (0x0088)  
	FSlateBrush                                        MaleMinerClassBrush;                                        // 0x08B0   (0x0088)  
	FSlateBrush                                        MaleHunterClassBrush;                                       // 0x0938   (0x0088)  
	FSlateBrush                                        MaleMercenaryClassBrush;                                    // 0x09C0   (0x0088)  
	FSlateBrush                                        MaleEngineerClassBrush;                                     // 0x0A48   (0x0088)  
	FSlateBrush                                        NormalBrush;                                                // 0x0AD0   (0x0088)  
	FVector2D                                          BtnScaleVector;                                             // 0x0B58   (0x0008)  
	FVector2D                                          BorderScaleVector;                                          // 0x0B60   (0x0008)  
	FLinearColor                                       GreenColorStateText;                                        // 0x0B68   (0x0010)  
	FLinearColor                                       RedColorParam;                                              // 0x0B78   (0x0010)  
	FLinearColor                                       YellowColorParam;                                           // 0x0B88   (0x0010)  
	FLinearColor                                       GreenColorParam;                                            // 0x0B98   (0x0010)  
	TWeakObjectPtr<UFMODEvent*>                        PressedButtonSoundEvent;                                    // 0x0BA8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        HoveredButtonSoundEvent;                                    // 0x0BD0   (0x0028)  
	UWidgetAnimation*                                  EditBtnAttentionAnimation;                                  // 0x0BF8   (0x0008)  
	FVector2D                                          EditBtnForAnimationPivot;                                   // 0x0C00   (0x0008)  
	FButtonStyle                                       EditBtnDefaultStyle;                                        // 0x0C08   (0x0278)  
	FButtonStyle                                       EditBtnForAnimationStyle;                                   // 0x0E80   (0x0278)  
	unsigned char                                      UnknownData01_6[0xF0];                                      // 0x10F8   (0x00F0)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnPlayerNotSetBorderClick
	void OnPlayerNotSetBorderClick();                                                                                        // [0x1845c50] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnExchangeCreditsBtnUnhovered
	void OnExchangeCreditsBtnUnhovered();                                                                                    // [0x1845970] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnExchangeCreditsBtnHovered
	void OnExchangeCreditsBtnHovered();                                                                                      // [0x18459b0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnExchangeCreditsBtnClick
	void OnExchangeCreditsBtnClick();                                                                                        // [0x1845b90] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnEditBtnUnhovered
	void OnEditBtnUnhovered();                                                                                               // [0x18459f0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnEditBtnHovered
	void OnEditBtnHovered();                                                                                                 // [0x1845a30] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnEditBtnClick
	void OnEditBtnClick();                                                                                                   // [0x1845bc0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnDeleteBtnUnhovered
	void OnDeleteBtnUnhovered();                                                                                             // [0x1845af0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnDeleteBtnHovered
	void OnDeleteBtnHovered();                                                                                               // [0x1845b30] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnDeleteBtnClick
	void OnDeleteBtnClick();                                                                                                 // [0x1845c20] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnCancelDeleteBtnUnhovered
	void OnCancelDeleteBtnUnhovered();                                                                                       // [0x1845a70] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnCancelDeleteBtnHovered
	void OnCancelDeleteBtnHovered();                                                                                         // [0x1845ab0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnCancelDeleteBtnClick
	void OnCancelDeleteBtnClick();                                                                                           // [0x1845bf0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnBuySlotBtnClicked
	void OnBuySlotBtnClicked();                                                                                              // [0x1845940] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnButtonPressed
	void OnButtonPressed();                                                                                                  // [0x1845b70] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterListItem.OnBackgroundBorderDoubleClick
	void OnBackgroundBorderDoubleClick(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                     // [0x1845ca0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMainMenuCharacterName
/// Size: 0x00E8 (0x000260 - 0x000348)
class UWTLMainMenuCharacterName : public UUserWidget
{ 
public:
	UWTLMainMenuTextBox*                               ucTbCharacterName;                                          // 0x0260   (0x0008)  
	UWidgetSwitcher*                                   wsCharacterNameValidation;                                  // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x78];                                      // 0x0270   (0x0078)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        NotValidSoundEvent;                                         // 0x02E8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ValidSoundEvent;                                            // 0x0310   (0x0028)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0338   (0x0010)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuCharacterName.OnTextBoxTextCommitted
	void OnTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                         // [0x18468d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterName.OnTextBoxTextChanged
	void OnTextBoxTextChanged(FText& Text);                                                                                  // [0x18467a0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterName.OnSendCheckCharacterNameRequest
	void OnSendCheckCharacterNameRequest();                                                                                  // [0x1846780] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterName.OnCheckCharacterNameAvailableResponse
	void OnCheckCharacterNameAvailableResponse(FWTLResponse& Response);                                                      // [0x1846680] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMainMenuCharacterSelect
/// Size: 0x0188 (0x000268 - 0x0003F0)
class UWTLMainMenuCharacterSelect : public UWTLMainMenuBase
{ 
public:
	UTextBlock*                                        tbServerName;                                               // 0x0268   (0x0008)  
	UTextBlock*                                        tbCharactersCount;                                          // 0x0270   (0x0008)  
	UTextBlock*                                        tbCharactersMaxCount;                                       // 0x0278   (0x0008)  
	UScrollBox*                                        sbCharactersList;                                           // 0x0280   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnBack;                                                  // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnPlay;                                                  // 0x0290   (0x0008)  
	UThrobber*                                         thCharactersListLoader;                                     // 0x0298   (0x0008)  
	UThrobber*                                         thEnterGameLoader;                                          // 0x02A0   (0x0008)  
	UCanvasPanel*                                      cpCreditsExchangeWindow;                                    // 0x02A8   (0x0008)  
	UTextBlock*                                        tbCharacterNameToExchangeCredits;                           // 0x02B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCreditsToExchange;                                       // 0x02B8   (0x0008)  
	UTextBlock*                                        tbCreditsToMoneyRate;                                       // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbExchangedMoney;                                           // 0x02C8   (0x0008)  
	UTextBlock*                                        tbExchangedMoney;                                           // 0x02D0   (0x0008)  
	UWTLCommonMessageDialogButton*                     ucExchangeCreditsBtn;                                       // 0x02D8   (0x0008)  
	UWTLCommonMessageDialogButton*                     ucExchangeCreditsCancelBtn;                                 // 0x02E0   (0x0008)  
	UWTLCommonStoreButton*                             ucStoreButton;                                              // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData00_5[0xB0];                                      // 0x02F0   (0x00B0)  MISSED
	TWeakObjectPtr<UClass*>                            MainMenuCharacterListItemClass;                             // 0x03A0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        BuyCharacterSlotSoundEvent;                                 // 0x03C8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnYesDeleteBtnClick
	void OnYesDeleteBtnClick();                                                                                              // [0x1847540] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnYesCancelDeleteBtnClick
	void OnYesCancelDeleteBtnClick();                                                                                        // [0x1847420] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnTopUpCredits
	void OnTopUpCredits();                                                                                                   // [0x1847800] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnStoreItemsUpdated
	void OnStoreItemsUpdated(TArray<FWTLStoreItem>& StoreItems);                                                             // [0x1846d90] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnStoreBtnClick
	void OnStoreBtnClick();                                                                                                  // [0x1847560] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnPlayBtnClick
	void OnPlayBtnClick();                                                                                                   // [0x18475a0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnExchangeCreditsErrorHide
	void OnExchangeCreditsErrorHide();                                                                                       // [0x1846fc0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnExchangeCreditsCancelBtnClicked
	void OnExchangeCreditsCancelBtnClicked();                                                                                // [0x1846ff0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnExchangeCreditsBtnClicked
	void OnExchangeCreditsBtnClicked();                                                                                      // [0x1847030] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnDeleteCharacterCountdown
	void OnDeleteCharacterCountdown();                                                                                       // [0x1847840] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnCreditsToExchangeTextBoxCommitted
	void OnCreditsToExchangeTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                            // [0x1847050] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnCreditsToExchangeTextBoxChanged
	void OnCreditsToExchangeTextBoxChanged(FText& Text);                                                                     // [0x1847280] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnConfirmationWindowHide
	void OnConfirmationWindowHide();                                                                                         // [0x18473f0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnCancelWaitingSetActiveCharacterResponse
	void OnCancelWaitingSetActiveCharacterResponse();                                                                        // [0x18473a0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnBuyCharacterSlotResult
	void OnBuyCharacterSlotResult(bool Success);                                                                             // [0x18475e0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnBuyCharacterSlotConfirmed
	void OnBuyCharacterSlotConfirmed();                                                                                      // [0x18476c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnBackBtnClick
	void OnBackBtnClick();                                                                                                   // [0x18475c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCharacterSelect.OnAccountInventoryItemsUpdated
	void OnAccountInventoryItemsUpdated(TArray<FWTLAccountInventoryItem>& AccountInventoryItems);                            // [0x1846bd0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMainMenuCharacterSelectToActionItem
/// Size: 0x0038 (0x000400 - 0x000438)
class UWTLMainMenuCharacterSelectToActionItem : public UWTLCommonHoveredItem
{ 
public:
	UBorder*                                           bHovered;                                                   // 0x0400   (0x0008)  
	UTextBlock*                                        tbCharacterName;                                            // 0x0408   (0x0008)  
	UTextBlock*                                        tbCharacterClass;                                           // 0x0410   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0418   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLMainMenuCharacterSelectToActionWindow
/// Size: 0x0260 (0x000288 - 0x0004E8)
class UWTLMainMenuCharacterSelectToActionWindow : public UWTLCommonWindowBase
{ 
public:
	UVerticalBox*                                      vbCharacters;                                               // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x120];                                     // 0x0290   (0x0120)  MISSED
	TWeakObjectPtr<UClass*>                            CharacterSelectToActionItemWidgetClass;                     // 0x03B0   (0x0028)  
	FSlateBrush                                        TopItemBorderBrush;                                         // 0x03D8   (0x0088)  
	FSlateBrush                                        BottomItemBorderBrush;                                      // 0x0460   (0x0088)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuCharacterSelectToActionWindow.OnCharacterSelected
	void OnCharacterSelected(uint64_t CharacterID);                                                                          // [0x1848190] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuChooseAccountType
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLMainMenuChooseAccountType : public UUserWidget
{ 
public:
	UButton*                                           btnClose;                                                   // 0x0260   (0x0008)  
	UButton*                                           btnCreateNew;                                               // 0x0268   (0x0008)  
	UButton*                                           btnLinkExisting;                                            // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0278   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuChooseAccountType.OnLinkExistingBtnClicked
	void OnLinkExistingBtnClicked();                                                                                         // [0x1848390] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuChooseAccountType.OnCreateNewBtnClicked
	void OnCreateNewBtnClicked();                                                                                            // [0x18483d0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuChooseAccountType.OnCreateNewAccountConfirmed
	void OnCreateNewAccountConfirmed();                                                                                      // [0x18483b0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuChooseAccountType.OnConnectedToServer
	void OnConnectedToServer();                                                                                              // [0x1848370] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuChooseAccountType.OnCloseBtnClicked
	void OnCloseBtnClicked();                                                                                                // [0x18483f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuChooseLanguage
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLMainMenuChooseLanguage : public UUserWidget
{ 
public:
	UImage*                                            imgLanguage;                                                // 0x0260   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psLanguage;                                                 // 0x0268   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnOK;                                                    // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x0278   (0x0030)  MISSED
	TArray<FWTLLanguageInfo>                           LanguageInfo;                                               // 0x02A8   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuChooseLanguage.OnOKBtnClicked
	void OnOKBtnClicked();                                                                                                   // [0x1848d40] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuChooseLanguage.OnLanguageChange
	void OnLanguageChange(int32_t CurrentIndex, FString Prefix);                                                             // [0x1848bc0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuChooseLanguage.ChooseLanguageConfirm
	void ChooseLanguageConfirm();                                                                                            // [0x1848d60] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuCredits
/// Size: 0x00E0 (0x000260 - 0x000340)
class UWTLMainMenuCredits : public UUserWidget
{ 
public:
	UScrollBox*                                        sbCredits;                                                  // 0x0260   (0x0008)  
	URichTextBlock*                                    rtbCredits;                                                 // 0x0268   (0x0008)  
	UWidgetSwitcher*                                   wsCreditsPlayerButtons;                                     // 0x0270   (0x0008)  
	UButton*                                           btnCreditsPlay;                                             // 0x0278   (0x0008)  
	UButton*                                           btnCreditsPause;                                            // 0x0280   (0x0008)  
	UWTLCommonButton*                                  ucBtnCreditsClose;                                          // 0x0288   (0x0008)  
	UTextBlock*                                        tbTime;                                                     // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x0298   (0x0040)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        CreditsSoundtrackSoundEvent;                                // 0x02D8   (0x0028)  
	float                                              CreditsSoundtrackDuration;                                  // 0x0300   (0x0004)  
	float                                              CreditsSpeed;                                               // 0x0304   (0x0004)  
	bool                                               bDebugIsShowTime;                                           // 0x0308   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0309   (0x0007)  MISSED
	FText                                              RussianCreditsLocalization;                                 // 0x0310   (0x0018)  
	FText                                              DeutschCreditsLocalization;                                 // 0x0328   (0x0018)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuCredits.OnCreditsScrolled
	void OnCreditsScrolled(float CurrentOffset);                                                                             // [0x1848ee0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCredits.OnCreditsPlay
	void OnCreditsPlay();                                                                                                    // [0x1848ec0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCredits.OnCreditsPause
	void OnCreditsPause();                                                                                                   // [0x1848ea0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCredits.OnCreditsClose
	void OnCreditsClose();                                                                                                   // [0x1848e80] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuCreditsAmountWithTopUp
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLMainMenuCreditsAmountWithTopUp : public UUserWidget
{ 
public:
	UWTLCommonCreditsAmountWithTopUp*                  ucCreditsAmountWithTopUp;                                   // 0x0260   (0x0008)  
	UWTLCommonPremiumButton*                           ucPremiumButton;                                            // 0x0268   (0x0008)  
	UWTLCommonButton*                                  ucCodeButton;                                               // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0278   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuCreditsAmountWithTopUp.OnCodeActivateButtonPressed
	void OnCodeActivateButtonPressed();                                                                                      // [0x18491f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuCustomization
/// Size: 0x1630 (0x000260 - 0x001890)
class UWTLMainMenuCustomization : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0260   (0x0038)  MISSED
	UWTLCommonButton*                                  ucBtnZoomOut;                                               // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbSex;                                                      // 0x02A0   (0x0008)  
	UWTLOptionsParameterSwitcher*                      ucBodyTypeSwitcher;                                         // 0x02A8   (0x0008)  
	UWTLCommonColorButton*                             ucHairColorBtn;                                             // 0x02B0   (0x0008)  
	UWTLCommonColorButton*                             ucSkinColorBtn;                                             // 0x02B8   (0x0008)  
	UPanelWidget*                                      pwBodyPartsTypes;                                           // 0x02C0   (0x0008)  
	UWidgetSwitcher*                                   wsBodyPartParameters;                                       // 0x02C8   (0x0008)  
	UVerticalBox*                                      vbItems;                                                    // 0x02D0   (0x0008)  
	UScrollBox*                                        sbItems;                                                    // 0x02D8   (0x0008)  
	UWTLCommonButton*                                  ucPreviousItemsBtn;                                         // 0x02E0   (0x0008)  
	UWTLCommonButton*                                  ucNextItemsBtn;                                             // 0x02E8   (0x0008)  
	UHorizontalBox*                                    hbHairColor;                                                // 0x02F0   (0x0008)  
	UHorizontalBox*                                    hbMaterialsTabBox;                                          // 0x02F8   (0x0008)  
	UVerticalBox*                                      vbMaterialColorsScalars;                                    // 0x0300   (0x0008)  
	UWTLCommonColorPresets*                            ucColorPresets;                                             // 0x0308   (0x0008)  
	UHorizontalBox*                                    hbGlassesOpacity;                                           // 0x0310   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psGlassesOpacity;                                           // 0x0318   (0x0008)  
	UWTLCommonButton*                                  ucBtnRandomize;                                             // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x0328   (0x0028)  MISSED
	UWTLMainMenuBodyPartTypeButton*                    m_BackpackBodyPartTypeButton;                               // 0x0350   (0x0008)  
	unsigned char                                      UnknownData02_5[0xEB0];                                     // 0x0358   (0x0EB0)  MISSED
	UWTLMainMenuMaterialColorScalar*                   m_CurrentMaterialColorScalar;                               // 0x1208   (0x0008)  
	unsigned char                                      UnknownData03_5[0xC0];                                      // 0x1210   (0x00C0)  MISSED
	TWeakObjectPtr<UClass*>                            BodyPartTypeButtonWidgetClass;                              // 0x12D0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemWidgetClass;                                            // 0x12F8   (0x0028)  
	TWeakObjectPtr<UClass*>                            MaterialsTabButtonWidgetClass;                              // 0x1320   (0x0028)  
	TWeakObjectPtr<UClass*>                            MaterialColorScalarWidgetClass;                             // 0x1348   (0x0028)  
	FButtonStyle                                       SexNormalButtonStyle;                                       // 0x1370   (0x0278)  
	FButtonStyle                                       SexSelectedButtonStyle;                                     // 0x15E8   (0x0278)  
	FLinearColor                                       SexNormalSlateColor;                                        // 0x1860   (0x0010)  
	FLinearColor                                       SexSelectedSlateColor;                                      // 0x1870   (0x0010)  
	TArray<FWTLBodyPartButtonStyle>                    BodyPartsButtonStyles;                                      // 0x1880   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuCustomization.OnZoomOutBtnReleased
	void OnZoomOutBtnReleased();                                                                                             // [0x184ae90] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnZoomOutBtnPressed
	void OnZoomOutBtnPressed();                                                                                              // [0x184aeb0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnWantToBuyNotPurchasedItemsConfirmed
	void OnWantToBuyNotPurchasedItemsConfirmed();                                                                            // [0x18497c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnTopUpCredits
	void OnTopUpCredits();                                                                                                   // [0x184a180] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnSkinColorBtnClick
	void OnSkinColorBtnClick(FGeometry& BtnGeometry, FPointerEvent& InMouseEvent);                                           // [0x184a850] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomization.OnRandomizeBtnClicked
	void OnRandomizeBtnClicked();                                                                                            // [0x18497e0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnPurchaseStoreItems
	void OnPurchaseStoreItems(FWTLInAppPurchaseResult& InAppPurchaseResult);                                                 // [0x1849620] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomization.OnPreviousItemsButtonClicked
	void OnPreviousItemsButtonClicked();                                                                                     // [0x184a4e0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnNextItemsButtonClicked
	void OnNextItemsButtonClicked();                                                                                         // [0x184a4c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnMaterialScalarItemValueChanged
	void OnMaterialScalarItemValueChanged(char CurrentScalarValue);                                                          // [0x1849b50] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnMaterialsBtnClicked
	void OnMaterialsBtnClicked(char TabIndex);                                                                               // [0x1849ef0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnMaterialColorButtonClicked
	void OnMaterialColorButtonClicked(UWTLMainMenuMaterialColorScalar* MaterialColorScalar, FGeometry& BtnGeometry, FPointerEvent& InMouseEvent); // [0x1849c40] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomization.OnItemSwitcherValueChanged
	void OnItemSwitcherValueChanged(int32_t CurrentIndex, FString Prefix);                                                   // [0x1849fc0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnItemsScrollBoxScrolled
	void OnItemsScrollBoxScrolled(float CurrentOffset);                                                                      // [0x184a500] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnItemClicked
	void OnItemClicked(int32_t ItemPartID);                                                                                  // [0x184a3c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnItemBuyConfirmed
	void OnItemBuyConfirmed();                                                                                               // [0x184a230] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnItemBuyClicked
	void OnItemBuyClicked(int32_t ItemPartID, UWTLMainMenuCustomizationItem* ItemToBuy);                                     // [0x184a260] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnHairColorBtnClick
	void OnHairColorBtnClick(FGeometry& BtnGeometry, FPointerEvent& InMouseEvent);                                           // [0x184aaa0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomization.OnGlassesOpacitySliderValueChanged
	void OnGlassesOpacitySliderValueChanged(float CurrentValue);                                                             // [0x1849800] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnColorPicked
	void OnColorPicked(EWTLCustomizationColorPresetType ColorPresetType, int32_t Number, FLinearColor& Color, FLinearColor& PreviewColor); // [0x18498d0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLMainMenuCustomization.OnBodyTypeValueChanged
	void OnBodyTypeValueChanged(int32_t CurrentIndex, FString Prefix);                                                       // [0x184acf0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnBodyPartTypeButtonClicked
	void OnBodyPartTypeButtonClicked(EWTLCharacterCustomizationPart BodyPartType);                                           // [0x184a770] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnBodyPartSwitcherValueChanged
	void OnBodyPartSwitcherValueChanged(int32_t CurrentIndex, FString Prefix);                                               // [0x184a5d0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomization.OnAccountInventoryItemsUpdated
	void OnAccountInventoryItemsUpdated(TArray<FWTLAccountInventoryItem>& AccountInventoryItems);                            // [0x1849460] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomization.ChangeSex
	void ChangeSex(EWTLSex NewSex);                                                                                          // [0x184aed0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuCustomizationEdit
/// Size: 0x0050 (0x000268 - 0x0002B8)
class UWTLMainMenuCustomizationEdit : public UWTLMainMenuBase
{ 
public:
	UWTLCommonCharacterRotator*                        ucCharacterRotator;                                         // 0x0268   (0x0008)  
	UWTLMainMenuCustomization*                         ucCustomization;                                            // 0x0270   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnBack;                                                  // 0x0278   (0x0008)  
	UWTLMainMenuCharacterName*                         ucCharacterName;                                            // 0x0280   (0x0008)  
	UUserWidget*                                       ucCharacterNameWarning;                                     // 0x0288   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnApplyCustomization;                                    // 0x0290   (0x0008)  
	UThrobber*                                         thApplyCustomizationLoader;                                 // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x02A0   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnYesBackBtnClick
	void OnYesBackBtnClick();                                                                                                // [0x1845630] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnUpdateCharacterCustomizationResponse
	void OnUpdateCharacterCustomizationResponse(FWTLResponse& Response);                                                     // [0x184b4c0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnCustomizationPurchasedItemsOnCreateOrApply
	void OnCustomizationPurchasedItemsOnCreateOrApply();                                                                     // [0x184b5c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnCustomizationDataChanged
	void OnCustomizationDataChanged();                                                                                       // [0x184ba50] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnCharacterRotatorMouseButtonDown
	void OnCharacterRotatorMouseButtonDown();                                                                                // [0x18456f0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnCharacterNameCommitted
	void OnCharacterNameCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                       // [0x184b840] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnCharacterNameCheckResponseReceived
	void OnCharacterNameCheckResponseReceived(bool Success);                                                                 // [0x184b600] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnCharacterNameChanged
	void OnCharacterNameChanged(FText& Text);                                                                                // [0x184b6f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnBackBtnClick
	void OnBackBtnClick();                                                                                                   // [0x184ba30] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnApplyCustomizationConfirm
	void OnApplyCustomizationConfirm();                                                                                      // [0x184b5c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationEdit.OnApplyCustomizationBtnClick
	void OnApplyCustomizationBtnClick();                                                                                     // [0x184b5e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuCustomizationItem
/// Size: 0x0120 (0x0004A0 - 0x0005C0)
class UWTLMainMenuCustomizationItem : public UWTLCommonSelectedItem
{ 
public:
	UWidgetSwitcher*                                   wsImage;                                                    // 0x04A0   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x04A8   (0x0008)  
	UImage*                                            imgHidden;                                                  // 0x04B0   (0x0008)  
	UBorder*                                           bDLC;                                                       // 0x04B8   (0x0008)  
	UBorder*                                           bPurchasedStatus;                                           // 0x04C0   (0x0008)  
	UBorder*                                           bDiscount;                                                  // 0x04C8   (0x0008)  
	UTextBlock*                                        tbDiscount;                                                 // 0x04D0   (0x0008)  
	UBorder*                                           bPurchased;                                                 // 0x04D8   (0x0008)  
	UPanelWidget*                                      pwPrice;                                                    // 0x04E0   (0x0008)  
	UTextBlock*                                        tbCreditsPrice;                                             // 0x04E8   (0x0008)  
	UBorder*                                           bBuyBtn;                                                    // 0x04F0   (0x0008)  
	UButton*                                           btnBuy;                                                     // 0x04F8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x88];                                      // 0x0500   (0x0088)  MISSED
	UWidgetAnimation*                                  ShowPurchasedAnimation;                                     // 0x0588   (0x0008)  
	FLinearColor                                       PurchasedStatusBrushColor;                                  // 0x0590   (0x0010)  
	FLinearColor                                       NotPurchasedStatusBrushColor;                               // 0x05A0   (0x0010)  
	FLinearColor                                       CurrentItemBorderBrushColor;                                // 0x05B0   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuCustomizationItem.OnShowPurchasedAnimationFinished
	void OnShowPurchasedAnimationFinished();                                                                                 // [0x184be60] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuCustomizationItem.OnBuyBtnClicked
	void OnBuyBtnClicked();                                                                                                  // [0x184be40] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuErrorNotificationItem
/// Size: 0x0028 (0x000280 - 0x0002A8)
class UWTLMainMenuErrorNotificationItem : public UWTLCommonNotificationItem
{ 
public:
	TWeakObjectPtr<UFMODEvent*>                        NotificationSoundEvent;                                     // 0x0280   (0x0028)  
};

/// Class /Script/WTL.WTLMainMenuGameVersionInfo
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLMainMenuGameVersionInfo : public UUserWidget
{ 
public:
	UTextBlock*                                        tbDevelopmentStage;                                         // 0x0260   (0x0008)  
	UTextBlock*                                        tbVersion;                                                  // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLMainMenuLevelScriptActor
/// Size: 0x0080 (0x000650 - 0x0006D0)
class AWTLMainMenuLevelScriptActor : public AWTLLevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0650   (0x0078)  MISSED
	UWTLNetworkController*                             NetworkController;                                          // 0x06C8   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.SetMainCharacterHiddenInGame
	void SetMainCharacterHiddenInGame(bool bNewHidden);                                                                      // [0x184c130] Final|Native|Protected|BlueprintCallable 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.ResetCharacterRotation
	void ResetCharacterRotation();                                                                                           // [0x184c110] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.OnSteamShutdown
	void OnSteamShutdown();                                                                                                  // [0x184d0e0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.OnMasterServerConnectionError
	void OnMasterServerConnectionError();                                                                                    // [0x184d100] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkOnAccountInventoryItemsEvent
	void NetworkOnAccountInventoryItemsEvent(FWTLEvent& Event);                                                              // [0x184c350] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnUpdateCharacterCustomizationResponse
	void NetworkControllerOnUpdateCharacterCustomizationResponse(FWTLResponse& Response);                                    // [0x184c6e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnSteamAuthorizationResponse
	void NetworkControllerOnSteamAuthorizationResponse(FWTLResponse& Response);                                              // [0x184cfe0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnSetActiveCharacterResponse
	void NetworkControllerOnSetActiveCharacterResponse(FWTLResponse& Response);                                              // [0x184cbe0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnGetStoreItemsResponse
	void NetworkControllerOnGetStoreItemsResponse(FWTLResponse& Response);                                                   // [0x184c4f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnGetCharacterListResponse
	void NetworkControllerOnGetCharacterListResponse(FWTLResponse& Response);                                                // [0x184cce0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnGetArenaLocationListResponse
	void NetworkControllerOnGetArenaLocationListResponse(FWTLResponse& Response);                                            // [0x184cde0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnDisconnectOnConnectCanceled
	void NetworkControllerOnDisconnectOnConnectCanceled();                                                                   // [0x184d120] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnDisconnected
	void NetworkControllerOnDisconnected();                                                                                  // [0x184d140] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnDeleteCharacterResponse
	void NetworkControllerOnDeleteCharacterResponse(FWTLResponse& Response);                                                 // [0x184c9e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnCreateCharacterResponse
	void NetworkControllerOnCreateCharacterResponse(FWTLResponse& Response);                                                 // [0x184cae0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnConnectError
	void NetworkControllerOnConnectError(FString ErrorInfo);                                                                 // [0x184d160] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnConnected
	void NetworkControllerOnConnected();                                                                                     // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnClientInfoResponse
	void NetworkControllerOnClientInfoResponse(FWTLResponse& Response);                                                      // [0x184cee0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnChangeCreditsToMoneyResponse
	void NetworkControllerOnChangeCreditsToMoneyResponse(FWTLResponse& Response);                                            // [0x184c7e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnChangeCharacterNameResponse
	void NetworkControllerOnChangeCharacterNameResponse(FWTLResponse& Response);                                             // [0x184c5e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.NetworkControllerOnCancelDeleteCharacterResponse
	void NetworkControllerOnCancelDeleteCharacterResponse(FWTLResponse& Response);                                           // [0x184c8e0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToOriginalPoint
	void MoveCameraToOriginalPoint();                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterWatchesPoint
	void MoveCameraToCharacterWatchesPoint();                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterTorsoPoint
	void MoveCameraToCharacterTorsoPoint();                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterPoint
	void MoveCameraToCharacterPoint();                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterLegsPoint
	void MoveCameraToCharacterLegsPoint();                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterHeadPoint
	void MoveCameraToCharacterHeadPoint();                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterFeetPoint
	void MoveCameraToCharacterFeetPoint();                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterCommonPoint
	void MoveCameraToCharacterCommonPoint();                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuLevelScriptActor.MoveCameraToCharacterBackpackPoint
	void MoveCameraToCharacterBackpackPoint();                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLMainMenuLocalizationListItem
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLMainMenuLocalizationListItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbCulture;                                                  // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLMainMenuMaterialColorItem
/// Size: 0x0038 (0x000260 - 0x000298)
class UWTLMainMenuMaterialColorItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbColorName;                                                // 0x0260   (0x0008)  
	UWTLCommonColorButton*                             ucColorBtn;                                                 // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x0270   (0x0028)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuMaterialColorItem.OnColorPickerBtnClick
	void OnColorPickerBtnClick(FGeometry& BtnGeometry, FPointerEvent& InMouseEvent);                                         // [0x184dfb0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMainMenuMaterialColorScalar
/// Size: 0x0078 (0x0002C8 - 0x000340)
class UWTLMainMenuMaterialColorScalar : public UWTLCommonSwitcher
{ 
public:
	UBorder*                                           bScalarTexture;                                             // 0x02C8   (0x0008)  
	UImage*                                            imgScalarTexture;                                           // 0x02D0   (0x0008)  
	UWTLCommonColorButton*                             ucColorBtn;                                                 // 0x02D8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x02E0   (0x0038)  MISSED
	TWeakObjectPtr<UTexture2D*>                        ColorScalarTexture;                                         // 0x0318   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuMaterialColorScalar.OnColorBtnClicked
	void OnColorBtnClicked(FGeometry& BtnGeometry, FPointerEvent& InMouseEvent);                                             // [0x184e390] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMainMenuMaterialScalarItem
/// Size: 0x0050 (0x0002C8 - 0x000318)
class UWTLMainMenuMaterialScalarItem : public UWTLCommonSwitcher
{ 
public:
	UImage*                                            imgScalarTexture;                                           // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02D0   (0x0020)  MISSED
	TWeakObjectPtr<UTexture2D*>                        ColorScalarTexture;                                         // 0x02F0   (0x0028)  
};

/// Class /Script/WTL.WTLMainMenuMaterialsTabButton
/// Size: 0x0000 (0x0012C8 - 0x0012C8)
class UWTLMainMenuMaterialsTabButton : public UWTLCommonTabButton
{ 
public:
};

/// Class /Script/WTL.WTLMainMenuMoviePlayer
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLMainMenuMoviePlayer : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0260   (0x0010)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        m_MovieEvent;                                               // 0x0270   (0x0028)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0298   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuMoviePlayer.OnStopMovie
	void OnStopMovie();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuMoviePlayer.OnPlayMovie
	void OnPlayMovie();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMainMenuMoviePlayer.Hide
	void Hide();                                                                                                             // [0x184e980] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMainMenuMoviePlayer.GetCurrentCulture
	FString GetCurrentCulture();                                                                                             // [0x184e860] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLMainMenuPlayerClass
/// Size: 0x0138 (0x000340 - 0x000478)
class UWTLMainMenuPlayerClass : public UWTLCommonButton
{ 
public:
	UImage*                                            imgSelectedBorder;                                          // 0x0340   (0x0008)  
	UWidgetSwitcher*                                   wsSex;                                                      // 0x0348   (0x0008)  
	UWidgetSwitcher*                                   wsFemalePlayerClass;                                        // 0x0350   (0x0008)  
	UWidgetSwitcher*                                   wsMalePlayerClass;                                          // 0x0358   (0x0008)  
	unsigned char                                      UnknownData00_5[0x50];                                      // 0x0360   (0x0050)  MISSED
	EWTLCharacterClass                                 PlayerClass;                                                // 0x03B0   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x03B1   (0x0003)  MISSED
	FLinearColor                                       DefaultClassColor;                                          // 0x03B4   (0x0010)  
	FLinearColor                                       HoveredClassColor;                                          // 0x03C4   (0x0010)  
	FLinearColor                                       SelectedClassColor;                                         // 0x03D4   (0x0010)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x03E4   (0x0004)  MISSED
	FText                                              DescriptionText;                                            // 0x03E8   (0x0018)  
	TWeakObjectPtr<UClass*>                            PlayerClassDescriptionWidgetClass;                          // 0x0400   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        FemaleClassFullSizeImage;                                   // 0x0428   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MaleClassFullSizeImage;                                     // 0x0450   (0x0028)  
};

/// Class /Script/WTL.WTLMainMenuPlayerClassDescription
/// Size: 0x0018 (0x000260 - 0x000278)
class UWTLMainMenuPlayerClassDescription : public UUserWidget
{ 
public:
	UTextBlock*                                        tbClassName;                                                // 0x0260   (0x0008)  
	UImage*                                            imgClassFullSize;                                           // 0x0268   (0x0008)  
	UTextBlock*                                        tbClassDescription;                                         // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLMainMenuPlayerClassTooltip
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLMainMenuPlayerClassTooltip : public UUserWidget
{ 
public:
	UTextBlock*                                        tbPlayerClassTitle;                                         // 0x0260   (0x0008)  
	UTextBlock*                                        tbPlayerClassDescription;                                   // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLMainMenuServerAuthorization
/// Size: 0x0050 (0x000260 - 0x0002B0)
class UWTLMainMenuServerAuthorization : public UUserWidget
{ 
public:
	UButton*                                           btnClose;                                                   // 0x0260   (0x0008)  
	UWTLMainMenuTextBox*                               ucTbLogin;                                                  // 0x0268   (0x0008)  
	UWTLMainMenuTextBox*                               ucTbPassword;                                               // 0x0270   (0x0008)  
	UButton*                                           btnShowPassword;                                            // 0x0278   (0x0008)  
	UTextBlock*                                        tbIncorrectSymbols;                                         // 0x0280   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnAuthorize;                                             // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0290   (0x0020)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnShowPasswordBtnReleased
	void OnShowPasswordBtnReleased();                                                                                        // [0x184f700] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnShowPasswordBtnPressed
	void OnShowPasswordBtnPressed();                                                                                         // [0x184f740] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnSavePasswordConfirmed
	void OnSavePasswordConfirmed();                                                                                          // [0x184efa0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnSavePasswordCheckStateChanged
	void OnSavePasswordCheckStateChanged(bool bIsChecked);                                                                   // [0x184f060] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnSavePasswordCanceled
	void OnSavePasswordCanceled();                                                                                           // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnPasswordTextBoxCommitted
	void OnPasswordTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                     // [0x184f270] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnPasswordTextBoxChanged
	void OnPasswordTextBoxChanged(FText& Text);                                                                              // [0x184f140] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnLoginTextBoxCommitted
	void OnLoginTextBoxCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                        // [0x184f440] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnConnectedToServer
	void OnConnectedToServer();                                                                                              // [0x184ef80] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnCloseBtnClicked
	void OnCloseBtnClicked();                                                                                                // [0x184f780] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerAuthorization.OnAuthorizeBtnClicked
	void OnAuthorizeBtnClicked();                                                                                            // [0x184f6e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuServerList
/// Size: 0x0078 (0x000268 - 0x0002E0)
class UWTLMainMenuServerList : public UWTLMainMenuBase
{ 
public:
	UWTLCommonHotkeyButton*                            ucBtnBack;                                                  // 0x0268   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnRefresh;                                               // 0x0270   (0x0008)  
	UWTLCommonHotkeyButton*                            ucBtnConnect;                                               // 0x0278   (0x0008)  
	UWidgetSwitcher*                                   wsServerList;                                               // 0x0280   (0x0008)  
	UScrollBox*                                        sbServerList;                                               // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0290   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            ServerListItemWidgetClass;                                  // 0x02B8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuServerList.OnServerResponded
	void OnServerResponded(FWTLSteamServerInfo& GameServerItem);                                                             // [0x184fa60] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuServerList.OnServerRequestFinished
	void OnServerRequestFinished();                                                                                          // [0x184fa40] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerList.OnRefreshBtnClick
	void OnRefreshBtnClick();                                                                                                // [0x184fbd0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerList.OnConnectedToServer
	void OnConnectedToServer();                                                                                              // [0x184fa20] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerList.OnConnectBtnClick
	void OnConnectBtnClick();                                                                                                // [0x184fbb0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerList.OnCancelCheckAccountStatus
	void OnCancelCheckAccountStatus();                                                                                       // [0x184fc40] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuServerList.OnBackBtnClick
	void OnBackBtnClick();                                                                                                   // [0x184fbf0] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuServerListItem
/// Size: 0x0218 (0x0004A0 - 0x0006B8)
class UWTLMainMenuServerListItem : public UWTLCommonSelectedItem
{ 
public:
	UWidgetSwitcher*                                   wsServerType;                                               // 0x04A0   (0x0008)  
	UTextBlock*                                        tbServerName;                                               // 0x04A8   (0x0008)  
	UTextBlock*                                        tbServerVersion;                                            // 0x04B0   (0x0008)  
	UTextBlock*                                        tbServerLoad;                                               // 0x04B8   (0x0008)  
	UTextBlock*                                        tbServerPing;                                               // 0x04C0   (0x0008)  
	UTextBlock*                                        tbServerTime;                                               // 0x04C8   (0x0008)  
	UBorder*                                           bServerMark;                                                // 0x04D0   (0x0008)  
	UWidgetSwitcher*                                   wsServerMark;                                               // 0x04D8   (0x0008)  
	UBorder*                                           bServerName;                                                // 0x04E0   (0x0008)  
	UBorder*                                           bServerVersion;                                             // 0x04E8   (0x0008)  
	UBorder*                                           bServerLoad;                                                // 0x04F0   (0x0008)  
	UBorder*                                           bServerPing;                                                // 0x04F8   (0x0008)  
	UBorder*                                           bServerTime;                                                // 0x0500   (0x0008)  
	unsigned char                                      UnknownData00_5[0x80];                                      // 0x0508   (0x0080)  MISSED
	FSlateBrush                                        RecommendedBorderBrush;                                     // 0x0588   (0x0088)  
	FSlateColor                                        ServerLoadLowColor;                                         // 0x0610   (0x0028)  
	FSlateColor                                        ServerLoadMiddleColor;                                      // 0x0638   (0x0028)  
	FSlateColor                                        ServerLoadHighColor;                                        // 0x0660   (0x0028)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0688   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuServerListItem.OnBackgroundBorderMouseDoubleClick
	void OnBackgroundBorderMouseDoubleClick(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                // [0x184fe20] Final|Native|Protected|HasOutParms 
};

/// Class /Script/WTL.WTLMainMenuSexSelectToPreviewWindow
/// Size: 0x0128 (0x000288 - 0x0003B0)
class UWTLMainMenuSexSelectToPreviewWindow : public UWTLCommonWindowBase
{ 
public:
	UHorizontalBox*                                    hbSex;                                                      // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0x120];                                     // 0x0290   (0x0120)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuSexSelectToPreviewWindow.OnSexSelected
	void OnSexSelected(EWTLSex Sex);                                                                                         // [0x1850230] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuStart
/// Size: 0x0110 (0x000268 - 0x000378)
class UWTLMainMenuStart : public UWTLMainMenuBase
{ 
public:
	UBackgroundBlur*                                   bbLocalizationDebug;                                        // 0x0268   (0x0008)  
	UCheckBox*                                         cbEditorLocalizationPaths;                                  // 0x0270   (0x0008)  
	UCheckBox*                                         cbEngineLocalizationPaths;                                  // 0x0278   (0x0008)  
	UCheckBox*                                         cbGameLocalizationPaths;                                    // 0x0280   (0x0008)  
	UScrollBox*                                        sbAvailableLocalizationList;                                // 0x0288   (0x0008)  
	UButton*                                           btnClose;                                                   // 0x0290   (0x0008)  
	UButton*                                           btnGet;                                                     // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsRoot;                                                     // 0x02A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnStory;                                                 // 0x02A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnAuthors;                                               // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnPlay;                                                  // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnExit;                                                  // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbSocialNetworks;                                           // 0x02C8   (0x0008)  
	UButton*                                           btnSocialNetworkYouTube;                                    // 0x02D0   (0x0008)  
	UButton*                                           btnSocialNetworkTwitter;                                    // 0x02D8   (0x0008)  
	UButton*                                           btnSocialNetworkVK;                                         // 0x02E0   (0x0008)  
	UButton*                                           btnSocialNetworkFacebook;                                   // 0x02E8   (0x0008)  
	UButton*                                           btnSocialNetworkDiscord;                                    // 0x02F0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02F8   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            LocalizationListItemWidgetClass;                            // 0x0300   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SocialNetworkPressedSoundEvent;                             // 0x0328   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SocialNetworkHoveredSoundEvent;                             // 0x0350   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLMainMenuStart.OnStoryBtnClick
	void OnStoryBtnClick();                                                                                                  // [0x1850710] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkYouTubeBtnClicked
	void OnSocialNetworkYouTubeBtnClicked();                                                                                 // [0x1850660] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkVKBtnClicked
	void OnSocialNetworkVKBtnClicked();                                                                                      // [0x1850620] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkTwitterBtnClicked
	void OnSocialNetworkTwitterBtnClicked();                                                                                 // [0x1850640] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkFacebookBtnClicked
	void OnSocialNetworkFacebookBtnClicked();                                                                                // [0x1850600] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkDiscordBtnClicked
	void OnSocialNetworkDiscordBtnClicked();                                                                                 // [0x18505e0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkBtnPressed
	void OnSocialNetworkBtnPressed();                                                                                        // [0x18505c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnSocialNetworkBtnHovered
	void OnSocialNetworkBtnHovered();                                                                                        // [0x18505a0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnPlayBtnClick
	void OnPlayBtnClick();                                                                                                   // [0x18506a0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnGetBtnClick
	void OnGetBtnClick();                                                                                                    // [0x1850750] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnExitBtnClick
	void OnExitBtnClick();                                                                                                   // [0x1850730] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnCloseBtnClick
	void OnCloseBtnClick();                                                                                                  // [0x1850770] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.OnAuthorsBtnClick
	void OnAuthorsBtnClick();                                                                                                // [0x18506c0] Final|Native|Private 
	// Function /Script/WTL.WTLMainMenuStart.ExitGame
	void ExitGame();                                                                                                         // [0x1850680] Final|Native|Private 
};

/// Class /Script/WTL.WTLMainMenuTextBox
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLMainMenuTextBox : public UUserWidget
{ 
public:
	UEditableTextBox*                                  etbTextBox;                                                 // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x0268   (0x0030)  MISSED
	FText                                              HintText;                                                   // 0x0298   (0x0018)  
	bool                                               IsPassword;                                                 // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02B1   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMainMenuTextBox.OnTextBoxTextCommitted
	void OnTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                         // [0x1850db0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMainMenuTextBox.OnTextBoxTextChanged
	void OnTextBoxTextChanged(FText& Text);                                                                                  // [0x1850c70] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLMarchingCubes
/// Size: 0x4478 (0x000220 - 0x004698)
class AWTLMarchingCubes : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x4408];                                    // 0x0220   (0x4408)  MISSED
	UProceduralMeshComponent*                          m_ProcMesh;                                                 // 0x4628   (0x0008)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x4630   (0x0010)  MISSED
	TArray<FWTLChunk>                                  Chunks;                                                     // 0x4640   (0x0010)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x4650   (0x0010)  MISSED
	FVector                                            pCellSize;                                                  // 0x4660   (0x000C)  
	FIntVector                                         pChunkSize;                                                 // 0x466C   (0x000C)  
	FIntVector                                         GridSize;                                                   // 0x4678   (0x000C)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x4684   (0x0004)  MISSED
	UMaterialInterface*                                Material;                                                   // 0x4688   (0x0008)  
	float                                              m_RateUpdateChunk;                                          // 0x4690   (0x0004)  
	bool                                               IsDrawDebug;                                                // 0x4694   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x4695   (0x0003)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMarchingCubes.TraceDamage
	void TraceDamage(FVector TraceStart, FVector TraceEnd, AActor* DamageInstigator);                                        // [0x1851130] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLMarchingCubes.TakeDamageHit
	void TakeDamageHit(FHitResult Hit, AActor* DamageCauser);                                                                // [0x1851340] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMarchingCubes.NetMulticast_UpdateChunk
	void NetMulticast_UpdateChunk(FWTLChunk Chunk);                                                                          // [0x18514e0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLMarchingCubes.NetMulticast_TakeDamageHit
	void NetMulticast_TakeDamageHit(uint32_t BlockID, int8_t Value);                                                         // [0x1851640] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLMarchingCubes.GenerateMesh
	void GenerateMesh();                                                                                                     // [0x18517a0] Final|Native|Public  
	// Function /Script/WTL.WTLMarchingCubes.GenerateGrid
	void GenerateGrid();                                                                                                     // [0x18517c0] Final|Native|Public  
};

/// Class /Script/WTL.WTLWeapon
/// Size: 0x0018 (0x0003C0 - 0x0003D8)
class AWTLWeapon : public AWTLUsable
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x03C0   (0x0008)  MISSED
	EWTLWeaponType                                     WeaponType;                                                 // 0x03C8   (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x03C9   (0x000F)  MISSED
};

/// Class /Script/WTL.WTLMeleeWeapon
/// Size: 0x0108 (0x0003D8 - 0x0004E0)
class AWTLMeleeWeapon : public AWTLWeapon
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x03D8   (0x0018)  MISSED
	TArray<FItemAnimationSet>                          HitsList;                                                   // 0x03F0   (0x0010)  
	TArray<FItemAnimationSet>                          HeavyHitsList;                                              // 0x0400   (0x0010)  
	FItemAnimationSet                                  MainSequenceSet;                                            // 0x0410   (0x0018)  
	FItemAnimationSet                                  AlternativeSequenceSet;                                     // 0x0428   (0x0018)  
	FItemAnimationSet                                  QuickHitSequenceSet;                                        // 0x0440   (0x0018)  
	FItemAnimationSet                                  QuickHitWithEmptyHandsSequenceSet;                          // 0x0458   (0x0018)  
	float                                              AnimationRateMultiplierOnSprinting;                         // 0x0470   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0474   (0x0004)  MISSED
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x0478   (0x0010)  
	float                                              MainDamageMultiplier;                                       // 0x0488   (0x0004)  
	float                                              PlaceableStuffDamageMultiplier;                             // 0x048C   (0x0004)  
	float                                              MainHitParticleScale;                                       // 0x0490   (0x0004)  
	float                                              MainRagdollImpulseMultiplier;                               // 0x0494   (0x0004)  
	float                                              MainRangeDelta;                                             // 0x0498   (0x0004)  
	float                                              MainCollisionRadius;                                        // 0x049C   (0x0004)  
	bool                                               MainUseArmor;                                               // 0x04A0   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x04A1   (0x0003)  MISSED
	float                                              MainStaminaPerUse;                                          // 0x04A4   (0x0004)  
	float                                              MainBleedingChance;                                         // 0x04A8   (0x0004)  
	float                                              MainMaxBleedingValue;                                       // 0x04AC   (0x0004)  
	float                                              MainStunChance;                                             // 0x04B0   (0x0004)  
	bool                                               ShowHitPoint;                                               // 0x04B4   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x04B5   (0x0003)  MISSED
	float                                              AlternativeDamageMultiplier;                                // 0x04B8   (0x0004)  
	float                                              AlternativeHitParticleScale;                                // 0x04BC   (0x0004)  
	float                                              AlternativeRagdollImpulseMultiplier;                        // 0x04C0   (0x0004)  
	float                                              AlternativeRangeDelta;                                      // 0x04C4   (0x0004)  
	float                                              AlternativeCollisionRadius;                                 // 0x04C8   (0x0004)  
	bool                                               AlternativeUseArmor;                                        // 0x04CC   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x04CD   (0x0003)  MISSED
	float                                              AlternativeStaminaPerUse;                                   // 0x04D0   (0x0004)  
	float                                              AlternativeBleedingChance;                                  // 0x04D4   (0x0004)  
	float                                              AlternativeMaxBleedingValue;                                // 0x04D8   (0x0004)  
	float                                              AlternativeStunChance;                                      // 0x04DC   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLMeleeWeapon.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x1851e50] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMeleeWeapon.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x1851eb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMeleeWeapon.Server_SingleUse
	void Server_SingleUse();                                                                                                 // [0x1851a60] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLMeleeWeapon.Server_ShowImpactPoint
	void Server_ShowImpactPoint(FHitResult HitResult);                                                                       // [0x1851ac0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLMeleeWeapon.Server_MakeHit
	void Server_MakeHit(FHitResult HitResult);                                                                               // [0x1851c10] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLMeleeWeapon.NetMulticast_QuickHit
	void NetMulticast_QuickHit();                                                                                            // [0x1851d60] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMeleeWeapon.NetMulticast_OnUse
	void NetMulticast_OnUse(EWTLUsableItemUseType UseType);                                                                  // [0x1851d80] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/WTL.WTLTacticalStuff
/// Size: 0x0048 (0x000220 - 0x000268)
class AWTLTacticalStuff : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0220   (0x0028)  MISSED
	uint64_t                                           m_CharacterID;                                              // 0x0248   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0250   (0x0008)  MISSED
	float                                              Damage;                                                     // 0x0258   (0x0004)  
	float                                              Health;                                                     // 0x025C   (0x0004)  
	bool                                               bCanActivateFromRadialDamage;                               // 0x0260   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0261   (0x0007)  MISSED
};

/// Class /Script/WTL.WTLMine
/// Size: 0x00D8 (0x000268 - 0x000340)
class AWTLMine : public AWTLTacticalStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0268   (0x0020)  MISSED
	bool                                               m_Activated;                                                // 0x0288   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0289   (0x0007)  MISSED
	UStaticMeshComponent*                              ActivateZone;                                               // 0x0290   (0x0008)  
	UStaticMeshComponent*                              DamageZone;                                                 // 0x0298   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x02A0   (0x0008)  
	USceneComponent*                                   DamageOrigin;                                               // 0x02A8   (0x0008)  
	USoundCue*                                         ActivationSound;                                            // 0x02B0   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        ActivationSoundEvent;                                       // 0x02B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ExplosionFX;                                                // 0x02E0   (0x0028)  
	FRotator                                           ExplosionFXRotation;                                        // 0x0308   (0x000C)  
	bool                                               bIsRelaseMode;                                              // 0x0314   (0x0001)  
	bool                                               bIsUpgraded;                                                // 0x0315   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0316   (0x0002)  MISSED
	TArray<TEnumAsByte>                                DestructibleObjectTypes;                                    // 0x0318   (0x0010)  
	float                                              DestructibleImpulse;                                        // 0x0328   (0x0004)  
	float                                              DestructibleDamageMultiplier;                               // 0x032C   (0x0004)  
	EWTLFaction                                        m_CharacterFaction;                                         // 0x0330   (0x0001)  
	bool                                               m_bCharacterInPVP;                                          // 0x0331   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x0332   (0x0002)  MISSED
	float                                              ExplosionDelay;                                             // 0x0334   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0338   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x033C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMine.OnRep_Activated
	void OnRep_Activated();                                                                                                  // [0x18521c0] Final|Native|Private 
	// Function /Script/WTL.WTLMine.OnOverlapEnd
	void OnOverlapEnd(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Public  
	// Function /Script/WTL.WTLMine.OnOverlapBegin
	void OnOverlapBegin(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Public|HasOutParms 
	// Function /Script/WTL.WTLMine.NetMulticast_OnExplosion
	void NetMulticast_OnExplosion(float ExplosionDamage);                                                                    // [0x18520f0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMine.BPOnExplode
	void BPOnExplode();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMine.BPOnApplyDamageToMonster
	void BPOnApplyDamageToMonster(AWTLMonsterPawn* Monster, float ActualDamage);                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMine.BPOnApplyDamageToEnemyNPC
	void BPOnApplyDamageToEnemyNPC(AWTLEnemyNPC* EnemyNPC, float ActualDamage);                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMine.BPOnApplyDamageToCharacter
	void BPOnApplyDamageToCharacter(AWTLCharacter* Character, float ActualDamage);                                           // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLMiniGameComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UWTLMiniGameComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x00B0   (0x0028)  MISSED
};

/// Class /Script/WTL.WTLMiningItem
/// Size: 0x0030 (0x000458 - 0x000488)
class AWTLMiningItem : public AWTLStuff
{ 
public:
	float                                              MineHitRange;                                               // 0x0458   (0x0004)  
	float                                              MeleeHitRange;                                              // 0x045C   (0x0004)  
	float                                              SphereRadius;                                               // 0x0460   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0464   (0x0004)  MISSED
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x0468   (0x0010)  
	TEnumAsByte<ETraceTypeQuery>                       CollisionTraceQuery;                                        // 0x0478   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0479   (0x0003)  MISSED
	float                                              HitParticleScale;                                           // 0x047C   (0x0004)  
	float                                              PlaceableStuffDamageMultiplier;                             // 0x0480   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0484   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMiningItem.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17db590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMiningItem.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17db5c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMiningItem.Server_MineHit
	void Server_MineHit(FHitResult HitResult);                                                                               // [0x18534c0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLMiningItem.Server_MeleeWeaponHit
	void Server_MeleeWeaponHit(FHitResult HitResult);                                                                        // [0x18533b0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLMiningItem.NetMulticast_OnUse
	void NetMulticast_OnUse(EWTLUsableItemUseType UseType);                                                                  // [0x18535d0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/WTL.WTLMiningSpot
/// Size: 0x01C8 (0x000220 - 0x0003E8)
class AWTLMiningSpot : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	float                                              m_Capacity;                                                 // 0x0230   (0x0004)  
	unsigned char                                      UnknownData01_5[0x14];                                      // 0x0234   (0x0014)  MISSED
	USceneComponent*                                   MiningSpotRootComponent;                                    // 0x0248   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x0250   (0x0008)  
	TWeakObjectPtr<UMaterialInterface*>                MaterialOverride;                                           // 0x0258   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   MeshChangeParticles;                                        // 0x0280   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        MeshChangeSoundEvent;                                       // 0x02A8   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   EmptyHitParticles;                                          // 0x02D0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        EmptyHitSoundEvent;                                         // 0x02F8   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   SuccessHitParticles;                                        // 0x0320   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SuccessHitSoundEvent;                                       // 0x0348   (0x0028)  
	TArray<FWTLMiningSpotResource>                     Resources;                                                  // 0x0370   (0x0010)  
	float                                              MinEmptyHitCapacityCost;                                    // 0x0380   (0x0004)  
	float                                              MaxEmptyHitCapacityCost;                                    // 0x0384   (0x0004)  
	float                                              MaxCapacity;                                                // 0x0388   (0x0004)  
	float                                              MinCapacityRegenerationPerSecond;                           // 0x038C   (0x0004)  
	float                                              MaxCapacityRegenerationPerSecond;                           // 0x0390   (0x0004)  
	float                                              CapacityRestoreTimeout;                                     // 0x0394   (0x0004)  
	TMap<float, TWeakObjectPtr>                        PerCapacityPercentMeshes;                                   // 0x0398   (0x0050)  


	/// Functions
	// Function /Script/WTL.WTLMiningSpot.OnRep_Capacity
	void OnRep_Capacity(float PreviousCapacity);                                                                             // [0x1853d70] Final|Native|Private 
	// Function /Script/WTL.WTLMiningSpot.OnBecameEmpty
	void OnBecameEmpty();                                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMiningSpot.NetMulticast_OnHit
	void NetMulticast_OnHit(FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, bool Success, float Scale); // [0x18538d0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/WTL.WTLMiningZone
/// Size: 0x0098 (0x000258 - 0x0002F0)
class AWTLMiningZone : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0258   (0x0030)  MISSED
	TMap<int32_t, float>                               AcceptableMiningItems;                                      // 0x0288   (0x0050)  
	TArray<FWTLMiningZoneItem>                         Items;                                                      // 0x02D8   (0x0010)  
	float                                              MinEmptyHitCapacityCost;                                    // 0x02E8   (0x0004)  
	float                                              MaxEmptyHitCapacityCost;                                    // 0x02EC   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLMiningZone.OnVolumeEndOverlap
	void OnVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Protected 
	// Function /Script/WTL.WTLMiningZone.OnVolumeBeginOverlap
	void OnVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Protected|HasOutParms 
};

/// Class /Script/WTL.WTLMissileWeapon
/// Size: 0x0158 (0x0003D8 - 0x000530)
class AWTLMissileWeapon : public AWTLWeapon
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x03D8   (0x0020)  MISSED
	UParticleSystemComponent*                          TargetLocation;                                             // 0x03F8   (0x0008)  
	TWeakObjectPtr<UParticleSystem*>                   m_BeamParticleSystem;                                       // 0x0400   (0x0028)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x0428   (0x0028)  MISSED
	float                                              TrajectoryBeamTimeDelta;                                    // 0x0450   (0x0004)  
	bool                                               bPredictTrajectory;                                         // 0x0454   (0x0001)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0455   (0x0004)  MISSED
	bool                                               m_bQuickThrow;                                              // 0x0459   (0x0001)  
	unsigned char                                      UnknownData03_5[0x16];                                      // 0x045A   (0x0016)  MISSED
	float                                              ThrowRandomConeAngle;                                       // 0x0470   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0474   (0x0004)  MISSED
	FItemAnimationSet                                  ThrowSequenceSet;                                           // 0x0478   (0x0018)  
	FItemAnimationSet                                  AlternateThrowSequenceSet;                                  // 0x0490   (0x0018)  
	FItemAnimationSet                                  QuickThrowSequenceSet;                                      // 0x04A8   (0x0018)  
	TWeakObjectPtr<UClass*>                            ProjectileClass;                                            // 0x04C0   (0x0028)  
	FVector                                            MissileSocketOffsetMale;                                    // 0x04E8   (0x000C)  
	FVector                                            MissileSocketOffsetFemale;                                  // 0x04F4   (0x000C)  
	float                                              MainThrowSpeed;                                             // 0x0500   (0x0004)  
	FRotator                                           MainThrowRotationOffset;                                    // 0x0504   (0x000C)  
	float                                              AlternativeThrowSpeed;                                      // 0x0510   (0x0004)  
	FRotator                                           AlternativeThrowRotationOffset;                             // 0x0514   (0x000C)  
	bool                                               CanBeDropedAfterDeath;                                      // 0x0520   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0521   (0x0003)  MISSED
	float                                              DropThrowForce;                                             // 0x0524   (0x0004)  
	bool                                               ShowImpactPoint;                                            // 0x0528   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x0529   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMissileWeapon.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17db590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMissileWeapon.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17db5c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMissileWeapon.OnRep_QuickThrow
	void OnRep_QuickThrow();                                                                                                 // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLMissileWeapon.NetMulticast_QuickThrow
	void NetMulticast_QuickThrow();                                                                                          // [0x1854840] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMissileWeapon.NetMulticast_OnStopUse
	void NetMulticast_OnStopUse(EWTLUsableItemUseType UseType);                                                              // [0x1854980] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMissileWeapon.NetMulticast_OnStartUse
	void NetMulticast_OnStartUse(EWTLUsableItemUseType UseType);                                                             // [0x1854a50] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMissileWeapon.GetReadyToThrow
	bool GetReadyToThrow();                                                                                                  // [0x1854330] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMissileWeapon.Client_ShowCountdownWidget
	void Client_ShowCountdownWidget(uint16_t WeaponID, float TimeValue, EWTLUsableItemUseType UseType, float ThrowSpeed);    // [0x18544a0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLMissileWeapon.Client_HideCountdownWidget
	void Client_HideCountdownWidget();                                                                                       // [0x1854350] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLMissileWeapon.BPActivationProcess
	void BPActivationProcess();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLMobileHealPoint
/// Size: 0x0070 (0x000398 - 0x000408)
class AWTLMobileHealPoint : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0398   (0x0038)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x03D0   (0x0008)  
	UStaticMeshComponent*                              ZoneMesh;                                                   // 0x03D8   (0x0008)  
	UBoxComponent*                                     BoxCollision;                                               // 0x03E0   (0x0008)  
	TArray<TEnumAsByte>                                HealingObjectTypes;                                         // 0x03E8   (0x0010)  
	float                                              HealingPercentPerSecond;                                    // 0x03F8   (0x0004)  
	float                                              HealingEnergyPerSecond;                                     // 0x03FC   (0x0004)  
	float                                              EnergyChargePerSecond;                                      // 0x0400   (0x0004)  
	float                                              m_Energy;                                                   // 0x0404   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLMobileHealPoint.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x1855520] Final|Native|Private 
	// Function /Script/WTL.WTLMobileHealPoint.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLMobileHealPoint.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMobileHealPoint.BPGetEnergy
	float BPGetEnergy();                                                                                                     // [0x1855500] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMobileHealPoint.BPGetCondition
	float BPGetCondition();                                                                                                  // [0x17bbcb0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMobileHealPoint.BPCharged
	void BPCharged();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMobileHealPoint.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0xe5dd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileHealPoint.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17defb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileHealPoint.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17df130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileHealPoint.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17df0e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileHealPoint.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17df110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileHealPoint.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17df0c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLMobileResurectionPoint
/// Size: 0x00E0 (0x000398 - 0x000478)
class AWTLMobileResurectionPoint : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x98];                                      // 0x0398   (0x0098)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0430   (0x0008)  
	UStaticMeshComponent*                              ZoneMesh;                                                   // 0x0438   (0x0008)  
	UBoxComponent*                                     BoxCollision;                                               // 0x0440   (0x0008)  
	TArray<TEnumAsByte>                                HealingObjectTypes;                                         // 0x0448   (0x0010)  
	float                                              HealingRadius;                                              // 0x0458   (0x0004)  
	float                                              HealingPerSecond;                                           // 0x045C   (0x0004)  
	float                                              HealingEnergyPerSecond;                                     // 0x0460   (0x0004)  
	float                                              ResurectionEnergyCost;                                      // 0x0464   (0x0004)  
	float                                              ResurectionRadius;                                          // 0x0468   (0x0004)  
	float                                              EnergyChargePerSecond;                                      // 0x046C   (0x0004)  
	float                                              m_Energy;                                                   // 0x0470   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0474   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMobileResurectionPoint.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x1855930] Final|Native|Private 
	// Function /Script/WTL.WTLMobileResurectionPoint.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLMobileResurectionPoint.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLMobileResurectionPoint.BPGetEnergy
	float BPGetEnergy();                                                                                                     // [0x1855910] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMobileResurectionPoint.BPGetCondition
	float BPGetCondition();                                                                                                  // [0x17bbcb0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMobileResurectionPoint.BPCharged
	void BPCharged();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMobileResurectionPoint.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0xe5dd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileResurectionPoint.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x17defb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileResurectionPoint.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x17df130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileResurectionPoint.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17df0e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileResurectionPoint.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17df110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMobileResurectionPoint.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17df0c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLMonocular
/// Size: 0x01E8 (0x000458 - 0x000640)
class AWTLMonocular : public AWTLStuff
{ 
public:
	TArray<char>                                       ZoomModes;                                                  // 0x0458   (0x0010)  
	UFont*                                             HUDFont;                                                    // 0x0468   (0x0008)  
	UTexture2D*                                        HUDBatteryAtlas;                                            // 0x0470   (0x0008)  
	UTexture2D*                                        HUDInfoAtlas;                                               // 0x0478   (0x0008)  
	float                                              MaxRange;                                                   // 0x0480   (0x0004)  
	unsigned char                                      UnknownData00_5[0x19C];                                     // 0x0484   (0x019C)  MISSED
	UMaterialBillboardComponent*                       m_ScopeFlareComponent;                                      // 0x0620   (0x0008)  
	UMaterialInstanceDynamic*                          m_ScopeFlareMaterialInstance;                               // 0x0628   (0x0008)  
	bool                                               bIsUsingMonocular;                                          // 0x0630   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0631   (0x0003)  MISSED
	float                                              HandsShakingSpeed;                                          // 0x0634   (0x0004)  
	float                                              MaxVerticalHandsShaking;                                    // 0x0638   (0x0004)  
	float                                              MaxHorizontalHandsShaking;                                  // 0x063C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLMonocular.OnRep_bIsUsingMonocular
	void OnRep_bIsUsingMonocular();                                                                                          // [0x1856010] Final|Native|Private 
};

/// Class /Script/WTL.WTLMonsterPawnAIController
/// Size: 0x00B0 (0x000328 - 0x0003D8)
class AWTLMonsterPawnAIController : public AAIController
{ 
public:
	unsigned char                                      UnknownData00_2[0x15];                                      // 0x0328   (0x0015)  MISSED
	EWTLAITeam                                         AITeam;                                                     // 0x033D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x033E   (0x0002)  MISSED
	UBehaviorTree*                                     BehaviorTree;                                               // 0x0340   (0x0008)  
	UBehaviorTree*                                     BehaviorTreeStealth;                                        // 0x0348   (0x0008)  
	bool                                               bIsCanDeepSleep;                                            // 0x0350   (0x0001)  
	bool                                               bIsNeutralCreature;                                         // 0x0351   (0x0001)  
	bool                                               AIInterface;                                                // 0x0352   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x0353   (0x0001)  MISSED
	float                                              StepHeight;                                                 // 0x0354   (0x0004)  
	float                                              MovementAcceptableRadius;                                   // 0x0358   (0x0004)  
	float                                              AttackRadius;                                               // 0x035C   (0x0004)  
	float                                              AttackRadiusInMove;                                         // 0x0360   (0x0004)  
	float                                              FrightRadius;                                               // 0x0364   (0x0004)  
	EWTLMonsterState                                   DefaultState;                                               // 0x0368   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0369   (0x0007)  MISSED
	TArray<EWTLMonsterState>                           StatesForExecuteFright;                                     // 0x0370   (0x0010)  
	TArray<EWTLMonsterState>                           StatesForReactionOnTakeDamage;                              // 0x0380   (0x0010)  
	EWTLMonsterState                                   SetStateFromTakeDamage;                                     // 0x0390   (0x0001)  
	EWTLMonsterState                                   SetStateIfCantSetTakeDamage;                                // 0x0391   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x0392   (0x0002)  MISSED
	FName                                              TagNoiseFromDamage;                                         // 0x0394   (0x0008)  
	float                                              MakeNoiseRadius;                                            // 0x039C   (0x0004)  
	float                                              HearingRadius;                                              // 0x03A0   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x03A4   (0x0004)  MISSED
	TArray<EWTLMonsterState>                           StateMonsterForWorkHearing;                                 // 0x03A8   (0x0010)  
	float                                              Delay;                                                      // 0x03B8   (0x0004)  
	float                                              DamageMultiplier;                                           // 0x03BC   (0x0004)  
	float                                              PeripheralVisionHalfAngleDegrees;                           // 0x03C0   (0x0004)  
	float                                              PeripheralVisionDistance;                                   // 0x03C4   (0x0004)  
	bool                                               UseAcceptableDistanceFollowTarget;                          // 0x03C8   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x03C9   (0x0003)  MISSED
	float                                              AcceptableDistanceFollowTarget;                             // 0x03CC   (0x0004)  
	float                                              MultiplierAcceptableDistance;                               // 0x03D0   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x03D4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMonsterPawnAIController.OnReceiveDamage
	void OnReceiveDamage(AController* DamageInstigator, float Damage, bool bIsFromSleep);                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawnAIController.OnHearing
	void OnHearing(AActor* EventInstigator, FName Tag);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawnAIController.OnActivityStateChanged
	void OnActivityStateChanged(EWTLMonsterActivityState& CurrentActivityState, EWTLMonsterActivityState& PreviousActivityState); // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawnAIController.NoSleep
	void NoSleep();                                                                                                          // [0x185ee00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawnAIController.K2_RestartLogic
	void K2_RestartLogic();                                                                                                  // [0x185f010] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawnAIController.GetLocationOwner
	FVector GetLocationOwner();                                                                                              // [0x185ec70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawnAIController.GetDangerLevel
	float GetDangerLevel(AWTLCharacter* WTLCharacter);                                                                       // [0x185ee30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMonsterPawnAIController.BPSetGenericTeamId
	void BPSetGenericTeamId(EWTLAITeam pTeamID);                                                                             // [0x185eba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterPawnAIController.BPGetGenericTeamId
	EWTLAITeam BPGetGenericTeamId();                                                                                         // [0x185eb80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPawnAIController.BP_OnHearing
	void BP_OnHearing(AActor* EventInstigator, FName Tag);                                                                   // [0x185f030] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLMonsterPawnAnimInstance
/// Size: 0x00E0 (0x0002C0 - 0x0003A0)
class UWTLMonsterPawnAnimInstance : public UAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_2[0xA0];                                      // 0x02C0   (0x00A0)  MISSED
	float                                              Speed;                                                      // 0x0360   (0x0004)  
	float                                              Aggression;                                                 // 0x0364   (0x0004)  
	bool                                               IsUseAxisMatching;                                          // 0x0368   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0369   (0x0003)  MISSED
	float                                              ForwardSpeed;                                               // 0x036C   (0x0004)  
	float                                              DirectionAngle;                                             // 0x0370   (0x0004)  
	float                                              RightSpeed;                                                 // 0x0374   (0x0004)  
	float                                              VelocitySpeed;                                              // 0x0378   (0x0004)  
	float                                              DeltaYaw;                                                   // 0x037C   (0x0004)  
	float                                              AnimationToSizeRate;                                        // 0x0380   (0x0004)  
	EWTLMonsterAttachState                             AttachedState;                                              // 0x0384   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0385   (0x0003)  MISSED
	FRotator                                           SlopeRotation;                                              // 0x0388   (0x000C)  
	char                                               IdleAnimIndex;                                              // 0x0394   (0x0001)  
	char                                               AttackAnimIndex;                                            // 0x0395   (0x0001)  
	EWTLMonsterTakeDamageType                          TakeDamageType;                                             // 0x0396   (0x0001)  
	EWTLMonsterAnimationState                          CurrentState;                                               // 0x0397   (0x0001)  
	EWTLMonsterActionType                              CurrentAction;                                              // 0x0398   (0x0001)  
	EWTLMonsterState                                   BlackboardState;                                            // 0x0399   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x039A   (0x0006)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMonsterPawnAnimInstance.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterPawnAnimInstance.K2_OnAnimationTrigger
	void K2_OnAnimationTrigger(FName TriggerName, bool Value, int32_t ID);                                                   // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/WTL.WTLMonsterPawnBase
/// Size: 0x0000 (0x000F10 - 0x000F10)
class AWTLMonsterPawnBase : public AWTLMonsterPawn
{ 
public:
};

/// Class /Script/WTL.WTLMonsterPawnInputMode
/// Size: 0x0000 (0x000F10 - 0x000F10)
class AWTLMonsterPawnInputMode : public AWTLMonsterPawn
{ 
public:
};

/// Class /Script/WTL.WTLMonsterPawnMovementComponent
/// Size: 0x0000 (0x000B00 - 0x000B00)
class UWTLMonsterPawnMovementComponent : public UCharacterMovementComponent
{ 
public:
};

/// Class /Script/WTL.WTLMonsterPerceptionComponent
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UWTLMonsterPerceptionComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_2[0x58];                                      // 0x00B0   (0x0058)  MISSED
	float                                              InRange;                                                    // 0x0108   (0x0004)  
	float                                              HalfAnglePitch;                                             // 0x010C   (0x0004)  
	float                                              HalfAngleYaw;                                               // 0x0110   (0x0004)  
	bool                                               CanSeeCharacter;                                            // 0x0114   (0x0001)  
	bool                                               CheckHitTraceCharacter;                                     // 0x0115   (0x0001)  
	bool                                               CanSeeMonster;                                              // 0x0116   (0x0001)  
	bool                                               CheckHitTraceMonster;                                       // 0x0117   (0x0001)  
	bool                                               CanSeeStuff;                                                // 0x0118   (0x0001)  
	bool                                               CheckHitTraceStuff;                                         // 0x0119   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x011A   (0x0006)  MISSED
	TArray<int32_t>                                    IgnoreStuffIDList;                                          // 0x0120   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLMonsterPerceptionComponent.GetNearestStuff
	AWTLPlaceableStuff* GetNearestStuff();                                                                                   // [0x185f7a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPerceptionComponent.GetNearestMonster
	AWTLMonsterPawn* GetNearestMonster();                                                                                    // [0x185f760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPerceptionComponent.GetNearestCharacter
	AWTLCharacter* GetNearestCharacter();                                                                                    // [0x185f8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterPerceptionComponent.GetNearestActor
	AActor* GetNearestActor();                                                                                               // [0x185f940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLMonsterProjectile
/// Size: 0x0078 (0x000220 - 0x000298)
class AWTLMonsterProjectile : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	float                                              InitialVelocity;                                            // 0x0228   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x022C   (0x0004)  MISSED
	UCurveFloat*                                       VelocityCurve;                                              // 0x0230   (0x0008)  
	UCurveFloat*                                       GravityCurve;                                               // 0x0238   (0x0008)  
	UParticleSystemComponent*                          ParticleBullet;                                             // 0x0240   (0x0008)  
	UParticleSystemComponent*                          ParticleBlood;                                              // 0x0248   (0x0008)  
	unsigned char                                      UnknownData02_5[0x20];                                      // 0x0250   (0x0020)  MISSED
	USphereComponent*                                  CollisionComp;                                              // 0x0270   (0x0008)  
	UWTLProjectileMovementComponent*                   ProjectileMovement;                                         // 0x0278   (0x0008)  
	UClass*                                            DamageType;                                                 // 0x0280   (0x0008)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0288   (0x0010)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMonsterProjectile.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x185fc40] Final|Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/WTL.WTLMonsterProjectileBase
/// Size: 0x0038 (0x000220 - 0x000258)
class AWTLMonsterProjectileBase : public AActor
{ 
public:
	USphereComponent*                                  CollisionComp;                                              // 0x0220   (0x0008)  
	UProjectileMovementComponent*                      ProjectileMovement;                                         // 0x0228   (0x0008)  
	FVector                                            RepStartLocation;                                           // 0x0230   (0x000C)  
	FVector                                            RepTargetLocation;                                          // 0x023C   (0x000C)  
	float                                              MinDamage;                                                  // 0x0248   (0x0004)  
	float                                              MaxDamage;                                                  // 0x024C   (0x0004)  
	float                                              RepAngleImpact;                                             // 0x0250   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0254   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMonsterProjectileBase.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1860320] Final|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLMonsterProjectileBase.K2_OnHit
	void K2_OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterProjectileBase.Init
	void Init(FVector start_location, FVector target_location, float min_damage, float max_damage, float angle_impact);      // [0x1860010] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/WTL.WTLMonsterSpawner
/// Size: 0x0180 (0x000280 - 0x000400)
class AWTLMonsterSpawner : public APawn
{ 
public:
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0280   (0x0030)  MISSED
	TEnumAsByte<ETraceTypeQuery>                       CollisionTraceQuery;                                        // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x02B1   (0x0007)  MISSED
	TArray<AWTLMonsterPawnAIController*>               m_ListControllers;                                          // 0x02B8   (0x0010)  
	EWTLFaction                                        SetFaction;                                                 // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x02C9   (0x0007)  MISSED
	AWTLMonsterPawn*                                   LastSpawnMonster;                                           // 0x02D0   (0x0008)  
	UClass*                                            m_SpawnClass;                                               // 0x02D8   (0x0008)  
	bool                                               IsCheckCanPlaceMonster;                                     // 0x02E0   (0x0001)  
	bool                                               IsSpawnMonsterFromCharacter;                                // 0x02E1   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x02E2   (0x0002)  MISSED
	int32_t                                            m_SpawnedMonstersLimit;                                     // 0x02E4   (0x0004)  
	int32_t                                            m_AllowableNumberOfLivingMonsters;                          // 0x02E8   (0x0004)  
	int32_t                                            m_CountMonstersPerCharacter;                                // 0x02EC   (0x0004)  
	int32_t                                            m_MaxMonstersAdd;                                           // 0x02F0   (0x0004)  
	float                                              m_StartDelay;                                               // 0x02F4   (0x0004)  
	float                                              m_MinSpawnInterval;                                         // 0x02F8   (0x0004)  
	float                                              m_MaxSpawnInterval;                                         // 0x02FC   (0x0004)  
	float                                              m_SpawnRadius;                                              // 0x0300   (0x0004)  
	float                                              m_DistanceFollowTarget;                                     // 0x0304   (0x0004)  
	bool                                               m_IsReactionOnSafeZone;                                     // 0x0308   (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0309   (0x0007)  MISSED
	char                                               m_MinimumLevel;                                             // 0x0310   (0x0001)  
	char                                               m_MaximumLevel;                                             // 0x0311   (0x0001)  
	bool                                               IsBurst;                                                    // 0x0312   (0x0001)  
	char                                               PercentDamageBurst;                                         // 0x0313   (0x0001)  
	float                                              TakeDamageBurst;                                            // 0x0314   (0x0004)  
	char                                               MinLevelBurst;                                              // 0x0318   (0x0001)  
	char                                               MaxLevelBurst;                                              // 0x0319   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x031A   (0x0002)  MISSED
	float                                              MultiplierParametersForMonster;                             // 0x031C   (0x0004)  
	FVector                                            m_NavigationProjectExtend;                                  // 0x0320   (0x000C)  
	EWTLMonsterSpawnerSpawnMethod                      m_SpawnPointRandomMethod;                                   // 0x032C   (0x0004)  
	bool                                               IsActivated;                                                // 0x0330   (0x0001)  
	bool                                               IsDeactivatedIfMonstersSpawned;                             // 0x0331   (0x0001)  
	bool                                               IsDeactivateAfterEachSpawn;                                 // 0x0332   (0x0001)  
	bool                                               IsSpawnCentr;                                               // 0x0333   (0x0001)  
	bool                                               IsSpawnOnlyFromPoints;                                      // 0x0334   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0335   (0x0003)  MISSED
	UBehaviorTree*                                     SetBehaviorTree;                                            // 0x0338   (0x0008)  
	float                                              LifespanAfterDeath;                                         // 0x0340   (0x0004)  
	float                                              MonsterLifeTime;                                            // 0x0344   (0x0004)  
	bool                                               IsApplySettings;                                            // 0x0348   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0349   (0x0003)  MISSED
	float                                              SetPeripheralVisionDistance;                                // 0x034C   (0x0004)  
	float                                              SetPeripheralVisionHalfAngleDegrees;                        // 0x0350   (0x0004)  
	float                                              SetFrightRadius;                                            // 0x0354   (0x0004)  
	float                                              SetHearingRange;                                            // 0x0358   (0x0004)  
	unsigned char                                      UnknownData08_5[0x4];                                       // 0x035C   (0x0004)  MISSED
	AActor*                                            TargetActor;                                                // 0x0360   (0x0008)  
	bool                                               UseMonsterExperience;                                       // 0x0368   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0369   (0x0003)  MISSED
	int32_t                                            MinMonsterExperienceDelta;                                  // 0x036C   (0x0004)  
	int32_t                                            MaxMonsterExperienceDelta;                                  // 0x0370   (0x0004)  
	float                                              MinMonsterExperienceTickInterval;                           // 0x0374   (0x0004)  
	float                                              MaxMonsterExperienceTickInterval;                           // 0x0378   (0x0004)  
	float                                              MinExperienceDropCountMultiplierDelta;                      // 0x037C   (0x0004)  
	float                                              MaxExperienceDropCountMultiplierDelta;                      // 0x0380   (0x0004)  
	float                                              MinExperienceDropChanceMultiplierDelta;                     // 0x0384   (0x0004)  
	float                                              MaxExperienceDropChanceMultiplierDelta;                     // 0x0388   (0x0004)  
	bool                                               IgnoreFortificationCommandCores;                            // 0x038C   (0x0001)  
	unsigned char                                      UnknownData10_5[0x57];                                      // 0x038D   (0x0057)  MISSED
	FVector                                            m_MonsterDeathPosition;                                     // 0x03E4   (0x000C)  
	TArray<FWTLMonsterSpawnerTaskInfo>                 SpawnerTask;                                                // 0x03F0   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLMonsterSpawner.SpawnLevel
	AWTLMonsterPawn* SpawnLevel(FVector& Location, char LevelMonster);                                                       // [0x1861fe0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.SpawnDeactivated
	void SpawnDeactivated();                                                                                                 // [0x1861af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.SpawnActivated
	void SpawnActivated();                                                                                                   // [0x1861da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.Spawn
	AWTLMonsterPawn* Spawn(FVector& Location);                                                                               // [0x1862130] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.SetSpawnClass
	void SetSpawnClass(UClass* SpawnClass);                                                                                  // [0x1861cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.SetMinLevel
	void SetMinLevel(char Value);                                                                                            // [0x1861bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.SetMaxLevel
	void SetMaxLevel(char Value);                                                                                            // [0x1861b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.OnSpawnMonster
	void OnSpawnMonster();                                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawner.OnDeadMonster
	void OnDeadMonster(AWTLMonsterPawn* Pawn);                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawner.K2_SpawnMonsters
	void K2_SpawnMonsters(FString MonstersInfo);                                                                             // [0x18611e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_SetTimeTillNextSpawn
	void K2_SetTimeTillNextSpawn(float Time);                                                                                // [0x18586d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_SetParameters
	void K2_SetParameters(int32_t LimitMonsters, float SpawnRadius, int32_t MinLevel, int32_t MaxLevel, float MultiParametersForMonster, float DistanceFollowTarget); // [0x18615d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_SetFactionForAllMyMonsters
	void K2_SetFactionForAllMyMonsters(EWTLFaction NewFaction);                                                              // [0x18612d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_SetEventPoint
	void K2_SetEventPoint(AWTLEventPoint* EventPoint);                                                                       // [0x18614f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_OnAllMonstersDead
	void K2_OnAllMonstersDead();                                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawner.K2_MonsterSpawned
	void K2_MonsterSpawned(AWTLMonsterPawn* Pawn);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawner.K2_KillAllMonsters
	void K2_KillAllMonsters();                                                                                               // [0x18619a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_GetEventPoint
	AWTLEventPoint* K2_GetEventPoint();                                                                                      // [0x1829d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_GenerateTasksFromText
	void K2_GenerateTasksFromText(FString Value);                                                                            // [0x1860cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_ExecuteTask
	bool K2_ExecuteTask(FWTLMonsterSpawnerTaskInfo TaskInfo);                                                                // [0x1860ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_ConvertMonstersToText
	FString K2_ConvertMonstersToText();                                                                                      // [0x1860c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.K2_CanPlaceMonster
	bool K2_CanPlaceMonster(FVector& Location, FVector& PlaceLocation);                                                      // [0x1860ab0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMonsterSpawner.K2_AddTask
	void K2_AddTask(FWTLMonsterSpawnerTaskInfo TaskInfo);                                                                    // [0x1860da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawner.IsAllMonstersInRadius
	bool IsAllMonstersInRadius(float Radius);                                                                                // [0x1861430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.IsAllMonsterDead
	bool IsAllMonsterDead();                                                                                                 // [0x1861dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetStartDelay
	float GetStartDelay();                                                                                                   // [0x1861f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetSpawnRadius
	float GetSpawnRadius();                                                                                                  // [0x1861ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetSpawnInterval
	float GetSpawnInterval();                                                                                                // [0x1861f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetSpawnedMonstersCount
	int32_t GetSpawnedMonstersCount();                                                                                       // [0x1861fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetMonstersLimit
	int32_t GetMonstersLimit();                                                                                              // [0x1861fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetMonsterClass
	UClass* GetMonsterClass();                                                                                               // [0x1861e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetMinimumLevel
	float GetMinimumLevel();                                                                                                 // [0x1861eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetMaximumLevel
	float GetMaximumLevel();                                                                                                 // [0x1861e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.GetAcnchorPoint
	FVector GetAcnchorPoint();                                                                                               // [0x1861e00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMonsterSpawner.CanSpawn
	bool CanSpawn();                                                                                                         // [0x1861e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLMonsterSpawnerAIController
/// Size: 0x0000 (0x000328 - 0x000328)
class AWTLMonsterSpawnerAIController : public AAIController
{ 
public:
};

/// Class /Script/WTL.WTLMonsterSpawnerEvent
/// Size: 0x00B8 (0x000220 - 0x0002D8)
class AWTLMonsterSpawnerEvent : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x88];                                      // 0x0220   (0x0088)  MISSED
	TArray<FWTLMonstersDataForSpawnBase>               ListMonstersInfo;                                           // 0x02A8   (0x0010)  
	bool                                               IsRandomSelection;                                          // 0x02B8   (0x0001)  
	bool                                               IsKillMonsters;                                             // 0x02B9   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x02BA   (0x0002)  MISSED
	float                                              DelayForActivation;                                         // 0x02BC   (0x0004)  
	TArray<AActor*>                                    SpawnPoints;                                                // 0x02C0   (0x0010)  
	bool                                               IsWaitingForActivationFromOutside;                          // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x02D1   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMonsterSpawnerEvent.SetEventPoint
	void SetEventPoint(AWTLEventPoint* EventPoint);                                                                          // [0x1863230] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.K2_OnSpawnMonster
	void K2_OnSpawnMonster(AWTLMonsterPawn* Monster);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.K2_OnSpawnDeactivate
	void K2_OnSpawnDeactivate();                                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.K2_OnSpawnActivated
	void K2_OnSpawnActivated(FWTLMonstersDataForSpawnBase SpawnData);                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.K2_OnMonsterDead
	void K2_OnMonsterDead(AWTLMonsterPawn* Monster);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.K2_CanBeActivated
	bool K2_CanBeActivated();                                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.IsActivated
	bool IsActivated();                                                                                                      // [0x1863310] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.GetLifetime
	float GetLifetime();                                                                                                     // [0x1863370] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.GetDurationActiveState
	float GetDurationActiveState();                                                                                          // [0x1863330] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.GetDelayForActiovation
	float GetDelayForActiovation();                                                                                          // [0x1863350] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMonsterSpawnerEvent.GetDataID
	int32_t GetDataID();                                                                                                     // [0x1863390] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/WTL.WTLMortar
/// Size: 0x0270 (0x000398 - 0x000608)
class AWTLMortar : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0398   (0x0028)  MISSED
	FWTLStorageContent                                 m_StorageContent;                                           // 0x03C0   (0x00A8)  
	USkeletalMeshComponent*                            RootMesh;                                                   // 0x0468   (0x0008)  
	USkeletalMeshComponent*                            Mesh;                                                       // 0x0470   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0478   (0x0008)  
	UArrowComponent*                                   DirectionArrow;                                             // 0x0480   (0x0008)  
	UFMODAudioComponent*                               ClickSound;                                                 // 0x0488   (0x0008)  
	UFMODAudioComponent*                               FireSound;                                                  // 0x0490   (0x0008)  
	AWTLCharacter*                                     m_Character;                                                // 0x0498   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x04A0   (0x0008)  MISSED
	UAnimMontage*                                      CharacterUsingMontage;                                      // 0x04A8   (0x0008)  
	UAnimMontage*                                      CharacterUsingMontageThirdPerson;                           // 0x04B0   (0x0008)  
	UAnimMontage*                                      CharacterFireMontage;                                       // 0x04B8   (0x0008)  
	UAnimMontage*                                      MortarFireMontage;                                          // 0x04C0   (0x0008)  
	UAnimMontage*                                      CharacterLoadMontage;                                       // 0x04C8   (0x0008)  
	UAnimMontage*                                      MortarLoadMontage;                                          // 0x04D0   (0x0008)  
	FWTLCameraLimits                                   CameraLimits;                                               // 0x04D8   (0x000C)  
	float                                              InclineStep;                                                // 0x04E4   (0x0004)  
	float                                              InclineBigStep;                                             // 0x04E8   (0x0004)  
	float                                              MinIncline;                                                 // 0x04EC   (0x0004)  
	float                                              MaxIncline;                                                 // 0x04F0   (0x0004)  
	float                                              RotationStep;                                               // 0x04F4   (0x0004)  
	float                                              RotationSpeed;                                              // 0x04F8   (0x0004)  
	float                                              MinYaw;                                                     // 0x04FC   (0x0004)  
	float                                              MaxYaw;                                                     // 0x0500   (0x0004)  
	float                                              MaxPitch;                                                   // 0x0504   (0x0004)  
	float                                              MinPitch;                                                   // 0x0508   (0x0004)  
	EWTLCaliber                                        AmmoCaliber;                                                // 0x050C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x050D   (0x0003)  MISSED
	UCurveFloat*                                       DistanceCurve;                                              // 0x0510   (0x0008)  
	UCurveFloat*                                       TimeCurve;                                                  // 0x0518   (0x0008)  
	TMap<int32_t, TWeakObjectPtr>                      ActorsToSpawn;                                              // 0x0520   (0x0050)  
	TMap<int32_t, TWeakObjectPtr>                      ExplosionsToSpawn;                                          // 0x0570   (0x0050)  
	bool                                               m_bIsLoaded;                                                // 0x05C0   (0x0001)  
	unsigned char                                      UnknownData03_5[0xF];                                       // 0x05C1   (0x000F)  MISSED
	float                                              m_Incline;                                                  // 0x05D0   (0x0004)  
	unsigned char                                      UnknownData04_5[0xC];                                       // 0x05D4   (0x000C)  MISSED
	float                                              m_YawRotation;                                              // 0x05E0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x24];                                      // 0x05E4   (0x0024)  MISSED


	/// Functions
	// Function /Script/WTL.WTLMortar.Server_StartUse
	void Server_StartUse(AWTLCharacter* Character);                                                                          // [0x1863fc0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMortar.Server_StartFire
	void Server_StartFire(AWTLCharacter* Character);                                                                         // [0x18640d0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLMortar.Server_ChangeIncline
	void Server_ChangeIncline(int8_t Direction, bool BigStep);                                                               // [0x18637c0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLMortar.OnUse
	void OnUse();                                                                                                            // [0x1863dd0] Final|Native|Public  
	// Function /Script/WTL.WTLMortar.OnStorageCheck
	void OnStorageCheck();                                                                                                   // [0x1863c40] Final|Native|Public  
	// Function /Script/WTL.WTLMortar.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x1863ef0] Final|Native|Private 
	// Function /Script/WTL.WTLMortar.OnRep_Incline
	void OnRep_Incline();                                                                                                    // [0x1863ed0] Final|Native|Private 
	// Function /Script/WTL.WTLMortar.OnFire
	void OnFire();                                                                                                           // [0x18639a0] Final|Native|Public  
	// Function /Script/WTL.WTLMortar.NetMulticast_StartFire
	void NetMulticast_StartFire();                                                                                           // [0x1863f80] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMortar.NetMulticast_Load
	void NetMulticast_Load();                                                                                                // [0x1863fa0] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLMortar.K2_GetSocketLocation
	FVector K2_GetSocketLocation(FName Socket);                                                                              // [0x1863630] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.GetYawRotation
	float GetYawRotation();                                                                                                  // [0x1863780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.GetIncline
	float GetIncline();                                                                                                      // [0x18637a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.ChangeInclineForward
	void ChangeInclineForward();                                                                                             // [0x1863980] Final|Native|Public  
	// Function /Script/WTL.WTLMortar.ChangeInclineBackward
	void ChangeInclineBackward();                                                                                            // [0x1863960] Final|Native|Public  
	// Function /Script/WTL.WTLMortar.BPGetYawRotation
	float BPGetYawRotation();                                                                                                // [0x1863740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.BPGetCharacter
	AWTLCharacter* BPGetCharacter();                                                                                         // [0x1863760] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLMortar.BPFire
	void BPFire();                                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLMortar.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0x1863af0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x1863a10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x1863c00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x1863b70] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x1863bc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLMortar.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x1863b30] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLMultipleItemPickupSpawnPoint
/// Size: 0x0000 (0x000220 - 0x000220)
class AWTLMultipleItemPickupSpawnPoint : public AActor
{ 
public:
};

/// Class /Script/WTL.WTLNetworkController
/// Size: 0x01E0 (0x000028 - 0x000208)
class UWTLNetworkController : public UObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x198];                                     // 0x0028   (0x0198)  MISSED
	FMulticastInlineDelegate                           OnConnected;                                                // 0x01C0   (0x0010)  
	FMulticastInlineDelegate                           OnConnectError;                                             // 0x01D0   (0x0010)  
	FMulticastInlineDelegate                           OnDisconnected;                                             // 0x01E0   (0x0010)  
	FMulticastInlineDelegate                           OnDisconnectOnConnectCanceled;                              // 0x01F0   (0x0010)  
	bool                                               bIsDedicatedServer;                                         // 0x0200   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0201   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLNetworkController.IsConnected
	bool IsConnected();                                                                                                      // [0x1865890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNetworkController.Disconnect
	void Disconnect();                                                                                                       // [0x18656f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNetworkController.Connect
	void Connect(FString Host, int32_t Port);                                                                                // [0x1865710] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLNPCActor
/// Size: 0x08E0 (0x000220 - 0x000B00)
class AWTLNPCActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x180];                                     // 0x0220   (0x0180)  MISSED
	int32_t                                            ID;                                                         // 0x03A0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x03A4   (0x0004)  MISSED
	FText                                              Name;                                                       // 0x03A8   (0x0018)  
	EWTLNPCType                                        NPCType;                                                    // 0x03C0   (0x0001)  
	EWTLFaction                                        NPCFaction;                                                 // 0x03C1   (0x0001)  
	bool                                               DealWithNeutrals;                                           // 0x03C2   (0x0001)  
	bool                                               CanUseFactionClothes;                                       // 0x03C3   (0x0001)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x03C4   (0x0004)  MISSED
	TMap<EWTLFaction, FWTLNPCFactionClothesInfo>       FactionClothesMap;                                          // 0x03C8   (0x0050)  
	bool                                               m_IsActive;                                                 // 0x0418   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0419   (0x0007)  MISSED
	UCapsuleComponent*                                 Capsule;                                                    // 0x0420   (0x0008)  
	USkeletalMeshComponent*                            Mesh;                                                       // 0x0428   (0x0008)  
	USkeletalMeshComponent*                            MeshHead;                                                   // 0x0430   (0x0008)  
	USkeletalMeshComponent*                            MeshTorso;                                                  // 0x0438   (0x0008)  
	USkeletalMeshComponent*                            MeshLegs;                                                   // 0x0440   (0x0008)  
	USkeletalMeshComponent*                            MeshFeet;                                                   // 0x0448   (0x0008)  
	USkeletalMeshComponent*                            MeshHeadSlot;                                               // 0x0450   (0x0008)  
	USkeletalMeshComponent*                            MeshTorsoSlot;                                              // 0x0458   (0x0008)  
	USkeletalMeshComponent*                            MeshLegsSlot;                                               // 0x0460   (0x0008)  
	USkeletalMeshComponent*                            MeshFeetSlot;                                               // 0x0468   (0x0008)  
	USkeletalMeshComponent*                            MeshBackpackSlot;                                           // 0x0470   (0x0008)  
	USkeletalMeshComponent*                            MeshGlassesSlot;                                            // 0x0478   (0x0008)  
	USphereComponent*                                  FrightSphereComponent;                                      // 0x0480   (0x0008)  
	UAudioComponent*                                   ReplicaAudio;                                               // 0x0488   (0x0008)  
	UFMODAudioComponent*                               ReplicaAudioComponent;                                      // 0x0490   (0x0008)  
	UDataTable*                                        ReplicaTable;                                               // 0x0498   (0x0008)  
	UDataTable*                                        CommonReplicaTable;                                         // 0x04A0   (0x0008)  
	TArray<FWTLQuestInfo>                              QuestArray;                                                 // 0x04A8   (0x0010)  
	TArray<FWTLQuestReplicas>                          QuestReplicaArray;                                          // 0x04B8   (0x0010)  
	bool                                               PlayRandomIdleAnim;                                         // 0x04C8   (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x04C9   (0x0007)  MISSED
	TArray<FWTLNPCAnimationInfo>                       AnimList;                                                   // 0x04D0   (0x0010)  
	unsigned char                                      UnknownData05_5[0x8];                                       // 0x04E0   (0x0008)  MISSED
	float                                              GreetingAnimationAlpha;                                     // 0x04E8   (0x0004)  
	float                                              GreetingAnimationIncrementRate;                             // 0x04EC   (0x0004)  
	float                                              GreetingAnimationDecrementRate;                             // 0x04F0   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x04F4   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        GreetingAudio;                                              // 0x04F8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        GoodByeAudio;                                               // 0x0520   (0x0028)  
	TWeakObjectPtr<UPhysicsAsset*>                     PhysicsAssetOverride;                                       // 0x0548   (0x0028)  
	unsigned char                                      UnknownData07_5[0xA8];                                      // 0x0570   (0x00A8)  MISSED
	bool                                               bShowOnMap;                                                 // 0x0618   (0x0001)  
	bool                                               bCanBuyItems;                                               // 0x0619   (0x0001)  
	unsigned char                                      UnknownData08_5[0x2];                                       // 0x061A   (0x0002)  MISSED
	float                                              BuyBasePriceMultiplier;                                     // 0x061C   (0x0004)  
	bool                                               bCanBuyWeaponItems;                                         // 0x0620   (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0621   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyWeaponItems;                                         // 0x0628   (0x0010)  
	TArray<int32_t>                                    BuyExceptWeaponItems;                                       // 0x0638   (0x0010)  
	bool                                               bCanBuyAmmoItems;                                           // 0x0648   (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x0649   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyAmmoItems;                                           // 0x0650   (0x0010)  
	TArray<int32_t>                                    BuyExceptAmmoItems;                                         // 0x0660   (0x0010)  
	bool                                               bCanBuyMedicineItems;                                       // 0x0670   (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x0671   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyMedicineItems;                                       // 0x0678   (0x0010)  
	TArray<int32_t>                                    BuyExceptMedicineItems;                                     // 0x0688   (0x0010)  
	bool                                               bCanBuyStuffItems;                                          // 0x0698   (0x0001)  
	unsigned char                                      UnknownData12_5[0x7];                                       // 0x0699   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyStuffItems;                                          // 0x06A0   (0x0010)  
	TArray<int32_t>                                    BuyExceptStuffItems;                                        // 0x06B0   (0x0010)  
	bool                                               bCanBuyClothesItems;                                        // 0x06C0   (0x0001)  
	unsigned char                                      UnknownData13_5[0x7];                                       // 0x06C1   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyClothesItems;                                        // 0x06C8   (0x0010)  
	TArray<int32_t>                                    BuyExceptClothesItems;                                      // 0x06D8   (0x0010)  
	bool                                               bCanBuyResourceItems;                                       // 0x06E8   (0x0001)  
	unsigned char                                      UnknownData14_5[0x7];                                       // 0x06E9   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyResourceItems;                                       // 0x06F0   (0x0010)  
	TArray<int32_t>                                    BuyExceptResourceItems;                                     // 0x0700   (0x0010)  
	bool                                               bCanBuyArtefactItems;                                       // 0x0710   (0x0001)  
	unsigned char                                      UnknownData15_5[0x7];                                       // 0x0711   (0x0007)  MISSED
	TArray<int32_t>                                    BuyOnlyArtefactItems;                                       // 0x0718   (0x0010)  
	TArray<int32_t>                                    BuyExceptArtefactItems;                                     // 0x0728   (0x0010)  
	bool                                               CanBuyStrangeArtefactItems;                                 // 0x0738   (0x0001)  
	bool                                               bCanSellItems;                                              // 0x0739   (0x0001)  
	unsigned char                                      UnknownData16_5[0x2];                                       // 0x073A   (0x0002)  MISSED
	float                                              SellBasePriceMultiplier;                                    // 0x073C   (0x0004)  
	float                                              GenerateSellItemsTimerInterval;                             // 0x0740   (0x0004)  
	unsigned char                                      UnknownData17_5[0x4];                                       // 0x0744   (0x0004)  MISSED
	TArray<FWTLGeneratedSellItemInfo>                  GeneratedSellItems;                                         // 0x0748   (0x0010)  
	FWTLSellItems                                      SellItems;                                                  // 0x0758   (0x0070)  
	TArray<FWTLSellItemsQuestRestrictions>             SellItemsQuestRestrictions;                                 // 0x07C8   (0x0010)  
	FWTLSellItems                                      CommissionSellItems;                                        // 0x07D8   (0x0070)  
	FWTLSellItems                                      ExpiredCommissionSellItems;                                 // 0x0848   (0x0070)  
	int32_t                                            CommissionSellItemsPageCount;                               // 0x08B8   (0x0004)  
	int32_t                                            CommissionSellItemsPerPage;                                 // 0x08BC   (0x0004)  
	int32_t                                            CommissionSellItemsCount;                                   // 0x08C0   (0x0004)  
	int32_t                                            CommissionSellItemsPageIndex;                               // 0x08C4   (0x0004)  
	TMap<EWTLItemType, int32_t>                        CommissionSellItemsTypesCount;                              // 0x08C8   (0x0050)  
	FWTLSellItems                                      CommissionSellItemsPage;                                    // 0x0918   (0x0070)  
	bool                                               bCanGetCommissionItems;                                     // 0x0988   (0x0001)  
	bool                                               bCanGetWeaponCommissionItems;                               // 0x0989   (0x0001)  
	bool                                               bCanGetAmmoCommissionItems;                                 // 0x098A   (0x0001)  
	bool                                               bCanGetMedicineCommissionItems;                             // 0x098B   (0x0001)  
	bool                                               bCanGetStuffCommissionItems;                                // 0x098C   (0x0001)  
	bool                                               bCanGetClothesCommissionItems;                              // 0x098D   (0x0001)  
	bool                                               bCanGetResourceCommissionItems;                             // 0x098E   (0x0001)  
	bool                                               bCanGetArtefactCommissionItems;                             // 0x098F   (0x0001)  
	float                                              CommissionPercent;                                          // 0x0990   (0x0004)  
	float                                              CommissionMinItemPrice;                                     // 0x0994   (0x0004)  
	float                                              CommissionDayPrice;                                         // 0x0998   (0x0004)  
	int32_t                                            CommissionMaxDaysCount;                                     // 0x099C   (0x0004)  
	int32_t                                            CommissionMaxItemCount;                                     // 0x09A0   (0x0004)  
	unsigned char                                      UnknownData18_5[0x4];                                       // 0x09A4   (0x0004)  MISSED
	TArray<FWTLNPCSupply>                              Supply;                                                     // 0x09A8   (0x0010)  
	TArray<int32_t>                                    SupplyListReplicaArray;                                     // 0x09B8   (0x0010)  
	TArray<int32_t>                                    SupplyBuyReplicaArray;                                      // 0x09C8   (0x0010)  
	int32_t                                            SupplyReturnReplicaID;                                      // 0x09D8   (0x0004)  
	int32_t                                            MaxSupplyExperience;                                        // 0x09DC   (0x0004)  
	bool                                               bHasPrivateStorage;                                         // 0x09E0   (0x0001)  
	unsigned char                                      UnknownData19_5[0x3];                                       // 0x09E1   (0x0003)  MISSED
	int32_t                                            PrivateStoragePrice;                                        // 0x09E4   (0x0004)  
	char                                               PrivateStorageSlotCount;                                    // 0x09E8   (0x0001)  
	char                                               MaxPrivateStorageSlotCount;                                 // 0x09E9   (0x0001)  
	unsigned char                                      UnknownData20_5[0x2];                                       // 0x09EA   (0x0002)  MISSED
	int32_t                                            PrivateStorageAdditionalSlotPrice;                          // 0x09EC   (0x0004)  
	int32_t                                            PrivateStorageSlotWeight;                                   // 0x09F0   (0x0004)  
	bool                                               bHasClanStorage;                                            // 0x09F4   (0x0001)  
	unsigned char                                      UnknownData21_5[0x3];                                       // 0x09F5   (0x0003)  MISSED
	int32_t                                            ClanStoragePrice;                                           // 0x09F8   (0x0004)  
	char                                               ClanStorageTabSlots;                                        // 0x09FC   (0x0001)  
	char                                               ClanStorageTabCount;                                        // 0x09FD   (0x0001)  
	char                                               ClanStorageMaxTabCount;                                     // 0x09FE   (0x0001)  
	unsigned char                                      UnknownData22_5[0x1];                                       // 0x09FF   (0x0001)  MISSED
	int32_t                                            ClanStorageAdditionalTabPrice;                              // 0x0A00   (0x0004)  
	unsigned char                                      UnknownData23_5[0x4];                                       // 0x0A04   (0x0004)  MISSED
	TArray<FWTLItemRequirement>                        ClanStorageAdditionalTabItemRequirements;                   // 0x0A08   (0x0010)  
	int32_t                                            ClanStorageSlotWeight;                                      // 0x0A18   (0x0004)  
	int32_t                                            ClanStorageItemsLogPageCount;                               // 0x0A1C   (0x0004)  
	int32_t                                            ClanStorageItemsLogRecordsPerPage;                          // 0x0A20   (0x0004)  
	int32_t                                            ClanStorageItemsLogRecordCount;                             // 0x0A24   (0x0004)  
	int32_t                                            ClanStorageItemsLogPageIndex;                               // 0x0A28   (0x0004)  
	unsigned char                                      UnknownData24_5[0x4];                                       // 0x0A2C   (0x0004)  MISSED
	TArray<FWTLClanStorageItemLogRecord>               ClanStorageItemsLogPage;                                    // 0x0A30   (0x0010)  
	int32_t                                            ClanStorageMoneyLogPageCount;                               // 0x0A40   (0x0004)  
	int32_t                                            ClanStorageMoneyLogRecordsPerPage;                          // 0x0A44   (0x0004)  
	int32_t                                            ClanStorageMoneyLogRecordCount;                             // 0x0A48   (0x0004)  
	int32_t                                            ClanStorageMoneyLogPageIndex;                               // 0x0A4C   (0x0004)  
	TArray<FWTLClanStorageMoneyLogRecord>              ClanStorageMoneyLogPage;                                    // 0x0A50   (0x0010)  
	bool                                               bCanRepairItems;                                            // 0x0A60   (0x0001)  
	bool                                               bCanRepairWeapon;                                           // 0x0A61   (0x0001)  
	unsigned char                                      UnknownData25_5[0x2];                                       // 0x0A62   (0x0002)  MISSED
	int32_t                                            MinWeaponConditionToRepair;                                 // 0x0A64   (0x0004)  
	bool                                               bCanRepairStuff;                                            // 0x0A68   (0x0001)  
	unsigned char                                      UnknownData26_5[0x3];                                       // 0x0A69   (0x0003)  MISSED
	int32_t                                            MinStuffConditionToRepair;                                  // 0x0A6C   (0x0004)  
	bool                                               bCanRepairClothes;                                          // 0x0A70   (0x0001)  
	unsigned char                                      UnknownData27_5[0x3];                                       // 0x0A71   (0x0003)  MISSED
	int32_t                                            MinClothesConditionToRepair;                                // 0x0A74   (0x0004)  
	int32_t                                            RepairExperience;                                           // 0x0A78   (0x0004)  
	float                                              RepairPriceMultiplier;                                      // 0x0A7C   (0x0004)  
	TArray<FWTLNPCIdleAnimation>                       IdleAnimations;                                             // 0x0A80   (0x0010)  
	FName                                              IdleAnimationSlotName;                                      // 0x0A90   (0x0008)  
	bool                                               LookAtTargetPlayer;                                         // 0x0A98   (0x0001)  
	unsigned char                                      UnknownData28_5[0x7];                                       // 0x0A99   (0x0007)  MISSED
	TArray<int32_t>                                    CharacterReplicaArrayMainDialog;                            // 0x0AA0   (0x0010)  
	TArray<int32_t>                                    CharacterReplicaArrayEndDialog;                             // 0x0AB0   (0x0010)  
	TArray<int32_t>                                    CharacterReplicaArrayReMainDialog;                          // 0x0AC0   (0x0010)  
	TArray<int32_t>                                    NPCReplicaArrayHaveJob;                                     // 0x0AD0   (0x0010)  
	bool                                               bCanCustomizeItems;                                         // 0x0AE0   (0x0001)  
	unsigned char                                      UnknownData29_5[0x3];                                       // 0x0AE1   (0x0003)  MISSED
	float                                              CustomizationScalarPrice;                                   // 0x0AE4   (0x0004)  
	float                                              CustomizationColorPrice;                                    // 0x0AE8   (0x0004)  
	unsigned char                                      UnknownData30_5[0xC];                                       // 0x0AEC   (0x000C)  MISSED
	char                                               IndexAnimIdle;                                              // 0x0AF8   (0x0001)  
	unsigned char                                      UnknownData31_5[0x3];                                       // 0x0AF9   (0x0003)  MISSED
	float                                              HeadRotationSpeed;                                          // 0x0AFC   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLNPCActor.TravelCharacterToSafeZone
	void TravelCharacterToSafeZone(AWTLCharacter* Character, int32_t SafeZoneID, float TravelTime, int32_t Price, EWTLNPCActionResult& Result); // [0x1867f10] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.TravelCharacterToPoint
	void TravelCharacterToPoint(AWTLCharacter* Character, FVector DestLocation, float TravelTime, int32_t Price, EWTLNPCActionResult& Result); // [0x18681c0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.TravelCharacterToLocation
	void TravelCharacterToLocation(AWTLCharacter* Character, int32_t LocationID, int32_t PortalID, float TravelTime, int32_t Price, EWTLNPCActionResult& Result); // [0x1867bd0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.TravelCharacterThroughPortal
	void TravelCharacterThroughPortal(AWTLCharacter* Character, int32_t PortalID, float TravelTime, int32_t Price, EWTLNPCActionResult& Result); // [0x1867f10] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.TakeMoneyFromCharacter
	void TakeMoneyFromCharacter(AWTLCharacter* Character, int32_t MoneyAmount, EWTLNPCActionResult& Result);                 // [0x1787aa0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowSupplyItemsDialog
	void ShowSupplyItemsDialog(AWTLCharacter* Character);                                                                    // [0x17941a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowSteamInventoryWidget
	void ShowSteamInventoryWidget(AWTLCharacter* Character);                                                                 // [0x1869110] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowRandomReplicaDialog
	void ShowRandomReplicaDialog(AWTLCharacter* Character, TArray<int32_t> NPCReplicaIDs, TArray<int32_t> CharacterReplicaIDArray); // [0x186b180] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowQuestRewardInDialog
	void ShowQuestRewardInDialog(AWTLCharacter* Character, int32_t QuestID);                                                 // [0x186b4b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowQuestDialog
	void ShowQuestDialog(AWTLCharacter* Character, FWTLQuestReplicas InQuestReplica);                                        // [0x186a420] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowQuestDecription
	void ShowQuestDecription(AWTLCharacter* Character, int32_t QuestID);                                                     // [0x186a2c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowPrivateStorage
	void ShowPrivateStorage(AWTLCharacter* Character);                                                                       // [0x18695d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowDialogNPCTakeQuest
	void ShowDialogNPCTakeQuest(AWTLCharacter* Character, int32_t QuestID, EWTLNPCCheckResult& Result);                      // [0x186bad0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowDialogNPCCompleteQuest
	void ShowDialogNPCCompleteQuest(AWTLCharacter* Character, int32_t QuestID, EWTLNPCCheckResult& Result);                  // [0x186b850] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowDialogIfQuestNotInState
	void ShowDialogIfQuestNotInState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState QuestState, int32_t NPCReplicaID, TArray<int32_t> CharacterReplicaIDArray); // [0x186a700] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowDialogIfQuestInState
	void ShowDialogIfQuestInState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState QuestState, int32_t NPCReplicaID, TArray<int32_t> CharacterReplicaIDArray); // [0x186ac40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowDialog
	void ShowDialog(AWTLCharacter* Character, int32_t NPCReplicaID, TArray<int32_t> CharacterReplicaIDArray);                // [0x186b610] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowClanStorage
	void ShowClanStorage(AWTLCharacter* Character);                                                                          // [0x1869230] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ShowClanNameRequestWidget
	void ShowClanNameRequestWidget(AWTLCharacter* Character);                                                                // [0x17941a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.SetQuestState
	void SetQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState State, EWTLNPCActionResult& Result);        // [0x1868ee0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.SetIsActive
	void SetIsActive(bool Value);                                                                                            // [0x1773b90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.SetCharacterFaction
	void SetCharacterFaction(AWTLCharacter* Character, EWTLFaction Faction, EWTLNPCActionResult& Result);                    // [0x18673f0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.RemovePrivateStorage
	void RemovePrivateStorage(AWTLCharacter* Character, EWTLNPCActionResult& Result);                                        // [0x178c090] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.RemoveClanStorage
	void RemoveClanStorage(AWTLCharacter* Character, EWTLNPCActionResult& Result);                                           // [0x178c090] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.OnSetFactionEvent
	void OnSetFactionEvent(EWTLFaction Faction);                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnSetFaction
	void OnSetFaction(EWTLFaction Faction);                                                                                  // [0x18760d0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLNPCActor.OnRep_NPCFaction
	void OnRep_NPCFaction();                                                                                                 // [0x1876240] Final|Native|Private 
	// Function /Script/WTL.WTLNPCActor.OnRep_IsActive
	void OnRep_IsActive();                                                                                                   // [0x18761a0] Final|Native|Private 
	// Function /Script/WTL.WTLNPCActor.OnPlayerSelectReplica
	void OnPlayerSelectReplica(AWTLCharacter* Character, int32_t ReplicaID);                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnPlayerSelectClanName
	void OnPlayerSelectClanName(AWTLCharacter* Character, FString ClanName);                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnNPCDialogActivated
	void OnNPCDialogActivated(AWTLCharacter* Character);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnMontageStarted
	void OnMontageStarted(UAnimMontage* Montage);                                                                            // [0x17941a0] Final|Native|Private 
	// Function /Script/WTL.WTLNPCActor.OnMontageEnded
	void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);                                                           // [0x1875f70] Final|Native|Private 
	// Function /Script/WTL.WTLNPCActor.OnIsActiveChanged
	void OnIsActiveChanged(bool IsActive);                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnFrightEndOverlap
	void OnFrightEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1875830] Final|Native|Public  
	// Function /Script/WTL.WTLNPCActor.OnFrightBeginOverlap
	void OnFrightBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1875aa0] Final|Native|Public|HasOutParms 
	// Function /Script/WTL.WTLNPCActor.OnCharacterTakeQuest
	void OnCharacterTakeQuest(AWTLCharacter* Character, int32_t QuestID);                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnCharacterExitFrightSphere
	void OnCharacterExitFrightSphere(AWTLCharacter* Character);                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnCharacterEntersFrightSphere
	void OnCharacterEntersFrightSphere(AWTLCharacter* Character);                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnCharacterCompleteQuest
	void OnCharacterCompleteQuest(AWTLCharacter* Character, int32_t QuestID);                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.K2_SetFaction
	void K2_SetFaction(EWTLFaction Value);                                                                                   // [0x1866cf0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.HealCharacter
	void HealCharacter(AWTLCharacter* Character, float MinValue, float MaxValue, int32_t Price, EWTLNPCActionResult& Result); // [0x1868470] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.HaveSupplyItems
	bool HaveSupplyItems(AWTLCharacter* Character);                                                                          // [0x186c120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GiveMoneyToCharacter
	void GiveMoneyToCharacter(AWTLCharacter* Character, int32_t MoneyAmount, EWTLNPCActionResult& Result);                   // [0x1787aa0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GiveItemToCharacter
	void GiveItemToCharacter(AWTLCharacter* Character, EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, int32_t Condition, EWTLNPCActionResult& Result); // [0x1798410] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GiveItemsToCharacter
	void GiveItemsToCharacter(AWTLCharacter* Character, TArray<FWTLGiveItemInfo> ItemsToGive, EWTLNPCActionResult& Result);  // [0x1797cb0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GetReplicaDialogGreeting
	void GetReplicaDialogGreeting(AWTLCharacter* Character, EWTLNPCCheckResult& Result, int32_t& QuestID, EWTLNPCReplicaAction& OutAction, int32_t& NPCReplicaID, TArray<int32_t>& CharacterReplicaArray); // [0x186bd50] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GetQuestState
	void GetQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState& QuestState);                               // [0x1875350] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GetQuestReplicas
	void GetQuestReplicas(AWTLCharacter* Character, int32_t InQuestID, FWTLQuestReplicas& OutQuestReplicas);                 // [0x1871060] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GetNewClanStorageTabPrice
	bool GetNewClanStorageTabPrice(AWTLCharacter* Character, int32_t& Price, TArray<FWTLItemRequirement>& Requirements);     // [0x1868720] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GetItemRepairPrice
	int32_t GetItemRepairPrice(AWTLCharacter* Character, EWTLItemType ItemType, int32_t ItemTypeID, int32_t Condition);      // [0x186c730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetIsActive
	bool GetIsActive();                                                                                                      // [0x1875f50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterSex
	EWTLSex GetCharacterSex(AWTLCharacter* Character);                                                                       // [0x186cdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterPrivateStorageSlotCount
	char GetCharacterPrivateStorageSlotCount(AWTLCharacter* Character);                                                      // [0x186dc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterMaxHealth
	float GetCharacterMaxHealth(AWTLCharacter* Character);                                                                   // [0x186d030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterLevel
	char GetCharacterLevel(AWTLCharacter* Character);                                                                        // [0x186f470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterInventoryAvailableSlotCount
	int32_t GetCharacterInventoryAvailableSlotCount(AWTLCharacter* Character);                                               // [0x186ccf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterHealthPercent
	float GetCharacterHealthPercent(AWTLCharacter* Character);                                                               // [0x186cef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterHealth
	float GetCharacterHealth(AWTLCharacter* Character);                                                                      // [0x186d120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterFaction
	void GetCharacterFaction(AWTLCharacter* Character, EWTLFaction& Faction);                                                // [0x17838e0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.GetCharacterClass
	EWTLCharacterClass GetCharacterClass(AWTLCharacter* Character);                                                          // [0x186f200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.GetCharacterClanStorageTabCount
	char GetCharacterClanStorageTabCount(AWTLCharacter* Character);                                                          // [0x186d460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.FillDataToQuestArray
	void FillDataToQuestArray();                                                                                             // [0x18756e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.EndDialog
	void EndDialog(AWTLCharacter* Character);                                                                                // [0x186a1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CreatePrivateStorage
	void CreatePrivateStorage(AWTLCharacter* Character, EWTLNPCActionResult& Result);                                        // [0x178c090] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CreateMapMarker
	void CreateMapMarker(AWTLCharacter* Character, FVector MarkerPosition, FString MarkerName, bool ShowOnMinimap, EWTLNPCActionResult& Result); // [0x1867750] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CreateClanStorage
	void CreateClanStorage(AWTLCharacter* Character, EWTLNPCActionResult& Result);                                           // [0x178c090] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CreateClan
	void CreateClan(AWTLCharacter* Character, FString ClanName, EWTLNPCActionResult& Result);                                // [0x1866da0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForTakeQuestWithDialog
	void CheckReplicaForTakeQuestWithDialog(AWTLCharacter* Character, int32_t ReplicaID, int32_t DialogReplicaID, TArray<int32_t> DialogReplicaArray, EWTLNPCCheckResult& Result); // [0x18733d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForTakeQuest
	void CheckReplicaForTakeQuest(AWTLCharacter* Character, int32_t ReplicaID, EWTLNPCCheckResult& Result, int32_t& QuestID, EWTLNPCReplicaAction& OutAction, EWTLNPCReason& Reason); // [0x1873770] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForSupply
	void CheckReplicaForSupply(AWTLCharacter* Character, int32_t ReplicaID, EWTLNPCCheckResult& Result);                     // [0x1871890] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForReMainDialog
	void CheckReplicaForReMainDialog(int32_t ReplicaID, EWTLNPCCheckResult& Result);                                         // [0x1872520] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForRejectQuest
	void CheckReplicaForRejectQuest(AWTLCharacter* Character, int32_t ReplicaID, EWTLNPCCheckResult& Result, int32_t& QuestID, EWTLNPCReplicaAction& OutAction); // [0x1873060] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForQuestDialog
	void CheckReplicaForQuestDialog(AWTLCharacter* Character, int32_t ReplicaID, EWTLNPCCheckResult& Result);                // [0x18726a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForQuestDescription
	void CheckReplicaForQuestDescription(AWTLCharacter* Character, int32_t ReplicaID, int32_t DescriptionReplicaID, int32_t ReturnReplicaID, EWTLNPCCheckResult& Result); // [0x1873b10] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForInfoQuest
	void CheckReplicaForInfoQuest(AWTLCharacter* Character, int32_t ReplicaID, EWTLNPCCheckResult& Result, FWTLQuestReplicas& OutQuestReplica); // [0x1871b80] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForHaveJob
	void CheckReplicaForHaveJob(int32_t ReplicaID, EWTLNPCCheckResult& Result);                                              // [0x1872220] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForEndDialog
	void CheckReplicaForEndDialog(int32_t ReplicaID, EWTLNPCCheckResult& Result);                                            // [0x18723a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForCompleteQuestWithDialog
	void CheckReplicaForCompleteQuestWithDialog(AWTLCharacter* Character, int32_t ReplicaID, int32_t DialogReplicaID, TArray<int32_t> DialogReplicaArray, EWTLNPCCheckResult& Result); // [0x1872870] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckReplicaForCompleteQuest
	void CheckReplicaForCompleteQuest(AWTLCharacter* Character, int32_t ReplicaID, EWTLNPCCheckResult& Result, int32_t& QuestID, EWTLNPCReplicaAction& OutAction, EWTLNPCReason& Reason); // [0x1872cc0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckCharacterHavePrivateStorage
	void CheckCharacterHavePrivateStorage(AWTLCharacter* Character, EWTLNPCCheckResult& Result);                             // [0x186df10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckCharacterHaveEnoughMoney
	void CheckCharacterHaveEnoughMoney(AWTLCharacter* Character, int32_t MoneyAmount, EWTLNPCCheckResult& Result);           // [0x186e490] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckCharacterHaveEnoughAvailableInventorySlots
	bool CheckCharacterHaveEnoughAvailableInventorySlots(AWTLCharacter* Character, int32_t Count);                           // [0x186cb90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CheckCharacterHaveClanStorage
	void CheckCharacterHaveClanStorage(AWTLCharacter* Character, EWTLNPCCheckResult& Result);                                // [0x186d700] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CheckCharacterHaveAvailableInventorySlots
	bool CheckCharacterHaveAvailableInventorySlots(AWTLCharacter* Character);                                                // [0x186ca90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CheckCharacterCanCreateClanStorage
	void CheckCharacterCanCreateClanStorage(AWTLCharacter* Character, EWTLNPCCheckResult& Result);                           // [0x186d220] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterHavePrivateStorage
	bool CharacterHavePrivateStorage(AWTLCharacter* Character);                                                              // [0x186e210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterHaveItems
	bool CharacterHaveItems(AWTLCharacter* Character, TArray<FWTLTakeItemInfo> Items);                                       // [0x186ea90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterHaveItem
	bool CharacterHaveItem(AWTLCharacter* Character, EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count);              // [0x186ecc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterHaveEnoughMoney
	bool CharacterHaveEnoughMoney(AWTLCharacter* Character, int32_t MoneyAmount);                                            // [0x186e7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterHaveClanStorage
	bool CharacterHaveClanStorage(AWTLCharacter* Character);                                                                 // [0x186da00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterCustomized
	bool CharacterCustomized(AWTLCharacter* Character);                                                                      // [0x186c9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterCanTakeQuestList
	void CharacterCanTakeQuestList(AWTLCharacter* Character, TArray<FWTLQuestInfo> InQuestArray, TArray<FWTLQuestInfo>& OutQuestArray); // [0x1871380] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanTakeQuest
	void CharacterCanTakeQuest(AWTLCharacter* Character, int32_t QuestID, EWTLNPCCheckResult& Result);                       // [0x1874ca0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanTakeAnyQuestFromQuestArray
	void CharacterCanTakeAnyQuestFromQuestArray(AWTLCharacter* Character, EWTLNPCCheckResult& Result);                       // [0x1874660] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanTakeAnyQuest
	void CharacterCanTakeAnyQuest(AWTLCharacter* Character, TArray<int32_t> QuestIDs, EWTLNPCCheckResult& Result);           // [0x18747b0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCreateClanStorage
	bool CharacterCanCreateClanStorage(AWTLCharacter* Character);                                                            // [0x186d370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCreateClan
	bool CharacterCanCreateClan(AWTLCharacter* Character, bool DoFullCheck);                                                 // [0x1866fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCompleteQuestList
	void CharacterCanCompleteQuestList(AWTLCharacter* Character, TArray<FWTLQuestInfo> InQuestArray, TArray<FWTLQuestInfo>& OutQuestArray); // [0x1870da0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCompleteQuestFromQuestArray
	void CharacterCanCompleteQuestFromQuestArray(AWTLCharacter* Character, int32_t QuestID, EWTLNPCCheckResult& Result);     // [0x1874200] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCompleteQuest
	void CharacterCanCompleteQuest(AWTLCharacter* Character, int32_t QuestID, EWTLNPCCheckResult& Result);                   // [0x1874480] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCompleteAnyQuestFromQuestArray
	void CharacterCanCompleteAnyQuestFromQuestArray(AWTLCharacter* Character, EWTLNPCCheckResult& Result);                   // [0x1873df0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CharacterCanCompleteAnyQuest
	void CharacterCanCompleteAnyQuest(AWTLCharacter* Character, TArray<int32_t> QuestIDs, EWTLNPCCheckResult& Result);       // [0x1873f40] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ChangeCharacterSex
	void ChangeCharacterSex(AWTLCharacter* Character, EWTLNPCActionResult& Result);                                          // [0x18675b0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.CanTrade
	bool CanTrade();                                                                                                         // [0x1875700] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLNPCActor.CanRepairItem
	bool CanRepairItem(AWTLCharacter* Character, EWTLItemType ItemType, int32_t ItemTypeID, int32_t Condition);              // [0x186c4a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLNPCActor.CanDialog
	bool CanDialog(AWTLCharacter* Character);                                                                                // [0x1875740] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.BranchCharacterClass
	void BranchCharacterClass(AWTLCharacter* Character, EWTLCharacterClass& CharacterClass);                                 // [0x186ef40] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.BP_CustomTrigger
	void BP_CustomTrigger(FName TriggerName);                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLNPCActor.BeginWeaponPartsExchange
	void BeginWeaponPartsExchange(AWTLCharacter* Character);                                                                 // [0x1869960] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.BeginTrade
	void BeginTrade(AWTLCharacter* Character);                                                                               // [0x186a110] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.BeginRepair
	void BeginRepair(AWTLCharacter* Character);                                                                              // [0x1869e80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.BeginItemsCustomization
	void BeginItemsCustomization(AWTLCharacter* Character);                                                                  // [0x1869bf0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.AddTabToClanStorage
	void AddTabToClanStorage(AWTLCharacter* Character, EWTLNPCActionResult& Result);                                         // [0x178c090] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.AddSlotsToPrivateStorage
	void AddSlotsToPrivateStorage(AWTLCharacter* Character, char SlotCount, EWTLNPCActionResult& Result);                    // [0x1868d30] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.AddReplicaIfQuestNotInState
	void AddReplicaIfQuestNotInState(AWTLCharacter* Character, TArray<int32_t> InReplicaArray, int32_t QuestID, EWTLQuestState QuestState, int32_t AddReplicaID, TArray<int32_t>& OutReplicaArray); // [0x1870280] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.AddReplicaIfQuestInState
	void AddReplicaIfQuestInState(AWTLCharacter* Character, TArray<int32_t> InReplicaArray, int32_t QuestID, EWTLQuestState QuestState, int32_t AddReplicaID, TArray<int32_t>& OutReplicaArray); // [0x1870810] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.AddReplicaIfCharacterCanTakeQuest
	void AddReplicaIfCharacterCanTakeQuest(AWTLCharacter* Character, TArray<int32_t> InReplicaArray, int32_t QuestID, int32_t AddReplicaID, TArray<int32_t>& OutReplicaArray); // [0x186fa70] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.AddReplicaIfCharacterCanCompleteQuest
	void AddReplicaIfCharacterCanCompleteQuest(AWTLCharacter* Character, TArray<int32_t> InReplicaArray, int32_t QuestID, int32_t AddReplicaID, TArray<int32_t>& OutReplicaArray); // [0x186f6e0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLNPCActor.ActivateDialog
	void ActivateDialog(AWTLCharacter* Character);                                                                           // [0x1875e50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLNPCAnimInstance
/// Size: 0x0040 (0x0002C0 - 0x000300)
class UWTLNPCAnimInstance : public UAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x02C0   (0x0008)  MISSED
	AWTLCharacter*                                     CharacterInRange;                                           // 0x02C8   (0x0008)  
	bool                                               HaveCharacterInRange;                                       // 0x02D0   (0x0001)  
	bool                                               NeedToTurnHeadToCharacter;                                  // 0x02D1   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x02D2   (0x0002)  MISSED
	FRotator                                           RotationHead;                                               // 0x02D4   (0x000C)  
	FVector                                            CharacterInRangeEyesPosition;                               // 0x02E0   (0x000C)  
	float                                              IndexIdleAnim;                                              // 0x02EC   (0x0004)  
	float                                              GreetingAnimationAlpha;                                     // 0x02F0   (0x0004)  
	float                                              MoveSpeedValue;                                             // 0x02F4   (0x0004)  
	float                                              MoveTurnValue;                                              // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02FC   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLNPCAnimInstance.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLNPCEnvironmentActor
/// Size: 0x0050 (0x000220 - 0x000270)
class AWTLNPCEnvironmentActor : public AActor
{ 
public:
	UCapsuleComponent*                                 Capsule;                                                    // 0x0220   (0x0008)  
	USkeletalMeshComponent*                            Mesh;                                                       // 0x0228   (0x0008)  
	USkeletalMeshComponent*                            MeshHead;                                                   // 0x0230   (0x0008)  
	USkeletalMeshComponent*                            MeshTorso;                                                  // 0x0238   (0x0008)  
	USkeletalMeshComponent*                            MeshLegs;                                                   // 0x0240   (0x0008)  
	USkeletalMeshComponent*                            MeshFeet;                                                   // 0x0248   (0x0008)  
	USkeletalMeshComponent*                            MeshHeadSlot;                                               // 0x0250   (0x0008)  
	USkeletalMeshComponent*                            MeshTorsoSlot;                                              // 0x0258   (0x0008)  
	USkeletalMeshComponent*                            MeshLegsSlot;                                               // 0x0260   (0x0008)  
	USkeletalMeshComponent*                            MeshFeetSlot;                                               // 0x0268   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLNPCEnvironmentActor.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLNPCPawnAI
/// Size: 0x00F8 (0x000280 - 0x000378)
class AWTLNPCPawnAI : public APawn
{ 
public:
	UCapsuleComponent*                                 Capsule;                                                    // 0x0280   (0x0008)  
	USkeletalMeshComponent*                            Mesh;                                                       // 0x0288   (0x0008)  
	USkeletalMeshComponent*                            MeshHead;                                                   // 0x0290   (0x0008)  
	USkeletalMeshComponent*                            MeshTorso;                                                  // 0x0298   (0x0008)  
	USkeletalMeshComponent*                            MeshLegs;                                                   // 0x02A0   (0x0008)  
	USkeletalMeshComponent*                            MeshFeet;                                                   // 0x02A8   (0x0008)  
	USkeletalMeshComponent*                            MeshHeadSlot;                                               // 0x02B0   (0x0008)  
	USkeletalMeshComponent*                            MeshTorsoSlot;                                              // 0x02B8   (0x0008)  
	USkeletalMeshComponent*                            MeshLegsSlot;                                               // 0x02C0   (0x0008)  
	USkeletalMeshComponent*                            MeshFeetSlot;                                               // 0x02C8   (0x0008)  
	UWTLPawnMovementComponent*                         MovementComponent;                                          // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x02D8   (0x0040)  MISSED
	float                                              CurrentSpeed;                                               // 0x0318   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x031C   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            WeaponPickup;                                               // 0x0320   (0x0028)  
	TWeakObjectPtr<UClass*>                            AmmoPickup;                                                 // 0x0348   (0x0028)  
	float                                              MinDamage;                                                  // 0x0370   (0x0004)  
	float                                              MaxDamage;                                                  // 0x0374   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLNPCPawnAI.Shot
	bool Shot(FTransform SpawnTransform);                                                                                    // [0x18791b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLNPCPawnAI.OnReplicatedMovement
	void OnReplicatedMovement(float DeltaTime);                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLNut
/// Size: 0x00B0 (0x000220 - 0x0002D0)
class AWTLNut : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	UStaticMeshComponent*                              MeshComp;                                                   // 0x0230   (0x0008)  
	UWTLProjectileMovementComponent*                   MovementComponent;                                          // 0x0238   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        SurfaceHitEvent;                                            // 0x0240   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   SurfaceHitParticles;                                        // 0x0268   (0x0028)  
	FVector                                            SurfaceHitParticleScale;                                    // 0x0290   (0x000C)  
	FName                                              SurfaceHitNoiseName;                                        // 0x029C   (0x0008)  
	float                                              m_ReplicatedInitialSpeed;                                   // 0x02A4   (0x0004)  
	FVector                                            m_ThrowVector;                                              // 0x02A8   (0x000C)  
	unsigned char                                      UnknownData01_6[0x1C];                                      // 0x02B4   (0x001C)  MISSED


	/// Functions
	// Function /Script/WTL.WTLNut.OnRep_ReplicatedInitialSpeed
	void OnRep_ReplicatedInitialSpeed();                                                                                     // [0x1879820] Final|Native|Private 
	// Function /Script/WTL.WTLNut.OnHit
	void OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x18794f0] Native|Public|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLNut.ChangeSpeedAndDirection
	void ChangeSpeedAndDirection(float Speed, FVector Direction);                                                            // [0x18793b0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/WTL.WTLNvidiaHighlightsBlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLNvidiaHighlightsBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/WTL.WTLNvidiaHighlightsLibrary
/// Size: 0x00C0 (0x000028 - 0x0000E8)
class UWTLNvidiaHighlightsLibrary : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xC0];                                      // 0x0028   (0x00C0)  MISSED
};

/// Class /Script/WTL.WTLObjectForActivation
/// Size: 0x0048 (0x000220 - 0x000268)
class AWTLObjectForActivation : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x2C];                                      // 0x0220   (0x002C)  MISSED
	bool                                               bIsMoveBack;                                                // 0x024C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x024D   (0x0003)  MISSED
	float                                              DelayMoveBack;                                              // 0x0250   (0x0004)  
	float                                              DurationMove;                                               // 0x0254   (0x0004)  
	AActor*                                            aEndPosition;                                               // 0x0258   (0x0008)  
	uint32_t                                           NumberActivationsToActivate;                                // 0x0260   (0x0004)  
	int32_t                                            DirectionActivate;                                          // 0x0264   (0x0004)  
};

/// Class /Script/WTL.WTLObstacleCourseEndVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class AWTLObstacleCourseEndVolume : public AVolume
{ 
public:
};

/// Class /Script/WTL.WTLObstacleCourseHelpButton
/// Size: 0x0050 (0x000220 - 0x000270)
class AWTLObstacleCourseHelpButton : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	int32_t                                            TutorialMessageID;                                          // 0x0228   (0x0004)  
	FVector                                            NextStageTeleportLocation;                                  // 0x022C   (0x000C)  
	float                                              NextStageTeleportRotationYaw;                               // 0x0238   (0x0004)  
	FVector                                            PreviousStageTeleportLocation;                              // 0x023C   (0x000C)  
	float                                              PreviousStageTeleportRotationYaw;                           // 0x0248   (0x0004)  
	FVector                                            EndPointTeleportLocation;                                   // 0x024C   (0x000C)  
	float                                              EndPointTeleportRotationYaw;                                // 0x0258   (0x0004)  
	FVector                                            ExitPointTeleportLocation;                                  // 0x025C   (0x000C)  
	float                                              ExitPointTeleportRotationYaw;                               // 0x0268   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x026C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLObstacleCourseTimeChecker
/// Size: 0x0020 (0x000258 - 0x000278)
class AWTLObstacleCourseTimeChecker : public AVolume
{ 
public:
	AWTLCharacter*                                     m_Character;                                                // 0x0258   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0260   (0x0004)  MISSED
	float                                              SkipObstacleCourseOfferTime;                                // 0x0264   (0x0004)  
	FVector                                            EndPointTeleportLocation;                                   // 0x0268   (0x000C)  
	float                                              EndPointTeleportRotationYaw;                                // 0x0274   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLObstacleCourseTimeChecker.OnVolumeEndOverlap
	void OnVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x187b980] Final|Native|Private 
	// Function /Script/WTL.WTLObstacleCourseTimeChecker.OnVolumeBeginOverlap
	void OnVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x187bbf0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLObstacleCourseTimeChecker.OnObstacleCourseSkipConfirmed
	void OnObstacleCourseSkipConfirmed();                                                                                    // [0x187b7f0] Final|Native|Private 
	// Function /Script/WTL.WTLObstacleCourseTimeChecker.OnMessageDialogHide
	void OnMessageDialogHide();                                                                                              // [0x187b7d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLOptionsActionKeyBinder
/// Size: 0x0070 (0x000260 - 0x0002D0)
class UWTLOptionsActionKeyBinder : public UUserWidget
{ 
public:
	UTextBlock*                                        tbActionName;                                               // 0x0260   (0x0008)  
	UButton*                                           btnMainActionKey;                                           // 0x0268   (0x0008)  
	UTextBlock*                                        tbMainActionKeyName;                                        // 0x0270   (0x0008)  
	unsigned char                                      UnknownData00_5[0x40];                                      // 0x0278   (0x0040)  MISSED
	FText                                              NoneKeyDefaultText;                                         // 0x02B8   (0x0018)  


	/// Functions
	// Function /Script/WTL.WTLOptionsActionKeyBinder.OnMainActionKeyBtnClick
	void OnMainActionKeyBtnClick();                                                                                          // [0x187c100] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsActionKeyBinder.OnAlternateActionKeyBtnClick
	void OnAlternateActionKeyBtnClick();                                                                                     // [0x187c0c0] Final|Native|Private 
};

/// Class /Script/WTL.WTLOptionsBase
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLOptionsBase : public UUserWidget
{ 
public:
	UWTLCommonMessageDialog*                           m_MessageDialogWidget;                                      // 0x0260   (0x0008)  
	UVerticalBox*                                      vbSettingsList;                                             // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0270   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLOptionsAudio
/// Size: 0x41918 (0x000288 - 0x041BA0)
class UWTLOptionsAudio : public UWTLOptionsBase
{ 
public:
	UWTLCommonComboBoxString*                          cbsAudioDrivers;                                            // 0x0288   (0x0008)  
	UWTLCommonComboBoxString*                          cbsSpeakerMode;                                             // 0x0290   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psAudioQualityLevel;                                        // 0x0298   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psMasterVolume;                                             // 0x02A0   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psMusicVolume;                                              // 0x02A8   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psEffectsVolume;                                            // 0x02B0   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psCharacterVoiceVolume;                                     // 0x02B8   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psSpeechVolume;                                             // 0x02C0   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psUIVolume;                                                 // 0x02C8   (0x0008)  
	UWTLCommonCheckBox*                                cbVOIP;                                                     // 0x02D0   (0x0008)  
	UWidgetSwitcher*                                   wsRecordDevices;                                            // 0x02D8   (0x0008)  
	UWTLCommonComboBoxString*                          cbsRecordDevices;                                           // 0x02E0   (0x0008)  
	UCanvasPanel*                                      cpMicCheck;                                                 // 0x02E8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnMicCheck;                                              // 0x02F0   (0x0008)  
	UCanvasPanel*                                      cpMicLoudness;                                              // 0x02F8   (0x0008)  
	UProgressBar*                                      pbMicLoudness;                                              // 0x0300   (0x0008)  
	unsigned char                                      UnknownData00_6[0x41898];                                   // 0x0308   (0x41898)  MISSED


	/// Functions
	// Function /Script/WTL.WTLOptionsAudio.OnRecordDevicesSelectionChanged
	void OnRecordDevicesSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                    // [0x187c2c0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsAudio.OnMicCheckButtonClicked
	void OnMicCheckButtonClicked();                                                                                          // [0x187c2a0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsAudio.OnAudioDriverSelectionChanged
	void OnAudioDriverSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                      // [0x187c480] Final|Native|Private 
};

/// Class /Script/WTL.WTLOptionsControl
/// Size: 0x0158 (0x000288 - 0x0003E0)
class UWTLOptionsControl : public UWTLOptionsBase
{ 
public:
	UScrollBox*                                        sbSettingsList;                                             // 0x0288   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psMouseSensitivity;                                         // 0x0290   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psMouseSensitivityInMiniGames;                              // 0x0298   (0x0008)  
	UWTLCommonCheckBox*                                cbMouseInvert;                                              // 0x02A0   (0x0008)  
	UHorizontalBox*                                    hbGamepadAimingSensitivity;                                 // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbGamepadAimingInvert;                                      // 0x02B0   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psGamepadAimingSensitivity;                                 // 0x02B8   (0x0008)  
	UWTLCommonCheckBox*                                cbGamepadAimingInvert;                                      // 0x02C0   (0x0008)  
	UWTLCommonCheckBox*                                cbChangeSensitivityOnAimValue;                              // 0x02C8   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psAimMode;                                                  // 0x02D0   (0x0008)  
	UWTLCommonCheckBox*                                cbAutomaticallyReloadValue;                                 // 0x02D8   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psCrouchMode;                                               // 0x02E0   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psSprintMode;                                               // 0x02E8   (0x0008)  
	UScrollBox*                                        sbInputSettings;                                            // 0x02F0   (0x0008)  
	UVerticalBox*                                      vbInputSettings;                                            // 0x02F8   (0x0008)  
	UVerticalBox*                                      vbMovement;                                                 // 0x0300   (0x0008)  
	UVerticalBox*                                      vbActions;                                                  // 0x0308   (0x0008)  
	UVerticalBox*                                      vbSlots;                                                    // 0x0310   (0x0008)  
	UVerticalBox*                                      vbHUD;                                                      // 0x0318   (0x0008)  
	UVerticalBox*                                      vbPDA;                                                      // 0x0320   (0x0008)  
	UVerticalBox*                                      vbCommunication;                                            // 0x0328   (0x0008)  
	UButton*                                           btnResetMainInputs;                                         // 0x0330   (0x0008)  
	unsigned char                                      UnknownData00_5[0x80];                                      // 0x0338   (0x0080)  MISSED
	TWeakObjectPtr<UClass*>                            ActionKeyBinderClass;                                       // 0x03B8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLOptionsControl.ResetMainInputs
	void ResetMainInputs();                                                                                                  // [0x187cc10] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.ResetButtonForResetOnAnotherAction
	void ResetButtonForResetOnAnotherAction();                                                                               // [0x187ca90] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.ResetAlternateInputs
	void ResetAlternateInputs();                                                                                             // [0x187cbf0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.OnMainInputsResetBtnClick
	void OnMainInputsResetBtnClick();                                                                                        // [0x187cc50] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.OnInputWantToReset
	void OnInputWantToReset(UWTLOptionsActionKeyBinder* ActionKeyBinder, bool IsMainKeyReset, FKey& ResetToKey);             // [0x187c830] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLOptionsControl.OnInputStartBind
	void OnInputStartBind(UWTLOptionsActionKeyBinder* ActionKeyBinder);                                                      // [0x187cab0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.OnAlternateInputsResetBtnClick
	void OnAlternateInputsResetBtnClick();                                                                                   // [0x187cc30] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.InputWantToResetConfirmed
	void InputWantToResetConfirmed();                                                                                        // [0x187ca50] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.InputBindConfirmed
	void InputBindConfirmed();                                                                                               // [0x187cbd0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsControl.InputBindCanceled
	void InputBindCanceled();                                                                                                // [0x187cbb0] Final|Native|Private 
};

/// Class /Script/WTL.WTLOptionsGame
/// Size: 0x0088 (0x000288 - 0x000310)
class UWTLOptionsGame : public UWTLOptionsBase
{ 
public:
	UEditableTextBox*                                  etbHost;                                                    // 0x0288   (0x0008)  
	UWTLCommonComboBoxString*                          cbsLanguage;                                                // 0x0290   (0x0008)  
	UWTLCommonCheckBox*                                cbEnableTutorial;                                           // 0x0298   (0x0008)  
	UWTLCommonCheckBox*                                cbTrackVehicleTurnWithCamera;                               // 0x02A0   (0x0008)  
	UWTLCommonCheckBox*                                cbRotateCameraInIdle;                                       // 0x02A8   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psCameraSpeedInIdle;                                        // 0x02B0   (0x0008)  
	UWTLCommonCheckBox*                                cbAutomaticallyAcceptMarkers;                               // 0x02B8   (0x0008)  
	UWTLCommonCheckBox*                                cbCacheAssetsOnStartup;                                     // 0x02C0   (0x0008)  
	UWTLCommonCheckBox*                                cbNVIDIAHighlights;                                         // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x02D0   (0x0040)  MISSED


	/// Functions
	// Function /Script/WTL.WTLOptionsGame.OnNVIDIAHighlightsCheckStateChanged
	void OnNVIDIAHighlightsCheckStateChanged(bool bIsChecked);                                                               // [0x187cff0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGame.OnLanguageSelectionChanged
	void OnLanguageSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                         // [0x187d1b0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGame.OnCacheAssetsOnStartupCheckStateChanged
	void OnCacheAssetsOnStartupCheckStateChanged(bool bIsChecked);                                                           // [0x187d0d0] Final|Native|Private 
};

/// Class /Script/WTL.WTLOptionsGraphic
/// Size: 0x0230 (0x000288 - 0x0004B8)
class UWTLOptionsGraphic : public UWTLOptionsBase
{ 
public:
	UCanvasPanel*                                      cpPrimaryMonitorInfo;                                       // 0x0288   (0x0008)  
	UTextBlock*                                        tbPrimaryMonitorName;                                       // 0x0290   (0x0008)  
	UWTLCommonButton*                                  ucBtnDisplayOnPrimaryMonitor;                               // 0x0298   (0x0008)  
	UWTLCommonComboBoxString*                          cbsRenderer;                                                // 0x02A0   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psResolution;                                               // 0x02A8   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psResolutionScale;                                          // 0x02B0   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psScreenMode;                                               // 0x02B8   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psVSync;                                                    // 0x02C0   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psFOV;                                                      // 0x02C8   (0x0008)  
	UImage*                                            imgTextureStreamingWarning;                                 // 0x02D0   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psTextureStreaming;                                         // 0x02D8   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psPoolSize;                                                 // 0x02E0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbFrameLimit;                                              // 0x02E8   (0x0008)  
	UWTLCommonCheckBox*                                cbFullDynamicLight;                                         // 0x02F0   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psFSR2;                                                     // 0x02F8   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psFSR2Sharpness;                                            // 0x0300   (0x0008)  
	UWTLCommonCheckBox*                                cbContactShadows;                                           // 0x0308   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psAmbientOcclusionType;                                     // 0x0310   (0x0008)  
	UImage*                                            imgCloudsTypeWarning;                                       // 0x0318   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psCloudsType;                                               // 0x0320   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psMotionBlur;                                               // 0x0328   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psMotionBlurQuality;                                        // 0x0330   (0x0008)  
	UWTLCommonCheckBox*                                cbTemporalAA;                                               // 0x0338   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psTemporalAAQuality;                                        // 0x0340   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psImageSharpness;                                           // 0x0348   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psOverallScalabilityLevel;                                  // 0x0350   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psViewDistance;                                             // 0x0358   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psAntiAliasing;                                             // 0x0360   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psPostProcessing;                                           // 0x0368   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psShadow;                                                   // 0x0370   (0x0008)  
	UWTLOptionsParameterSwitcher*                      psTexture;                                                  // 0x0378   (0x0008)  
	UWTLCommonCheckBox*                                cbShowEffectsAfterDeath;                                    // 0x0380   (0x0008)  
	UWTLCommonCheckBox*                                cbShowWindEffects;                                          // 0x0388   (0x0008)  
	unsigned char                                      UnknownData00_5[0x110];                                     // 0x0390   (0x0110)  MISSED
	FText                                              TextureStreamingWarningText;                                // 0x04A0   (0x0018)  


	/// Functions
	// Function /Script/WTL.WTLOptionsGraphic.OnTextureStreamingChanged
	void OnTextureStreamingChanged(int32_t CurrentIndex, FString Prefix);                                                    // [0x187d750] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnScreenModeChanged
	void OnScreenModeChanged(int32_t CurrentIndex, FString Prefix);                                                          // [0x187dc00] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnResolutionChanged
	void OnResolutionChanged(int32_t CurrentIndex, FString Prefix);                                                          // [0x187dd90] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnRendererChanged
	void OnRendererChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                                  // [0x187df10] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnQualityLevelChanged
	void OnQualityLevelChanged(int32_t CurrentIndex, FString Prefix);                                                        // [0x187d8e0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnDisplayOnPrimaryMonitorBtnClicked
	void OnDisplayOnPrimaryMonitorBtnClicked();                                                                              // [0x187e0d0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnCommonQualityLevelChanged
	void OnCommonQualityLevelChanged(int32_t CurrentIndex, FString Prefix);                                                  // [0x187da70] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsGraphic.OnCloudsTypeChanged
	void OnCloudsTypeChanged(int32_t CurrentIndex, FString Prefix);                                                          // [0x187d520] Final|Native|Private 
};

/// Class /Script/WTL.WTLOptionsIdentification
/// Size: 0x0058 (0x000288 - 0x0002E0)
class UWTLOptionsIdentification : public UWTLOptionsBase
{ 
public:
	UWTLCommonCheckBox*                                cbPlayersIdentification;                                    // 0x0288   (0x0008)  
	UWTLCommonCheckBox*                                cbMonstersIdentification;                                   // 0x0290   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbMonstersSimplifiedIdentificationEnableDistance;          // 0x0298   (0x0008)  
	UWTLCommonCheckBox*                                cbNPCIdentification;                                        // 0x02A0   (0x0008)  
	UWTLCommonCheckBox*                                cbAlwaysShowGroupAndClanMembers;                            // 0x02A8   (0x0008)  
	UWTLCommonCheckBox*                                cbAlwaysShowFriendlyDevices;                                // 0x02B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbSimplifiedIdentificationEnableDistance;                  // 0x02B8   (0x0008)  
	UWTLOptionsParameterSliderPercent*                 psIdentificationTransparency;                               // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x02C8   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLOptionsInterface
/// Size: 0x0130 (0x000288 - 0x0003B8)
class UWTLOptionsInterface : public UWTLOptionsBase
{ 
public:
	UWTLCommonCheckBox*                                cbCrosshairVisibility;                                      // 0x0288   (0x0008)  
	UWTLCommonColorButton*                             ucCrosshairColorBtn;                                        // 0x0290   (0x0008)  
	UWTLCommonCheckBox*                                cbPlayerStatusVisibility;                                   // 0x0298   (0x0008)  
	UWTLCommonCheckBox*                                cbWeaponInfoVisibility;                                     // 0x02A0   (0x0008)  
	UWTLCommonCheckBox*                                cbFastAccessSlotsVisibility;                                // 0x02A8   (0x0008)  
	UWTLCommonCheckBox*                                cbLevelBarVisibility;                                       // 0x02B0   (0x0008)  
	UWTLCommonCheckBox*                                cbMinimapVisibility;                                        // 0x02B8   (0x0008)  
	UWTLCommonCheckBox*                                cbMinimapTimeVisibility;                                    // 0x02C0   (0x0008)  
	UWTLCommonCheckBox*                                cbShowMinimapLocalTime;                                     // 0x02C8   (0x0008)  
	UWTLCommonCheckBox*                                cbTextChatAreaVisibility;                                   // 0x02D0   (0x0008)  
	UWTLCommonCheckBox*                                cbFPSCounterVisibility;                                     // 0x02D8   (0x0008)  
	UWTLCommonCheckBox*                                cbShowDamageIdentification;                                 // 0x02E0   (0x0008)  
	UWTLCommonCheckBox*                                cbCollapseChatAfterMessageSentValue;                        // 0x02E8   (0x0008)  
	UWTLCommonCheckBox*                                cbSelectCommonFilterAfterCollapseChat;                      // 0x02F0   (0x0008)  
	UWTLCommonCheckBox*                                cbFilterCensorshipInChat;                                   // 0x02F8   (0x0008)  
	UHorizontalBox*                                    hbUseStrongDumbCensorshipFilter;                            // 0x0300   (0x0008)  
	UWTLCommonCheckBox*                                cbUseStrongDumbCensorshipFilter;                            // 0x0308   (0x0008)  
	UWTLCommonCheckBox*                                cbHighLightQuestItemsOnlyForActiveQuest;                    // 0x0310   (0x0008)  
	UWTLCommonCheckBox*                                cbShowActiveQuestInfoWhenPDAQuestLogShow;                   // 0x0318   (0x0008)  
	UWTLCommonCheckBox*                                cbShowUnarmedCrosshair;                                     // 0x0320   (0x0008)  
	UWTLCommonCheckBox*                                cbShowUseHint;                                              // 0x0328   (0x0008)  
	UWTLCommonCheckBox*                                cbShowCharacterPreviewInInventory;                          // 0x0330   (0x0008)  
	UWTLCommonCheckBox*                                cbShowDamagePointerWithHiddenHUD;                           // 0x0338   (0x0008)  
	UWTLCommonCheckBox*                                cbHideFastAccessSlotsAfterSomeTime;                         // 0x0340   (0x0008)  
	UWTLCommonCheckBox*                                cbShowOptionalWarnings;                                     // 0x0348   (0x0008)  
	UWTLCommonCheckBox*                                cbShowNotEnoughStaminaToJumpWarning;                        // 0x0350   (0x0008)  
	UWTLCommonCheckBox*                                cbShowNotEnoughStaminaToSprintWarning;                      // 0x0358   (0x0008)  
	UWTLCommonCheckBox*                                cbShowCannotSprintInventoryOverloadWarning;                 // 0x0360   (0x0008)  
	UWTLCommonCheckBox*                                cbShowNoNutsInInventoryToThrowWarning;                      // 0x0368   (0x0008)  
	unsigned char                                      UnknownData00_6[0x48];                                      // 0x0370   (0x0048)  MISSED


	/// Functions
	// Function /Script/WTL.WTLOptionsInterface.OnFilterCensorshipInChatCheckStateChanged
	void OnFilterCensorshipInChatCheckStateChanged(bool bIsChecked);                                                         // [0x187ee10] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsInterface.OnCrosshairColorBtnClicked
	void OnCrosshairColorBtnClicked(FGeometry& BtnGeometry, FPointerEvent& InMouseEvent);                                    // [0x187eef0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLOptionsItemBackground
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLOptionsItemBackground : public UUserWidget
{ 
public:
	UBorder*                                           bBackground;                                                // 0x0260   (0x0008)  
	UWTLOptionsBase*                                   m_OptionsWidget;                                            // 0x0268   (0x0008)  
	FLinearColor                                       BackgroundBrushColor;                                       // 0x0270   (0x0010)  
};

/// Class /Script/WTL.WTLOptionsParameterItem
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLOptionsParameterItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbParameter;                                                // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLOptionsParameterSliderBase
/// Size: 0x0040 (0x000290 - 0x0002D0)
class UWTLOptionsParameterSliderBase : public UWTLCommonBase
{ 
public:
	UTextBlock*                                        tbParameterValue;                                           // 0x0290   (0x0008)  
	USlider*                                           slParameter;                                                // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02A0   (0x0028)  MISSED
	bool                                               UseRoundToStepValue;                                        // 0x02C8   (0x0001)  
	bool                                               RoundFractionalDigits;                                      // 0x02C9   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x02CA   (0x0006)  MISSED


	/// Functions
	// Function /Script/WTL.WTLOptionsParameterSliderBase.OnSliderValueChanged
	void OnSliderValueChanged(float Value);                                                                                  // [0x187f460] Final|Native|Protected 
};

/// Class /Script/WTL.WTLOptionsParameterSliderPercent
/// Size: 0x0008 (0x0002D0 - 0x0002D8)
class UWTLOptionsParameterSliderPercent : public UWTLOptionsParameterSliderBase
{ 
public:
	UTextBlock*                                        tbParameterPercentText;                                     // 0x02D0   (0x0008)  
};

/// Class /Script/WTL.WTLOptionsParameterSwitcher
/// Size: 0x0058 (0x0002C8 - 0x000320)
class UWTLOptionsParameterSwitcher : public UWTLCommonSwitcher
{ 
public:
	UWidgetSwitcher*                                   wsParameter;                                                // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x02D0   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            ParamaterItemClass;                                         // 0x02E0   (0x0028)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0308   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLOptionsPostProcess
/// Size: 0x0040 (0x000288 - 0x0002C8)
class UWTLOptionsPostProcess : public UWTLOptionsBase
{ 
public:
	UWTLOptionsParameterSliderPercent*                 psGamma;                                                    // 0x0288   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psContrast;                                                 // 0x0290   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psRedBalance;                                               // 0x0298   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psGreenBalance;                                             // 0x02A0   (0x0008)  
	UWTLOptionsParameterSliderBase*                    psBlueBalance;                                              // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x02B0   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLOptionsPostProcess.OnRedBalanceValueChanged
	void OnRedBalanceValueChanged(float CurrentValue);                                                                       // [0x187fb90] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsPostProcess.OnGreenBalanceValueChanged
	void OnGreenBalanceValueChanged(float CurrentValue);                                                                     // [0x187fa60] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsPostProcess.OnGammaValueChanged
	void OnGammaValueChanged(float CurrentValue);                                                                            // [0x187fdf0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsPostProcess.OnContrastValueChanged
	void OnContrastValueChanged(float CurrentValue);                                                                         // [0x187fcc0] Final|Native|Private 
	// Function /Script/WTL.WTLOptionsPostProcess.OnBlueBalanceValueChanged
	void OnBlueBalanceValueChanged(float CurrentValue);                                                                      // [0x187f930] Final|Native|Private 
};

/// Class /Script/WTL.WTLPawnMovementComponent
/// Size: 0x0018 (0x000138 - 0x000150)
class UWTLPawnMovementComponent : public UPawnMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0138   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLPDA
/// Size: 0x0000 (0x000220 - 0x000220)
class AWTLPDA : public AActor
{ 
public:
};

/// Class /Script/WTL.WTLPDAAchievementItemBase
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UWTLPDAAchievementItemBase : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0260   (0x0048)  MISSED
};

/// Class /Script/WTL.WTLPDAAchievementItem
/// Size: 0x0068 (0x0002A8 - 0x000310)
class UWTLPDAAchievementItem : public UWTLPDAAchievementItemBase
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbAchievedPercentage;                                       // 0x02B0   (0x0008)  
	UTextBlock*                                        tbRarityStatus;                                             // 0x02B8   (0x0008)  
	UTextBlock*                                        tbPreAchievedText;                                          // 0x02C0   (0x0008)  
	UTextBlock*                                        tbAchievedPercentage;                                       // 0x02C8   (0x0008)  
	UTextBlock*                                        tbOfPlayers;                                                // 0x02D0   (0x0008)  
	UTextBlock*                                        tbDescription;                                              // 0x02D8   (0x0008)  
	UPanelWidget*                                      pwProgress;                                                 // 0x02E0   (0x0008)  
	UProgressBar*                                      pbProgress;                                                 // 0x02E8   (0x0008)  
	UTextBlock*                                        tbCurrentValue;                                             // 0x02F0   (0x0008)  
	UTextBlock*                                        tbNeedValue;                                                // 0x02F8   (0x0008)  
	UBorder*                                           bData;                                                      // 0x0300   (0x0008)  
	UBorder*                                           bProgress;                                                  // 0x0308   (0x0008)  
};

/// Class /Script/WTL.WTLPDAAchievementItemSimple
/// Size: 0x0038 (0x0002A8 - 0x0002E0)
class UWTLPDAAchievementItemSimple : public UWTLPDAAchievementItemBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x02A8   (0x0008)  MISSED
	UWTLPDAAchievementItemSimpleToolTip*               m_AchievementItemSimpleToolTip;                             // 0x02B0   (0x0008)  
	TWeakObjectPtr<UClass*>                            AchievementItemSimpleToolTipWidgetClass;                    // 0x02B8   (0x0028)  
};

/// Class /Script/WTL.WTLPDAAchievementItemSimpleToolTip
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLPDAAchievementItemSimpleToolTip : public UUserWidget
{ 
public:
	UBorder*                                           bBorder;                                                    // 0x0260   (0x0008)  
	UWTLPDAAchievementItem*                            ucAchievementsItemForToolTip;                               // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLPDABase
/// Size: 0x0020 (0x000268 - 0x000288)
class UWTLPDABase : public UWTLHUDWidgetBase
{ 
public:
	UBorder*                                           bTabInterface;                                              // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0270   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLPDAAchievements
/// Size: 0x0170 (0x000288 - 0x0003F8)
class UWTLPDAAchievements : public UWTLPDABase
{ 
public:
	UTextBlock*                                        tbEarnedAchievementsCount;                                  // 0x0288   (0x0008)  
	UTextBlock*                                        tbTotalAchievementsCount;                                   // 0x0290   (0x0008)  
	UTextBlock*                                        tbEarnedAchievementsPercent;                                // 0x0298   (0x0008)  
	UWTLCommonTextCheckBox*                            cbSimplifiedView;                                           // 0x02A0   (0x0008)  
	UWidgetSwitcher*                                   wsAchievements;                                             // 0x02A8   (0x0008)  
	UScrollBox*                                        sbAchievements;                                             // 0x02B0   (0x0008)  
	UScrollBox*                                        sbAchievementsSimple;                                       // 0x02B8   (0x0008)  
	UWrapBox*                                          wbAchievements;                                             // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x58];                                      // 0x02C8   (0x0058)  MISSED
	UPanelWidget*                                      m_CurrentPanelWidget;                                       // 0x0320   (0x0008)  
	UScrollBox*                                        m_CurrentScrollBoxWidget;                                   // 0x0328   (0x0008)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x0330   (0x0010)  MISSED
	TArray<UWTLPDAAchievementItemBase*>                m_AchievementItems;                                         // 0x0340   (0x0010)  
	UWTLPDAAchievementsHiddenCountBase*                m_AchievementsHiddenCount;                                  // 0x0350   (0x0008)  
	TWeakObjectPtr<UClass*>                            AchievementItemWidgetClass;                                 // 0x0358   (0x0028)  
	TWeakObjectPtr<UClass*>                            AchievementItemSimpleWidgetClass;                           // 0x0380   (0x0028)  
	TWeakObjectPtr<UClass*>                            AchievementsHiddenCountWidgetClass;                         // 0x03A8   (0x0028)  
	TWeakObjectPtr<UClass*>                            AchievementsHiddenCountSimpleWidgetClass;                   // 0x03D0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDAAchievements.UpdateRarityAndAchievedPercentage
	void UpdateRarityAndAchievedPercentage();                                                                                // [0x1880d40] Final|Native|Private 
	// Function /Script/WTL.WTLPDAAchievements.OnSimplifiedViewCheckStateChanged
	void OnSimplifiedViewCheckStateChanged(bool bIsChecked);                                                                 // [0x1880c60] Final|Native|Private 
	// Function /Script/WTL.WTLPDAAchievements.OnAchievementsSimpleScrollBoxScrolled
	void OnAchievementsSimpleScrollBoxScrolled(float CurrentOffset);                                                         // [0x1880a60] Final|Native|Private 
	// Function /Script/WTL.WTLPDAAchievements.OnAchievementsScrollBoxScrolled
	void OnAchievementsScrollBoxScrolled(float CurrentOffset);                                                               // [0x1880b60] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAAchievementsHiddenCountBase
/// Size: 0x0010 (0x000260 - 0x000270)
class UWTLPDAAchievementsHiddenCountBase : public UUserWidget
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0260   (0x0008)  
	UTextBlock*                                        tbCount1;                                                   // 0x0268   (0x0008)  
};

/// Class /Script/WTL.WTLPDAAchievementsHiddenCount
/// Size: 0x0008 (0x000270 - 0x000278)
class UWTLPDAAchievementsHiddenCount : public UWTLPDAAchievementsHiddenCountBase
{ 
public:
	UTextBlock*                                        tbCount2;                                                   // 0x0270   (0x0008)  
};

/// Class /Script/WTL.WTLPDACharacterInfo
/// Size: 0x03E8 (0x000288 - 0x000670)
class UWTLPDACharacterInfo : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsSex;                                                      // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsFemalePlayerClass;                                        // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsMalePlayerClass;                                          // 0x0298   (0x0008)  
	UTextBlock*                                        tbPvPStatus;                                                // 0x02A0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnSetPvPMode;                                            // 0x02A8   (0x0008)  
	UBorder*                                           bMainInfo;                                                  // 0x02B0   (0x0008)  
	UBorder*                                           bHealthStamina;                                             // 0x02B8   (0x0008)  
	UBorder*                                           bHungerThirst;                                              // 0x02C0   (0x0008)  
	UBorder*                                           bParameters;                                                // 0x02C8   (0x0008)  
	UBorder*                                           bExperience;                                                // 0x02D0   (0x0008)  
	UBorder*                                           bReputation;                                                // 0x02D8   (0x0008)  
	UBorder*                                           bFraction;                                                  // 0x02E0   (0x0008)  
	UTextBlock*                                        tbNameCaption;                                              // 0x02E8   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x02F0   (0x0008)  
	UTextBlock*                                        tbSexCaption;                                               // 0x02F8   (0x0008)  
	UTextBlock*                                        tbSex;                                                      // 0x0300   (0x0008)  
	UTextBlock*                                        tbCreationDateCaption;                                      // 0x0308   (0x0008)  
	UTextBlock*                                        tbCreationDate;                                             // 0x0310   (0x0008)  
	UTextBlock*                                        tbClassCaption;                                             // 0x0318   (0x0008)  
	UTextBlock*                                        tbClass;                                                    // 0x0320   (0x0008)  
	UTextBlock*                                        tbLevelCaption;                                             // 0x0328   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x0330   (0x0008)  
	UTextBlock*                                        tbBalanceCaption;                                           // 0x0338   (0x0008)  
	UTextBlock*                                        tbBalance;                                                  // 0x0340   (0x0008)  
	UWTLCommonImageButton*                             ucBtnFounder;                                               // 0x0348   (0x0008)  
	UWTLCommonImageButton*                             ucBtnClanImage;                                             // 0x0350   (0x0008)  
	UTextBlock*                                        tbClanNameCaption;                                          // 0x0358   (0x0008)  
	UTextBlock*                                        tbClanName;                                                 // 0x0360   (0x0008)  
	UProgressBar*                                      pbHealth;                                                   // 0x0368   (0x0008)  
	UProgressBar*                                      pbStamina;                                                  // 0x0370   (0x0008)  
	UProgressBar*                                      pbHunger;                                                   // 0x0378   (0x0008)  
	UProgressBar*                                      pbThirst;                                                   // 0x0380   (0x0008)  
	UProgressBar*                                      pbBaseStrengthParameter;                                    // 0x0388   (0x0008)  
	UProgressBar*                                      pbBaseDexterityParameter;                                   // 0x0390   (0x0008)  
	UProgressBar*                                      pbBaseStaminaParameter;                                     // 0x0398   (0x0008)  
	UProgressBar*                                      pbBaseAccuracyParameter;                                    // 0x03A0   (0x0008)  
	UProgressBar*                                      pbBaseIntelligenceParameter;                                // 0x03A8   (0x0008)  
	UProgressBar*                                      pbBaseFortuneParameter;                                     // 0x03B0   (0x0008)  
	UProgressBar*                                      pbCurrentStrengthParameter;                                 // 0x03B8   (0x0008)  
	UProgressBar*                                      pbCurrentDexterityParameter;                                // 0x03C0   (0x0008)  
	UProgressBar*                                      pbCurrentStaminaParameter;                                  // 0x03C8   (0x0008)  
	UProgressBar*                                      pbCurrentAccuracyParameter;                                 // 0x03D0   (0x0008)  
	UProgressBar*                                      pbCurrentIntelligenceParameter;                             // 0x03D8   (0x0008)  
	UProgressBar*                                      pbCurrentFortuneParameter;                                  // 0x03E0   (0x0008)  
	UProgressBar*                                      pbExperience;                                               // 0x03E8   (0x0008)  
	UProgressBar*                                      pbMedicExperience;                                          // 0x03F0   (0x0008)  
	UProgressBar*                                      pbCraftExperience;                                          // 0x03F8   (0x0008)  
	UProgressBar*                                      pbRepairExperience;                                         // 0x0400   (0x0008)  
	UProgressBar*                                      pbMiningExperience;                                         // 0x0408   (0x0008)  
	UProgressBar*                                      pbSurvivalExperience;                                       // 0x0410   (0x0008)  
	UTextBlock*                                        tbFraction;                                                 // 0x0418   (0x0008)  
	UWidgetSwitcher*                                   wsFractionImage;                                            // 0x0420   (0x0008)  
	UProgressBar*                                      pbReputation;                                               // 0x0428   (0x0008)  
	UTextBlock*                                        tbPBHealth;                                                 // 0x0430   (0x0008)  
	UTextBlock*                                        tbPBStamina;                                                // 0x0438   (0x0008)  
	UTextBlock*                                        tbPBHunger;                                                 // 0x0440   (0x0008)  
	UTextBlock*                                        tbPBThirst;                                                 // 0x0448   (0x0008)  
	UTextBlock*                                        tbPBStrengthParameter;                                      // 0x0450   (0x0008)  
	UTextBlock*                                        tbPBDexterityParameter;                                     // 0x0458   (0x0008)  
	UTextBlock*                                        tbPBStaminaParameter;                                       // 0x0460   (0x0008)  
	UTextBlock*                                        tbPBAccuracyParameter;                                      // 0x0468   (0x0008)  
	UTextBlock*                                        tbPBIntelligenceParameter;                                  // 0x0470   (0x0008)  
	UTextBlock*                                        tbPBFortuneParameter;                                       // 0x0478   (0x0008)  
	UTextBlock*                                        tbPBExperience;                                             // 0x0480   (0x0008)  
	UTextBlock*                                        tbPBMedicExperience;                                        // 0x0488   (0x0008)  
	UTextBlock*                                        tbPBCraftExperience;                                        // 0x0490   (0x0008)  
	UTextBlock*                                        tbPBRepairExperience;                                       // 0x0498   (0x0008)  
	UTextBlock*                                        tbPBMiningExperience;                                       // 0x04A0   (0x0008)  
	UTextBlock*                                        tbPBSurvivalExperience;                                     // 0x04A8   (0x0008)  
	UTextBlock*                                        tbPBReputation;                                             // 0x04B0   (0x0008)  
	UScrollBox*                                        sbItemExperience;                                           // 0x04B8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x04C0   (0x0010)  MISSED
	TWeakObjectPtr<UClass*>                            ExperienceItemClass;                                        // 0x04D0   (0x0028)  
	TMap<EWTLWeaponType, UTexture2D*>                  WeaponIcons;                                                // 0x04F8   (0x0050)  
	FLinearColor                                       RedColorParam;                                              // 0x0548   (0x0010)  
	FLinearColor                                       YellowColorParam;                                           // 0x0558   (0x0010)  
	FLinearColor                                       GreenColorParam;                                            // 0x0568   (0x0010)  
	FLinearColor                                       CurrentMoreBaseFillColor;                                   // 0x0578   (0x0010)  
	FLinearColor                                       CurrentLessBaseFillColor;                                   // 0x0588   (0x0010)  
	FSlateColor                                        EnabledPvPStatusTextColor;                                  // 0x0598   (0x0028)  
	FSlateColor                                        DisabledPvPStatusTextColor;                                 // 0x05C0   (0x0028)  
	FSlateBrush                                        DefaultClanIconBrush;                                       // 0x05E8   (0x0088)  


	/// Functions
	// Function /Script/WTL.WTLPDACharacterInfo.OnSetPvPModeShowConfirmation
	void OnSetPvPModeShowConfirmation();                                                                                     // [0x18811b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterInfo.OnSetPvPModeConfirmed
	void OnSetPvPModeConfirmed();                                                                                            // [0x1881130] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterInfo.OnSetPvPModeButtonClicked
	void OnSetPvPModeButtonClicked();                                                                                        // [0x18811d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterInfo.OnFounderBtnClicked
	void OnFounderBtnClicked();                                                                                              // [0x1881110] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterInfo.OnClanImageBtnClicked
	void OnClanImageBtnClicked();                                                                                            // [0x18810f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDACharacterParameters
/// Size: 0x0090 (0x000288 - 0x000318)
class UWTLPDACharacterParameters : public UWTLPDABase
{ 
public:
	UPanelWidget*                                      pwChangeParametersArea;                                     // 0x0288   (0x0008)  
	UVerticalBox*                                      vbParametersList;                                           // 0x0290   (0x0008)  
	UVerticalBox*                                      vbParametersPointSpins;                                     // 0x0298   (0x0008)  
	UTextBlock*                                        tbParameterDescription;                                     // 0x02A0   (0x0008)  
	UTextBlock*                                        tbAvailableParametersPoints;                                // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbButtonsArea;                                              // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnSet;                                                   // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnReset;                                                 // 0x02C0   (0x0008)  
	UWTLCommonButton*                                  ucBtnResetToDefault;                                        // 0x02C8   (0x0008)  
	UCircularThrobber*                                 cthUpdate;                                                  // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x02D8   (0x0020)  MISSED
	FLinearColor                                       CurrentNumbersOfDeviationsNormalColor;                      // 0x02F8   (0x0010)  
	FLinearColor                                       CurrentNumbersOfDeviationsExceededColor;                    // 0x0308   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLPDACharacterParameters.SetConfirmed
	void SetConfirmed();                                                                                                     // [0x1881460] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterParameters.OnSetBtnClick
	void OnSetBtnClick();                                                                                                    // [0x1881480] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterParameters.OnResetToDefaultConfirmed
	void OnResetToDefaultConfirmed();                                                                                        // [0x1881400] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterParameters.OnResetToDefaultBtnClick
	void OnResetToDefaultBtnClick();                                                                                         // [0x1881420] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterParameters.OnResetBtnClick
	void OnResetBtnClick();                                                                                                  // [0x1881440] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDASkillInfo
/// Size: 0x00B0 (0x000260 - 0x000310)
class UWTLPDASkillInfo : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbSkillID;                                                  // 0x0260   (0x0008)  
	UTextBlock*                                        tbSkillID;                                                  // 0x0268   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x0270   (0x0008)  
	UTextBlock*                                        tbType;                                                     // 0x0278   (0x0008)  
	UWidgetSwitcher*                                   wsInfo;                                                     // 0x0280   (0x0008)  
	UHorizontalBox*                                    hbRequiredLevel;                                            // 0x0288   (0x0008)  
	UTextBlock*                                        tbRequiredLevel;                                            // 0x0290   (0x0008)  
	UHorizontalBox*                                    hbPointsToLearn;                                            // 0x0298   (0x0008)  
	UTextBlock*                                        tbPointsToLearn;                                            // 0x02A0   (0x0008)  
	UVerticalBox*                                      vbDependencies;                                             // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbMustHaveSkills;                                           // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbMustHaveSkillsDependencies;                               // 0x02B8   (0x0008)  
	UHorizontalBox*                                    hbMustHaveOneOfSkills;                                      // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbMustHaveOneOfSkillsDependencies;                          // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbMustNotHaveSkills;                                        // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbMustNotHaveSkillsDependencies;                            // 0x02D8   (0x0008)  
	UTextBlock*                                        tbDescription;                                              // 0x02E0   (0x0008)  
	TWeakObjectPtr<UClass*>                            SkillDependenceWidgetClass;                                 // 0x02E8   (0x0028)  
};

/// Class /Script/WTL.WTLPDACharacterSkillInfo
/// Size: 0x0010 (0x000310 - 0x000320)
class UWTLPDACharacterSkillInfo : public UWTLPDASkillInfo
{ 
public:
	UHorizontalBox*                                    hbPriceToForget;                                            // 0x0310   (0x0008)  
	UTextBlock*                                        tbPriceToForget;                                            // 0x0318   (0x0008)  
};

/// Class /Script/WTL.WTLPDACharacterSkills
/// Size: 0x00D8 (0x000288 - 0x000360)
class UWTLPDACharacterSkills : public UWTLPDABase
{ 
public:
	UTextBlock*                                        tbAvailableSkillPoints;                                     // 0x0288   (0x0008)  
	UCanvasPanel*                                      cpResetBtn;                                                 // 0x0290   (0x0008)  
	UWTLCommonButton*                                  ucBtnReset;                                                 // 0x0298   (0x0008)  
	UHorizontalBox*                                    hbTabButtons;                                               // 0x02A0   (0x0008)  
	UWTLCommonTabButton*                               btnClassSkills;                                             // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsSkills;                                                   // 0x02B0   (0x0008)  
	UScrollBox*                                        sbSkills;                                                   // 0x02B8   (0x0008)  
	UWidgetSwitcher*                                   wsSkillsType;                                               // 0x02C0   (0x0008)  
	UHorizontalBox*                                    hbCommonSkills;                                             // 0x02C8   (0x0008)  
	UWidgetSwitcher*                                   wsClassSkills;                                              // 0x02D0   (0x0008)  
	UWidgetSwitcher*                                   wsParameters;                                               // 0x02D8   (0x0008)  
	UTextBlock*                                        tbNoParameters;                                             // 0x02E0   (0x0008)  
	UScrollBox*                                        sbParameters;                                               // 0x02E8   (0x0008)  
	UWrapBox*                                          wbParameters;                                               // 0x02F0   (0x0008)  
	UWTLPDACharacterSkillTakeConfirm*                  ucCharacterSkillTakeConfirm;                                // 0x02F8   (0x0008)  
	TArray<UWTLPDACharacterSkillsItem*>                m_SkillsItems;                                              // 0x0300   (0x0010)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0310   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            ParameterWidgetClass;                                       // 0x0318   (0x0028)  
	FLinearColor                                       DefaultSkillBorderBrushColor;                               // 0x0340   (0x0010)  
	FLinearColor                                       ReachedSkillBorderBrushColor;                               // 0x0350   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLPDACharacterSkills.OnTakeSkillConfirmed
	void OnTakeSkillConfirmed(uint16_t SkillID);                                                                             // [0x1881850] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnTakeSkillCanceled
	void OnTakeSkillCanceled();                                                                                              // [0x1881820] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnTabBtnClicked
	void OnTabBtnClicked(char Index);                                                                                        // [0x1882120] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnSkillItemUnhovered
	void OnSkillItemUnhovered();                                                                                             // [0x1881a10] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnSkillItemRemoved
	void OnSkillItemRemoved(uint16_t SkillID);                                                                               // [0x1881930] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnSkillItemHovered
	void OnSkillItemHovered(uint16_t SkillID, FWTLCharacterSkillItemData& SkillItemData);                                    // [0x1881a80] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDACharacterSkills.OnSkillItemClicked
	void OnSkillItemClicked(uint16_t SkillID, FWTLCharacterSkillItemData& SkillItemData);                                    // [0x1881dd0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDACharacterSkills.OnResetConfirmed
	void OnResetConfirmed();                                                                                                 // [0x1882290] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnResetBtnClick
	void OnResetBtnClick();                                                                                                  // [0x18822b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnRemoveSkillConfirmed
	void OnRemoveSkillConfirmed();                                                                                           // [0x1881800] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkills.OnMessageDialogHide
	void OnMessageDialogHide();                                                                                              // [0x1881820] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDASkillsItem
/// Size: 0x00A0 (0x000340 - 0x0003E0)
class UWTLPDASkillsItem : public UWTLCommonButton
{ 
public:
	UBorder*                                           bBorder;                                                    // 0x0340   (0x0008)  
	UWidgetSwitcher*                                   wsBorder;                                                   // 0x0348   (0x0008)  
	UBorder*                                           bButtonLock;                                                // 0x0350   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0358   (0x0008)  MISSED
	UWidgetSwitcher*                                   wsSkillIcon;                                                // 0x0360   (0x0008)  
	UImage*                                            imgSkillIcon;                                               // 0x0368   (0x0008)  
	UBorder*                                           bRhombus;                                                   // 0x0370   (0x0008)  
	unsigned char                                      UnknownData01_5[0x38];                                      // 0x0378   (0x0038)  MISSED
	UWTLPDASkillInfo*                                  m_SkillInfoWidget;                                          // 0x03B0   (0x0008)  
	TWeakObjectPtr<UClass*>                            SkillInfoWidgetClass;                                       // 0x03B8   (0x0028)  
};

/// Class /Script/WTL.WTLPDACharacterSkillsItem
/// Size: 0x00E8 (0x0003E0 - 0x0004C8)
class UWTLPDACharacterSkillsItem : public UWTLPDASkillsItem
{ 
public:
	UWidgetSwitcher*                                   wsRhombus;                                                  // 0x03E0   (0x0008)  
	UTextBlock*                                        tbSkillPoints;                                              // 0x03E8   (0x0008)  
	UMenuAnchor*                                       maPopup;                                                    // 0x03F0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x03F8   (0x0010)  MISSED
	UWTLCommonPopupMenu*                               m_PopupMenuWidget;                                          // 0x0408   (0x0008)  
	unsigned char                                      UnknownData01_5[0x88];                                      // 0x0410   (0x0088)  MISSED
	TWeakObjectPtr<UClass*>                            PopupMenuWidgetClass;                                       // 0x0498   (0x0028)  
	int32_t                                            SkillID;                                                    // 0x04C0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x04C4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDACharacterSkillsItem.OnSkillRemoved
	void OnSkillRemoved();                                                                                                   // [0x1883410] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkillsItem.OnMenuOpenChanged
	void OnMenuOpenChanged(bool bIsOpen);                                                                                    // [0x1883470] Final|Native|Private 
	// Function /Script/WTL.WTLPDACharacterSkillsItem.OnGetPopupMenuContent
	UWidget* OnGetPopupMenuContent();                                                                                        // [0x1883570] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDACharacterSkillsZone
/// Size: 0x0090 (0x000260 - 0x0002F0)
class UWTLPDACharacterSkillsZone : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbConnectorZone;                                            // 0x0260   (0x0008)  
	UHorizontalBox*                                    hbSkillZone;                                                // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0270   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            CharacterSkillsConnectorWidgetClass;                        // 0x0278   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterSkillsConnectorDoubleWidgetClass;                  // 0x02A0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CharacterSkillsSpacerWidgetClass;                           // 0x02C8   (0x0028)  
};

/// Class /Script/WTL.WTLPDASkillTakeConfirm
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UWTLPDASkillTakeConfirm : public UUserWidget
{ 
public:
	UWTLCommonButton*                                  ucBtnSkillLearn;                                            // 0x0260   (0x0008)  
	UWTLCommonButton*                                  ucBtnCancel;                                                // 0x0268   (0x0008)  
	unsigned char                                      UnknownData00_6[0x38];                                      // 0x0270   (0x0038)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDASkillTakeConfirm.OnSkillLearnBtnClick
	void OnSkillLearnBtnClick();                                                                                             // [0x1898050] Final|Native|Private 
	// Function /Script/WTL.WTLPDASkillTakeConfirm.OnCancelBtnClick
	void OnCancelBtnClick();                                                                                                 // [0x1898010] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDACharacterSkillTakeConfirm
/// Size: 0x0010 (0x0002A8 - 0x0002B8)
class UWTLPDACharacterSkillTakeConfirm : public UWTLPDASkillTakeConfirm
{ 
public:
	UWTLPDACharacterSkillInfo*                         ucCharacterSkillInfo;                                       // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x02B0   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLPDAClan
/// Size: 0x1D58 (0x000288 - 0x001FE0)
class UWTLPDAClan : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsTitle;                                                    // 0x0288   (0x0008)  
	UHorizontalBox*                                    hbClanLogTypeButtons;                                       // 0x0290   (0x0008)  
	UWidgetSwitcher*                                   wsClan;                                                     // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsClanInfo;                                                 // 0x02A0   (0x0008)  
	UWidgetSwitcher*                                   wsNotInClanCaption;                                         // 0x02A8   (0x0008)  
	UWidgetSwitcher*                                   wsNotInClanInfoMain;                                        // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbNotInClanInfoTabButtons;                                  // 0x02B8   (0x0008)  
	UWidgetSwitcher*                                   wsNotInClanInfo;                                            // 0x02C0   (0x0008)  
	UScrollBox*                                        sbClanTechBonuses;                                          // 0x02C8   (0x0008)  
	UWrapBox*                                          wbClanTechBonuses;                                          // 0x02D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnShowClanTechBonuses;                                   // 0x02D8   (0x0008)  
	UWTLCommonButton*                                  ucBtnBackFromClanTechBonuses;                               // 0x02E0   (0x0008)  
	UWTLCommonCheckBox*                                cbQuestsRequirements;                                       // 0x02E8   (0x0008)  
	UTextBlock*                                        tbQuestsRequirements;                                       // 0x02F0   (0x0008)  
	UWTLCommonCheckBox*                                cbFactionRequirement;                                       // 0x02F8   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanList;                                              // 0x0300   (0x0008)  
	UWTLCommonCheckBox*                                cbTokensRequirement;                                        // 0x0308   (0x0008)  
	UWTLCommonCheckBox*                                cbGroupRequirement;                                         // 0x0310   (0x0008)  
	UTextBlock*                                        tbClanName;                                                 // 0x0318   (0x0008)  
	UTextBlock*                                        tbClanLevel;                                                // 0x0320   (0x0008)  
	UTextBlock*                                        tbPvPScore;                                                 // 0x0328   (0x0008)  
	UProgressBar*                                      pbPvPScore;                                                 // 0x0330   (0x0008)  
	UTextBlock*                                        tbPvEScore;                                                 // 0x0338   (0x0008)  
	UProgressBar*                                      pbPvEScore;                                                 // 0x0340   (0x0008)  
	UBorder*                                           bScoresConversionBtn;                                       // 0x0348   (0x0008)  
	UCanvasPanel*                                      cpScoresConversionBtn;                                      // 0x0350   (0x0008)  
	UWTLCommonTextButton*                              ucBtnScoresConversion;                                      // 0x0358   (0x0008)  
	UTextBlock*                                        tbCraftScore;                                               // 0x0360   (0x0008)  
	UProgressBar*                                      pbCraftScore;                                               // 0x0368   (0x0008)  
	UTextBlock*                                        tbTechnologyScore;                                          // 0x0370   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanInfo;                                              // 0x0378   (0x0008)  
	UCanvasPanel*                                      cpClanDescriptionBtn;                                       // 0x0380   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanDescription;                                       // 0x0388   (0x0008)  
	UCanvasPanel*                                      cpClanMessageBtn;                                           // 0x0390   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanMessage;                                           // 0x0398   (0x0008)  
	UCanvasPanel*                                      cpSkillsBtn;                                                // 0x03A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnSkills;                                                // 0x03A8   (0x0008)  
	UCanvasPanel*                                      cpParametersBtn;                                            // 0x03B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnParameters;                                            // 0x03B8   (0x0008)  
	UCanvasPanel*                                      cpLogBtn;                                                   // 0x03C0   (0x0008)  
	UWTLCommonButton*                                  ucBtnLog;                                                   // 0x03C8   (0x0008)  
	UCanvasPanel*                                      cpStatisticsBtn;                                            // 0x03D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnStatistics;                                            // 0x03D8   (0x0008)  
	UWTLCommonButton*                                  ucBtnLeaderboard;                                           // 0x03E0   (0x0008)  
	UCanvasPanel*                                      cpInviteToClanBorderBtn;                                    // 0x03E8   (0x0008)  
	UWTLCommonButton*                                  ucBtnInviteToClan;                                          // 0x03F0   (0x0008)  
	UCanvasPanel*                                      cpLeaveClanBorderBtn;                                       // 0x03F8   (0x0008)  
	UWTLCommonButton*                                  ucBtnLeaveClan;                                             // 0x0400   (0x0008)  
	UBorder*                                           bInClanCaption;                                             // 0x0408   (0x0008)  
	UBorder*                                           bNotInClanCaption;                                          // 0x0410   (0x0008)  
	UBorder*                                           bNotInClan;                                                 // 0x0418   (0x0008)  
	UBorder*                                           bBackFromClanTechBonuses;                                   // 0x0420   (0x0008)  
	UBorder*                                           bClanInfo;                                                  // 0x0428   (0x0008)  
	UBorder*                                           bPvPScore;                                                  // 0x0430   (0x0008)  
	UBorder*                                           bPvEScore;                                                  // 0x0438   (0x0008)  
	UBorder*                                           bCraftScore;                                                // 0x0440   (0x0008)  
	UBorder*                                           bTechnologyScore;                                           // 0x0448   (0x0008)  
	UBorder*                                           bClanButtons;                                               // 0x0450   (0x0008)  
	UCanvasPanel*                                      cpClanTabs;                                                 // 0x0458   (0x0008)  
	UBorder*                                           bClanTabButtons;                                            // 0x0460   (0x0008)  
	UHorizontalBox*                                    hbClanTabButtons;                                           // 0x0468   (0x0008)  
	UWTLCommonTabButton*                               ucTabBtnMembers;                                            // 0x0470   (0x0008)  
	UWTLCommonTabButton*                               ucTabBtnPolicyGroups;                                       // 0x0478   (0x0008)  
	UWTLCommonTabButton*                               ucTabBtnClanApplications;                                   // 0x0480   (0x0008)  
	UWTLCommonTabButton*                               ucTabBtnClanQuests;                                         // 0x0488   (0x0008)  
	UBorder*                                           bMembersList;                                               // 0x0490   (0x0008)  
	UBorder*                                           bPolicyGroups;                                              // 0x0498   (0x0008)  
	UBorder*                                           bClanApplications;                                          // 0x04A0   (0x0008)  
	UBorder*                                           bClanApplicationMainCharacterInfo;                          // 0x04A8   (0x0008)  
	UBorder*                                           bClanApplicationCharacterRankCaption;                       // 0x04B0   (0x0008)  
	UBorder*                                           bClanApplicationCharacterRank;                              // 0x04B8   (0x0008)  
	UBorder*                                           bClanApplicationCharacterReputationCaption;                 // 0x04C0   (0x0008)  
	UBorder*                                           bClanApplicationOtherCharacters;                            // 0x04C8   (0x0008)  
	UBorder*                                           bClanApplicationCharacterCommentary;                        // 0x04D0   (0x0008)  
	UBorder*                                           bClanApplicationsButtons;                                   // 0x04D8   (0x0008)  
	UWidgetSwitcher*                                   wsList;                                                     // 0x04E0   (0x0008)  
	UWidgetSwitcher*                                   wsMembers;                                                  // 0x04E8   (0x0008)  
	UScrollBox*                                        sbMembers;                                                  // 0x04F0   (0x0008)  
	UWidgetSwitcher*                                   wsPolicyGroups;                                             // 0x04F8   (0x0008)  
	UScrollBox*                                        sbPolicyGroups;                                             // 0x0500   (0x0008)  
	UHorizontalBox*                                    hbPolicyGroupManageBtns;                                    // 0x0508   (0x0008)  
	UWTLCommonButton*                                  ucBtnCreatePolicyGroup;                                     // 0x0510   (0x0008)  
	UWTLCommonButton*                                  ucBtnRenamePolicyGroup;                                     // 0x0518   (0x0008)  
	UWTLCommonButton*                                  ucBtnDeletePolicyGroup;                                     // 0x0520   (0x0008)  
	UWidgetSwitcher*                                   wsClanApplications;                                         // 0x0528   (0x0008)  
	UWidgetSwitcher*                                   wsClanApplicationsList;                                     // 0x0530   (0x0008)  
	UScrollBox*                                        sbClanApplications;                                         // 0x0538   (0x0008)  
	UWidgetSwitcher*                                   wsClanQuests;                                               // 0x0540   (0x0008)  
	UBorder*                                           bClanQuests;                                                // 0x0548   (0x0008)  
	UHorizontalBox*                                    hbClanQuestsFilters;                                        // 0x0550   (0x0008)  
	UWTLCommonTextCheckBox*                            cbPvPScoreFilter;                                           // 0x0558   (0x0008)  
	UWTLCommonTextCheckBox*                            cbPvEScoreFilter;                                           // 0x0560   (0x0008)  
	UWTLCommonTextCheckBox*                            cbCraftScoreFilter;                                         // 0x0568   (0x0008)  
	UWTLCommonTextCheckBox*                            cbTechnologyScoreFilter;                                    // 0x0570   (0x0008)  
	UWidgetSwitcher*                                   wsClanQuestList;                                            // 0x0578   (0x0008)  
	UScrollBox*                                        sbClanQuests;                                               // 0x0580   (0x0008)  
	UBorder*                                           bClanQuestsButtons;                                         // 0x0588   (0x0008)  
	UWTLCommonButton*                                  ucBtnBackToClanQuests;                                      // 0x0590   (0x0008)  
	UWTLCommonButton*                                  ucBtnTakeClanQuest;                                         // 0x0598   (0x0008)  
	UWTLCommonButton*                                  ucBtnTakeAllClanQuests;                                     // 0x05A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanQuestDetails;                                      // 0x05A8   (0x0008)  
	UWTLCommonQuestInfo*                               ucClanQuestInfo;                                            // 0x05B0   (0x0008)  
	UBorder*                                           bPolicyGroupActionWindow;                                   // 0x05B8   (0x0008)  
	UTextBlock*                                        tbPolicyGroupWindowActionTitle;                             // 0x05C0   (0x0008)  
	UEditableTextBox*                                  etbPolicyGroupName;                                         // 0x05C8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnActionPolicyGroupName;                                 // 0x05D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnActionCancelPolicyGroupName;                           // 0x05D8   (0x0008)  
	UTextBlock*                                        tbCharacterName;                                            // 0x05E0   (0x0008)  
	UTextBlock*                                        tbCharacterLevel;                                           // 0x05E8   (0x0008)  
	UTextBlock*                                        tbCharacterClass;                                           // 0x05F0   (0x0008)  
	UTextBlock*                                        tbCharacterFactionScore;                                    // 0x05F8   (0x0008)  
	UHorizontalBox*                                    hbCharacterRank;                                            // 0x0600   (0x0008)  
	UImage*                                            imgCharacterRank;                                           // 0x0608   (0x0008)  
	UTextBlock*                                        tbCharacterRank;                                            // 0x0610   (0x0008)  
	UProgressBar*                                      pbCharacterReputation;                                      // 0x0618   (0x0008)  
	UTextBlock*                                        tbCharacterReputation;                                      // 0x0620   (0x0008)  
	UWTLRichTextBlock*                                 rtbOtherCharacters;                                         // 0x0628   (0x0008)  
	UTextBlock*                                        tbCharacterCommentary;                                      // 0x0630   (0x0008)  
	UWTLCommonButton*                                  ucBtnBackToApplications;                                    // 0x0638   (0x0008)  
	UWTLCommonButton*                                  ucBtnAcceptApplication;                                     // 0x0640   (0x0008)  
	UWTLCommonButton*                                  ucBtnRejectApplication;                                     // 0x0648   (0x0008)  
	UBorder*                                           bInviteToClan;                                              // 0x0650   (0x0008)  
	UWTLCommonSuggestionTextBox*                       stbCharacterNameToInvite;                                   // 0x0658   (0x0008)  
	UEditableTextBox*                                  etbCharacterNameToInvite;                                   // 0x0660   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendInviteToClan;                                      // 0x0668   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendInviteToClanCancel;                                // 0x0670   (0x0008)  
	UBorder*                                           bClanApplication;                                           // 0x0678   (0x0008)  
	UTextBlock*                                        tbClanApplicationTitle;                                     // 0x0680   (0x0008)  
	UMultiLineEditableTextBox*                         metbClanApplicationCommentary;                              // 0x0688   (0x0008)  
	UTextBlock*                                        tbClanApplicationCommentaryCurrentCharactersCount;          // 0x0690   (0x0008)  
	UTextBlock*                                        tbClanApplicationCommentaryMaxCharactersCount;              // 0x0698   (0x0008)  
	UWTLCommonTextCheckBox*                            cbClanApplicationProvideOtherCharactersInfo;                // 0x06A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanApplicationAction;                                 // 0x06A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanApplicationCancel;                                 // 0x06B0   (0x0008)  
	UBorder*                                           bClanDescription;                                           // 0x06B8   (0x0008)  
	UMultiLineEditableTextBox*                         metbClanDescription;                                        // 0x06C0   (0x0008)  
	UTextBlock*                                        tbClanDescriptionCurrentCharactersCount;                    // 0x06C8   (0x0008)  
	UTextBlock*                                        tbClanDescriptionMaxCharactersCount;                        // 0x06D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanDescriptionSet;                                    // 0x06D8   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanDescriptionCancel;                                 // 0x06E0   (0x0008)  
	UBorder*                                           bClanMessage;                                               // 0x06E8   (0x0008)  
	UEditableTextBox*                                  etbClanMessageSubject;                                      // 0x06F0   (0x0008)  
	UTextBlock*                                        tbClanMessageSubjectCurrentCharactersCount;                 // 0x06F8   (0x0008)  
	UTextBlock*                                        tbClanMessageSubjectMaxCharactersCount;                     // 0x0700   (0x0008)  
	UMultiLineEditableTextBox*                         metbClanMessageText;                                        // 0x0708   (0x0008)  
	UTextBlock*                                        tbClanMessageTextCurrentCharactersCount;                    // 0x0710   (0x0008)  
	UTextBlock*                                        tbClanMessageTextMaxCharactersCount;                        // 0x0718   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanMessageSend;                                       // 0x0720   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanMessageCancel;                                     // 0x0728   (0x0008)  
	UWidgetSwitcher*                                   wsLeaderboard;                                              // 0x0730   (0x0008)  
	UWidgetSwitcher*                                   wsLeaderboardFilterButtons;                                 // 0x0738   (0x0008)  
	UHorizontalBox*                                    hbLeaderboardFilterButtons;                                 // 0x0740   (0x0008)  
	UWTLCommonButton*                                  ucBtnTopAll;                                                // 0x0748   (0x0008)  
	UWTLCommonButton*                                  ucBtnTopFraction;                                           // 0x0750   (0x0008)  
	UTextBlock*                                        tbApplicationTip;                                           // 0x0758   (0x0008)  
	UTextBlock*                                        tbInfoTip;                                                  // 0x0760   (0x0008)  
	UHorizontalBox*                                    hbLeaderboardHeadline;                                      // 0x0768   (0x0008)  
	USpacer*                                           sClanApplication;                                           // 0x0770   (0x0008)  
	UWTLCommonSortButton*                              ucLeaderboardMembersCountSortBtn;                           // 0x0778   (0x0008)  
	UWTLCommonSortButton*                              ucLeaderboardPvPScoreSortBtn;                               // 0x0780   (0x0008)  
	UWTLCommonSortButton*                              ucLeaderboardPvEScoreSortBtn;                               // 0x0788   (0x0008)  
	UWTLCommonSortButton*                              ucLeaderboardCraftScoreSortBtn;                             // 0x0790   (0x0008)  
	UWTLCommonSortButton*                              ucLeaderboardReputationSortBtn;                             // 0x0798   (0x0008)  
	UWTLCommonSortButton*                              ucLeaderboardRatingSortBtn;                                 // 0x07A0   (0x0008)  
	UScrollBox*                                        sbLeaderboard;                                              // 0x07A8   (0x0008)  
	UTextBlock*                                        tbLeaderboardEmptyTitle;                                    // 0x07B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnLeaderboardBack;                                       // 0x07B8   (0x0008)  
	UTextBlock*                                        tbClanLevelSkills;                                          // 0x07C0   (0x0008)  
	UTextBlock*                                        tbTechnologyScoreSkills;                                    // 0x07C8   (0x0008)  
	UBorder*                                           bSkillsHeadline;                                            // 0x07D0   (0x0008)  
	UCanvasPanel*                                      cpSkills;                                                   // 0x07D8   (0x0008)  
	UScrollBox*                                        sbSkillsVertical;                                           // 0x07E0   (0x0008)  
	UHorizontalBox*                                    hbSkills;                                                   // 0x07E8   (0x0008)  
	UWTLCommonButton*                                  ucBtnSkillsBack;                                            // 0x07F0   (0x0008)  
	UWTLPDAClanSkillTakeConfirm*                       ucSkillTakeConfirm;                                         // 0x07F8   (0x0008)  
	UWidgetSwitcher*                                   wsParameters;                                               // 0x0800   (0x0008)  
	UTextBlock*                                        tbNoParameters;                                             // 0x0808   (0x0008)  
	UScrollBox*                                        sbParameters;                                               // 0x0810   (0x0008)  
	UWrapBox*                                          wbParameters;                                               // 0x0818   (0x0008)  
	UWTLCommonButton*                                  ucBtnParametersBack;                                        // 0x0820   (0x0008)  
	UWidgetSwitcher*                                   wsLogType;                                                  // 0x0828   (0x0008)  
	UTextBlock*                                        tbSelectLogType;                                            // 0x0830   (0x0008)  
	UWidgetSwitcher*                                   wsLog;                                                      // 0x0838   (0x0008)  
	UTextBlock*                                        tbLogIsEmpty;                                               // 0x0840   (0x0008)  
	UBorder*                                           bUpdatingLog;                                               // 0x0848   (0x0008)  
	UTextBlock*                                        tbGettingLogRecordsCountError;                              // 0x0850   (0x0008)  
	UWidgetSwitcher*                                   wsLogRecords;                                               // 0x0858   (0x0008)  
	UTextBlock*                                        tbGettingLogPageError;                                      // 0x0860   (0x0008)  
	UBorder*                                           bUpdatingLogPage;                                           // 0x0868   (0x0008)  
	UScrollBox*                                        sbLogRecords;                                               // 0x0870   (0x0008)  
	UBorder*                                           bLogManage;                                                 // 0x0878   (0x0008)  
	UHorizontalBox*                                    hbLogRecordsPerPage;                                        // 0x0880   (0x0008)  
	UWTLCommonComboBoxString*                          cbsLogRecordsPerPage;                                       // 0x0888   (0x0008)  
	UWTLCommonPageSwitcher*                            ucLogPagesSwitcher;                                         // 0x0890   (0x0008)  
	UWTLCommonButton*                                  ucBtnLogBack;                                               // 0x0898   (0x0008)  
	UTextBlock*                                        tbStatisticsSpecifyDateHint;                                // 0x08A0   (0x0008)  
	UBorder*                                           bStatisticsStartDateValidate;                               // 0x08A8   (0x0008)  
	UBorder*                                           bStatisticsStartDate;                                       // 0x08B0   (0x0008)  
	UEditableTextBox*                                  etbStatisticsStartDate;                                     // 0x08B8   (0x0008)  
	UTextBlock*                                        tbStatisticsToDate;                                         // 0x08C0   (0x0008)  
	UBorder*                                           bStatisticsEndDateValidate;                                 // 0x08C8   (0x0008)  
	UBorder*                                           bStatisticsEndDate;                                         // 0x08D0   (0x0008)  
	UEditableTextBox*                                  etbStatisticsEndDate;                                       // 0x08D8   (0x0008)  
	UWidgetSwitcher*                                   wsStatistics;                                               // 0x08E0   (0x0008)  
	UTextBlock*                                        tbStatisticsNoRecords;                                      // 0x08E8   (0x0008)  
	UBorder*                                           bGettingsStatistics;                                        // 0x08F0   (0x0008)  
	UHorizontalBox*                                    hbStatisticsHeadline;                                       // 0x08F8   (0x0008)  
	UBorder*                                           bStatisticsRecords;                                         // 0x0900   (0x0008)  
	UWTLCommonSortButton*                              ucStatisticsPvPScoreSortBtn;                                // 0x0908   (0x0008)  
	UWTLCommonSortButton*                              ucStatisticsPvEScoreSortBtn;                                // 0x0910   (0x0008)  
	UWTLCommonSortButton*                              ucStatisticsCraftScoreSortBtn;                              // 0x0918   (0x0008)  
	UWTLCommonSortButton*                              ucStatisticsTechnologyScoreSortBtn;                         // 0x0920   (0x0008)  
	UScrollBox*                                        sbStatisticsRecords;                                        // 0x0928   (0x0008)  
	UTextBlock*                                        tbErrorGettingStatisticsRecords;                            // 0x0930   (0x0008)  
	UWTLCommonButton*                                  ucBtnStatisticsUpdate;                                      // 0x0938   (0x0008)  
	UWTLCommonButton*                                  ucBtnStatisticsBack;                                        // 0x0940   (0x0008)  
	UBorder*                                           bClanScoresConversion;                                      // 0x0948   (0x0008)  
	UBorder*                                           bScoresConversionBackground;                                // 0x0950   (0x0008)  
	UTextBlock*                                        tbScoresConversionTitle;                                    // 0x0958   (0x0008)  
	UBorder*                                           bScoresConversionArrow;                                     // 0x0960   (0x0008)  
	UBorder*                                           bScoresConversionMain;                                      // 0x0968   (0x0008)  
	UBorder*                                           bScoresConversionButtons;                                   // 0x0970   (0x0008)  
	UHorizontalBox*                                    hbCurrentConversionRate;                                    // 0x0978   (0x0008)  
	UTextBlock*                                        tbCurrentConversionRate;                                    // 0x0980   (0x0008)  
	UWTLCommonComboBoxString*                          cbsScoreTypeToConvert;                                      // 0x0988   (0x0008)  
	UWTLCommonComboBoxString*                          cbsConvertedScoreType;                                      // 0x0990   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbCurrentScoreToConvert;                                   // 0x0998   (0x0008)  
	UWTLCommonButton*                                  ucBtnScoreStepMinus;                                        // 0x09A0   (0x0008)  
	USlider*                                           slScoreConverter;                                           // 0x09A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnScoreStepPlus;                                         // 0x09B0   (0x0008)  
	UWTLUtilityNumberTextBox*                          ntbScoreToConvert;                                          // 0x09B8   (0x0008)  
	UTextBlock*                                        tbConvertedScore;                                           // 0x09C0   (0x0008)  
	UTextBlock*                                        tbTotalConvertedScore;                                      // 0x09C8   (0x0008)  
	UWTLCommonButton*                                  ucBtnConvertScores;                                         // 0x09D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnConvertScoresCancel;                                   // 0x09D8   (0x0008)  
	UWTLCommonButton*                                  ucBtnClanLevelsInfo;                                        // 0x09E0   (0x0008)  
	UBorder*                                           bClanLevelsInfo;                                            // 0x09E8   (0x0008)  
	UBorder*                                           bClanLevelsInfoBackground;                                  // 0x09F0   (0x0008)  
	UTextBlock*                                        tbClanLevelsInfoTitle;                                      // 0x09F8   (0x0008)  
	UTextBlock*                                        tbLevelsCaption;                                            // 0x0A00   (0x0008)  
	UTextBlock*                                        tbMembersCountCaption;                                      // 0x0A08   (0x0008)  
	UScrollBox*                                        sbLevelsInfo;                                               // 0x0A10   (0x0008)  
	UBorder*                                           bCloseLevelsInfoBtn;                                        // 0x0A18   (0x0008)  
	UWTLCommonButton*                                  ucBtnCloseLevelsInfo;                                       // 0x0A20   (0x0008)  
	unsigned char                                      UnknownData00_5[0x2B0];                                     // 0x0A28   (0x02B0)  MISSED
	TArray<UBorder*>                                   m_ClanLevelsSkillBorders;                                   // 0x0CD8   (0x0010)  
	TArray<UWTLPDAClanSkillsLevelCaption*>             m_ClanSkillsLevelCaptions;                                  // 0x0CE8   (0x0010)  
	TArray<UWTLPDAClanSkillsItem*>                     m_SkillsItems;                                              // 0x0CF8   (0x0010)  
	TArray<UWTLPDASkillsConnector*>                    m_SkillsConnectors;                                         // 0x0D08   (0x0010)  
	unsigned char                                      UnknownData01_5[0xE0];                                      // 0x0D18   (0x00E0)  MISSED
	TWeakObjectPtr<UClass*>                            ClanTechBonusWidgetClass;                                   // 0x0DF8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanMemberItemWidgetClass;                                  // 0x0E20   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanPolicyGroupItemWidgetClass;                             // 0x0E48   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanApplicationItemWidgetClass;                             // 0x0E70   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanQuestItemWidgetClass;                                   // 0x0E98   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanLeaderboardItemWidgetClass;                             // 0x0EC0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ParameterWidgetClass;                                       // 0x0EE8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanLevelInfoWidgetClass;                                   // 0x0F10   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanLogRecordWidgetClass;                                   // 0x0F38   (0x0028)  
	TWeakObjectPtr<UClass*>                            ClanStatisticsRecordWidgetClass;                            // 0x0F60   (0x0028)  
	FButtonStyle                                       DefaultButtonStyle;                                         // 0x0F88   (0x0278)  
	FButtonStyle                                       SelectedButtonStyle;                                        // 0x1200   (0x0278)  
	FLinearColor                                       NotAllowedClanLevelSkillBorderBrushColor;                   // 0x1478   (0x0010)  
	FLinearColor                                       AllowedClanLevelSkillBorderBrushColor;                      // 0x1488   (0x0010)  
	FComboButtonStyle                                  PVPScoreTypeComboBoxButtonStyle;                            // 0x1498   (0x03B8)  
	FComboButtonStyle                                  PVEScoreTypeComboBoxButtonStyle;                            // 0x1850   (0x03B8)  
	FComboButtonStyle                                  CraftScoreTypeComboBoxButtonStyle;                          // 0x1C08   (0x03B8)  
	FLinearColor                                       StatisticsDateValidateErrorColor;                           // 0x1FC0   (0x0010)  
	bool                                               bGetClanScoreLogRecordCountTestResponseSuccess;             // 0x1FD0   (0x0001)  
	bool                                               bGetClanLogPageTestResponseSuccess;                         // 0x1FD1   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x1FD2   (0x0002)  MISSED
	int32_t                                            TestLogRecordsCount;                                        // 0x1FD4   (0x0004)  
	bool                                               bGetClanScoreStatisticsTestResponseSuccess;                 // 0x1FD8   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x1FD9   (0x0003)  MISSED
	int32_t                                            TestClanScoreStatisticsRecordsCount;                        // 0x1FDC   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLPDAClan.UpdateStatistics
	void UpdateStatistics();                                                                                                 // [0x18853c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnTopFractionBtnClicked
	void OnTopFractionBtnClicked();                                                                                          // [0x18869c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnTopAllBtnClicked
	void OnTopAllBtnClicked();                                                                                               // [0x18869e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnTakeSkillConfirmed
	void OnTakeSkillConfirmed(uint16_t SkillID);                                                                             // [0x1885ae0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnTakeSkillCanceled
	void OnTakeSkillCanceled();                                                                                              // [0x1885ab0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnTakeClanQuestBtnClicked
	void OnTakeClanQuestBtnClicked();                                                                                        // [0x18877a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnTakeAllClanQuestsBtnClicked
	void OnTakeAllClanQuestsBtnClicked();                                                                                    // [0x1887780] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsTechnologyScoreSort
	void OnStatisticsTechnologyScoreSort(bool bIsSortAscending);                                                             // [0x1884990] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsStartDateTextBoxTextCommitted
	void OnStatisticsStartDateTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                      // [0x1884f00] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsStartDateTextBoxTextChanged
	void OnStatisticsStartDateTextBoxTextChanged(FText& Text);                                                               // [0x1885270] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsRecordsScrolled
	void OnStatisticsRecordsScrolled(float CurrentOffset);                                                                   // [0x1884890] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsPvPScoreSort
	void OnStatisticsPvPScoreSort(bool bIsSortAscending);                                                                    // [0x1884c30] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsPvEScoreSort
	void OnStatisticsPvEScoreSort(bool bIsSortAscending);                                                                    // [0x1884b50] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsEndDateTextBoxTextCommitted
	void OnStatisticsEndDateTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                        // [0x1884d10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsEndDateTextBoxTextChanged
	void OnStatisticsEndDateTextBoxTextChanged(FText& Text);                                                                 // [0x1885120] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsCraftScoreSort
	void OnStatisticsCraftScoreSort(bool bIsSortAscending);                                                                  // [0x1884a70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsBtnClicked
	void OnStatisticsBtnClicked();                                                                                           // [0x18885b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnStatisticsBackBtnClicked
	void OnStatisticsBackBtnClicked();                                                                                       // [0x1884820] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnSkillsBtnClicked
	void OnSkillsBtnClicked();                                                                                               // [0x1888660] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnSkillsBackBtnClicked
	void OnSkillsBackBtnClicked();                                                                                           // [0x1885a90] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnSkillItemUnhovered
	void OnSkillItemUnhovered();                                                                                             // [0x1885bc0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnSkillItemHovered
	void OnSkillItemHovered(char SkillID, FWTLClanSkillItemData& SkillItemData);                                             // [0x1885c30] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnSkillItemClicked
	void OnSkillItemClicked(char SkillID, FWTLClanSkillItemData& SkillItemData);                                             // [0x1885fc0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnSkillCannotTakeErrorHide
	void OnSkillCannotTakeErrorHide();                                                                                       // [0x1885ab0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnShowClanTechBonusesBtnClicked
	void OnShowClanTechBonusesBtnClicked();                                                                                  // [0x18888d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnSendMailMessageToClanMembersResponse
	void OnSendMailMessageToClanMembersResponse(FWTLOperationResult& OperationResult);                                       // [0x1886b20] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnSendInviteToClanCancelBtnClicked
	void OnSendInviteToClanCancelBtnClicked();                                                                               // [0x1887550] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnSendInviteToClanBtnClicked
	void OnSendInviteToClanBtnClicked();                                                                                     // [0x1887580] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnScoreTypeToConvertSelectionChanged
	void OnScoreTypeToConvertSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);               // [0x1884660] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnScoreToConvertValueChange
	void OnScoreToConvertValueChange(int32_t Value);                                                                         // [0x18843b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnScoreToConvertSendCommitted
	void OnScoreToConvertSendCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                  // [0x18841d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnScoreStepPlusBtnClicked
	void OnScoreStepPlusBtnClicked();                                                                                        // [0x1884050] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnScoreStepMinusBtnClicked
	void OnScoreStepMinusBtnClicked();                                                                                       // [0x1884190] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnScoresConversionBtnClicked
	void OnScoresConversionBtnClicked();                                                                                     // [0x18886e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnRenamePolicyGroupBtnClicked
	void OnRenamePolicyGroupBtnClicked();                                                                                    // [0x1887ed0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnRejectApplicationBtnClicked
	void OnRejectApplicationBtnClicked();                                                                                    // [0x1887980] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnPolicyGroupNameTextCommitted
	void OnPolicyGroupNameTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                 // [0x1887b20] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnPolicyGroupNameTextChanged
	void OnPolicyGroupNameTextChanged(FText& InText);                                                                        // [0x1887d00] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnPolicyGroupItemClicked
	void OnPolicyGroupItemClicked(uint64_t PolicyGroupItemID, FText& PolicyGroupItemName);                                   // [0x1887f10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnParametersBtnClicked
	void OnParametersBtnClicked();                                                                                           // [0x18885f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnParametersBackBtnClicked
	void OnParametersBackBtnClicked();                                                                                       // [0x1885a40] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnNotInClanInfoTabBtnClicked
	void OnNotInClanInfoTabBtnClicked(char Index);                                                                           // [0x18888f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLogRecordsScrolled
	void OnLogRecordsScrolled(float CurrentOffset);                                                                          // [0x1885740] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLogRecordsPerPageSelectionChanged
	void OnLogRecordsPerPageSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                // [0x1885540] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLogPageSwitched
	void OnLogPageSwitched(int32_t CurrentPageIndex);                                                                        // [0x1885440] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLogBtnClicked
	void OnLogBtnClicked();                                                                                                  // [0x18885d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLogBackBtnClicked
	void OnLogBackBtnClicked();                                                                                              // [0x18853e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaveClanConfirmed
	void OnLeaveClanConfirmed();                                                                                             // [0x18884e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaveClanBtnClicked
	void OnLeaveClanBtnClicked();                                                                                            // [0x1888550] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardReputationSort
	void OnLeaderboardReputationSort(bool bIsSortAscending);                                                                 // [0x1886520] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardRatingSort
	void OnLeaderboardRatingSort(bool bIsSortAscending);                                                                     // [0x1886440] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardPvPScoreSort
	void OnLeaderboardPvPScoreSort(bool bIsSortAscending);                                                                   // [0x18867c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardPvEScoreSort
	void OnLeaderboardPvEScoreSort(bool bIsSortAscending);                                                                   // [0x18866e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardMembersCountSort
	void OnLeaderboardMembersCountSort(bool bIsSortAscending);                                                               // [0x18868a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardCraftScoreSort
	void OnLeaderboardCraftScoreSort(bool bIsSortAscending);                                                                 // [0x1886600] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardBtnClicked
	void OnLeaderboardBtnClicked();                                                                                          // [0x1888590] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnLeaderboardBackBtnClicked
	void OnLeaderboardBackBtnClicked();                                                                                      // [0x1886980] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnInviteToClanBtnClicked
	void OnInviteToClanBtnClicked();                                                                                         // [0x1888570] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnGetClanLogRecordsCountResponse
	void OnGetClanLogRecordsCountResponse(FWTLResponse& Response);                                                           // [0x1885940] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnGetClanLogPageResponse
	void OnGetClanLogPageResponse(FWTLResponse& Response);                                                                   // [0x1885840] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.OnExcludeMemberFromClanConfirmed
	void OnExcludeMemberFromClanConfirmed();                                                                                 // [0x18880e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnExcludeMemberFromClanBtnClicked
	void OnExcludeMemberFromClanBtnClicked(FString CharacterName);                                                           // [0x1888240] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnDeletePolicyGroupConfirmed
	void OnDeletePolicyGroupConfirmed();                                                                                     // [0x1887e30] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnDeletePolicyGroupBtnClicked
	void OnDeletePolicyGroupBtnClicked();                                                                                    // [0x1887eb0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnCurrentScoreToConvertValueChange
	void OnCurrentScoreToConvertValueChange(int32_t Value);                                                                  // [0x1883f70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnCreatePolicyGroupBtnClicked
	void OnCreatePolicyGroupBtnClicked();                                                                                    // [0x1887ef0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnConvertScoresConfirmed
	void OnConvertScoresConfirmed();                                                                                         // [0x1883e70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnConvertScoresCancelBtnClicked
	void OnConvertScoresCancelBtnClicked();                                                                                  // [0x1883f20] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnConvertScoresBtnClicked
	void OnConvertScoresBtnClicked();                                                                                        // [0x1883f50] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnConverterSliderValueChanged
	void OnConverterSliderValueChanged(float Value);                                                                         // [0x18840a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnConvertedScoreTypeSelectionChanged
	void OnConvertedScoreTypeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);               // [0x18844a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnCloseLevelsInfoBtnClicked
	void OnCloseLevelsInfoBtnClicked();                                                                                      // [0x1883e40] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanTechBonusesScrollBoxUserScrolled
	void OnClanTechBonusesScrollBoxUserScrolled(float CurrentOffset);                                                        // [0x1888770] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanTabBtnClicked
	void OnClanTabBtnClicked(char Index);                                                                                    // [0x1888410] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClansChanged
	void OnClansChanged();                                                                                                   // [0x1886ab0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanQuestItemClicked
	void OnClanQuestItemClicked(int32_t QuestID);                                                                            // [0x18877e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanQuestFilterCheckedState
	void OnClanQuestFilterCheckedState(bool bIsChecked);                                                                     // [0x18878b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanQuestDetailsBtnClicked
	void OnClanQuestDetailsBtnClicked();                                                                                     // [0x1887760] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanPolicyGroupsChanged
	void OnClanPolicyGroupsChanged();                                                                                        // [0x1886a70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanMessageSendBtnClicked
	void OnClanMessageSendBtnClicked();                                                                                      // [0x1886c50] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanMessageCancelBtnClicked
	void OnClanMessageCancelBtnClicked();                                                                                    // [0x1886c20] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanMessageBtnClicked
	void OnClanMessageBtnClicked();                                                                                          // [0x1888680] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanMembersChanged
	void OnClanMembersChanged();                                                                                             // [0x1886a90] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanLogTypeButtonClicked
	void OnClanLogTypeButtonClicked(char Index);                                                                             // [0x18889c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanLevelsInfoBtnClicked
	void OnClanLevelsInfoBtnClicked();                                                                                       // [0x1888700] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanLeaderboardItemClicked
	void OnClanLeaderboardItemClicked(uint16_t ClanID);                                                                      // [0x1886350] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanInfoBtnClicked
	void OnClanInfoBtnClicked();                                                                                             // [0x18886c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanDescriptionSetBtnClicked
	void OnClanDescriptionSetBtnClicked();                                                                                   // [0x1887280] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanDescriptionCancelBtnClicked
	void OnClanDescriptionCancelBtnClicked();                                                                                // [0x1887250] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanDescriptionBtnClicked
	void OnClanDescriptionBtnClicked();                                                                                      // [0x18886a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanApplicationsChanged
	void OnClanApplicationsChanged();                                                                                        // [0x1886a50] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanApplicationItemClicked
	void OnClanApplicationItemClicked(uint64_t CharacterID);                                                                 // [0x18879f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanApplicationCancelBtnClicked
	void OnClanApplicationCancelBtnClicked();                                                                                // [0x18873d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanApplicationActionBtnClicked
	void OnClanApplicationActionBtnClicked();                                                                                // [0x1887400] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnClanApplication
	void OnClanApplication(uint16_t ClanID);                                                                                 // [0x1883d60] Final|Native|Public  
	// Function /Script/WTL.WTLPDAClan.OnBackToClanQuestsBtnClicked
	void OnBackToClanQuestsBtnClicked();                                                                                     // [0x18877c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnBackToApplicationsBtnClicked
	void OnBackToApplicationsBtnClicked();                                                                                   // [0x18879c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnBackFromClanTechBonusesBtnClicked
	void OnBackFromClanTechBonusesBtnClicked();                                                                              // [0x1888870] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnAppointMemberAsClanLeaderConfirmed
	void OnAppointMemberAsClanLeaderConfirmed();                                                                             // [0x18881c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnAppointMemberAsClanLeaderBtnClicked
	void OnAppointMemberAsClanLeaderBtnClicked(uint64_t CharacterID);                                                        // [0x1888330] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnActionPolicyGroupNameBtnClicked
	void OnActionPolicyGroupNameBtnClicked();                                                                                // [0x1887b00] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnActionCancelPolicyGroupNameBtnClicked
	void OnActionCancelPolicyGroupNameBtnClicked();                                                                          // [0x1887ad0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.OnAcceptApplicationBtnClicked
	void OnAcceptApplicationBtnClicked();                                                                                    // [0x18879a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClan.ClanMessageTextBoxTextCommitted
	void ClanMessageTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                // [0x1886c70] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.ClanMessageTextBoxTextChanged
	void ClanMessageTextBoxTextChanged(FText& Text);                                                                         // [0x1886ff0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.ClanMessageSubjectTextBoxTextCommitted
	void ClanMessageSubjectTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                         // [0x1886e10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.ClanMessageSubjectTextBoxTextChanged
	void ClanMessageSubjectTextBoxTextChanged(FText& Text);                                                                  // [0x1887120] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.ClanDescriptionTextBoxTextChanged
	void ClanDescriptionTextBoxTextChanged(FText& Text);                                                                     // [0x18872a0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.ClanApplicationCommentaryTextBoxTextChanged
	void ClanApplicationCommentaryTextBoxTextChanged(FText& Text);                                                           // [0x1887420] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAClan.CharacterNameToInviteTextBoxTextCommitted
	void CharacterNameToInviteTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                      // [0x18875a0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLPDAClanApplicationItem
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class UWTLPDAClanApplicationItem : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbCharacterName;                                            // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04A8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLPDALeaderboardItemBase
/// Size: 0x0018 (0x0004A0 - 0x0004B8)
class UWTLPDALeaderboardItemBase : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbNumber;                                                   // 0x04A0   (0x0008)  
	UTextBlock*                                        tbClanName;                                                 // 0x04A8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x04B0   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLPDAClanLeaderboardItem
/// Size: 0x01C0 (0x0004B8 - 0x000678)
class UWTLPDAClanLeaderboardItem : public UWTLPDALeaderboardItemBase
{ 
public:
	UWTLCommonButton*                                  ucBtnClanApplication;                                       // 0x04B8   (0x0008)  
	UImage*                                            imgFaction;                                                 // 0x04C0   (0x0008)  
	UTextBlock*                                        tbMemberCount;                                              // 0x04C8   (0x0008)  
	UTextBlock*                                        tbPvPScore;                                                 // 0x04D0   (0x0008)  
	UTextBlock*                                        tbPvEScore;                                                 // 0x04D8   (0x0008)  
	UTextBlock*                                        tbCraftScore;                                               // 0x04E0   (0x0008)  
	UBorder*                                           bReputation;                                                // 0x04E8   (0x0008)  
	UTextBlock*                                        tbReputation;                                               // 0x04F0   (0x0008)  
	UTextBlock*                                        tbScoreCount;                                               // 0x04F8   (0x0008)  
	unsigned char                                      UnknownData00_5[0x168];                                     // 0x0500   (0x0168)  MISSED
	TArray<FWTLFactionTexture>                         FactionTextures;                                            // 0x0668   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLPDAClanLeaderboardItem.OnClanApplicationBtnClicked
	void OnClanApplicationBtnClicked();                                                                                      // [0x188a2a0] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAClanLevelInfo
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLPDAClanLevelInfo : public UUserWidget
{ 
public:
	UTextBlock*                                        tbLevel;                                                    // 0x0260   (0x0008)  
	UTextBlock*                                        tbPvPScore;                                                 // 0x0268   (0x0008)  
	UTextBlock*                                        tbPvEScore;                                                 // 0x0270   (0x0008)  
	UTextBlock*                                        tbCraftScore;                                               // 0x0278   (0x0008)  
	UTextBlock*                                        tbMembersCount;                                             // 0x0280   (0x0008)  
};

/// Class /Script/WTL.WTLPDAClanLogRecord
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLPDAClanLogRecord : public UUserWidget
{ 
public:
	URichTextBlock*                                    rtbText;                                                    // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLPDAClanMemberItem
/// Size: 0x00D0 (0x000260 - 0x000330)
class UWTLPDAClanMemberItem : public UUserWidget
{ 
public:
	UMenuAnchor*                                       maPopupMenu;                                                // 0x0260   (0x0008)  
	UImage*                                            imgClanLeader;                                              // 0x0268   (0x0008)  
	UImage*                                            imgCharacterClass;                                          // 0x0270   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x0278   (0x0008)  
	UHorizontalBox*                                    hbPolicyGroupName;                                          // 0x0280   (0x0008)  
	UTextBlock*                                        tbPolicyGroupName;                                          // 0x0288   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x0290   (0x0008)  
	UWTLCommonPopupMenu*                               m_PopupMenuWidget;                                          // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x02A0   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            PopupMenuWidgetClass;                                       // 0x02C8   (0x0028)  
	unsigned char                                      UnknownData01_5[0x30];                                      // 0x02F0   (0x0030)  MISSED
	TArray<FWTLCharacterClassTexture>                  CharacterClassesTextures;                                   // 0x0320   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLPDAClanMemberItem.RemoveFromDeputyClanLeaderBtnClicked
	void RemoveFromDeputyClanLeaderBtnClicked();                                                                             // [0x188a700] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.OnMenuOpenChanged
	void OnMenuOpenChanged(bool bIsOpen);                                                                                    // [0x188a940] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.OnGetPopupMenuContent
	UWidget* OnGetPopupMenuContent();                                                                                        // [0x188aa50] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.ExcludeFromClanBtnClicked
	void ExcludeFromClanBtnClicked();                                                                                        // [0x188a4f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.AssignPolicyGroupToClanMember
	void AssignPolicyGroupToClanMember(uint64_t PolicyGroupID);                                                              // [0x188a550] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.AssignPolicyGroupBtnClicked
	void AssignPolicyGroupBtnClicked();                                                                                      // [0x188a6e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.AppointAsDeputyClanLeaderBtnClicked
	void AppointAsDeputyClanLeaderBtnClicked();                                                                              // [0x188a7f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAClanMemberItem.AppointAsClanLeaderBtnClicked
	void AppointAsClanLeaderBtnClicked();                                                                                    // [0x188a8e0] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAClanPolicyGroupItem
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class UWTLPDAClanPolicyGroupItem : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04A8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLPDAClanQuestListItem
/// Size: 0x0048 (0x0004A0 - 0x0004E8)
class UWTLPDAClanQuestListItem : public UWTLCommonSelectedItem
{ 
public:
	UHorizontalBox*                                    hbRecommendedCharacterLevel;                                // 0x04A0   (0x0008)  
	UTextBlock*                                        tbRecommendedCharacterLevel;                                // 0x04A8   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x04B0   (0x0008)  
	UHorizontalBox*                                    hbQuestRewardScores;                                        // 0x04B8   (0x0008)  
	UTextBlock*                                        tbQuestRewardScores;                                        // 0x04C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04C8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLPDAClanSkillInfo
/// Size: 0x0008 (0x000310 - 0x000318)
class UWTLPDAClanSkillInfo : public UWTLPDASkillInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLPDAClanSkillsItem
/// Size: 0x0060 (0x0003E0 - 0x000440)
class UWTLPDAClanSkillsItem : public UWTLPDASkillsItem
{ 
public:
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x03E0   (0x0050)  MISSED
	char                                               SkillID;                                                    // 0x0430   (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x0431   (0x000F)  MISSED
};

/// Class /Script/WTL.WTLPDAClanSkillsLevelCaption
/// Size: 0x0060 (0x000260 - 0x0002C0)
class UWTLPDAClanSkillsLevelCaption : public UUserWidget
{ 
public:
	UBorder*                                           bContent;                                                   // 0x0260   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x0268   (0x0008)  
	FSlateColor                                        RedColor;                                                   // 0x0270   (0x0028)  
	FSlateColor                                        GreenColor;                                                 // 0x0298   (0x0028)  
};

/// Class /Script/WTL.WTLPDAClanSkillTakeConfirm
/// Size: 0x0010 (0x0002A8 - 0x0002B8)
class UWTLPDAClanSkillTakeConfirm : public UWTLPDASkillTakeConfirm
{ 
public:
	UWTLPDAClanSkillInfo*                              ucClanSkillInfo;                                            // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x02B0   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLPDAClanStatisticsRecord
/// Size: 0x0028 (0x000260 - 0x000288)
class UWTLPDAClanStatisticsRecord : public UUserWidget
{ 
public:
	UTextBlock*                                        tbCharacterName;                                            // 0x0260   (0x0008)  
	UTextBlock*                                        tbPvPScore;                                                 // 0x0268   (0x0008)  
	UTextBlock*                                        tbPvEScore;                                                 // 0x0270   (0x0008)  
	UTextBlock*                                        tbCraftScore;                                               // 0x0278   (0x0008)  
	UTextBlock*                                        tbTechnologyScore;                                          // 0x0280   (0x0008)  
};

/// Class /Script/WTL.WTLPDAClanTechBonus
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLPDAClanTechBonus : public UUserWidget
{ 
public:
	UImage*                                            imgSkillIcon;                                               // 0x0260   (0x0008)  
	UBorder*                                           bContent;                                                   // 0x0268   (0x0008)  
	UTextBlock*                                        tbSkillName;                                                // 0x0270   (0x0008)  
	UTextBlock*                                        tbSkillDescription;                                         // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLPDACraftRecipes
/// Size: 0x0138 (0x000288 - 0x0003C0)
class UWTLPDACraftRecipes : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsRecipesList;                                              // 0x0288   (0x0008)  
	UWTLCommonComboBoxString*                          cbsCraftTypes;                                              // 0x0290   (0x0008)  
	UScrollBox*                                        sbCraftItemsList;                                           // 0x0298   (0x0008)  
	UWidgetSwitcher*                                   wsRecipe;                                                   // 0x02A0   (0x0008)  
	UScrollBox*                                        sbRecipeInfo;                                               // 0x02A8   (0x0008)  
	UHorizontalBox*                                    hbRecipeID;                                                 // 0x02B0   (0x0008)  
	UTextBlock*                                        tbRecipeID;                                                 // 0x02B8   (0x0008)  
	UTextBlock*                                        tbItemName;                                                 // 0x02C0   (0x0008)  
	UTextBlock*                                        tbDescription;                                              // 0x02C8   (0x0008)  
	UHorizontalBox*                                    hbNeedCraftExperience;                                      // 0x02D0   (0x0008)  
	UHorizontalBox*                                    hbNeedSurvivalExperience;                                   // 0x02D8   (0x0008)  
	UTextBlock*                                        tbNeedCraftExperience;                                      // 0x02E0   (0x0008)  
	UTextBlock*                                        tbNeedSurvivalExperience;                                   // 0x02E8   (0x0008)  
	UWrapBox*                                          wbIngredients;                                              // 0x02F0   (0x0008)  
	UWrapBox*                                          wbResults;                                                  // 0x02F8   (0x0008)  
	UBorder*                                           bSelectRecipeHint;                                          // 0x0300   (0x0008)  
	UBorder*                                           bRecipesList;                                               // 0x0308   (0x0008)  
	UBorder*                                           bMainRecipeInfo;                                            // 0x0310   (0x0008)  
	UBorder*                                           bRecipeResults;                                             // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0320   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            CraftWindowItemWidgetClass;                                 // 0x0348   (0x0028)  
	TWeakObjectPtr<UClass*>                            IngredientItemSlotWidgetClass;                              // 0x0370   (0x0028)  
	TWeakObjectPtr<UClass*>                            ResultItemSlotWidgetClass;                                  // 0x0398   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDACraftRecipes.OnCraftWindowItemClicked
	void OnCraftWindowItemClicked(int32_t CraftItemID);                                                                      // [0x188b280] Final|Native|Private 
	// Function /Script/WTL.WTLPDACraftRecipes.OnCraftTypeSelectionChanged
	void OnCraftTypeSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                        // [0x188b350] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDADataSync
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLPDADataSync : public UUserWidget
{ 
public:
	UImage*                                            imgDataSync;                                                // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0268   (0x0020)  MISSED
	UWidgetAnimation*                                  SyncAnimation;                                              // 0x0288   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLPDADataSync.OnSyncAnimationFinished
	void OnSyncAnimationFinished();                                                                                          // [0x188b6f0] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAFraction
/// Size: 0x0758 (0x000288 - 0x0009E0)
class UWTLPDAFraction : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsFractionInfo;                                             // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsFractionImage;                                            // 0x0290   (0x0008)  
	UTextBlock*                                        tbFractionName;                                             // 0x0298   (0x0008)  
	UWTLCommonTextButton*                              ucBtnLeaderboardAllTime;                                    // 0x02A0   (0x0008)  
	UCanvasPanel*                                      cpLeaderboardPeriodBtn;                                     // 0x02A8   (0x0008)  
	UWTLCommonTextButton*                              ucBtnLeaderboardPeriod;                                     // 0x02B0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnLeaveFraction;                                         // 0x02B8   (0x0008)  
	UBorder*                                           bNotInFractionCaption;                                      // 0x02C0   (0x0008)  
	UBorder*                                           bFactionAdvantages;                                         // 0x02C8   (0x0008)  
	UBorder*                                           bInFractionCaption;                                         // 0x02D0   (0x0008)  
	UBorder*                                           bFractionInfo;                                              // 0x02D8   (0x0008)  
	UWidgetSwitcher*                                   wsRanks;                                                    // 0x02E0   (0x0008)  
	UBorder*                                           bCurrentRank;                                               // 0x02E8   (0x0008)  
	UBorder*                                           bRankNotAssigned;                                           // 0x02F0   (0x0008)  
	UBorder*                                           bNextRank;                                                  // 0x02F8   (0x0008)  
	UBorder*                                           bScoreToNextRank;                                           // 0x0300   (0x0008)  
	UBorder*                                           bMaxRankCaption;                                            // 0x0308   (0x0008)  
	UBorder*                                           bRanksTableCaption;                                         // 0x0310   (0x0008)  
	UWidgetSwitcher*                                   wsCurrentRank;                                              // 0x0318   (0x0008)  
	UWidgetSwitcher*                                   wsNextRank;                                                 // 0x0320   (0x0008)  
	UImage*                                            imgCurrentRank;                                             // 0x0328   (0x0008)  
	UTextBlock*                                        tbCurrentRankName;                                          // 0x0330   (0x0008)  
	UImage*                                            imgNextRank;                                                // 0x0338   (0x0008)  
	UTextBlock*                                        tbNextRankName;                                             // 0x0340   (0x0008)  
	UTextBlock*                                        tbScoreToNextRank;                                          // 0x0348   (0x0008)  
	UProgressBar*                                      pbProgressToNextRank;                                       // 0x0350   (0x0008)  
	UTextBlock*                                        tbCurrentScore;                                             // 0x0358   (0x0008)  
	UTextBlock*                                        tbNextRankScore;                                            // 0x0360   (0x0008)  
	UWTLCommonButton*                                  ucBtnRanksTable;                                            // 0x0368   (0x0008)  
	UWTLCommonButton*                                  ucBtnBackToRankInfo;                                        // 0x0370   (0x0008)  
	UScrollBox*                                        sbRanks;                                                    // 0x0378   (0x0008)  
	UWidgetSwitcher*                                   wsLeaderboardAllTime;                                       // 0x0380   (0x0008)  
	UBorder*                                           bLeaderboardAllTimeLoading;                                 // 0x0388   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardAllTimeBtnTopAll;                              // 0x0390   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardAllTimeBtnTopFraction;                         // 0x0398   (0x0008)  
	UBorder*                                           bLeaderboardAllTimeHeadline;                                // 0x03A0   (0x0008)  
	UScrollBox*                                        sbLeaderboardAllTime;                                       // 0x03A8   (0x0008)  
	UTextBlock*                                        tbLeaderboardAllTimeEmptyTitle;                             // 0x03B0   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardAllTimeBtnBack;                                // 0x03B8   (0x0008)  
	UWidgetSwitcher*                                   wsLeaderboardPeriod;                                        // 0x03C0   (0x0008)  
	UTextBlock*                                        tbLeaderboardPeriodSelectTitle;                             // 0x03C8   (0x0008)  
	UBorder*                                           bLeaderboardPeriodLoading;                                  // 0x03D0   (0x0008)  
	UHorizontalBox*                                    hbLeaderboardPeriodButtons;                                 // 0x03D8   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardPeriodBtnWeek;                                 // 0x03E0   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardPeriodBtnMonth;                                // 0x03E8   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardPeriodBtnQuarter;                              // 0x03F0   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardPeriodBtnYear;                                 // 0x03F8   (0x0008)  
	UBorder*                                           bLeaderboardPeriodHeadline;                                 // 0x0400   (0x0008)  
	UScrollBox*                                        sbLeaderboardPeriod;                                        // 0x0408   (0x0008)  
	UTextBlock*                                        tbLeaderboardPeriodEmptyTitle;                              // 0x0410   (0x0008)  
	UTextBlock*                                        tbLeaderboardPeriodFailedToGetTitle;                        // 0x0418   (0x0008)  
	UWTLCommonButton*                                  ucLeaderboardPeriodBtnBack;                                 // 0x0420   (0x0008)  
	unsigned char                                      UnknownData00_5[0x50];                                      // 0x0428   (0x0050)  MISSED
	TWeakObjectPtr<UClass*>                            RanksTableItemWidgetClass;                                  // 0x0478   (0x0028)  
	TWeakObjectPtr<UClass*>                            LeaderboardAllTimeItemWidgetClass;                          // 0x04A0   (0x0028)  
	TWeakObjectPtr<UClass*>                            LeaderboardPeriodItemWidgetClass;                           // 0x04C8   (0x0028)  
	FButtonStyle                                       DefaultButtonStyle;                                         // 0x04F0   (0x0278)  
	FButtonStyle                                       SelectedButtonStyle;                                        // 0x0768   (0x0278)  


	/// Functions
	// Function /Script/WTL.WTLPDAFraction.OnRanksTableBtnClicked
	void OnRanksTableBtnClicked();                                                                                           // [0x188b8b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaveFractionConfirmedFinal
	void OnLeaveFractionConfirmedFinal();                                                                                    // [0x188b8e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaveFractionConfirmed
	void OnLeaveFractionConfirmed();                                                                                         // [0x188b950] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaveFractionBtnClicked
	void OnLeaveFractionBtnClicked();                                                                                        // [0x188b970] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodYearBtnClicked
	void OnLeaderboardPeriodYearBtnClicked();                                                                                // [0x188bae0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodWeekBtnClicked
	void OnLeaderboardPeriodWeekBtnClicked();                                                                                // [0x188bba0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodScrollBoxScrolled
	void OnLeaderboardPeriodScrollBoxScrolled(float CurrentOffset);                                                          // [0x188b9e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodQuarterBtnClicked
	void OnLeaderboardPeriodQuarterBtnClicked();                                                                             // [0x188bb20] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodMonthBtnClicked
	void OnLeaderboardPeriodMonthBtnClicked();                                                                               // [0x188bb60] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodBtnClicked
	void OnLeaderboardPeriodBtnClicked();                                                                                    // [0x188bbe0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardPeriodBackBtnClicked
	void OnLeaderboardPeriodBackBtnClicked();                                                                                // [0x188b990] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardAllTimeUpdated
	void OnLeaderboardAllTimeUpdated();                                                                                      // [0x188bc60] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardAllTimeTopFractionBtnClicked
	void OnLeaderboardAllTimeTopFractionBtnClicked();                                                                        // [0x188bc80] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardAllTimeTopAllBtnClicked
	void OnLeaderboardAllTimeTopAllBtnClicked();                                                                             // [0x188bcb0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardAllTimeBtnClicked
	void OnLeaderboardAllTimeBtnClicked();                                                                                   // [0x188bce0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnLeaderboardAllTimeBackBtnClicked
	void OnLeaderboardAllTimeBackBtnClicked();                                                                               // [0x188bc00] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFraction.OnBackToRankInfoBtnClicked
	void OnBackToRankInfoBtnClicked();                                                                                       // [0x188b870] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAFractionLeaderboardItem
/// Size: 0x0080 (0x0004B8 - 0x000538)
class UWTLPDAFractionLeaderboardItem : public UWTLPDALeaderboardItemBase
{ 
public:
	UTextBlock*                                        tbName;                                                     // 0x04B8   (0x0008)  
	UTextBlock*                                        tbClass;                                                    // 0x04C0   (0x0008)  
	UTextBlock*                                        tbLevel;                                                    // 0x04C8   (0x0008)  
	UImage*                                            imgRank;                                                    // 0x04D0   (0x0008)  
	UTextBlock*                                        tbScoreCount;                                               // 0x04D8   (0x0008)  
	UImage*                                            imgFaction;                                                 // 0x04E0   (0x0008)  
	TWeakObjectPtr<UTexture2D*>                        ConfederationFactionTexture;                                // 0x04E8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        BlackSunsetFactionTexture;                                  // 0x0510   (0x0028)  
};

/// Class /Script/WTL.WTLPDAFractionLeaderboardPeriodItem
/// Size: 0x0040 (0x0004B8 - 0x0004F8)
class UWTLPDAFractionLeaderboardPeriodItem : public UWTLPDALeaderboardItemBase
{ 
public:
	UBorder*                                           bSex;                                                       // 0x04B8   (0x0008)  
	UWidgetSwitcher*                                   wsSex;                                                      // 0x04C0   (0x0008)  
	UImage*                                            imgClass;                                                   // 0x04C8   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x04D0   (0x0008)  
	UTextBlock*                                        tbScore;                                                    // 0x04D8   (0x0008)  
	UTextBlock*                                        tbTotalScore;                                               // 0x04E0   (0x0008)  
	TArray<FWTLCharacterClassTexture>                  CharacterClassTextures;                                     // 0x04E8   (0x0010)  
};

/// Class /Script/WTL.WTLPDAFractionRanksTableItem
/// Size: 0x0020 (0x000260 - 0x000280)
class UWTLPDAFractionRanksTableItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbNumber;                                                   // 0x0260   (0x0008)  
	UImage*                                            imgRank;                                                    // 0x0268   (0x0008)  
	UTextBlock*                                        tbRankName;                                                 // 0x0270   (0x0008)  
	UTextBlock*                                        tbScoreCount;                                               // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLPDAFriendsAndEnemies
/// Size: 0x0928 (0x000288 - 0x000BB0)
class UWTLPDAFriendsAndEnemies : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsMain;                                                     // 0x0288   (0x0008)  
	UBorder*                                           bNotCharacters;                                             // 0x0290   (0x0008)  
	UWTLCommonButton*                                  ucBtnAddFirstCharacter;                                     // 0x0298   (0x0008)  
	UBorder*                                           bCharactersListHeader;                                      // 0x02A0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsContactTypeFilter;                                       // 0x02A8   (0x0008)  
	UScrollBox*                                        sbCharactersList;                                           // 0x02B0   (0x0008)  
	UBorder*                                           bAddCharacterBtn;                                           // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnAddCharacter;                                          // 0x02C0   (0x0008)  
	UBorder*                                           bAction;                                                    // 0x02C8   (0x0008)  
	UBorder*                                           bActionBackground;                                          // 0x02D0   (0x0008)  
	UWidgetSwitcher*                                   wsAction;                                                   // 0x02D8   (0x0008)  
	UBorder*                                           bActionContent;                                             // 0x02E0   (0x0008)  
	UBorder*                                           bActionAddingCharacter;                                     // 0x02E8   (0x0008)  
	UTextBlock*                                        tbActionNameTitle;                                          // 0x02F0   (0x0008)  
	UWTLCommonComboBoxString*                          cbsContactType;                                             // 0x02F8   (0x0008)  
	UEditableTextBox*                                  etbCharacterName;                                           // 0x0300   (0x0008)  
	UMultiLineEditableTextBox*                         metbDescription;                                            // 0x0308   (0x0008)  
	UWTLCommonTextButton*                              ucBtnAction;                                                // 0x0310   (0x0008)  
	UWTLCommonButton*                                  ucBtnCancelAction;                                          // 0x0318   (0x0008)  
	UWidgetSwitcher*                                   wsContactInfo;                                              // 0x0320   (0x0008)  
	UBorder*                                           bSelectCharacter;                                           // 0x0328   (0x0008)  
	UTextBlock*                                        tbSelectedCharacterName;                                    // 0x0330   (0x0008)  
	UWidgetSwitcher*                                   wsSelectedContactType;                                      // 0x0338   (0x0008)  
	UBorder*                                           bSelectedDescription;                                       // 0x0340   (0x0008)  
	UTextBlock*                                        tbSelectedDescription;                                      // 0x0348   (0x0008)  
	UBorder*                                           bSelectedButtons;                                           // 0x0350   (0x0008)  
	UWTLCommonButton*                                  ucBtnInviteToGroup;                                         // 0x0358   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendMessage;                                           // 0x0360   (0x0008)  
	UWTLCommonButton*                                  ucBtnEdit;                                                  // 0x0368   (0x0008)  
	UWTLCommonButton*                                  ucBtnRemove;                                                // 0x0370   (0x0008)  
	unsigned char                                      UnknownData00_5[0xA0];                                      // 0x0378   (0x00A0)  MISSED
	TWeakObjectPtr<UClass*>                            FriendsAndEnemiesListItemWidgetClass;                       // 0x0418   (0x0028)  
	FComboButtonStyle                                  ContactTypeFriendComboBoxButtonStyle;                       // 0x0440   (0x03B8)  
	FComboButtonStyle                                  ContactTypeEnemyComboBoxButtonStyle;                        // 0x07F8   (0x03B8)  


	/// Functions
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.SendMessageBtnClicked
	void SendMessageBtnClicked();                                                                                            // [0x188c690] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.RemoveContactConfirmed
	void RemoveContactConfirmed();                                                                                           // [0x188c600] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.RemoveBtnClicked
	void RemoveBtnClicked();                                                                                                 // [0x188c650] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnGetCharacterIDByNameResponseWaitingEnd
	void OnGetCharacterIDByNameResponseWaitingEnd();                                                                         // [0x188cd30] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnGetCharacterIDByNameResponse
	void OnGetCharacterIDByNameResponse(FWTLResponse& Response);                                                             // [0x188cda0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnFriendsAndEnemiesListItemClicked
	void OnFriendsAndEnemiesListItemClicked(uint64_t CharacterID);                                                           // [0x188c520] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnDescriptionTextChanged
	void OnDescriptionTextChanged(FText& InText);                                                                            // [0x188c720] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnContactTypeFilterSelectionChanged
	void OnContactTypeFilterSelectionChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                // [0x188cb60] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnCharacterNameTextCommitted
	void OnCharacterNameTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                   // [0x188c850] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.OnCharacterNameTextChanged
	void OnCharacterNameTextChanged(FText& InText);                                                                          // [0x188ca10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.InviteToGroupBtnClicked
	void InviteToGroupBtnClicked();                                                                                          // [0x188c6b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.EditBtnClicked
	void EditBtnClicked();                                                                                                   // [0x188c670] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.CancelActionBtnClicked
	void CancelActionBtnClicked();                                                                                           // [0x188c6d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.AddCharacterBtnClicked
	void AddCharacterBtnClicked();                                                                                           // [0x188cb40] Final|Native|Private 
	// Function /Script/WTL.WTLPDAFriendsAndEnemies.ActionBtnClicked
	void ActionBtnClicked();                                                                                                 // [0x188c700] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAFriendsAndEnemiesListItem
/// Size: 0x00C8 (0x0004A0 - 0x000568)
class UWTLPDAFriendsAndEnemiesListItem : public UWTLCommonSelectedItem
{ 
public:
	UImage*                                            imgCharacterContactType;                                    // 0x04A0   (0x0008)  
	UTextBlock*                                        tbCharacterName;                                            // 0x04A8   (0x0008)  
	UImage*                                            imgNetStatus;                                               // 0x04B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x04B8   (0x0020)  MISSED
	TWeakObjectPtr<UTexture2D*>                        FriendIcon;                                                 // 0x04D8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        EnemyIcon;                                                  // 0x0500   (0x0028)  
	FLinearColor                                       FriendIconColor;                                            // 0x0528   (0x0010)  
	FLinearColor                                       EnemyIconColor;                                             // 0x0538   (0x0010)  
	FLinearColor                                       OnlineNetStatusColor;                                       // 0x0548   (0x0010)  
	FLinearColor                                       OfflineNetStatusColor;                                      // 0x0558   (0x0010)  
};

/// Class /Script/WTL.WTLPDAGroup
/// Size: 0x0140 (0x000288 - 0x0003C8)
class UWTLPDAGroup : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsGroupStatus;                                              // 0x0288   (0x0008)  
	UVerticalBox*                                      vbGroupInvites;                                             // 0x0290   (0x0008)  
	UScrollBox*                                        sbGroupInvites;                                             // 0x0298   (0x0008)  
	UWTLCommonButton*                                  ucBtnCreateGroup;                                           // 0x02A0   (0x0008)  
	UTextBlock*                                        tbGroupMembersTitle;                                        // 0x02A8   (0x0008)  
	UVerticalBox*                                      vbGroupMembers;                                             // 0x02B0   (0x0008)  
	UScrollBox*                                        sbGroupMembers;                                             // 0x02B8   (0x0008)  
	UWidgetSwitcher*                                   wsGroupName;                                                // 0x02C0   (0x0008)  
	UTextBlock*                                        tbGroupID;                                                  // 0x02C8   (0x0008)  
	UTextBlock*                                        tbGroupName;                                                // 0x02D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnChangeGroupName;                                       // 0x02D8   (0x0008)  
	UWidgetSwitcher*                                   wsGroupLeader;                                              // 0x02E0   (0x0008)  
	UTextBlock*                                        tbInvitePlayersTooltip;                                     // 0x02E8   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendGroupMessage;                                      // 0x02F0   (0x0008)  
	UWTLCommonButton*                                  ucBtnInviteToGroup;                                         // 0x02F8   (0x0008)  
	UWTLCommonButton*                                  ucBtnLeaveGroup;                                            // 0x0300   (0x0008)  
	UBorder*                                           bSetGroupName;                                              // 0x0308   (0x0008)  
	UEditableTextBox*                                  etbGroupName;                                               // 0x0310   (0x0008)  
	UWTLCommonButton*                                  ucBtnSetGroupName;                                          // 0x0318   (0x0008)  
	UWTLCommonButton*                                  ucBtnSetGroupNameCancel;                                    // 0x0320   (0x0008)  
	UBorder*                                           bInviteToGroup;                                             // 0x0328   (0x0008)  
	UWTLCommonSuggestionTextBox*                       stbCharacterNameToInvite;                                   // 0x0330   (0x0008)  
	UEditableTextBox*                                  etbCharacterNameToInvite;                                   // 0x0338   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendInviteToGroup;                                     // 0x0340   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendInviteToGroupCancel;                               // 0x0348   (0x0008)  
	unsigned char                                      UnknownData00_5[0x28];                                      // 0x0350   (0x0028)  MISSED
	TWeakObjectPtr<UClass*>                            GroupInviteItemWidgetClass;                                 // 0x0378   (0x0028)  
	TWeakObjectPtr<UClass*>                            GroupMemberItemWidgetClass;                                 // 0x03A0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDAGroup.OnSetGroupNameCancelBtnClicked
	void OnSetGroupNameCancelBtnClicked();                                                                                   // [0x188db00] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnSetGroupNameBtnClicked
	void OnSetGroupNameBtnClicked();                                                                                         // [0x188db30] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnSetGroupLeaderConfirm
	void OnSetGroupLeaderConfirm();                                                                                          // [0x188e2f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnSetGroupLeader
	void OnSetGroupLeader(uint64_t CharacterID, FString CharacterName);                                                      // [0x188e7a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnSendInviteToGroupCancelBtnClicked
	void OnSendInviteToGroupCancelBtnClicked();                                                                              // [0x188dab0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnSendInviteToGroupBtnClicked
	void OnSendInviteToGroupBtnClicked();                                                                                    // [0x188dae0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnSendGroupMessageBtnClicked
	void OnSendGroupMessageBtnClicked();                                                                                     // [0x188e140] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnLeaveGroupConfirm
	void OnLeaveGroupConfirm();                                                                                              // [0x188e000] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnLeaveGroupBtnClicked
	void OnLeaveGroupBtnClicked();                                                                                           // [0x188e0d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnInviteToGroupBtnClicked
	void OnInviteToGroupBtnClicked();                                                                                        // [0x188e0f0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnGroupMemberShowInfo
	void OnGroupMemberShowInfo(uint64_t CharacterID);                                                                        // [0x188e440] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnGroupMemberSendMessage
	void OnGroupMemberSendMessage(FString CharacterName);                                                                    // [0x188e520] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnExcludeGroupMemberConfirm
	void OnExcludeGroupMemberConfirm();                                                                                      // [0x188e1a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnExcludeGroupMember
	void OnExcludeGroupMember(uint64_t CharacterID, FString CharacterName);                                                  // [0x188e610] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnDeclineGroupInvite
	void OnDeclineGroupInvite(uint64_t InviteID);                                                                            // [0x188e930] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnCreateGroupBtnClicked
	void OnCreateGroupBtnClicked();                                                                                          // [0x188e160] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnChangeGroupNameBtnClicked
	void OnChangeGroupNameBtnClicked();                                                                                      // [0x188e180] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.OnAcceptGroupInvite
	void OnAcceptGroupInvite(uint64_t InviteID);                                                                             // [0x188ea10] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroup.GroupNameTextBoxTextCommitted
	void GroupNameTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                  // [0x188dd10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAGroup.GroupNameTextBoxTextChanged
	void GroupNameTextBoxTextChanged(FText& Text);                                                                           // [0x188ded0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAGroup.CharacterNameToInviteTextBoxTextCommitted
	void CharacterNameToInviteTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                      // [0x188db50] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLPDAGroupInviteItem
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLPDAGroupInviteItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbMembersCount;                                             // 0x0260   (0x0008)  
	UTextBlock*                                        tbInstigatorName;                                           // 0x0268   (0x0008)  
	UWTLCommonButton*                                  ucBtnAccept;                                                // 0x0270   (0x0008)  
	UWTLCommonButton*                                  ucBtnDecline;                                               // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_6[0x38];                                      // 0x0280   (0x0038)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDAGroupInviteItem.OnDeclineBtnClicked
	void OnDeclineBtnClicked();                                                                                              // [0x188ef50] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroupInviteItem.OnAcceptBtnClicked
	void OnAcceptBtnClicked();                                                                                               // [0x188ef80] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAGroupMemberItem
/// Size: 0x00B0 (0x000260 - 0x000310)
class UWTLPDAGroupMemberItem : public UUserWidget
{ 
public:
	UTextBlock*                                        tbGroupMemberName;                                          // 0x0260   (0x0008)  
	UImage*                                            imgGroupLead;                                               // 0x0268   (0x0008)  
	UHorizontalBox*                                    hbManageButtons;                                            // 0x0270   (0x0008)  
	UWTLCommonButton*                                  ucBtnSetLeader;                                             // 0x0278   (0x0008)  
	UWTLCommonButton*                                  ucBtnExclude;                                               // 0x0280   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendMessage;                                           // 0x0288   (0x0008)  
	UWTLCommonButton*                                  ucBtnInfo;                                                  // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_6[0x78];                                      // 0x0298   (0x0078)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDAGroupMemberItem.OnSetLeaderBtnClicked
	void OnSetLeaderBtnClicked();                                                                                            // [0x188f280] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroupMemberItem.OnSendMessageBtnClicked
	void OnSendMessageBtnClicked();                                                                                          // [0x188f210] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroupMemberItem.OnInfoBtnClicked
	void OnInfoBtnClicked();                                                                                                 // [0x188f1e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAGroupMemberItem.OnExcludeBtnClicked
	void OnExcludeBtnClicked();                                                                                              // [0x188f240] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAItemExperience
/// Size: 0x0068 (0x000288 - 0x0002F0)
class UWTLPDAItemExperience : public UWTLPDABase
{ 
public:
	UTextBlock*                                        tbType;                                                     // 0x0288   (0x0008)  
	UTextBlock*                                        tbClassRestriction;                                         // 0x0290   (0x0008)  
	UTextBlock*                                        tbPBExperience;                                             // 0x0298   (0x0008)  
	UProgressBar*                                      pbExperience;                                               // 0x02A0   (0x0008)  
	UBorder*                                           bBackGroundMain;                                            // 0x02A8   (0x0008)  
	UBorder*                                           bBackground;                                                // 0x02B0   (0x0008)  
	UImage*                                            imgItem;                                                    // 0x02B8   (0x0008)  
	UButton*                                           btnListItem;                                                // 0x02C0   (0x0008)  
	UVerticalBox*                                      vbContent;                                                  // 0x02C8   (0x0008)  
	UBorder*                                           bHead;                                                      // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x02D8   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDAItemExperience.OnBtnClickWeapon
	void OnBtnClickWeapon();                                                                                                 // [0x188f3f0] Final|Native|Protected 
};

/// Class /Script/WTL.WTLPDALegendItem
/// Size: 0x0018 (0x000268 - 0x000280)
class UWTLPDALegendItem : public UWTLHUDWidgetBase
{ 
public:
	UImage*                                            imgMarkerType;                                              // 0x0268   (0x0008)  
	UBorder*                                           bMarkerTypeName;                                            // 0x0270   (0x0008)  
	UTextBlock*                                        tbMarkerTypeName;                                           // 0x0278   (0x0008)  
};

/// Class /Script/WTL.WTLPDALocationsListItem
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class UWTLPDALocationsListItem : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbLocationName;                                             // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04A8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLPDAMail
/// Size: 0x0170 (0x000288 - 0x0003F8)
class UWTLPDAMail : public UWTLPDABase
{ 
public:
	UWidgetSwitcher*                                   wsMail;                                                     // 0x0288   (0x0008)  
	UWTLCommonButton*                                  ucBtnWriteMessageTip;                                       // 0x0290   (0x0008)  
	UWTLCommonCheckBox*                                cbSelector;                                                 // 0x0298   (0x0008)  
	UWTLCommonComboBoxString*                          cbsFilter;                                                  // 0x02A0   (0x0008)  
	UWTLCommonButton*                                  ucBtnMarkAsRead;                                            // 0x02A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnDelete;                                                // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnWriteMessage;                                          // 0x02B8   (0x0008)  
	UWidgetSwitcher*                                   wsMessageList;                                              // 0x02C0   (0x0008)  
	UScrollBox*                                        sbMessages;                                                 // 0x02C8   (0x0008)  
	UWidgetSwitcher*                                   wsMessageInfo;                                              // 0x02D0   (0x0008)  
	UTextBlock*                                        tbMessageSubject;                                           // 0x02D8   (0x0008)  
	UTextBlock*                                        tbMessageFrom;                                              // 0x02E0   (0x0008)  
	UTextBlock*                                        tbMessageDate;                                              // 0x02E8   (0x0008)  
	UWTLCommonButton*                                  ucBtnDeleteOpen;                                            // 0x02F0   (0x0008)  
	UEditableTextBox*                                  etbMessageTo;                                               // 0x02F8   (0x0008)  
	UEditableTextBox*                                  etbMessageSubject;                                          // 0x0300   (0x0008)  
	UTextBlock*                                        tbToLetterCurrent;                                          // 0x0308   (0x0008)  
	UTextBlock*                                        tbToLetterMax;                                              // 0x0310   (0x0008)  
	UTextBlock*                                        tbSubjectLetterCurrent;                                     // 0x0318   (0x0008)  
	UTextBlock*                                        tbSubjectLetterMax;                                         // 0x0320   (0x0008)  
	UMultiLineEditableTextBox*                         etbMessageText;                                             // 0x0328   (0x0008)  
	UTextBlock*                                        tbTextLetterCurrent;                                        // 0x0330   (0x0008)  
	UTextBlock*                                        tbTextLetterMax;                                            // 0x0338   (0x0008)  
	UWTLCommonButton*                                  ucBtnSendMessage;                                           // 0x0340   (0x0008)  
	UTextBlock*                                        tbMessageText;                                              // 0x0348   (0x0008)  
	unsigned char                                      UnknownData00_5[0x80];                                      // 0x0350   (0x0080)  MISSED
	TWeakObjectPtr<UClass*>                            PDAMailMessageItemWidgetClass;                              // 0x03D0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDAMail.OnWriteMessageTipBtnClicked
	void OnWriteMessageTipBtnClicked();                                                                                      // [0x18901a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnWriteMessageBtnClicked
	void OnWriteMessageBtnClicked();                                                                                         // [0x188fd90] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnSendMessageResponse
	void OnSendMessageResponse(FWTLOperationResult& OperationResult);                                                        // [0x188fbd0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMail.OnSendMessageBtnClicked
	void OnSendMessageBtnClicked();                                                                                          // [0x188fcd0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnSelectorCheckStateChanged
	void OnSelectorCheckStateChanged(bool bIsChecked);                                                                       // [0x18900c0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnMessageToTextChanged
	void OnMessageToTextChanged(FText& Text);                                                                                // [0x188faa0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMail.OnMessageTextChanged
	void OnMessageTextChanged(FText& Text);                                                                                  // [0x188f840] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMail.OnMessageSubjectTextChanged
	void OnMessageSubjectTextChanged(FText& Text);                                                                           // [0x188f970] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMail.OnMarkAsReadBtnClicked
	void OnMarkAsReadBtnClicked();                                                                                           // [0x188feb0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnMailMessageClicked
	void OnMailMessageClicked(uint64_t MessageID);                                                                           // [0x188f760] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnMailMessageChecked
	void OnMailMessageChecked(uint64_t MessageID, bool IsChecked, bool IsRead);                                              // [0x188f560] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnFilterValueChanged
	void OnFilterValueChanged(FString SelectedOption, TEnumAsByte<ESelectInfo> SelectionType);                               // [0x188fed0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnDeleteOpenConfirm
	void OnDeleteOpenConfirm();                                                                                              // [0x188fcf0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnDeleteOpenBtnClicked
	void OnDeleteOpenBtnClicked();                                                                                           // [0x188fd70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnDeleteConfirm
	void OnDeleteConfirm();                                                                                                  // [0x188fdb0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMail.OnDeleteBtnClicked
	void OnDeleteBtnClicked();                                                                                               // [0x188fe90] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAMailMessageItem
/// Size: 0x0178 (0x0002B0 - 0x000428)
class UWTLPDAMailMessageItem : public UWTLCommonClickedItem
{ 
public:
	UWTLCommonCheckBox*                                cbSelect;                                                   // 0x02B0   (0x0008)  
	UImage*                                            imgPriority;                                                // 0x02B8   (0x0008)  
	UTextBlock*                                        tbSubject;                                                  // 0x02C0   (0x0008)  
	unsigned char                                      UnknownData00_5[0xC];                                       // 0x02C8   (0x000C)  MISSED
	FLinearColor                                       ReadBrushColor;                                             // 0x02D4   (0x0010)  
	FLinearColor                                       NotReadBrushColor;                                          // 0x02E4   (0x0010)  
	FLinearColor                                       CheckedBrushColor;                                          // 0x02F4   (0x0010)  
	FLinearColor                                       ReadTextColor;                                              // 0x0304   (0x0010)  
	FLinearColor                                       NotReadTextColor;                                           // 0x0314   (0x0010)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0324   (0x0004)  MISSED
	FSlateFontInfo                                     ReadFont;                                                   // 0x0328   (0x0058)  
	FSlateFontInfo                                     NotReadFont;                                                // 0x0380   (0x0058)  
	FLinearColor                                       HighPriorityColor;                                          // 0x03D8   (0x0010)  
	FLinearColor                                       CriticalPriorityColor;                                      // 0x03E8   (0x0010)  
	unsigned char                                      UnknownData02_6[0x30];                                      // 0x03F8   (0x0030)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDAMailMessageItem.OnSelectCheckStateChanged
	void OnSelectCheckStateChanged(bool bIsChecked);                                                                         // [0x1890570] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAMain
/// Size: 0x2300 (0x000268 - 0x002568)
class UWTLPDAMain : public UWTLHUDWidgetBase
{ 
public:
	UImage*                                            imgScreenGlow;                                              // 0x0268   (0x0008)  
	UCanvasPanel*                                      cpBorders;                                                  // 0x0270   (0x0008)  
	UBorder*                                           bBackground;                                                // 0x0278   (0x0008)  
	UCanvasPanel*                                      cpMenuAndInfo;                                              // 0x0280   (0x0008)  
	UWidgetSwitcher*                                   wsPDAWidgetSwitcher;                                        // 0x0288   (0x0008)  
	UWTLPDAMenu*                                       ucMenu;                                                     // 0x0290   (0x0008)  
	UWTLPDACharacterInfo*                              ucCharacterInfo;                                            // 0x0298   (0x0008)  
	UWTLPDACharacterParameters*                        ucCharacterParameters;                                      // 0x02A0   (0x0008)  
	UWTLPDACharacterSkills*                            ucCharacterSkills;                                          // 0x02A8   (0x0008)  
	UWTLPDAQuestLog*                                   ucQuestLog;                                                 // 0x02B0   (0x0008)  
	UWTLPDAMap*                                        ucMap;                                                      // 0x02B8   (0x0008)  
	UWTLPDASettings*                                   ucSettings;                                                 // 0x02C0   (0x0008)  
	UWTLPDAMail*                                       ucMail;                                                     // 0x02C8   (0x0008)  
	UWTLPDAGroup*                                      ucGroup;                                                    // 0x02D0   (0x0008)  
	UWTLPDAClan*                                       ucClan;                                                     // 0x02D8   (0x0008)  
	UWTLPDAFraction*                                   ucFraction;                                                 // 0x02E0   (0x0008)  
	UWTLPDAFriendsAndEnemies*                          ucFriendsAndEnemies;                                        // 0x02E8   (0x0008)  
	UWTLPDACraftRecipes*                               ucCraftRecipes;                                             // 0x02F0   (0x0008)  
	UWTLPDAAchievements*                               ucAchievements;                                             // 0x02F8   (0x0008)  
	UWTLPDAPremium*                                    ucPremium;                                                  // 0x0300   (0x0008)  
	UWTLPDASocialNetworkAuthorization*                 ucSocialNetworkAuthorization;                               // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0310   (0x0008)  MISSED
	UWTLPDABase*                                       m_CurrentPDAWidget;                                         // 0x0318   (0x0008)  
	UTextBlock*                                        tbCurrentLevelTime;                                         // 0x0320   (0x0008)  
	UBorder*                                           bLeftBorder;                                                // 0x0328   (0x0008)  
	UBorder*                                           bRightBorder;                                               // 0x0330   (0x0008)  
	UWTLPDAMenuToolBar*                                ucMenuToolBar;                                              // 0x0338   (0x0008)  
	UWTLCommonButton*                                  ucBtnHome;                                                  // 0x0340   (0x0008)  
	UWTLCommonMessageDialog*                           ucMessageDialog;                                            // 0x0348   (0x0008)  
	UWTLPDANetworkSignal*                              ucNetworkSignal;                                            // 0x0350   (0x0008)  
	UBorder*                                           bCurrentLevelTime;                                          // 0x0358   (0x0008)  
	UWTLPDADataSync*                                   ucDataSync;                                                 // 0x0360   (0x0008)  
	UImage*                                            imgHealth;                                                  // 0x0368   (0x0008)  
	UImage*                                            imgStamina;                                                 // 0x0370   (0x0008)  
	UBorder*                                           bExperience;                                                // 0x0378   (0x0008)  
	UTextBlock*                                        tbHealth;                                                   // 0x0380   (0x0008)  
	UTextBlock*                                        tbStamina;                                                  // 0x0388   (0x0008)  
	UTextBlock*                                        tbExperience;                                               // 0x0390   (0x0008)  
	UImage*                                            imgFirstIndicator;                                          // 0x0398   (0x0008)  
	UImage*                                            imgSecondIndicator;                                         // 0x03A0   (0x0008)  
	UButton*                                           btnPDAUp;                                                   // 0x03A8   (0x0008)  
	UButton*                                           btnPDADown;                                                 // 0x03B0   (0x0008)  
	UButton*                                           btnPDACircle;                                               // 0x03B8   (0x0008)  
	UImage*                                            imgPDABackground;                                           // 0x03C0   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x03C8   (0x0008)  MISSED
	UFMODEvent*                                        m_PDAButtonPressSoundEvent;                                 // 0x03D0   (0x0008)  
	UFMODEvent*                                        m_PDAButtonReleaseSoundEvent;                               // 0x03D8   (0x0008)  
	unsigned char                                      UnknownData02_5[0x50];                                      // 0x03E0   (0x0050)  MISSED
	UWidgetAnimation*                                  m_CurrentFirstIndicatorAnimation;                           // 0x0430   (0x0008)  
	UWidgetAnimation*                                  m_CurrentSecondIndicatorAnimation;                          // 0x0438   (0x0008)  
	FWTLPDACustomization                               DefaultCustomization;                                       // 0x0440   (0x0770)  
	FWTLPDACustomization                               ConfederationCustomization;                                 // 0x0BB0   (0x0770)  
	FWTLPDACustomization                               BlackSunsetCustomization;                                   // 0x1320   (0x0770)  
	FSlateColor                                        RedColorParam;                                              // 0x1A90   (0x0028)  
	FSlateColor                                        YellowColorParam;                                           // 0x1AB8   (0x0028)  
	FSlateColor                                        GreenColorParam;                                            // 0x1AE0   (0x0028)  
	TArray<UWidgetAnimation*>                          FirstIndicatorAnimations;                                   // 0x1B08   (0x0010)  
	TArray<UWidgetAnimation*>                          SecondIndicatorAnimations;                                  // 0x1B18   (0x0010)  
	UWidgetAnimation*                                  ScreenOffAnimation;                                         // 0x1B28   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        PDAButtonPressSoundEvent;                                   // 0x1B30   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        PDAButtonReleaseSoundEvent;                                 // 0x1B58   (0x0028)  
	FButtonStyle                                       PDAUpButtonStyleDefault;                                    // 0x1B80   (0x0278)  
	FButtonStyle                                       PDAUpButtonStylePressed;                                    // 0x1DF8   (0x0278)  
	FButtonStyle                                       PDADownButtonStyleDefault;                                  // 0x2070   (0x0278)  
	FButtonStyle                                       PDADownButtonStylePressed;                                  // 0x22E8   (0x0278)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x2560   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDAMain.ShowPDAWidget
	void ShowPDAWidget(EWTLPDAWidget PDAWidget);                                                                             // [0x1890970] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.PlayRandomSecondIndicatorAnimation
	void PlayRandomSecondIndicatorAnimation();                                                                               // [0x1890ef0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.PlayRandomFirstIndicatorAnimation
	void PlayRandomFirstIndicatorAnimation();                                                                                // [0x1890f40] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnSocialNetworkClicked
	void OnSocialNetworkClicked(EWTLSocialNetworkType SocialNetworkType, EWTLPDAWidget PDAWidgetType);                       // [0x18907d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnSecondIndicatorAnimationFinished
	void OnSecondIndicatorAnimationFinished();                                                                               // [0x1890da0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnPDAUpButtonClicked
	void OnPDAUpButtonClicked();                                                                                             // [0x1890d80] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnPDADownButtonClicked
	void OnPDADownButtonClicked();                                                                                           // [0x1890d60] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnPDACircleButtonClicked
	void OnPDACircleButtonClicked();                                                                                         // [0x1890d30] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnHomeButtonClick
	void OnHomeButtonClick();                                                                                                // [0x1890a70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnFirstIndicatorAnimationFinished
	void OnFirstIndicatorAnimationFinished();                                                                                // [0x1890e40] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMain.OnBackgroundMouseButtonDown
	FEventReply OnBackgroundMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                // [0x1890ae0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLPDAMap
/// Size: 0x05A8 (0x000288 - 0x000830)
class UWTLPDAMap : public UWTLPDABase
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0288   (0x0008)  MISSED
	UBorder*                                           bMapScreen;                                                 // 0x0290   (0x0008)  
	USlider*                                           slZoom;                                                     // 0x0298   (0x0008)  
	UWTLCommonButton*                                  ucBtnFindPlayerMarker;                                      // 0x02A0   (0x0008)  
	UWTLCommonCheckBox*                                cbFindPlayerMarker;                                         // 0x02A8   (0x0008)  
	UWTLCommonButton*                                  ucBtnLegend;                                                // 0x02B0   (0x0008)  
	UWTLCommonButton*                                  ucBtnMarkers;                                               // 0x02B8   (0x0008)  
	UWTLCommonButton*                                  ucBtnLocationsList;                                         // 0x02C0   (0x0008)  
	UBorder*                                           bSectorPosition;                                            // 0x02C8   (0x0008)  
	UTextBlock*                                        tbSectorPosition;                                           // 0x02D0   (0x0008)  
	UCanvasPanel*                                      cpNoSatelliteSignal;                                        // 0x02D8   (0x0008)  
	UCanvasPanel*                                      cpMapLoadedFromModule;                                      // 0x02E0   (0x0008)  
	UBorder*                                           bLegend;                                                    // 0x02E8   (0x0008)  
	UBorder*                                           bLegendTitle;                                               // 0x02F0   (0x0008)  
	UBorder*                                           bLegendShowState;                                           // 0x02F8   (0x0008)  
	UBorder*                                           bMarkers;                                                   // 0x0300   (0x0008)  
	UBorder*                                           bMarkersTitle;                                              // 0x0308   (0x0008)  
	UBorder*                                           bMarkersButtons;                                            // 0x0310   (0x0008)  
	UTextBlock*                                        tbCurrentMarkersCount;                                      // 0x0318   (0x0008)  
	UTextBlock*                                        tbMaxMarkersCount;                                          // 0x0320   (0x0008)  
	UScrollBox*                                        sbLegendItems;                                              // 0x0328   (0x0008)  
	UScrollBox*                                        sbMarkerItems;                                              // 0x0330   (0x0008)  
	UScrollBox*                                        sbLocationItems;                                            // 0x0338   (0x0008)  
	UTextBlock*                                        tbEmptyMarkersListTitle;                                    // 0x0340   (0x0008)  
	UWTLCommonCheckBox*                                cbShowAllLegendItems;                                       // 0x0348   (0x0008)  
	UWTLCommonButton*                                  ucBtnAddMarker;                                             // 0x0350   (0x0008)  
	UWTLCommonButton*                                  ucBtnRemoveAllMarkers;                                      // 0x0358   (0x0008)  
	UBorder*                                           bLocationsList;                                             // 0x0360   (0x0008)  
	UBorder*                                           bLocationsListTitle;                                        // 0x0368   (0x0008)  
	UBorder*                                           bLocationsListItems;                                        // 0x0370   (0x0008)  
	UBorder*                                           bSetMarkerHint;                                             // 0x0378   (0x0008)  
	UTextBlock*                                        tbSetMarkerHint;                                            // 0x0380   (0x0008)  
	UMenuAnchor*                                       maMap;                                                      // 0x0388   (0x0008)  
	UBorder*                                           bMarkerParametersBackground;                                // 0x0390   (0x0008)  
	UVerticalBox*                                      vbMarkerParameters;                                         // 0x0398   (0x0008)  
	UBorder*                                           bMarkerParametersTitle;                                     // 0x03A0   (0x0008)  
	UBorder*                                           bMarkerParametersButtons;                                   // 0x03A8   (0x0008)  
	UWTLUtilityColorPicker*                            ucMarkerColorPicker;                                        // 0x03B0   (0x0008)  
	UEditableTextBox*                                  etbMarkerName;                                              // 0x03B8   (0x0008)  
	UWTLCommonCheckBox*                                cbMarkerSticking;                                           // 0x03C0   (0x0008)  
	UWrapBox*                                          wpMarkersSubTypes;                                          // 0x03C8   (0x0008)  
	UWTLCommonButton*                                  ucBtnSetMarker;                                             // 0x03D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnSetMarkerCancel;                                       // 0x03D8   (0x0008)  
	UCanvasPanel*                                      cpMarker;                                                   // 0x03E0   (0x0008)  
	USizeBox*                                          szbMap;                                                     // 0x03E8   (0x0008)  
	UImage*                                            imgMap;                                                     // 0x03F0   (0x0008)  
	UTextBlock*                                        tbMarkerParametersTitle;                                    // 0x03F8   (0x0008)  
	UTextBlock*                                        tbMarkersTitle;                                             // 0x0400   (0x0008)  
	UTextBlock*                                        tbLegendItemsShowState;                                     // 0x0408   (0x0008)  
	unsigned char                                      UnknownData01_5[0x170];                                     // 0x0410   (0x0170)  MISSED
	UWTLCommonPopupMenu*                               m_MapPopupMenuWidget;                                       // 0x0580   (0x0008)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x0588   (0x0008)  MISSED
	FWTLMapItemData                                    DefaultMapItemData;                                         // 0x0590   (0x0118)  
	float                                              LegendItemsMinSizeX;                                        // 0x06A8   (0x0004)  
	float                                              LegendItemsMaxSizeX;                                        // 0x06AC   (0x0004)  
	float                                              LegendItemsOriginalMaxSizeY;                                // 0x06B0   (0x0004)  
	int32_t                                            LegendItemsMaxVisibleItems;                                 // 0x06B4   (0x0004)  
	float                                              LegendItemsElementHeight;                                   // 0x06B8   (0x0004)  
	float                                              MarkerItemsOriginalSizeX;                                   // 0x06BC   (0x0004)  
	float                                              MarkerItemsOriginalMaxSizeY;                                // 0x06C0   (0x0004)  
	int32_t                                            MarkerItemsMaxVisibleItems;                                 // 0x06C4   (0x0004)  
	float                                              MarkerItemsElementHeight;                                   // 0x06C8   (0x0004)  
	float                                              LocationItemsMinSizeX;                                      // 0x06CC   (0x0004)  
	float                                              LocationItemsOriginalMaxSizeY;                              // 0x06D0   (0x0004)  
	int32_t                                            LocationItemsMaxVisibleItems;                               // 0x06D4   (0x0004)  
	float                                              LocationItemsElementHeight;                                 // 0x06D8   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x06DC   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            PDALegendItemClass;                                         // 0x06E0   (0x0028)  
	TWeakObjectPtr<UClass*>                            PDAMarkerListItemClass;                                     // 0x0708   (0x0028)  
	TWeakObjectPtr<UClass*>                            PDALocationsListItemClass;                                  // 0x0730   (0x0028)  
	TWeakObjectPtr<UClass*>                            MapMarkerClass;                                             // 0x0758   (0x0028)  
	TWeakObjectPtr<UClass*>                            PopupMenuWidgetClass;                                       // 0x0780   (0x0028)  
	TWeakObjectPtr<UClass*>                            MarkerSubTypeItemClass;                                     // 0x07A8   (0x0028)  
	UWidgetAnimation*                                  SetMarkerHintBlinkingAnimation;                             // 0x07D0   (0x0008)  
	UWidgetAnimation*                                  NoSatelliteSignalBlinkingAnimation;                         // 0x07D8   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        ZoomInMapSoundEvent;                                        // 0x07E0   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ZoomOutMapSoundEvent;                                       // 0x0808   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDAMap.UpdatePlayerMarkers
	void UpdatePlayerMarkers();                                                                                              // [0x18933e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.ShowPlayerMarkerParameters
	void ShowPlayerMarkerParameters(int32_t MarkerIndex, FString MarkerName, char SubTypeNumber, FString MarkerColor, bool IsSticking); // [0x1893040] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.ShowHidePlayerMarkers
	void ShowHidePlayerMarkers();                                                                                            // [0x1892dd0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.ShowHideLocationsList
	void ShowHideLocationsList();                                                                                            // [0x1892db0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.ShowHideLegend
	void ShowHideLegend();                                                                                                   // [0x1892df0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.ShowAllMarkerItemsCheckBoxStateChanged
	void ShowAllMarkerItemsCheckBoxStateChanged(bool bIsChecked);                                                            // [0x1892f30] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.SetMarkerCancelBtnClick
	void SetMarkerCancelBtnClick();                                                                                          // [0x18927a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.SetMarkerBtnClick
	void SetMarkerBtnClick();                                                                                                // [0x1892800] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.RemoveAllPlayerMarkersConfirmed
	void RemoveAllPlayerMarkersConfirmed();                                                                                  // [0x1892c10] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.RemoveAllPlayerMarkersBtnClick
	void RemoveAllPlayerMarkersBtnClick();                                                                                   // [0x1892d70] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnZoomSliderValueChanged
	void OnZoomSliderValueChanged(float Value);                                                                              // [0x18911e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMenuOpenChanged
	void OnMenuOpenChanged(bool bIsOpen);                                                                                    // [0x18379a0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMarkerSubTypeItemClick
	void OnMarkerSubTypeItemClick(char SubTypeNumber, FSlateBrush& SubTypeBrush);                                            // [0x1891ac0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMap.OnMarkerShare
	void OnMarkerShare();                                                                                                    // [0x1892190] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMarkerPopupMenuOpen
	void OnMarkerPopupMenuOpen(FVector2D AbsoluteMouseClickPos, FWTLMapMarker Marker);                                       // [0x18922c0] Final|Native|Private|HasDefaults 
	// Function /Script/WTL.WTLPDAMap.OnMarkerFindBtnClick
	void OnMarkerFindBtnClick(FVector& MarkerPosition);                                                                      // [0x18925e0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLPDAMap.OnMarkerEditBtnClick
	void OnMarkerEditBtnClick(int32_t MarkerIndex, FString MarkerName, char SubTypeNumber, FString MarkerColor, bool IsSticking); // [0x1891de0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMarkerEdit
	void OnMarkerEdit();                                                                                                     // [0x18921d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMarkerDeleteBtnClick
	void OnMarkerDeleteBtnClick(int32_t MarkerIndex);                                                                        // [0x1891d10] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMarkerDelete
	void OnMarkerDelete();                                                                                                   // [0x18921b0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMarkerColorPicked
	void OnMarkerColorPicked(FLinearColor& ChangedColor);                                                                    // [0x18926c0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLPDAMap.OnMarkerAdd
	void OnMarkerAdd();                                                                                                      // [0x1892220] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnMapScreenBorderMouseMove
	void OnMapScreenBorderMouseMove(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                        // [0x1891540] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMap.OnMapScreenBorderMouseDown
	void OnMapScreenBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                        // [0x1891790] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMap.OnMapScreenBorderMouseDoubleClick
	void OnMapScreenBorderMouseDoubleClick(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                 // [0x18912f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMap.OnLocationsListItemClicked
	void OnLocationsListItemClicked(int32_t LocationID);                                                                     // [0x18919e0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.OnGetMapMenuContent
	UWidget* OnGetMapMenuContent();                                                                                          // [0x1893020] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.MarkerStickingCheckBoxChanged
	void MarkerStickingCheckBoxChanged(bool bIsChecked);                                                                     // [0x1892820] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.MarkerNameTextBoxTextCommitted
	void MarkerNameTextBoxTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                 // [0x1892900] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMap.MarkerNameTextBoxTextChanged
	void MarkerNameTextBoxTextChanged(FText& Text);                                                                          // [0x1892ae0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPDAMap.FindPlayerMarkerCheckBoxStateChanged
	void FindPlayerMarkerCheckBoxStateChanged(bool bIsChecked);                                                              // [0x1892e10] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.FindPlayerMarker
	void FindPlayerMarker();                                                                                                 // [0x1892f10] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMap.AddPlayerMarkerBtnClick
	void AddPlayerMarkerBtnClick();                                                                                          // [0x1892d90] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAMapMarker
/// Size: 0x0018 (0x000318 - 0x000330)
class UWTLPDAMapMarker : public UWTLCommonMapMarker
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0318   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLPDAMarkerListItem
/// Size: 0x00E0 (0x000268 - 0x000348)
class UWTLPDAMarkerListItem : public UWTLHUDWidgetBase
{ 
public:
	UImage*                                            imgMarkerSubType;                                           // 0x0268   (0x0008)  
	UTextBlock*                                        tbMarkerName;                                               // 0x0270   (0x0008)  
	UWTLCommonButton*                                  ucBtnFindMarker;                                            // 0x0278   (0x0008)  
	UWTLCommonButton*                                  ucBtnEditMarker;                                            // 0x0280   (0x0008)  
	UWTLCommonButton*                                  ucBtnDeleteMarker;                                          // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0xB8];                                      // 0x0290   (0x00B8)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDAMarkerListItem.OnFindMarkerBtnClick
	void OnFindMarkerBtnClick();                                                                                             // [0x1894480] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMarkerListItem.OnEditMarkerBtnClick
	void OnEditMarkerBtnClick();                                                                                             // [0x1894460] Final|Native|Private 
	// Function /Script/WTL.WTLPDAMarkerListItem.OnDeleteMarkerBtnClick
	void OnDeleteMarkerBtnClick();                                                                                           // [0x1894430] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAMarkerSubTypeItem
/// Size: 0x0040 (0x000268 - 0x0002A8)
class UWTLPDAMarkerSubTypeItem : public UWTLHUDWidgetBase
{ 
public:
	UImage*                                            imgMarkerSubType;                                           // 0x0268   (0x0008)  
	UImage*                                            imgBorder;                                                  // 0x0270   (0x0008)  
	UFMODEvent*                                        MouseButtonDownSoundEvent;                                  // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x0280   (0x0028)  MISSED
};

/// Class /Script/WTL.WTLPDAMenuBase
/// Size: 0x0828 (0x000288 - 0x000AB0)
class UWTLPDAMenuBase : public UWTLPDABase
{ 
public:
	UPanelWidget*                                      pwMenuButtons;                                              // 0x0288   (0x0008)  
	TArray<UWTLPDAMenuButtonBase*>                     m_MenuButtons;                                              // 0x0290   (0x0010)  
	unsigned char                                      UnknownData00_5[0x30];                                      // 0x02A0   (0x0030)  MISSED
	FSlateColor                                        MenuButtonNormalButtonStyleTintColor;                       // 0x02D0   (0x0028)  
	FSlateColor                                        MenuButtonHoveredButtonStyleTintColor;                      // 0x02F8   (0x0028)  
	FSlateColor                                        MenuButtonPressedButtonStyleTintColor;                      // 0x0320   (0x0028)  
	FButtonStyle                                       FractionNoneButtonStyle;                                    // 0x0348   (0x0278)  
	FButtonStyle                                       FractionConfederationButtonStyle;                           // 0x05C0   (0x0278)  
	FButtonStyle                                       FractionBlackSunsetButtonStyle;                             // 0x0838   (0x0278)  


	/// Functions
	// Function /Script/WTL.WTLPDAMenuBase.OnButtonClicked
	void OnButtonClicked(EWTLPDAWidget PDAWidgetType);                                                                       // [0x1894a20] Final|Native|Protected 
};

/// Class /Script/WTL.WTLPDAMenu
/// Size: 0x0030 (0x000AB0 - 0x000AE0)
class UWTLPDAMenu : public UWTLPDAMenuBase
{ 
public:
	UScrollBox*                                        sbMenuButtons;                                              // 0x0AB0   (0x0008)  
	UBorder*                                           bSnackBar;                                                  // 0x0AB8   (0x0008)  
	UTextBlock*                                        tbSnackBarMessage;                                          // 0x0AC0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0AC8   (0x0010)  MISSED
	UWidgetAnimation*                                  ShowSnackBarAnimation;                                      // 0x0AD8   (0x0008)  
};

/// Class /Script/WTL.WTLPDAMenuButtonBase
/// Size: 0x02C8 (0x000340 - 0x000608)
class UWTLPDAMenuButtonBase : public UWTLCommonButton
{ 
public:
	UBorder*                                           bNotification;                                              // 0x0340   (0x0008)  
	UTextBlock*                                        tbNotificationsCount;                                       // 0x0348   (0x0008)  
	unsigned char                                      UnknownData00_5[0x38];                                      // 0x0350   (0x0038)  MISSED
	EWTLPDAWidget                                      PDAWidgetType;                                              // 0x0388   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0389   (0x0007)  MISSED
	FButtonStyle                                       ButtonStyle;                                                // 0x0390   (0x0278)  


	/// Functions
	// Function /Script/WTL.WTLPDAMenuButtonBase.Update
	void Update();                                                                                                           // [0x1895050] Final|Native|Public  
	// Function /Script/WTL.WTLPDAMenuButtonBase.SetNotificationsCount
	void SetNotificationsCount(int32_t Count);                                                                               // [0x1894ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLPDAMenuButtonBase.K2_Update
	void K2_Update();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPDAMenuButtonBase.K2_OnMenuOpened
	void K2_OnMenuOpened();                                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLPDAMenuButton
/// Size: 0x0008 (0x000608 - 0x000610)
class UWTLPDAMenuButton : public UWTLPDAMenuButtonBase
{ 
public:
	UTextBlock*                                        tbTypeText;                                                 // 0x0608   (0x0008)  
};

/// Class /Script/WTL.WTLPDAMenuButtonToolBar
/// Size: 0x0118 (0x000608 - 0x000720)
class UWTLPDAMenuButtonToolBar : public UWTLPDAMenuButtonBase
{ 
public:
	FSlateBrush                                        m_OriginalNormalButtonStyle;                                // 0x0608   (0x0088)  
	FSlateBrush                                        m_SelectedNormalButtonStyle;                                // 0x0690   (0x0088)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0718   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLPDAMenuPremiumButton
/// Size: 0x0280 (0x000610 - 0x000890)
class UWTLPDAMenuPremiumButton : public UWTLPDAMenuButton
{ 
public:
	UBorder*                                           bTypeText;                                                  // 0x0610   (0x0008)  
	FButtonStyle                                       ActivePremiumButtonStyle;                                   // 0x0618   (0x0278)  
};

/// Class /Script/WTL.WTLPDAMenuToolBar
/// Size: 0x0000 (0x000AB0 - 0x000AB0)
class UWTLPDAMenuToolBar : public UWTLPDAMenuBase
{ 
public:
};

/// Class /Script/WTL.WTLPDAModulesListItem
/// Size: 0x0028 (0x0004A0 - 0x0004C8)
class UWTLPDAModulesListItem : public UWTLCommonSelectedItem
{ 
public:
	UTextBlock*                                        tbModuleName;                                               // 0x04A0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x04A8   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLPDANetworkSignal
/// Size: 0x0098 (0x000260 - 0x0002F8)
class UWTLPDANetworkSignal : public UUserWidget
{ 
public:
	UTextBlock*                                        tbWSC;                                                      // 0x0260   (0x0008)  
	UBorder*                                           bBar1;                                                      // 0x0268   (0x0008)  
	UBorder*                                           bBar2;                                                      // 0x0270   (0x0008)  
	UBorder*                                           bBar3;                                                      // 0x0278   (0x0008)  
	UBorder*                                           bBar4;                                                      // 0x0280   (0x0008)  
	UBorder*                                           bNoSignal;                                                  // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0290   (0x0020)  MISSED
	UWidgetAnimation*                                  NoSignalAnimation;                                          // 0x02B0   (0x0008)  
	FLinearColor                                       StrongSignalBarColor;                                       // 0x02B8   (0x0010)  
	FLinearColor                                       MediumSignalBarColor;                                       // 0x02C8   (0x0010)  
	FLinearColor                                       WeakSignalBarColor;                                         // 0x02D8   (0x0010)  
	FLinearColor                                       NoSignalBarColor;                                           // 0x02E8   (0x0010)  
};

/// Class /Script/WTL.WTLPDAParameter
/// Size: 0x0030 (0x000260 - 0x000290)
class UWTLPDAParameter : public UUserWidget
{ 
public:
	UBorder*                                           bContent;                                                   // 0x0260   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x0268   (0x0008)  
	UWidgetSwitcher*                                   wsSign;                                                     // 0x0270   (0x0008)  
	UTextBlock*                                        tbValue;                                                    // 0x0278   (0x0008)  
	UTextBlock*                                        tbPercentSign;                                              // 0x0280   (0x0008)  
	UProgressBar*                                      pbChange;                                                   // 0x0288   (0x0008)  
};

/// Class /Script/WTL.WTLPDAPremium
/// Size: 0x0088 (0x000288 - 0x000310)
class UWTLPDAPremium : public UWTLPDABase
{ 
public:
	UImage*                                            imgPremium;                                                 // 0x0288   (0x0008)  
	UBorder*                                           bPremium;                                                   // 0x0290   (0x0008)  
	UTextBlock*                                        tbPremiumStatus;                                            // 0x0298   (0x0008)  
	UTextBlock*                                        tbPremiumEndTime;                                           // 0x02A0   (0x0008)  
	UWTLCommonTextButton*                              ucBtnPremium;                                               // 0x02A8   (0x0008)  
	UBorder*                                           bBonuses;                                                   // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x02B8   (0x0008)  MISSED
	TWeakObjectPtr<UTexture2D*>                        NotActivePremiumTexture;                                    // 0x02C0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        ActivePremiumTexture;                                       // 0x02E8   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDAPremium.OnPremiumButtonClicked
	void OnPremiumButtonClicked();                                                                                           // [0x18956d0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAPremium.OnInAppPaymentResult
	void OnInAppPaymentResult(bool Success);                                                                                 // [0x1895710] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAQuestLog
/// Size: 0x0290 (0x000288 - 0x000518)
class UWTLPDAQuestLog : public UWTLPDABase
{ 
public:
	UBorder*                                           bQuestLogEmpty;                                             // 0x0288   (0x0008)  
	UBorder*                                           bQuestsList;                                                // 0x0290   (0x0008)  
	UBorder*                                           bQuestLogHint;                                              // 0x0298   (0x0008)  
	UBorder*                                           bQuestName;                                                 // 0x02A0   (0x0008)  
	UBorder*                                           bQuestInfoPart1;                                            // 0x02A8   (0x0008)  
	UBorder*                                           bQuestInfoPart2;                                            // 0x02B0   (0x0008)  
	UBorder*                                           bQuestInfoPart3;                                            // 0x02B8   (0x0008)  
	UBorder*                                           bQuestInfoPart4;                                            // 0x02C0   (0x0008)  
	UBorder*                                           bQuestInfoPart5;                                            // 0x02C8   (0x0008)  
	UBorder*                                           bQuestInfoPart6;                                            // 0x02D0   (0x0008)  
	UBorder*                                           bQuestInfoPart7;                                            // 0x02D8   (0x0008)  
	UBorder*                                           bQuestInfoPart8;                                            // 0x02E0   (0x0008)  
	UBorder*                                           bQuestLogBtns;                                              // 0x02E8   (0x0008)  
	UWidgetSwitcher*                                   wsQuestLog;                                                 // 0x02F0   (0x0008)  
	UWidgetSwitcher*                                   wsQuestsLists;                                              // 0x02F8   (0x0008)  
	UScrollBox*                                        sbQuestsListInProgress;                                     // 0x0300   (0x0008)  
	UScrollBox*                                        sbQuestsListCompleted;                                      // 0x0308   (0x0008)  
	UWTLCommonCheckBox*                                cbHideActiveQuestInfo;                                      // 0x0310   (0x0008)  
	UWTLCommonTabButton*                               btnTabInProgressList;                                       // 0x0318   (0x0008)  
	UWTLCommonTabButton*                               btnTabCompletedList;                                        // 0x0320   (0x0008)  
	UWTLCommonButton*                                  ucBtnSetActiveQuest;                                        // 0x0328   (0x0008)  
	UWTLCommonButton*                                  ucBtnAbandonQuest;                                          // 0x0330   (0x0008)  
	UWidgetSwitcher*                                   wsQuestInfo;                                                // 0x0338   (0x0008)  
	UScrollBox*                                        sbQuestInfo;                                                // 0x0340   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x0348   (0x0008)  
	UImage*                                            imgQuestIcon;                                               // 0x0350   (0x0008)  
	UTextBlock*                                        tbCanBePerformedInGroup;                                    // 0x0358   (0x0008)  
	UHorizontalBox*                                    hbRecommendedCharacterLevel;                                // 0x0360   (0x0008)  
	UTextBlock*                                        tbRecommendedCharacterLevel;                                // 0x0368   (0x0008)  
	UHorizontalBox*                                    hbQuestTimeLimit;                                           // 0x0370   (0x0008)  
	UTextBlock*                                        tbQuestTimeLimit;                                           // 0x0378   (0x0008)  
	UTextBlock*                                        tbQuestDescription;                                         // 0x0380   (0x0008)  
	UWTLHUDItemTypeSlot*                               ucItemStartQuest;                                           // 0x0388   (0x0008)  
	UTextBlock*                                        tbRequiredTitle;                                            // 0x0390   (0x0008)  
	UTextBlock*                                        tbCustomTextRequirement;                                    // 0x0398   (0x0008)  
	UHorizontalBox*                                    hbRequiredMoney;                                            // 0x03A0   (0x0008)  
	UTextBlock*                                        tbRequiredMoney;                                            // 0x03A8   (0x0008)  
	UImage*                                            imgRequiredMoneyReady;                                      // 0x03B0   (0x0008)  
	UTextBlock*                                        tbRequiredItemsTitle;                                       // 0x03B8   (0x0008)  
	UWrapBox*                                          wpRequiredItems;                                            // 0x03C0   (0x0008)  
	UTextBlock*                                        tbRequiredKillsTitle;                                       // 0x03C8   (0x0008)  
	UVerticalBox*                                      vbRequiredKills;                                            // 0x03D0   (0x0008)  
	UTextBlock*                                        tbCustomRequirementsTitle;                                  // 0x03D8   (0x0008)  
	UVerticalBox*                                      vbCustomRequirements;                                       // 0x03E0   (0x0008)  
	UTextBlock*                                        tbRewardsTitle;                                             // 0x03E8   (0x0008)  
	UHorizontalBox*                                    hbRewardExperience;                                         // 0x03F0   (0x0008)  
	UTextBlock*                                        tbRewardExperience;                                         // 0x03F8   (0x0008)  
	UHorizontalBox*                                    hbRewardMoney;                                              // 0x0400   (0x0008)  
	UTextBlock*                                        tbRewardMoney;                                              // 0x0408   (0x0008)  
	UHorizontalBox*                                    hbRewardPvPScore;                                           // 0x0410   (0x0008)  
	UTextBlock*                                        tbRewardPvPScore;                                           // 0x0418   (0x0008)  
	UHorizontalBox*                                    hbRewardPvEScore;                                           // 0x0420   (0x0008)  
	UTextBlock*                                        tbRewardPvEScore;                                           // 0x0428   (0x0008)  
	UHorizontalBox*                                    hbRewardCraftScore;                                         // 0x0430   (0x0008)  
	UTextBlock*                                        tbRewardCraftScore;                                         // 0x0438   (0x0008)  
	UHorizontalBox*                                    hbRewardTechnologyScore;                                    // 0x0440   (0x0008)  
	UTextBlock*                                        tbRewardTechnologyScore;                                    // 0x0448   (0x0008)  
	UTextBlock*                                        tbCustomTextReward;                                         // 0x0450   (0x0008)  
	UTextBlock*                                        tbRewardItemsTitle;                                         // 0x0458   (0x0008)  
	UWrapBox*                                          wpRewardItems;                                              // 0x0460   (0x0008)  
	UWTLPDAQuestLogItem*                               m_CurrentQuestLogItem;                                      // 0x0468   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0470   (0x0008)  MISSED
	TWeakObjectPtr<UClass*>                            QuestItemSlotWidgetClass;                                   // 0x0478   (0x0028)  
	TWeakObjectPtr<UClass*>                            RequiredMonsterKillWidgetClass;                             // 0x04A0   (0x0028)  
	TWeakObjectPtr<UClass*>                            CustomRequirementWidgetClass;                               // 0x04C8   (0x0028)  
	TWeakObjectPtr<UClass*>                            QuestLogItemWidgetClass;                                    // 0x04F0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDAQuestLog.OnSetActiveQuestBtnClicked
	void OnSetActiveQuestBtnClicked();                                                                                       // [0x1895ca0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAQuestLog.OnQuestLogItemClicked
	void OnQuestLogItemClicked(UWTLPDAQuestLogItem* QuestLogItem);                                                           // [0x1895dd0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAQuestLog.OnListTabBtnClicked
	void OnListTabBtnClicked(char Index);                                                                                    // [0x1895cc0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAQuestLog.OnHideActiveQuestInfoCheckBoxStateChanged
	void OnHideActiveQuestInfoCheckBoxStateChanged(bool bIsChecked);                                                         // [0x1895eb0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAQuestLog.OnAbandonQuestConfirmation
	void OnAbandonQuestConfirmation();                                                                                       // [0x1895bf0] Final|Native|Private 
	// Function /Script/WTL.WTLPDAQuestLog.OnAbandonQuestBtnClicked
	void OnAbandonQuestBtnClicked();                                                                                         // [0x1895c80] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDAQuestLogItem
/// Size: 0x10C0 (0x000340 - 0x001400)
class UWTLPDAQuestLogItem : public UWTLCommonButton
{ 
public:
	UBorder*                                           bContent;                                                   // 0x0340   (0x0008)  
	UImage*                                            imgReady;                                                   // 0x0348   (0x0008)  
	UHorizontalBox*                                    hbRecommendedCharacterLevel;                                // 0x0350   (0x0008)  
	UTextBlock*                                        tbRecommendedCharacterLevel;                                // 0x0358   (0x0008)  
	UTextBlock*                                        tbQuestName;                                                // 0x0360   (0x0008)  
	UImage*                                            imgQuestState;                                              // 0x0368   (0x0008)  
	UImage*                                            imgQuestActive;                                             // 0x0370   (0x0008)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0378   (0x0008)  MISSED
	FButtonStyle                                       DefaultQuestBackgroundButtonStyle;                          // 0x0380   (0x0278)  
	FButtonStyle                                       VeryHighLevelQuestBackgroundButtonStyle;                    // 0x05F8   (0x0278)  
	FButtonStyle                                       HighLevelQuestBackgroundButtonStyle;                        // 0x0870   (0x0278)  
	FButtonStyle                                       MediumLevelQuestBackgroundButtonStyle;                      // 0x0AE8   (0x0278)  
	FButtonStyle                                       LowLevelQuestBackgroundButtonStyle;                         // 0x0D60   (0x0278)  
	FButtonStyle                                       VeryLowLevelQuestBackgroundButtonStyle;                     // 0x0FD8   (0x0278)  
	FSlateBrush                                        CompletedQuestBrush;                                        // 0x1250   (0x0088)  
	FSlateBrush                                        FailedQuestBrush;                                           // 0x12D8   (0x0088)  
	FSlateBrush                                        RepeatableQuestBrush;                                       // 0x1360   (0x0088)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x13E8   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLPDAQuestLogRequirementBase
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLPDAQuestLogRequirementBase : public UUserWidget
{ 
public:
	UBorder*                                           bContent;                                                   // 0x0260   (0x0008)  
	UHorizontalBox*                                    hbTextContent;                                              // 0x0268   (0x0008)  
	UTextBlock*                                        tbName;                                                     // 0x0270   (0x0008)  
	UHorizontalBox*                                    hbCurrentCount;                                             // 0x0278   (0x0008)  
	UTextBlock*                                        tbCurrentCount;                                             // 0x0280   (0x0008)  
	UTextBlock*                                        tbNeedCount;                                                // 0x0288   (0x0008)  
	UTextBlock*                                        tbPercentSign;                                              // 0x0290   (0x0008)  
	UImage*                                            imgReady;                                                   // 0x0298   (0x0008)  
};

/// Class /Script/WTL.WTLPDAQuestLogRequiredMonsterKill
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class UWTLPDAQuestLogRequiredMonsterKill : public UWTLPDAQuestLogRequirementBase
{ 
public:
	UTextBlock*                                        tbMinLevel;                                                 // 0x02A0   (0x0008)  
};

/// Class /Script/WTL.WTLPDASettings
/// Size: 0x0120 (0x000288 - 0x0003A8)
class UWTLPDASettings : public UWTLPDABase
{ 
public:
	UWTLCommonButton*                                  ucBtnPDAInterfaceColorSelect;                               // 0x0288   (0x0008)  
	UWTLCommonButton*                                  ucBtnPDAInterfaceColorReset;                                // 0x0290   (0x0008)  
	UWTLCommonTextCheckBox*                            cbFirstIndicator;                                           // 0x0298   (0x0008)  
	UWTLCommonTextCheckBox*                            cbSecondIndicator;                                          // 0x02A0   (0x0008)  
	UBorder*                                           bSettingsIndicators;                                        // 0x02A8   (0x0008)  
	UBorder*                                           bSettingsPDAInterfaceColor;                                 // 0x02B0   (0x0008)  
	UHorizontalBox*                                    hbPDAInterfaceColorPicker;                                  // 0x02B8   (0x0008)  
	UBorder*                                           bModules;                                                   // 0x02C0   (0x0008)  
	UTextBlock*                                        tbModulesCountTitle;                                        // 0x02C8   (0x0008)  
	UScrollBox*                                        sbModulesList;                                              // 0x02D0   (0x0008)  
	UWTLCommonButton*                                  ucBtnRemoveModule;                                          // 0x02D8   (0x0008)  
	UWTLCommonColorPicker*                             m_PDAInterfaceColorPickerWidget;                            // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x70];                                      // 0x02E8   (0x0070)  MISSED
	TWeakObjectPtr<UClass*>                            PDAInterfaceColorPickerWidgetClass;                         // 0x0358   (0x0028)  
	TWeakObjectPtr<UClass*>                            ModulesListItemWidgetClass;                                 // 0x0380   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLPDASettings.OnSecondIndicatorCheckBoxStateChanged
	void OnSecondIndicatorCheckBoxStateChanged(bool bIsChecked);                                                             // [0x1896b70] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnRemoveModuleBtnError
	void OnRemoveModuleBtnError();                                                                                           // [0x1896a10] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnRemoveModuleBtnConfirm
	void OnRemoveModuleBtnConfirm();                                                                                         // [0x1896a30] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnRemoveModuleBtnClicked
	void OnRemoveModuleBtnClicked();                                                                                         // [0x1896b50] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnPDAInterfaceColorSelectBtnClicked
	void OnPDAInterfaceColorSelectBtnClicked();                                                                              // [0x1896fa0] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnPDAInterfaceColorResetBtnClicked
	void OnPDAInterfaceColorResetBtnClicked();                                                                               // [0x1896f80] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnPDAInterfaceColorPickingCanceled
	void OnPDAInterfaceColorPickingCanceled();                                                                               // [0x1896d30] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnPDAInterfaceColorPicked
	void OnPDAInterfaceColorPicked(FLinearColor& PickedColor);                                                               // [0x1896d90] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLPDASettings.OnPDAInterfaceColorChanged
	void OnPDAInterfaceColorChanged(FLinearColor& ChangedColor);                                                             // [0x1896e90] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/WTL.WTLPDASettings.OnModulesListItemClicked
	void OnModulesListItemClicked(uint16_t ModuleID);                                                                        // [0x1896930] Final|Native|Private 
	// Function /Script/WTL.WTLPDASettings.OnFirstIndicatorCheckBoxStateChanged
	void OnFirstIndicatorCheckBoxStateChanged(bool bIsChecked);                                                              // [0x1896c50] Final|Native|Private 
};

/// Class /Script/WTL.WTLPDASkillDependence
/// Size: 0x0060 (0x000260 - 0x0002C0)
class UWTLPDASkillDependence : public UUserWidget
{ 
public:
	UTextBlock*                                        tbComa;                                                     // 0x0260   (0x0008)  
	UTextBlock*                                        tbSkillName;                                                // 0x0268   (0x0008)  
	FSlateColor                                        RedColor;                                                   // 0x0270   (0x0028)  
	FSlateColor                                        GreenColor;                                                 // 0x0298   (0x0028)  
};

/// Class /Script/WTL.WTLPDASkillsConnector
/// Size: 0x0038 (0x000260 - 0x000298)
class UWTLPDASkillsConnector : public UUserWidget
{ 
public:
	UCanvasPanel*                                      cpMain;                                                     // 0x0260   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0268   (0x0020)  MISSED
	TArray<FWTLPDASkillConnectorData>                  Data;                                                       // 0x0288   (0x0010)  
};

/// Class /Script/WTL.WTLPDASocialNetworkAuthorization
/// Size: 0x0028 (0x000288 - 0x0002B0)
class UWTLPDASocialNetworkAuthorization : public UWTLPDABase
{ 
public:
	UTextBlock*                                        tbSocialNetworkName;                                        // 0x0288   (0x0008)  
	UWidgetSwitcher*                                   wsBrowser;                                                  // 0x0290   (0x0008)  
	UBorder*                                           bThrobber;                                                  // 0x0298   (0x0008)  
	UBorder*                                           bAuthorizationStatus;                                       // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x02A8   (0x0002)  MISSED
	bool                                               HasWebBrowserFocus;                                         // 0x02AA   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x02AB   (0x0005)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPDASocialNetworkAuthorization.OnURLChanged
	void OnURLChanged(FString URL);                                                                                          // [0x1898210] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLPDASocialNetworkAuthorization.OnLoadURL
	void OnLoadURL(FString URL);                                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLPlayerCameraManager
/// Size: 0x01F0 (0x0027B0 - 0x0029A0)
class AWTLPlayerCameraManager : public APlayerCameraManager
{ 
public:
	unsigned char                                      UnknownData00_2[0x110];                                     // 0x27B0   (0x0110)  MISSED
	UMaterialInstanceDynamic*                          HealthStatusPostProcessMaterial;                            // 0x28C0   (0x0008)  
	UMaterialInstanceDynamic*                          BleedingPostProcessMaterial;                                // 0x28C8   (0x0008)  
	UMaterialInstanceDynamic*                          BurningPostProcessMaterial;                                 // 0x28D0   (0x0008)  
	UMaterialInstanceDynamic*                          ChemicalsPostProcessMaterial;                               // 0x28D8   (0x0008)  
	UMaterialInstanceDynamic*                          RadiationPostProcessMaterial;                               // 0x28E0   (0x0008)  
	UMaterialInstanceDynamic*                          StunningPostProcessMaterial;                                // 0x28E8   (0x0008)  
	UMaterialInstanceDynamic*                          DrunkPostProcessMaterial;                                   // 0x28F0   (0x0008)  
	UMaterialInstanceDynamic*                          TeleportPostProcessMaterial;                                // 0x28F8   (0x0008)  
	UMaterialInstanceDynamic*                          OutlinePostProcessMaterial;                                 // 0x2900   (0x0008)  
	UMaterialInstanceDynamic*                          ScopeOverlayPostProcessMaterial;                            // 0x2908   (0x0008)  
	UMaterialInstanceDynamic*                          StealthPostProcessMaterial;                                 // 0x2910   (0x0008)  
	UMaterialInstanceDynamic*                          StealthFarPostProcessMaterial;                              // 0x2918   (0x0008)  
	UMaterialInstanceDynamic*                          EnergyShieldPostProcessMaterial;                            // 0x2920   (0x0008)  
	UMaterialInstanceDynamic*                          UnderwaterPostProcessMaterial;                              // 0x2928   (0x0008)  
	UMaterialInstanceDynamic*                          NightvisionPostProcessMaterial;                             // 0x2930   (0x0008)  
	UMaterialInstanceDynamic*                          InteractiveObjectsHighlightPostProcessMaterial;             // 0x2938   (0x0008)  
	UCurveFloat*                                       PainDamageCurve;                                            // 0x2940   (0x0008)  
	TArray<UClass*>                                    AdditionalCameraLensEffects;                                // 0x2948   (0x0010)  
	UMaterialInstanceDynamic*                          ThermalvisionPostProcessMaterial;                           // 0x2958   (0x0008)  
	UMaterialInstanceDynamic*                          SphereRevealPostProcessMaterial;                            // 0x2960   (0x0008)  
	float                                              DamageValuePerHit;                                          // 0x2968   (0x0004)  
	float                                              DamageValueInterpSpeed;                                     // 0x296C   (0x0004)  
	float                                              AlcoholIncrementInterpSpeed;                                // 0x2970   (0x0004)  
	float                                              AlcoholDecrementInterpSpeed;                                // 0x2974   (0x0004)  
	float                                              DamageValueCooldownPerSecond;                               // 0x2978   (0x0004)  
	float                                              StunningValueCooldownPerSecond;                             // 0x297C   (0x0004)  
	float                                              WeaponUsageVingetteCooldownPerSecond;                       // 0x2980   (0x0004)  
	float                                              WeaponHitCameraShakeStrength;                               // 0x2984   (0x0004)  
	float                                              ExplossiveHitCameraShakeStrength;                           // 0x2988   (0x0004)  
	float                                              VingetteLimit;                                              // 0x298C   (0x0004)  
	float                                              FringeLimit;                                                // 0x2990   (0x0004)  
	float                                              TeleportInterpSpeed;                                        // 0x2994   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x2998   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLPlayerController
/// Size: 0x42D50 (0x000570 - 0x0432C0)
class AWTLPlayerController : public APlayerController
{ 
public:
	unsigned char                                      UnknownData00_2[0x42538];                                   // 0x0570   (0x42538)  MISSED
	FWTLMapCacheData                                   m_MapCache;                                                 // 0x42AA8   (0x0100)  
	unsigned char                                      UnknownData01_5[0x10];                                      // 0x42BA8   (0x0010)  MISSED
	uint64_t                                           m_UID;                                                      // 0x42BB8   (0x0008)  
	unsigned char                                      UnknownData02_5[0x10];                                      // 0x42BC0   (0x0010)  MISSED
	char                                               m_MinEventLogPriority;                                      // 0x42BD0   (0x0001)  
	EWTLSuicideState                                   m_SuicideState;                                             // 0x42BD1   (0x0001)  
	unsigned char                                      UnknownData03_5[0x1E];                                      // 0x42BD2   (0x001E)  MISSED
	TArray<FWTLDamageActorInfo>                        m_DamageToActorInfo;                                        // 0x42BF0   (0x0010)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0x42C00   (0x0008)  MISSED
	TArray<FWTLDamageActorInfo>                        m_DamageFromActorInfo;                                      // 0x42C08   (0x0010)  
	unsigned char                                      UnknownData05_5[0x70];                                      // 0x42C18   (0x0070)  MISSED
	TArray<FWTLMapMarker>                              m_DynamicMapMarkers;                                        // 0x42C88   (0x0010)  
	TArray<FWTLMapMarker>                              m_StaticMapMarkers;                                         // 0x42C98   (0x0010)  
	TArray<FWTLMapMarker>                              m_MapMarkers;                                               // 0x42CA8   (0x0010)  
	bool                                               bIsExitToMainMenuOrExitByIdleTime;                          // 0x42CB8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x607];                                     // 0x42CB9   (0x0607)  MISSED


	/// Functions
	// Function /Script/WTL.WTLPlayerController.TriggerPlayerKillNotification
	void TriggerPlayerKillNotification();                                                                                    // [0xe77850] Final|Native|Private|BlueprintCallable 
	// Function /Script/WTL.WTLPlayerController.Server_UpdatePlayerName
	void Server_UpdatePlayerName(FString PlayerName);                                                                        // [0x18a6af0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SubmitPortalStationTeleportRequest
	void Server_SubmitPortalStationTeleportRequest(int32_t WayIndex, int32_t PortalStationID);                               // [0x189a6f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_ShareMarkerInGroup
	void Server_ShareMarkerInGroup(int32_t LocationID, char Type, FString Color, FVector Position, FString Name, bool ShowOnMinimap, bool SaveFile, uint64_t CharacterID); // [0x18996b0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SetMinEventLogPriority
	void Server_SetMinEventLogPriority(char Value);                                                                          // [0x18a65f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SendSpawnTracer
	void Server_SendSpawnTracer(bool OwnCharacter, uint16_t AmmoID, FVector Position, FRotator Rotation, float Velocity, float LifeSpan); // [0x189caf0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SendHitInfo
	void Server_SendHitInfo(FHitResult HitInfo, FTransform InitialTransform, AActor* Weapon, uint16_t WeaponID, uint16_t AmmoID); // [0x18a1fb0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SendConsoleCommand
	void Server_SendConsoleCommand(FString ConsoleCommand);                                                                  // [0x18a66f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SendChatMessage
	void Server_SendChatMessage(EWTLFiltersChat FilterChat, EWTLFaction Faction, FString ChatMessage, FString SenderPlayerName); // [0x18a6810] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SendBulletHit
	void Server_SendBulletHit(bool Reliable, APawn* InstigatorPawn, UPrimitiveComponent* HitComponent, FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, TEnumAsByte<EPhysicalSurface> HitSurface, EWTLCaliber Caliber); // [0x189d350] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SendBulletFlyNear
	void Server_SendBulletFlyNear(AWTLCharacter* OtherCharacter, FVector_NetQuantize Location, EWTLCaliber Caliber);         // [0x1899bf0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_SelectReplica
	void Server_SelectReplica(AWTLNPCActor* DialogInstigator, int32_t ReplicaID);                                            // [0x18a0890] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_RemoveStash
	void Server_RemoveStash(AWTLStash* Stash);                                                                               // [0x18a6370] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_RejectPortalStationTeleportRequest
	void Server_RejectPortalStationTeleportRequest(int32_t PortalStationID);                                                 // [0x189a5e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_PutGiftInStash
	void Server_PutGiftInStash(AWTLStash* Stash);                                                                            // [0x18a6260] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_PickupPlaceableStuff
	void Server_PickupPlaceableStuff(AWTLPlaceableStuff* PlaceableStuff);                                                    // [0x18a6150] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_OnClanNameSelected
	void Server_OnClanNameSelected(AWTLNPCActor* NPC, FString ClanName);                                                     // [0x18a06d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_GetExperienceForFirstMailMessage
	void Server_GetExperienceForFirstMailMessage();                                                                          // [0x18a6590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_ExtinguishCampfire
	void Server_ExtinguishCampfire(AWTLCampfire* Campfire);                                                                  // [0x18a6480] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_EndInformationDialog
	void Server_EndInformationDialog(AWTLTriggerObject* TriggerObject);                                                      // [0x18a05c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_ChargePlaceableStuff
	void Server_ChargePlaceableStuff(AWTLPlaceableStuff* PlaceableStuff);                                                    // [0x18a6040] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_CancelSuicide
	void Server_CancelSuicide();                                                                                             // [0x18a6d80] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_CancelExit
	void Server_CancelExit();                                                                                                // [0x18a6c10] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_BeginSuicide
	void Server_BeginSuicide();                                                                                              // [0x18a6de0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.Server_BeginExit
	void Server_BeginExit(bool ExitByIdleTime);                                                                              // [0x18a6c70] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerController.RemoveStash
	void RemoveStash(AWTLStash* Stash);                                                                                      // [0x189a180] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.PutGiftInStash
	void PutGiftInStash(AWTLStash* Stash);                                                                                   // [0x189a080] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.PickupPlaceableStuff
	void PickupPlaceableStuff(AWTLPlaceableStuff* PlaceableStuff);                                                           // [0x1899f80] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.OpenCharacterMail
	void OpenCharacterMail();                                                                                                // [0x18a6e60] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnWindowCloseRequested
	bool OnWindowCloseRequested();                                                                                           // [0x18a2d70] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnVOIPTimerTick
	void OnVOIPTimerTick();                                                                                                  // [0x18a2dd0] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnVOIPStop
	void OnVOIPStop();                                                                                                       // [0x1899e40] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.OnVOIPStart
	void OnVOIPStart();                                                                                                      // [0x1899e60] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.OnSendGlobalGroupInviteResponse
	void OnSendGlobalGroupInviteResponse(FWTLResponse& Response);                                                            // [0x18a24a0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnRep_SuicideState
	void OnRep_SuicideState();                                                                                               // [0x18a6e40] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnRemovedFromGroup
	void OnRemovedFromGroup(FWTLEvent& Event);                                                                               // [0x18a2900] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnNewClanMemberRequest
	void OnNewClanMemberRequest(FString FromCharacter);                                                                      // [0x18a3f00] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnModuleScanTimerTick
	void OnModuleScanTimerTick();                                                                                            // [0x18a2db0] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnGetGroupInvite
	void OnGetGroupInvite(FWTLEvent& Event);                                                                                 // [0x18a2ab0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnExitTimerOnClient
	void OnExitTimerOnClient();                                                                                              // [0x18a6f30] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnDeleteGroupInvite
	void OnDeleteGroupInvite(FWTLEvent& Event);                                                                              // [0x18a25a0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnConsoleCommandResponse
	void OnConsoleCommandResponse(FWTLResponse& Response);                                                                   // [0x18a3aa0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnClanNameSelected
	void OnClanNameSelected(FString ClanName);                                                                               // [0x18a2c80] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnClanMemberRequestRejected
	void OnClanMemberRequestRejected(FWTLEvent& Event);                                                                      // [0x18a3740] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnClanMemberRequestAccepted
	void OnClanMemberRequestAccepted(FWTLEvent& Event);                                                                      // [0x18a38f0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnChatMessage
	void OnChatMessage(FWTLEvent& Event);                                                                                    // [0x18a3d50] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnCancelBarterOffer
	void OnCancelBarterOffer();                                                                                              // [0x18a6e80] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerController.OnBecameGroupLeader
	void OnBecameGroupLeader(FWTLEvent& Event);                                                                              // [0x18a2750] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.OnAnticheatRequested
	void OnAnticheatRequested(FWTLEvent& Event);                                                                             // [0x18a3ba0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPlayerController.ExtinguishCampfire
	void ExtinguishCampfire(AWTLCampfire* Campfire);                                                                         // [0x189a280] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.ClientUnreliable_OnSpawnTracer
	void ClientUnreliable_OnSpawnTracer(bool OwnCharacter, uint16_t AmmoID, FVector_NetQuantize Position, FVector_NetQuantizeNormal Rotation, float Velocity, uint16_t TracerID, float LifeSpan); // [0x189cf10] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClientUnreliable_OnDestroyTracer
	void ClientUnreliable_OnDestroyTracer(uint16_t TracerID);                                                                // [0x189ca10] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClientUnreliable_OnBulletRicochet
	void ClientUnreliable_OnBulletRicochet(UPrimitiveComponent* HitComponent, FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, TEnumAsByte<EPhysicalSurface> HitSurface, EWTLCaliber Caliber, float ServerTime); // [0x189d800] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClientUnreliable_OnBulletHit
	void ClientUnreliable_OnBulletHit(UPrimitiveComponent* HitComponent, FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, TEnumAsByte<EPhysicalSurface> HitSurface, EWTLCaliber Caliber, float ServerTime); // [0x189df60] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClientSetCurrentCulture
	void ClientSetCurrentCulture(FString CultureName);                                                                       // [0x189ab10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClientReliable_OnBulletRicochet
	void ClientReliable_OnBulletRicochet(UPrimitiveComponent* HitComponent, FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, TEnumAsByte<EPhysicalSurface> HitSurface, EWTLCaliber Caliber, float ServerTime); // [0x189dbb0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClientReliable_OnBulletHit
	void ClientReliable_OnBulletHit(UPrimitiveComponent* HitComponent, FVector_NetQuantize HitLocation, FVector_NetQuantizeNormal ImpactNormal, TEnumAsByte<EPhysicalSurface> HitSurface, EWTLCaliber Caliber, float ServerTime); // [0x189e310] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_StartExitGame
	void Client_StartExitGame(bool IsExitToMainMenu, bool ExitByIdleTime);                                                   // [0x189a400] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_StartBarterDeal
	void Client_StartBarterDeal(uint64_t CharacterID, FString CharacterName);                                                // [0x189bfa0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowSteamInventoryWidget
	void Client_ShowSteamInventoryWidget(AWTLNPCActor* NPCActor);                                                            // [0x189f870] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowSlotMachineReward
	void Client_ShowSlotMachineReward(FWTLStorageContent Items);                                                             // [0x189e970] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowSlotMachinePayTable
	void Client_ShowSlotMachinePayTable(AWTLSlotMachinePayTable* SlotMachinePayTableActor);                                  // [0x189f400] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowRobotsCraftWidget
	void Client_ShowRobotsCraftWidget(AWTLRobotCraftStation* RobotCraftStation);                                             // [0x189f950] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowQuestRewardInDialog
	void Client_ShowQuestRewardInDialog(AWTLNPCActor* DialogInstigator, int32_t QuestID);                                    // [0x18a0c60] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowPrivateStorage
	void Client_ShowPrivateStorage(AActor* PrivateStorageActor);                                                             // [0x189fc70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowPlayersTable
	void Client_ShowPlayersTable();                                                                                          // [0x1899110] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowObstacleCourseHelp
	void Client_ShowObstacleCourseHelp(AWTLObstacleCourseHelpButton* ObstacleCourseHelpButton);                              // [0x189e7b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowObjectCraftWidget
	void Client_ShowObjectCraftWidget(AActor* Actor, EWTLCraftType CraftType);                                               // [0x189fa30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowNote
	void Client_ShowNote(FText NoteName, int32_t NoteID);                                                                    // [0x189fd50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowMicrotransactionWindowWidget
	void Client_ShowMicrotransactionWindowWidget(EWTLMicrotransactionType Type);                                             // [0x189e6c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowMessageDialog
	void Client_ShowMessageDialog(EWTLDialogMessageType DialogMessageType, FText Message);                                   // [0x189f6a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowMailBox
	void Client_ShowMailBox(AWTLMailBox* MailBox);                                                                           // [0x189f4e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowJunkMachine
	void Client_ShowJunkMachine(AWTLJunkMachineBase* JunkMachine);                                                           // [0x189e890] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowGodConsole
	void Client_ShowGodConsole();                                                                                            // [0x189e790] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowDialog
	void Client_ShowDialog(AWTLNPCActor* DialogInstigator, int32_t NPCReplicaID, TArray<int32_t> CharacterReplicaIDArray);   // [0x18a0dc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowClanStorage
	void Client_ShowClanStorage(AActor* ClanStorageActor);                                                                   // [0x189fb90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowClanNameRequest
	void Client_ShowClanNameRequest(AWTLNPCActor* NPC);                                                                      // [0x18a0b80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowBulletinBoard
	void Client_ShowBulletinBoard(AWTLBulletinBoard* Board);                                                                 // [0x189f5c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ShowArenaReward
	void Client_ShowArenaReward(EWTLLootBoxType BoxType, int32_t MoneyAmount, FWTLStorageContent Items);                     // [0x189ee40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_SendMessage
	void Client_SendMessage(EWTLClientMessageType ClientMessageType, FString Text);                                          // [0x18a1e20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ReceiveSharedMarkerInGroup
	void Client_ReceiveSharedMarkerInGroup(int32_t LocationID, char Type, FString Color, FVector Position, FString Name, bool ShowOnMinimap, bool SaveFile, FString CharacterName, AWTLCharacter* OtherCharacter); // [0x1899130] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnTakeQuest
	void Client_OnTakeQuest(uint32_t QuestID);                                                                               // [0x18a4410] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnSystemQuest
	void Client_OnSystemQuest(FString QuestInfo);                                                                            // [0x18a46b0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnSystemEvent
	void Client_OnSystemEvent(FString EventInfo);                                                                            // [0x18a47a0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnStuffItemAttachedToWeapon
	void Client_OnStuffItemAttachedToWeapon(uint64_t WeaponItemID, uint64_t AttachmentItemID);                               // [0x18a35e0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnSafeZoneLeave
	void Client_OnSafeZoneLeave();                                                                                           // [0x18a5390] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnSafeZoneEnter
	void Client_OnSafeZoneEnter();                                                                                           // [0x18a53b0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnReputationIncrease
	void Client_OnReputationIncrease(char Delta);                                                                            // [0x18a52c0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnReputationDecrease
	void Client_OnReputationDecrease(char Delta);                                                                            // [0x18a51f0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnRemoveInventoryItem
	void Client_OnRemoveInventoryItem(EWTLItemType ItemType, uint16_t ItemTypeID, int32_t Count);                            // [0x18a53d0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnReceiveChatMessage
	void Client_OnReceiveChatMessage(EWTLFiltersChat FilterChat, FString ChatMessage, FString SenderPlayerName, FString ToPlayersName, bool IsNPCDialog); // [0x18a1ac0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnQuestFailed
	void Client_OnQuestFailed(uint32_t QuestID);                                                                             // [0x18a44f0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnQuestCompleted
	void Client_OnQuestCompleted(uint32_t QuestID);                                                                          // [0x18a45d0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnPlayerSuicide
	void Client_OnPlayerSuicide();                                                                                           // [0x18a1a80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnPlayerKilledByPlayer
	void Client_OnPlayerKilledByPlayer(FText KillerName);                                                                    // [0x18a1950] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnPlayerKilledByMonster
	void Client_OnPlayerKilledByMonster(int32_t MonsterID);                                                                  // [0x18a1870] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnPlayerKilledByEnemyNPC
	void Client_OnPlayerKilledByEnemyNPC(uint16_t EnemyNPCGroupID, uint16_t FirstNameIndex, uint16_t LastNameIndex);         // [0x18a1680] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnPlayerDied
	void Client_OnPlayerDied();                                                                                              // [0x18a1aa0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnPDAModuleInstalled
	void Client_OnPDAModuleInstalled(uint16_t ModuleID);                                                                     // [0x18a3500] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnNPCKilledWithBroadcastToKillers
	void Client_OnNPCKilledWithBroadcastToKillers(AWTLEnemyNPC* NPC);                                                        // [0x189a950] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnNewMailPackage
	void Client_OnNewMailPackage(FString SenderName);                                                                        // [0x18a4970] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnMonsterKilledWithBroadcastToKillers
	void Client_OnMonsterKilledWithBroadcastToKillers(AWTLMonsterPawn* Monster);                                             // [0x189aa30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnMailMessageReceived
	void Client_OnMailMessageReceived(FString Subject);                                                                      // [0x18a4a60] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnMadeEffect
	void Client_OnMadeEffect(AActor* OtherActor, EWTLCharacterEffectType EffectType, float EffectValue);                     // [0x18a12a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnLongDistanceHit
	void Client_OnLongDistanceHit(int32_t Distance, EWTLColliderType ColliderType, bool Kill);                               // [0x18a1490] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnLevelUp
	void Client_OnLevelUp(char NewLevel);                                                                                    // [0x18a5970] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnLeftClan
	void Client_OnLeftClan(FString ClanName);                                                                                // [0x18a2ee0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnJoinedClan
	void Client_OnJoinedClan(FString ClanName);                                                                              // [0x18a2fd0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnJackpot
	void Client_OnJackpot();                                                                                                 // [0x18a1280] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnItemUnequipped
	void Client_OnItemUnequipped(EWTLItemType ItemType, uint16_t ItemTypeID);                                                // [0x18a30c0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnItemsRepaired
	void Client_OnItemsRepaired();                                                                                           // [0x18a3380] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnItemRepaired
	void Client_OnItemRepaired(EWTLItemType ItemType, uint16_t ItemTypeID);                                                  // [0x18a33a0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnItemEquipped
	void Client_OnItemEquipped(EWTLItemType ItemType, uint16_t ItemTypeID);                                                  // [0x18a3220] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnHaveNewMailPackages
	void Client_OnHaveNewMailPackages(int32_t Count);                                                                        // [0x18a4890] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnGetCommissionSellItemsTypesCountResponse
	void Client_OnGetCommissionSellItemsTypesCountResponse(AWTLNPCActor* NPC, TArray<FWTLCommissionItemTypeCount> TypesCount); // [0x189bd30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnGetCommissionSellItemsPageResponse
	void Client_OnGetCommissionSellItemsPageResponse(AWTLNPCActor* NPC, int32_t ItemsCount, int32_t PageCount, int32_t ItemPerPage, int32_t PageIndex, FWTLSellItems ItemsPage); // [0x189b5a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnGetClanStorageMoneyLogPageResponse
	void Client_OnGetClanStorageMoneyLogPageResponse(AWTLNPCActor* NPC, int32_t RecordCount, int32_t PageCount, int32_t RecordsPerPage, int32_t PageIndex, TArray<FWTLClanStorageMoneyLogRecord> RecordsPage); // [0x189ae40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnGetClanStorageItemsLogPageResponse
	void Client_OnGetClanStorageItemsLogPageResponse(AWTLNPCActor* NPC, int32_t RecordCount, int32_t PageCount, int32_t RecordsPerPage, int32_t PageIndex, TArray<FWTLClanStorageItemLogRecord> RecordsPage); // [0x189b1f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnFortificationStateChanged
	void Client_OnFortificationStateChanged(EWTLFortificationNotificationState State);                                       // [0x189a880] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnFactionScoreIncrease
	void Client_OnFactionScoreIncrease(int32_t Delta);                                                                       // [0x18a4dd0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnFactionScoreDecrease
	void Client_OnFactionScoreDecrease(int32_t Delta);                                                                       // [0x18a4cf0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnFactionRankIncrease
	void Client_OnFactionRankIncrease(char Rank);                                                                            // [0x18a4c20] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnFactionRankDecrease
	void Client_OnFactionRankDecrease(char Rank);                                                                            // [0x18a4b50] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnExitFromGame
	void Client_OnExitFromGame();                                                                                            // [0x18a6f50] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnExcludedFromClan
	void Client_OnExcludedFromClan(FString ClanName);                                                                        // [0x18a2df0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnEventLogRecord
	void Client_OnEventLogRecord(EWTLEventLogRecordType RecordType, char Priority, FString InstigatorName, FString VictimName, FString Param1, FString Param2, FString Param3, FString Param4); // [0x18a5b20] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnEarnExperience
	void Client_OnEarnExperience(uint32_t ExperienceValue);                                                                  // [0x18a5a40] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnDamageToActor
	void Client_OnDamageToActor(TArray<FWTLDamageActorInfo> DamageInfoArray);                                                // [0x18a10b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnDamageFromActor
	void Client_OnDamageFromActor(TArray<FWTLDamageActorInfo> DamageInfoArray);                                              // [0x18a0fc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnCraftObjectProcessStarted
	void Client_OnCraftObjectProcessStarted(int32_t CraftObjectID, int32_t CraftItemID, float ProcessTime);                  // [0x18a4220] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnCraftObjectProcessFinished
	void Client_OnCraftObjectProcessFinished(int32_t CraftObjectID, int32_t CraftItemID);                                    // [0x18a40c0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnConsumeItemResult
	void Client_OnConsumeItemResult(bool bIsSuccessfull, FString Description, float TimeToConsume);                          // [0x189ac20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnConfederationReputationIncrease
	void Client_OnConfederationReputationIncrease(char Delta);                                                               // [0x18a5120] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnConfederationReputationDecrease
	void Client_OnConfederationReputationDecrease(char Delta);                                                               // [0x18a5050] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnClanLevelUp
	void Client_OnClanLevelUp(char NewLevel);                                                                                // [0x18a3ff0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBlackSunsetReputationIncrease
	void Client_OnBlackSunsetReputationIncrease(char Delta);                                                                 // [0x18a4f80] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBlackSunsetReputationDecrease
	void Client_OnBlackSunsetReputationDecrease(char Delta);                                                                 // [0x18a4eb0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBarterDealRequestRejected
	void Client_OnBarterDealRequestRejected(uint64_t CharacterID, FString CharacterName);                                    // [0x189c290] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBarterDealRequestReceived
	void Client_OnBarterDealRequestReceived(FWTLBarterDealRequest Request);                                                  // [0x189c5b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBarterDealRequestCreated
	void Client_OnBarterDealRequestCreated(FWTLBarterDealRequest Request);                                                   // [0x189c6d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBarterDealRequestCanceled
	void Client_OnBarterDealRequestCanceled(uint64_t FromCharacterID, uint64_t ToCharacterID);                               // [0x189c130] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBarterDealRequestAccepted
	void Client_OnBarterDealRequestAccepted(uint64_t CharacterID, FString CharacterName);                                    // [0x189c420] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBalanceReceivedFromCharacter
	void Client_OnBalanceReceivedFromCharacter(FString SenderName, FString Description, int32_t Amount);                     // [0x189c7f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBalanceChange
	void Client_OnBalanceChange(int32_t Delta);                                                                              // [0x18a5890] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnBadConnectionState
	void Client_OnBadConnectionState();                                                                                      // [0x18a1e00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnAddInventoryItem
	void Client_OnAddInventoryItem(EWTLItemType ItemType, uint16_t ItemTypeID, int32_t Count);                               // [0x18a55c0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnAccountBalanceChange
	void Client_OnAccountBalanceChange(int32_t Delta);                                                                       // [0x18a57b0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_OnAccountAchievement
	void Client_OnAccountAchievement(uint16_t AchievementID);                                                                // [0x18a11a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_LogQuestDescription
	void Client_LogQuestDescription(AWTLNPCActor* DialogInstigator, int32_t QuestID);                                        // [0x18a0a20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_ForceSendScreenshot
	void Client_ForceSendScreenshot();                                                                                       // [0x18a2c60] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_EndDialog
	void Client_EndDialog(AWTLNPCActor* DialogInstigator);                                                                   // [0x18a04e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_EndBarterDeal
	void Client_EndBarterDeal(bool Success);                                                                                 // [0x189bec0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_EditorGetGroupInvite
	void Client_EditorGetGroupInvite(FWTLGroupInvite Invite);                                                                // [0x1898f80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_BeginWeaponPartsExchange
	void Client_BeginWeaponPartsExchange(AWTLNPCActor* NPCActor);                                                            // [0x18a0160] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_BeginTrade
	void Client_BeginTrade(AActor* TradingActor);                                                                            // [0x18a0400] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_BeginRepair
	void Client_BeginRepair(AWTLNPCActor* RepairingActor);                                                                   // [0x18a0320] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_BeginItemsCustomization
	void Client_BeginItemsCustomization(AWTLNPCActor* NPCActor);                                                             // [0x18a0240] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.Client_BeginInformationDialog
	void Client_BeginInformationDialog(AWTLTriggerObject* TriggerObject, int32_t InformationDialogID, FText Title);          // [0x189ff20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ClearHUDWidgets
	void ClearHUDWidgets();                                                                                                  // [0x189ac00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerController.ChargePlaceableStuff
	void ChargePlaceableStuff(AWTLPlaceableStuff* PlaceableStuff);                                                           // [0x1899e80] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.CancelSuicide
	void CancelSuicide();                                                                                                    // [0x189a580] Final|Native|Public  
	// Function /Script/WTL.WTLPlayerController.CancelExitGame
	void CancelExitGame();                                                                                                   // [0x189a380] Final|Native|Public  
};

/// Class /Script/WTL.WTLPlayerStart
/// Size: 0x0008 (0x000250 - 0x000258)
class AWTLPlayerStart : public APlayerStart
{ 
public:
	EWTLFaction                                        Faction;                                                    // 0x0250   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0251   (0x0003)  MISSED
	int32_t                                            Rating;                                                     // 0x0254   (0x0004)  
};

/// Class /Script/WTL.WTLPlayerState
/// Size: 0x14F0 (0x000320 - 0x001810)
class AWTLPlayerState : public APlayerState
{ 
public:
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0320   (0x0020)  MISSED
	int32_t                                            m_MailPackageCount;                                         // 0x0340   (0x0004)  
	char                                               m_PlacedMinesCount;                                         // 0x0344   (0x0001)  
	char                                               m_PlacedStickyMinesCount;                                   // 0x0345   (0x0001)  
	bool                                               m_IsPieceOfShit;                                            // 0x0346   (0x0001)  
	unsigned char                                      UnknownData01_5[0x89];                                      // 0x0347   (0x0089)  MISSED
	EWTLPlayerPawnType                                 m_PlayerPawnType;                                           // 0x03D0   (0x0001)  
	unsigned char                                      UnknownData02_5[0x4F];                                      // 0x03D1   (0x004F)  MISSED
	FWTLCharacterInfo                                  m_CharacterInfo;                                            // 0x0420   (0x0110)  
	unsigned char                                      UnknownData03_5[0x188];                                     // 0x0530   (0x0188)  MISSED
	float                                              m_CharacterCurrentState_Health;                             // 0x06B8   (0x0004)  
	char                                               m_CharacterCurrentState_Strength;                           // 0x06BC   (0x0001)  
	char                                               m_CharacterCurrentState_Dexterity;                          // 0x06BD   (0x0001)  
	char                                               m_CharacterCurrentState_Stamina;                            // 0x06BE   (0x0001)  
	char                                               m_CharacterCurrentState_Accuracy;                           // 0x06BF   (0x0001)  
	char                                               m_CharacterCurrentState_Intelligence;                       // 0x06C0   (0x0001)  
	char                                               m_CharacterCurrentState_Fortune;                            // 0x06C1   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x06C2   (0x0002)  MISSED
	uint32_t                                           m_CharacterCurrentState_LocationID;                         // 0x06C4   (0x0004)  
	FVector                                            m_CharacterCurrentState_LocationPosition;                   // 0x06C8   (0x000C)  
	EWTLItemType                                       m_CharacterCurrentState_ArmsItemType;                       // 0x06D4   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x06D5   (0x0003)  MISSED
	uint64_t                                           m_CharacterCurrentState_ArmsItemID;                         // 0x06D8   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_HeadItemType;                       // 0x06E0   (0x0001)  
	unsigned char                                      UnknownData06_5[0x7];                                       // 0x06E1   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_HeadItemID;                         // 0x06E8   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_TorsoItemType;                      // 0x06F0   (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x06F1   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_TorsoItemID;                        // 0x06F8   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_LegsItemType;                       // 0x0700   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0701   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_LegsItemID;                         // 0x0708   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_FeetItemType;                       // 0x0710   (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0711   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_FeetItemID;                         // 0x0718   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_EquipmentSlot1ItemType;             // 0x0720   (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x0721   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_EquipmentSlot1ItemID;               // 0x0728   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_EquipmentSlot2ItemType;             // 0x0730   (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x0731   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_EquipmentSlot2ItemID;               // 0x0738   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_EquipmentSlot3ItemType;             // 0x0740   (0x0001)  
	unsigned char                                      UnknownData12_5[0x7];                                       // 0x0741   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_EquipmentSlot3ItemID;               // 0x0748   (0x0008)  
	EWTLItemType                                       m_CharacterCurrentState_EquipmentSlot4ItemType;             // 0x0750   (0x0001)  
	unsigned char                                      UnknownData13_5[0x7];                                       // 0x0751   (0x0007)  MISSED
	uint64_t                                           m_CharacterCurrentState_EquipmentSlot4ItemID;               // 0x0758   (0x0008)  
	char                                               m_CharacterCurrentState_EquipmentSlotStates;                // 0x0760   (0x0001)  
	unsigned char                                      UnknownData14_5[0x7];                                       // 0x0761   (0x0007)  MISSED
	TArray<FWTLFastAccessSlot>                         m_CharacterCurrentState_FastAccessSlots;                    // 0x0768   (0x0010)  
	int32_t                                            m_CharacterCurrentState_SafeZoneID;                         // 0x0778   (0x0004)  
	unsigned char                                      UnknownData15_5[0x4];                                       // 0x077C   (0x0004)  MISSED
	TArray<FWTLIdentity32>                             m_CharacterCurrentState_VisitedLocations;                   // 0x0780   (0x0010)  
	TArray<FWTLIdentity16>                             m_CharacterCurrentState_PDAModules;                         // 0x0790   (0x0010)  
	TArray<FWTLIdentity32>                             m_CharacterCurrentState_VisitedPortals;                     // 0x07A0   (0x0010)  
	char                                               m_CharacterCurrentState_Hunger;                             // 0x07B0   (0x0001)  
	char                                               m_CharacterCurrentState_Thirst;                             // 0x07B1   (0x0001)  
	unsigned char                                      UnknownData16_5[0x6];                                       // 0x07B2   (0x0006)  MISSED
	FWTLMedicineItemEffect                             m_CharacterCurrentState_MedicineEffect;                     // 0x07B8   (0x0030)  
	FWTLMedicineItemEffect                             m_CharacterCurrentState_StimulatorEffect;                   // 0x07E8   (0x0030)  
	FWTLCharacterItemExperienceFastArray               m_CharacterItemExperience;                                  // 0x0818   (0x0118)  
	unsigned char                                      UnknownData17_5[0xA8];                                      // 0x0930   (0x00A8)  MISSED
	TArray<FWTLContactListItem>                        m_CharacterContactList;                                     // 0x09D8   (0x0010)  
	TArray<FWTLIdentity16>                             m_CharacterSkills;                                          // 0x09E8   (0x0010)  
	FWTLCharacterParameters                            m_CharacterParameters;                                      // 0x09F8   (0x00E0)  
	TArray<FWTLCharacterCustomizationRecord>           m_CharacterCustomizationInfo;                               // 0x0AD8   (0x0010)  
	unsigned char                                      UnknownData18_5[0x10];                                      // 0x0AE8   (0x0010)  MISSED
	FWTLCharacterMapMarkerArray                        m_CharacterMapMarkers;                                      // 0x0AF8   (0x0118)  
	FWTLCharacterEffectArray                           m_CharacterEffects;                                         // 0x0C10   (0x0118)  
	TArray<FWTLCharacterMailMessage>                   m_CharacterMail;                                            // 0x0D28   (0x0010)  
	unsigned char                                      UnknownData19_5[0x238];                                     // 0x0D38   (0x0238)  MISSED
	uint64_t                                           m_ShortCharacterInfo_ID;                                    // 0x0F70   (0x0008)  
	EWTLSex                                            m_ShortCharacterInfo_Sex;                                   // 0x0F78   (0x0001)  
	char                                               m_ShortCharacterInfo_Level;                                 // 0x0F79   (0x0001)  
	EWTLCharacterClass                                 m_ShortCharacterInfo_Class;                                 // 0x0F7A   (0x0001)  
	unsigned char                                      UnknownData20_5[0x1];                                       // 0x0F7B   (0x0001)  MISSED
	float                                              m_ShortCharacterInfo_Health;                                // 0x0F7C   (0x0004)  
	bool                                               m_ShortCharacterInfo_ReadyToGame;                           // 0x0F80   (0x0001)  
	char                                               m_ShortCharacterInfo_Strength;                              // 0x0F81   (0x0001)  
	char                                               m_ShortCharacterInfo_Dexterity;                             // 0x0F82   (0x0001)  
	char                                               m_ShortCharacterInfo_Stamina;                               // 0x0F83   (0x0001)  
	char                                               m_ShortCharacterInfo_Accuracy;                              // 0x0F84   (0x0001)  
	char                                               m_ShortCharacterInfo_Intelligence;                          // 0x0F85   (0x0001)  
	char                                               m_ShortCharacterInfo_Fortune;                               // 0x0F86   (0x0001)  
	unsigned char                                      UnknownData21_5[0x1];                                       // 0x0F87   (0x0001)  MISSED
	FWTLCharacterSlotItemInfo                          m_ShortCharacterInfo_HeadItem;                              // 0x0F88   (0x0030)  
	FWTLCharacterSlotItemInfo                          m_ShortCharacterInfo_TorsoItem;                             // 0x0FB8   (0x0030)  
	FWTLCharacterSlotItemInfo                          m_ShortCharacterInfo_LegsItem;                              // 0x0FE8   (0x0030)  
	FWTLCharacterSlotItemInfo                          m_ShortCharacterInfo_FeetItem;                              // 0x1018   (0x0030)  
	FWTLCharacterSlotItemInfo                          m_ShortCharacterInfo_ArmsItem;                              // 0x1048   (0x0030)  
	FWTLFastAccessSlotItemInfoArray                    m_ShortCharacterInfo_FastAccessSlots;                       // 0x1078   (0x0118)  
	EWTLFaction                                        m_ShortCharacterInfo_Faction;                               // 0x1190   (0x0001)  
	char                                               m_ShortCharacterInfo_Reputation;                            // 0x1191   (0x0001)  
	char                                               m_ShortCharacterInfo_Rank;                                  // 0x1192   (0x0001)  
	unsigned char                                      UnknownData22_5[0x1];                                       // 0x1193   (0x0001)  MISSED
	uint16_t                                           m_ShortCharacterInfo_ClanID;                                // 0x1194   (0x0002)  
	EWTLClanMemberType                                 m_ShortCharacterInfo_ClanMemberType;                        // 0x1196   (0x0001)  
	EWTLPlayerType                                     m_ShortCharacterInfo_PlayerType;                            // 0x1197   (0x0001)  
	char                                               m_ShortCharacterInfo_BodyType;                              // 0x1198   (0x0001)  
	bool                                               m_ShortCharacterInfo_PVPEnabled;                            // 0x1199   (0x0001)  
	unsigned char                                      UnknownData23_5[0x6];                                       // 0x119A   (0x0006)  MISSED
	TArray<FWTLCharacterCustomizationPackedRecord>     m_ShortCharacterInfo_CustomizationInfo;                     // 0x11A0   (0x0010)  
	FWTLCharacterEquipmentItemInfo                     m_ShortCharacterInfo_EquipmentSlot1;                        // 0x11B0   (0x0030)  
	FWTLCharacterEquipmentItemInfo                     m_ShortCharacterInfo_EquipmentSlot2;                        // 0x11E0   (0x0030)  
	FWTLCharacterEquipmentItemInfo                     m_ShortCharacterInfo_EquipmentSlot3;                        // 0x1210   (0x0030)  
	FWTLCharacterEquipmentItemInfo                     m_ShortCharacterInfo_EquipmentSlot4;                        // 0x1240   (0x0030)  
	char                                               m_ShortCharacterInfo_EquipmentSlotStates;                   // 0x1270   (0x0001)  
	unsigned char                                      UnknownData24_5[0x3];                                       // 0x1271   (0x0003)  MISSED
	uint32_t                                           m_InventoryWeight;                                          // 0x1274   (0x0004)  
	uint32_t                                           m_MaxInventoryWeight;                                       // 0x1278   (0x0004)  
	float                                              m_MaxHealth;                                                // 0x127C   (0x0004)  
	bool                                               m_MuteStateChat;                                            // 0x1280   (0x0001)  
	bool                                               m_MuteStateVoice;                                           // 0x1281   (0x0001)  
	unsigned char                                      UnknownData25_5[0x6];                                       // 0x1282   (0x0006)  MISSED
	FWTLDateTime                                       m_MuteStateMuteEnd;                                         // 0x1288   (0x0008)  
	FString                                            m_MuteStateDescription;                                     // 0x1290   (0x0010)  
	bool                                               m_IsFounder;                                                // 0x12A0   (0x0001)  
	unsigned char                                      UnknownData26_5[0x27];                                      // 0x12A1   (0x0027)  MISSED
	TArray<FWTLClanMember>                             m_ClanMembers;                                              // 0x12C8   (0x0010)  
	TArray<FWTLClanPolicyGroup>                        m_ClanPolicyGroups;                                         // 0x12D8   (0x0010)  
	TArray<FWTLCommissionStorage>                      m_CommissionStorages;                                       // 0x12E8   (0x0010)  
	TArray<FWTLCraftObjectState>                       m_CraftObjectStates;                                        // 0x12F8   (0x0010)  
	FWTLBarterDeal                                     m_BarterDeal;                                               // 0x1308   (0x0180)  
	FWTLStorageContent                                 m_MailStorage;                                              // 0x1488   (0x00A8)  
	FWTLOperationResult                                m_LastOperationResult;                                      // 0x1530   (0x0020)  
	bool                                               m_CanPlaceCampfire;                                         // 0x1550   (0x0001)  
	bool                                               m_CanPlaceStash;                                            // 0x1551   (0x0001)  
	unsigned char                                      UnknownData27_5[0x2];                                       // 0x1552   (0x0002)  MISSED
	FVector                                            m_LastCampfireLocation;                                     // 0x1554   (0x000C)  
	FVector                                            m_LastStashLocation;                                        // 0x1560   (0x000C)  
	unsigned char                                      UnknownData28_5[0x124];                                     // 0x156C   (0x0124)  MISSED
	FWTLGroup                                          Group;                                                      // 0x1690   (0x0050)  
	TArray<FWTLStimulatorEffect>                       StimulatorEffects;                                          // 0x16E0   (0x0010)  
	uint64_t                                           LastDeathFromCharacterID;                                   // 0x16F0   (0x0008)  
	bool                                               bIsPVPAllowed;                                              // 0x16F8   (0x0001)  
	unsigned char                                      UnknownData29_5[0x7];                                       // 0x16F9   (0x0007)  MISSED
	uint64_t                                           SteamID;                                                    // 0x1700   (0x0008)  
	unsigned char                                      UnknownData30_5[0x100];                                     // 0x1708   (0x0100)  MISSED
	uint64_t                                           m_SavedTeleportationDeviceItemID;                           // 0x1808   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLPlayerState.Server_ViewOrReadItem
	void Server_ViewOrReadItem(uint16_t ArtefactID);                                                                         // [0x18ac2b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UseRepairKit
	void Server_UseRepairKit(uint64_t RepaitKitItemID, EWTLItemType ItemType, uint64_t ItemId);                              // [0x18b7fb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UseNewPassport
	void Server_UseNewPassport(uint64_t ItemId);                                                                             // [0x18b01a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UseModificationKit
	void Server_UseModificationKit(uint64_t RepaitKitItemID, EWTLItemType ItemType, uint64_t ItemId);                        // [0x18b7d80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UseJunkMachine
	void Server_UseJunkMachine(AWTLJunkMachineBase* JunkMachine, TArray<FWTLSellingItemInfo> Items);                         // [0x18ac6a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UseItemFromStorage
	void Server_UseItemFromStorage(AActor* StorageContentActor, EWTLItemType ItemType, uint64_t ItemId);                     // [0x18bc480] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UseItem
	void Server_UseItem(EWTLItemType ItemType, uint64_t ItemId);                                                             // [0x18bc6b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UpdateItemCustomizationWithSprayCan
	void Server_UpdateItemCustomizationWithSprayCan(EWTLItemType ItemType, uint64_t ItemId, uint64_t SprayCanItemID);        // [0x18b9410] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UpdateItemCustomization
	void Server_UpdateItemCustomization(AWTLNPCActor* NPC, EWTLItemType ItemType, uint64_t ItemId, char CustomizationScalar, char CustomizationColor); // [0x18b9640] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UpdateCommissionItem
	void Server_UpdateCommissionItem(AWTLNPCActor* NPC, EWTLItemType ItemType, uint64_t ItemId, float Price, int32_t MinBuyCount, uint32_t CommissionDaysDelta); // [0x18b6e70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UpdateClanStorageTab
	void Server_UpdateClanStorageTab(AWTLNPCActor* NPC, char TabIndex, char ImageIndex, FString TabName, FString Description, TArray<uint64_t> CanPutClanPolicyGroups, TArray<uint64_t> CanTakeClanPolicyGroups); // [0x18b4870] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UpdateClanPolicyGroup
	void Server_UpdateClanPolicyGroup(uint64_t ClanPolicyGroupID, FString Name);                                             // [0x18b4480] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UpdateCharacterParameters
	void Server_UpdateCharacterParameters(char Strength, char Dexterity, char Stamina, char Accuracy, char Intelligence, char Fortune); // [0x18ba340] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UnloadWeapon
	void Server_UnloadWeapon(uint64_t ItemId);                                                                               // [0x18bc9d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UniteAllStorageItems
	void Server_UniteAllStorageItems(AActor* StorageContentActor);                                                           // [0x18be490] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UniteAllItemsOfType
	void Server_UniteAllItemsOfType(EWTLItemType ItemType);                                                                  // [0x18be600] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UniteAllItems
	void Server_UniteAllItems();                                                                                             // [0x18be5a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UniteAllClanStorageItems
	void Server_UniteAllClanStorageItems(AWTLNPCActor* NPC, char TabIndex);                                                  // [0x18b4eb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_Unite2StorageItems
	void Server_Unite2StorageItems(AActor* StorageContentActor, EWTLItemType ItemType, uint64_t ItemID1, uint64_t ItemID2);  // [0x18be700] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_Unite2InventoryItems
	void Server_Unite2InventoryItems(EWTLItemType ItemType, uint64_t ItemID1, uint64_t ItemID2);                             // [0x18be9c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_Unite2ClanStorageItems
	void Server_Unite2ClanStorageItems(AWTLNPCActor* NPC, char TabIndex, EWTLItemType ItemType, uint64_t ItemID1, uint64_t ItemID2); // [0x18b5040] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UnequipStuffItem
	void Server_UnequipStuffItem(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                                   // [0x18bb550] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_UnequipItem
	void Server_UnequipItem(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                                        // [0x18bb9b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_TeleportToFortificationCommandCore
	void Server_TeleportToFortificationCommandCore(uint64_t TeleportationDeviceItemID, AWTLCharacter* Character, AWTLFortificationCommandCore* FortificationCommandCore); // [0x18ac020] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_TakeMoneyFromClanStorage
	void Server_TakeMoneyFromClanStorage(AWTLNPCActor* NPC, char TabIndex, int32_t MoneyAmount, FString Description);        // [0x18b5ce0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_TakeMoneyFromCharacterBalance
	void Server_TakeMoneyFromCharacterBalance(AWTLNPCActor* NPC);                                                            // [0x18b6b30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_TakeClanQuest
	void Server_TakeClanQuest(int32_t QuestID);                                                                              // [0x18b0ab0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_TakeBulletinBoarQuest
	void Server_TakeBulletinBoarQuest(AWTLBulletinBoard* BulletinBoard, int32_t QuestID);                                    // [0x18b0bc0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SynchronizeQuestStates
	void Server_SynchronizeQuestStates(uint64_t ControlSum);                                                                 // [0x18ad580] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SwapStorageItems
	void Server_SwapStorageItems(AActor* StorageContentActor, char FromSlotNumber, char ToSlotNumber);                       // [0x18bebf0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SwapInventoryItems
	void Server_SwapInventoryItems(char FromSlotNumber, char ToSlotNumber);                                                  // [0x18bee20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SwapClanStorageItems
	void Server_SwapClanStorageItems(AWTLNPCActor* NPC, char TabIndex, char FromSlotNumber, char ToSlotNumber);              // [0x18b5380] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SwapArmorPlates
	void Server_SwapArmorPlates(uint64_t ArmorItemID);                                                                       // [0x18b2d40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SplitItem
	void Server_SplitItem(EWTLItemType ItemType, uint64_t ItemId, int32_t NewItemCount);                                     // [0x18be0f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ShowPlayersTable
	void Server_ShowPlayersTable();                                                                                          // [0x18c0cf0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ShowGodConsole
	void Server_ShowGodConsole();                                                                                            // [0x18ac250] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetPVPMode
	void Server_SetPVPMode(bool PVPEnabled);                                                                                 // [0x18b0770] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetMoneyToBarterDeal
	void Server_SetMoneyToBarterDeal(int32_t MoneyAmount);                                                                   // [0x18b3700] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetMailMessageRead
	void Server_SetMailMessageRead(uint64_t MessageID);                                                                      // [0x18b91f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetItemCustomizationName
	void Server_SetItemCustomizationName(EWTLItemType ItemType, uint64_t ItemId, uint64_t CustomizationItemID, FString CustomizationName); // [0x18b02b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetDebugIsFounder
	void Server_SetDebugIsFounder(bool IsFounder);                                                                           // [0x18abe30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetDebugHavePremium
	void Server_SetDebugHavePremium(bool HavePremium);                                                                       // [0x18abd20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetDebugCharacterPlayerType
	void Server_SetDebugCharacterPlayerType(EWTLPlayerType PlayerType);                                                      // [0x18abc20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetDebugCharacterIsInClan
	void Server_SetDebugCharacterIsInClan(bool IsInClan);                                                                    // [0x18aba00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetDebugCharacterClanMemberType
	void Server_SetDebugCharacterClanMemberType(EWTLClanMemberType ClanMemberType);                                          // [0x18ab900] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetDebugCharacterBodyType
	void Server_SetDebugCharacterBodyType(int32_t BodyTypeIndex);                                                            // [0x18abb10] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetClanLeader
	void Server_SetClanLeader(uint64_t CharacterID);                                                                         // [0x18b1250] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetClanDescription
	void Server_SetClanDescription(FString Description);                                                                     // [0x18b0d50] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetClanDeputyLeader
	void Server_SetClanDeputyLeader(uint64_t CharacterID);                                                                   // [0x18b1140] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetBarterDealReady
	void Server_SetBarterDealReady(bool Value);                                                                              // [0x18b3c30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetBarterDealAgreement
	void Server_SetBarterDealAgreement(AWTLCharacter* Character, bool AcceptState);                                          // [0x18b3560] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SetActiveQuest
	void Server_SetActiveQuest(int32_t QuestID);                                                                             // [0x18ba7d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendMoneyToCharacter
	void Server_SendMoneyToCharacter(uint64_t CharacterID, int32_t MoneyAmount, FString Description);                        // [0x18b7a70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendMailPackage
	void Server_SendMailPackage(AWTLMailBox* MailBox, EWTLMailPackageDeliveryType DeliveryType, FString RecipientName, TArray<FWTLSellingItemInfo> Items, int32_t MoneyAmount, FString MessageText); // [0x18afda0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendMailMessageToClanMembers
	void Server_SendMailMessageToClanMembers(char Priority, FString Subject, FString Text);                                  // [0x18b8a10] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendMailMessage
	void Server_SendMailMessage(FString RecipientName, char Priority, FString Subject, FString Text);                        // [0x18b8c70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendClanMemberRequest
	void Server_SendClanMemberRequest(uint16_t ClanID, FString Commentary);                                                  // [0x18b0e70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendClanInviteToCharacter
	void Server_SendClanInviteToCharacter(FString CharacterName);                                                            // [0x18b1600] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SendBarterDealRequest
	void Server_SendBarterDealRequest(uint64_t CharacterID, FString MessageText);                                            // [0x18b4020] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_SellItems
	void Server_SellItems(AActor* TradingActor, TArray<FWTLSellingItemInfo> SellingItems);                                   // [0x18bbe00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ResetCharacterParameters
	void Server_ResetCharacterParameters();                                                                                  // [0x18ba710] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RequestPrivateLootFromStorageContentActor
	void Server_RequestPrivateLootFromStorageContentActor(AActor* StorageContentActor);                                      // [0x18ac860] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ReplicateBarterDeals
	void Server_ReplicateBarterDeals(AWTLCharacter* Character);                                                              // [0x18b3450] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RepairStuffItem
	void Server_RepairStuffItem(uint64_t StuffItemID, uint64_t OtherItemID);                                                 // [0x18ba020] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RepairItems
	void Server_RepairItems(AWTLNPCActor* GunsmithNPC, TArray<FWTLIdentityItem> RepairItems);                                // [0x18ba8e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveWeaponAttachmentFromSlot
	void Server_RemoveWeaponAttachmentFromSlot(uint64_t WeaponItemID, EWTLWeaponAttachmentSlotType SlotType);                // [0x18badd0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveWeaponAttachment
	void Server_RemoveWeaponAttachment(uint64_t WeaponItemID, uint16_t ItemTypeID);                                          // [0x18bac40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveSkillFromCharacter
	void Server_RemoveSkillFromCharacter(uint16_t SkillID);                                                                  // [0x18b9bd0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemovePDAModuleID
	void Server_RemovePDAModuleID(uint16_t ModuleID);                                                                        // [0x18b81e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveItemFromContainer
	void Server_RemoveItemFromContainer(uint64_t ContainerItemID);                                                           // [0x18b8400] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveItemFromCommission
	void Server_RemoveItemFromCommission(AWTLNPCActor* NPC, EWTLItemType ItemType, uint64_t ItemId);                         // [0x18b6c40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveItemFromBarterDeal
	void Server_RemoveItemFromBarterDeal(EWTLItemType ItemType, uint64_t ItemId);                                            // [0x18b3810] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveContact
	void Server_RemoveContact(uint64_t CharacterID);                                                                         // [0x18b8740] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveClanDeputyLeader
	void Server_RemoveClanDeputyLeader(uint64_t CharacterID);                                                                // [0x18b1030] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveArmorPlate
	void Server_RemoveArmorPlate(uint64_t ArmorItemID, EWTLArmorPlateType ArmorPlateType, char SlotNumber);                  // [0x18b2f60] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveAllWeaponAttachments
	void Server_RemoveAllWeaponAttachments(uint64_t WeaponItemID);                                                           // [0x18bab30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RemoveAllArmorPlates
	void Server_RemoveAllArmorPlates(uint64_t ArmorItemID);                                                                  // [0x18b2e50] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_RejectBarterDealRequest
	void Server_RejectBarterDealRequest(uint64_t CharacterID);                                                               // [0x18b3e00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ReceiveMailPackage
	void Server_ReceiveMailPackage(AWTLMailBox* MailBox, uint64_t MailPackageID);                                            // [0x18afc10] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PutMoneyToClanStorage
	void Server_PutMoneyToClanStorage(AWTLNPCActor* NPC, char TabIndex, int32_t MoneyAmount, FString Description);           // [0x18b5a10] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PutItemToAccountInventory
	void Server_PutItemToAccountInventory(EWTLItemType ItemType, uint64_t ItemId, int32_t Count);                            // [0x18aec40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PutItemOnCommission
	void Server_PutItemOnCommission(AWTLNPCActor* NPC, EWTLItemType ItemType, uint64_t ItemId, float Price, int32_t MinBuyCount, int32_t CommissionDays); // [0x18b7240] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PlaceItemToStorageContentActor
	void Server_PlaceItemToStorageContentActor(AActor* StorageContentActor, EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count); // [0x18bd980] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PlaceItemToClanStorage
	void Server_PlaceItemToClanStorage(AWTLNPCActor* NPC, char TabIndex, EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count, FString Description); // [0x18b5fb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PlaceItemInContainer
	void Server_PlaceItemInContainer(uint64_t ContainerItemID, EWTLItemType ItemType, uint64_t ItemId);                      // [0x18b8510] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PickupItemFromStorageContentActor
	void Server_PickupItemFromStorageContentActor(AActor* StorageContentActor, EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count); // [0x18bddc0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PickupItemFromClanStorage
	void Server_PickupItemFromClanStorage(AWTLNPCActor* NPC, char TabIndex, EWTLItemType ItemType, uint64_t ItemId, char SlotNumber, int32_t Count, FString Description); // [0x18b6410] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_PickupAllItemsFromStorageContentActor
	void Server_PickupAllItemsFromStorageContentActor(AActor* StorageContentActor);                                          // [0x18bdcb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_OptimizeStorageItems
	void Server_OptimizeStorageItems(AActor* StorageContentActor);                                                           // [0x18be320] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_OptimizeItems
	void Server_OptimizeItems();                                                                                             // [0x18be430] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_OptimizeClanStorageItems
	void Server_OptimizeClanStorageItems(AWTLNPCActor* NPC, char TabIndex);                                                  // [0x18b4d20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MoveStuffItem
	void Server_MoveStuffItem(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                                      // [0x18bb0f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MoveStorageItemToSlot
	void Server_MoveStorageItemToSlot(AActor* StorageContentActor, EWTLItemType ItemType, uint64_t ItemId, char SlotNumber); // [0x18befc0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MoveOrSwapFastAccessSlotItem
	void Server_MoveOrSwapFastAccessSlotItem(char FromSlotNumber, char ToSlotNumber);                                        // [0x18bd2c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MoveInventoryItemToSlot
	void Server_MoveInventoryItemToSlot(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                            // [0x18bf280] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MoveClanStorageItemToSlot
	void Server_MoveClanStorageItemToSlot(AWTLNPCActor* NPC, char TabIndex, EWTLItemType ItemType, uint64_t ItemId, char NewTabIndex, char NewSlotNumber); // [0x18b5640] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MoveCharacterToPointLocation
	void Server_MoveCharacterToPointLocation(AWTLCharacter* Character, FVector PointLocation, bool UseCharacterCurrentRotation, float PointRotationYaw); // [0x18ac3c0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_MakeExtractFromItems
	void Server_MakeExtractFromItems(uint64_t ExtractorItemID, uint64_t ContainerItemID, TArray<FWTLExtractItemInfo> ExtractItems); // [0x18b9df0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_LoadWeapon
	void Server_LoadWeapon(uint64_t WeaponItemID, uint64_t AmmoItemID);                                                      // [0x18bc840] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_LoadMailMessageText
	void Server_LoadMailMessageText(uint64_t MessageID);                                                                     // [0x18b9300] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_LeaveFaction
	void Server_LeaveFaction(bool ForceExclude);                                                                             // [0x18b18a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_LeaveClan
	void Server_LeaveClan();                                                                                                 // [0x18b1840] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_InstallPDAModuleItemID
	void Server_InstallPDAModuleItemID(uint64_t ModuleItemID);                                                               // [0x18b82f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_InstallArmorPlate
	void Server_InstallArmorPlate(uint64_t ArmorItemID, EWTLArmorPlateType ArmorPlateType, uint64_t ArmorPlateItemID, bool bIsSwitchRemovedArmorPlate); // [0x18b3190] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GiveSkillToClan
	void Server_GiveSkillToClan(char SkillID);                                                                               // [0x18b9a70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GiveSkillToCharacter
	void Server_GiveSkillToCharacter(uint16_t SkillID);                                                                      // [0x18b9ce0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetSkill
	void Server_GetSkill(uint16_t SkillID);                                                                                  // [0x18bbcf0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetMailPackageList
	void Server_GetMailPackageList(AWTLMailBox* MailBox, int32_t PageIndex);                                                 // [0x18af970] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetMailPackageCount
	void Server_GetMailPackageCount(AWTLMailBox* MailBox);                                                                   // [0x18afb00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetItemFromAccountInventory
	void Server_GetItemFromAccountInventory(uint64_t AccountInventoryID, int32_t Count);                                     // [0x18aee70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetFactionLeaders
	void Server_GetFactionLeaders();                                                                                         // [0x18b0710] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetCommissionSellItemsTypesCount
	void Server_GetCommissionSellItemsTypesCount(AActor* TradingActor);                                                      // [0x18b2bd0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetCommissionSellItemsPage
	void Server_GetCommissionSellItemsPage(AActor* TradingActor, EWTLItemType ItemType, int32_t PageIndex, int32_t ItemsPerPage, int32_t SortType, int32_t FilterValue1, int32_t FilterValue2); // [0x18b2780] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetClanStorageMoneyLogPage
	void Server_GetClanStorageMoneyLogPage(AActor* ClanStorageActor, int32_t PageIndex, int32_t RecordsPerPage, int32_t SortType, EWTLClanStorageMoneyOperationType OperationTypeFilter, FString CharacterNameFilter, int32_t TabIndexFilter); // [0x18b1ec0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_GetClanStorageItemsLogPage
	void Server_GetClanStorageItemsLogPage(AActor* ClanStorageActor, int32_t PageIndex, int32_t RecordsPerPage, int32_t SortType, EWTLClanStorageItemOperationType OperationTypeFilter, FString CharacterNameFilter, int32_t TabIndexFilter); // [0x18b2320] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ExchangeWeaponModificationParts
	void Server_ExchangeWeaponModificationParts(uint64_t ExchangeItemID, uint16_t ToPartID, int32_t Value);                  // [0x18af2a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ExchangeJunkMachineCardItem
	void Server_ExchangeJunkMachineCardItem(AWTLJunkMachineBase* JunkMachine);                                               // [0x18aeb30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ExchangeClanScore
	void Server_ExchangeClanScore(EWTLClanScoreType FromType, EWTLClanScoreType ToType, int32_t Value);                      // [0x18b0880] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EquipStuffItem
	void Server_EquipStuffItem(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                                     // [0x18bb320] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EquipItem
	void Server_EquipItem(EWTLItemType ItemType, uint64_t ItemId, EWTLBodyPart BodyPart);                                    // [0x18bb780] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorSetGroupLeader
	void Server_EditorSetGroupLeader(uint64_t CharacterID);                                                                  // [0x18c0e60] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorSendGroupInvite
	void Server_EditorSendGroupInvite(FString CharacterNameToInvite);                                                        // [0x18c0f70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorRenameGroup
	void Server_EditorRenameGroup(FString NewGroupName);                                                                     // [0x18c11e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorRemoveGroupMember
	void Server_EditorRemoveGroupMember(uint64_t CharacterID);                                                               // [0x18c0d50] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorLeaveGroup
	void Server_EditorLeaveGroup();                                                                                          // [0x18c1090] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorCreateGroup
	void Server_EditorCreateGroup();                                                                                         // [0x18c1300] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_EditorAcceptGroupInvite
	void Server_EditorAcceptGroupInvite(uint64_t GroupId);                                                                   // [0x18c1fb0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DropItemCount
	void Server_DropItemCount(EWTLItemType ItemType, uint64_t ItemId, int32_t ItemCountToDrop);                              // [0x18bcf00] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DropItem
	void Server_DropItem(EWTLItemType ItemType, uint64_t ItemId);                                                            // [0x18bd130] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DismissCharacterFromClan
	void Server_DismissCharacterFromClan(FString CharacterName);                                                             // [0x18b1720] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DestroyStash
	void Server_DestroyStash();                                                                                              // [0x18b2ce0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DestroyItemCount
	void Server_DestroyItemCount(EWTLItemType ItemType, uint64_t ItemId, int32_t ItemCountToDestroy);                        // [0x18bcb40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DestroyItem
	void Server_DestroyItem(EWTLItemType ItemType, uint64_t ItemId);                                                         // [0x18bcd70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DestroyAllInventoryItems
	void Server_DestroyAllInventoryItems();                                                                                  // [0x18bcae0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DeleteMailMessages
	void Server_DeleteMailMessages(TArray<uint64_t> MessageIDs);                                                             // [0x18b8fc0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DeleteMailMessage
	void Server_DeleteMailMessage(uint64_t MessageID);                                                                       // [0x18b90e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DeleteClanPolicyGroup
	void Server_DeleteClanPolicyGroup(uint64_t ClanPolicyGroupID);                                                           // [0x18b4370] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_DeleteAllMailMessages
	void Server_DeleteAllMailMessages();                                                                                     // [0x18b8f60] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CutFishWithKnife
	void Server_CutFishWithKnife(uint64_t FishItemID, uint64_t KnifeItemID);                                                 // [0x18ae890] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CutFish
	void Server_CutFish(uint64_t FishItemID);                                                                                // [0x18aea20] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CreateCraftObjectItem
	void Server_CreateCraftObjectItem(AWTLCraftObject* CraftObject, int32_t CraftItemID);                                    // [0x18b7610] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CreateCraftItem
	void Server_CreateCraftItem(int32_t CraftItemID);                                                                        // [0x18b77a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CreateClanPolicyGroup
	void Server_CreateClanPolicyGroup(FString Name);                                                                         // [0x18b4640] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ConsumeSteamInventoryItem
	void Server_ConsumeSteamInventoryItem(AWTLNPCActor* NPCActor, uint64_t UserSteamID, uint64_t ItemId);                    // [0x18b1c90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CombineInventoryItems
	void Server_CombineInventoryItems(TArray<FWTLIdentityItem> Items);                                                       // [0x18b78b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ClearFastAccessSlot
	void Server_ClearFastAccessSlot(char SlotNumber);                                                                        // [0x18bd460] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ClearCharacterSkills
	void Server_ClearCharacterSkills();                                                                                      // [0x18b9b70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ClearCharacterMapMarkers
	void Server_ClearCharacterMapMarkers();                                                                                  // [0x18ba770] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ChargeStuffItem
	void Server_ChargeStuffItem(uint64_t StuffItemID, uint64_t EnergySourceItemID);                                          // [0x18ba1b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ChangeCharacterSexByItem
	void Server_ChangeCharacterSexByItem(uint64_t ItemId);                                                                   // [0x18af000] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ChangeCharacterSex
	void Server_ChangeCharacterSex(EWTLSex NewSex);                                                                          // [0x18b9970] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ChangeCharacterClassByItem
	void Server_ChangeCharacterClassByItem(uint64_t ItemId, EWTLCharacterClass NewClass);                                    // [0x18af110] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CancelBarterDealRequest
	void Server_CancelBarterDealRequest();                                                                                   // [0x18b3da0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_CancelBarterDeal
	void Server_CancelBarterDeal();                                                                                          // [0x18b3d40] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_BuyItem
	void Server_BuyItem(AActor* TradingActor, EWTLItemType ItemType, uint64_t ItemId, int32_t Count, float ClientPrice);     // [0x18bc140] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_BreakWeaponItemToParts
	void Server_BreakWeaponItemToParts(uint64_t ItemId);                                                                     // [0x18af4d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AssignItemToFastAccessSlot
	void Server_AssignItemToFastAccessSlot(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                         // [0x18bd750] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AssignClanPolicyGroupToClanMember
	void Server_AssignClanPolicyGroupToClanMember(uint64_t ClanMemberID, uint64_t ClanPolicyGroupID);                        // [0x18b41e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_ApplyWeaponAttachment
	void Server_ApplyWeaponAttachment(uint64_t WeaponItemID, uint64_t AttachmentItemID);                                     // [0x18baf60] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AddTabToClanStorage
	void Server_AddTabToClanStorage(AWTLNPCActor* NPC);                                                                      // [0x18b4760] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AddItemToCommissionItem
	void Server_AddItemToCommissionItem(AWTLNPCActor* NPC, EWTLItemType CommissionItemType, uint64_t CommissionItemID, uint64_t NewItemID); // [0x18b6870] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AddItemToBarterDeal
	void Server_AddItemToBarterDeal(EWTLItemType ItemType, uint64_t ItemId, int32_t Count);                                  // [0x18b39a0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AddItemsToSteamInventory
	void Server_AddItemsToSteamInventory(AWTLNPCActor* NPCActor, uint64_t UserSteamID, TArray<FWTLIdentityItem> ItemsToAdd); // [0x18b19b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AddContact
	void Server_AddContact(uint64_t CharacterID, FString Name);                                                              // [0x18b8850] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AcceptClanInvite
	void Server_AcceptClanInvite(uint16_t ClanID);                                                                           // [0x18b1360] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AcceptBarterRequest
	void Server_AcceptBarterRequest(uint64_t CharacterID);                                                                   // [0x18b3f10] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AcceptBarterDeal
	void Server_AcceptBarterDeal();                                                                                          // [0x18b3bd0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.Server_AbandonQuest
	void Server_AbandonQuest(int32_t QuestID);                                                                               // [0x18bbbe0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLPlayerState.OnRep_ShortCharacterInfo
	void OnRep_ShortCharacterInfo();                                                                                         // [0x18c1c80] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_PrivateStorages
	void OnRep_PrivateStorages();                                                                                            // [0x18c1ad0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_MuteStateVoice
	void OnRep_MuteStateVoice();                                                                                             // [0x18c1af0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_MuteStateChat
	void OnRep_MuteStateChat();                                                                                              // [0x18c1b90] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_MaxInventoryWeight
	void OnRep_MaxInventoryWeight();                                                                                         // [0x18c1c40] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_MailStorage
	void OnRep_MailStorage();                                                                                                // [0x18c17c0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_LastStashLocation
	void OnRep_LastStashLocation();                                                                                          // [0x18c1610] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_LastOperationResult
	void OnRep_LastOperationResult();                                                                                        // [0x18c1680] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_LastDeathLocation
	void OnRep_LastDeathLocation();                                                                                          // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_LastCampfireLocation
	void OnRep_LastCampfireLocation();                                                                                       // [0x18c1610] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_InventoryWeight
	void OnRep_InventoryWeight();                                                                                            // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_Group
	void OnRep_Group();                                                                                                      // [0x18c1610] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerState.OnRep_CraftObjectStates
	void OnRep_CraftObjectStates();                                                                                          // [0x18c1860] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_CommissionStorages
	void OnRep_CommissionStorages();                                                                                         // [0x18c19a0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_ClanStorages
	void OnRep_ClanStorages();                                                                                               // [0x18c1ab0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_ClanPolicyGroups
	void OnRep_ClanPolicyGroups();                                                                                           // [0x18c1a50] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_ClanMembers
	void OnRep_ClanMembers();                                                                                                // [0x18c1a80] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_CharacterInfo
	void OnRep_CharacterInfo();                                                                                              // [0x18c1f90] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_CharacterCurrentState
	void OnRep_CharacterCurrentState();                                                                                      // [0x18c1cc0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnRep_BarterDeal
	void OnRep_BarterDeal();                                                                                                 // [0x18c17f0] Final|Native|Protected 
	// Function /Script/WTL.WTLPlayerState.OnCharacterTeleportToFortificationCommandCoreResult
	void OnCharacterTeleportToFortificationCommandCoreResult(bool Result);                                                   // [0x18abf40] Final|Native|Private 
	// Function /Script/WTL.WTLPlayerState.Client_UseModificationKitResult
	void Client_UseModificationKitResult(bool Success);                                                                      // [0x18b7ca0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdatePrivateStorageItem
	void Client_UpdatePrivateStorageItem(uint32_t NPCID, uint64_t StorageID, EWTLItemType ItemType, TArray<char> ItemData);  // [0x18adf00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdatePrivateStorage
	void Client_UpdatePrivateStorage(uint32_t NPCID, uint64_t StorageID, char SlotCount);                                    // [0x18ae580] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdatePrivateLootForStorageContentActor
	void Client_UpdatePrivateLootForStorageContentActor(AActor* StorageContentActor, FWTLStorageContent PrivateContent);     // [0x18ac970] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdateInventory
	void Client_UpdateInventory();                                                                                           // [0x18bf4b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdateFactionLeaders
	void Client_UpdateFactionLeaders(TArray<FWTLFactionLeaderRecord> Leaders);                                               // [0x18b0580] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdateClanStorageTab
	void Client_UpdateClanStorageTab(int32_t NPCID, char TabIndex, char ImageIndex, FString TabName, FString Description, TArray<uint64_t> CanPutClanPolicyGroups, TArray<uint64_t> CanTakeClanPolicyGroups); // [0x18bfc90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdateClanStorageMoney
	void Client_UpdateClanStorageMoney(int32_t NPCID, char TabIndex, uint32_t MoneyAmount);                                  // [0x18c00f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_UpdateClanStorageItem
	void Client_UpdateClanStorageItem(int32_t NPCID, char TabIndex, EWTLItemType ItemType, TArray<char> ItemData);           // [0x18c0550] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ShowWarningText
	void Client_ShowWarningText(FText WarningText);                                                                          // [0x18bfa90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ShowWarning
	void Client_ShowWarning(EWTLWarningTitleWidgetType WarningTitleWidgetType);                                              // [0x18bfbc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ShowTutorialMessagesByIDs
	void Client_ShowTutorialMessagesByIDs(TArray<uint16_t> TutorialMessagesIDs, bool IsIgnoreTutorialEnabling);              // [0x18bf7b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ShowTutorialMessages
	void Client_ShowTutorialMessages(TArray<EWTLTutorialMessage> TutorialMessages, bool IsIgnoreTutorialEnabling);           // [0x18bf4d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ShowTutorialMessageByID
	void Client_ShowTutorialMessageByID(uint16_t TutorialMessageID, bool IsIgnoreTutorialEnabling);                          // [0x18bf930] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ShowTutorialMessage
	void Client_ShowTutorialMessage(EWTLTutorialMessage TutorialMessage, bool IsIgnoreTutorialEnabling);                     // [0x18bf650] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_SetQuestStates
	void Client_SetQuestStates(TArray<FWTLCharacterQuestState> QuestStates);                                                 // [0x18ad420] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_SetQuestState
	void Client_SetQuestState(FWTLCharacterQuestState QuestState);                                                           // [0x18ad2d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_SetQuestActive
	void Client_SetQuestActive(uint32_t QuestID, bool Active);                                                               // [0x18ad170] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemoveQuestStates
	void Client_RemoveQuestStates(TArray<uint32_t> QuestIDs);                                                                // [0x18acfa0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemoveQuestState
	void Client_RemoveQuestState(uint32_t QuestID);                                                                          // [0x18ad090] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemovePrivateStorageItem
	void Client_RemovePrivateStorageItem(uint32_t NPCID, uint64_t StorageID, EWTLItemType ItemType, uint64_t ItemId);        // [0x18adc80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemovePrivateStorage
	void Client_RemovePrivateStorage(uint32_t NPCID, uint64_t StorageID);                                                    // [0x18ae420] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemoveInventoryItems
	void Client_RemoveInventoryItems(TArray<FWTLIdentityItem> Items);                                                        // [0x18c1360] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemoveClanStorageItem
	void Client_RemoveClanStorageItem(int32_t NPCID, char TabIndex, EWTLItemType ItemType, uint64_t ItemId);                 // [0x18c02d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_RemoveClanStorage
	void Client_RemoveClanStorage(int32_t NPCID);                                                                            // [0x18c0a90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_OnMailPackageSent
	void Client_OnMailPackageSent();                                                                                         // [0x18af950] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_OnMailPackageReceived
	void Client_OnMailPackageReceived(uint64_t MailPackageID);                                                               // [0x18af5e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_OnClanInviteReceived
	void Client_OnClanInviteReceived(uint16_t ClanID, FString CharacterName);                                                // [0x18b1470] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_OnBuyItemResult
	void Client_OnBuyItemResult(bool Result, EWTLCannotBuyItemReason Reason);                                                // [0x18bbfc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_OnAssignedItemToFastAccessSlot
	void Client_OnAssignedItemToFastAccessSlot(EWTLItemType ItemType, uint64_t ItemId, char SlotNumber);                     // [0x18bd560] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_MailPackageListResult
	void Client_MailPackageListResult(TArray<FWTLMailPackageRecord> MailPackages);                                           // [0x18af6c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_MailPackageCountResult
	void Client_MailPackageCountResult(int32_t Count);                                                                       // [0x18af870] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_EditorOnGroupRenamed
	void Client_EditorOnGroupRenamed(FString NewGroupName);                                                                  // [0x18c10f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ClearQuests
	void Client_ClearQuests();                                                                                               // [0x18acf80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ApplyPrivateStorageDelta
	void Client_ApplyPrivateStorageDelta(uint32_t NPCID, uint64_t StorageID, TArray<FWTLCharacterInventoryDeltaRecord> Records); // [0x18ada50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_ApplyInventoryDelta
	void Client_ApplyInventoryDelta(TArray<FWTLCharacterInventoryDeltaRecord> Records);                                      // [0x18c14f0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_AfterQuestObjectSpawnerUse
	void Client_AfterQuestObjectSpawnerUse(AWTLQuestObjectSpawner* QuestObject);                                             // [0x18acea0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_AddPrivateStorageItem
	void Client_AddPrivateStorageItem(uint32_t NPCID, uint64_t StorageID, EWTLItemType ItemType, TArray<char> ItemData);     // [0x18ae190] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_AddPrivateStorage
	void Client_AddPrivateStorage(FWTLPrivateStorage PrivateStorage);                                                        // [0x18ae770] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_AddMapMarker
	void Client_AddMapMarker(int32_t LocationID, char Type, FString Color, FVector Position, FString Name, bool ShowOnMinimap); // [0x18ad690] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_AddClanStorageItem
	void Client_AddClanStorageItem(int32_t NPCID, char TabIndex, EWTLItemType ItemType, TArray<char> ItemData);              // [0x18c07f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLPlayerState.Client_AddClanStorage
	void Client_AddClanStorage(FWTLClanStorage ClanStorage);                                                                 // [0x18c0b70] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/WTL.WTLPortal
/// Size: 0x0090 (0x000220 - 0x0002B0)
class AWTLPortal : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0220   (0x0018)  MISSED
	bool                                               Active;                                                     // 0x0238   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0239   (0x0007)  MISSED
	TArray<EWTLFaction>                                AllowedFactions;                                            // 0x0240   (0x0010)  
	USphereComponent*                                  SphereComponent;                                            // 0x0250   (0x0008)  
	UStaticMeshComponent*                              MeshComponent;                                              // 0x0258   (0x0008)  
	UNavModifierComponent*                             NavModifierComponent;                                       // 0x0260   (0x0008)  
	int32_t                                            LocationID;                                                 // 0x0268   (0x0004)  
	int32_t                                            ID;                                                         // 0x026C   (0x0004)  
	bool                                               AlwaysVisibleOnMap;                                         // 0x0270   (0x0001)  
	bool                                               ExitPortal;                                                 // 0x0271   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0272   (0x0002)  MISSED
	int32_t                                            RedirectSafeZone;                                           // 0x0274   (0x0004)  
	char                                               MinCharacterLevel;                                          // 0x0278   (0x0001)  
	char                                               MaxCharacterLevel;                                          // 0x0279   (0x0001)  
	unsigned char                                      UnknownData03_5[0x26];                                      // 0x027A   (0x0026)  MISSED
	TArray<AWTLPlayerStart*>                           m_PlayerStarts;                                             // 0x02A0   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLPortal.OnUsePortal
	void OnUsePortal(AWTLCharacter* Character);                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPortal.MoveToLocation
	void MoveToLocation(AWTLCharacter* Character, EWTLPortalActionResult& Result);                                           // [0x18e29f0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/WTL.WTLPortalStation
/// Size: 0x00F0 (0x0002B0 - 0x0003A0)
class AWTLPortalStation : public AWTLPortal
{ 
public:
	TArray<int32_t>                                    EnergyModuleIDs;                                            // 0x02B0   (0x0010)  
	TArray<FWTLPortalStationWay>                       Ways;                                                       // 0x02C0   (0x0010)  
	float                                              RequestLifespan;                                            // 0x02D0   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x02D4   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        PortalFXEvent;                                              // 0x02D8   (0x0028)  
	unsigned char                                      UnknownData01_5[0x88];                                      // 0x0300   (0x0088)  MISSED
	UBoxComponent*                                     PortalZoneComponent;                                        // 0x0388   (0x0008)  
	UParticleSystemComponent*                          PortalFXComponent;                                          // 0x0390   (0x0008)  
	UFMODAudioComponent*                               PortalAudioEffectsComponent;                                // 0x0398   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLPortalStation.TravelCharacterByWay
	void TravelCharacterByWay(AWTLCharacter* Character, int32_t WayIndex);                                                   // [0x18e2f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLPortalStation.OnPortalZoneBeginOverlap
	void OnPortalZoneBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18e34d0] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLPortalStation.K2_SubmitTeleportRequest
	void K2_SubmitTeleportRequest(int32_t WayIndex);                                                                         // [0x18e2dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLPortalStation.K2_RejectTeleportRequest
	void K2_RejectTeleportRequest();                                                                                         // [0x18e2da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLPortalStation.GetRouteIsAvailable
	bool GetRouteIsAvailable(int32_t WayIndex);                                                                              // [0x18e2e90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLPortalStation.GetMaxEnergyConsumption
	int32_t GetMaxEnergyConsumption();                                                                                       // [0x18e3340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLPortalStation.GetEnergyConsumptionForWay
	int32_t GetEnergyConsumptionForWay(AWTLCharacter* Character, int32_t WayIndex);                                          // [0x18e3360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLPortalStation.CharacterCanTravelByWay
	bool CharacterCanTravelByWay(AWTLCharacter* Character, int32_t WayIndex, FText& Description);                            // [0x18e30f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLPortalStation.BPOnUse
	void BPOnUse(AWTLCharacter* Character);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPortalStation.BPOnTeleportWaySubmitted
	void BPOnTeleportWaySubmitted(FWTLPortalStationWay SelectedWay, float Timeout);                                          // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLPortalStation.BPOnTeleportWayRejected
	void BPOnTeleportWayRejected();                                                                                          // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLPortalStationPanel
/// Size: 0x00B8 (0x000260 - 0x000318)
class UWTLPortalStationPanel : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0260   (0x0010)  MISSED
	UTextBlock*                                        tbDestinationInfo;                                          // 0x0270   (0x0008)  
	UTextBlock*                                        tbDestinationName;                                          // 0x0278   (0x0008)  
	UTextBlock*                                        tbCountDown;                                                // 0x0280   (0x0008)  
	UTextBlock*                                        tbErrorInfo;                                                // 0x0288   (0x0008)  
	UButton*                                           btnTeleport;                                                // 0x0290   (0x0008)  
	UButton*                                           btnRejectTeleport;                                          // 0x0298   (0x0008)  
	UButton*                                           btnErrorPanelBack;                                          // 0x02A0   (0x0008)  
	UButton*                                           btnUnavailableRoutePanelBack;                               // 0x02A8   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay0;                                                    // 0x02B0   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay1;                                                    // 0x02B8   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay2;                                                    // 0x02C0   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay3;                                                    // 0x02C8   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay4;                                                    // 0x02D0   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay5;                                                    // 0x02D8   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay6;                                                    // 0x02E0   (0x0008)  
	UWTLPortalStationPanelWayButton*                   btnWay7;                                                    // 0x02E8   (0x0008)  
	UProgressBar*                                      pbEnergyConsumption;                                        // 0x02F0   (0x0008)  
	UTextBlock*                                        tbEnergyForTravel;                                          // 0x02F8   (0x0008)  
	UTextBlock*                                        tbEnergyConsumptionLabel;                                   // 0x0300   (0x0008)  
	UWidgetSwitcher*                                   wsPageSwitcher;                                             // 0x0308   (0x0008)  
	UClass*                                            WayButtonWidgetClass;                                       // 0x0310   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLPortalStationPanel.SubmitWay
	void SubmitWay();                                                                                                        // [0x18e3b90] Final|Native|Public  
	// Function /Script/WTL.WTLPortalStationPanel.RejectWay
	void RejectWay();                                                                                                        // [0x18e3b50] Final|Native|Public  
	// Function /Script/WTL.WTLPortalStationPanel.OnClientRequestTimeout
	void OnClientRequestTimeout();                                                                                           // [0x18e3b00] Final|Native|Public  
	// Function /Script/WTL.WTLPortalStationPanel.OnCanNotTeleportCharacter
	void OnCanNotTeleportCharacter(FText ErrorInfo);                                                                         // [0x18e3db0] Final|Native|Private 
	// Function /Script/WTL.WTLPortalStationPanel.Init
	void Init(TArray<FWTLPortalStationWay>& Ways, AWTLPortalStation* PortalStation);                                         // [0x18e3bd0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLPortalStationPanel.GetPortalStation
	AWTLPortalStation* GetPortalStation();                                                                                   // [0x18e3bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLPortalStationPanel.CloseUnavailableRouteMessage
	void CloseUnavailableRouteMessage();                                                                                     // [0x18e3b00] Final|Native|Public  
	// Function /Script/WTL.WTLPortalStationPanel.CloseErrorMessage
	void CloseErrorMessage();                                                                                                // [0x18e3b00] Final|Native|Public  
};

/// Class /Script/WTL.WTLPortalStationPanelWayButton
/// Size: 0x0018 (0x000260 - 0x000278)
class UWTLPortalStationPanelWayButton : public UUserWidget
{ 
public:
	int32_t                                            PortalID;                                                   // 0x0260   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0264   (0x0004)  MISSED
	UButton*                                           btnTeleportWay;                                             // 0x0268   (0x0008)  
	UTextBlock*                                        tbWayName;                                                  // 0x0270   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLPortalStationPanelWayButton.OnButtonPressed
	void OnButtonPressed();                                                                                                  // [0x18e4190] Final|Native|Private 
};

/// Class /Script/WTL.WTLStash
/// Size: 0x0100 (0x000398 - 0x000498)
class AWTLStash : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0398   (0x0010)  MISSED
	FWTLStorageContent                                 m_StorageContent;                                           // 0x03A8   (0x00A8)  
	unsigned char                                      UnknownData01_5[0x28];                                      // 0x0450   (0x0028)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0478   (0x0008)  
	EWTLLocationStorageType                            LocationStorageType;                                        // 0x0480   (0x0001)  
	bool                                               AutoRemoveIfEmpty;                                          // 0x0481   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0482   (0x0006)  MISSED
	TArray<FWTLBPIdentityItemType>                     GiftItemsInfo;                                              // 0x0488   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLStash.OnStorageContentChanged
	void OnStorageContentChanged(FWTLStorageContent& StorageContent);                                                        // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLStash.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x192bab0] Final|Native|Private 
};

/// Class /Script/WTL.WTLPremiumStash
/// Size: 0x0008 (0x000498 - 0x0004A0)
class AWTLPremiumStash : public AWTLStash
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0498   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLProjectileLauncher
/// Size: 0x0060 (0x0003D8 - 0x000438)
class AWTLProjectileLauncher : public AWTLWeapon
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x03D8   (0x0008)  MISSED
	float                                              ThrowRandomConeAngle;                                       // 0x03E0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x03E4   (0x0004)  MISSED
	FItemAnimationSet                                  ThrowSequenceSet;                                           // 0x03E8   (0x0018)  
	TWeakObjectPtr<UClass*>                            ProjectileClass;                                            // 0x0400   (0x0028)  
	float                                              MainThrowSpeed;                                             // 0x0428   (0x0004)  
	FRotator                                           MainThrowRotationOffset;                                    // 0x042C   (0x000C)  


	/// Functions
	// Function /Script/WTL.WTLProjectileLauncher.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17db590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLProjectileLauncher.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17db5c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLProjectileLauncher.NetMulticast_OnStopUse
	void NetMulticast_OnStopUse();                                                                                           // [0x18e4530] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLProjectileLauncher.NetMulticast_OnStartUse
	void NetMulticast_OnStartUse();                                                                                          // [0x18e4550] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/WTL.WTLProjectileMovementComponent
/// Size: 0x0010 (0x0001D0 - 0x0001E0)
class UWTLProjectileMovementComponent : public UProjectileMovementComponent
{ 
public:
	bool                                               bHandleDeflection;                                          // 0x01D0   (0x0001)  
	unsigned char                                      UnknownData00_6[0xF];                                       // 0x01D1   (0x000F)  MISSED
};

/// Class /Script/WTL.WTLQuestMiningZone
/// Size: 0x0008 (0x0002F0 - 0x0002F8)
class AWTLQuestMiningZone : public AWTLMiningZone
{ 
public:
	int32_t                                            QuestID;                                                    // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02F4   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLQuestObject
/// Size: 0x0010 (0x000220 - 0x000230)
class AWTLQuestObject : public AActor
{ 
public:
	USphereComponent*                                  SphereComponent;                                            // 0x0220   (0x0008)  
	char                                               m_State;                                                    // 0x0228   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLQuestObject.ShowCharacterActionTimerWidget
	void ShowCharacterActionTimerWidget(AWTLCharacter* Character, float Timeout, EWTLActionTimerWidgetType Type, EWTLCountdownSliderWidgetFillingType Direction); // [0x19181e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.SetQuestState
	void SetQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState State, EWTLQuestCheckResult& Result);       // [0x1918f70] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.OnRep_ChangeState
	void OnRep_ChangeState();                                                                                                // [0x19195b0] Final|Native|Public  
	// Function /Script/WTL.WTLQuestObject.OnChangeState
	void OnChangeState(char Value);                                                                                          // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLQuestObject.HideCharacterActionTimerWidget
	void HideCharacterActionTimerWidget(AWTLCharacter* Character, bool Success);                                             // [0x1918060] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.GetQuestState
	void GetQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState& QuestState);                               // [0x19191d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.CharacterTakeQuest
	void CharacterTakeQuest(AWTLCharacter* Character, int32_t QuestID, EWTLQuestCheckResult& Result);                        // [0x1918490] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.CharacterCompleteQuest
	void CharacterCompleteQuest(AWTLCharacter* Character, int32_t QuestID, EWTLQuestCheckResult& Result);                    // [0x1918490] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.CharacterCanTakeQuest
	void CharacterCanTakeQuest(AWTLCharacter* Character, int32_t QuestID, EWTLQuestCheckResult& Result);                     // [0x1918880] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObject.CharacterCanCompleteQuest
	void CharacterCanCompleteQuest(AWTLCharacter* Character, int32_t QuestID, EWTLQuestCheckResult& Result);                 // [0x1918670] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/WTL.WTLQuestObjectAchievement
/// Size: 0x0018 (0x000220 - 0x000238)
class AWTLQuestObjectAchievement : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	TArray<FWTLQuestAchievements>                      QuestAchievements;                                          // 0x0228   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLQuestObjectAchievement.UpdateMeshAchievement
	void UpdateMeshAchievement();                                                                                            // [0x1919ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObjectAchievement.HideAllMeshes
	void HideAllMeshes();                                                                                                    // [0x1919b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLQuestObjectAchievement.GetQuestStates
	void GetQuestStates(TArray<FWTLQuestState>& OutQuestStates);                                                             // [0x1919bc0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/WTL.WTLQuestObjectForAction
/// Size: 0x0008 (0x000260 - 0x000268)
class AWTLQuestObjectForAction : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0260   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLQuestObjectSpawner
/// Size: 0x0098 (0x000260 - 0x0002F8)
class AWTLQuestObjectSpawner : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0260   (0x0028)  MISSED
	USceneComponent*                                   ObjectRootComponent;                                        // 0x0288   (0x0008)  
	UBoxComponent*                                     BoxComponent;                                               // 0x0290   (0x0008)  
	UStaticMeshComponent*                              Mesh;                                                       // 0x0298   (0x0008)  
	FText                                              DisplayName;                                                // 0x02A0   (0x0018)  
	TArray<int32_t>                                    QuestIDs;                                                   // 0x02B8   (0x0010)  
	EWTLItemType                                       ItemType;                                                   // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02C9   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x02CC   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x02D0   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x02D4   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x02D8   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x02DC   (0x0004)  
	float                                              MinSpawnDelay;                                              // 0x02E0   (0x0004)  
	float                                              MaxSpawnDelay;                                              // 0x02E4   (0x0004)  
	bool                                               AllowTakeOnlyOnce;                                          // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x02E9   (0x0003)  MISSED
	int32_t                                            Count;                                                      // 0x02EC   (0x0004)  
	int32_t                                            Condition;                                                  // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02F4   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLQuestObjectSpawner.OnRep_CurrentState
	void OnRep_CurrentState();                                                                                               // [0x191b270] Final|Native|Private 
	// Function /Script/WTL.WTLQuestObjectSpawner.NetMulticast_CharacterUseItem
	void NetMulticast_CharacterUseItem(uint64_t CharacterID);                                                                // [0x191b0d0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLQuestObjectSpawner.BPOnTakeItem
	void BPOnTakeItem(AWTLCharacter* Character);                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLQuestObjectSpawner.BPOnStartInteraction
	void BPOnStartInteraction(AWTLCharacter* Character);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLQuestObjectSpawner.BPOnFinishInteraction
	void BPOnFinishInteraction(AWTLCharacter* Character, bool Success);                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLQuestObjectSpawner.BPIsRelevantForCharacterQuestState
	bool BPIsRelevantForCharacterQuestState(AWTLCharacter* Character);                                                       // [0x191b000] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/WTL.WTLQuestSystem
/// Size: 0x0068 (0x000028 - 0x000090)
class UWTLQuestSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x68];                                      // 0x0028   (0x0068)  MISSED
};

/// Class /Script/WTL.WTLQuestTutorialVolume
/// Size: 0x0028 (0x000258 - 0x000280)
class AWTLQuestTutorialVolume : public AVolume
{ 
public:
	int32_t                                            QuestID;                                                    // 0x0258   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x025C   (0x0004)  MISSED
	TArray<int32_t>                                    TutorialMessageIDs;                                         // 0x0260   (0x0010)  
	TArray<EWTLTutorialMessage>                        TutorialMessages;                                           // 0x0270   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLQuestTutorialVolume.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLRadialForceComponent
/// Size: 0x0000 (0x000230 - 0x000230)
class UWTLRadialForceComponent : public URadialForceComponent
{ 
public:
};

/// Class /Script/WTL.WTLRadialMenuInstigatorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLRadialMenuInstigatorInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLRadio
/// Size: 0x0010 (0x000220 - 0x000230)
class AWTLRadio : public AActor
{ 
public:
	UStaticMeshComponent*                              Mesh;                                                       // 0x0220   (0x0008)  
	UFMODAudioComponent*                               AudioComponent;                                             // 0x0228   (0x0008)  
};

/// Class /Script/WTL.WTLRadioBomb
/// Size: 0x0098 (0x000268 - 0x000300)
class AWTLRadioBomb : public AWTLTacticalStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0268   (0x0008)  MISSED
	bool                                               IsDebug;                                                    // 0x0270   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0271   (0x0007)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0278   (0x0008)  
	UStaticMeshComponent*                              DamageZoneMesh;                                             // 0x0280   (0x0008)  
	TWeakObjectPtr<UClass*>                            ExplosionFX;                                                // 0x0288   (0x0028)  
	float                                              HearingDamageDuration;                                      // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02B4   (0x0004)  MISSED
	UClass*                                            DeminingActivityAsset;                                      // 0x02B8   (0x0008)  
	FRotator                                           ExplosionAdditionalRotation;                                // 0x02C0   (0x000C)  
	char                                               FriendBombOutline;                                          // 0x02CC   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02CD   (0x0003)  MISSED
	AWTLDeminingActivity*                              m_Activity;                                                 // 0x02D0   (0x0008)  
	bool                                               m_bSpawnExplosion;                                          // 0x02D8   (0x0001)  
	bool                                               m_bActivated;                                               // 0x02D9   (0x0001)  
	bool                                               m_bCharacterInPVP;                                          // 0x02DA   (0x0001)  
	unsigned char                                      UnknownData04_5[0x9];                                       // 0x02DB   (0x0009)  MISSED
	EWTLFaction                                        m_Faction;                                                  // 0x02E4   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x02E5   (0x0003)  MISSED
	FString                                            m_OwnerName;                                                // 0x02E8   (0x0010)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x02F8   (0x0008)  MISSED


	/// Functions
	// Function /Script/WTL.WTLRadioBomb.OnRep_SpawnExplosion
	void OnRep_SpawnExplosion();                                                                                             // [0x191c340] Final|Native|Private 
	// Function /Script/WTL.WTLRadioBomb.OnRep_Activated
	void OnRep_Activated();                                                                                                  // [0x191c1c0] Final|Native|Private 
	// Function /Script/WTL.WTLRadioBomb.OnRemainingTimerChanged
	void OnRemainingTimerChanged(float Time);                                                                                // [0x191c230] Final|Native|Private 
	// Function /Script/WTL.WTLRadioBomb.OnGiveDeminedItemToCharacter
	void OnGiveDeminedItemToCharacter(AWTLCharacter* Character);                                                             // [0x17941a0] Final|Native|Private 
	// Function /Script/WTL.WTLRadioBomb.OnActivate
	void OnActivate();                                                                                                       // [0xe77850] Final|Native|Public  
	// Function /Script/WTL.WTLRadioBomb.K2_ProccessExplosion
	void K2_ProccessExplosion();                                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRadioBomb.K2_OnActivated
	void K2_OnActivated();                                                                                                   // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/WTL.WTLRainRemoverVolume
/// Size: 0x0008 (0x000258 - 0x000260)
class AWTLRainRemoverVolume : public AVolume
{ 
public:
	EWTLRainAudioRemoveMethod                          AudioRemoveMethod;                                          // 0x0258   (0x0001)  
	bool                                               bRemoveParticles;                                           // 0x0259   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x025A   (0x0006)  MISSED
};

/// Class /Script/WTL.WTLRandomPointsMiningZone
/// Size: 0x0058 (0x0002F0 - 0x000348)
class AWTLRandomPointsMiningZone : public AWTLMiningZone
{ 
public:
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x02F0   (0x0038)  MISSED
	int32_t                                            MiningPointsCount;                                          // 0x0328   (0x0004)  
	float                                              GeneratedPointsCountMultiplier;                             // 0x032C   (0x0004)  
	float                                              MinPointGenerationTimeout;                                  // 0x0330   (0x0004)  
	float                                              MaxPointGenerationTimeout;                                  // 0x0334   (0x0004)  
	float                                              MinPointCapacity;                                           // 0x0338   (0x0004)  
	float                                              MaxPointCapacity;                                           // 0x033C   (0x0004)  
	float                                              MinPointRadius;                                             // 0x0340   (0x0004)  
	float                                              MaxPointRadius;                                             // 0x0344   (0x0004)  
};

/// Class /Script/WTL.WTLRangedWeapon
/// Size: 0x0628 (0x0003D8 - 0x000A00)
class AWTLRangedWeapon : public AWTLWeapon
{ 
public:
	EWTLWeaponState                                    m_CurrentState;                                             // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData00_5[0xF];                                       // 0x03D9   (0x000F)  MISSED
	int32_t                                            m_CurrentFireModeIndex;                                     // 0x03E8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x98];                                      // 0x03EC   (0x0098)  MISSED
	bool                                               m_InterruptLoadingReceived;                                 // 0x0484   (0x0001)  
	unsigned char                                      UnknownData02_5[0x103];                                     // 0x0485   (0x0103)  MISSED
	uint16_t                                           m_MuzzleAttachmentTypeID;                                   // 0x0588   (0x0002)  
	uint16_t                                           m_FlashlightAttachmentTypeID;                               // 0x058A   (0x0002)  
	uint16_t                                           m_ScopeAttachmentTypeID;                                    // 0x058C   (0x0002)  
	char                                               m_CustomizationScalar;                                      // 0x058E   (0x0001)  
	char                                               m_CustomizationColor;                                       // 0x058F   (0x0001)  
	uint16_t                                           m_CurrentAmmoID;                                            // 0x0590   (0x0002)  
	char                                               m_HandlingAnimationType;                                    // 0x0592   (0x0001)  
	unsigned char                                      UnknownData03_5[0x45];                                      // 0x0593   (0x0045)  MISSED
	UWTLWeaponAttachment*                              MuzzleAttachment;                                           // 0x05D8   (0x0008)  
	UStaticMeshComponent*                              MuzzleMount;                                                // 0x05E0   (0x0008)  
	UWTLWeaponAttachment*                              FlashlightAttachment;                                       // 0x05E8   (0x0008)  
	UStaticMeshComponent*                              FlashlightMount;                                            // 0x05F0   (0x0008)  
	UWTLWeaponAttachment*                              ScopeAttachment;                                            // 0x05F8   (0x0008)  
	UStaticMeshComponent*                              ScopeMount;                                                 // 0x0600   (0x0008)  
	UFMODAudioComponent*                               AutomaticFireAudioComponent;                                // 0x0608   (0x0008)  
	UParticleSystemComponent*                          AmmoCaseParticleComponent;                                  // 0x0610   (0x0008)  
	UMaterialBillboardComponent*                       ScopeFlareComponent;                                        // 0x0618   (0x0008)  
	UMaterialInterface*                                m_FlareMaterial;                                            // 0x0620   (0x0008)  
	UCurveFloat*                                       m_FlareIntensityDetectionCurve;                             // 0x0628   (0x0008)  
	UMaterialInstanceDynamic*                          m_FlareMaterialInstance;                                    // 0x0630   (0x0008)  
	TArray<EWTLFireMode>                               FireModes;                                                  // 0x0638   (0x0010)  
	float                                              StandSpreadMultiplier;                                      // 0x0648   (0x0004)  
	float                                              CrouchSpreadMultiplier;                                     // 0x064C   (0x0004)  
	float                                              ProneSpreadMultiplier;                                      // 0x0650   (0x0004)  
	float                                              WalkSpreadMultiplier;                                       // 0x0654   (0x0004)  
	float                                              SprintSpreadMultiplier;                                     // 0x0658   (0x0004)  
	float                                              AimSpreadMultiplier;                                        // 0x065C   (0x0004)  
	bool                                               CanInterruptLoading;                                        // 0x0660   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0661   (0x0003)  MISSED
	int32_t                                            PreInstalledScopeStuffID;                                   // 0x0664   (0x0004)  
	int32_t                                            PreInstalledMuzzleStuffID;                                  // 0x0668   (0x0004)  
	int32_t                                            PreInstalledFlashlightStuffID;                              // 0x066C   (0x0004)  
	float                                              BaseRecoilTranslation;                                      // 0x0670   (0x0004)  
	float                                              AdditionalRecoilTranslation;                                // 0x0674   (0x0004)  
	FRotator                                           MinRecoilRotation;                                          // 0x0678   (0x000C)  
	FRotator                                           MaxRecoilRotation;                                          // 0x0684   (0x000C)  
	float                                              RecoilTranslationInterpolateSpeed;                          // 0x0690   (0x0004)  
	float                                              RecoilRotationInterpolateSpeed;                             // 0x0694   (0x0004)  
	float                                              AimingRecoilTranslationInterpolateSpeed;                    // 0x0698   (0x0004)  
	float                                              AimingRecoilRotationInterpolateSpeed;                       // 0x069C   (0x0004)  
	float                                              AimingRecoilMultiplier;                                     // 0x06A0   (0x0004)  
	float                                              CrouchRecoilMultiplier;                                     // 0x06A4   (0x0004)  
	float                                              ProneRecoilMultiplier;                                      // 0x06A8   (0x0004)  
	float                                              RecoilSafePauseBetweenUse;                                  // 0x06AC   (0x0004)  
	float                                              MaxRecoilAccuracyDelta;                                     // 0x06B0   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x06B4   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            RecoilCameraShake;                                          // 0x06B8   (0x0028)  
	float                                              RecoilCameraShakeScale;                                     // 0x06E0   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x06E4   (0x0004)  MISSED
	UCurveVector*                                      RecoilCurve;                                                // 0x06E8   (0x0008)  
	float                                              RecoilValueMultiplierMin;                                   // 0x06F0   (0x0004)  
	float                                              RecoilValueMultiplierMax;                                   // 0x06F4   (0x0004)  
	float                                              RecoilSpeedMultiplier;                                      // 0x06F8   (0x0004)  
	bool                                               NeedToReplaceReloadMontage;                                 // 0x06FC   (0x0001)  
	bool                                               CrosshairIsAlwaysHidden;                                    // 0x06FD   (0x0001)  
	unsigned char                                      UnknownData07_5[0x2];                                       // 0x06FE   (0x0002)  MISSED
	FRotator                                           AdditionalSpawnRotation;                                    // 0x0700   (0x000C)  
	unsigned char                                      UnknownData08_5[0x1C];                                      // 0x070C   (0x001C)  MISSED
	FItemAnimationSet                                  FireSequenceSet;                                            // 0x0728   (0x0018)  
	FItemAnimationSet                                  LastFireSequenceSet;                                        // 0x0740   (0x0018)  
	FItemAnimationSet                                  ReloadSequenceSet;                                          // 0x0758   (0x0018)  
	FItemAnimationSet                                  ProReloadSequenceSet;                                       // 0x0770   (0x0018)  
	FItemAnimationSet                                  LoadSequenceSet;                                            // 0x0788   (0x0018)  
	FItemAnimationSet                                  ProLoadSequenceSet;                                         // 0x07A0   (0x0018)  
	TWeakObjectPtr<UFMODEvent*>                        NormalFireSoundEvent;                                       // 0x07B8   (0x0028)  
	float                                              NormalFireSoundNoiseRadius;                                 // 0x07E0   (0x0004)  
	float                                              NormalFireSoundNoiseLoudness;                               // 0x07E4   (0x0004)  
	FName                                              NormalFireSoundNoiseName;                                   // 0x07E8   (0x0008)  
	TWeakObjectPtr<UParticleSystem*>                   NormalFireParticles;                                        // 0x07F0   (0x0028)  
	FVector                                            NormalFireParticlesScale;                                   // 0x0818   (0x000C)  
	unsigned char                                      UnknownData09_5[0x4];                                       // 0x0824   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        MuzzleBrakeFireSoundEvent;                                  // 0x0828   (0x0028)  
	float                                              MuzzleBrakeFireSoundNoiseRadius;                            // 0x0850   (0x0004)  
	float                                              MuzzleBrakeFireSoundNoiseLoudness;                          // 0x0854   (0x0004)  
	FName                                              MuzzleBrakeFireSoundNoiseName;                              // 0x0858   (0x0008)  
	TWeakObjectPtr<UParticleSystem*>                   MuzzleBrakeFireParticles;                                   // 0x0860   (0x0028)  
	FVector                                            MuzzleBrakeFireParticlesScale;                              // 0x0888   (0x000C)  
	unsigned char                                      UnknownData10_5[0x4];                                       // 0x0894   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        SilencerFireSoundEvent;                                     // 0x0898   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        LastShotsAdditionalSoundEvent;                              // 0x08C0   (0x0028)  
	float                                              SilencerFireSoundNoiseRadius;                               // 0x08E8   (0x0004)  
	float                                              SilencerFireSoundNoiseLoudness;                             // 0x08EC   (0x0004)  
	FName                                              SilencerFireSoundNoiseName;                                 // 0x08F0   (0x0008)  
	TWeakObjectPtr<UParticleSystem*>                   SilencerFireParticles;                                      // 0x08F8   (0x0028)  
	FVector                                            SilencerFireParticlesScale;                                 // 0x0920   (0x000C)  
	unsigned char                                      UnknownData11_5[0x4];                                       // 0x092C   (0x0004)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        DryFireSoundEvent;                                          // 0x0930   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        AutomaticFireSoundEvent;                                    // 0x0958   (0x0028)  
	float                                              AimingFOV;                                                  // 0x0980   (0x0004)  
	float                                              AimingTurnRateMultiplier;                                   // 0x0984   (0x0004)  
	float                                              AimingLookUpRateMultiplier;                                 // 0x0988   (0x0004)  
	float                                              NormalIdentificationTraceRange;                             // 0x098C   (0x0004)  
	float                                              AimingIdentificationTraceRange;                             // 0x0990   (0x0004)  
	float                                              MaxVerticalHandsShaking;                                    // 0x0994   (0x0004)  
	float                                              MaxHorizontalHandsShaking;                                  // 0x0998   (0x0004)  
	float                                              HandsShakingSpeed;                                          // 0x099C   (0x0004)  
	float                                              VingettePerShootAmount;                                     // 0x09A0   (0x0004)  
	float                                              VingetteLimit;                                              // 0x09A4   (0x0004)  
	FVector                                            NormalCameraOffsetMale;                                     // 0x09A8   (0x000C)  
	FVector                                            AimingCameraOffsetMale;                                     // 0x09B4   (0x000C)  
	FVector                                            NormalCameraOffsetFemale;                                   // 0x09C0   (0x000C)  
	FVector                                            AimingCameraOffsetFemale;                                   // 0x09CC   (0x000C)  
	FVector                                            AimingHandsTranslationMale;                                 // 0x09D8   (0x000C)  
	FVector                                            AimingHandsTranslationFemale;                               // 0x09E4   (0x000C)  
	bool                                               UseOnlyFullReloading;                                       // 0x09F0   (0x0001)  
	unsigned char                                      UnknownData12_6[0xF];                                       // 0x09F1   (0x000F)  MISSED


	/// Functions
	// Function /Script/WTL.WTLRangedWeapon.Server_StopUseNew
	void Server_StopUseNew(char DoneActionCount, char MagazineAmmoCount);                                                    // [0x191e050] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x191e1f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x191e250] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_SpawnGrenadeLauncherProjectile
	void Server_SpawnGrenadeLauncherProjectile(FTransform SpawnTransform);                                                   // [0x191d240] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_SetFireModeIndex
	void Server_SetFireModeIndex(char FireModeIndex);                                                                        // [0x191cfe0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_SetAmmoCount
	void Server_SetAmmoCount(char ClientAmmoCount);                                                                          // [0x191ddd0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_OnUnload
	void Server_OnUnload();                                                                                                  // [0x191d5e0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_OnReload
	void Server_OnReload(bool bChangeAmmoItem, char ClientMagazineAmmoCount);                                                // [0x191d640] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_OnLoad
	void Server_OnLoad(uint64_t AmmoItemID);                                                                                 // [0x191d4d0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_InterruptLoading
	void Server_InterruptLoading();                                                                                          // [0x191d450] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.Server_ChangeAmmoItem
	void Server_ChangeAmmoItem();                                                                                            // [0x191d3f0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRangedWeapon.PostReload
	void PostReload();                                                                                                       // [0x191d4b0] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnRep_InterruptLoadingReceived
	void OnRep_InterruptLoadingReceived();                                                                                   // [0x191d930] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnRep_FireModeIndex
	void OnRep_FireModeIndex();                                                                                              // [0x191d910] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnRep_Customization
	void OnRep_Customization();                                                                                              // [0x191d970] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnRep_CurrentState
	void OnRep_CurrentState(EWTLWeaponState Previous);                                                                       // [0x191d7f0] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnRep_CurrentAmmoID
	void OnRep_CurrentAmmoID();                                                                                              // [0x191d950] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnRep_AttachmentTypeIDs
	void OnRep_AttachmentTypeIDs();                                                                                          // [0x191d990] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.OnMontageEnded
	void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);                                                           // [0x191d0e0] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.NetMulticast_OnStopFire
	void NetMulticast_OnStopFire();                                                                                          // [0x191ded0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRangedWeapon.NetMulticast_OnStartFire
	void NetMulticast_OnStartFire(char FireModeIndex, bool FireLast);                                                        // [0x191def0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRangedWeapon.NetMulticast_OnReload
	void NetMulticast_OnReload(uint64_t AmmoItemID, bool bIsFullReload, char CountToReload, int32_t CurrentAmmoCount, uint16_t CurrentAmmoID); // [0x191dac0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRangedWeapon.NetMulticast_OnApplyWeaponAttachments
	void NetMulticast_OnApplyWeaponAttachments();                                                                            // [0x191d9d0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRangedWeapon.NetMulticast_OnApplyCustomization
	void NetMulticast_OnApplyCustomization();                                                                                // [0x191d9b0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRangedWeapon.ClientActionFinished
	void ClientActionFinished();                                                                                             // [0x191d3d0] Final|Native|Private 
	// Function /Script/WTL.WTLRangedWeapon.Client_UpdateAmmoItemReference
	void Client_UpdateAmmoItemReference();                                                                                   // [0x1851d60] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLRangedWeapon.Client_SetPrivateAmmoCount
	void Client_SetPrivateAmmoCount(char AmmoValue);                                                                         // [0x191e2b0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLRangedWeapon.Client_OnStopUse
	void Client_OnStopUse(char CurrentMagazineAmmoCount, int32_t CurrentAmmoCount);                                          // [0x191ce80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLRangedWeapon.Client_OnPostReload
	void Client_OnPostReload(char AmmoCount);                                                                                // [0x191d9f0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/WTL.WTLRangedWeapon.Client_AffectedByEMP
	void Client_AffectedByEMP(float EffectTime);                                                                             // [0x191cdb0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLRangedWeapon.BPTakeInArms
	void BPTakeInArms(bool IsLoaded, int32_t AmmoID);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRangedWeapon.BPReloading
	void BPReloading(int32_t AmmoItemID);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRangedWeapon.BPGetNewReloadMontagePawn
	UAnimMontage* BPGetNewReloadMontagePawn(int32_t AmmoID);                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRangedWeapon.BPGetNewReloadMontage
	UAnimMontage* BPGetNewReloadMontage(int32_t AmmoID);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRangedWeapon.BPGetCurrentAmmoID
	int32_t BPGetCurrentAmmoID();                                                                                            // [0x191cd70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRangedWeapon.BPClientStartUse
	void BPClientStartUse();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLRankSystem
/// Size: 0x0018 (0x000028 - 0x000040)
class UWTLRankSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLRecastNavMeshLarge
/// Size: 0x0000 (0x0004D8 - 0x0004D8)
class AWTLRecastNavMeshLarge : public ARecastNavMesh
{ 
public:
};

/// Class /Script/WTL.WTLRefHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLRefHelper : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLRepairItem
/// Size: 0x0090 (0x000458 - 0x0004E8)
class AWTLRepairItem : public AWTLStuff
{ 
public:
	float                                              ReplicatedEnergyValue;                                      // 0x0458   (0x0004)  
	unsigned char                                      UnknownData00_5[0x24];                                      // 0x045C   (0x0024)  MISSED
	float                                              HitDistance;                                                // 0x0480   (0x0004)  
	float                                              DistanceToSpawnDecal;                                       // 0x0484   (0x0004)  
	float                                              MeleeHitDistance;                                           // 0x0488   (0x0004)  
	float                                              SphereRadius;                                               // 0x048C   (0x0004)  
	int32_t                                            RepairPerUse;                                               // 0x0490   (0x0004)  
	float                                              EnergyPerUse;                                               // 0x0494   (0x0004)  
	int32_t                                            IdleUse;                                                    // 0x0498   (0x0004)  
	float                                              MinRepairPercentToGetExp;                                   // 0x049C   (0x0004)  
	float                                              ExperienceMultiplier;                                       // 0x04A0   (0x0004)  
	float                                              BurningEffectValuePerUse;                                   // 0x04A4   (0x0004)  
	float                                              BurningEffectMaxValue;                                      // 0x04A8   (0x0004)  
	float                                              ReputationDelta;                                            // 0x04AC   (0x0004)  
	TArray<UMaterialInstance*>                         Decals;                                                     // 0x04B0   (0x0010)  
	FVector                                            DecalSize;                                                  // 0x04C0   (0x000C)  
	float                                              DecalsLifeSpan;                                             // 0x04CC   (0x0004)  
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x04D0   (0x0010)  
	TEnumAsByte<ETraceTypeQuery>                       CollisionTraceQuery;                                        // 0x04E0   (0x0001)  
	bool                                               bSetEffects;                                                // 0x04E1   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x04E2   (0x0006)  MISSED


	/// Functions
	// Function /Script/WTL.WTLRepairItem.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x17db590] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRepairItem.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x17db5c0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLRepairItem.Server_RepairHit
	void Server_RepairHit(FHitResult HitResult);                                                                             // [0x191ff60] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLRepairItem.OnRep_SetEffects
	void OnRep_SetEffects();                                                                                                 // [0x191fdf0] Final|Native|Public  
	// Function /Script/WTL.WTLRepairItem.OnRep_EnergyValue
	void OnRep_EnergyValue();                                                                                                // [0x191fd60] Final|Native|Public  
	// Function /Script/WTL.WTLRepairItem.NetMulticast_SpawnDecal
	void NetMulticast_SpawnDecal(FVector_NetQuantize Location, FRotator Rotator, UPrimitiveComponent* Component);            // [0x1920070] Final|Net|Native|Event|NetMulticast|Private|HasDefaults 
	// Function /Script/WTL.WTLRepairItem.NetMulticast_OnUse
	void NetMulticast_OnUse(EWTLUsableItemUseType UseType);                                                                  // [0x19202a0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRepairItem.NetMulticast_OnStopUse
	void NetMulticast_OnStopUse();                                                                                           // [0x1920280] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLRepairItem.Client_SetEnergyOnMaterial
	void Client_SetEnergyOnMaterial();                                                                                       // [0x191fd60] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLRepairItem.Client_EffectsUnderWater
	void Client_EffectsUnderWater();                                                                                         // [0x191fdb0] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLRepairItem.Client_Charge
	void Client_Charge(float Value);                                                                                         // [0x191fc60] Net|Native|Event|Public|NetClient 
	// Function /Script/WTL.WTLRepairItem.BPSetEnergyValueOnMaterial
	void BPSetEnergyValueOnMaterial(float Energy);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRepairItem.BPRepairEffects
	void BPRepairEffects();                                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRepairItem.BPEffectsUnderWater
	void BPEffectsUnderWater();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRepairItem.BPDeactivateRepairEffects
	void BPDeactivateRepairEffects();                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRepairItem.BPChargeItem
	void BPChargeItem(float Value);                                                                                          // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLReplicationGraph
/// Size: 0x0120 (0x0004A0 - 0x0005C0)
class UWTLReplicationGraph : public UReplicationGraph
{ 
public:
	TArray<UClass*>                                    SpatializedClasses;                                         // 0x04A0   (0x0010)  
	TArray<UClass*>                                    NonSpatializedChildClasses;                                 // 0x04B0   (0x0010)  
	TArray<UClass*>                                    AlwaysRelevantClasses;                                      // 0x04C0   (0x0010)  
	UReplicationGraphNode_GridSpatialization2D*        GridNode;                                                   // 0x04D0   (0x0008)  
	UReplicationGraphNode_ActorList*                   AlwaysRelevantNode;                                         // 0x04D8   (0x0008)  
	unsigned char                                      UnknownData00_6[0xE0];                                      // 0x04E0   (0x00E0)  MISSED
};

/// Class /Script/WTL.WTLReplicationGraphNode_AlwaysRelevant_ForConnection
/// Size: 0x0238 (0x000050 - 0x000288)
class UWTLReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode
{ 
public:
	unsigned char                                      UnknownData00_2[0x228];                                     // 0x0050   (0x0228)  MISSED
	AActor*                                            LastPawn;                                                   // 0x0278   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0280   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLReplicationGraphNode_PlayerStateFrequencyLimiter
/// Size: 0x0030 (0x000050 - 0x000080)
class UWTLReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0050   (0x0030)  MISSED
};

/// Class /Script/WTL.WTLReputationSystem
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UWTLReputationSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0028   (0x0078)  MISSED
};

/// Class /Script/WTL.WTLReverseRainbowProjectile
/// Size: 0x0090 (0x000290 - 0x000320)
class AWTLReverseRainbowProjectile : public AWTLThrowingDeviceProjectile
{ 
public:
	UWTLRadialForceComponent*                          RadialForce;                                                // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0298   (0x0020)  MISSED
	bool                                               m_bDestroy;                                                 // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x02B9   (0x0007)  MISSED
	AActor*                                            ExplosionActor;                                             // 0x02C0   (0x0008)  
	TWeakObjectPtr<UClass*>                            ExplosionFX;                                                // 0x02C8   (0x0028)  
	float                                              DamageValue;                                                // 0x02F0   (0x0004)  
	char                                               Burst;                                                      // 0x02F4   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x02F5   (0x0003)  MISSED
	float                                              TimeBetweeBursts;                                           // 0x02F8   (0x0004)  
	float                                              ExplosionRadius;                                            // 0x02FC   (0x0004)  
	float                                              RadialForceRadiusXY;                                        // 0x0300   (0x0004)  
	float                                              RadialForceRadiusZ;                                         // 0x0304   (0x0004)  
	float                                              MaxImpulseXY;                                               // 0x0308   (0x0004)  
	float                                              MinImpulseXY;                                               // 0x030C   (0x0004)  
	float                                              ImpulseZ;                                                   // 0x0310   (0x0004)  
	float                                              MaxMonsterMassInKg;                                         // 0x0314   (0x0004)  
	uint32_t                                           m_BurstCount;                                               // 0x0318   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x031C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLReverseRainbowProjectile.OnRep_Destroy
	void OnRep_Destroy();                                                                                                    // [0x1920b30] Final|Native|Private 
	// Function /Script/WTL.WTLReverseRainbowProjectile.OnRep_Burst
	void OnRep_Burst();                                                                                                      // [0x1920af0] Final|Native|Public  
	// Function /Script/WTL.WTLReverseRainbowProjectile.NetMulticast_OnExplosion
	void NetMulticast_OnExplosion();                                                                                         // [0xe77850] Final|Net|Native|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLReverseRainbowProjectile.BPPlaySound
	void BPPlaySound();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLRichTextBlockInventoryItemDecorator
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLRichTextBlockInventoryItemDecorator : public URichTextBlockDecorator
{ 
public:
};

/// Class /Script/WTL.WTLRichTextBlockPlayerNameDecorator
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLRichTextBlockPlayerNameDecorator : public URichTextBlockDecorator
{ 
public:
};

/// Class /Script/WTL.WTLRichTextBlockInlineImageDecorator
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLRichTextBlockInlineImageDecorator : public URichTextBlockDecorator
{ 
public:
};

/// Class /Script/WTL.WTLRobotCraftStation
/// Size: 0x0168 (0x000220 - 0x000388)
class AWTLRobotCraftStation : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	bool                                               m_IsActivated;                                              // 0x0230   (0x0001)  
	bool                                               m_IsPowerOn;                                                // 0x0231   (0x0001)  
	bool                                               m_IsCrafting;                                               // 0x0232   (0x0001)  
	bool                                               m_IsWaitingSpawn;                                           // 0x0233   (0x0001)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0234   (0x0004)  MISSED
	FWTLStorageContent                                 m_StorageContent;                                           // 0x0238   (0x00A8)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0x02E0   (0x0008)  MISSED
	float                                              m_ProductionEndServerTime;                                  // 0x02E8   (0x0004)  
	int32_t                                            m_CurrentRobotCount;                                        // 0x02EC   (0x0004)  
	unsigned char                                      UnknownData03_5[0x20];                                      // 0x02F0   (0x0020)  MISSED
	FText                                              m_LocalizationDisplayText;                                  // 0x0310   (0x0018)  
	float                                              ActivationTime;                                             // 0x0328   (0x0004)  
	int32_t                                            ID;                                                         // 0x032C   (0x0004)  
	int32_t                                            RobotCraftItemID;                                           // 0x0330   (0x0004)  
	int32_t                                            MaxRobotCount;                                              // 0x0334   (0x0004)  
	AWTLGlobalLevelObject*                             GLO;                                                        // 0x0338   (0x0008)  
	AWTLMonsterSpawner*                                MonsterSpawner;                                             // 0x0340   (0x0008)  
	unsigned char                                      UnknownData04_6[0x40];                                      // 0x0348   (0x0040)  MISSED


	/// Functions
	// Function /Script/WTL.WTLRobotCraftStation.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x1921ee0] Final|Native|Private 
	// Function /Script/WTL.WTLRobotCraftStation.OnRep_ProductionEndServerTime
	void OnRep_ProductionEndServerTime();                                                                                    // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLRobotCraftStation.OnRep_MaxRobotCount
	void OnRep_MaxRobotCount();                                                                                              // [0x1921e60] Final|Native|Private 
	// Function /Script/WTL.WTLRobotCraftStation.OnRep_CurrentRobotCount
	void OnRep_CurrentRobotCount();                                                                                          // [0x1921ea0] Final|Native|Private 
	// Function /Script/WTL.WTLRobotCraftStation.K2_ShowCraftObjectWidget
	void K2_ShowCraftObjectWidget(AWTLPlayerController* PlayerController);                                                   // [0x1921bb0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_PowerOn
	void K2_PowerOn();                                                                                                       // [0x1921410] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_PowerOff
	void K2_PowerOff();                                                                                                      // [0x19213e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_LoadNeedItems
	void K2_LoadNeedItems();                                                                                                 // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_IsWaitingSpawn
	bool K2_IsWaitingSpawn();                                                                                                // [0x19217e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_IsPowerOn
	bool K2_IsPowerOn();                                                                                                     // [0x1921e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_IsEnoughResources
	bool K2_IsEnoughResources();                                                                                             // [0x1921820] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLRobotCraftStation.K2_IsCrafting
	bool K2_IsCrafting();                                                                                                    // [0x1921800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_IsActivated
	bool K2_IsActivated();                                                                                                   // [0x1921e40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetRank
	int32_t K2_GetRank();                                                                                                    // [0x1921a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetProductionTimeSeconds
	float K2_GetProductionTimeSeconds();                                                                                     // [0x1921b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetProductionTimeLeftSeconds
	float K2_GetProductionTimeLeftSeconds();                                                                                 // [0x1921b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetNameRobot
	FText K2_GetNameRobot();                                                                                                 // [0x19218b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetMonsterInfo
	FWTLMonsterItemData K2_GetMonsterInfo();                                                                                 // [0x1921850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetMinLevel
	int32_t K2_GetMinLevel();                                                                                                // [0x1921ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetMaxLevel
	int32_t K2_GetMaxLevel();                                                                                                // [0x1921a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_GetCurrentRobotCount
	int32_t K2_GetCurrentRobotCount();                                                                                       // [0x1921af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLRobotCraftStation.K2_ConvertProductionTimeToText
	FString K2_ConvertProductionTimeToText();                                                                                // [0x1921450] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_ConvertProductionTimeFromText
	void K2_ConvertProductionTimeFromText(FString Value);                                                                    // [0x19214e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_ConvertItemsToText
	FString K2_ConvertItemsToText();                                                                                         // [0x1921620] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_ConvertItemsFromText
	void K2_ConvertItemsFromText(FString Value);                                                                             // [0x19216a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.K2_CompleteProgress
	void K2_CompleteProgress();                                                                                              // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLRobotCraftStation.BPUse
	void BPUse(AWTLCharacter* Character);                                                                                    // [0x1779a60] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRobotCraftStation.BPSetHighlightState
	void BPSetHighlightState(bool Value);                                                                                    // [0x1779890] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRobotCraftStation.BPGetDisplayText
	FString BPGetDisplayText(AWTLCharacter* Character);                                                                      // [0x1779760] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLRobotCraftStation.BPCanBeUsed
	bool BPCanBeUsed(AWTLCharacter* Character);                                                                              // [0x1779970] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLScriptedEventsSystem
/// Size: 0x0010 (0x000028 - 0x000038)
class UWTLScriptedEventsSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLSecurityController
/// Size: 0x0018 (0x000028 - 0x000040)
class UWTLSecurityController : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLSecuritySystem
/// Size: 0x0008 (0x000028 - 0x000030)
class UWTLSecuritySystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/WTL.WTLSharedData
/// Size: 0x04F0 (0x000028 - 0x000518)
class UWTLSharedData : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x4F0];                                     // 0x0028   (0x04F0)  MISSED
};

/// Class /Script/WTL.WTLSignalJammer
/// Size: 0x0060 (0x000398 - 0x0003F8)
class AWTLSignalJammer : public AWTLPlaceableStuff
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0398   (0x0008)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x03A0   (0x0008)  
	UStaticMeshComponent*                              SphereMesh;                                                 // 0x03A8   (0x0008)  
	USphereComponent*                                  SphereCollision;                                            // 0x03B0   (0x0008)  
	float                                              EnergyChargePerSecond;                                      // 0x03B8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x20];                                      // 0x03BC   (0x0020)  MISSED
	float                                              m_Energy;                                                   // 0x03DC   (0x0004)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x03E0   (0x0018)  MISSED


	/// Functions
	// Function /Script/WTL.WTLSignalJammer.OnRep_Energy
	void OnRep_Energy();                                                                                                     // [0x19270e0] Final|Native|Protected 
	// Function /Script/WTL.WTLSignalJammer.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1927150] Native|Protected     
	// Function /Script/WTL.WTLSignalJammer.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19273d0] Native|Protected|HasOutParms 
};

/// Class /Script/WTL.WTLSkillSystem
/// Size: 0x0018 (0x000028 - 0x000040)
class UWTLSkillSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Class /Script/WTL.WTLSky
/// Size: 0x0010 (0x000220 - 0x000230)
class AWTLSky : public AActor
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0220   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLSkyLevelScriptActor
/// Size: 0x0198 (0x0006B0 - 0x000848)
class AWTLSkyLevelScriptActor : public AWTLLocationLevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x84];                                      // 0x06B0   (0x0084)  MISSED
	float                                              m_DesiredWindSpeed;                                         // 0x0734   (0x0004)  
	float                                              m_DesiredWindActiveTime;                                    // 0x0738   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x073C   (0x0004)  MISSED
	float                                              m_DesiredWindAngle;                                         // 0x0740   (0x0004)  
	float                                              m_WindSpeedChangeSpeed;                                     // 0x0744   (0x0004)  
	float                                              m_WindAngleChangeSpeed;                                     // 0x0748   (0x0004)  
	bool                                               bShowDebugInfo;                                             // 0x074C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x074D   (0x0003)  MISSED
	USceneCaptureComponentCube*                        CaptureComponent;                                           // 0x0750   (0x0008)  
	bool                                               CaptureScene;                                               // 0x0758   (0x0001)  
	bool                                               CaptureLandscape;                                           // 0x0759   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x075A   (0x0002)  MISSED
	FVector                                            CapturePosition;                                            // 0x075C   (0x000C)  
	TArray<FWTLCaptureTarget>                          CaptureTargets;                                             // 0x0768   (0x0010)  
	ADirectionalLight*                                 SunLight;                                                   // 0x0778   (0x0008)  
	UCurveFloat*                                       SunAngleCurve;                                              // 0x0780   (0x0008)  
	UCurveFloat*                                       SunBrightnessCurve;                                         // 0x0788   (0x0008)  
	UCurveLinearColor*                                 SunColorCurve;                                              // 0x0790   (0x0008)  
	float                                              SunIntensity;                                               // 0x0798   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x079C   (0x0004)  MISSED
	USkyLightComponent*                                SkyLightComponent;                                          // 0x07A0   (0x0008)  
	UCurveFloat*                                       SkyLightBrightnessCurve;                                    // 0x07A8   (0x0008)  
	UCurveLinearColor*                                 SkyLightColorCurve;                                         // 0x07B0   (0x0008)  
	float                                              SkyLightIntensity;                                          // 0x07B8   (0x0004)  
	float                                              SkyLightMinLowerHemisphereIntensity;                        // 0x07BC   (0x0004)  
	float                                              SkyLightMaxLowerHemisphereIntensity;                        // 0x07C0   (0x0004)  
	bool                                               SkyLightRecapture;                                          // 0x07C4   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x07C5   (0x0003)  MISSED
	float                                              SkyLightRecaptureInterval;                                  // 0x07C8   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x07CC   (0x0004)  MISSED
	TArray<FWTLDaytimeCubemap>                         DaytimeCubemaps;                                            // 0x07D0   (0x0010)  
	AExponentialHeightFog*                             ExponentialHeightFog;                                       // 0x07E0   (0x0008)  
	UCurveFloat*                                       ExponentialFogDesityCurve;                                  // 0x07E8   (0x0008)  
	UCurveLinearColor*                                 ExponentialFogInscatteringColorCurve;                       // 0x07F0   (0x0008)  
	UCurveFloat*                                       CloudsIntensityCurve;                                       // 0x07F8   (0x0008)  
	bool                                               UpdateReflectionCaptures;                                   // 0x0800   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0801   (0x0003)  MISSED
	float                                              ReflectionCaptureTimerInterval;                             // 0x0804   (0x0004)  
	int32_t                                            ReflectionCaptureMaxUpdatesPerIteration;                    // 0x0808   (0x0004)  
	float                                              ReflectionCaptureTimeDelta;                                 // 0x080C   (0x0004)  
	float                                              ReflectionCaptureMaxDistance;                               // 0x0810   (0x0004)  
	unsigned char                                      UnknownData08_5[0x4];                                       // 0x0814   (0x0004)  MISSED
	AWindDirectionalSource*                            WindSource;                                                 // 0x0818   (0x0008)  
	float                                              WindMinGustAmountMin;                                       // 0x0820   (0x0004)  
	float                                              WindMinGustAmountMax;                                       // 0x0824   (0x0004)  
	float                                              WindMaxGustAmountMin;                                       // 0x0828   (0x0004)  
	float                                              WindMaxGustAmountMax;                                       // 0x082C   (0x0004)  
	float                                              WindSpeedMin;                                               // 0x0830   (0x0004)  
	float                                              WindSpeedMax;                                               // 0x0834   (0x0004)  
	float                                              WindActiveTimeMin;                                          // 0x0838   (0x0004)  
	float                                              WindActiveTimeMax;                                          // 0x083C   (0x0004)  
	float                                              WindChangeSpeedMin;                                         // 0x0840   (0x0004)  
	float                                              WindChangeSpeedMax;                                         // 0x0844   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLSkyLevelScriptActor.OnRep_DesiredWindActiveTime
	void OnRep_DesiredWindActiveTime();                                                                                      // [0x17de400] Final|Native|Private 
	// Function /Script/WTL.WTLSkyLevelScriptActor.GetUndergroundMode
	bool GetUndergroundMode();                                                                                               // [0x1927af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLSkyLevelScriptActor.GetCloudsValue
	float GetCloudsValue();                                                                                                  // [0x1927b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLSlotMachineBase
/// Size: 0x0030 (0x000260 - 0x000290)
class AWTLSlotMachineBase : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0260   (0x0018)  MISSED
	bool                                               SingleMode;                                                 // 0x0278   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0279   (0x0003)  MISSED
	int32_t                                            ID;                                                         // 0x027C   (0x0004)  
	int32_t                                            Bet;                                                        // 0x0280   (0x0004)  
	int32_t                                            StartBalance;                                               // 0x0284   (0x0004)  
	int32_t                                            m_SlotMachineMoney;                                         // 0x0288   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x028C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLSlotMachineBase.OnRep_SlotMachineMoney
	void OnRep_SlotMachineMoney();                                                                                           // [0x1929060] Final|Native|Private 
	// Function /Script/WTL.WTLSlotMachineBase.K2_OnRep_SlotMachineMoney
	void K2_OnRep_SlotMachineMoney();                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLSlotMachineBase.IncrementSlotMachineMoney
	void IncrementSlotMachineMoney(int32_t Value);                                                                           // [0x17a7000] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSlotMachineBase.GiveItemsToCharacter
	bool GiveItemsToCharacter(AWTLCharacter* Character, TArray<FWTLGiveItemInfo> Value);                                     // [0x1928d80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSlotMachineBase.GetSlotMachineMoney
	int32_t GetSlotMachineMoney();                                                                                           // [0x1929020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLSlotMachineBase.GetID
	int32_t GetID();                                                                                                         // [0x1929040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLSlotMachineBase.DecrementSlotMachineMoney
	int32_t DecrementSlotMachineMoney(int32_t Value);                                                                        // [0x1928f50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLSlotMachineBandit
/// Size: 0x0090 (0x000290 - 0x000320)
class AWTLSlotMachineBandit : public AWTLSlotMachineBase
{ 
public:
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0290   (0x0014)  MISSED
	int32_t                                            CylinderID;                                                 // 0x02A4   (0x0004)  
	int32_t                                            WinCombinationsID;                                          // 0x02A8   (0x0004)  
	int32_t                                            SymbolsTexturesID;                                          // 0x02AC   (0x0004)  
	int32_t                                            CountCylinder;                                              // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x02B4   (0x0004)  MISSED
	FWTLSlotMachineData                                SlotMachineData;                                            // 0x02B8   (0x0030)  
	unsigned char                                      UnknownData02_6[0x38];                                      // 0x02E8   (0x0038)  MISSED


	/// Functions
	// Function /Script/WTL.WTLSlotMachineBandit.PlayWinSound
	void PlayWinSound();                                                                                                     // [0x1928690] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSlotMachineBandit.OnRep_SlotMachineData
	void OnRep_SlotMachineData();                                                                                            // [0x1928490] Final|Native|Public  
	// Function /Script/WTL.WTLSlotMachineBandit.NetMulticast_Win
	void NetMulticast_Win(uint32_t WinID);                                                                                   // [0x1928590] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/WTL.WTLSlotMachineBandit.K2_SetTickerText
	void K2_SetTickerText(FText& Text);                                                                                      // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLSlotMachineBandit.K2_SetTickerColor
	void K2_SetTickerColor(FSlateColor& Color);                                                                              // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/WTL.WTLSlotMachineBandit.K2_ResetTickerColor
	void K2_ResetTickerColor();                                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLSlotMachineBandit.K2_OnDataCylinderChanged
	void K2_OnDataCylinderChanged(FWTLSlotMachineData Value);                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLSlotMachineBandit.K2_ClientWin
	void K2_ClientWin(int32_t WinID);                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLSlotMachineBandit.GetNewSlotCombination
	FWTLSlotMachineData GetNewSlotCombination(AWTLCharacter* Character);                                                     // [0x19287d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSlotMachineBandit.CheckWin
	bool CheckWin();                                                                                                         // [0xe5dd90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLSlotMachinePayTable
/// Size: 0x0010 (0x000260 - 0x000270)
class AWTLSlotMachinePayTable : public AWTLInteractiveObject
{ 
public:
	int32_t                                            WinCombinationID;                                           // 0x0260   (0x0004)  
	int32_t                                            SymbolsTexturesID;                                          // 0x0264   (0x0004)  
	int32_t                                            BetValue;                                                   // 0x0268   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x026C   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLSlotMachinePayTableItemCombo
/// Size: 0x0058 (0x000260 - 0x0002B8)
class UWTLSlotMachinePayTableItemCombo : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbRoot;                                                     // 0x0260   (0x0008)  
	TWeakObjectPtr<UClass*>                            PayTableItemImageWidgetClass;                               // 0x0268   (0x0028)  
	TWeakObjectPtr<UClass*>                            PayTableItemAnySeparatorWidgetClass;                        // 0x0290   (0x0028)  
};

/// Class /Script/WTL.WTLSlotMachinePayTableItemImage
/// Size: 0x0008 (0x000260 - 0x000268)
class UWTLSlotMachinePayTableItemImage : public UUserWidget
{ 
public:
	UImage*                                            imgImage;                                                   // 0x0260   (0x0008)  
};

/// Class /Script/WTL.WTLSlotMachinePayTableItemWin
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWTLSlotMachinePayTableItemWin : public UUserWidget
{ 
public:
	UHorizontalBox*                                    hbTokens;                                                   // 0x0260   (0x0008)  
	UTextBlock*                                        tbTokensWinValue;                                           // 0x0268   (0x0008)  
	UImage*                                            imgTokens;                                                  // 0x0270   (0x0008)  
	UCanvasPanel*                                      cpPlus;                                                     // 0x0278   (0x0008)  
	UCanvasPanel*                                      cpGift;                                                     // 0x0280   (0x0008)  
	UButton*                                           btnGift;                                                    // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0290   (0x0010)  MISSED


	/// Functions
	// Function /Script/WTL.WTLSlotMachinePayTableItemWin.OnGiftButtonClicked
	void OnGiftButtonClicked();                                                                                              // [0x1929620] Final|Native|Private 
};

/// Class /Script/WTL.WTLSlotMachinePayTableWidget
/// Size: 0x0068 (0x000260 - 0x0002C8)
class UWTLSlotMachinePayTableWidget : public UWTLWidgetBase
{ 
public:
	UBorder*                                           bMain;                                                      // 0x0260   (0x0008)  
	UVerticalBox*                                      vbCombos;                                                   // 0x0268   (0x0008)  
	UVerticalBox*                                      vbWins;                                                     // 0x0270   (0x0008)  
	TWeakObjectPtr<UClass*>                            PayTableItemComboWidgetClass;                               // 0x0278   (0x0028)  
	TWeakObjectPtr<UClass*>                            PayTableItemWinWidgetClass;                                 // 0x02A0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLSlotMachinePayTableWidget.InitPayTable
	bool InitPayTable(int32_t WinCombinationID, int32_t SymbolsTexturesID, int32_t BetValue);                                // [0x1929790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLSmokeGrenadeProjectile
/// Size: 0x0038 (0x000410 - 0x000448)
class AWTLSmokeGrenadeProjectile : public AWTLGrenadeProjectile
{ 
public:
	char                                               m_ParticleProgress;                                         // 0x0410   (0x0001)  
	char                                               m_CollisionProgress;                                        // 0x0411   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0412   (0x0002)  MISSED
	FVector                                            m_ExplodeLocation;                                          // 0x0414   (0x000C)  
	bool                                               m_bNeedDestroyParticles;                                    // 0x0420   (0x0001)  
	unsigned char                                      UnknownData01_5[0xF];                                       // 0x0421   (0x000F)  MISSED
	UStaticMeshComponent*                              Cylinder;                                                   // 0x0430   (0x0008)  
	float                                              TimeToHideIdentify;                                         // 0x0438   (0x0004)  
	float                                              TimeToStopHideIdentify;                                     // 0x043C   (0x0004)  
	float                                              TimeToDestroyFX;                                            // 0x0440   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0444   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLSmokeGrenadeProjectile.OnRep_ParticleProgress
	void OnRep_ParticleProgress();                                                                                           // [0x1929f20] Final|Native|Public  
	// Function /Script/WTL.WTLSmokeGrenadeProjectile.OnRep_ExplodeLocation
	void OnRep_ExplodeLocation();                                                                                            // [0x1929ea0] Final|Native|Public  
	// Function /Script/WTL.WTLSmokeGrenadeProjectile.OnRep_DestroyParticles
	void OnRep_DestroyParticles();                                                                                           // [0x1929f40] Final|Native|Private 
	// Function /Script/WTL.WTLSmokeGrenadeProjectile.OnRep_CollisionProgress
	void OnRep_CollisionProgress();                                                                                          // [0x1929f00] Final|Native|Public  
	// Function /Script/WTL.WTLSmokeGrenadeProjectile.EndOverlap
	void EndOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x192a000] Final|Native|Private 
	// Function /Script/WTL.WTLSmokeGrenadeProjectile.BeginOverlap
	void BeginOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x192a270] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLSocialSystem
/// Size: 0x0018 (0x000028 - 0x000040)
class UWTLSocialSystem : public UObject
{ 
public:
	UWTLGameInstance*                                  m_GameInstance;                                             // 0x0028   (0x0008)  
	AWTLGameState*                                     m_GameState;                                                // 0x0030   (0x0008)  
	UWorld*                                            m_World;                                                    // 0x0038   (0x0008)  
};

/// Class /Script/WTL.WTLSoundSubmixesComponent
/// Size: 0x0010 (0x000200 - 0x000210)
class UWTLSoundSubmixesComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0200   (0x0010)  MISSED
};

/// Class /Script/WTL.WTLSpawnAICharacter
/// Size: 0x0070 (0x000220 - 0x000290)
class AWTLSpawnAICharacter : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0220   (0x0028)  MISSED
	UClass*                                            SpawnClass;                                                 // 0x0248   (0x0008)  
	bool                                               IsActive;                                                   // 0x0250   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0251   (0x0003)  MISSED
	int32_t                                            SpawnedObjectsLimit;                                        // 0x0254   (0x0004)  
	int32_t                                            MinLevel;                                                   // 0x0258   (0x0004)  
	int32_t                                            MaxLevel;                                                   // 0x025C   (0x0004)  
	float                                              StartDelay;                                                 // 0x0260   (0x0004)  
	float                                              MinSpawnInterval;                                           // 0x0264   (0x0004)  
	float                                              MaxSpawnInterval;                                           // 0x0268   (0x0004)  
	float                                              SpawnRadius;                                                // 0x026C   (0x0004)  
	float                                              MaxRadiusFollowTarget;                                      // 0x0270   (0x0004)  
	bool                                               IsFlyingAICharacter;                                        // 0x0274   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0275   (0x0003)  MISSED
	float                                              MaxDistanceFromLandscape;                                   // 0x0278   (0x0004)  
	bool                                               IsSpawnPoints;                                              // 0x027C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x027D   (0x0003)  MISSED
	TArray<AActor*>                                    SpawnPoints;                                                // 0x0280   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLSpawnAICharacter.K2_OnAICharacterDeath
	void K2_OnAICharacterDeath(AWTLAICharacter* AICharacter);                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLSpawnAICharacter.AICharacterDeath
	void AICharacterDeath(AWTLAICharacter* AICharacter);                                                                     // [0x192ad70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLSpectatorCameraViewSpot
/// Size: 0x0000 (0x0007A0 - 0x0007A0)
class AWTLSpectatorCameraViewSpot : public ACameraActor
{ 
public:
};

/// Class /Script/WTL.WTLSpectatorPawn
/// Size: 0x0060 (0x0002A8 - 0x000308)
class AWTLSpectatorPawn : public ASpectatorPawn
{ 
public:
	unsigned char                                      UnknownData00_1[0x60];                                      // 0x02A8   (0x0060)  MISSED
};

/// Class /Script/WTL.WTLStaminaVolume
/// Size: 0x0008 (0x000258 - 0x000260)
class AWTLStaminaVolume : public AVolume
{ 
public:
	float                                              StaminaRecoveryRate;                                        // 0x0258   (0x0004)  
	bool                                               RecoverStaminaAtBeginOverlap;                               // 0x025C   (0x0001)  
	bool                                               EndlessStamina;                                             // 0x025D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x025E   (0x0002)  MISSED


	/// Functions
	// Function /Script/WTL.WTLStaminaVolume.OnVolumeEndOverlap
	void OnVolumeEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLStaminaVolume.OnVolumeBeginOverlap
	void OnVolumeBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLStaticMeshActor
/// Size: 0x0008 (0x000220 - 0x000228)
class AWTLStaticMeshActor : public AActor
{ 
public:
	UStaticMeshComponent*                              MeshComp;                                                   // 0x0220   (0x0008)  
};

/// Class /Script/WTL.WTLStaticMiningZone
/// Size: 0x0018 (0x0002F0 - 0x000308)
class AWTLStaticMiningZone : public AWTLMiningZone
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x02F0   (0x0004)  MISSED
	float                                              MaxCapacity;                                                // 0x02F4   (0x0004)  
	float                                              MinCapacityRegenerationPerSecond;                           // 0x02F8   (0x0004)  
	float                                              MaxCapacityRegenerationPerSecond;                           // 0x02FC   (0x0004)  
	float                                              CapacityRestoreTimeout;                                     // 0x0300   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0304   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLStaticSkyLevelScriptActor
/// Size: 0x0000 (0x0006B0 - 0x0006B0)
class AWTLStaticSkyLevelScriptActor : public AWTLLocationLevelScriptActor
{ 
public:
};

/// Class /Script/WTL.WTLStationControlledRobot
/// Size: 0x0118 (0x000220 - 0x000338)
class AWTLStationControlledRobot : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x58];                                      // 0x0220   (0x0058)  MISSED
	float                                              ActivationTime;                                             // 0x0278   (0x0004)  
	int32_t                                            ID;                                                         // 0x027C   (0x0004)  
	int32_t                                            RobotCraftItemID;                                           // 0x0280   (0x0004)  
	int32_t                                            MaxRobotCount;                                              // 0x0284   (0x0004)  
	AWTLGlobalLevelObject*                             GLO;                                                        // 0x0288   (0x0008)  
	FWTLStorageContent                                 m_StorageContent;                                           // 0x0290   (0x00A8)  


	/// Functions
	// Function /Script/WTL.WTLStationControlledRobot.OnRep_StorageContent
	void OnRep_StorageContent();                                                                                             // [0x192c450] Final|Native|Private 
	// Function /Script/WTL.WTLStationControlledRobot.OnRep_MaxRobotCount
	void OnRep_MaxRobotCount();                                                                                              // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLStationControlledRobot.BPUse
	void BPUse(AWTLCharacter* Character);                                                                                    // [0x17941a0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStationControlledRobot.BPSetHighlightState
	void BPSetHighlightState(bool Value);                                                                                    // [0x1773b90] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStationControlledRobot.BPGetDisplayText
	FString BPGetDisplayText(AWTLCharacter* Character);                                                                      // [0x192c2d0] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLStationControlledRobot.BPCanBeUsed
	bool BPCanBeUsed(AWTLCharacter* Character);                                                                              // [0x17bdd30] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLStatisticsSystem
/// Size: 0x40001C0 (0x000028 - 0x40001E8)
class UWTLStatisticsSystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40001C0];                                 // 0x0028   (0x40001C0)  MISSED
};

/// Class /Script/WTL.WTLSteamHelper
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLSteamHelper : public UObject
{ 
public:
};

/// Class /Script/WTL.WTLSteamMainMenuLevelScriptActor
/// Size: 0x0010 (0x000650 - 0x000660)
class AWTLSteamMainMenuLevelScriptActor : public AWTLLevelScriptActor
{ 
public:
	FString                                            SteamServerID;                                              // 0x0650   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLSteamMainMenuLevelScriptActor.ShowInventoryItems
	void ShowInventoryItems();                                                                                               // [0x192cdd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSteamMainMenuLevelScriptActor.Authorize
	void Authorize();                                                                                                        // [0xe77850] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLSteelTarget
/// Size: 0x00E8 (0x000220 - 0x000308)
class AWTLSteelTarget : public AActor
{ 
public:
	bool                                               m_IsActivate;                                               // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_5[0xB];                                       // 0x0221   (0x000B)  MISSED
	float                                              m_RecoveryCooldown;                                         // 0x022C   (0x0004)  
	float                                              m_FallImpulseMultiplier;                                    // 0x0230   (0x0004)  
	float                                              m_RecoverySpeed;                                            // 0x0234   (0x0004)  
	float                                              m_MaximumImpulseValue;                                      // 0x0238   (0x0004)  
	float                                              MinRecoveryCooldownTime;                                    // 0x023C   (0x0004)  
	float                                              MaxRecoveryCooldownTime;                                    // 0x0240   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0244   (0x0004)  MISSED
	UCurveFloat*                                       RecoverCurve;                                               // 0x0248   (0x0008)  
	UCurveFloat*                                       FallCurve;                                                  // 0x0250   (0x0008)  
	unsigned char                                      UnknownData02_5[0x40];                                      // 0x0258   (0x0040)  MISSED
	UStaticMeshComponent*                              StandMesh;                                                  // 0x0298   (0x0008)  
	UStaticMeshComponent*                              TargetMesh;                                                 // 0x02A0   (0x0008)  
	FSteelTargetType                                   Type;                                                       // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02A9   (0x0003)  MISSED
	int32_t                                            HitsToFall;                                                 // 0x02AC   (0x0004)  
	float                                              RiseDelayMin;                                               // 0x02B0   (0x0004)  
	float                                              RiseDelayMax;                                               // 0x02B4   (0x0004)  
	TWeakObjectPtr<USoundBase*>                        FallSound;                                                  // 0x02B8   (0x0028)  
	TWeakObjectPtr<USoundBase*>                        RiseSound;                                                  // 0x02E0   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLSteelTarget.OnRep_RecoveryCooldown
	void OnRep_RecoveryCooldown();                                                                                           // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLSteelTarget.OnRep_IsActivate
	void OnRep_IsActivate();                                                                                                 // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLSteelTarget.NetMulticast_UpdateImpulseValue
	void NetMulticast_UpdateImpulseValue(float Impulse);                                                                     // [0x192cf30] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLSteelTarget.Deactivate
	void Deactivate();                                                                                                       // [0x192ced0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLSteelTarget.BPOnTargetHit
	void BPOnTargetHit(AWTLCharacter* Character, float ImpulseValue);                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLSteelTarget.Activate
	void Activate();                                                                                                         // [0x192cf00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLStorageObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLStorageObjectInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLStuffPlacementZone
/// Size: 0x0010 (0x000258 - 0x000268)
class AWTLStuffPlacementZone : public AVolume
{ 
public:
	TArray<int32_t>                                    AllowedStuffIDS;                                            // 0x0258   (0x0010)  
};

/// Class /Script/WTL.WTLSublevelScriptActor
/// Size: 0x0000 (0x000228 - 0x000228)
class AWTLSublevelScriptActor : public ALevelScriptActor
{ 
public:
};

/// Class /Script/WTL.WTLTacticalGrenade
/// Size: 0x0100 (0x000220 - 0x000320)
class AWTLTacticalGrenade : public AWTLStaticReplicatedActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	USphereComponent*                                  RootSphere;                                                 // 0x0228   (0x0008)  
	UStaticMeshComponent*                              ShieldLeftSide;                                             // 0x0230   (0x0008)  
	UStaticMeshComponent*                              ShieldRightSide;                                            // 0x0238   (0x0008)  
	float                                              CurrentCondition;                                           // 0x0240   (0x0004)  
	float                                              Condition;                                                  // 0x0244   (0x0004)  
	float                                              Time;                                                       // 0x0248   (0x0004)  
	float                                              MinMeshScaleY;                                              // 0x024C   (0x0004)  
	float                                              MinMeshScaleZ;                                              // 0x0250   (0x0004)  
	float                                              TraceDistance;                                              // 0x0254   (0x0004)  
	float                                              TraceDistanceUp;                                            // 0x0258   (0x0004)  
	float                                              TraceStartOffsetX;                                          // 0x025C   (0x0004)  
	float                                              TraceStartOffsetZ;                                          // 0x0260   (0x0004)  
	float                                              MonsterDamageMultiplier;                                    // 0x0264   (0x0004)  
	TArray<int32_t>                                    DestructiveProjectileIDList;                                // 0x0268   (0x0010)  
	bool                                               StunRuningCharacters;                                       // 0x0278   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0279   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        BackgroundSound;                                            // 0x0280   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   HitFX;                                                      // 0x02A8   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ImpactSound;                                                // 0x02D0   (0x0028)  
	bool                                               IgnoreEnvironment;                                          // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x27];                                      // 0x02F9   (0x0027)  MISSED


	/// Functions
	// Function /Script/WTL.WTLTacticalGrenade.OnRep_CurrentCondition
	void OnRep_CurrentCondition();                                                                                           // [0x192e200] Final|Native|Private 
	// Function /Script/WTL.WTLTacticalGrenade.OnOverlapEnd
	void OnOverlapEnd(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLTacticalGrenade.OnOverlapBegin
	void OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLTacticalGrenade.OnConditionChanged
	void OnConditionChanged(float inCurrentCondition);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTacticalGrenade.NetMulticast_StuntCharacter
	void NetMulticast_StuntCharacter(FVector ImpactPosition);                                                                // [0x192e120] Final|Net|Native|Event|NetMulticast|Private|HasDefaults 
	// Function /Script/WTL.WTLTacticalGrenade.BPSwitchMaterialColor
	void BPSwitchMaterialColor(float CondionPercent);                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTacticalGrenade.BPDestroyFX
	void BPDestroyFX();                                                                                                      // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/WTL.WTLTacticalGrenade.AIInterface_IsInSafeZone
	bool AIInterface_IsInSafeZone();                                                                                         // [0xe5dd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTacticalGrenade.AIInterface_IsCanBeAttacked
	bool AIInterface_IsCanBeAttacked(EWTLFaction InstigatorFaction);                                                         // [0x192dff0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTacticalGrenade.AIInterface_IsAlive
	bool AIInterface_IsAlive();                                                                                              // [0x192e0f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTacticalGrenade.AIInterface_GetVelocity
	FVector AIInterface_GetVelocity();                                                                                       // [0x17df0e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTacticalGrenade.AIInterface_GetGroupID
	int32_t AIInterface_GetGroupID();                                                                                        // [0x17df110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTacticalGrenade.AIInterface_GetFaction
	EWTLFaction AIInterface_GetFaction();                                                                                    // [0x17d8c40] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLTacticalWeapon
/// Size: 0x00D0 (0x0003D8 - 0x0004A8)
class AWTLTacticalWeapon : public AWTLWeapon
{ 
public:
	unsigned char                                      UnknownData00_2[0x40];                                      // 0x03D8   (0x0040)  MISSED
	UStaticMeshComponent*                              PreviewMesh;                                                // 0x0418   (0x0008)  
	FItemAnimationSet                                  ActivateSequenceSet;                                        // 0x0420   (0x0018)  
	float                                              MinCameraPitchToAlternative;                                // 0x0438   (0x0004)  
	float                                              MaxCameraPitchToAlternative;                                // 0x043C   (0x0004)  
	FItemAnimationSet                                  AlternativeActivateSequenceSet;                             // 0x0440   (0x0018)  
	UMaterialInstance*                                 CanBePlacedMaterial;                                        // 0x0458   (0x0008)  
	UMaterialInstance*                                 CanNotBePlacedMaterial;                                     // 0x0460   (0x0008)  
	float                                              MinPlaceAngle;                                              // 0x0468   (0x0004)  
	float                                              ActivationTime;                                             // 0x046C   (0x0004)  
	float                                              PlaceTraceDistance;                                         // 0x0470   (0x0004)  
	float                                              MinPlaceDistance;                                           // 0x0474   (0x0004)  
	bool                                               RotateStuffOnSurfaace;                                      // 0x0478   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0479   (0x0007)  MISSED
	TWeakObjectPtr<UClass*>                            StuffClass;                                                 // 0x0480   (0x0028)  


	/// Functions
	// Function /Script/WTL.WTLTacticalWeapon.SetPreviewMeshVisibility
	void SetPreviewMeshVisibility(bool NewVisibility);                                                                       // [0x192efe0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/WTL.WTLTacticalWeapon.Server_StopUse
	void Server_StopUse();                                                                                                   // [0x192f100] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLTacticalWeapon.Server_StartUse
	void Server_StartUse();                                                                                                  // [0x192f160] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLTacticalWeapon.NetMulticast_OnUse
	void NetMulticast_OnUse();                                                                                               // [0x192f0e0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLTacticalWeapon.NetMulticast_OnPlace
	void NetMulticast_OnPlace();                                                                                             // [0x192f0c0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/WTL.WTLTacticalWeapon.Client_ShowPlacementMesh
	void Client_ShowPlacementMesh();                                                                                         // [0x10fc6a0] Final|Net|NetReliableNative|Event|Private|NetClient 
};

/// Class /Script/WTL.WTLTiltComponent
/// Size: 0x0020 (0x000200 - 0x000220)
class UWTLTiltComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0200   (0x0008)  MISSED
	EWTLTiltState                                      TiltState;                                                  // 0x0208   (0x0001)  
	bool                                               bIsSimulateOnClient;                                        // 0x0209   (0x0001)  
	unsigned char                                      UnknownData01_5[0xE];                                       // 0x020A   (0x000E)  MISSED
	float                                              TiltAngle;                                                  // 0x0218   (0x0004)  
	float                                              TiltSpeed;                                                  // 0x021C   (0x0004)  


	/// Functions
	// Function /Script/WTL.WTLTiltComponent.OnRep_TiltState
	void OnRep_TiltState();                                                                                                  // [0x19308e0] Final|Native|Public  
};

/// Class /Script/WTL.WTLTradingObjectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLTradingObjectInterface : public UInterface
{ 
public:
};

/// Class /Script/WTL.WTLTransitionLevelScriptActor
/// Size: 0x0050 (0x000650 - 0x0006A0)
class AWTLTransitionLevelScriptActor : public AWTLLevelScriptActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0650   (0x0018)  MISSED
	TWeakObjectPtr<ULevel*>                            m_LevelToLoad;                                              // 0x0668   (0x0028)  
	ULevel*                                            m_LoadedLevel;                                              // 0x0690   (0x0008)  
	bool                                               bUsePrepareMapChangeLoading;                                // 0x0698   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0699   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLTransitionLevelScriptActor.OnLevelLoaded
	void OnLevelLoaded();                                                                                                    // [0x1930c00] Final|Native|Private 
};

/// Class /Script/WTL.WTLTriggerObject
/// Size: 0x0040 (0x000220 - 0x000260)
class AWTLTriggerObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0220   (0x0008)  MISSED
	USkeletalMeshComponent*                            SkeletalMesh;                                               // 0x0228   (0x0008)  
	UStaticMeshComponent*                              StaticMesh;                                                 // 0x0230   (0x0008)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0238   (0x0008)  MISSED
	FText                                              Name;                                                       // 0x0240   (0x0018)  
	EWTLTriggerObjectActionType                        ActionType;                                                 // 0x0258   (0x0001)  
	bool                                               HighlightAllChildrenStaticMeshes;                           // 0x0259   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x025A   (0x0006)  MISSED


	/// Functions
	// Function /Script/WTL.WTLTriggerObject.ShowNote
	void ShowNote(AWTLCharacter* Character, FText& NoteName, int32_t NoteID);                                                // [0x1930da0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.SetQuestState
	void SetQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState State, EWTLTriggerCheckResult& Result);     // [0x1918f70] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.OnEndUse
	void OnEndUse(AWTLCharacter* Character);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTriggerObject.OnCharacterUse
	void OnCharacterUse(AWTLCharacter* Character);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTriggerObject.OnCharacterCanBeUsed
	bool OnCharacterCanBeUsed(AWTLCharacter* Character);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTriggerObject.HasQuestWithQuestState
	bool HasQuestWithQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState QuestState);                       // [0x1931be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.GetTriggerActionType
	EWTLTriggerObjectActionType GetTriggerActionType(AWTLCharacter* Character);                                              // [0x1931250] Native|Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTriggerObject.GetQuestState
	void GetQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState& QuestState);                               // [0x19191d0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.CharacterTakeQuest
	void CharacterTakeQuest(AWTLCharacter* Character, int32_t QuestID, EWTLTriggerCheckResult& Result);                      // [0x1918490] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.CharacterCompleteQuest
	void CharacterCompleteQuest(AWTLCharacter* Character, int32_t QuestID, EWTLTriggerCheckResult& Result);                  // [0x1918490] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.CharacterCanTakeQuest
	void CharacterCanTakeQuest(AWTLCharacter* Character, int32_t QuestID, EWTLTriggerCheckResult& Result);                   // [0x1931330] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.CharacterCanCompleteQuest
	void CharacterCanCompleteQuest(AWTLCharacter* Character, int32_t QuestID, EWTLTriggerCheckResult& Result);               // [0x1918670] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.CanQuestBeCompleted
	bool CanQuestBeCompleted(AWTLCharacter* Character, int32_t QuestID);                                                     // [0x1931a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerObject.BeginInformationDialog
	void BeginInformationDialog(AWTLCharacter* Character, int32_t InformationDialogID);                                      // [0x19310d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/WTL.WTLTriggerStateObject
/// Size: 0x0038 (0x000220 - 0x000258)
class AWTLTriggerStateObject : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0220   (0x0010)  MISSED
	USkeletalMeshComponent*                            Mesh;                                                       // 0x0230   (0x0008)  
	FText                                              Name;                                                       // 0x0238   (0x0018)  
	EWTLTriggerObjectState                             State;                                                      // 0x0250   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0251   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLTriggerStateObject.OnRep_State
	void OnRep_State();                                                                                                      // [0xe77850] Final|Native|Private 
	// Function /Script/WTL.WTLTriggerStateObject.OnCharacterUse
	void OnCharacterUse(AWTLCharacter* Character, EWTLTriggerObjectState NewState);                                          // [0x1ad0090] Event|Public|BlueprintEvent 
};

/// Class /Script/WTL.WTLTriggerVolume
/// Size: 0x0038 (0x000220 - 0x000258)
class AWTLTriggerVolume : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0220   (0x0028)  MISSED
	UStaticMeshComponent*                              ActivationVolume;                                           // 0x0248   (0x0008)  
	bool                                               OnlyUniqueCharacters;                                       // 0x0250   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0251   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLTriggerVolume.SwitchCharacterQuestState
	void SwitchCharacterQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState& QuestState);                   // [0x1875350] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerVolume.ShowCharacterActionTimerWidget
	void ShowCharacterActionTimerWidget(AWTLCharacter* Character, float Timeout, EWTLActionTimerWidgetType Type, EWTLCountdownSliderWidgetFillingType Direction); // [0x19181e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerVolume.SetCharacterQuestState
	void SetCharacterQuestState(AWTLCharacter* Character, int32_t QuestID, EWTLQuestState QuestState, EWTLTriggerActionResult& Result); // [0x1932d00] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerVolume.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1933930] Final|Native|Private 
	// Function /Script/WTL.WTLTriggerVolume.OnCharacterLeave
	void OnCharacterLeave(AWTLCharacter* Character);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTriggerVolume.OnCharacterEnter
	void OnCharacterEnter(AWTLCharacter* Character);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLTriggerVolume.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1933e30] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLTriggerVolume.HideCharacterActionTimerWidget
	void HideCharacterActionTimerWidget(AWTLCharacter* Character, bool Success);                                             // [0x1918060] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerVolume.GiveItemToCharacter
	void GiveItemToCharacter(AWTLCharacter* Character, EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, int32_t Condition, EWTLTriggerActionResult& Result); // [0x19329b0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerVolume.GiveItemsToCharacter
	void GiveItemsToCharacter(AWTLCharacter* Character, TArray<FWTLGiveItemInfo> ItemsToGive, EWTLTriggerActionResult& Result); // [0x1932780] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/WTL.WTLTriggerVolume.GetCharactersQuestState
	EWTLQuestState GetCharactersQuestState(AWTLCharacter* Character, int32_t QuestID);                                       // [0x19334f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTriggerVolume.GetCharactersCount
	int32_t GetCharactersCount();                                                                                            // [0x1933800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTriggerVolume.CheckCharacterHaveItem
	bool CheckCharacterHaveItem(AWTLCharacter* Character, EWTLItemType ItemType, int32_t ItemTypeID, int32_t Count, bool CheckContainers); // [0x1932f50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLTriggerVolume.CharacterInVolume
	bool CharacterInVolume(AWTLCharacter* Character);                                                                        // [0x1933820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLTurretAnimInstance
/// Size: 0x0010 (0x0002C0 - 0x0002D0)
class UWTLTurretAnimInstance : public UAnimInstance
{ 
public:
	FVector                                            TargetLocation;                                             // 0x02B8   (0x000C)  
	float                                              TargetFollowingAlpha;                                       // 0x02C4   (0x0004)  
	float                                              BarrelRotationAlpha;                                        // 0x02C8   (0x0004)  
	float                                              BarrelRotationSpeed;                                        // 0x02CC   (0x0004)  
};

/// Class /Script/WTL.WTLTutorialVolume
/// Size: 0x0028 (0x000258 - 0x000280)
class AWTLTutorialVolume : public AVolume
{ 
public:
	TArray<int32_t>                                    TutorialMessageIDs;                                         // 0x0258   (0x0010)  
	TArray<EWTLTutorialMessage>                        TutorialMessages;                                           // 0x0268   (0x0010)  
	bool                                               IsIgnoreTutorialEnabling;                                   // 0x0278   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0279   (0x0007)  MISSED


	/// Functions
	// Function /Script/WTL.WTLTutorialVolume.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1934cc0] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.EnvironmentDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UEnvironmentDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.AcidDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UAcidDamageType : public UEnvironmentDamageType
{ 
public:
};

/// Class /Script/WTL.FireDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UFireDamageType : public UEnvironmentDamageType
{ 
public:
};

/// Class /Script/WTL.RadiationDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class URadiationDamageType : public UEnvironmentDamageType
{ 
public:
};

/// Class /Script/WTL.WeaponDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UWeaponDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.ExplosiveWeaponDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UExplosiveWeaponDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.MedicineDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UMedicineDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.MonsterDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UMonsterDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.SuffocationDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class USuffocationDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.ControlledMonsterSpawnDamageType
/// Size: 0x0000 (0x000040 - 0x000040)
class UControlledMonsterSpawnDamageType : public UDamageType
{ 
public:
};

/// Class /Script/WTL.CurveLipSync
/// Size: 0x0480 (0x000030 - 0x0004B0)
class UCurveLipSync : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves;                                                // 0x0030   (0x0480)  
};

/// Class /Script/WTL.WTLUndergroundVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class AWTLUndergroundVolume : public AVolume
{ 
public:
};

/// Class /Script/WTL.WTLUtilityColorPicker
/// Size: 0x0110 (0x000260 - 0x000370)
class UWTLUtilityColorPicker : public UUserWidget
{ 
public:
	UImage*                                            imgPreview;                                                 // 0x0260   (0x0008)  
	UBorder*                                           bHue;                                                       // 0x0268   (0x0008)  
	UTextBlock*                                        tbHue;                                                      // 0x0270   (0x0008)  
	USlider*                                           slHue;                                                      // 0x0278   (0x0008)  
	UBorder*                                           bSaturation;                                                // 0x0280   (0x0008)  
	UTextBlock*                                        tbSaturation;                                               // 0x0288   (0x0008)  
	USlider*                                           slSaturation;                                               // 0x0290   (0x0008)  
	UVerticalBox*                                      vbValue;                                                    // 0x0298   (0x0008)  
	UBorder*                                           bValue;                                                     // 0x02A0   (0x0008)  
	UTextBlock*                                        tbValue;                                                    // 0x02A8   (0x0008)  
	USlider*                                           slValue;                                                    // 0x02B0   (0x0008)  
	UVerticalBox*                                      vbAlpha;                                                    // 0x02B8   (0x0008)  
	UBorder*                                           bAlpha;                                                     // 0x02C0   (0x0008)  
	UTextBlock*                                        tbAlpha;                                                    // 0x02C8   (0x0008)  
	USlider*                                           slAlpha;                                                    // 0x02D0   (0x0008)  
	UBorder*                                           bHex;                                                       // 0x02D8   (0x0008)  
	UEditableTextBox*                                  etbHex;                                                     // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x58];                                      // 0x02E8   (0x0058)  MISSED
	TWeakObjectPtr<UTexture2D*>                        PreviewTexture;                                             // 0x0340   (0x0028)  
	bool                                               IsHidePreviewImage;                                         // 0x0368   (0x0001)  
	bool                                               IsAllowToSetValue;                                          // 0x0369   (0x0001)  
	bool                                               IsAllowToSetAlpha;                                          // 0x036A   (0x0001)  
	bool                                               IsAllowToSetHex;                                            // 0x036B   (0x0001)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x036C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLUtilityColorPicker.OnValueSliderChanged
	void OnValueSliderChanged(float Value);                                                                                  // [0x1946c10] Final|Native|Private 
	// Function /Script/WTL.WTLUtilityColorPicker.OnSaturationSliderChanged
	void OnSaturationSliderChanged(float Saturation);                                                                        // [0x1946ce0] Final|Native|Private 
	// Function /Script/WTL.WTLUtilityColorPicker.OnHueSliderChanged
	void OnHueSliderChanged(float Hue);                                                                                      // [0x1946db0] Final|Native|Private 
	// Function /Script/WTL.WTLUtilityColorPicker.OnHexCommitted
	void OnHexCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitType);                                                   // [0x1946830] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLUtilityColorPicker.OnHexChanged
	void OnHexChanged(FText& Text);                                                                                          // [0x1946a10] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLUtilityColorPicker.OnAlphaSliderChanged
	void OnAlphaSliderChanged(float Alpha);                                                                                  // [0x1946b40] Final|Native|Private 
};

/// Class /Script/WTL.WTLUtilityNumberTextBox
/// Size: 0x0040 (0x000A38 - 0x000A78)
class UWTLUtilityNumberTextBox : public UEditableTextBox
{ 
public:
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0A38   (0x0030)  MISSED
	bool                                               IsSetCurrentValueWhenCommittIfEmpty;                        // 0x0A68   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0A69   (0x0003)  MISSED
	int32_t                                            MinValue;                                                   // 0x0A6C   (0x0004)  
	int32_t                                            MaxValue;                                                   // 0x0A70   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0A74   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLUtilityNumberTextBox.OnNumberTextCommitted
	void OnNumberTextCommitted(FText& NumberText, TEnumAsByte<ETextCommit> CommitMethod);                                    // [0x1947180] Final|Native|Private|HasOutParms 
	// Function /Script/WTL.WTLUtilityNumberTextBox.OnNumberTextChanged
	void OnNumberTextChanged(FText& NumberText);                                                                             // [0x1947350] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.MasterServerBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UMasterServerBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/WTL.WTLTestingBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWTLTestingBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/WTL.WTLVehicleCharacterAnimInstance
/// Size: 0x0050 (0x000FA0 - 0x000FF0)
class UWTLVehicleCharacterAnimInstance : public UWTLCharacterBodyAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0FA0   (0x0008)  MISSED
	FVector                                            CharacterOffsetInVehicle;                                   // 0x0FA8   (0x000C)  
	FVector                                            FemaleCharacterAdditionalOffsetInVehicle;                   // 0x0FB4   (0x000C)  
	float                                              CharacterHeadRotationInVehicle;                             // 0x0FC0   (0x0004)  
	float                                              SexAlpha;                                                   // 0x0FC4   (0x0004)  
	float                                              WheelAngle;                                                 // 0x0FC8   (0x0004)  
	float                                              BodyTiltX;                                                  // 0x0FCC   (0x0004)  
	float                                              BodyTiltY;                                                  // 0x0FD0   (0x0004)  
	bool                                               bIsMoveBackward;                                            // 0x0FD4   (0x0001)  
	EWTLCharacterStateInVehicle                        CharacterState;                                             // 0x0FD5   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0FD6   (0x0002)  MISSED
	float                                              BendAlpha;                                                  // 0x0FD8   (0x0004)  
	float                                              TurnLeftAlpha;                                              // 0x0FDC   (0x0004)  
	float                                              TurnRightAlpha;                                             // 0x0FE0   (0x0004)  
	float                                              TurnMaxValue;                                               // 0x0FE4   (0x0004)  
	float                                              SlideRightValue;                                            // 0x0FE8   (0x0004)  
	float                                              SlideLeftValue;                                             // 0x0FEC   (0x0004)  
};

/// Class /Script/WTL.WTLVehiclePawn
/// Size: 0x04B0 (0x0019D0 - 0x001E80)
class AWTLVehiclePawn : public AWTLCharacter
{ 
public:
	uint64_t                                           m_ItemInventoryID;                                          // 0x19D0   (0x0008)  
	unsigned char                                      UnknownData00_5[0x68];                                      // 0x19D8   (0x0068)  MISSED
	bool                                               m_bPlayHightGravityMontage;                                 // 0x1A40   (0x0001)  
	unsigned char                                      UnknownData01_5[0x17];                                      // 0x1A41   (0x0017)  MISSED
	USkeletalMeshComponent*                            VehicleMesh;                                                // 0x1A58   (0x0008)  
	UFMODAudioComponent*                               Horn;                                                       // 0x1A60   (0x0008)  
	UFMODAudioComponent*                               Engine;                                                     // 0x1A68   (0x0008)  
	UFMODAudioComponent*                               Sideslip;                                                   // 0x1A70   (0x0008)  
	UFMODAudioComponent*                               WheelSlipOnAcceleation;                                     // 0x1A78   (0x0008)  
	UFMODAudioComponent*                               LandingSound;                                               // 0x1A80   (0x0008)  
	UFMODAudioComponent*                               HitSound;                                                   // 0x1A88   (0x0008)  
	USpotLightComponent*                               HeadLight;                                                  // 0x1A90   (0x0008)  
	FName                                              HeadLightBoneName;                                          // 0x1A98   (0x0008)  
	UParticleSystemComponent*                          Smoke;                                                      // 0x1AA0   (0x0008)  
	UParticleSystemComponent*                          SmokeFromForwardWheel;                                      // 0x1AA8   (0x0008)  
	UParticleSystemComponent*                          SmokeFromRearWheel;                                         // 0x1AB0   (0x0008)  
	bool                                               UseSimpleDustFromWheels;                                    // 0x1AB8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x1AB9   (0x0003)  MISSED
	float                                              ForwardWheelDustDensity;                                    // 0x1ABC   (0x0004)  
	float                                              ForwardWheelDustDensityForBraking;                          // 0x1AC0   (0x0004)  
	float                                              RearWheelDustDensity;                                       // 0x1AC4   (0x0004)  
	float                                              RearWheelDustDensityForBraking;                             // 0x1AC8   (0x0004)  
	float                                              RearWheelRocksDensity;                                      // 0x1ACC   (0x0004)  
	float                                              RearWheelRocksDensityForBraking;                            // 0x1AD0   (0x0004)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x1AD4   (0x0003)  MISSED
	EWTLCharacterStunhitDirection                      NewDirection;                                               // 0x1AD7   (0x0001)  
	unsigned char                                      UnknownData04_5[0x10];                                      // 0x1AD8   (0x0010)  MISSED
	bool                                               m_BrakePressed;                                             // 0x1AE8   (0x0001)  
	bool                                               m_EngineBraking;                                            // 0x1AE9   (0x0001)  
	unsigned char                                      UnknownData05_5[0x42];                                      // 0x1AEA   (0x0042)  MISSED
	bool                                               m_bAlreadySpawned;                                          // 0x1B2C   (0x0001)  
	bool                                               m_bLeaveVehicle;                                            // 0x1B2D   (0x0001)  
	bool                                               m_bEjectCharacter;                                          // 0x1B2E   (0x0001)  
	bool                                               m_bEnteringInSafeZone;                                      // 0x1B2F   (0x0001)  
	bool                                               m_bInWater;                                                 // 0x1B30   (0x0001)  
	bool                                               m_bIsInAnomaly;                                             // 0x1B31   (0x0001)  
	unsigned char                                      UnknownData06_5[0x26];                                      // 0x1B32   (0x0026)  MISSED
	UAnimMontage*                                      CharacterIdleMontage;                                       // 0x1B58   (0x0008)  
	UAnimMontage*                                      CharacterLandingMontage;                                    // 0x1B60   (0x0008)  
	UAnimMontage*                                      VehicleLandingMontage;                                      // 0x1B68   (0x0008)  
	UAnimMontage*                                      CharacterUnlandingMontage;                                  // 0x1B70   (0x0008)  
	UAnimMontage*                                      VehicleUnlandingMontage;                                    // 0x1B78   (0x0008)  
	UAnimMontage*                                      CharacterStopIdleMontage;                                   // 0x1B80   (0x0008)  
	UAnimMontage*                                      VehicleStopIdleMontage;                                     // 0x1B88   (0x0008)  
	UAnimMontage*                                      CharacterRidingMontage;                                     // 0x1B90   (0x0008)  
	UAnimMontage*                                      CharacterAccelerationMontage;                               // 0x1B98   (0x0008)  
	UAnimMontage*                                      CharacterReverseMontage;                                    // 0x1BA0   (0x0008)  
	UAnimMontage*                                      CharacterJumpMontage;                                       // 0x1BA8   (0x0008)  
	UAnimMontage*                                      CharacterSlideRightMontage;                                 // 0x1BB0   (0x0008)  
	UAnimMontage*                                      CharacterSlideLeftMontage;                                  // 0x1BB8   (0x0008)  
	UAnimMontage*                                      VehicleHightGravityMontage;                                 // 0x1BC0   (0x0008)  
	unsigned char                                      UnknownData07_5[0x4];                                       // 0x1BC8   (0x0004)  MISSED
	float                                              m_MoveRight;                                                // 0x1BCC   (0x0004)  
	float                                              MaxSpeedInKmPerH;                                           // 0x1BD0   (0x0004)  
	float                                              MaxBackwardSpeedInKmPerH;                                   // 0x1BD4   (0x0004)  
	TWeakObjectPtr<UCurveFloat*>                       TurnRateMultiplierCurve;                                    // 0x1BD8   (0x0028)  
	TWeakObjectPtr<UCurveFloat*>                       YawInputMultiplierCurve;                                    // 0x1C00   (0x0028)  
	float                                              YawInputMultiplier;                                         // 0x1C28   (0x0004)  
	bool                                               UseYawInputCorrectionInTurnBraking;                         // 0x1C2C   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x1C2D   (0x0003)  MISSED
	TWeakObjectPtr<UCurveFloat*>                       BodyTiltYAngleCurve;                                        // 0x1C30   (0x0028)  
	float                                              BodyTiltYSpeed;                                             // 0x1C58   (0x0004)  
	unsigned char                                      UnknownData09_5[0x4];                                       // 0x1C5C   (0x0004)  MISSED
	float                                              BodyTiltXSpeed;                                             // 0x1C60   (0x0004)  
	float                                              MaxBodyTiltX;                                               // 0x1C64   (0x0004)  
	float                                              ForwardWheelRotationSpeed;                                  // 0x1C68   (0x0004)  
	float                                              FWheelUpdateSlopeTraceDistance;                             // 0x1C6C   (0x0004)  
	float                                              BWheelUpdateSlopeTraceDistance;                             // 0x1C70   (0x0004)  
	float                                              YawInputCurveMultiplier;                                    // 0x1C74   (0x0004)  
	float                                              YawInterpolationSpeed;                                      // 0x1C78   (0x0004)  
	float                                              NormalBrakingFrictionFactor;                                // 0x1C7C   (0x0004)  
	float                                              StoppingBrakingFrictionFactor;                              // 0x1C80   (0x0004)  
	float                                              EngineBrakingFrictionFactor;                                // 0x1C84   (0x0004)  
	float                                              FrontWheelRadius;                                           // 0x1C88   (0x0004)  
	float                                              RearWheelRadius;                                            // 0x1C8C   (0x0004)  
	float                                              WheelsMagicConstant;                                        // 0x1C90   (0x0004)  
	EWTLSuspensionType                                 SuspensionType;                                             // 0x1C94   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x1C95   (0x0003)  MISSED
	float                                              FrontSuspensionTravel;                                      // 0x1C98   (0x0004)  
	float                                              FrontSuspensionDampingSpeed;                                // 0x1C9C   (0x0004)  
	float                                              FrontSuspensionReboundSpeed;                                // 0x1CA0   (0x0004)  
	float                                              FrontSuspensionBalancingSpeed;                              // 0x1CA4   (0x0004)  
	float                                              FrontSuspensionMinLoadOnBraking;                            // 0x1CA8   (0x0004)  
	float                                              FrontSuspensionMaxLoadOnBraking;                            // 0x1CAC   (0x0004)  
	float                                              FrontSuspensionMinLoadOnAcceleration;                       // 0x1CB0   (0x0004)  
	float                                              FrontSuspensionMaxLoadOnAcceleration;                       // 0x1CB4   (0x0004)  
	float                                              RearSuspensionTravel;                                       // 0x1CB8   (0x0004)  
	float                                              RearSuspensionDampingSpeed;                                 // 0x1CBC   (0x0004)  
	float                                              RearSuspensionReboundSpeed;                                 // 0x1CC0   (0x0004)  
	float                                              RearSuspensionBalancingSpeed;                               // 0x1CC4   (0x0004)  
	float                                              SuspensionSpeedMultiplierOnLanded;                          // 0x1CC8   (0x0004)  
	float                                              SuspensionRollThreshold;                                    // 0x1CCC   (0x0004)  
	float                                              SuspensionRollInterpolationSpeedUp;                         // 0x1CD0   (0x0004)  
	float                                              SuspensionRollInterpolationSpeedDown;                       // 0x1CD4   (0x0004)  
	float                                              SuspensionBodyPositionInterpolationSpeed;                   // 0x1CD8   (0x0004)  
	FName                                              SuspensionWheelTraceProfileName;                            // 0x1CDC   (0x0008)  
	float                                              SuspensionMagicConstant;                                    // 0x1CE4   (0x0004)  
	float                                              SuspensionTraceRollRelationConstant;                        // 0x1CE8   (0x0004)  
	float                                              MagicConstant2;                                             // 0x1CEC   (0x0004)  
	bool                                               SuspensionUseConstantInterpolation;                         // 0x1CF0   (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x1CF1   (0x0003)  MISSED
	FName                                              CheckForwardObstructionBoneName;                            // 0x1CF4   (0x0008)  
	FName                                              CheckBackwardObstructionBoneName;                           // 0x1CFC   (0x0008)  
	float                                              CheckForwardObstructionTraceDistance;                       // 0x1D04   (0x0004)  
	float                                              CheckBackwardObstructionTraceDistance;                      // 0x1D08   (0x0004)  
	float                                              MinJumpTimeInterval;                                        // 0x1D0C   (0x0004)  
	float                                              MinJumpToLandedTimeInterval;                                // 0x1D10   (0x0004)  
	float                                              MinJumpRollValue;                                           // 0x1D14   (0x0004)  
	float                                              MinJumpSpeed;                                               // 0x1D18   (0x0004)  
	float                                              MaxJumpZVelocity;                                           // 0x1D1C   (0x0004)  
	float                                              FrontWheelToGroundDistanceJumpThreshold;                    // 0x1D20   (0x0004)  
	float                                              RearWheelToGroundDistanceJumpThreshold;                     // 0x1D24   (0x0004)  
	float                                              LandingVelocityToTakeDamage;                                // 0x1D28   (0x0004)  
	float                                              LandingVelocityToEjectCharacter;                            // 0x1D2C   (0x0004)  
	float                                              InAirRollDelta;                                             // 0x1D30   (0x0004)  
	float                                              InAirRollDeltaSpeed;                                        // 0x1D34   (0x0004)  
	float                                              SteeringSpeed;                                              // 0x1D38   (0x0004)  
	bool                                               SteeringUseConstantInterpolation;                           // 0x1D3C   (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x1D3D   (0x0003)  MISSED
	float                                              NewDesiredInputForwardValueInterSpeed;                      // 0x1D40   (0x0004)  
	float                                              FallingAnimationBlendWeight;                                // 0x1D44   (0x0004)  
	unsigned char                                      UnknownData13_5[0x14];                                      // 0x1D48   (0x0014)  MISSED
	bool                                               m_bUseHeadlight;                                            // 0x1D5C   (0x0001)  
	char                                               m_HeadlightMode;                                            // 0x1D5D   (0x0001)  
	bool                                               m_bUseRadio;                                                // 0x1D5E   (0x0001)  
	bool                                               m_bVehicleVisibility;                                       // 0x1D5F   (0x0001)  
	EWTLVehicleEngineSoundMode                         EngineSoundMode;                                            // 0x1D60   (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x1D61   (0x0003)  MISSED
	float                                              EngineMinRPM;                                               // 0x1D64   (0x0004)  
	float                                              EngineMaxRPM;                                               // 0x1D68   (0x0004)  
	float                                              EngineRPMIncreaseSpeed;                                     // 0x1D6C   (0x0004)  
	float                                              EngineRPMDropSpeed;                                         // 0x1D70   (0x0004)  
	bool                                               CanDoWheelSlipOnAcceleration;                               // 0x1D74   (0x0001)  
	bool                                               DropAccelerationInAir;                                      // 0x1D75   (0x0001)  
	unsigned char                                      UnknownData15_5[0x1A];                                      // 0x1D76   (0x001A)  MISSED
	float                                              CameraDistance;                                             // 0x1D90   (0x0004)  
	unsigned char                                      UnknownData16_5[0x8];                                       // 0x1D94   (0x0008)  MISSED
	float                                              MinCameraDistance;                                          // 0x1D9C   (0x0004)  
	float                                              MaxCameraDistance;                                          // 0x1DA0   (0x0004)  
	unsigned char                                      UnknownData17_5[0x4];                                       // 0x1DA4   (0x0004)  MISSED
	float                                              CameraDistanceChangeSpeed;                                  // 0x1DA8   (0x0004)  
	float                                              TimeToResetCameraRotation;                                  // 0x1DAC   (0x0004)  
	unsigned char                                      UnknownData18_5[0x4];                                       // 0x1DB0   (0x0004)  MISSED
	float                                              CameraRotationSpeed;                                        // 0x1DB4   (0x0004)  
	unsigned char                                      UnknownData19_5[0xB4];                                      // 0x1DB8   (0x00B4)  MISSED
	bool                                               m_bAffectedByAlcohol;                                       // 0x1E6C   (0x0001)  
	unsigned char                                      UnknownData20_5[0x3];                                       // 0x1E6D   (0x0003)  MISSED
	TArray<TEnumAsByte>                                CollisionObjectTypes;                                       // 0x1E70   (0x0010)  


	/// Functions
	// Function /Script/WTL.WTLVehiclePawn.UpdateObstruction
	void UpdateObstruction(FVector& ImpactPoint);                                                                            // [0x19486d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.SetVehicleMeshVisibility
	void SetVehicleMeshVisibility(bool Value);                                                                               // [0x1773b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.SetIsInAnomaly
	void SetIsInAnomaly(bool Value);                                                                                         // [0x19483b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.Server_VehicleEnteredInWater
	void Server_VehicleEnteredInWater();                                                                                     // [0x1948b20] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_UseHorn
	void Server_UseHorn();                                                                                                   // [0x1948fe0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_UpdateObstruction
	void Server_UpdateObstruction(FVector ImpactPoint);                                                                      // [0x1949150] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_ToggleRadio
	void Server_ToggleRadio();                                                                                               // [0x1949040] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_ToggleHeadlight
	void Server_ToggleHeadlight();                                                                                           // [0x1949070] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_SetMoveRightPressed
	void Server_SetMoveRightPressed(float Value);                                                                            // [0x1949210] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_SetEngineBraking
	void Server_SetEngineBraking(bool Value);                                                                                // [0x1948eb0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_RequestEject
	void Server_RequestEject();                                                                                              // [0x1948e80] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_PlayStun
	void Server_PlayStun(AWTLCharacter* Character);                                                                          // [0x17941a0] Final|Native|Private 
	// Function /Script/WTL.WTLVehiclePawn.Server_LeaveVehicle
	void Server_LeaveVehicle();                                                                                              // [0x1948b50] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_Kick
	void Server_Kick(float KickVelocity);                                                                                    // [0x1948780] Net|Native|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_EjectCharacterFromVehicle
	void Server_EjectCharacterFromVehicle(EWTLCharacterStunhitDirection Direction);                                          // [0x1866cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.Server_CharacterIsUnderground
	void Server_CharacterIsUnderground();                                                                                    // [0x19493e0] Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_BrakeReleased
	void Server_BrakeReleased();                                                                                             // [0x1948f80] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.Server_BrakePressed
	void Server_BrakePressed();                                                                                              // [0x1948fb0] Net|NetReliableNative|Event|Protected|NetServer|NetValidate 
	// Function /Script/WTL.WTLVehiclePawn.PlayVehicleAnimMontage
	void PlayVehicleAnimMontage(UAnimMontage* Montage, float Rate);                                                          // [0x178a2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.PlayHightGravityVehicleMontage
	void PlayHightGravityVehicleMontage();                                                                                   // [0xe77850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_VehicleMeshVisibility
	void OnRep_VehicleMeshVisibility();                                                                                      // [0x19490a0] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_UseRadio
	void OnRep_UseRadio();                                                                                                   // [0x19490e0] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_UseHeadlight
	void OnRep_UseHeadlight();                                                                                               // [0x1949130] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_PlayHightGravityMontage
	void OnRep_PlayHightGravityMontage();                                                                                    // [0x19493c0] Final|Native|Private 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_LeaveVehicle
	void OnRep_LeaveVehicle();                                                                                               // [0x19492e0] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_ItemInventoryID
	void OnRep_ItemInventoryID();                                                                                            // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_IsInAmomaly
	void OnRep_IsInAmomaly();                                                                                                // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_EngineBraking
	void OnRep_EngineBraking();                                                                                              // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_EjectCharacter
	void OnRep_EjectCharacter();                                                                                             // [0xe77850] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.OnRep_BrakePressed
	void OnRep_BrakePressed();                                                                                               // [0x1949370] Final|Native|Protected 
	// Function /Script/WTL.WTLVehiclePawn.NetMulticast_UseHorn
	void NetMulticast_UseHorn();                                                                                             // [0x1949010] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLVehiclePawn.NetMulticast_PlayVehicleAnimMontage
	void NetMulticast_PlayVehicleAnimMontage(UAnimMontage* Montag, float Rate);                                              // [0x1948990] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLVehiclePawn.NetMulticast_PlayUnlandingMontage
	void NetMulticast_PlayUnlandingMontage();                                                                                // [0x1948850] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLVehiclePawn.NetMulticast_PlayLandingMontage
	void NetMulticast_PlayLandingMontage();                                                                                  // [0x19488f0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLVehiclePawn.NetMulticast_EjectCharacter
	void NetMulticast_EjectCharacter();                                                                                      // [0xe77850] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/WTL.WTLVehiclePawn.K2_VehicleCustomEvent
	void K2_VehicleCustomEvent(FName TriggerName);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.K2_UpdateHeadLight
	void K2_UpdateHeadLight(float Intensity);                                                                                // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.K2_SetStoplight
	void K2_SetStoplight(bool State);                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.K2_SetRadio
	void K2_SetRadio(bool State);                                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.K2_SetHighlight
	void K2_SetHighlight(bool Value);                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.K2_SetHeadlight
	void K2_SetHeadlight(bool State, char Mode);                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.K2_ConditionChanged
	void K2_ConditionChanged(float NewCondition);                                                                            // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Script/WTL.WTLVehiclePawn.IsCharacterUnderground
	void IsCharacterUnderground();                                                                                           // [0x1949410] Final|Native|Private 
	// Function /Script/WTL.WTLVehiclePawn.GetVehicleState
	EWTLVehicleState GetVehicleState();                                                                                      // [0x19485d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLVehiclePawn.GetVehicleMesh
	USkeletalMeshComponent* GetVehicleMesh();                                                                                // [0x19484a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetVehicleHighGravityMontage
	UAnimMontage* GetVehicleHighGravityMontage();                                                                            // [0x19482a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.GetSpeed
	float GetSpeed();                                                                                                        // [0x1948590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetRearWheelRotationAngle
	float GetRearWheelRotationAngle();                                                                                       // [0x1948370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetNormalizedSpeedSigned
	float GetNormalizedSpeedSigned();                                                                                        // [0x1948610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetNormalizedSpeed
	float GetNormalizedSpeed();                                                                                              // [0x1948660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetMaxSpeed
	float GetMaxSpeed();                                                                                                     // [0x19486b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetIsInAnomaly
	bool GetIsInAnomaly();                                                                                                   // [0x1948550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetFrontWheelRotationAngle
	float GetFrontWheelRotationAngle();                                                                                      // [0x1948390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetForwardWheelAngle
	float GetForwardWheelAngle();                                                                                            // [0x1948480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentSpeedSigned
	float GetCurrentSpeedSigned();                                                                                           // [0x1948570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentSpeed
	float GetCurrentSpeed();                                                                                                 // [0x1948590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentRootBoneOffset
	FVector GetCurrentRootBoneOffset();                                                                                      // [0x19484c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentRollValue
	float GetCurrentRollValue();                                                                                             // [0x19484f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentForwardInputValue
	float GetCurrentForwardInputValue();                                                                                     // [0x1948350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentForwardAbsorberOffset
	float GetCurrentForwardAbsorberOffset();                                                                                 // [0x1948530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCurrentBackwardAbsorberOffset
	float GetCurrentBackwardAbsorberOffset();                                                                                // [0x1948510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/WTL.WTLVehiclePawn.GetCharacterStateInVehicle
	EWTLCharacterStateInVehicle GetCharacterStateInVehicle();                                                                // [0x19485f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLVehiclePawn.GetCharacterIsStunned
	bool GetCharacterIsStunned();                                                                                            // [0x19485b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/WTL.WTLVehiclePawn.EnterInVehicle
	void EnterInVehicle(AWTLCharacter* Character);                                                                           // [0x17941a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/WTL.WTLVehiclePawn.Client_ResetCamera
	void Client_ResetCamera();                                                                                               // [0x1948d70] Net|Native|Event|Protected|NetClient 
	// Function /Script/WTL.WTLVehiclePawn.Client_OnUpdateInVehicle
	void Client_OnUpdateInVehicle(bool IsInVehicle);                                                                         // [0x1948ba0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/WTL.WTLVehiclePawn.Client_OnPossessed
	void Client_OnPossessed();                                                                                               // [0x1948b80] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/WTL.WTLVKSocialNetworkAdapter
/// Size: 0x0000 (0x000048 - 0x000048)
class UWTLVKSocialNetworkAdapter : public UWTLSocialNetworkAdapter
{ 
public:
};

/// Class /Script/WTL.WTLVoiceController
/// Size: 0x1030 (0x000028 - 0x001058)
class UWTLVoiceController : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x1030];                                    // 0x0028   (0x1030)  MISSED
};

/// Class /Script/WTL.WTLVolumePortal
/// Size: 0x0008 (0x0002B0 - 0x0002B8)
class AWTLVolumePortal : public AWTLPortal
{ 
public:
	UStaticMeshComponent*                              ActivationZoneMesh;                                         // 0x02B0   (0x0008)  


	/// Functions
	// Function /Script/WTL.WTLVolumePortal.OnEndOverlap
	void OnEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17dfe30] Final|Native|Private 
	// Function /Script/WTL.WTLVolumePortal.OnBeginOverlap
	void OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0080] Final|Native|Private|HasOutParms 
};

/// Class /Script/WTL.WTLWaterSource
/// Size: 0x0020 (0x000260 - 0x000280)
class AWTLWaterSource : public AWTLInteractiveObject
{ 
public:
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0260   (0x0008)  MISSED
	UStaticMeshComponent*                              Mesh;                                                       // 0x0268   (0x0008)  
	TArray<FWTLWaterContainer>                         Containers;                                                 // 0x0270   (0x0010)  
};

/// Class /Script/WTL.WTLWeaponAnimInstance
/// Size: 0x00A0 (0x0002C0 - 0x000360)
class UWTLWeaponAnimInstance : public UAnimInstance
{ 
public:
	bool                                               bIsEmpty;                                                   // 0x02C0   (0x0001)  
	bool                                               bIsJammed;                                                  // 0x02C1   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x02C2   (0x0002)  MISSED
	FVector                                            RightHand_Socket;                                           // 0x02C4   (0x000C)  
	FVector                                            LeftHand_Socket;                                            // 0x02D0   (0x000C)  
	FVector                                            Missile_Socket;                                             // 0x02DC   (0x000C)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x02E8   (0x0008)  MISSED
	FTransform                                         RightHand_Socket_Transform;                                 // 0x02F0   (0x0030)  
	FTransform                                         LeftHand_Socket_Transform;                                  // 0x0320   (0x0030)  
	float                                              RightHand_Alpha;                                            // 0x0350   (0x0004)  
	float                                              LeftHand_Alpha;                                             // 0x0354   (0x0004)  
	float                                              HandlingAnimationType;                                      // 0x0358   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x035C   (0x0004)  MISSED


	/// Functions
	// Function /Script/WTL.WTLWeaponAnimInstance.GetCharacter
	AWTLCharacter* GetCharacter();                                                                                           // [0x194b660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/WTL.WTLWeaponAttachment
/// Size: 0x0020 (0x0004D0 - 0x0004F0)
class UWTLWeaponAttachment : public UStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x04D0   (0x0020)  MISSED
};

/// Class /Script/WTL.WTLWindTurbine
/// Size: 0x0048 (0x000220 - 0x000268)
class AWTLWindTurbine : public AActor
{ 
public:
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0220   (0x0018)  MISSED
	UStaticMeshComponent*                              StandMesh;                                                  // 0x0238   (0x0008)  
	UStaticMeshComponent*                              BodyMesh;                                                   // 0x0240   (0x0008)  
	UStaticMeshComponent*                              FanMesh;                                                    // 0x0248   (0x0008)  
	UFMODAudioComponent*                               FMODAudioComponent;                                         // 0x0250   (0x0008)  
	float                                              WindSpeedToFanRotationMultiplier;                           // 0x0258   (0x0004)  
	float                                              BodyMinAngle;                                               // 0x025C   (0x0004)  
	float                                              BodyMaxAngle;                                               // 0x0260   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0264   (0x0004)  MISSED
};

/// Class /Script/WTL.WTLWorldSettings
/// Size: 0x0000 (0x0003A0 - 0x0003A0)
class AWTLWorldSettings : public AWorldSettings
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/BP_ItemPreview.BP_ItemPreview_C
/// Size: 0x0030 (0x0003A0 - 0x0003D0)
class ABP_ItemPreview_C : public AWTLItemPreview
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x03A0   (0x0008)  
	URectLightComponent*                               RectLight4;                                                 // 0x03A8   (0x0008)  
	URectLightComponent*                               RectLight3;                                                 // 0x03B0   (0x0008)  
	URectLightComponent*                               RectLight2;                                                 // 0x03B8   (0x0008)  
	URectLightComponent*                               RectLight1;                                                 // 0x03C0   (0x0008)  
	URectLightComponent*                               RectLight;                                                  // 0x03C8   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/BP_ItemPreview.BP_ItemPreview_C.ReceiveEndPlay
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_ItemPreview.BP_ItemPreview_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_ItemPreview.BP_ItemPreview_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_ItemPreview.BP_ItemPreview_C.ExecuteUbergraph_BP_ItemPreview
	void ExecuteUbergraph_BP_ItemPreview(int32_t EntryPoint);                                                                // [0x1ad0090] Final                
};

/// Class /Game/WTL/Characters/Blueprints/Preview/BP_CharacterPreviewRoom.BP_CharacterPreviewRoom_C
/// Size: 0x0024 (0x000268 - 0x00028C)
class ABP_CharacterPreviewRoom_C : public AWTLCharacterPreviewRoom
{ 
public:
	USpotLightComponent*                               SpotLightBack;                                              // 0x0268   (0x0008)  
	USpotLightComponent*                               SpotLightLeft;                                              // 0x0270   (0x0008)  
	USpotLightComponent*                               SpotLightRight;                                             // 0x0278   (0x0008)  
	USpotLightComponent*                               SpotLightFront;                                             // 0x0280   (0x0008)  
	float                                              RenderTime;                                                 // 0x0288   (0x0004)  
};

/// Class /Game/WTL/Characters/Blueprints/Preview/BP_CharacterPreview.BP_CharacterPreview_C
/// Size: 0x0008 (0x000610 - 0x000618)
class ABP_CharacterPreview_C : public AWTLCharacterPreview
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0610   (0x0008)  


	/// Functions
	// Function /Game/WTL/Characters/Blueprints/Preview/BP_CharacterPreview.BP_CharacterPreview_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/Preview/BP_CharacterPreview.BP_CharacterPreview_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/Preview/BP_CharacterPreview.BP_CharacterPreview_C.ExecuteUbergraph_BP_CharacterPreview
	void ExecuteUbergraph_BP_CharacterPreview(int32_t EntryPoint);                                                           // [0x1ad0090] Final                
};

/// Class /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_CharacterPreview.AB_CharacterPreview_C
/// Size: 0x1B74 (0x000350 - 0x001EC4)
class UAB_CharacterPreview_C : public UWTLCharacterPreviewAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0350   (0x0008)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x0358   (0x00C0)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x0418   (0x0020)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0x0438   (0x00F0)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0x0528   (0x00F0)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0x0618   (0x00F0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0708   (0x0080)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x0788   (0x00E8)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x0870   (0x0020)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0x0890   (0x01E0)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0x0A70   (0x01E0)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x0C50   (0x0030)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x0C80   (0x00E8)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x0D68   (0x00A0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0E08   (0x0080)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x0E88   (0x00D0)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0x0F58   (0x00F0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1048   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1150   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1258   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1360   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1468   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1570   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1678   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1780   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1888   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1990   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1A98   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1BA0   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1CA8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x1DB0   (0x0108)  
	FVector                                            BackpackTranslation;                                        // 0x1EB8   (0x000C)  


	/// Functions
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_CharacterPreview.AB_CharacterPreview_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_CharacterPreview.AB_CharacterPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_CharacterPreview_AnimGraphNode_TwoBoneIK_1403483D44987FD9EB16E0850E4DB2D8
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_CharacterPreview_AnimGraphNode_TwoBoneIK_1403483D44987FD9EB16E0850E4DB2D8(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_CharacterPreview.AB_CharacterPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_CharacterPreview_AnimGraphNode_TwoBoneIK_BD3A9AC846E9E5944DCE239D83EE7D12
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_CharacterPreview_AnimGraphNode_TwoBoneIK_BD3A9AC846E9E5944DCE239D83EE7D12(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_CharacterPreview.AB_CharacterPreview_C.UpdateComplexity
	void UpdateComplexity(char BodyType);                                                                                    // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_CharacterPreview.AB_CharacterPreview_C.ExecuteUbergraph_AB_CharacterPreview
	void ExecuteUbergraph_AB_CharacterPreview(int32_t EntryPoint);                                                           // [0x1ad0090] Final                
};

/// Class /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C
/// Size: 0x09E8 (0x0002C0 - 0x000CA8)
class UAB_PCB_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x02F8   (0x0108)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x0400   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0420   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0528   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0630   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0738   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0840   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0948   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0A50   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0B58   (0x0108)  
	bool                                               sw0;                                                        // 0x0C60   (0x0001)  
	bool                                               sw1;                                                        // 0x0C61   (0x0001)  
	bool                                               sw2;                                                        // 0x0C62   (0x0001)  
	bool                                               sw3;                                                        // 0x0C63   (0x0001)  
	bool                                               sw4;                                                        // 0x0C64   (0x0001)  
	bool                                               sw5;                                                        // 0x0C65   (0x0001)  
	bool                                               sw6;                                                        // 0x0C66   (0x0001)  
	bool                                               sw7;                                                        // 0x0C67   (0x0001)  
	float                                              SwitchOffsetValue;                                          // 0x0C68   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0C6C   (0x0004)  MISSED
	USkeletalMeshComponent*                            MyMesh;                                                     // 0x0C70   (0x0008)  
	bool                                               IsTestPressed;                                              // 0x0C78   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0C79   (0x0003)  MISSED
	float                                              TestButtonTranlation;                                       // 0x0C7C   (0x0004)  
	ABP_CoreHacking_Preview_C*                         MyActor;                                                    // 0x0C80   (0x0008)  
	float                                              Offset0;                                                    // 0x0C88   (0x0004)  
	float                                              Offset1;                                                    // 0x0C8C   (0x0004)  
	float                                              Offset2;                                                    // 0x0C90   (0x0004)  
	float                                              Offset3;                                                    // 0x0C94   (0x0004)  
	float                                              Offset4;                                                    // 0x0C98   (0x0004)  
	float                                              Offset5;                                                    // 0x0C9C   (0x0004)  
	float                                              Offset6;                                                    // 0x0CA0   (0x0004)  
	float                                              Offset7;                                                    // 0x0CA4   (0x0004)  


	/// Functions
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_2A63E5CF4A23A6876FA0CA98D439A668
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_2A63E5CF4A23A6876FA0CA98D439A668();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E589ABC2479AF655901996AEBC92F2CC
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E589ABC2479AF655901996AEBC92F2CC();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_EA353CA84A879AAD12C77D8935D81B3A
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_EA353CA84A879AAD12C77D8935D81B3A();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E183A9EE48D01C2C26682D85165E7A59
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E183A9EE48D01C2C26682D85165E7A59();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E7EC8D6D4C042A57DE133C93D1DFA5F3
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E7EC8D6D4C042A57DE133C93D1DFA5F3();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E3833360426710B37A7AED904AC6217C
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_E3833360426710B37A7AED904AC6217C();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_DD609A8F470927D1A0323BBC3F70FABD
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_DD609A8F470927D1A0323BBC3F70FABD();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_78A7C9894F9B09EB549EF1859C5A1AD0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_78A7C9894F9B09EB549EF1859C5A1AD0();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_861EA0234BF7F5B6671EE1B744DAD764
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_PCB_AnimGraphNode_ModifyBone_861EA0234BF7F5B6671EE1B744DAD764();     // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.SetSwitcherValue
	void SetSwitcherValue(int32_t Index, bool Value);                                                                        // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.TestButtonPressed
	void TestButtonPressed();                                                                                                // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Stuff/Meshes/AB_PCB.AB_PCB_C.ExecuteUbergraph_AB_PCB
	void ExecuteUbergraph_AB_PCB(int32_t EntryPoint);                                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C
/// Size: 0x0220 (0x000260 - 0x000480)
class ABP_CoreHacking_Preview_C : public AWTLCoreHackingPreviewRoom
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0260   (0x0008)  
	UFMODAudioComponent*                               FMODAudio_SwitchClick;                                      // 0x0268   (0x0008)  
	UFMODAudioComponent*                               FMODAudio_HackingFailed;                                    // 0x0270   (0x0008)  
	UFMODAudioComponent*                               FMODAudio_HackingSuccess;                                   // 0x0278   (0x0008)  
	UFMODAudioComponent*                               FMODAudio_TestButton;                                       // 0x0280   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0288   (0x0008)  
	URectLightComponent*                               RectLight1;                                                 // 0x0290   (0x0008)  
	URectLightComponent*                               RectLight;                                                  // 0x0298   (0x0008)  
	UMaterialBillboardComponent*                       MaterialBillboard4;                                         // 0x02A0   (0x0008)  
	UPointLightComponent*                              LoadingLight;                                               // 0x02A8   (0x0008)  
	UMaterialBillboardComponent*                       MaterialBillboard3;                                         // 0x02B0   (0x0008)  
	UMaterialBillboardComponent*                       MaterialBillboard2;                                         // 0x02B8   (0x0008)  
	UMaterialBillboardComponent*                       MaterialBillboard1;                                         // 0x02C0   (0x0008)  
	UMaterialBillboardComponent*                       MaterialBillboard;                                          // 0x02C8   (0x0008)  
	USpotLightComponent*                               SpotLight1;                                                 // 0x02D0   (0x0008)  
	UBoxComponent*                                     TestButton;                                                 // 0x02D8   (0x0008)  
	UPointLightComponent*                              ind3;                                                       // 0x02E0   (0x0008)  
	UPointLightComponent*                              ind2;                                                       // 0x02E8   (0x0008)  
	UPointLightComponent*                              ind1;                                                       // 0x02F0   (0x0008)  
	UPointLightComponent*                              ind0;                                                       // 0x02F8   (0x0008)  
	UBoxComponent*                                     sw7;                                                        // 0x0300   (0x0008)  
	UBoxComponent*                                     sw6;                                                        // 0x0308   (0x0008)  
	UBoxComponent*                                     sw5;                                                        // 0x0310   (0x0008)  
	UBoxComponent*                                     sw4;                                                        // 0x0318   (0x0008)  
	UBoxComponent*                                     sw3;                                                        // 0x0320   (0x0008)  
	UBoxComponent*                                     sw2;                                                        // 0x0328   (0x0008)  
	UBoxComponent*                                     sw1;                                                        // 0x0330   (0x0008)  
	UBoxComponent*                                     sw0;                                                        // 0x0338   (0x0008)  
	UStaticMeshComponent*                              Background;                                                 // 0x0340   (0x0008)  
	USpotLightComponent*                               SpotLight;                                                  // 0x0348   (0x0008)  
	float                                              Timeline_0_Curve_CoreButtonTranslation_C668EB1544AB9842D75264812265F574; // 0x0350   (0x0004)  
	float                                              Timeline_0_TranslationY_C668EB1544AB9842D75264812265F574;   // 0x0354   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    Timeline_0__Direction_C668EB1544AB9842D75264812265F574;     // 0x0358   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0359   (0x0007)  MISSED
	UTimelineComponent*                                Timeline;                                                   // 0x0360   (0x0008)  
	float                                              sw7tr_Curve_CoreSwitchTranslation_EAAE8C1C40281C5CC70CF4820F230342; // 0x0368   (0x0004)  
	float                                              sw7tr_Curve_CoreSwitchTranslation_EAAE8C1C40281C5CC70CF4820F230342; // 0x036C   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw7tr__Direction_EAAE8C1C40281C5CC70CF4820F230342;          // 0x0370   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0371   (0x0007)  MISSED
	UTimelineComponent*                                sw7tr;                                                      // 0x0378   (0x0008)  
	float                                              sw6tr_Curve_CoreSwitchTranslation_4EB1CB09494907A4AC726FB5C55B899F; // 0x0380   (0x0004)  
	float                                              sw6tr_Curve_CoreSwitchTranslation_4EB1CB09494907A4AC726FB5C55B899F; // 0x0384   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw6tr__Direction_4EB1CB09494907A4AC726FB5C55B899F;          // 0x0388   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0389   (0x0007)  MISSED
	UTimelineComponent*                                sw6tr;                                                      // 0x0390   (0x0008)  
	float                                              sw5tr_Curve_CoreSwitchTranslation_0E2218754CA846D8B10138AC2645A548; // 0x0398   (0x0004)  
	float                                              sw5tr_Curve_CoreSwitchTranslation_0E2218754CA846D8B10138AC2645A548; // 0x039C   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw5tr__Direction_0E2218754CA846D8B10138AC2645A548;          // 0x03A0   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x03A1   (0x0007)  MISSED
	UTimelineComponent*                                sw5tr;                                                      // 0x03A8   (0x0008)  
	float                                              sw4tr_Curve_CoreSwitchTranslation_4F340FD0402150B6A9E9FBBBBA8CF923; // 0x03B0   (0x0004)  
	float                                              sw4tr_Curve_CoreSwitchTranslation_4F340FD0402150B6A9E9FBBBBA8CF923; // 0x03B4   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw4tr__Direction_4F340FD0402150B6A9E9FBBBBA8CF923;          // 0x03B8   (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x03B9   (0x0007)  MISSED
	UTimelineComponent*                                sw4tr;                                                      // 0x03C0   (0x0008)  
	float                                              sw3tr_Curve_CoreSwitchTranslation_52F98C124196BA0D5DE6BB85795D6602; // 0x03C8   (0x0004)  
	float                                              sw3tr_Curve_CoreSwitchTranslation_52F98C124196BA0D5DE6BB85795D6602; // 0x03CC   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw3tr__Direction_52F98C124196BA0D5DE6BB85795D6602;          // 0x03D0   (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x03D1   (0x0007)  MISSED
	UTimelineComponent*                                sw3tr;                                                      // 0x03D8   (0x0008)  
	float                                              sw2tr_Curve_CoreSwitchTranslation_A4CE5C724DC11C224C95579074D9BC5C; // 0x03E0   (0x0004)  
	float                                              sw2tr_Curve_CoreSwitchTranslation_A4CE5C724DC11C224C95579074D9BC5C; // 0x03E4   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw2tr__Direction_A4CE5C724DC11C224C95579074D9BC5C;          // 0x03E8   (0x0001)  
	unsigned char                                      UnknownData06_5[0x7];                                       // 0x03E9   (0x0007)  MISSED
	UTimelineComponent*                                sw2tr;                                                      // 0x03F0   (0x0008)  
	float                                              sw1tr_Curve_CoreSwitchTranslation_8018DC6E4E42582DF787E988DEDB13CB; // 0x03F8   (0x0004)  
	float                                              sw1tr_Curve_CoreSwitchTranslation_8018DC6E4E42582DF787E988DEDB13CB; // 0x03FC   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw1tr__Direction_8018DC6E4E42582DF787E988DEDB13CB;          // 0x0400   (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x0401   (0x0007)  MISSED
	UTimelineComponent*                                sw1tr;                                                      // 0x0408   (0x0008)  
	float                                              sw0tr_Curve_CoreSwitchTranslation_94689E774CF0F72A04CADBB1CBF6A43B; // 0x0410   (0x0004)  
	float                                              sw0tr_Curve_CoreSwitchTranslation_94689E774CF0F72A04CADBB1CBF6A43B; // 0x0414   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    sw0tr__Direction_94689E774CF0F72A04CADBB1CBF6A43B;          // 0x0418   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0419   (0x0007)  MISSED
	UTimelineComponent*                                sw0tr;                                                      // 0x0420   (0x0008)  
	float                                              ButtonTranslation_Curve_CoreButtonTranslation_584DFB9E49C845818747908326F6C37B; // 0x0428   (0x0004)  
	float                                              ButtonTranslation_TranslationY_584DFB9E49C845818747908326F6C37B; // 0x042C   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    ButtonTranslation__Direction_584DFB9E49C845818747908326F6C37B; // 0x0430   (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0431   (0x0007)  MISSED
	UTimelineComponent*                                ButtonTranslation;                                          // 0x0438   (0x0008)  
	float                                              TranslationS0;                                              // 0x0440   (0x0004)  
	float                                              TranslationS1;                                              // 0x0444   (0x0004)  
	float                                              TranslationS2;                                              // 0x0448   (0x0004)  
	float                                              TranslationS3;                                              // 0x044C   (0x0004)  
	float                                              TranslationS4;                                              // 0x0450   (0x0004)  
	float                                              TranslationS5;                                              // 0x0454   (0x0004)  
	float                                              TranslationS6;                                              // 0x0458   (0x0004)  
	float                                              TranslationS7;                                              // 0x045C   (0x0004)  
	bool                                               bShowLoading;                                               // 0x0460   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0461   (0x0003)  MISSED
	float                                              LoadingTimer;                                               // 0x0464   (0x0004)  
	float                                              RandDelay;                                                  // 0x0468   (0x0004)  
	unsigned char                                      UnknownData11_5[0x4];                                       // 0x046C   (0x0004)  MISSED
	UMaterialInstanceDynamic*                          LedMaterialInstance;                                        // 0x0470   (0x0008)  
	bool                                               CanProcess;                                                 // 0x0478   (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0479   (0x0003)  MISSED
	float                                              TimeUntilNextIdleBlink;                                     // 0x047C   (0x0004)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.IdleIdication
	void IdleIdication(float DeltaTime);                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.Show Loading Process
	void Show Loading Process(bool Value);                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.SetInficatorColor
	void SetInficatorColor(FLinearColor NewColor);                                                                           // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.GetLoadingLedState
	void GetLoadingLedState(bool& Value);                                                                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.HIghlightLoadingLed
	void HIghlightLoadingLed(bool Value);                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.ButtonTranslation__FinishedFunc
	void ButtonTranslation__FinishedFunc();                                                                                  // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.ButtonTranslation__UpdateFunc
	void ButtonTranslation__UpdateFunc();                                                                                    // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.Timeline_0__FinishedFunc
	void Timeline_0__FinishedFunc();                                                                                         // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.Timeline_0__UpdateFunc
	void Timeline_0__UpdateFunc();                                                                                           // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw7tr__FinishedFunc
	void sw7tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw7tr__UpdateFunc
	void sw7tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw6tr__FinishedFunc
	void sw6tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw6tr__UpdateFunc
	void sw6tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw5tr__FinishedFunc
	void sw5tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw5tr__UpdateFunc
	void sw5tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw4tr__FinishedFunc
	void sw4tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw4tr__UpdateFunc
	void sw4tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw3tr__FinishedFunc
	void sw3tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw3tr__UpdateFunc
	void sw3tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw2tr__FinishedFunc
	void sw2tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw2tr__UpdateFunc
	void sw2tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw1tr__FinishedFunc
	void sw1tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw1tr__UpdateFunc
	void sw1tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw0tr__FinishedFunc
	void sw0tr__FinishedFunc();                                                                                              // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.sw0tr__UpdateFunc
	void sw0tr__UpdateFunc();                                                                                                // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.K2_UpdateSwitchState
	void K2_UpdateSwitchState(char Index, bool Value);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.K2_HighlightIndicator
	void K2_HighlightIndicator(char Index, bool Value);                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.LoadingIndicatorProcess
	void LoadingIndicatorProcess();                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.K2_HightlightStateIndicator
	void K2_HightlightStateIndicator();                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.K2_IsSuccess
	void K2_IsSuccess(bool Value);                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.K2_OnComponentPressed
	void K2_OnComponentPressed(UPrimitiveComponent* HitComponent);                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.K2_OnTestButtonPressed
	void K2_OnTestButtonPressed();                                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/BP_CoreHacking_Preview.BP_CoreHacking_Preview_C.ExecuteUbergraph_BP_CoreHacking_Preview
	void ExecuteUbergraph_BP_CoreHacking_Preview(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/Facilities/CommandCore/Blueprints/BI_FortificationDecoration.BI_FortificationDecoration_C
/// Size: 0x0000 (0x000028 - 0x000028)
class UBI_FortificationDecoration_C : public UInterface
{ 
public:
};

/// Class /Game/WTL/Monsters/New/BP_NavArea_Block150Radius.BP_NavArea_Block150Radius_C
/// Size: 0x0000 (0x000048 - 0x000048)
class UBP_NavArea_Block150Radius_C : public UNavArea_Obstacle
{ 
public:
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_NavQueryFilter_Large.BP_NavQueryFilter_Large_C
/// Size: 0x0000 (0x000048 - 0x000048)
class UBP_NavQueryFilter_Large_C : public UNavigationQueryFilter
{ 
public:
};

/// Class /Game/WTL/Facilities/CommandCore/Blueprints/BP_FortificationCommandCore.BP_FortificationCommandCore_C
/// Size: 0x0018 (0x000480 - 0x000498)
class ABP_FortificationCommandCore_C : public AWTLFortificationCommandCore
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0480   (0x0008)  
	TArray<AActor*>                                    Decorations;                                                // 0x0488   (0x0010)  


	/// Functions
	// Function /Game/WTL/Facilities/CommandCore/Blueprints/BP_FortificationCommandCore.BP_FortificationCommandCore_C.K2_OnIntruderKilled
	void K2_OnIntruderKilled(APawn* Victim);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Facilities/CommandCore/Blueprints/BP_FortificationCommandCore.BP_FortificationCommandCore_C.OnControlFactionChanged
	void OnControlFactionChanged(EWTLFaction Faction);                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Facilities/CommandCore/Blueprints/BP_FortificationCommandCore.BP_FortificationCommandCore_C.ExecuteUbergraph_BP_FortificationCommandCore
	void ExecuteUbergraph_BP_FortificationCommandCore(int32_t EntryPoint);                                                   // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C
/// Size: 0x0100 (0x000400 - 0x000500)
class ABP_MonsterSpawnerBase_C : public AWTLMonsterSpawner
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0400   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0408   (0x0008)  
	UBillboardComponent*                               billboard;                                                  // 0x0410   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0418   (0x0008)  
	TArray<AWTLMonsterPawn*>                           FreeMonsterPoints;                                          // 0x0420   (0x0010)  
	TArray<ABP_SpawnPointForMonster_C*>                SpawnPoints;                                                // 0x0430   (0x0010)  
	TArray<int32_t>                                    TempIdSpawnPoint;                                           // 0x0440   (0x0010)  
	int32_t                                            TempId;                                                     // 0x0450   (0x0004)  
	bool                                               DrawSpawnPointsInRadius;                                    // 0x0454   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0455   (0x0003)  MISSED
	int32_t                                            CurrentID;                                                  // 0x0458   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x045C   (0x0004)  MISSED
	AWTLMonsterPawn*                                   FreePtr;                                                    // 0x0460   (0x0008)  
	FMulticastInlineDelegate                           EventOnMonsterDead;                                         // 0x0468   (0x0010)  
	bool                                               RandomSpawnPoint;                                           // 0x0478   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0479   (0x0007)  MISSED
	UClass*                                            FindMonsterClass;                                           // 0x0480   (0x0008)  
	UClass*                                            ReplaceMonsterClass;                                        // 0x0488   (0x0008)  
	int32_t                                            CountMonstersReplaced;                                      // 0x0490   (0x0004)  
	float                                              Distance;                                                   // 0x0494   (0x0004)  
	FVector                                            SpawnLocation;                                              // 0x0498   (0x000C)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x04A4   (0x0004)  MISSED
	FString                                            NameSpawnClass;                                             // 0x04A8   (0x0010)  
	FString                                            MonsterLimit;                                               // 0x04B8   (0x0010)  
	int32_t                                            CountSpawnPoints;                                           // 0x04C8   (0x0004)  
	bool                                               SetSpawnPointAnchor;                                        // 0x04CC   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x04CD   (0x0003)  MISSED
	FMulticastInlineDelegate                           EventOnMonsterSpawned;                                      // 0x04D0   (0x0010)  
	ABP_FortificationCommandCore_C*                    MyFortificationCommandCore;                                 // 0x04E0   (0x0008)  
	int32_t                                            RandomID;                                                   // 0x04E8   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x04EC   (0x0004)  MISSED
	TArray<ABP_SpawnPointForMonster_C*>                CorrectSpawnPoints;                                         // 0x04F0   (0x0010)  


	/// Functions
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.DrawSpawnPoints
	void DrawSpawnPoints();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.GenerateSpawnPoints
	void GenerateSpawnPoints();                                                                                              // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.ShowRadiusSpawn
	void ShowRadiusSpawn();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.ReplaceMonsters
	void ReplaceMonsters();                                                                                                  // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.SpawnMonster
	void SpawnMonster(UClass* Monster, FVector Location, char Level);                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.OnSpawnMonster
	void OnSpawnMonster();                                                                                                   // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.OnDeadMonster
	void OnDeadMonster(AWTLMonsterPawn* Pawn);                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.K2_MonsterSpawned
	void K2_MonsterSpawned(AWTLMonsterPawn* Pawn);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.ExecuteUbergraph_BP_MonsterSpawnerBase
	void ExecuteUbergraph_BP_MonsterSpawnerBase(int32_t EntryPoint);                                                         // [0x1ad0090] Final|HasDefaults    
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.EventOnMonsterSpawned__DelegateSignature
	void EventOnMonsterSpawned__DelegateSignature(AWTLMonsterPawn* Monster, ABP_MonsterSpawnerBase_C* Spawner);              // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_MonsterSpawnerBase.BP_MonsterSpawnerBase_C.EventOnMonsterDead__DelegateSignature
	void EventOnMonsterDead__DelegateSignature(AWTLMonsterPawn* MonsterPawn, ABP_MonsterSpawnerBase_C* Spawner);             // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Monsters/New/Blueprint/Hexapod/AB_Hexapod.AB_Hexapod_C
/// Size: 0x0168 (0x0003A0 - 0x000508)
class UAB_Hexapod_C : public UWTLMonsterPawnAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x03A0   (0x0008)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x03A8   (0x00E8)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x0490   (0x0030)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x04C0   (0x0048)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/AB_Hexapod.AB_Hexapod_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/AB_Hexapod.AB_Hexapod_C.ExecuteUbergraph_AB_Hexapod
	void ExecuteUbergraph_AB_Hexapod(int32_t EntryPoint);                                                                    // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_Block.BP_FlyingSpawner_Block_C
/// Size: 0x0018 (0x000220 - 0x000238)
class ABP_FlyingSpawner_Block_C : public AActor
{ 
public:
	USphereComponent*                                  Sphere;                                                     // 0x0220   (0x0008)  
	UBoxComponent*                                     Box;                                                        // 0x0228   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0230   (0x0008)  
};

/// Class /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C
/// Size: 0x0075 (0x000F10 - 0x000F85)
class ABP_Pawn_Hexapod_NoNav_V1_C : public AWTLMonsterPawnBase
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F18   (0x0004)  
	float                                              GrowthTime;                                                 // 0x0F1C   (0x0004)  
	float                                              MaxGrowthTime;                                              // 0x0F20   (0x0004)  
	float                                              WalkDistance;                                               // 0x0F24   (0x0004)  
	FName                                              State;                                                      // 0x0F28   (0x0008)  
	FVector                                            InputDir;                                                   // 0x0F30   (0x000C)  
	FVector                                            CurrentDir;                                                 // 0x0F3C   (0x000C)  
	FVector                                            DesiredDir;                                                 // 0x0F48   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0F54   (0x0004)  MISSED
	AActor*                                            MyEnemy;                                                    // 0x0F58   (0x0008)  
	FVector                                            TempDir;                                                    // 0x0F60   (0x000C)  
	float                                              MultiplySpeedRotation;                                      // 0x0F6C   (0x0004)  
	float                                              FrightRadius;                                               // 0x0F70   (0x0004)  
	float                                              AttackDistance;                                             // 0x0F74   (0x0004)  
	float                                              RemainingActionTime;                                        // 0x0F78   (0x0004)  
	float                                              DelayForCheck;                                              // 0x0F7C   (0x0004)  
	float                                              MeshScale;                                                  // 0x0F80   (0x0004)  
	bool                                               IsDeath;                                                    // 0x0F84   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.CUpdateOrientRotationToMove
	void CUpdateOrientRotationToMove();                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SCheckAttackEnemy
	void SCheckAttackEnemy();                                                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SCalculateMultiSpeedRotation
	void SCalculateMultiSpeedRotation();                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SUpdateTempDir
	void SUpdateTempDir();                                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SCheckEnemy
	void SCheckEnemy();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SUpdateFright
	void SUpdateFright();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SUpdateMovement
	void SUpdateMovement();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.SCalculateDir
	void SCalculateDir();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.DrawDebug
	void DrawDebug();                                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.GetDesiredLocation
	FVector GetDesiredLocation();                                                                                            // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.UpdateRotation
	void UpdateRotation();                                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.UpdateGrowth
	void UpdateGrowth();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.BndEvt__BP_Pawn_HexapodSmall_NoNav_V1_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__BP_Pawn_HexapodSmall_NoNav_V1_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hexapod/BP_Pawn_Hexapod_NoNav_V1.BP_Pawn_Hexapod_NoNav_V1_C.ExecuteUbergraph_BP_Pawn_Hexapod_NoNav_V1
	void ExecuteUbergraph_BP_Pawn_Hexapod_NoNav_V1(int32_t EntryPoint);                                                      // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Meshes/ProjectX/AlienJellyfish/Meshes/AB_AlienJellyfish_01.AB_AlienJellyfish_01_C
/// Size: 0x0200 (0x0002C0 - 0x0004C0)
class UAB_AlienJellyfish_01_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x02F8   (0x0080)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0378   (0x0080)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x03F8   (0x00C0)  
	float                                              AlphaDamage;                                                // 0x04B8   (0x0004)  
	float                                              OldHealth;                                                  // 0x04BC   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienJellyfish/Meshes/AB_AlienJellyfish_01.AB_AlienJellyfish_01_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienJellyfish/Meshes/AB_AlienJellyfish_01.AB_AlienJellyfish_01_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienJellyfish/Meshes/AB_AlienJellyfish_01.AB_AlienJellyfish_01_C.ExecuteUbergraph_AB_AlienJellyfish_01
	void ExecuteUbergraph_AB_AlienJellyfish_01(int32_t EntryPoint);                                                          // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C
/// Size: 0x00D4 (0x000220 - 0x0002F4)
class ABP_FlyingSpawner_V1_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   Scene1;                                                     // 0x0228   (0x0008)  
	USphereComponent*                                  Sphere1;                                                    // 0x0230   (0x0008)  
	USkeletalMeshComponent*                            SK_AlienJellyfish_01;                                       // 0x0238   (0x0008)  
	USceneComponent*                                   Scene;                                                      // 0x0240   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0248   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0250   (0x0004)  
	float                                              Health;                                                     // 0x0254   (0x0004)  
	float                                              MaxHealth;                                                  // 0x0258   (0x0004)  
	FVector                                            Location;                                                   // 0x025C   (0x000C)  
	int32_t                                            MaxMonsters;                                                // 0x0268   (0x0004)  
	FName                                              TagForMonsters;                                             // 0x026C   (0x0008)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0274   (0x0004)  MISSED
	TArray<FS_Spore_Outgrowth_Data>                    SpawnLocationList;                                          // 0x0278   (0x0010)  
	int32_t                                            SpawnID;                                                    // 0x0288   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x028C   (0x0004)  MISSED
	UClass*                                            SpawnClass;                                                 // 0x0290   (0x0008)  
	TArray<FVector>                                    MonsterLocations;                                           // 0x0298   (0x0010)  
	FVector                                            SpawnLocation;                                              // 0x02A8   (0x000C)  
	FVector                                            DesiredLocation;                                            // 0x02B4   (0x000C)  
	bool                                               IsDeath;                                                    // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x02C1   (0x0007)  MISSED
	AActor*                                            ptBoss;                                                     // 0x02C8   (0x0008)  
	FName                                              State;                                                      // 0x02D0   (0x0008)  
	UMaterialInstance*                                 MaterialInst;                                               // 0x02D8   (0x0008)  
	AActor*                                            myBlock;                                                    // 0x02E0   (0x0008)  
	bool                                               IsReady;                                                    // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02E9   (0x0003)  MISSED
	float                                              TimeSpawn;                                                  // 0x02EC   (0x0004)  
	float                                              CurrentTimeSpawn;                                           // 0x02F0   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.GetCurrentHealth
	void GetCurrentHealth(float& Result);                                                                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.GetMaxHealth
	void GetMaxHealth(float& Result);                                                                                        // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.IsAlive
	void IsAlive(bool& Result);                                                                                              // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.CanBeTakeDamage
	void CanBeTakeDamage(bool& Result);                                                                                      // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.GetHealthAlpha
	void GetHealthAlpha(float& Result);                                                                                      // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.GetName
	void GetName(FText& Result);                                                                                             // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.CVFXHealth
	void CVFXHealth();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.CheckBoss
	void CheckBoss(bool& Result);                                                                                            // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.UpdateMove
	void UpdateMove();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.CheskSpawnMonster
	void CheskSpawnMonster();                                                                                                // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.DecrementHealth
	void DecrementHealth(float Value);                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.IncrementHealth
	void IncrementHealth(float Value);                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1.BP_FlyingSpawner_V1_C.ExecuteUbergraph_BP_FlyingSpawner_V1
	void ExecuteUbergraph_BP_FlyingSpawner_V1(int32_t EntryPoint);                                                           // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1_Hexapod.BP_FlyingSpawner_V1_Hexapod_C
/// Size: 0x0024 (0x0002F4 - 0x000318)
class ABP_FlyingSpawner_V1_Hexapod_C : public ABP_FlyingSpawner_V1_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x02F4   (0x0004)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02F8   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Dino_Roar_01;                                    // 0x0300   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0308   (0x0008)  
	UParticleSystemComponent*                          P_UltimateLooping;                                          // 0x0310   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1_Hexapod.BP_FlyingSpawner_V1_Hexapod_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1_Hexapod.BP_FlyingSpawner_V1_Hexapod_C.CUpdateVFX
	void CUpdateVFX();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1_Hexapod.BP_FlyingSpawner_V1_Hexapod_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1_Hexapod.BP_FlyingSpawner_V1_Hexapod_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_FlyingSpawner_V1_Hexapod.BP_FlyingSpawner_V1_Hexapod_C.ExecuteUbergraph_BP_FlyingSpawner_V1_Hexapod
	void ExecuteUbergraph_BP_FlyingSpawner_V1_Hexapod(int32_t EntryPoint);                                                   // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C
/// Size: 0x0040 (0x000F10 - 0x000F50)
class ABP_Support_Spore_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	USceneComponent*                                   SceneSpawnPoint;                                            // 0x0F18   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F20   (0x0004)  
	bool                                               IsInit;                                                     // 0x0F24   (0x0001)  
	bool                                               IsScaled;                                                   // 0x0F25   (0x0001)  
	bool                                               IsDeath;                                                    // 0x0F26   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0F27   (0x0001)  MISSED
	float                                              MyScale;                                                    // 0x0F28   (0x0004)  
	float                                              MaxScale;                                                   // 0x0F2C   (0x0004)  
	float                                              ReloadTimeToSpawn;                                          // 0x0F30   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0F34   (0x0004)  MISSED
	AWTLMonsterPawn*                                   myMonster;                                                  // 0x0F38   (0x0008)  
	float                                              CurrentReloadTimeToSpawn;                                   // 0x0F40   (0x0004)  
	bool                                               IsOffsetZ;                                                  // 0x0F44   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0F45   (0x0003)  MISSED
	float                                              TargetOffsetZ;                                              // 0x0F48   (0x0004)  
	float                                              CurrentOffsetZ;                                             // 0x0F4C   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.UpdateOffsetZ
	void UpdateOffsetZ();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.SUpdateSpawnMyMonster
	void SUpdateSpawnMyMonster();                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.CheckOwner
	void CheckOwner();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.UpdateScale
	void UpdateScale();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.OnMonsterDeath
	void OnMonsterDeath();                                                                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_Spore.BP_Support_Spore_C.ExecuteUbergraph_BP_Support_Spore
	void ExecuteUbergraph_BP_Support_Spore(int32_t EntryPoint);                                                              // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C
/// Size: 0x0068 (0x000220 - 0x000288)
class ABP_Projectile_Thorns_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0230   (0x0004)  
	float                                              Distance;                                                   // 0x0234   (0x0004)  
	float                                              CurrentDistance;                                            // 0x0238   (0x0004)  
	float                                              Width;                                                      // 0x023C   (0x0004)  
	float                                              Speed;                                                      // 0x0240   (0x0004)  
	float                                              Deep;                                                       // 0x0244   (0x0004)  
	FVector                                            StartLocation;                                              // 0x0248   (0x000C)  
	FVector                                            CurrentLocation;                                            // 0x0254   (0x000C)  
	FVector                                            DesiredLocation;                                            // 0x0260   (0x000C)  
	bool                                               RIsDestroy;                                                 // 0x026C   (0x0001)  
	bool                                               IsDestroy;                                                  // 0x026D   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x026E   (0x0002)  MISSED
	float                                              DelayDamage;                                                // 0x0270   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0274   (0x0004)  MISSED
	UParticleSystemComponent*                          PartSys;                                                    // 0x0278   (0x0008)  
	UFMODAudioComponent*                               FMODSound;                                                  // 0x0280   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.SUpdateDamage
	void SUpdateDamage();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.UpdateMove
	void UpdateMove();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.OnDestroy
	void OnDestroy();                                                                                                        // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Projectile_Thorns.BP_Projectile_Thorns_C.ExecuteUbergraph_BP_Projectile_Thorns
	void ExecuteUbergraph_BP_Projectile_Thorns(int32_t EntryPoint);                                                          // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/GamePlay/EventPoints/BP_EventPointBase.BP_EventPointBase_C
/// Size: 0x0008 (0x0003F8 - 0x000400)
class ABP_EventPointBase_C : public AWTLEventPoint
{ 
public:
	UBillboardComponent*                               billboard;                                                  // 0x03F8   (0x0008)  
};

/// Class /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C
/// Size: 0x0024 (0x000400 - 0x000424)
class ABP_EventPoint_SpawnMonsters_C : public ABP_EventPointBase_C
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0400   (0x0008)  
	TArray<ABP_MonsterSpawnerBase_C*>                  SpawnPoints;                                                // 0x0408   (0x0010)  
	bool                                               UpdateData;                                                 // 0x0418   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0419   (0x0003)  MISSED
	int32_t                                            MinLevel;                                                   // 0x041C   (0x0004)  
	int32_t                                            MaxLevel;                                                   // 0x0420   (0x0004)  


	/// Functions
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.K2_OnStart
	void K2_OnStart();                                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.K2_OnFinish
	void K2_OnFinish(bool Successful);                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.OnMonsterDead
	void OnMonsterDead(AWTLMonsterPawn* MonsterPawn, ABP_MonsterSpawnerBase_C* Spawner);                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.K2_OnEventTaskCompleted
	void K2_OnEventTaskCompleted(int32_t TaskIndex);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_SpawnMonsters.BP_EventPoint_SpawnMonsters_C.ExecuteUbergraph_BP_EventPoint_SpawnMonsters
	void ExecuteUbergraph_BP_EventPoint_SpawnMonsters(int32_t EntryPoint);                                                   // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV2_Base.BP_BulletHellV2_Base_C
/// Size: 0x0028 (0x000440 - 0x000468)
class ABP_BulletHellV2_Base_C : public AWTLBulletHellBase
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0440   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0448   (0x0008)  
	UArrowComponent*                                   Arrow2;                                                     // 0x0450   (0x0008)  
	UArrowComponent*                                   Arrow1;                                                     // 0x0458   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0460   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV2_Base.BP_BulletHellV2_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV2_Base.BP_BulletHellV2_Base_C.ExecuteUbergraph_BP_BulletHellV2_Base
	void ExecuteUbergraph_BP_BulletHellV2_Base(int32_t EntryPoint);                                                          // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_07.BP_BulletHellV3_07_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_07_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_06.BP_BulletHellV3_06_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_06_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_05.BP_BulletHellV3_05_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_05_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_04.BP_BulletHellV3_04_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_04_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_03.BP_BulletHellV3_03_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_03_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_02.BP_BulletHellV3_02_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_02_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BulletHell/BP_BulletHellV3_01.BP_BulletHellV3_01_C
/// Size: 0x0000 (0x000468 - 0x000468)
class ABP_BulletHellV3_01_C : public ABP_BulletHellV2_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/Meshes/ProjectX/AlienFlower/Meshes/AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint.AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C
/// Size: 0x0450 (0x0002C0 - 0x000710)
class UAB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x02F8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0320   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0348   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0370   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0398   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0418   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0448   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x04C8   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x04F8   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0578   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x05A8   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0628   (0x0030)  
	FAnimNode_StateMachine                             AnimGraphNode_StateMachine;                                 // 0x0658   (0x00B0)  
	FName                                              State;                                                      // 0x0708   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienFlower/Meshes/AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint.AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienFlower/Meshes/AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint.AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_AnimGraphNode_TransitionResult_938A8AE74D1E1CEA1E6E67949377A511
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_AnimGraphNode_TransitionResult_938A8AE74D1E1CEA1E6E67949377A511(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienFlower/Meshes/AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint.AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_AnimGraphNode_TransitionResult_164C8DE2486435D4A0A7D6943DE49EFF
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_AnimGraphNode_TransitionResult_164C8DE2486435D4A0A7D6943DE49EFF(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienFlower/Meshes/AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint.AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienFlower/Meshes/AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint.AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint_C.ExecuteUbergraph_AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint
	void ExecuteUbergraph_AB_ProjectX_AlienFlowerA_01_Skeleton_AnimBlueprint(int32_t EntryPoint);                            // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C
/// Size: 0x009D (0x000220 - 0x0002BD)
class ABP_Spore_Crystal_Base_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0228   (0x0008)  
	UStaticMeshComponent*                              Sphere;                                                     // 0x0230   (0x0008)  
	USphereComponent*                                  SpherePush;                                                 // 0x0238   (0x0008)  
	UNiagaraComponent*                                 NS_Crystal_Laser;                                           // 0x0240   (0x0008)  
	UStaticMeshComponent*                              SM_LProp_Crystals_01;                                       // 0x0248   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0250   (0x0008)  
	FLinearColor                                       ColorA;                                                     // 0x0258   (0x0010)  
	FLinearColor                                       ColorB;                                                     // 0x0268   (0x0010)  
	float                                              DeltaSec;                                                   // 0x0278   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x027C   (0x0004)  
	bool                                               IsDestroy;                                                  // 0x0280   (0x0001)  
	bool                                               IsFreeze;                                                   // 0x0281   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0282   (0x0002)  MISSED
	int32_t                                            MyColorID;                                                  // 0x0284   (0x0004)  
	FVector                                            StartLocation;                                              // 0x0288   (0x000C)  
	FVector                                            EndLocation;                                                // 0x0294   (0x000C)  
	int32_t                                            SpeedMode;                                                  // 0x02A0   (0x0004)  
	int32_t                                            MoveDirection;                                              // 0x02A4   (0x0004)  
	bool                                               IsLocationCorrection;                                       // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02A9   (0x0003)  MISSED
	FVector                                            CorrectLocation;                                            // 0x02AC   (0x000C)  
	float                                              WaitUpdateCorrectLocation;                                  // 0x02B8   (0x0004)  
	bool                                               IsCheckCrystal;                                             // 0x02BC   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.CUpdateLocationSound
	void CUpdateLocationSound();                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.CUpdateRotation
	void CUpdateRotation();                                                                                                  // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.OnRep_CorrectLocation
	void OnRep_CorrectLocation();                                                                                            // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.SUpdateCorrectLocation
	void SUpdateCorrectLocation();                                                                                           // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.GetForwardDir
	FVector GetForwardDir();                                                                                                 // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.GetSpeed
	float GetSpeed();                                                                                                        // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.CUpdateLaser
	void CUpdateLaser();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.CUpdateColor
	void CUpdateColor();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.SCheckCrystalEnergySource
	void SCheckCrystalEnergySource();                                                                                        // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.SUpdateGround
	void SUpdateGround();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.UpdateMove
	void UpdateMove();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.SUpdateOverlap
	void SUpdateOverlap();                                                                                                   // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_Crystal_Base.BP_Spore_Crystal_Base_C.ExecuteUbergraph_BP_Spore_Crystal_Base
	void ExecuteUbergraph_BP_Spore_Crystal_Base(int32_t EntryPoint);                                                         // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C
/// Size: 0x0090 (0x000220 - 0x0002B0)
class ABP_Projectile_Fire_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UProjectileMovementComponent*                      ProjectileMovement;                                         // 0x0228   (0x0008)  
	UStaticMeshComponent*                              Sphere1;                                                    // 0x0230   (0x0008)  
	UFMODAudioComponent*                               FE_Anomaly_FireField_Splash;                                // 0x0238   (0x0008)  
	UParticleSystemComponent*                          P_Explo_Toxic;                                              // 0x0240   (0x0008)  
	UDecalComponent*                                   Decal;                                                      // 0x0248   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0250   (0x0008)  
	UParticleSystemComponent*                          ParticleSystem;                                             // 0x0258   (0x0008)  
	FVector                                            StartLoc;                                                   // 0x0260   (0x000C)  
	FVector                                            EndLoc;                                                     // 0x026C   (0x000C)  
	float                                              Damage;                                                     // 0x0278   (0x0004)  
	bool                                               IsShot;                                                     // 0x027C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x027D   (0x0003)  MISSED
	FVector                                            NewVelocity;                                                // 0x0280   (0x000C)  
	float                                              AngleA;                                                     // 0x028C   (0x0004)  
	float                                              Speed;                                                      // 0x0290   (0x0004)  
	float                                              AngleB;                                                     // 0x0294   (0x0004)  
	float                                              Len;                                                        // 0x0298   (0x0004)  
	float                                              Height;                                                     // 0x029C   (0x0004)  
	EWTLCharacterEffectType                            EffectType;                                                 // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02A1   (0x0003)  MISSED
	float                                              RadiusDamage;                                               // 0x02A4   (0x0004)  
	float                                              GravityScale;                                               // 0x02A8   (0x0004)  
	float                                              RepAngleB;                                                  // 0x02AC   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.Initialize
	void Initialize(FVector StartLocation, FVector EndLocation, float Damage, float SetAngleB);                              // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.OnDamageToCharacter
	void OnDamageToCharacter(AWTLCharacter* Character, float MultiplyDamage);                                                // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.OnHit
	void OnHit();                                                                                                            // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Fire.BP_Projectile_Fire_C.ExecuteUbergraph_BP_Projectile_Fire
	void ExecuteUbergraph_BP_Projectile_Fire(int32_t EntryPoint);                                                            // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C
/// Size: 0x004D (0x000220 - 0x00026D)
class ABP_Tornado_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UStaticMeshComponent*                              ST_StormBody_Small;                                         // 0x0228   (0x0008)  
	UStaticMeshComponent*                              ST_StormBody_Back_Small;                                    // 0x0230   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0238   (0x0008)  
	float                                              DesiredScale;                                               // 0x0240   (0x0004)  
	float                                              DeltaSec;                                                   // 0x0244   (0x0004)  
	float                                              StartTime;                                                  // 0x0248   (0x0004)  
	float                                              CurrentTime;                                                // 0x024C   (0x0004)  
	float                                              EndTime;                                                    // 0x0250   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0254   (0x0004)  MISSED
	UCurveFloat*                                       CurveTornadoScale;                                          // 0x0258   (0x0008)  
	bool                                               IsDestroy;                                                  // 0x0260   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0261   (0x0003)  MISSED
	float                                              LifeTime;                                                   // 0x0264   (0x0004)  
	float                                              CurrentScale;                                               // 0x0268   (0x0004)  
	bool                                               IsSpawnSystem;                                              // 0x026C   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C.SApplyDamage
	void SApplyDamage();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C.CUpdateScale
	void CUpdateScale();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C.UpdateTime
	void UpdateTime();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Tornado.BP_Tornado_C.ExecuteUbergraph_BP_Tornado
	void ExecuteUbergraph_BP_Tornado(int32_t EntryPoint);                                                                    // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/Projectile/BP_Projectile_Tornado.BP_Projectile_Tornado_C
/// Size: 0x0008 (0x0002B0 - 0x0002B8)
class ABP_Projectile_Tornado_C : public ABP_Projectile_Fire_C
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02B0   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Tornado.BP_Projectile_Tornado_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Tornado.BP_Projectile_Tornado_C.OnDamageToCharacter
	void OnDamageToCharacter(AWTLCharacter* Character, float MultiplyDamage);                                                // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Tornado.BP_Projectile_Tornado_C.OnHit
	void OnHit();                                                                                                            // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Projectile_Tornado.BP_Projectile_Tornado_C.ExecuteUbergraph_BP_Projectile_Tornado
	void ExecuteUbergraph_BP_Projectile_Tornado(int32_t EntryPoint);                                                         // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_Toxic_Puddle.BP_Projectile_Toxic_Puddle_C
/// Size: 0x0038 (0x000220 - 0x000258)
class ABP_Projectile_Toxic_Puddle_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UParticleSystemComponent*                          P_Fey_Primary;                                              // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FMODAudio1;                                                 // 0x0230   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0238   (0x0008)  
	UNiagaraComponent*                                 NS_ToxicProdectile;                                         // 0x0240   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0248   (0x0008)  
	UProjectileMovementComponent*                      ProjectileMovement;                                         // 0x0250   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_Toxic_Puddle.BP_Projectile_Toxic_Puddle_C.BndEvt__BP_Projectile_Toxic_Puddle_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__BP_Projectile_Toxic_Puddle_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_Toxic_Puddle.BP_Projectile_Toxic_Puddle_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_Toxic_Puddle.BP_Projectile_Toxic_Puddle_C.ExecuteUbergraph_BP_Projectile_Toxic_Puddle
	void ExecuteUbergraph_BP_Projectile_Toxic_Puddle(int32_t EntryPoint);                                                    // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_Puddle.BP_Actor_Puddle_C
/// Size: 0x0044 (0x000220 - 0x000264)
class ABP_Actor_Puddle_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FMODAudio1;                                                 // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0230   (0x0008)  
	UParticleSystemComponent*                          PS_Gobble;                                                  // 0x0238   (0x0008)  
	UDecalComponent*                                   Decal;                                                      // 0x0240   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0248   (0x0008)  
	float                                              LifeTime;                                                   // 0x0250   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0254   (0x0004)  MISSED
	UMaterialInstanceDynamic*                          MatInst;                                                    // 0x0258   (0x0008)  
	float                                              CurrentLifeTime;                                            // 0x0260   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_Puddle.BP_Actor_Puddle_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_Puddle.BP_Actor_Puddle_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_Puddle.BP_Actor_Puddle_C.ExecuteUbergraph_BP_Actor_Puddle
	void ExecuteUbergraph_BP_Actor_Puddle(int32_t EntryPoint);                                                               // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_BubbleSplash_Zone.BP_Actor_BubbleSplash_Zone_C
/// Size: 0x002C (0x000220 - 0x00024C)
class ABP_Actor_BubbleSplash_Zone_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UDecalComponent*                                   Decal;                                                      // 0x0228   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0230   (0x0008)  
	float                                              LifeTime;                                                   // 0x0238   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x023C   (0x0004)  MISSED
	UMaterialInstanceDynamic*                          MatInst;                                                    // 0x0240   (0x0008)  
	float                                              CurrentLifeTime;                                            // 0x0248   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_BubbleSplash_Zone.BP_Actor_BubbleSplash_Zone_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_BubbleSplash_Zone.BP_Actor_BubbleSplash_Zone_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Actor_BubbleSplash_Zone.BP_Actor_BubbleSplash_Zone_C.ExecuteUbergraph_BP_Actor_BubbleSplash_Zone
	void ExecuteUbergraph_BP_Actor_BubbleSplash_Zone(int32_t EntryPoint);                                                    // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_BubbleSplash.BP_Projectile_BubbleSplash_C
/// Size: 0x0050 (0x000220 - 0x000270)
class ABP_Projectile_BubbleSplash_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FE_Anomaly_FireField_Splash;                                // 0x0228   (0x0008)  
	UStaticMeshComponent*                              ST_ProgectX_AlienEgg03;                                     // 0x0230   (0x0008)  
	USceneComponent*                                   Scene;                                                      // 0x0238   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0240   (0x0008)  
	UProjectileMovementComponent*                      ProjectileMovement;                                         // 0x0248   (0x0008)  
	FVector                                            DownLocation;                                               // 0x0250   (0x000C)  
	FVector                                            UpLocation;                                                 // 0x025C   (0x000C)  
	ABP_Actor_BubbleSplash_Zone_C*                     MyBubbleSplashZone;                                         // 0x0268   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_BubbleSplash.BP_Projectile_BubbleSplash_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_BubbleSplash.BP_Projectile_BubbleSplash_C.BndEvt__BP_Projectile_BubbleSplash_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__BP_Projectile_BubbleSplash_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_BubbleSplash.BP_Projectile_BubbleSplash_C.OnSplash
	void OnSplash(FVector SplashLocation);                                                                                   // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Projectile_BubbleSplash.BP_Projectile_BubbleSplash_C.ExecuteUbergraph_BP_Projectile_BubbleSplash
	void ExecuteUbergraph_BP_Projectile_BubbleSplash(int32_t EntryPoint);                                                    // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C
/// Size: 0x0058 (0x000220 - 0x000278)
class ABP_BubbleSplash_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UDecalComponent*                                   Decal;                                                      // 0x0228   (0x0008)  
	USkeletalMeshComponent*                            SK_HexapodSmall_Ulcer_01_Plane;                             // 0x0230   (0x0008)  
	USceneComponent*                                   Scene;                                                      // 0x0238   (0x0008)  
	UCapsuleComponent*                                 Capsule;                                                    // 0x0240   (0x0008)  
	float                                              LifeTime;                                                   // 0x0248   (0x0004)  
	float                                              DeltaSec;                                                   // 0x024C   (0x0004)  
	char                                               State;                                                      // 0x0250   (0x0001)  
	bool                                               IsDeath;                                                    // 0x0251   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0252   (0x0002)  MISSED
	float                                              Health;                                                     // 0x0254   (0x0004)  
	float                                              ScaleAlpha;                                                 // 0x0258   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x025C   (0x0004)  MISSED
	TArray<AWTLCharacter*>                             CharacterList;                                              // 0x0260   (0x0010)  
	int32_t                                            ID;                                                         // 0x0270   (0x0004)  
	float                                              DelayBloodFX;                                               // 0x0274   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.CheckEnemy
	void CheckEnemy();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.OnTakeDamage
	void OnTakeDamage(FVector ToVector);                                                                                     // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_BubbleSplash.BP_BubbleSplash_C.ExecuteUbergraph_BP_BubbleSplash
	void ExecuteUbergraph_BP_BubbleSplash(int32_t EntryPoint);                                                               // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Meshes/ProjectX/AlienRoofMonster/Meshes/AB_ToxicBomber.AB_ToxicBomber_C
/// Size: 0x0450 (0x0002C0 - 0x000710)
class UAB_ToxicBomber_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x02F8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0320   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0348   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0370   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0398   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0418   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0448   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x04C8   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x04F8   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0578   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x05A8   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0628   (0x0030)  
	FAnimNode_StateMachine                             AnimGraphNode_StateMachine;                                 // 0x0658   (0x00B0)  
	FName                                              State;                                                      // 0x0708   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienRoofMonster/Meshes/AB_ToxicBomber.AB_ToxicBomber_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienRoofMonster/Meshes/AB_ToxicBomber.AB_ToxicBomber_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ToxicBomber_AnimGraphNode_TransitionResult_8C21413F43D6A6C2F4851DB47CBFAA12
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ToxicBomber_AnimGraphNode_TransitionResult_8C21413F43D6A6C2F4851DB47CBFAA12(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienRoofMonster/Meshes/AB_ToxicBomber.AB_ToxicBomber_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ToxicBomber_AnimGraphNode_TransitionResult_8FAAF5674B9CD571B153E18131B5B795
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_ToxicBomber_AnimGraphNode_TransitionResult_8FAAF5674B9CD571B153E18131B5B795(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienRoofMonster/Meshes/AB_ToxicBomber.AB_ToxicBomber_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/AlienRoofMonster/Meshes/AB_ToxicBomber.AB_ToxicBomber_C.ExecuteUbergraph_AB_ToxicBomber
	void ExecuteUbergraph_AB_ToxicBomber(int32_t EntryPoint);                                                                // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C
/// Size: 0x0031 (0x000F10 - 0x000F41)
class ABP_Monster_Tentacle_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UParticleSystemComponent*                          ParticleSystem1;                                            // 0x0F18   (0x0008)  
	UParticleSystemComponent*                          ParticleSystem;                                             // 0x0F20   (0x0008)  
	UArrowComponent*                                   Arrow1;                                                     // 0x0F28   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F30   (0x0004)  
	float                                              CurrentMeshOffsetZ;                                         // 0x0F34   (0x0004)  
	FName                                              State;                                                      // 0x0F38   (0x0008)  
	bool                                               isCheckOwner;                                               // 0x0F40   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.CheckOwner
	void CheckOwner(bool& IsAlive);                                                                                          // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.UpdateMesh
	void UpdateMesh();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.CheckEnemy
	void CheckEnemy();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.SInit
	void SInit();                                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Tentacle/BP_Monster_Tentacle.BP_Monster_Tentacle_C.ExecuteUbergraph_BP_Monster_Tentacle
	void ExecuteUbergraph_BP_Monster_Tentacle(int32_t EntryPoint);                                                           // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C
/// Size: 0x0045 (0x000F10 - 0x000F55)
class ABP_Monster_ToxicBomber_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UArrowComponent*                                   Arrow1;                                                     // 0x0F18   (0x0008)  
	FName                                              State;                                                      // 0x0F20   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F28   (0x0004)  
	float                                              TimeReload;                                                 // 0x0F2C   (0x0004)  
	float                                              TimeSpawn;                                                  // 0x0F30   (0x0004)  
	float                                              CurrentTimeReload;                                          // 0x0F34   (0x0004)  
	float                                              CurrentTimeSpawn;                                           // 0x0F38   (0x0004)  
	float                                              CurrentTimeDelayShot;                                       // 0x0F3C   (0x0004)  
	float                                              TimeDelayShot;                                              // 0x0F40   (0x0004)  
	float                                              TimeShot;                                                   // 0x0F44   (0x0004)  
	float                                              CurrentTimeShot;                                            // 0x0F48   (0x0004)  
	FName                                              CState;                                                     // 0x0F4C   (0x0008)  
	bool                                               IsDeath;                                                    // 0x0F54   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.SFindCharacter
	void SFindCharacter();                                                                                                   // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.UpdateCollision
	void UpdateCollision();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.SUpdateState
	void SUpdateState();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicBomber.BP_Monster_ToxicBomber_C.ExecuteUbergraph_BP_Monster_ToxicBomber
	void ExecuteUbergraph_BP_Monster_ToxicBomber(int32_t EntryPoint);                                                        // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C
/// Size: 0x0050 (0x000F10 - 0x000F60)
class ABP_Monster_ToxicSpitter_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	USpotLightComponent*                               SpotLight;                                                  // 0x0F18   (0x0008)  
	UStaticMeshComponent*                              BackMesh;                                                   // 0x0F20   (0x0008)  
	UArrowComponent*                                   Arrow1;                                                     // 0x0F28   (0x0008)  
	AWTLCharacter*                                     EnemyTarget;                                                // 0x0F30   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F38   (0x0004)  
	bool                                               IsAttack;                                                   // 0x0F3C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0F3D   (0x0003)  MISSED
	float                                              FindDistance;                                               // 0x0F40   (0x0004)  
	bool                                               IsDeath;                                                    // 0x0F44   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0F45   (0x0003)  MISSED
	float                                              TimeReloadAttack;                                           // 0x0F48   (0x0004)  
	float                                              MaxTimeReloadAttack;                                        // 0x0F4C   (0x0004)  
	bool                                               IsReadyToAttack;                                            // 0x0F50   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0F51   (0x0007)  MISSED
	UMaterialInstanceDynamic*                          MatInst;                                                    // 0x0F58   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.CVFXUpdateHealth
	void CVFXUpdateHealth();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.UpdateFarAttack
	void UpdateFarAttack();                                                                                                  // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.FindEnemy
	void FindEnemy();                                                                                                        // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_Monster_ToxicSpitter.BP_Monster_ToxicSpitter_C.ExecuteUbergraph_BP_Monster_ToxicSpitter
	void ExecuteUbergraph_BP_Monster_ToxicSpitter(int32_t EntryPoint);                                                       // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C
/// Size: 0x0045 (0x000F10 - 0x000F55)
class ABP_Swarm_0_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UParticleSystemComponent*                          PS_PhaseShift_Looping;                                      // 0x0F18   (0x0008)  
	UFMODAudioComponent*                               FE_Flies;                                                   // 0x0F20   (0x0008)  
	AActor*                                            mTargetActor;                                               // 0x0F28   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F30   (0x0004)  
	float                                              DelayFindTargetTime;                                        // 0x0F34   (0x0004)  
	FVector                                            StartLocation;                                              // 0x0F38   (0x000C)  
	float                                              SpeedRotation;                                              // 0x0F44   (0x0004)  
	float                                              DesiredSpeedRotation;                                       // 0x0F48   (0x0004)  
	float                                              TimeChangeSpeedRotation;                                    // 0x0F4C   (0x0004)  
	float                                              TimeReloadAttack;                                           // 0x0F50   (0x0004)  
	bool                                               IsDeath;                                                    // 0x0F54   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.SUpdateAttackEnemy
	void SUpdateAttackEnemy();                                                                                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.SUpdateSpeedRotation
	void SUpdateSpeedRotation();                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.SUpdateMovement
	void SUpdateMovement();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.SUpdateRotation
	void SUpdateRotation();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.SCheckTargetActor
	void SCheckTargetActor(bool& Result);                                                                                    // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.SFindTarget
	void SFindTarget();                                                                                                      // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_Swarm.BP_Swarm_0_C.ExecuteUbergraph_BP_Swarm
	void ExecuteUbergraph_BP_Swarm(int32_t EntryPoint);                                                                      // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/Meshes/ProjectX/SporeSmall/AB_SpawnerHornetsSwarm.AB_SpawnerHornetsSwarm_C
/// Size: 0x0100 (0x0003A0 - 0x0004A0)
class UAB_SpawnerHornetsSwarm_C : public UWTLMonsterPawnAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x03A0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x03A8   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x03D8   (0x0080)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x0458   (0x0048)  


	/// Functions
	// Function /Game/WTL/Monsters/Meshes/ProjectX/SporeSmall/AB_SpawnerHornetsSwarm.AB_SpawnerHornetsSwarm_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/SporeSmall/AB_SpawnerHornetsSwarm.AB_SpawnerHornetsSwarm_C.ExecuteUbergraph_AB_SpawnerHornetsSwarm
	void ExecuteUbergraph_AB_SpawnerHornetsSwarm(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C
/// Size: 0x001C (0x000F10 - 0x000F2C)
class ABP_Pawn_SpawnerHornetsSwarm_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UBPAC_SpawnMonsters_C*                             BPAC_SpawnMonsters;                                         // 0x0F18   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F20   (0x0004)  
	bool                                               IsDeath;                                                    // 0x0F24   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0F25   (0x0003)  MISSED
	float                                              TimeSpawnSwarm;                                             // 0x0F28   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C.OnMonsterDeath
	void OnMonsterDeath();                                                                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Pawn_SpawnerHornetsSwarm.BP_Pawn_SpawnerHornetsSwarm_C.ExecuteUbergraph_BP_Pawn_SpawnerHornetsSwarm
	void ExecuteUbergraph_BP_Pawn_SpawnerHornetsSwarm(int32_t EntryPoint);                                                   // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C
/// Size: 0x0038 (0x000220 - 0x000258)
class ABP_SporeSpike_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USkeletalMeshComponent*                            SK_Whip_01;                                                 // 0x0228   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0230   (0x0008)  
	UAB_Whip_01_Skeleton_C*                            myAnimInstance;                                             // 0x0238   (0x0008)  
	FVector                                            TargetLocation;                                             // 0x0240   (0x000C)  
	bool                                               LocationFound;                                              // 0x024C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x024D   (0x0003)  MISSED
	AActor*                                            TargetActor;                                                // 0x0250   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C.SetAttackLocationn
	void SetAttackLocationn(FVector Location);                                                                               // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C.OnSpikeAttack
	void OnSpikeAttack();                                                                                                    // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C.OnAttackLocation
	void OnAttackLocation(FVector Location);                                                                                 // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike.BP_SporeSpike_C.ExecuteUbergraph_BP_SporeSpike
	void ExecuteUbergraph_BP_SporeSpike(int32_t EntryPoint);                                                                 // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C
/// Size: 0x0074 (0x000F10 - 0x000F84)
class ABP_Monster_FunnyBall_C : public AWTLMonsterPawnBase
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0F18   (0x0008)  
	UStaticMeshComponent*                              ST_AlienSporeSphera01;                                      // 0x0F20   (0x0008)  
	USceneComponent*                                   Scene;                                                      // 0x0F28   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F30   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0F34   (0x0004)  MISSED
	AActor*                                            MyTarget;                                                   // 0x0F38   (0x0008)  
	FRotator                                           CurrentRotation;                                            // 0x0F40   (0x000C)  
	FRotator                                           TargetRotation;                                             // 0x0F4C   (0x000C)  
	FVector                                            CurrentDirection;                                           // 0x0F58   (0x000C)  
	FVector                                            DesiredDirection;                                           // 0x0F64   (0x000C)  
	bool                                               IsDeath;                                                    // 0x0F70   (0x0001)  
	bool                                               IsCanGiveDamage;                                            // 0x0F71   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0F72   (0x0002)  MISSED
	FVector                                            SpawnLocation;                                              // 0x0F74   (0x000C)  
	float                                              WalkingDistance;                                            // 0x0F80   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.CUpdateAccRotation
	void CUpdateAccRotation();                                                                                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.SUpdateMoveToTarget
	void SUpdateMoveToTarget();                                                                                              // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.SFindTarget
	void SFindTarget();                                                                                                      // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.BndEvt__BP_Monster_SphereWithThorns_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
	void BndEvt__BP_Monster_SphereWithThorns_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_FunnyBall.BP_Monster_FunnyBall_C.ExecuteUbergraph_BP_Monster_FunnyBall
	void ExecuteUbergraph_BP_Monster_FunnyBall(int32_t EntryPoint);                                                          // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_GrainOfLife_Projectile.BP_GrainOfLife_Projectile_C
/// Size: 0x0021 (0x000220 - 0x000241)
class ABP_GrainOfLife_Projectile_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UParticleSystemComponent*                          P_Ultimate_Seed_Projectile;                                 // 0x0228   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0230   (0x0008)  
	UProjectileMovementComponent*                      ProjectileMovement;                                         // 0x0238   (0x0008)  
	bool                                               IsDestroy;                                                  // 0x0240   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_GrainOfLife_Projectile.BP_GrainOfLife_Projectile_C.OnRep_IsDestroy
	void OnRep_IsDestroy();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_GrainOfLife_Projectile.BP_GrainOfLife_Projectile_C.BndEvt__BP_Spit_Projectile_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__BP_Spit_Projectile_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_GrainOfLife_Projectile.BP_GrainOfLife_Projectile_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_GrainOfLife_Projectile.BP_GrainOfLife_Projectile_C.OnDestroySpawner
	void OnDestroySpawner(AActor* DestroyedActor);                                                                           // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_GrainOfLife_Projectile.BP_GrainOfLife_Projectile_C.ExecuteUbergraph_BP_GrainOfLife_Projectile
	void ExecuteUbergraph_BP_GrainOfLife_Projectile(int32_t EntryPoint);                                                     // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C
/// Size: 0x0808 (0x0002C0 - 0x000AC8)
class UAB_Whip_01_Skeleton_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x02F8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0320   (0x0028)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x0348   (0x0008)  MISSED
	FAnimNode_Fabrik                                   AnimGraphNode_Fabrik;                                       // 0x0350   (0x0190)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x04E0   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x05E8   (0x0108)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x06F0   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x0710   (0x0108)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x0818   (0x0020)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x0838   (0x0048)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0880   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0900   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0930   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x09B0   (0x0030)  
	FAnimNode_StateMachine                             AnimGraphNode_StateMachine;                                 // 0x09E0   (0x00B0)  
	bool                                               Active_Value;                                               // 0x0A90   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0A91   (0x0003)  MISSED
	FVector                                            TargtPoint;                                                 // 0x0A94   (0x000C)  
	float                                              PowerIK;                                                    // 0x0AA0   (0x0004)  
	FVector                                            Scale;                                                      // 0x0AA4   (0x000C)  
	float                                              ScaleY;                                                     // 0x0AB0   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0AB4   (0x0004)  MISSED
	FMulticastInlineDelegate                           EventDispatcher_SpikeAttack;                                // 0x0AB8   (0x0010)  


	/// Functions
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_TransitionResult_E0B36AD94BCE1344BAF81E9C82E12451
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_TransitionResult_E0B36AD94BCE1344BAF81E9C82E12451(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_ModifyBone_9C2E0F024D4D3EBC35FDCAB1F2E5C485
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_ModifyBone_9C2E0F024D4D3EBC35FDCAB1F2E5C485(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_Fabrik_0FB7F53941928C2FEBDCC1BA0081A9FD
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_Fabrik_0FB7F53941928C2FEBDCC1BA0081A9FD(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_ModifyBone_5FEC64FA412BFD0FB27603B45A4DC9CC
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Whip_01_Skeleton_AnimGraphNode_ModifyBone_5FEC64FA412BFD0FB27603B45A4DC9CC(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.AnimNotify_SpikeAttack
	void AnimNotify_SpikeAttack();                                                                                           // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.ExecuteUbergraph_AB_Whip_01_Skeleton
	void ExecuteUbergraph_AB_Whip_01_Skeleton(int32_t EntryPoint);                                                           // [0x1ad0090] Final|HasDefaults    
	// Function /Game/WTL/Monsters/Meshes/ProjectX/Whip01/BP/AB_Whip_01_Skeleton.AB_Whip_01_Skeleton_C.EventDispatcher_SpikeAttack__DelegateSignature
	void EventDispatcher_SpikeAttack__DelegateSignature();                                                                   // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C
/// Size: 0x009D (0x000280 - 0x00031D)
class ABP_Walker_Spore_C : public APawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0280   (0x0008)  
	UStaticMeshComponent*                              SM_Fey_Ult_Seed;                                            // 0x0288   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0290   (0x0008)  
	UBillboardComponent*                               billboard;                                                  // 0x0298   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x02A0   (0x0008)  
	float                                              DeltaSec;                                                   // 0x02A8   (0x0004)  
	FVector                                            StartLocation;                                              // 0x02AC   (0x000C)  
	USplineComponent*                                  mySpline;                                                   // 0x02B8   (0x0008)  
	FVector                                            TargetLocation;                                             // 0x02C0   (0x000C)  
	FVector                                            ImpactNormal;                                               // 0x02CC   (0x000C)  
	float                                              Speed;                                                      // 0x02D8   (0x0004)  
	FVector                                            ImpactPoint;                                                // 0x02DC   (0x000C)  
	FVector                                            OldImpactPoint;                                             // 0x02E8   (0x000C)  
	int32_t                                            DirID;                                                      // 0x02F4   (0x0004)  
	float                                              OldLenght;                                                  // 0x02F8   (0x0004)  
	int32_t                                            SetDirID;                                                   // 0x02FC   (0x0004)  
	float                                              OldLenght100;                                               // 0x0300   (0x0004)  
	bool                                               IsUpdateSplinePoints;                                       // 0x0304   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0305   (0x0003)  MISSED
	int32_t                                            CurrentPointID;                                             // 0x0308   (0x0004)  
	int32_t                                            CountIteration;                                             // 0x030C   (0x0004)  
	int32_t                                            Counter;                                                    // 0x0310   (0x0004)  
	bool                                               IsStartWalkerOnClient;                                      // 0x0314   (0x0001)  
	bool                                               IsFinish;                                                   // 0x0315   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0316   (0x0002)  MISSED
	float                                              CurrentLenght;                                              // 0x0318   (0x0004)  
	bool                                               SpawnSpore;                                                 // 0x031C   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.UpdateSplinePoints
	void UpdateSplinePoints();                                                                                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.CheckSplineLenght
	void CheckSplineLenght();                                                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.AddWalkerSplineMesh
	void AddWalkerSplineMesh(float InDistance);                                                                              // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.UpdateMovement
	void UpdateMovement();                                                                                                   // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore.BP_Walker_Spore_C.ExecuteUbergraph_BP_Walker_Spore
	void ExecuteUbergraph_BP_Walker_Spore(int32_t EntryPoint);                                                               // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_CameraShake_SporeSpike.BP_CameraShake_SporeSpike_C
/// Size: 0x0000 (0x000180 - 0x000180)
class UBP_CameraShake_SporeSpike_C : public UMatineeCameraShake
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh.BP_Walker_SplineMesh_C
/// Size: 0x0039 (0x000220 - 0x000259)
class ABP_Walker_SplineMesh_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0228   (0x0008)  
	USplineMeshComponent*                              SplineMesh;                                                 // 0x0230   (0x0008)  
	USplineComponent*                                  mySpline;                                                   // 0x0238   (0x0008)  
	float                                              myPositionDistance;                                         // 0x0240   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0244   (0x0004)  MISSED
	UMaterialInstanceDynamic*                          myDynamicMaterial;                                          // 0x0248   (0x0008)  
	ABP_Walker_Spore_C*                                MyWalker;                                                   // 0x0250   (0x0008)  
	bool                                               IsDeath;                                                    // 0x0258   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh.BP_Walker_SplineMesh_C.UpdateMesh
	void UpdateMesh();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh.BP_Walker_SplineMesh_C.Init Mesh
	void Init Mesh(UStaticMesh* NewStaticMesh, USplineComponent* Spline, float PositionDistance, ABP_Walker_Spore_C* InWalker); // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh.BP_Walker_SplineMesh_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh.BP_Walker_SplineMesh_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh.BP_Walker_SplineMesh_C.ExecuteUbergraph_BP_Walker_SplineMesh
	void ExecuteUbergraph_BP_Walker_SplineMesh(int32_t EntryPoint);                                                          // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/Hornet/AB_Hornet_Correct.AB_Hornet_Correct_C
/// Size: 0x0100 (0x0003A0 - 0x0004A0)
class UAB_Hornet_Correct_C : public UWTLMonsterPawnAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x03A0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x03A8   (0x0030)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x03D8   (0x0048)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0420   (0x0080)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/AB_Hornet_Correct.AB_Hornet_Correct_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/AB_Hornet_Correct.AB_Hornet_Correct_C.ExecuteUbergraph_AB_Hornet_Correct
	void ExecuteUbergraph_AB_Hornet_Correct(int32_t EntryPoint);                                                             // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/Projectile/BP_MonsterProjectileRegular10000.BP_MonsterProjectileRegular10000_C
/// Size: 0x0000 (0x000298 - 0x000298)
class ABP_MonsterProjectileRegular10000_C : public AWTLMonsterProjectile
{ 
public:
};

/// Class /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C
/// Size: 0x0055 (0x0000B0 - 0x000105)
class UBP_BulletHell_Component_C : public UActorComponent
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x00B0   (0x0008)  
	UClass*                                            BulletInstance;                                             // 0x00B8   (0x0008)  
	float                                              ReloadTime;                                                 // 0x00C0   (0x0004)  
	float                                              DelayAttack;                                                // 0x00C4   (0x0004)  
	float                                              DeltaSec;                                                   // 0x00C8   (0x0004)  
	float                                              CurrentReloadTime;                                          // 0x00CC   (0x0004)  
	float                                              CurrentDelayAttack;                                         // 0x00D0   (0x0004)  
	bool                                               IsReadyToShoot;                                             // 0x00D4   (0x0001)  
	bool                                               IsReadyToAttack;                                            // 0x00D5   (0x0001)  
	bool                                               IsAttack;                                                   // 0x00D6   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x00D7   (0x0001)  MISSED
	FVector                                            TargetLocation;                                             // 0x00D8   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x00E4   (0x0004)  MISSED
	AActor*                                            TargetActor;                                                // 0x00E8   (0x0008)  
	int32_t                                            TypeAttack;                                                 // 0x00F0   (0x0004)  
	bool                                               IsOneShoot;                                                 // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00F5   (0x0003)  MISSED
	FVector                                            SpawnOffsetLocation;                                        // 0x00F8   (0x000C)  
	bool                                               UseTargetActor;                                             // 0x0104   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C.Reload
	void Reload();                                                                                                           // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C.StopAttack
	void StopAttack();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C.StartAttack
	void StartAttack(FVector InTargetLocation, AActor* inTargetActor, bool inOneShoot, FVector OffsetLocation);              // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C.SUpdateTime
	void SUpdateTime();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_Component.BP_BulletHell_Component_C.ExecuteUbergraph_BP_BulletHell_Component
	void ExecuteUbergraph_BP_BulletHell_Component(int32_t EntryPoint);                                                       // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_Base_V2.BP_BulletHell_Base_V2_C
/// Size: 0x0031 (0x000220 - 0x000251)
class ABP_BulletHell_Base_V2_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0230   (0x0004)  
	float                                              Radius;                                                     // 0x0234   (0x0004)  
	FVector                                            OldLocation;                                                // 0x0238   (0x000C)  
	bool                                               IsDestroy;                                                  // 0x0244   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	float                                              Speed;                                                      // 0x0248   (0x0004)  
	float                                              Damage;                                                     // 0x024C   (0x0004)  
	bool                                               IsCheckSphereTrace;                                         // 0x0250   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_Base_V2.BP_BulletHell_Base_V2_C.UpdateMove
	void UpdateMove();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_Base_V2.BP_BulletHell_Base_V2_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_Base_V2.BP_BulletHell_Base_V2_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_Base_V2.BP_BulletHell_Base_V2_C.OnDestroy
	void OnDestroy(AActor* inHitActor, FVector inImpactPoint);                                                               // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_Base_V2.BP_BulletHell_Base_V2_C.ExecuteUbergraph_BP_BulletHell_Base_V2
	void ExecuteUbergraph_BP_BulletHell_Base_V2(int32_t EntryPoint);                                                         // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_1_C
/// Size: 0x0017 (0x000251 - 0x000268)
class ABP_BulletHell_V2_1_C : public ABP_BulletHell_Base_V2_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x7];                                       // 0x0251   (0x0007)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0258   (0x0008)  
	UParticleSystemComponent*                          P_Fey_Nettles_Targeting;                                    // 0x0260   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_1_C.OnDestroy
	void OnDestroy(AActor* inHitActor, FVector inImpactPoint);                                                               // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_1_C.ExecuteUbergraph_BP_BulletHell_V2
	void ExecuteUbergraph_BP_BulletHell_V2(int32_t EntryPoint);                                                              // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh_V2.BP_Walker_SplineMesh_V2_C
/// Size: 0x0020 (0x000220 - 0x000240)
class ABP_Walker_SplineMesh_V2_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0228   (0x0008)  
	USplineMeshComponent*                              SplineMesh;                                                 // 0x0230   (0x0008)  
	UMaterialInstanceDynamic*                          myDynamicMaterial;                                          // 0x0238   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh_V2.BP_Walker_SplineMesh_V2_C.UpdateMesh
	void UpdateMesh(float inStartLenght, float inCurrentLenght, USplineComponent* inSpline);                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh_V2.BP_Walker_SplineMesh_V2_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh_V2.BP_Walker_SplineMesh_V2_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh_V2.BP_Walker_SplineMesh_V2_C.ReceiveEndPlay
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_SplineMesh_V2.BP_Walker_SplineMesh_V2_C.ExecuteUbergraph_BP_Walker_SplineMesh_V2
	void ExecuteUbergraph_BP_Walker_SplineMesh_V2(int32_t EntryPoint);                                                       // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C
/// Size: 0x0086 (0x000280 - 0x000306)
class ABP_Walker_Spore_V2_C : public APawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0280   (0x0008)  
	UStaticMeshComponent*                              SM_Fey_Ult_Seed;                                            // 0x0288   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0290   (0x0008)  
	UBillboardComponent*                               billboard;                                                  // 0x0298   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x02A0   (0x0008)  
	float                                              DeltaSec;                                                   // 0x02A8   (0x0004)  
	FVector                                            StartLocation;                                              // 0x02AC   (0x000C)  
	USplineComponent*                                  mySpline;                                                   // 0x02B8   (0x0008)  
	FVector                                            TargetLocation;                                             // 0x02C0   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x02CC   (0x0004)  MISSED
	AActor*                                            myOwner;                                                    // 0x02D0   (0x0008)  
	bool                                               IsUpdatePoints;                                             // 0x02D8   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02D9   (0x0003)  MISSED
	int32_t                                            StateUpdatePoints;                                          // 0x02DC   (0x0004)  
	int32_t                                            CurrentIDSplinePoint;                                       // 0x02E0   (0x0004)  
	float                                              CurrentLenght;                                              // 0x02E4   (0x0004)  
	float                                              OldLenght;                                                  // 0x02E8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02EC   (0x0004)  MISSED
	TArray<ABP_Walker_SplineMesh_V2_C*>                Meshes;                                                     // 0x02F0   (0x0010)  
	float                                              Speed;                                                      // 0x0300   (0x0004)  
	bool                                               IsAddSplineMesh;                                            // 0x0304   (0x0001)  
	bool                                               IsDestroy;                                                  // 0x0305   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.CRemoveAllMeshes
	void CRemoveAllMeshes();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.DeactivateWalker
	void DeactivateWalker();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.UpdateSplineMesh
	void UpdateSplineMesh();                                                                                                 // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.UpdatePoints
	void UpdatePoints();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.SInit
	void SInit(FVector inStartLocation, FVector InTargetLocation, AActor* inOwner);                                          // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.ReceiveEndPlay
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_Walker_Spore_V2.BP_Walker_Spore_V2_C.ExecuteUbergraph_BP_Walker_Spore_V2
	void ExecuteUbergraph_BP_Walker_Spore_V2(int32_t EntryPoint);                                                            // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C
/// Size: 0x0048 (0x000F10 - 0x000F58)
class ABP_Monster_Turret_Spore_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	USceneComponent*                                   SceneSpawnPoint;                                            // 0x0F18   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F20   (0x0004)  
	bool                                               IsInit;                                                     // 0x0F24   (0x0001)  
	bool                                               IsScaled;                                                   // 0x0F25   (0x0001)  
	bool                                               IsDeath;                                                    // 0x0F26   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0F27   (0x0001)  MISSED
	float                                              MyScale;                                                    // 0x0F28   (0x0004)  
	float                                              MaxScale;                                                   // 0x0F2C   (0x0004)  
	float                                              ReloadTimeToSpawn;                                          // 0x0F30   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0F34   (0x0004)  MISSED
	AActor*                                            MyWalker;                                                   // 0x0F38   (0x0008)  
	AWTLMonsterPawn*                                   myMonster;                                                  // 0x0F40   (0x0008)  
	float                                              CurrentReloadTimeToSpawn;                                   // 0x0F48   (0x0004)  
	bool                                               IsOffsetZ;                                                  // 0x0F4C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0F4D   (0x0003)  MISSED
	float                                              TargetOffsetZ;                                              // 0x0F50   (0x0004)  
	float                                              CurrentOffsetZ;                                             // 0x0F54   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.UpdateOffsetZ
	void UpdateOffsetZ();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.SUpdateSpawnMyMonster
	void SUpdateSpawnMyMonster();                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.CheckOwner
	void CheckOwner();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.UpdateScale
	void UpdateScale();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.OnMonsterDeath
	void OnMonsterDeath();                                                                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Monster_Turret_Spore.BP_Monster_Turret_Spore_C.ExecuteUbergraph_BP_Monster_Turret_Spore
	void ExecuteUbergraph_BP_Monster_Turret_Spore(int32_t EntryPoint);                                                       // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_0_C
/// Size: 0x0017 (0x000251 - 0x000268)
class ABP_BulletHell_V2_0_C : public ABP_BulletHell_Base_V2_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x7];                                       // 0x0251   (0x0007)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0258   (0x0008)  
	UParticleSystemComponent*                          P_Fey_Nettles_Targeting;                                    // 0x0260   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_0_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_0_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_0_C.OnDestroy
	void OnDestroy(AActor* inHitActor, FVector inImpactPoint);                                                               // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_BulletHell_V2.BP_BulletHell_V2_0_C.ExecuteUbergraph_BP_BulletHell_V2
	void ExecuteUbergraph_BP_BulletHell_V2(int32_t EntryPoint);                                                              // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Meshes/ProjectX/TopSpore/RemakeAnim/AB_Spore_Remake.AB_Spore_Remake_C
/// Size: 0x01D9 (0x0002C0 - 0x000499)
class UAB_Spore_Remake_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x02F8   (0x0080)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x0378   (0x00A0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0418   (0x0080)  
	bool                                               IsStop;                                                     // 0x0498   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/Meshes/ProjectX/TopSpore/RemakeAnim/AB_Spore_Remake.AB_Spore_Remake_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/TopSpore/RemakeAnim/AB_Spore_Remake.AB_Spore_Remake_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Meshes/ProjectX/TopSpore/RemakeAnim/AB_Spore_Remake.AB_Spore_Remake_C.ExecuteUbergraph_AB_Spore_Remake
	void ExecuteUbergraph_AB_Spore_Remake(int32_t EntryPoint);                                                               // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C
/// Size: 0x0098 (0x000F10 - 0x000FA8)
class ABP_Pawn_Spore_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UBP_BulletHell_ConeAttack_C*                       BP_BulletHell_ConeAttack;                                   // 0x0F18   (0x0008)  
	UBP_BulletHell_FillConeAttack_C*                   BP_BulletHell_FillConeAttack;                               // 0x0F20   (0x0008)  
	UParticleSystemComponent*                          P_Growth_PoisonSpores_ProjectX;                             // 0x0F28   (0x0008)  
	UParticleSystemComponent*                          P_Dust;                                                     // 0x0F30   (0x0008)  
	UCapsuleComponent*                                 Capsule;                                                    // 0x0F38   (0x0008)  
	UBPAC_SpawnMonsters_C*                             BPAC_SpawnMonsters;                                         // 0x0F40   (0x0008)  
	UBP_LegendaryMonsterComponent_C*                   BP_LegendaryMonsterComponent;                               // 0x0F48   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F50   (0x0004)  
	TEnumAsByte<E_StateObject>                         State;                                                      // 0x0F54   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0F55   (0x0003)  MISSED
	float                                              DesiredHideZ;                                               // 0x0F58   (0x0004)  
	float                                              DesiredVisibleZ;                                            // 0x0F5C   (0x0004)  
	float                                              CurrentOffsetZ;                                             // 0x0F60   (0x0004)  
	float                                              DelaySpawnMonsters;                                         // 0x0F64   (0x0004)  
	float                                              DesiredOffsetZ;                                             // 0x0F68   (0x0004)  
	float                                              SpeedOffsetZ;                                               // 0x0F6C   (0x0004)  
	float                                              myHealthAlpha;                                              // 0x0F70   (0x0004)  
	bool                                               IsShowTower;                                                // 0x0F74   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0F75   (0x0003)  MISSED
	FMulticastInlineDelegate                           ShowTower;                                                  // 0x0F78   (0x0010)  
	FMulticastInlineDelegate                           HideTower;                                                  // 0x0F88   (0x0010)  
	bool                                               IsDeath;                                                    // 0x0F98   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0F99   (0x0007)  MISSED
	AActor*                                            TargetActor;                                                // 0x0FA0   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.CheckStateToTeleport
	void CheckStateToTeleport();                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.UpdateState
	void UpdateState();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.UpdateOffsetZ
	void UpdateOffsetZ();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ActivateHealthBar
	void ActivateHealthBar();                                                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.OnAllSupportDead
	void OnAllSupportDead();                                                                                                 // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.OnSupportSpawnedFinish
	void OnSupportSpawnedFinish();                                                                                           // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ExecuteUbergraph_BP_Pawn_Spore
	void ExecuteUbergraph_BP_Pawn_Spore(int32_t EntryPoint);                                                                 // [0x1ad0090] Final                
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.HideTower__DelegateSignature
	void HideTower__DelegateSignature();                                                                                     // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Pawn_Spore.BP_Pawn_Spore_C.ShowTower__DelegateSignature
	void ShowTower__DelegateSignature();                                                                                     // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C
/// Size: 0x00C0 (0x0000B0 - 0x000170)
class UBPAC_SpawnMonsters_C : public UActorComponent
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x00B0   (0x0008)  
	float                                              DeltaSec;                                                   // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00BC   (0x0004)  MISSED
	UClass*                                            MonsterClass;                                               // 0x00C0   (0x0008)  
	int32_t                                            MinLevel;                                                   // 0x00C8   (0x0004)  
	int32_t                                            MaxLevel;                                                   // 0x00CC   (0x0004)  
	float                                              MinIntervalSpawn;                                           // 0x00D0   (0x0004)  
	float                                              MaxIntervalSpawn;                                           // 0x00D4   (0x0004)  
	float                                              CurrentIntervalSpawn;                                       // 0x00D8   (0x0004)  
	bool                                               IsSpawnActivated;                                           // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00DD   (0x0003)  MISSED
	TArray<AWTLMonsterPawn*>                           myMonsterList;                                              // 0x00E0   (0x0010)  
	float                                              InnerRadius;                                                // 0x00F0   (0x0004)  
	float                                              OuterRadius;                                                // 0x00F4   (0x0004)  
	float                                              TwistingAngle;                                              // 0x00F8   (0x0004)  
	int32_t                                            NumberOfRings;                                              // 0x00FC   (0x0004)  
	int32_t                                            PointsPerRing;                                              // 0x0100   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0104   (0x0004)  MISSED
	TArray<FVector>                                    SpawnLocationList;                                          // 0x0108   (0x0010)  
	int32_t                                            CurrentIDLocation;                                          // 0x0118   (0x0004)  
	TEnumAsByte<E_GenerateStatus>                      EGenerateStatus;                                            // 0x011C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x011D   (0x0003)  MISSED
	AActor*                                            MonsterOwner;                                               // 0x0120   (0x0008)  
	FMulticastInlineDelegate                           OnAllMonstersDead;                                          // 0x0128   (0x0010)  
	int32_t                                            CurrentRing;                                                // 0x0138   (0x0004)  
	int32_t                                            CurrentPoint;                                               // 0x013C   (0x0004)  
	float                                              CurrentTwistingAngle;                                       // 0x0140   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x0144   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnSpawnMonstersFinish;                                      // 0x0148   (0x0010)  
	bool                                               IsShuffleLocationList;                                      // 0x0158   (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x0159   (0x0007)  MISSED
	TArray<FVector>                                    AddLocalOffsetLocationList;                                 // 0x0160   (0x0010)  


	/// Functions
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SKillAllMonsters
	void SKillAllMonsters();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SCheckMonsterList
	void SCheckMonsterList(bool& Result, int32_t& CountAliveMonsters);                                                       // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SGenerateLocations
	void SGenerateLocations();                                                                                               // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SSpawn
	void SSpawn();                                                                                                           // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SUpdateSpawn
	void SUpdateSpawn();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SSpawnDeactivate
	void SSpawnDeactivate();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.SSpawnActivate
	void SSpawnActivate(AActor* inMonsterOwner);                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnSpawnActivated
	void OnSpawnActivated();                                                                                                 // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnSpawnDeactivate
	void OnSpawnDeactivate();                                                                                                // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnAllMonstersDead_Event
	void OnAllMonstersDead_Event();                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnSpawnMonstersFinish_Event
	void OnSpawnMonstersFinish_Event();                                                                                      // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnMyMonsterDeath
	void OnMyMonsterDeath(AWTLMonsterPawn* Monster);                                                                         // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.ExecuteUbergraph_BPAC_SpawnMonsters
	void ExecuteUbergraph_BPAC_SpawnMonsters(int32_t EntryPoint);                                                            // [0x1ad0090] Final                
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnSpawnMonstersFinish__DelegateSignature
	void OnSpawnMonstersFinish__DelegateSignature();                                                                         // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BPAC_SpawnMonsters.BPAC_SpawnMonsters_C.OnAllMonstersDead__DelegateSignature
	void OnAllMonstersDead__DelegateSignature();                                                                             // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Monsters/Components/BP_BulletHell_FillConeAttack.BP_BulletHell_FillConeAttack_C
/// Size: 0x0057 (0x000105 - 0x00015C)
class UBP_BulletHell_FillConeAttack_C : public UBP_BulletHell_Component_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x3];                                       // 0x0105   (0x0003)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0108   (0x0008)  
	float                                              SpreadAngle;                                                // 0x0110   (0x0004)  
	float                                              PitchAngle;                                                 // 0x0114   (0x0004)  
	float                                              RollAngle;                                                  // 0x0118   (0x0004)  
	float                                              YawAngle;                                                   // 0x011C   (0x0004)  
	FVector                                            UpAxis;                                                     // 0x0120   (0x000C)  
	FVector                                            ForwardAxis;                                                // 0x012C   (0x000C)  
	FVector                                            Direction;                                                  // 0x0138   (0x000C)  
	FVector                                            RightVector;                                                // 0x0144   (0x000C)  
	bool                                               IsStartShot;                                                // 0x0150   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0151   (0x0003)  MISSED
	int32_t                                            NumShots;                                                   // 0x0154   (0x0004)  
	int32_t                                            CurrentNumShots;                                            // 0x0158   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_FillConeAttack.BP_BulletHell_FillConeAttack_C.Shot
	void Shot();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_FillConeAttack.BP_BulletHell_FillConeAttack_C.SUpdateAttack
	void SUpdateAttack();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_FillConeAttack.BP_BulletHell_FillConeAttack_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_FillConeAttack.BP_BulletHell_FillConeAttack_C.ExecuteUbergraph_BP_BulletHell_FillConeAttack
	void ExecuteUbergraph_BP_BulletHell_FillConeAttack(int32_t EntryPoint);                                                  // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/Components/BP_BulletHell_ConeAttack.BP_BulletHell_ConeAttack_C
/// Size: 0x0037 (0x000105 - 0x00013C)
class UBP_BulletHell_ConeAttack_C : public UBP_BulletHell_Component_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x3];                                       // 0x0105   (0x0003)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0108   (0x0008)  
	float                                              SpreadAngle;                                                // 0x0110   (0x0004)  
	float                                              StartAngle;                                                 // 0x0114   (0x0004)  
	FVector                                            Axis;                                                       // 0x0118   (0x000C)  
	FVector                                            Direction;                                                  // 0x0124   (0x000C)  
	bool                                               IsStartShot;                                                // 0x0130   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0131   (0x0003)  MISSED
	int32_t                                            NumShots;                                                   // 0x0134   (0x0004)  
	int32_t                                            CurrentNumShots;                                            // 0x0138   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_ConeAttack.BP_BulletHell_ConeAttack_C.Shot
	void Shot();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_ConeAttack.BP_BulletHell_ConeAttack_C.SUpdateAttack
	void SUpdateAttack();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_ConeAttack.BP_BulletHell_ConeAttack_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_BulletHell_ConeAttack.BP_BulletHell_ConeAttack_C.ExecuteUbergraph_BP_BulletHell_ConeAttack
	void ExecuteUbergraph_BP_BulletHell_ConeAttack(int32_t EntryPoint);                                                      // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C
/// Size: 0x00D4 (0x000F10 - 0x000FE4)
class ABP_Pawn_Thorn_C : public AWTLMonsterPawnInputMode
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Devourer_Spike_00;                               // 0x0F18   (0x0008)  
	UBP_BulletHell_ConeAttack_C*                       BP_BulletHell_ConeAttack;                                   // 0x0F20   (0x0008)  
	UAIPerceptionComponent*                            AIPerception;                                               // 0x0F28   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0F30   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F38   (0x0004)  
	float                                              TimeToNesxtFlyLocation;                                     // 0x0F3C   (0x0004)  
	float                                              MaxFlyDistance;                                             // 0x0F40   (0x0004)  
	float                                              TimeReloadAttack;                                           // 0x0F44   (0x0004)  
	float                                              CurrentReloadAttack;                                        // 0x0F48   (0x0004)  
	FVector                                            SpawnLocation;                                              // 0x0F4C   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x0F58   (0x000C)  
	FVector                                            LookAtLocation;                                             // 0x0F64   (0x000C)  
	FVector                                            VectorHitOffset;                                            // 0x0F70   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0F7C   (0x0004)  MISSED
	AActor*                                            TargetActor;                                                // 0x0F80   (0x0008)  
	FRotator                                           CurrentFlyRotation;                                         // 0x0F88   (0x000C)  
	FRotator                                           DesiredFlyRotation;                                         // 0x0F94   (0x000C)  
	FRotator                                           CurrentLookRotation;                                        // 0x0FA0   (0x000C)  
	FRotator                                           DesiredLookRotation;                                        // 0x0FAC   (0x000C)  
	bool                                               IsDeath;                                                    // 0x0FB8   (0x0001)  
	char                                               TraceID;                                                    // 0x0FB9   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0FBA   (0x0002)  MISSED
	float                                              Reload;                                                     // 0x0FBC   (0x0004)  
	FWTLMonsterDeathData                               DeathData;                                                  // 0x0FC0   (0x0024)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.Attack
	void Attack();                                                                                                           // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.UpdateDeath
	void UpdateDeath();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SApplyDamageToTargetActor
	void SApplyDamageToTargetActor();                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.CDrawAttackTracer
	void CDrawAttackTracer();                                                                                                // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SActorIsEnemy
	void SActorIsEnemy(AActor* pActor, bool& Result, AActor*& Actor);                                                        // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SUpdateAttack
	void SUpdateAttack();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SUpdateTargetActor
	void SUpdateTargetActor();                                                                                               // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.DrawDebug
	void DrawDebug();                                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SUpdateHitTrace
	void SUpdateHitTrace();                                                                                                  // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SUpdateInput
	void SUpdateInput();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SUpdateRotation
	void SUpdateRotation();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.GetRandomLocation
	void GetRandomLocation(FVector& Location);                                                                               // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.SUpdateFlying
	void SUpdateFlying();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.OnActionTrigger
	void OnActionTrigger(FName ActionName);                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.OnDeathBpEvent
	void OnDeathBpEvent(FWTLMonsterDeathData DeathData);                                                                     // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.K2_OnDeathEvent
	void K2_OnDeathEvent();                                                                                                  // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.BndEvt__BP_Pawn_CanyonHornet_V2_AIPerception_K2Node_ComponentBoundEvent_0_ActorPerceptionUpdatedDelegate__DelegateSignature
	void BndEvt__BP_Pawn_CanyonHornet_V2_AIPerception_K2Node_ComponentBoundEvent_0_ActorPerceptionUpdatedDelegate__DelegateSignature(AActor* Actor, FAIStimulus Stimulus); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.OnServerDeathBpEvent
	void OnServerDeathBpEvent(FWTLMonsterDeathData DeathData);                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Hornet/BP_Pawn_Thorn.BP_Pawn_Thorn_C.ExecuteUbergraph_BP_Pawn_Thorn
	void ExecuteUbergraph_BP_Pawn_Thorn(int32_t EntryPoint);                                                                 // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C
/// Size: 0x0040 (0x000F10 - 0x000F50)
class ABP_Support_SporeV2_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	USceneComponent*                                   SceneSpawnPoint;                                            // 0x0F18   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F20   (0x0004)  
	bool                                               IsInit;                                                     // 0x0F24   (0x0001)  
	bool                                               IsScaled;                                                   // 0x0F25   (0x0001)  
	bool                                               IsDeath;                                                    // 0x0F26   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0F27   (0x0001)  MISSED
	float                                              MyScale;                                                    // 0x0F28   (0x0004)  
	float                                              MaxScale;                                                   // 0x0F2C   (0x0004)  
	float                                              ReloadTimeToSpawn;                                          // 0x0F30   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0F34   (0x0004)  MISSED
	AWTLMonsterPawn*                                   myMonster;                                                  // 0x0F38   (0x0008)  
	float                                              CurrentReloadTimeToSpawn;                                   // 0x0F40   (0x0004)  
	bool                                               IsOffsetZ;                                                  // 0x0F44   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0F45   (0x0003)  MISSED
	float                                              TargetOffsetZ;                                              // 0x0F48   (0x0004)  
	float                                              CurrentOffsetZ;                                             // 0x0F4C   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.UpdateOffsetZ
	void UpdateOffsetZ();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.SUpdateSpawnMyMonster
	void SUpdateSpawnMyMonster();                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.CheckOwner
	void CheckOwner();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.UpdateScale
	void UpdateScale();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.OnMonsterDeath
	void OnMonsterDeath();                                                                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_Support_SporeV2.BP_Support_SporeV2_C.ExecuteUbergraph_BP_Support_SporeV2
	void ExecuteUbergraph_BP_Support_SporeV2(int32_t EntryPoint);                                                            // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_SpawnPointForMonster.BP_SpawnPointForMonster_C
/// Size: 0x0020 (0x000220 - 0x000240)
class ABP_SpawnPointForMonster_C : public AActor
{ 
public:
	UBillboardComponent*                               billboard;                                                  // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	bool                                               IsAnchor;                                                   // 0x0230   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0231   (0x0003)  MISSED
	float                                              OffsetZ;                                                    // 0x0234   (0x0004)  
	float                                              DistanceTrace;                                              // 0x0238   (0x0004)  
	int32_t                                            NumIteration;                                               // 0x023C   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_SpawnPointForMonster.BP_SpawnPointForMonster_C.TraceUp
	void TraceUp(FVector StartLocation, float DistanceTrace, FVector& HitLocation, bool& IsHit);                             // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_SpawnPointForMonster.BP_SpawnPointForMonster_C.DrawPointLocation
	void DrawPointLocation();                                                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/MonsterSpawner/BP_SpawnPointForMonster.BP_SpawnPointForMonster_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C
/// Size: 0x007D (0x000220 - 0x00029D)
class ABP_SplineToUp_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FMODAudio1;                                                 // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0230   (0x0008)  
	UNiagaraComponent*                                 NS_TintacleUp;                                              // 0x0238   (0x0008)  
	UBillboardComponent*                               billboard;                                                  // 0x0240   (0x0008)  
	int32_t                                            CountSpline;                                                // 0x0248   (0x0004)  
	float                                              DeltaSec;                                                   // 0x024C   (0x0004)  
	TArray<USplineComponent*>                          SplineList;                                                 // 0x0250   (0x0010)  
	FName                                              State;                                                      // 0x0260   (0x0008)  
	FVector                                            CurrentVector;                                              // 0x0268   (0x000C)  
	float                                              HeightStep;                                                 // 0x0274   (0x0004)  
	float                                              CurrentHeight;                                              // 0x0278   (0x0004)  
	float                                              MaxHeight;                                                  // 0x027C   (0x0004)  
	float                                              AngularStep;                                                // 0x0280   (0x0004)  
	float                                              Radius;                                                     // 0x0284   (0x0004)  
	float                                              MinRadius;                                                  // 0x0288   (0x0004)  
	float                                              MaxRadius;                                                  // 0x028C   (0x0004)  
	float                                              CurrentLenght;                                              // 0x0290   (0x0004)  
	float                                              OldLenght;                                                  // 0x0294   (0x0004)  
	float                                              MaxLenght;                                                  // 0x0298   (0x0004)  
	bool                                               IsDeactivate;                                               // 0x029C   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.CheckOwner
	void CheckOwner();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.UpdateDestroy
	void UpdateDestroy();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.UpdateNS
	void UpdateNS();                                                                                                         // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.UpdateLenght
	void UpdateLenght();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.AddWalkerSplineMesh
	void AddWalkerSplineMesh(float InDistance, USplineComponent* SplineOwner);                                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.GenerateSpline
	void GenerateSpline();                                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.CInit
	void CInit();                                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/Splines/BP_SplineToUp.BP_SplineToUp_C.ExecuteUbergraph_BP_SplineToUp
	void ExecuteUbergraph_BP_SplineToUp(int32_t EntryPoint);                                                                 // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/MonsterSpawner/BP_SpawnPointForMonster_WithArrow.BP_SpawnPointForMonster_WithArrow_C
/// Size: 0x0008 (0x000240 - 0x000248)
class ABP_SpawnPointForMonster_WithArrow_C : public ABP_SpawnPointForMonster_C
{ 
public:
	UArrowComponent*                                   Arrow;                                                      // 0x0240   (0x0008)  
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_SpawnPoint_Crystal.BP_SpawnPoint_Crystal_C
/// Size: 0x0000 (0x000248 - 0x000248)
class ABP_SpawnPoint_Crystal_C : public ABP_SpawnPointForMonster_WithArrow_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ToxicBomber/BP_SpawnPointForMonster_WallOutgrowth.BP_SpawnPointForMonster_WallOutgrowth_C
/// Size: 0x0000 (0x000248 - 0x000248)
class ABP_SpawnPointForMonster_WallOutgrowth_C : public ABP_SpawnPointForMonster_WithArrow_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_HealPoint.BP_HealPoint_C
/// Size: 0x0032 (0x000220 - 0x000252)
class ABP_HealPoint_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UParticleSystemComponent*                          PS_HealingGranate;                                          // 0x0228   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0230   (0x0008)  
	UStaticMeshComponent*                              SM_LProp_Crystals_06;                                       // 0x0238   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0240   (0x0008)  
	float                                              Health;                                                     // 0x0248   (0x0004)  
	float                                              MaxHealth;                                                  // 0x024C   (0x0004)  
	bool                                               IsDestroy;                                                  // 0x0250   (0x0001)  
	char                                               RepHealthPercent;                                           // 0x0251   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_HealPoint.BP_HealPoint_C.CUpdateHealth
	void CUpdateHealth();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_HealPoint.BP_HealPoint_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_HealPoint.BP_HealPoint_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_HealPoint.BP_HealPoint_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_HealPoint.BP_HealPoint_C.ExecuteUbergraph_BP_HealPoint
	void ExecuteUbergraph_BP_HealPoint(int32_t EntryPoint);                                                                  // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C
/// Size: 0x005C (0x000220 - 0x00027C)
class ABP_SporeSpike_V2_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FE_RockFall_01;                                             // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_CecoaliensaBrute_FootStep;                       // 0x0230   (0x0008)  
	USkeletalMeshComponent*                            SK_Whip_01;                                                 // 0x0238   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0240   (0x0008)  
	UAB_Whip_01_Skeleton_C*                            myAnimInstance;                                             // 0x0248   (0x0008)  
	bool                                               LocationFound;                                              // 0x0250   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0251   (0x0007)  MISSED
	AActor*                                            TargetActor;                                                // 0x0258   (0x0008)  
	bool                                               IsUseInitLocation;                                          // 0x0260   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0261   (0x0003)  MISSED
	FVector                                            TargetLocation;                                             // 0x0264   (0x000C)  
	FVector                                            tmpLocation;                                                // 0x0270   (0x000C)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C.Init
	void Init(FVector TargetLocation);                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C.OnSpikeAttack
	void OnSpikeAttack();                                                                                                    // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C.OnAttackLocation
	void OnAttackLocation(FVector Location);                                                                                 // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_V2.BP_SporeSpike_V2_C.ExecuteUbergraph_BP_SporeSpike_V2
	void ExecuteUbergraph_BP_SporeSpike_V2(int32_t EntryPoint);                                                              // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_SpawnerFromOutgrowth.BP_SporeSpike_SpawnerFromOutgrowth_C
/// Size: 0x0028 (0x000220 - 0x000248)
class ABP_SporeSpike_SpawnerFromOutgrowth_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	TArray<AWTLCharacter*>                             CharactersList;                                             // 0x0230   (0x0010)  
	int32_t                                            CurrentTestID;                                              // 0x0240   (0x0004)  
	float                                              StepRotationYaw;                                            // 0x0244   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_SpawnerFromOutgrowth.BP_SporeSpike_SpawnerFromOutgrowth_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_SpawnerFromOutgrowth.BP_SporeSpike_SpawnerFromOutgrowth_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_SpawnerFromOutgrowth.BP_SporeSpike_SpawnerFromOutgrowth_C.ExecuteUbergraph_BP_SporeSpike_SpawnerFromOutgrowth
	void ExecuteUbergraph_BP_SporeSpike_SpawnerFromOutgrowth(int32_t EntryPoint);                                            // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_Spawner.BP_SporeSpike_Spawner_C
/// Size: 0x0028 (0x000220 - 0x000248)
class ABP_SporeSpike_Spawner_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	TArray<AWTLCharacter*>                             CharactersList;                                             // 0x0230   (0x0010)  
	int32_t                                            CurrentTestID;                                              // 0x0240   (0x0004)  
	int32_t                                            CountHealPoint;                                             // 0x0244   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_Spawner.BP_SporeSpike_Spawner_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_Spawner.BP_SporeSpike_Spawner_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/SporeSpike/BP_SporeSpike_Spawner.BP_SporeSpike_Spawner_C.ExecuteUbergraph_BP_SporeSpike_Spawner
	void ExecuteUbergraph_BP_SporeSpike_Spawner(int32_t EntryPoint);                                                         // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C
/// Size: 0x0058 (0x000220 - 0x000278)
class ABP_ToxicHornetSpawner_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0230   (0x0004)  
	float                                              CurrentRespawnTime;                                         // 0x0234   (0x0004)  
	TArray<ABP_SpawnPointForMonster_C*>                SpawnPointList;                                             // 0x0238   (0x0010)  
	bool                                               IsAvailableSpawningPoints;                                  // 0x0248   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0249   (0x0003)  MISSED
	float                                              RespawnTime;                                                // 0x024C   (0x0004)  
	TArray<AActor*>                                    HornetSpawnerList;                                          // 0x0250   (0x0010)  
	float                                              Difficulty;                                                 // 0x0260   (0x0004)  
	bool                                               IsActivated;                                                // 0x0264   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0265   (0x0003)  MISSED
	ABP_SplineToUp_C*                                  MyTentacle;                                                 // 0x0268   (0x0008)  
	bool                                               IsTentacleStop;                                             // 0x0270   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0271   (0x0003)  MISSED
	int32_t                                            CountIterationSpawn;                                        // 0x0274   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.UpdateGravity
	void UpdateGravity();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.CUpdateTentacle
	void CUpdateTentacle();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.SCalculateRespawnTime
	void SCalculateRespawnTime();                                                                                            // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.SUpdateDifficulty
	void SUpdateDifficulty();                                                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.SUpdateSpawn
	void SUpdateSpawn();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.SInitSpawnPointList
	bool SInitSpawnPointList();                                                                                              // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.OnNextStage
	void OnNextStage();                                                                                                      // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.OnTentacleUP
	void OnTentacleUP();                                                                                                     // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/BP_ToxicHornetSpawner.BP_ToxicHornetSpawner_C.ExecuteUbergraph_BP_ToxicHornetSpawner
	void ExecuteUbergraph_BP_ToxicHornetSpawner(int32_t EntryPoint);                                                         // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spore_Spawner_Monsters.BP_Spore_Spawner_Monsters_C
/// Size: 0x0050 (0x000220 - 0x000270)
class ABP_Spore_Spawner_Monsters_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	TArray<UClass*>                                    MonsterList;                                                // 0x0230   (0x0010)  
	int32_t                                            CurrentSpawnClassID;                                        // 0x0240   (0x0004)  
	int32_t                                            MaxSpawnClassID;                                            // 0x0244   (0x0004)  
	bool                                               IsDeath;                                                    // 0x0248   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0249   (0x0003)  MISSED
	int32_t                                            MaxCountMonsterClass;                                       // 0x024C   (0x0004)  
	int32_t                                            CountMonsterClass;                                          // 0x0250   (0x0004)  
	int32_t                                            MinCountMonsters;                                           // 0x0254   (0x0004)  
	float                                              AngularStep;                                                // 0x0258   (0x0004)  
	float                                              StartAngle;                                                 // 0x025C   (0x0004)  
	int32_t                                            NeedSpawn;                                                  // 0x0260   (0x0004)  
	FVector                                            SpawnLocation;                                              // 0x0264   (0x000C)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spore_Spawner_Monsters.BP_Spore_Spawner_Monsters_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spore_Spawner_Monsters.BP_Spore_Spawner_Monsters_C.ExecuteUbergraph_BP_Spore_Spawner_Monsters
	void ExecuteUbergraph_BP_Spore_Spawner_Monsters(int32_t EntryPoint);                                                     // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicSpitter.BP_Spawner_ToxicSpitter_C
/// Size: 0x004C (0x000220 - 0x00026C)
class ABP_Spawner_ToxicSpitter_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	UClass*                                            SpawnClass;                                                 // 0x0230   (0x0008)  
	TArray<ABP_SpawnPointForMonster_WithArrow_C*>      SpawnLocationList;                                          // 0x0238   (0x0010)  
	int32_t                                            CurrentLocationID;                                          // 0x0248   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x024C   (0x0004)  MISSED
	ABP_Actor_Spore_Boss_C*                            MyBoss;                                                     // 0x0250   (0x0008)  
	bool                                               IsDestroy;                                                  // 0x0258   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0259   (0x0003)  MISSED
	float                                              TimeRespawn;                                                // 0x025C   (0x0004)  
	float                                              MaxTimeRespawn;                                             // 0x0260   (0x0004)  
	float                                              DeltaSec;                                                   // 0x0264   (0x0004)  
	int32_t                                            SpawnMaxIteration;                                          // 0x0268   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicSpitter.BP_Spawner_ToxicSpitter_C.SpawnMonster
	void SpawnMonster();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicSpitter.BP_Spawner_ToxicSpitter_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicSpitter.BP_Spawner_ToxicSpitter_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicSpitter.BP_Spawner_ToxicSpitter_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicSpitter.BP_Spawner_ToxicSpitter_C.ExecuteUbergraph_BP_Spawner_ToxicSpitter
	void ExecuteUbergraph_BP_Spawner_ToxicSpitter(int32_t EntryPoint);                                                       // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicBomber.BP_Spawner_ToxicBomber_C
/// Size: 0x0030 (0x000220 - 0x000250)
class ABP_Spawner_ToxicBomber_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0230   (0x0004)  
	float                                              AngularStep;                                                // 0x0234   (0x0004)  
	float                                              MaxCount;                                                   // 0x0238   (0x0004)  
	float                                              MinDistance;                                                // 0x023C   (0x0004)  
	float                                              MaxDinstance;                                               // 0x0240   (0x0004)  
	bool                                               IsDestroy;                                                  // 0x0244   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	float                                              TimeReload;                                                 // 0x0248   (0x0004)  
	float                                              CurrentTimeReload;                                          // 0x024C   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicBomber.BP_Spawner_ToxicBomber_C.Spawn
	void Spawn();                                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicBomber.BP_Spawner_ToxicBomber_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicBomber.BP_Spawner_ToxicBomber_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_ToxicBomber.BP_Spawner_ToxicBomber_C.ExecuteUbergraph_BP_Spawner_ToxicBomber
	void ExecuteUbergraph_BP_Spawner_ToxicBomber(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_TornadoBullet.BP_Spawner_TornadoBullet_C
/// Size: 0x0010 (0x000220 - 0x000230)
class ABP_Spawner_TornadoBullet_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0228   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_TornadoBullet.BP_Spawner_TornadoBullet_C.Shot
	void Shot(FVector Direction, float PhaseShiftPI);                                                                        // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_TornadoBullet.BP_Spawner_TornadoBullet_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/AbilitySpawner/BP_Spawner_TornadoBullet.BP_Spawner_TornadoBullet_C.ExecuteUbergraph_BP_Spawner_TornadoBullet
	void ExecuteUbergraph_BP_Spawner_TornadoBullet(int32_t EntryPoint);                                                      // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_ToxicFountain.BP_ToxicFountain_C
/// Size: 0x0048 (0x000220 - 0x000268)
class ABP_ToxicFountain_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FMODAudio1;                                                 // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0230   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0238   (0x0008)  
	float                                              SoundVolume_Volume_08451F1641F62CE8F88A9F8A382870D0;        // 0x0240   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    SoundVolume__Direction_08451F1641F62CE8F88A9F8A382870D0;    // 0x0244   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	UTimelineComponent*                                SoundVolume;                                                // 0x0248   (0x0008)  
	float                                              TimeStart;                                                  // 0x0250   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0254   (0x0004)  MISSED
	UParticleSystemComponent*                          Emitter;                                                    // 0x0258   (0x0008)  
	UParticleSystemComponent*                          Emitter2;                                                   // 0x0260   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_ToxicFountain.BP_ToxicFountain_C.SoundVolume__FinishedFunc
	void SoundVolume__FinishedFunc();                                                                                        // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_ToxicFountain.BP_ToxicFountain_C.SoundVolume__UpdateFunc
	void SoundVolume__UpdateFunc();                                                                                          // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_ToxicFountain.BP_ToxicFountain_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_ToxicFountain.BP_ToxicFountain_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Projectile/BP_ToxicFountain.BP_ToxicFountain_C.ExecuteUbergraph_BP_ToxicFountain
	void ExecuteUbergraph_BP_ToxicFountain(int32_t EntryPoint);                                                              // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C
/// Size: 0x0059 (0x000220 - 0x000279)
class ABP_Spore_CrystalShield_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UStaticMeshComponent*                              Sphere;                                                     // 0x0228   (0x0008)  
	USceneComponent*                                   Scene;                                                      // 0x0230   (0x0008)  
	FName                                              State;                                                      // 0x0238   (0x0008)  
	FLinearColor                                       Color;                                                      // 0x0240   (0x0010)  
	int32_t                                            Level;                                                      // 0x0250   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0254   (0x0004)  MISSED
	TArray<ABP_SpawnPoint_Crystal_C*>                  SpawnList;                                                  // 0x0258   (0x0010)  
	TArray<int32_t>                                    IgnoreColorIDList;                                          // 0x0268   (0x0010)  
	bool                                               IsDestroy;                                                  // 0x0278   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.SDestroyCharacterInRange
	void SDestroyCharacterInRange();                                                                                         // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.SCheckPickupCrystal
	void SCheckPickupCrystal();                                                                                              // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.SCheckCrystal
	void SCheckCrystal();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.SRemoveIgnoreColorID
	void SRemoveIgnoreColorID(int32_t ColorID);                                                                              // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.SAddIgnoreColorID
	void SAddIgnoreColorID(int32_t ColorID);                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.SInit
	void SInit();                                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.UpdateState
	void UpdateState();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.CUpdateVFXShield
	void CUpdateVFXShield();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_CrystalShield.BP_Spore_CrystalShield_C.ExecuteUbergraph_BP_Spore_CrystalShield
	void ExecuteUbergraph_BP_Spore_CrystalShield(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C
/// Size: 0x004B (0x000F10 - 0x000F5B)
class ABP_Monster_Spore_Outgrowth_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UFMODAudioComponent*                               FE_Spore_Outgrowth_Death_00;                                // 0x0F18   (0x0008)  
	UNiagaraComponent*                                 NS_Healing_Outgrowth;                                       // 0x0F20   (0x0008)  
	UNiagaraComponent*                                 NS_Spore_Outgrowth_Death;                                   // 0x0F28   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0F30   (0x0008)  
	UStaticMeshComponent*                              ST_AlienSporeSphera02;                                      // 0x0F38   (0x0008)  
	FDateTime                                          SDateStart;                                                 // 0x0F40   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0F48   (0x0004)  
	float                                              TimeRecover;                                                // 0x0F4C   (0x0004)  
	float                                              MaxScale;                                                   // 0x0F50   (0x0004)  
	float                                              CurrentRecoverAlpha;                                        // 0x0F54   (0x0004)  
	bool                                               IsRecover;                                                  // 0x0F58   (0x0001)  
	bool                                               IsDeath;                                                    // 0x0F59   (0x0001)  
	bool                                               IsSetLifeTime;                                              // 0x0F5A   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C.SCheckOwner
	void SCheckOwner();                                                                                                      // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C.UpdateRecover
	void UpdateRecover();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Outgrowth.BP_Monster_Spore_Outgrowth_C.ExecuteUbergraph_BP_Monster_Spore_Outgrowth
	void ExecuteUbergraph_BP_Monster_Spore_Outgrowth(int32_t EntryPoint);                                                    // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C
/// Size: 0x0099 (0x000F10 - 0x000FA9)
class ABP_Monster_Spore_Intro_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	UCapsuleComponent*                                 Capsule;                                                    // 0x0F18   (0x0008)  
	USkeletalMeshComponent*                            SK_ProjectX_AlienFlowerA_01;                                // 0x0F20   (0x0008)  
	UNiagaraComponent*                                 NS_Spore_Outgrowth_Death;                                   // 0x0F28   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Dino_Roar_01;                                    // 0x0F30   (0x0008)  
	FName                                              State;                                                      // 0x0F38   (0x0008)  
	FName                                              OldState;                                                   // 0x0F40   (0x0008)  
	FMulticastInlineDelegate                           ChangeStage;                                                // 0x0F48   (0x0010)  
	FMulticastInlineDelegate                           OnSporeDeath;                                               // 0x0F58   (0x0010)  
	bool                                               IsDeath;                                                    // 0x0F68   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0F69   (0x0007)  MISSED
	AActor*                                            CurrentAbility;                                             // 0x0F70   (0x0008)  
	int32_t                                            StageID;                                                    // 0x0F78   (0x0004)  
	int32_t                                            MaxStage;                                                   // 0x0F7C   (0x0004)  
	TArray<UClass*>                                    AbilityClassList;                                           // 0x0F80   (0x0010)  
	TArray<USkeletalMeshComponent*>                    ChildrenList;                                               // 0x0F90   (0x0010)  
	ABP_Spawner_ToxicSpitter_C*                        ToxicSpitterObject;                                         // 0x0FA0   (0x0008)  
	bool                                               IsNeedSpawnToxicSpitter;                                    // 0x0FA8   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.SSpawnToxicSpitter
	void SSpawnToxicSpitter();                                                                                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.CCreateChildren
	void CCreateChildren();                                                                                                  // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.CUpdateStateChildren
	void CUpdateStateChildren();                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.UpdateShield
	void UpdateShield();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.SCheckHealth
	void SCheckHealth();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.SUseAbility
	void SUseAbility();                                                                                                      // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.SChangeState
	void SChangeState(FName NewState);                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.SInit
	void SInit();                                                                                                            // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.K2_OnBeginPlayFinish
	void K2_OnBeginPlayFinish();                                                                                             // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.OnStateChange
	void OnStateChange();                                                                                                    // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.EventOnDeath
	void EventOnDeath();                                                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.K2_OnClientBulletHit
	void K2_OnClientBulletHit(APawn* DamageInstigator, FHitResult& HitResult, int32_t WeaponID, int32_t AmmoID);             // [0x1ad0090] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.ExecuteUbergraph_BP_Monster_Spore_Intro
	void ExecuteUbergraph_BP_Monster_Spore_Intro(int32_t EntryPoint);                                                        // [0x1ad0090] Final|HasDefaults    
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.OnSporeDeath__DelegateSignature
	void OnSporeDeath__DelegateSignature();                                                                                  // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Monster_Spore_Intro.BP_Monster_Spore_Intro_C.ChangeStage__DelegateSignature
	void ChangeStage__DelegateSignature();                                                                                   // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C
/// Size: 0x0058 (0x000424 - 0x00047C)
class ABP_EventPoint_Spore_C : public ABP_EventPoint_SpawnMonsters_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0424   (0x0004)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0428   (0x0008)  
	UPostProcessComponent*                             PostProcess;                                                // 0x0430   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0438   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x043C   (0x0004)  MISSED
	AActor*                                            ActorSpore;                                                 // 0x0440   (0x0008)  
	FName                                              EventTag;                                                   // 0x0448   (0x0008)  
	TArray<ABP_SpawnPointForMonster_C*>                SpawnPointList;                                             // 0x0450   (0x0010)  
	bool                                               IsBeginSpawnSupport;                                        // 0x0460   (0x0001)  
	bool                                               IsEndSpawnSupport;                                          // 0x0461   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0462   (0x0002)  MISSED
	int32_t                                            CurrentIDSpawnPoint;                                        // 0x0464   (0x0004)  
	float                                              DelaySpawnTime;                                             // 0x0468   (0x0004)  
	float                                              CurrentDelaySpawnTime;                                      // 0x046C   (0x0004)  
	float                                              DelayCheck;                                                 // 0x0470   (0x0004)  
	float                                              ReloadThornsAttack;                                         // 0x0474   (0x0004)  
	float                                              CurrentReloadThornsAttack;                                  // 0x0478   (0x0004)  


	/// Functions
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.SGetRandomClosestCharacter
	void SGetRandomClosestCharacter(int32_t CountCharacters, bool& Valid, AWTLCharacter*& Character);                        // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.SUpdateThornsAttack
	void SUpdateThornsAttack();                                                                                              // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.CheckSpore
	void CheckSpore(bool& Result);                                                                                           // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.UpdateSpawnSupport
	void UpdateSpawnSupport();                                                                                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.CheckSupport
	void CheckSupport();                                                                                                     // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.CheckSpawnPointList
	bool CheckSpawnPointList();                                                                                              // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.SpawnProjectX
	void SpawnProjectX();                                                                                                    // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.SpawnVFXObjects
	void SpawnVFXObjects();                                                                                                  // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.K2_OnFinish
	void K2_OnFinish(bool Successful);                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.OnMyMonsterDeath
	void OnMyMonsterDeath(AWTLMonsterPawn* Monster);                                                                         // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.K2_OnStart
	void K2_OnStart();                                                                                                       // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/GamePlay/EventPoints/BP_EventPoint_Spore.BP_EventPoint_Spore_C.ExecuteUbergraph_BP_EventPoint_Spore
	void ExecuteUbergraph_BP_EventPoint_Spore(int32_t EntryPoint);                                                           // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/Components/BI_CanBeTakeDamage.BI_CanBeTakeDamage_C
/// Size: 0x0000 (0x000028 - 0x000028)
class UBI_CanBeTakeDamage_C : public UInterface
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C
/// Size: 0x0098 (0x000220 - 0x0002B8)
class ABP_ControllerOfFlyingSpawners_Base_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FE_Spore_Overlord_03;                                       // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FE_Spore_Overlord_01;                                       // 0x0230   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0238   (0x0008)  
	UArrowComponent*                                   Arrow;                                                      // 0x0240   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0248   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0250   (0x0004)  
	float                                              StartTimeSeconds;                                           // 0x0254   (0x0004)  
	int32_t                                            CountSpawn;                                                 // 0x0258   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x025C   (0x0004)  MISSED
	TArray<AActor*>                                    SpawnComponentList;                                         // 0x0260   (0x0010)  
	FRotator                                           DesiredRotation;                                            // 0x0270   (0x000C)  
	float                                              AngularSpeed;                                               // 0x027C   (0x0004)  
	bool                                               IsReady;                                                    // 0x0280   (0x0001)  
	bool                                               IsDestroy;                                                  // 0x0281   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0282   (0x0006)  MISSED
	TArray<FVector>                                    SpawnerLocations;                                           // 0x0288   (0x0010)  
	float                                              myTime;                                                     // 0x0298   (0x0004)  
	FName                                              StateAFX;                                                   // 0x029C   (0x0008)  
	int32_t                                            CurrentSpawnerIDSound;                                      // 0x02A4   (0x0004)  
	TArray<AActor*>                                    AliveSpawnerList;                                           // 0x02A8   (0x0010)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.CUpdateLocationFX
	void CUpdateLocationFX();                                                                                                // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.DestroyAllSpawner
	void DestroyAllSpawner();                                                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.CheckSpawners
	void CheckSpawners();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.UpdateRotation
	void UpdateRotation();                                                                                                   // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.CalculateCurrentRotation
	void CalculateCurrentRotation();                                                                                         // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.CUpdateAFX
	void CUpdateAFX();                                                                                                       // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_Base.BP_ControllerOfFlyingSpawners_Base_C.ExecuteUbergraph_BP_ControllerOfFlyingSpawners_Base
	void ExecuteUbergraph_BP_ControllerOfFlyingSpawners_Base(int32_t EntryPoint);                                            // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_V3.BP_ControllerOfFlyingSpawners_V3_C
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class ABP_ControllerOfFlyingSpawners_V3_C : public ABP_ControllerOfFlyingSpawners_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_V2.BP_ControllerOfFlyingSpawners_V2_C
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class ABP_ControllerOfFlyingSpawners_V2_C : public ABP_ControllerOfFlyingSpawners_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Support/ControllerOfFlyingSpawners/BP_ControllerOfFlyingSpawners_V1.BP_ControllerOfFlyingSpawners_V1_C
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class ABP_ControllerOfFlyingSpawners_V1_C : public ABP_ControllerOfFlyingSpawners_Base_C
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C
/// Size: 0x0074 (0x000220 - 0x000294)
class ABP_Spore_PickupCrystal_Base_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FE_SlotMachine_CylinderStop_Beep3;                          // 0x0228   (0x0008)  
	UStaticMeshComponent*                              Sphere1;                                                    // 0x0230   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0238   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0240   (0x0004)  
	FLinearColor                                       EmissiveColor;                                              // 0x0244   (0x0010)  
	float                                              EmissivePower;                                              // 0x0254   (0x0004)  
	FName                                              State;                                                      // 0x0258   (0x0008)  
	FVector                                            DesiredLocation;                                            // 0x0260   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x026C   (0x0004)  MISSED
	AActor*                                            MyCrystal;                                                  // 0x0270   (0x0008)  
	UClass*                                            DesiredClassCrystal;                                        // 0x0278   (0x0008)  
	int32_t                                            ColorID;                                                    // 0x0280   (0x0004)  
	bool                                               UseEndLocation;                                             // 0x0284   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0285   (0x0003)  MISSED
	FVector                                            EndLocation;                                                // 0x0288   (0x000C)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.UpdateState
	void UpdateState();                                                                                                      // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.BndEvt__BP_SporeCrystal_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
	void BndEvt__BP_SporeCrystal_Base_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Spore_PickupCrystal_Base.BP_Spore_PickupCrystal_Base_C.ExecuteUbergraph_BP_Spore_PickupCrystal_Base
	void ExecuteUbergraph_BP_Spore_PickupCrystal_Base(int32_t EntryPoint);                                                   // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C
/// Size: 0x005C (0x000220 - 0x00027C)
class ABP_Crystal_EnergySource_Base_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0228   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0230   (0x0008)  
	UNiagaraComponent*                                 NS_Crystal_Laser;                                           // 0x0238   (0x0008)  
	UNiagaraComponent*                                 NS_Crystal_Particles;                                       // 0x0240   (0x0008)  
	UStaticMeshComponent*                              SM_LProp_Crystals_05;                                       // 0x0248   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0250   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0258   (0x0004)  
	int32_t                                            ColorID;                                                    // 0x025C   (0x0004)  
	char                                               Energy;                                                     // 0x0260   (0x0001)  
	char                                               MaxEnergy;                                                  // 0x0261   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0262   (0x0002)  MISSED
	float                                              CurrentEnergy;                                              // 0x0264   (0x0004)  
	float                                              TimeSpawnPickupCrystal;                                     // 0x0268   (0x0004)  
	float                                              ReloadSpawnPickupCrystal;                                   // 0x026C   (0x0004)  
	int32_t                                            MaxSpawnPickupCrystal;                                      // 0x0270   (0x0004)  
	bool                                               IsDestroy;                                                  // 0x0274   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0275   (0x0003)  MISSED
	float                                              NeedEnergy;                                                 // 0x0278   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.SRemoveCrystals
	void SRemoveCrystals();                                                                                                  // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.SSpawnPickupCrystal
	void SSpawnPickupCrystal(FVector SpawnLocation, bool UseEndLocation, FVector EndLocation);                               // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.SDelaySpawnPickupCrystal
	void SDelaySpawnPickupCrystal();                                                                                         // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.SAddEnergy
	void SAddEnergy(float Value);                                                                                            // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.SUpdateEnergy
	void SUpdateEnergy();                                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.CUpdateVFX
	void CUpdateVFX();                                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.ReceiveDestroyed
	void ReceiveDestroyed();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/Crystals/BP_Crystal_EnergySource_Base.BP_Crystal_EnergySource_Base_C.ExecuteUbergraph_BP_Crystal_EnergySource_Base
	void ExecuteUbergraph_BP_Crystal_EnergySource_Base(int32_t EntryPoint);                                                  // [0x1ad0090] Final                
};

/// Class /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C
/// Size: 0x00E9 (0x000220 - 0x000309)
class ABP_Actor_Spore_Boss_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FE_CaveMonster_00;                                          // 0x0228   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Dino_Roar_02;                                    // 0x0230   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Dino_Roar_05;                                    // 0x0238   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Dino_Roar_06;                                    // 0x0240   (0x0008)  
	UFMODAudioComponent*                               FE_Monster_Dino_Roar_07;                                    // 0x0248   (0x0008)  
	UFMODAudioComponent*                               FE_Rock_impact;                                             // 0x0250   (0x0008)  
	UBP_LegendaryMonsterComponent_C*                   BP_LegendaryMonsterComponent;                               // 0x0258   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0260   (0x0008)  
	USkeletalMeshComponent*                            SK_MH01;                                                    // 0x0268   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0270   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0278   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x027C   (0x0004)  MISSED
	TArray<FS_Spore_Outgrowth_Data>                    OutgrowthSpawnData;                                         // 0x0280   (0x0010)  
	float                                              OutgrowthCooldownTime;                                      // 0x0290   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0294   (0x0004)  MISSED
	ABP_Monster_Spore_Outgrowth_C*                     MyOutgrowth;                                                // 0x0298   (0x0008)  
	float                                              Health;                                                     // 0x02A0   (0x0004)  
	float                                              MaxHealth;                                                  // 0x02A4   (0x0004)  
	float                                              NextStageOfHealth;                                          // 0x02A8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02AC   (0x0004)  MISSED
	AActor*                                            CurrentAbility;                                             // 0x02B0   (0x0008)  
	int32_t                                            CurrentAbilityID;                                           // 0x02B8   (0x0004)  
	int32_t                                            CurrentAbilityLevel;                                        // 0x02BC   (0x0004)  
	int32_t                                            MaxCountAbility;                                            // 0x02C0   (0x0004)  
	bool                                               IsDeath;                                                    // 0x02C4   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02C5   (0x0003)  MISSED
	TArray<FS_Ability_Chance>                          AbilityChance;                                              // 0x02C8   (0x0010)  
	FMulticastInlineDelegate                           NextStageEvent;                                             // 0x02D8   (0x0010)  
	float                                              CountStage;                                                 // 0x02E8   (0x0004)  
	bool                                               IsIntroFinish;                                              // 0x02EC   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x02ED   (0x0003)  MISSED
	TArray<ABP_Monster_Spore_Outgrowth_C*>             MyOutgrowthList;                                            // 0x02F0   (0x0010)  
	bool                                               IsReadyAbility;                                             // 0x0300   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0301   (0x0003)  MISSED
	int32_t                                            CurrentSpawnHornet;                                         // 0x0304   (0x0004)  
	bool                                               IsCanSpawnOutgrowth;                                        // 0x0308   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.GetName
	void GetName(FText& Result);                                                                                             // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.GetHealthAlpha
	void GetHealthAlpha(float& Result);                                                                                      // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.GetCurrentHealth
	void GetCurrentHealth(float& Result);                                                                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.GetMaxHealth
	void GetMaxHealth(float& Result);                                                                                        // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.IsAlive
	void IsAlive(bool& Result);                                                                                              // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.CanBeTakeDamage
	void CanBeTakeDamage(bool& Result);                                                                                      // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SDestroyCharacterInRange
	void SDestroyCharacterInRange();                                                                                         // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SSpawnSporeSpikeSpawner
	void SSpawnSporeSpikeSpawner();                                                                                          // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.AnyGrowthIsAlive
	void AnyGrowthIsAlive(bool& Result);                                                                                     // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.CheckEvent
	void CheckEvent();                                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.CUpdateHealthBar
	void CUpdateHealthBar();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.Spawn Toxic Hornet Spawner
	void Spawn Toxic Hornet Spawner();                                                                                       // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnDestroySpikesNextLevel
	void OnDestroySpikesNextLevel(AActor* DestroyedActor);                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnDestroyIntro
	void OnDestroyIntro(AActor* DestroyedActor);                                                                             // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.CheckNextStage
	void CheckNextStage(bool& NextStageRun);                                                                                 // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.CalculateNextStageOfHealth
	void CalculateNextStageOfHealth();                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SUseAbility
	void SUseAbility();                                                                                                      // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.UpdateAbilityChance
	void UpdateAbilityChance();                                                                                              // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SInit
	void SInit();                                                                                                            // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SUpdateOutgrowth
	void SUpdateOutgrowth();                                                                                                 // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnDestroyOutgrowth
	void OnDestroyOutgrowth(AActor* DestroyedActor);                                                                         // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.IncrementHealth
	void IncrementHealth(float Value);                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.DecrementHealth
	void DecrementHealth(float Value);                                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnDeath
	void OnDeath();                                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.CUpdateAFX
	void CUpdateAFX();                                                                                                       // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnTakeDamage
	void OnTakeDamage();                                                                                                     // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnRoar
	void OnRoar();                                                                                                           // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.OnDestroyHornetSpawner
	void OnDestroyHornetSpawner(AActor* DestroyedActor);                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SOnNextStage
	void SOnNextStage();                                                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SSpawnControllerOfFlyingSpawners
	void SSpawnControllerOfFlyingSpawners();                                                                                 // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.SOnSpawnToxicHornetSpawner
	void SOnSpawnToxicHornetSpawner();                                                                                       // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.ExecuteUbergraph_BP_Actor_Spore_Boss
	void ExecuteUbergraph_BP_Actor_Spore_Boss(int32_t EntryPoint);                                                           // [0x1ad0090] Final|HasDefaults    
	// Function /Game/WTL/Monsters/New/Blueprint/ProjectsX/BP_Actor_Spore_Boss.BP_Actor_Spore_Boss_C.NextStageEvent__DelegateSignature
	void NextStageEvent__DelegateSignature();                                                                                // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C
/// Size: 0x0069 (0x0000B0 - 0x000119)
class UBP_LegendaryMonsterComponent_C : public UActorComponent
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x00B0   (0x0008)  
	UWBP_HUD_LegendaryMonsterInfo_C*                   myWidget;                                                   // 0x00B8   (0x0008)  
	AWTLCharacter*                                     LocalPlayerCharacter;                                       // 0x00C0   (0x0008)  
	AActor*                                            MyActor;                                                    // 0x00C8   (0x0008)  
	float                                              DetectionDistance;                                          // 0x00D0   (0x0004)  
	float                                              DetectionDistanceSquared;                                   // 0x00D4   (0x0004)  
	FS_HUD_LMI_Data                                    HUDData;                                                    // 0x00D8   (0x0040)  
	bool                                               IsVisible;                                                  // 0x0118   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.GetLocalPlayerCharacter
	void GetLocalPlayerCharacter(bool& Valid, AWTLCharacter*& WTLCharacter);                                                 // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.GetOwnerAsActor
	void GetOwnerAsActor(bool& Valid, AActor*& Actor);                                                                       // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.GetHealthAlpha
	void GetHealthAlpha(float& Value);                                                                                       // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.CheckDistance
	bool CheckDistance(float& DistanceSquared);                                                                              // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.GetInstanceWidget
	void GetInstanceWidget(UWBP_HUD_LegendaryMonsterInfo_C*& ReturnWidget);                                                  // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.UpdateWidget
	void UpdateWidget();                                                                                                     // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Components/BP_LegendaryMonsterComponent.BP_LegendaryMonsterComponent_C.ExecuteUbergraph_BP_LegendaryMonsterComponent
	void ExecuteUbergraph_BP_LegendaryMonsterComponent(int32_t EntryPoint);                                                  // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/TacticStuff/FX/BP_ElectonicExplosion.BP_ElectonicExplosion_C
/// Size: 0x0020 (0x000220 - 0x000240)
class ABP_ElectonicExplosion_C : public AActor
{ 
public:
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0220   (0x0008)  
	UParticleSystemComponent*                          P_Explosion;                                                // 0x0228   (0x0008)  
	UParticleSystemComponent*                          P_Electric_Large;                                           // 0x0230   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0238   (0x0008)  
};

/// Class /Game/WTL/Monsters/Projectile/BP_Monster_StonePhys.BP_Monster_StonePhys_C
/// Size: 0x0028 (0x000220 - 0x000248)
class ABP_Monster_StonePhys_C : public AActor
{ 
public:
	UStaticMeshComponent*                              Stone;                                                      // 0x0220   (0x0008)  
	FVector                                            Vector;                                                     // 0x0228   (0x000C)  
	float                                              Time;                                                       // 0x0234   (0x0004)  
	UCurveFloat*                                       Gravity;                                                    // 0x0238   (0x0008)  
	UCurveFloat*                                       Velocity;                                                   // 0x0240   (0x0008)  
};

/// Class /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C
/// Size: 0x001A (0x000408 - 0x000422)
class ABP_ElectronicBait_C : public AWTLElectronicBait
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0408   (0x0008)  
	UFMODAudioComponent*                               NoiseComponent;                                             // 0x0410   (0x0008)  
	UParticleSystemComponent*                          Particles_Sparks;                                           // 0x0418   (0x0008)  
	bool                                               IsActive;                                                   // 0x0420   (0x0001)  
	bool                                               IsCharged;                                                  // 0x0421   (0x0001)  


	/// Functions
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.OnRep_IsCharged
	void OnRep_IsCharged();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.K2_OnDestroyed
	void K2_OnDestroyed();                                                                                                   // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.Deactivate
	void Deactivate();                                                                                                       // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.Activate
	void Activate();                                                                                                         // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.OnEnergyChanged
	void OnEnergyChanged(float EnergyValue);                                                                                 // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.OnConditionChanged
	void OnConditionChanged(float ConditionValue);                                                                           // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.BPCharged
	void BPCharged();                                                                                                        // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/InteractiveObjects/PlaceableStuff/BP_ElectronicBait.BP_ElectronicBait_C.ExecuteUbergraph_BP_ElectronicBait
	void ExecuteUbergraph_BP_ElectronicBait(int32_t EntryPoint);                                                             // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C
/// Size: 0x006D (0x000220 - 0x00028D)
class ABP_Monster_StoneProjectile_C : public AWTLDynamicReplicatedActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UStaticMeshComponent*                              Stone;                                                      // 0x0228   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0230   (0x0008)  
	FVector                                            Vector;                                                     // 0x0238   (0x000C)  
	float                                              Time;                                                       // 0x0244   (0x0004)  
	UCurveFloat*                                       Gravity;                                                    // 0x0248   (0x0008)  
	UCurveFloat*                                       Velocity;                                                   // 0x0250   (0x0008)  
	float                                              Power;                                                      // 0x0258   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x025C   (0x0004)  MISSED
	TArray<UStaticMesh*>                               Meshes;                                                     // 0x0260   (0x0010)  
	TArray<FVector>                                    ScaleForMeshes;                                             // 0x0270   (0x0010)  
	int32_t                                            IdMesh;                                                     // 0x0280   (0x0004)  
	float                                              minDamag;                                                   // 0x0284   (0x0004)  
	float                                              maxDamag;                                                   // 0x0288   (0x0004)  
	bool                                               CanUseStun;                                                 // 0x028C   (0x0001)  


	/// Functions
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C.OnHit
	void OnHit();                                                                                                            // [0x1ad0090] Net|NetReliableNetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C.SetVector
	void SetVector(FVector InVector, float Scale1D);                                                                         // [0x1ad0090] Net|NetReliableNetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_StoneProjectile.BP_Monster_StoneProjectile_C.ExecuteUbergraph_BP_Monster_StoneProjectile
	void ExecuteUbergraph_BP_Monster_StoneProjectile(int32_t EntryPoint);                                                    // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C
/// Size: 0x006C (0x000220 - 0x00028C)
class ABP_Monster_LightningProjectile_C : public AWTLDynamicReplicatedActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UParticleSystemComponent*                          PS_BallLightning;                                           // 0x0228   (0x0008)  
	UStaticMeshComponent*                              Stone;                                                      // 0x0230   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0238   (0x0008)  
	FVector                                            Vector;                                                     // 0x0240   (0x000C)  
	float                                              Time;                                                       // 0x024C   (0x0004)  
	UCurveFloat*                                       Gravity;                                                    // 0x0250   (0x0008)  
	UCurveFloat*                                       Velocity;                                                   // 0x0258   (0x0008)  
	float                                              Power;                                                      // 0x0260   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0264   (0x0004)  MISSED
	TArray<UStaticMesh*>                               Meshes;                                                     // 0x0268   (0x0010)  
	TArray<FVector>                                    ScaleForMeshes;                                             // 0x0278   (0x0010)  
	int32_t                                            IdMesh;                                                     // 0x0288   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C.OnHit
	void OnHit();                                                                                                            // [0x1ad0090] Net|NetReliableNetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C.SetVector
	void SetVector(FVector InVector, float Scale1D);                                                                         // [0x1ad0090] Net|NetReliableNetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/Projectile/BP_Monster_LightningProjectile.BP_Monster_LightningProjectile_C.ExecuteUbergraph_BP_Monster_LightningProjectile
	void ExecuteUbergraph_BP_Monster_LightningProjectile(int32_t EntryPoint);                                                // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/BP_MonsterFunctions.BP_MonsterFunctions_C
/// Size: 0x0000 (0x000028 - 0x000028)
class UBP_MonsterFunctions_C : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C
/// Size: 0x0290 (0x000F10 - 0x0011A0)
class ABP_MonsterBase_C : public AWTLMonsterPawn
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0F10   (0x0008)  
	float                                              MaxSpeed;                                                   // 0x0F18   (0x0004)  
	float                                              AccelerationSpeed;                                          // 0x0F1C   (0x0004)  
	float                                              DistanceSquare;                                             // 0x0F20   (0x0004)  
	float                                              ToSpeed;                                                    // 0x0F24   (0x0004)  
	float                                              CurrentSpeed;                                               // 0x0F28   (0x0004)  
	float                                              DirectionTurn;                                              // 0x0F2C   (0x0004)  
	float                                              OldDirectionTurn;                                           // 0x0F30   (0x0004)  
	float                                              SpeedRotation;                                              // 0x0F34   (0x0004)  
	float                                              SpeedRatio;                                                 // 0x0F38   (0x0004)  
	float                                              TimeInConeEnemy;                                            // 0x0F3C   (0x0004)  
	float                                              MyDeltaTime;                                                // 0x0F40   (0x0004)  
	float                                              TimeMove;                                                   // 0x0F44   (0x0004)  
	TEnumAsByte<StateMonster>                          StateMonster;                                               // 0x0F48   (0x0001)  
	TEnumAsByte<E_MonsterBiasMode>                     BiasMode;                                                   // 0x0F49   (0x0001)  
	char                                               Currenthit;                                                 // 0x0F4A   (0x0001)  
	TEnumAsByte<E_MoveToBase>                          StateMoveTo;                                                // 0x0F4B   (0x0001)  
	FRotator                                           CurrentRotation;                                            // 0x0F4C   (0x000C)  
	FRotator                                           AddRotatorCapsule;                                          // 0x0F58   (0x000C)  
	FRotator                                           AddRotator;                                                 // 0x0F64   (0x000C)  
	FRotator                                           AddRotatorFromTarget;                                       // 0x0F70   (0x000C)  
	bool                                               ReadyToAttack;                                              // 0x0F7C   (0x0001)  
	bool                                               WaitTurn;                                                   // 0x0F7D   (0x0001)  
	bool                                               IsMoveForward;                                              // 0x0F7E   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0F7F   (0x0001)  MISSED
	FVector                                            TargetLocation;                                             // 0x0F80   (0x000C)  
	FVector                                            VectorForward;                                              // 0x0F8C   (0x000C)  
	FVector                                            LocationStartMoveTo;                                        // 0x0F98   (0x000C)  
	FHitResult                                         LeftHit;                                                    // 0x0FA4   (0x008C)  
	FHitResult                                         RightHit;                                                   // 0x1030   (0x008C)  
	FHitResult                                         MIdleHit;                                                   // 0x10BC   (0x008C)  
	int32_t                                            ToDirection;                                                // 0x1148   (0x0004)  
	int32_t                                            BiasDirection;                                              // 0x114C   (0x0004)  
	AWTLCharacter*                                     CharacterTemp;                                              // 0x1150   (0x0008)  
	UBTTask_BlueprintBase*                             TaskMoveTo;                                                 // 0x1158   (0x0008)  
	AActor*                                            MyTargetActor;                                              // 0x1160   (0x0008)  
	TArray<FDS_WayPoint>                               WayPoints;                                                  // 0x1168   (0x0010)  
	TArray<APawn*>                                     DamageInstigators;                                          // 0x1178   (0x0010)  
	UCharacterMovementComponent*                       MyCharacterMovement;                                        // 0x1188   (0x0008)  
	bool                                               IsAttack;                                                   // 0x1190   (0x0001)  
	bool                                               IsUnderground;                                              // 0x1191   (0x0001)  
	bool                                               IsDestroyObject;                                            // 0x1192   (0x0001)  
	unsigned char                                      UnknownData01_5[0x5];                                       // 0x1193   (0x0005)  MISSED
	UClass*                                            ProjectileStoneClass;                                       // 0x1198   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.SphereAttackV1
	void SphereAttackV1(float InDistance, float InRadius, bool InIsMultiTrace, TArray<FHitResult>& OutHitsResult);           // [0x1ad0090] Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.FarAttackBallLightning
	void FarAttackBallLightning(FVector StartLocation, FVector EndLocation, float RadiusW, float Scale1D);                   // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetDirectionRotationFromEnemy 
	void GetDirectionRotationFromEnemy (float AcceptableAngleFromEnemy, float& AngleYaw);                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetDownPoint
	void GetDownPoint(FVector& Location);                                                                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.UpdateTimeMove
	void UpdateTimeMove();                                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.UpdateMoveFromTargetTrace
	void UpdateMoveFromTargetTrace();                                                                                        // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.MyAngleDirectionFromEnemy
	void MyAngleDirectionFromEnemy(float& ResultAngle);                                                                      // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetVectorToEnemy
	void GetVectorToEnemy(FVector& Vector);                                                                                  // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.DecrementDeltaTimeOffConeEnemy
	void DecrementDeltaTimeOffConeEnemy();                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.IncrementDeltaTimeInConeEnemy
	void IncrementDeltaTimeInConeEnemy();                                                                                    // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.CheckInConeEnemy
	void CheckInConeEnemy(float HalfAngle, bool& Result);                                                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.SetBiasMode
	void SetBiasMode(AActor* TargetActor, TEnumAsByte<E_MonsterBiasMode> BiasMode);                                          // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetRightTrace
	void GetRightTrace(bool& IsHit, float& LengthSquared);                                                                   // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetMidleTrace
	void GetMidleTrace(bool& IsHit, float& LengthSquared);                                                                   // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetLeftTrace
	void GetLeftTrace(bool& IsHit, float& LengthSquared);                                                                    // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.StopMove
	void StopMove();                                                                                                         // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.StartMove
	void StartMove();                                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.UpdateMoveToBase
	void UpdateMoveToBase();                                                                                                 // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.FarAttackStone
	void FarAttackStone(FVector StartLocation, FVector EndLocation, float RadiusW, float Scale1D);                           // [0x1ad0090] Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.AddImpulseToCharacter
	void AddImpulseToCharacter(AWTLCharacter* Character, FVector Vector, float Power);                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.EffectToCharacter
	void EffectToCharacter(AWTLCharacter* Character, float Chance, EWTLCharacterEffectType Effect, float MinAmount, float MaxAmount); // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.DamageToCharacter
	void DamageToCharacter(AActor* Object, float DamageMultiplier, bool InCheckVisible, AWTLCharacter*& Character);          // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.ClearDamageInstigators
	void ClearDamageInstigators();                                                                                           // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.GetRandomInstigator
	void GetRandomInstigator(APawn*& Result);                                                                                // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.AddDamageInstigator
	void AddDamageInstigator(APawn* DamageInstigator);                                                                       // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnNotifyEnd_8ABCD9F545F02F37885D9DBAFD8EF8A3
	void OnNotifyEnd_8ABCD9F545F02F37885D9DBAFD8EF8A3(FName NotifyName);                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnNotifyBegin_8ABCD9F545F02F37885D9DBAFD8EF8A3
	void OnNotifyBegin_8ABCD9F545F02F37885D9DBAFD8EF8A3(FName NotifyName);                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnInterrupted_8ABCD9F545F02F37885D9DBAFD8EF8A3
	void OnInterrupted_8ABCD9F545F02F37885D9DBAFD8EF8A3(FName NotifyName);                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnBlendOut_8ABCD9F545F02F37885D9DBAFD8EF8A3
	void OnBlendOut_8ABCD9F545F02F37885D9DBAFD8EF8A3(FName NotifyName);                                                      // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnCompleted_8ABCD9F545F02F37885D9DBAFD8EF8A3
	void OnCompleted_8ABCD9F545F02F37885D9DBAFD8EF8A3(FName NotifyName);                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnNotifyEnd_D60F49D045A1DD8A024745BFDC6F4742
	void OnNotifyEnd_D60F49D045A1DD8A024745BFDC6F4742(FName NotifyName);                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnNotifyBegin_D60F49D045A1DD8A024745BFDC6F4742
	void OnNotifyBegin_D60F49D045A1DD8A024745BFDC6F4742(FName NotifyName);                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnInterrupted_D60F49D045A1DD8A024745BFDC6F4742
	void OnInterrupted_D60F49D045A1DD8A024745BFDC6F4742(FName NotifyName);                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnBlendOut_D60F49D045A1DD8A024745BFDC6F4742
	void OnBlendOut_D60F49D045A1DD8A024745BFDC6F4742(FName NotifyName);                                                      // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnCompleted_D60F49D045A1DD8A024745BFDC6F4742
	void OnCompleted_D60F49D045A1DD8A024745BFDC6F4742(FName NotifyName);                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnHeavyDamage
	void OnHeavyDamage(bool Value);                                                                                          // [0x1ad0090] Net|NetReliableNetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnReplicatedMovement
	void OnReplicatedMovement(float DeltaTime);                                                                              // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.OnRep_RunAttack
	void OnRep_RunAttack(EWTLMonsterActionType IDAction);                                                                    // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/BP_MonsterBase.BP_MonsterBase_C.ExecuteUbergraph_BP_MonsterBase
	void ExecuteUbergraph_BP_MonsterBase(int32_t EntryPoint);                                                                // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C
/// Size: 0x00A0 (0x0011A0 - 0x001240)
class ABP_Shuttle_Spawn_Base_C : public ABP_MonsterBase_C
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x11A0   (0x0008)  
	UNiagaraComponent*                                 NS_Shuttle_Tail;                                            // 0x11A8   (0x0008)  
	UParticleSystemComponent*                          PS_LandedExplosion_V01;                                     // 0x11B0   (0x0008)  
	UParticleSystemComponent*                          PS_Atmospheric_Explosion_V1;                                // 0x11B8   (0x0008)  
	UParticleSystemComponent*                          PS_AirFriction_V01;                                         // 0x11C0   (0x0008)  
	UClass*                                            MonsterSpawn;                                               // 0x11C8   (0x0008)  
	int32_t                                            MinLevelSpawn;                                              // 0x11D0   (0x0004)  
	int32_t                                            MaxLevelSpawn;                                              // 0x11D4   (0x0004)  
	int32_t                                            CountMonster;                                               // 0x11D8   (0x0004)  
	int32_t                                            MaxAliveMonsters;                                           // 0x11DC   (0x0004)  
	bool                                               StealthMode;                                                // 0x11E0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x11E1   (0x0003)  MISSED
	float                                              DeltaSec;                                                   // 0x11E4   (0x0004)  
	bool                                               IsLanded;                                                   // 0x11E8   (0x0001)  
	bool                                               IsBeginPlayFinish;                                          // 0x11E9   (0x0001)  
	bool                                               DestroySpawn;                                               // 0x11EA   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x11EB   (0x0001)  MISSED
	float                                              DelayDestroy;                                               // 0x11EC   (0x0004)  
	float                                              DamageRadius;                                               // 0x11F0   (0x0004)  
	float                                              DamageExplosion;                                            // 0x11F4   (0x0004)  
	bool                                               IsActivationStarted;                                        // 0x11F8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x11F9   (0x0003)  MISSED
	float                                              DurationActivation;                                         // 0x11FC   (0x0004)  
	float                                              DelayActivation;                                            // 0x1200   (0x0004)  
	float                                              GravityScale;                                               // 0x1204   (0x0004)  
	FName                                              AddTag;                                                     // 0x1208   (0x0008)  
	bool                                               IsActivationFinish;                                         // 0x1210   (0x0001)  
	bool                                               IsSpawnMonster;                                             // 0x1211   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x1212   (0x0002)  MISSED
	float                                              DelaySpawnMonster;                                          // 0x1214   (0x0004)  
	bool                                               IsDestroySpawn;                                             // 0x1218   (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x1219   (0x0007)  MISSED
	TArray<ABP_MonsterBase_C*>                         MyAliveMonsters;                                            // 0x1220   (0x0010)  
	TArray<ABP_MonsterBase_C*>                         TempList;                                                   // 0x1230   (0x0010)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.OnRep_IsDestroySpawn
	void OnRep_IsDestroySpawn();                                                                                             // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.OnRep_IsActivationFinish
	void OnRep_IsActivationFinish();                                                                                         // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.OnRep_IsActivationStarted
	void OnRep_IsActivationStarted();                                                                                        // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.OnRep_IsBeginPlayFinish
	void OnRep_IsBeginPlayFinish();                                                                                          // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.OnRep_IsLanded
	void OnRep_IsLanded();                                                                                                   // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.COnHitLanded
	void COnHitLanded();                                                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnHitLanded
	void SOnHitLanded();                                                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnBeginPlayFinish
	void SOnBeginPlayFinish();                                                                                               // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.COnBeginPlayFinish
	void COnBeginPlayFinish();                                                                                               // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnDamageToCharacter
	void SOnDamageToCharacter(AWTLCharacter* Character);                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnActivationStarted
	void SOnActivationStarted();                                                                                             // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.COnActivationStarted
	void COnActivationStarted();                                                                                             // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnActivationFinish
	void SOnActivationFinish();                                                                                              // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.COnActivationFinish
	void COnActivationFinish();                                                                                              // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SUpdateSpawnMonster
	void SUpdateSpawnMonster();                                                                                              // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnSpawnMonster
	void SOnSpawnMonster();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.CheckMyAliveMonsters
	void CheckMyAliveMonsters();                                                                                             // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.SOnDestroySpawn
	void SOnDestroySpawn();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.COnDestroySpawn
	void COnDestroySpawn();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_Base.BP_Shuttle_Spawn_Base_C.ExecuteUbergraph_BP_Shuttle_Spawn_Base
	void ExecuteUbergraph_BP_Shuttle_Spawn_Base(int32_t EntryPoint);                                                         // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C
/// Size: 0x003C (0x001240 - 0x00127C)
class ABP_Shuttle_Spawn_RangSymbiont_Base_C : public ABP_Shuttle_Spawn_Base_C
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x1240   (0x0008)  
	UParticleSystemComponent*                          P_ElectroExpo;                                              // 0x1248   (0x0008)  
	UFMODAudioComponent*                               FE_AirFriction;                                             // 0x1250   (0x0008)  
	USkeletalMeshComponent*                            SK_UfoCapsule2;                                             // 0x1258   (0x0008)  
	USkeletalMeshComponent*                            SK_UfoCapsule1;                                             // 0x1260   (0x0008)  
	USkeletalMeshComponent*                            SK_UfoCapsule;                                              // 0x1268   (0x0008)  
	UMaterialInstance*                                 MeshMaterial;                                               // 0x1270   (0x0008)  
	float                                              ReLifeTime;                                                 // 0x1278   (0x0004)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.COnActivationStarted
	void COnActivationStarted();                                                                                             // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.COnBeginPlayFinish
	void COnBeginPlayFinish();                                                                                               // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.COnHitLanded
	void COnHitLanded();                                                                                                     // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.SOnActivationFinish
	void SOnActivationFinish();                                                                                              // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.SOnSpawnMonster
	void SOnSpawnMonster();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.COnDestroySpawn
	void COnDestroySpawn();                                                                                                  // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_RangSymbiont_Base.BP_Shuttle_Spawn_RangSymbiont_Base_C.ExecuteUbergraph_BP_Shuttle_Spawn_RangSymbiont_Base
	void ExecuteUbergraph_BP_Shuttle_Spawn_RangSymbiont_Base(int32_t EntryPoint);                                            // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_ProjectX.BP_Shuttle_Spawn_ProjectX_C
/// Size: 0x0014 (0x00127C - 0x001290)
class ABP_Shuttle_Spawn_ProjectX_C : public ABP_Shuttle_Spawn_RangSymbiont_Base_C
{ 
public:
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x127C   (0x0004)  MISSED
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x1280   (0x0008)  
	UNiagaraComponent*                                 NS_Shuttle_Tail;                                            // 0x1288   (0x0008)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_ProjectX.BP_Shuttle_Spawn_ProjectX_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Spawn/BP_Shuttle_Spawn_ProjectX.BP_Shuttle_Spawn_ProjectX_C.ExecuteUbergraph_BP_Shuttle_Spawn_ProjectX
	void ExecuteUbergraph_BP_Shuttle_Spawn_ProjectX(int32_t EntryPoint);                                                     // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C
/// Size: 0x00FC (0x000268 - 0x000364)
class UWBP_HUD_LegendaryMonsterInfo_C : public UWTLHUDWidgetBase
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0268   (0x0008)  
	UImage*                                            imgIconLeft;                                                // 0x0270   (0x0008)  
	UImage*                                            imgIconRight;                                               // 0x0278   (0x0008)  
	UImage*                                            imgProgressBar;                                             // 0x0280   (0x0008)  
	USizeBox*                                          sbProgressBar;                                              // 0x0288   (0x0008)  
	UTextBlock*                                        tbMonsterName;                                              // 0x0290   (0x0008)  
	float                                              DeltaSec;                                                   // 0x0298   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x029C   (0x0004)  MISSED
	UBP_LegendaryMonsterComponent_C*                   InstigatorComponent;                                        // 0x02A0   (0x0008)  
	float                                              MaxWidth;                                                   // 0x02A8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x02AC   (0x0004)  MISSED
	UMaterialInstanceDynamic*                          myMaterialInst;                                             // 0x02B0   (0x0008)  
	UMaterialInstanceDynamic*                          mySkullLMaterialInst;                                       // 0x02B8   (0x0008)  
	UMaterialInstanceDynamic*                          mySkullRMaterialInst;                                       // 0x02C0   (0x0008)  
	FS_HUD_LMI_Data                                    DesiredHUDData;                                             // 0x02C8   (0x0040)  
	FS_HUD_LMI_Data                                    CurrentHUDData;                                             // 0x0308   (0x0040)  
	bool                                               IsPropertyChanged;                                          // 0x0348   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0349   (0x0003)  MISSED
	float                                              CurrentInstigatorDistanceSquared;                           // 0x034C   (0x0004)  
	TEnumAsByte<E_State_HUD_LMI>                       State;                                                      // 0x0350   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0351   (0x0003)  MISSED
	float                                              CurrentAlpha;                                               // 0x0354   (0x0004)  
	float                                              CurrentValue;                                               // 0x0358   (0x0004)  
	float                                              DesiredValue;                                               // 0x035C   (0x0004)  
	float                                              InitValue;                                                  // 0x0360   (0x0004)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.HideAlpha
	void HideAlpha();                                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.UpdateProgress
	void UpdateProgress();                                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.ShowAlpha
	void ShowAlpha();                                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.Init
	void Init();                                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.CheckPropertyChanged
	void CheckPropertyChanged();                                                                                             // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.Deactivate
	void Deactivate(UBP_LegendaryMonsterComponent_C* inInstigatorComponent);                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.Activate
	void Activate(float inInstigatorDistanceSquared, UBP_LegendaryMonsterComponent_C* inInstigatorComponent, float CurrentHealthAplha, FS_HUD_LMI_Data inDesiredHUDData); // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.Tick
	void Tick(FGeometry MyGeometry, float InDeltaTime);                                                                      // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/HUD/Monster/WBP_HUD_LegendaryMonsterInfo.WBP_HUD_LegendaryMonsterInfo_C.ExecuteUbergraph_WBP_HUD_LegendaryMonsterInfo
	void ExecuteUbergraph_WBP_HUD_LegendaryMonsterInfo(int32_t EntryPoint);                                                  // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/NeutralMonsters/Seagull/Meshes/AB_Seagull_Enviroment.AB_Seagull_Enviroment_C
/// Size: 0x05A0 (0x0002C0 - 0x000860)
class UAB_Seagull_Enviroment_C : public UAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02C0   (0x0008)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x02C8   (0x0030)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x02F8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0320   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0348   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x0370   (0x0028)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x0398   (0x0020)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x03B8   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x03D8   (0x0108)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x04E0   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0560   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0590   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0610   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0640   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x06C0   (0x0030)  
	FAnimNode_RandomPlayer                             AnimGraphNode_RandomPlayer;                                 // 0x06F0   (0x0078)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x0768   (0x0030)  
	FAnimNode_StateMachine                             AnimGraphNode_StateMachine;                                 // 0x0798   (0x00B0)  
	bool                                               bToDown;                                                    // 0x0848   (0x0001)  
	bool                                               bToUp;                                                      // 0x0849   (0x0001)  
	bool                                               bChangeFlyingAnim;                                          // 0x084A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x084B   (0x0001)  MISSED
	float                                              Timer;                                                      // 0x084C   (0x0004)  
	float                                              NextTimeToChangeAnim;                                       // 0x0850   (0x0004)  
	FRotator                                           ToUpRotation;                                               // 0x0854   (0x000C)  


	/// Functions
	// Function /Game/WTL/Monsters/NeutralMonsters/Seagull/Meshes/AB_Seagull_Enviroment.AB_Seagull_Enviroment_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/NeutralMonsters/Seagull/Meshes/AB_Seagull_Enviroment.AB_Seagull_Enviroment_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/NeutralMonsters/Seagull/Meshes/AB_Seagull_Enviroment.AB_Seagull_Enviroment_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Seagull_Enviroment_AnimGraphNode_TransitionResult_1A79400D477F7F5919B5A1B645D2AEDA
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Seagull_Enviroment_AnimGraphNode_TransitionResult_1A79400D477F7F5919B5A1B645D2AEDA(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Monsters/NeutralMonsters/Seagull/Meshes/AB_Seagull_Enviroment.AB_Seagull_Enviroment_C.ExecuteUbergraph_AB_Seagull_Enviroment
	void ExecuteUbergraph_AB_Seagull_Enviroment(int32_t EntryPoint);                                                         // [0x1ad0090] Final                
};

/// Class /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C
/// Size: 0x00D4 (0x000220 - 0x0002F4)
class ABP_Seagull_FishingEviroment_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UFMODAudioComponent*                               FMODAudio;                                                  // 0x0228   (0x0008)  
	UStaticMeshComponent*                              Fish;                                                       // 0x0230   (0x0008)  
	USphereComponent*                                  Sphere;                                                     // 0x0238   (0x0008)  
	USkeletalMeshComponent*                            SeagullMesh1;                                               // 0x0240   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0248   (0x0008)  
	float                                              Angle;                                                      // 0x0250   (0x0004)  
	FVector                                            StartLocation;                                              // 0x0254   (0x000C)  
	FVector                                            PrevLocation;                                               // 0x0260   (0x000C)  
	float                                              MovementSpeed;                                              // 0x026C   (0x0004)  
	float                                              Radius;                                                     // 0x0270   (0x0004)  
	FVector                                            DivingLocation;                                             // 0x0274   (0x000C)  
	float                                              TimerToDiving;                                              // 0x0280   (0x0004)  
	float                                              TimerToDivingCounter;                                       // 0x0284   (0x0004)  
	float                                              DeltaTime;                                                  // 0x0288   (0x0004)  
	bool                                               DivingInProccess;                                           // 0x028C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x028D   (0x0003)  MISSED
	FVector                                            TargetLocation;                                             // 0x0290   (0x000C)  
	bool                                               IsCurrentMovementDown;                                      // 0x029C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x029D   (0x0003)  MISSED
	float                                              DivingSpeed;                                                // 0x02A0   (0x0004)  
	float                                              DefaultRadius;                                              // 0x02A4   (0x0004)  
	float                                              RInterSpeed;                                                // 0x02A8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x02AC   (0x0004)  MISSED
	UAB_Seagull_Enviroment_C*                          AnimBP;                                                     // 0x02B0   (0x0008)  
	float                                              MovementTime;                                               // 0x02B8   (0x0004)  
	float                                              G;                                                          // 0x02BC   (0x0004)  
	FVector                                            NewStartLocation;                                           // 0x02C0   (0x000C)  
	float                                              TimeTillNextSound;                                          // 0x02CC   (0x0004)  
	float                                              MinTimeToDiving;                                            // 0x02D0   (0x0004)  
	float                                              MaxTimeToDiving;                                            // 0x02D4   (0x0004)  
	UPrimitiveComponent*                               PrevWaterComponent;                                         // 0x02D8   (0x0008)  
	bool                                               bUnderWater;                                                // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x02E1   (0x0003)  MISSED
	float                                              MovementDirection;                                          // 0x02E4   (0x0004)  
	float                                              Health;                                                     // 0x02E8   (0x0004)  
	bool                                               IsAlive;                                                    // 0x02EC   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x02ED   (0x0003)  MISSED
	float                                              TimeTillNextSpawn;                                          // 0x02F0   (0x0004)  


	/// Functions
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.OnIsAlive
	void OnIsAlive();                                                                                                        // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.OnRep_IsAlive
	void OnRep_IsAlive();                                                                                                    // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.BndEvt__BP_Seagull_FishingEviroment_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
	void BndEvt__BP_Seagull_FishingEviroment_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1ad0090] HasOutParms|BlueprintEvent 
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.BndEvt__BP_Seagull_FishingEviroment_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
	void BndEvt__BP_Seagull_FishingEviroment_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.ReceiveAnyDamage
	void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser);           // [0x1ad0090] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Game/WTL/Stuff/Blueprints/Fish/FishingEnviroment/BP_Seagull_FishingEviroment.BP_Seagull_FishingEviroment_C.ExecuteUbergraph_BP_Seagull_FishingEviroment
	void ExecuteUbergraph_BP_Seagull_FishingEviroment(int32_t EntryPoint);                                                   // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Monsters/New/Blueprint/Devourer/BP_Devourer_Projectile.BP_Devourer_Projectile_C
/// Size: 0x0030 (0x000220 - 0x000250)
class ABP_Devourer_Projectile_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UParticleSystemComponent*                          ParticleSystem;                                             // 0x0228   (0x0008)  
	UStaticMeshComponent*                              SM_AlienSpiderCecoaliensa_Projectile;                       // 0x0230   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0238   (0x0008)  
	bool                                               IsSpikeRemoved;                                             // 0x0240   (0x0001)  
	EWTLCharacterStunhitDirection                      SpikeLocation;                                              // 0x0241   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0242   (0x0002)  MISSED
	FVector                                            StartLocation;                                              // 0x0244   (0x000C)  


	/// Functions
	// Function /Game/WTL/Monsters/New/Blueprint/Devourer/BP_Devourer_Projectile.BP_Devourer_Projectile_C.GetMesh
	void GetMesh(UStaticMeshComponent*& SM_AlienSpiderCecoaliensa_Projectile);                                               // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Game/WTL/Monsters/New/Blueprint/Devourer/BP_Devourer_Projectile.BP_Devourer_Projectile_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Devourer/BP_Devourer_Projectile.BP_Devourer_Projectile_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Devourer/BP_Devourer_Projectile.BP_Devourer_Projectile_C.OnBloodSplatter
	void OnBloodSplatter();                                                                                                  // [0x1ad0090] Net|NetMulticast|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Monsters/New/Blueprint/Devourer/BP_Devourer_Projectile.BP_Devourer_Projectile_C.ExecuteUbergraph_BP_Devourer_Projectile
	void ExecuteUbergraph_BP_Devourer_Projectile(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C
/// Size: 0x0080 (0x000220 - 0x0002A0)
class ABP_Character_Explosion_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	UDecalComponent*                                   BloodDecal;                                                 // 0x0228   (0x0008)  
	USphereComponent*                                  Skeleton;                                                   // 0x0230   (0x0008)  
	UParticleSystemComponent*                          Blood;                                                      // 0x0238   (0x0008)  
	USphereComponent*                                  RootSphere;                                                 // 0x0240   (0x0008)  
	UStaticMeshComponent*                              Bone7;                                                      // 0x0248   (0x0008)  
	UStaticMeshComponent*                              Bone6;                                                      // 0x0250   (0x0008)  
	UStaticMeshComponent*                              Bone5;                                                      // 0x0258   (0x0008)  
	UStaticMeshComponent*                              Bone4;                                                      // 0x0260   (0x0008)  
	UStaticMeshComponent*                              Skull;                                                      // 0x0268   (0x0008)  
	UStaticMeshComponent*                              Bone2;                                                      // 0x0270   (0x0008)  
	UStaticMeshComponent*                              Bone1;                                                      // 0x0278   (0x0008)  
	UStaticMeshComponent*                              Bone;                                                       // 0x0280   (0x0008)  
	UStaticMeshComponent*                              Ribs;                                                       // 0x0288   (0x0008)  
	UStaticMeshComponent*                              Bone3;                                                      // 0x0290   (0x0008)  
	float                                              DisValue;                                                   // 0x0298   (0x0004)  
	float                                              DisSpeed;                                                   // 0x029C   (0x0004)  


	/// Functions
	// Function /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C.SetDissolveValue
	void SetDissolveValue(UStaticMeshComponent* InComponent);                                                                // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C.UpdateDissolve
	void UpdateDissolve();                                                                                                   // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C.Impulse
	void Impulse(UStaticMeshComponent* InComponent);                                                                         // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Characters/Effects/BP_Character_Explosion.BP_Character_Explosion_C.ExecuteUbergraph_BP_Character_Explosion
	void ExecuteUbergraph_BP_Character_Explosion(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C
/// Size: 0x11098 (0x000FA0 - 0x012038)
class UAB_Male_TPC_Anim_C : public UWTLCharacterBodyAnimInstance
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0FA0   (0x0008)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x0FA8   (0x0080)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x1028   (0x0048)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x1070   (0x0190)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x1200   (0x00A0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x12A0   (0x0080)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0x1320   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x13E8   (0x0028)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x1410   (0x00D0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x14E0   (0x0080)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x1560   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x1588   (0x0028)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0x15B0   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x1678   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x16A0   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x16C8   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x16F0   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x1718   (0x0080)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x1798   (0x00A0)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x1838   (0x00E8)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x1920   (0x00E8)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x1A08   (0x00E8)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x1AF0   (0x00E8)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x1BD8   (0x00C0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x1C98   (0x0080)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x1D18   (0x00E8)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x1E00   (0x0048)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x1E48   (0x00E8)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x1F30   (0x00C0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x1FF0   (0x0080)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x2070   (0x0048)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x20B8   (0x00E8)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x21A0   (0x00E8)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x2288   (0x0158)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x23E0   (0x0158)  
	FAnimNode_BlendListByEnum                          AnimGraphNode_BlendListByEnum;                              // 0x2538   (0x00B0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x25E8   (0x0028)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x2610   (0x00A0)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x26B0   (0x00E8)  
	FAnimNode_BlendListByEnum                          AnimGraphNode_BlendListByEnum;                              // 0x2798   (0x00B0)  
	FAnimNode_BlendListByEnum                          AnimGraphNode_BlendListByEnum;                              // 0x2848   (0x00B0)  
	FAnimNode_BlendListByEnum                          AnimGraphNode_BlendListByEnum;                              // 0x28F8   (0x00B0)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x29A8   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x2B00   (0x0028)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x2B28   (0x0048)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x2B70   (0x0048)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x2BB8   (0x00A0)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x2C58   (0x00E8)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0x2D40   (0x00C8)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x2E08   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x2F10   (0x0108)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x3018   (0x0020)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x3038   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3058   (0x0108)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x3160   (0x0080)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x31E0   (0x00A0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3280   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3388   (0x0108)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x3490   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x35E8   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x3610   (0x0028)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x3638   (0x00E8)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x3720   (0x00A0)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0x37C0   (0x00F0)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x38B0   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x38D0   (0x0020)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x38F0   (0x0020)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x3910   (0x0080)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x3990   (0x00E8)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x3A78   (0x00C0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3B38   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3C40   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3D48   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3E50   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x3F58   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x4060   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x4168   (0x0108)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x4270   (0x0190)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x4400   (0x00C0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x44C0   (0x0080)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x4540   (0x00E8)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x4628   (0x00D0)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x46F8   (0x00A0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x4798   (0x0028)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0x47C0   (0x00C8)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x4888   (0x0048)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x48D0   (0x0048)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x4918   (0x00C0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x49D8   (0x0028)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x4A00   (0x0190)  
	FAnimNode_RotationMultiplier                       AnimGraphNode_RotationMultiplier;                           // 0x4B90   (0x00F0)  
	FAnimNode_RotationMultiplier                       AnimGraphNode_RotationMultiplier;                           // 0x4C80   (0x00F0)  
	FAnimNode_RotationMultiplier                       AnimGraphNode_RotationMultiplier;                           // 0x4D70   (0x00F0)  
	FAnimNode_RotationMultiplier                       AnimGraphNode_RotationMultiplier;                           // 0x4E60   (0x00F0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x4F50   (0x0108)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x5058   (0x00C0)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x5118   (0x00C0)  
	unsigned char                                      UnknownData00_5[0x8];                                       // 0x51D8   (0x0008)  MISSED
	FAnimNode_Fabrik                                   AnimGraphNode_Fabrik;                                       // 0x51E0   (0x0190)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x5370   (0x0080)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0x53F0   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x54B8   (0x0028)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x54E0   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x5638   (0x0028)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0x5660   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x5728   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x5750   (0x0080)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x57D0   (0x00C0)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x5890   (0x0190)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x5A20   (0x0190)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x5BB0   (0x00D0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x5C80   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x5CA8   (0x0080)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x5D28   (0x00D0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x5DF8   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x5E20   (0x0080)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x5EA0   (0x0028)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x5EC8   (0x0190)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x6058   (0x0048)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0x60A0   (0x0190)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x6230   (0x00C0)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x62F0   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x6448   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x6470   (0x0028)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x6498   (0x00C0)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x6558   (0x0048)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x65A0   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x66F8   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x6720   (0x0028)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x6748   (0x0108)  
	FAnimNode_Fabrik                                   AnimGraphNode_Fabrik;                                       // 0x6850   (0x0190)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x69E0   (0x0108)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x6AE8   (0x0080)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0x6B68   (0x00C8)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x6C30   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x6D38   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x6E40   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x6F48   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7050   (0x0108)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x7158   (0x0048)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x71A0   (0x00C0)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x7260   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x73B8   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x73E0   (0x0028)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7408   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7510   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7618   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7720   (0x0108)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x7828   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x7848   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7868   (0x0108)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x7970   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x7990   (0x0020)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x79B0   (0x00C0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7A70   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7B78   (0x0108)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x7C80   (0x0028)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x7CA8   (0x0108)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x7DB0   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x7F08   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x7F30   (0x0028)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x7F58   (0x00C0)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x8018   (0x0020)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x8038   (0x0020)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x8058   (0x0008)  MISSED
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0x8060   (0x01E0)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x8240   (0x00C0)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x8300   (0x0020)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0x8320   (0x01E0)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0x8500   (0x01E0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x86E0   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x87E8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x88F0   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x89F8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x8B00   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x8C08   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x8D10   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x8E18   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x8F20   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9028   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9130   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9238   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9340   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9448   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9550   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9658   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9760   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9868   (0x0108)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x9970   (0x00C0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x9A30   (0x0080)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9AB0   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9BB8   (0x0108)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0x9CC0   (0x00F0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9DB0   (0x0108)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x9EB8   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x9ED8   (0x0108)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x9FE0   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xA000   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xA108   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xA210   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xA318   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xA420   (0x0108)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xA528   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xA680   (0x0028)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xA6A8   (0x0158)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0xA800   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xA8C8   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xA8F0   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xA918   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xA940   (0x0080)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xA9C0   (0x0028)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xA9E8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xAAF0   (0x0108)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xABF8   (0x0028)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0xAC20   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0xAC40   (0x0020)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xAC60   (0x0158)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xADB8   (0x0158)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xAF10   (0x0158)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xB068   (0x0080)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0xB0E8   (0x0020)  
	unsigned char                                      UnknownData02_5[0x8];                                       // 0xB108   (0x0008)  MISSED
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xB110   (0x01E0)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xB2F0   (0x01E0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xB4D0   (0x0108)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0xB5D8   (0x0020)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xB5F8   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xB750   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xB778   (0x0028)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0xB7A0   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0xB7C0   (0x0020)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0xB7E0   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0xB800   (0x0020)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xB820   (0x0158)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0xB978   (0x00C8)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xBA40   (0x00A0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xBAE0   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xBB08   (0x0080)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xBB88   (0x00A0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xBC28   (0x0108)  
	FAnimNode_CopyBone                                 AnimGraphNode_CopyBone;                                     // 0xBD30   (0x00F0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xBE20   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xBF28   (0x0108)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0xC030   (0x0190)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xC1C0   (0x00C0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xC280   (0x0028)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xC2A8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xC3B0   (0x0108)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xC4B8   (0x00A0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xC558   (0x0080)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xC5D8   (0x0080)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xC658   (0x00A0)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xC6F8   (0x0158)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0xC850   (0x0190)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xC9E0   (0x00A0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xCA80   (0x0080)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0xCB00   (0x00E8)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xCBE8   (0x00A0)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xCC88   (0x00A0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xCD28   (0x0080)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xCDA8   (0x0080)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xCE28   (0x00A0)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0xCEC8   (0x0048)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0xCF10   (0x00C8)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xCFD8   (0x0080)  
	FAnimNode_RotationOffsetBlendSpace                 AnimGraphNode_RotationOffsetBlendSpace;                     // 0xD058   (0x0190)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0xD1E8   (0x00E8)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xD2D0   (0x0080)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0xD350   (0x00C8)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xD418   (0x0080)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xD498   (0x0108)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xD5A0   (0x01E0)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0xD780   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0xD7A0   (0x0020)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xD7C0   (0x01E0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xD9A0   (0x0108)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xDAA8   (0x0158)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xDC00   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xDD58   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xDD80   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xDDA8   (0x0028)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xDDD0   (0x01E0)  
	FAnimNode_ApplyAdditive                            AnimGraphNode_ApplyAdditive;                                // 0xDFB0   (0x00C8)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xE078   (0x0108)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xE180   (0x0028)  
	unsigned char                                      UnknownData03_5[0x8];                                       // 0xE1A8   (0x0008)  MISSED
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xE1B0   (0x01E0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xE390   (0x0108)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xE498   (0x00C0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xE558   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xE580   (0x0028)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xE5A8   (0x0108)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xE6B0   (0x00C0)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0xE770   (0x0020)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xE790   (0x0158)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE8E8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE910   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE938   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE960   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE988   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE9B0   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xE9D8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEA00   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEA28   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEA50   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEA78   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEAA0   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEAC8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEAF0   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEB18   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0xEB40   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xEB68   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xEBE8   (0x0030)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0xEC18   (0x00D0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xECE8   (0x0080)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xED68   (0x0028)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xED90   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xEDC0   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xEE40   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xEE70   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xEEF0   (0x0030)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0xEF20   (0x00D0)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xEFF0   (0x0080)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xF070   (0x0028)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xF098   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xF0C8   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xF148   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0xF178   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xF1F8   (0x0030)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xF228   (0x0028)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0xF250   (0x0030)  
	FAnimNode_StateMachine                             AnimGraphNode_StateMachine;                                 // 0xF280   (0x00B0)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0xF330   (0x00C8)  
	unsigned char                                      UnknownData04_5[0x8];                                       // 0xF3F8   (0x0008)  MISSED
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xF400   (0x01E0)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xF5E0   (0x00C0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xF6A0   (0x0028)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xF6C8   (0x0028)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0xF6F0   (0x01E0)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xF8D0   (0x00A0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xF970   (0x0028)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xF998   (0x00C0)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xFA58   (0x00C0)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0xFB18   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xFB38   (0x0108)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0xFC40   (0x00A0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0xFCE0   (0x0108)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xFDE8   (0x0028)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0xFE10   (0x0158)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0xFF68   (0x0028)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0xFF90   (0x00C0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10050   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10158   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10260   (0x0108)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x10368   (0x00E8)  
	FAnimNode_TwoBoneIK                                AnimGraphNode_TwoBoneIK;                                    // 0x10450   (0x01E0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10630   (0x0108)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x10738   (0x0020)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x10758   (0x0020)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10778   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10880   (0x0108)  
	FAnimNode_ConvertComponentToLocalSpace             AnimGraphNode_ComponentToLocalSpace;                        // 0x10988   (0x0020)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x109A8   (0x00D0)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x10A78   (0x00E8)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x10B60   (0x00E8)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x10C48   (0x00A0)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10CE8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10DF0   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x10EF8   (0x0108)  
	FAnimNode_ModifyBone                               AnimGraphNode_ModifyBone;                                   // 0x11000   (0x0108)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x11108   (0x0028)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x11130   (0x0048)  
	FAnimNode_ConvertLocalToComponentSpace             AnimGraphNode_LocalToComponentSpace;                        // 0x11178   (0x0020)  
	FAnimNode_BlendSpacePlayer                         AnimGraphNode_BlendSpacePlayer;                             // 0x11198   (0x00E8)  
	FAnimNode_BlendListByBool                          AnimGraphNode_BlendListByBool;                              // 0x11280   (0x00A0)  
	FAnimNode_LayeredBoneBlend                         AnimGraphNode_LayeredBoneBlend;                             // 0x11320   (0x00C0)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x113E0   (0x0048)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x11428   (0x0158)  
	FAnimNode_SaveCachedPose                           AnimGraphNode_SaveCachedPose;                               // 0x11580   (0x0158)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x116D8   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x11700   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x11728   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x11750   (0x0028)  
	FAnimNode_TransitionResult                         AnimGraphNode_TransitionResult;                             // 0x11778   (0x0028)  
	FAnimNode_ApplyMeshSpaceAdditive                   AnimGraphNode_ApplyMeshSpaceAdditive;                       // 0x117A0   (0x00D0)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x11870   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x11898   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x11918   (0x0030)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0x11948   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x11A10   (0x0028)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x11A38   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x11AB8   (0x0030)  
	FAnimNode_SequencePlayer                           AnimGraphNode_SequencePlayer;                               // 0x11AE8   (0x0080)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x11B68   (0x0030)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x11B98   (0x0028)  
	FAnimNode_StateResult                              AnimGraphNode_StateResult;                                  // 0x11BC0   (0x0030)  
	FAnimNode_StateMachine                             AnimGraphNode_StateMachine;                                 // 0x11BF0   (0x00B0)  
	FAnimNode_Slot                                     AnimGraphNode_Slot;                                         // 0x11CA0   (0x0048)  
	FAnimNode_TwoWayBlend                              AnimGraphNode_TwoWayBlend;                                  // 0x11CE8   (0x00C8)  
	FAnimNode_UseCachedPose                            AnimGraphNode_UseCachedPose;                                // 0x11DB0   (0x0028)  
	FAnimNode_Root                                     AnimGraphNode_Root;                                         // 0x11DD8   (0x0030)  
	float                                              RotationSpeedHorizontalWithDirectionMultiplier;             // 0x11E08   (0x0004)  
	FRotator                                           RootBoneRotation;                                           // 0x11E0C   (0x000C)  
	float                                              RotationSpeedHorizontalWithDirectionCurrent;                // 0x11E18   (0x0004)  
	float                                              FootOffset_R;                                               // 0x11E1C   (0x0004)  
	float                                              FootOffset_L;                                               // 0x11E20   (0x0004)  
	float                                              PelvisZOffset;                                              // 0x11E24   (0x0004)  
	FRotator                                           FootRotation_R;                                             // 0x11E28   (0x000C)  
	FRotator                                           FootRotation_L;                                             // 0x11E34   (0x000C)  
	float                                              FootRotation_R_Alpha;                                       // 0x11E40   (0x0004)  
	float                                              FootRotation_L_Alpha;                                       // 0x11E44   (0x0004)  
	float                                              PelvisZOffsetTarget;                                        // 0x11E48   (0x0004)  
	float                                              FootOffset_R_Target;                                        // 0x11E4C   (0x0004)  
	float                                              FootOffset_L_Target;                                        // 0x11E50   (0x0004)  
	bool                                               IsPKM;                                                      // 0x11E54   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x11E55   (0x0003)  MISSED
	FVector                                            PKM_RotationPoint;                                          // 0x11E58   (0x000C)  
	FVector                                            PKM_Offset;                                                 // 0x11E64   (0x000C)  
	FVector                                            PKM_CameraAimOffsetVector;                                  // 0x11E70   (0x000C)  
	FVector                                            PKM_CameraAimOffsetVectorInverse;                           // 0x11E7C   (0x000C)  
	float                                              IK_LeftHand_Alpha;                                          // 0x11E88   (0x0004)  
	float                                              IK_RightHand_Alpha;                                         // 0x11E8C   (0x0004)  
	float                                              EmptyHandsCurveValue;                                       // 0x11E90   (0x0004)  
	FRotator                                           AimOffsetHeadRotation;                                      // 0x11E94   (0x000C)  
	float                                              PickupAlpha;                                                // 0x11EA0   (0x0004)  
	unsigned char                                      UnknownData06_5[0xC];                                       // 0x11EA4   (0x000C)  MISSED
	FTransform                                         PickupFABRICEffectorTransform;                              // 0x11EB0   (0x0030)  
	float                                              MixEmptyHands;                                              // 0x11EE0   (0x0004)  
	float                                              MinCameraOffset;                                            // 0x11EE4   (0x0004)  
	float                                              WeaponAimOffset;                                            // 0x11EE8   (0x0004)  
	float                                              Rest;                                                       // 0x11EEC   (0x0004)  
	float                                              OneMinusRest;                                               // 0x11EF0   (0x0004)  
	float                                              ActionSlotAlpha;                                            // 0x11EF4   (0x0004)  
	FVector                                            BackpackTranslation;                                        // 0x11EF8   (0x000C)  
	float                                              IK_Foot_Alpha;                                              // 0x11F04   (0x0004)  
	float                                              PDA_Alpha;                                                  // 0x11F08   (0x0004)  
	float                                              HandsAimOffsetUpAlpha;                                      // 0x11F0C   (0x0004)  
	FVector                                            HandsAimOffsetUpTranslationOffset;                          // 0x11F10   (0x000C)  
	float                                              IsRunAlpha;                                                 // 0x11F1C   (0x0004)  
	float                                              SexAlpha;                                                   // 0x11F20   (0x0004)  
	FVector                                            FemaleGrenadeDownOffset;                                    // 0x11F24   (0x000C)  
	FVector                                            FemaleGrenadeMiddleDwnffset;                                // 0x11F30   (0x000C)  
	float                                              MyDeltaTime;                                                // 0x11F3C   (0x0004)  
	float                                              IKHand_L;                                                   // 0x11F40   (0x0004)  
	bool                                               IsServer;                                                   // 0x11F44   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x11F45   (0x0003)  MISSED
	ABP_Devourer_Projectile_C*                         Spike;                                                      // 0x11F48   (0x0008)  
	float                                              MinSpeedToSwitchSwimmigStates;                              // 0x11F50   (0x0004)  
	float                                              SwimmingAlpha;                                              // 0x11F54   (0x0004)  
	bool                                               InVehicle;                                                  // 0x11F58   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x11F59   (0x0003)  MISSED
	float                                              WheelAngle;                                                 // 0x11F5C   (0x0004)  
	FVector                                            Vector_FootOffset_R;                                        // 0x11F60   (0x000C)  
	FVector                                            Vector_FootOffset_L;                                        // 0x11F6C   (0x000C)  
	FVector                                            Vector_PelvisZOffset;                                       // 0x11F78   (0x000C)  
	FRotator                                           Rotator_BodyUnderWater;                                     // 0x11F84   (0x000C)  
	float                                              Alpha_RHCenter;                                             // 0x11F90   (0x0004)  
	float                                              Alpha_RHDown;                                               // 0x11F94   (0x0004)  
	float                                              Alpha_RHUp;                                                 // 0x11F98   (0x0004)  
	float                                              Alpha_LHCenter;                                             // 0x11F9C   (0x0004)  
	float                                              Alpha_LHDown;                                               // 0x11FA0   (0x0004)  
	float                                              Alpha_LHUp;                                                 // 0x11FA4   (0x0004)  
	float                                              alpha_upperarm_l;                                           // 0x11FA8   (0x0004)  
	float                                              alpha_lowerarm_l;                                           // 0x11FAC   (0x0004)  
	float                                              alpha_lowerarm_l2;                                          // 0x11FB0   (0x0004)  
	float                                              alpha_AimOffsetBoneRotation;                                // 0x11FB4   (0x0004)  
	float                                              alpha_AimOffsetBoneRotation_Velosity;                       // 0x11FB8   (0x0004)  
	float                                              KnifeOnRunAttack_L;                                         // 0x11FBC   (0x0004)  
	float                                              KnifeOnRunAttack_R;                                         // 0x11FC0   (0x0004)  
	float                                              KnifeOnRunAttack;                                           // 0x11FC4   (0x0004)  
	float                                              Inspect;                                                    // 0x11FC8   (0x0004)  
	bool                                               Debug_Crouch;                                               // 0x11FCC   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x11FCD   (0x0003)  MISSED
	FRotator                                           RotInVehicle;                                               // 0x11FD0   (0x000C)  
	bool                                               bIsInVehicle;                                               // 0x11FDC   (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x11FDD   (0x0003)  MISSED
	FVector                                            CurrentHandsOffsetWithMonocular;                            // 0x11FE0   (0x000C)  
	float                                              MSRAlpha;                                                   // 0x11FEC   (0x0004)  
	float                                              MSRDesiredAlpha;                                            // 0x11FF0   (0x0004)  
	unsigned char                                      UnknownData11_5[0x4];                                       // 0x11FF4   (0x0004)  MISSED
	TArray<int32_t>                                    BadWeponIDList;                                             // 0x11FF8   (0x0010)  
	bool                                               bUseMortar;                                                 // 0x12008   (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x12009   (0x0003)  MISSED
	FVector                                            MortarLeftHandTarget;                                       // 0x1200C   (0x000C)  
	FVector                                            MortarRightHandTarget;                                      // 0x12018   (0x000C)  
	float                                              MortarInclineAlphaInterp;                                   // 0x12024   (0x0004)  
	bool                                               bFishing;                                                   // 0x12028   (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x12029   (0x0003)  MISSED
	float                                              TiltWithRod;                                                // 0x1202C   (0x0004)  
	float                                              Test_IKHand_L;                                              // 0x12030   (0x0004)  
	float                                              Test_IKHand_R;                                              // 0x12034   (0x0004)  


	/// Functions
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.AnimGraph
	void AnimGraph(FPoseLink& AnimGraph);                                                                                    // [0x1ad0090] HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.DotP
	void DotP(FVector v1, FVector v2, float Intencity, float& DotP);                                                         // [0x1ad0090] Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_06B9A58B4BE07324DA461B9D8F1E9DA9
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_06B9A58B4BE07324DA461B9D8F1E9DA9(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_4C3502CA405A59B667397BBBF61AD817
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_4C3502CA405A59B667397BBBF61AD817(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_C21F12CB4DEC227F95554FB5F921FF9E
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_C21F12CB4DEC227F95554FB5F921FF9E(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_58F36B814CF72CB38BE237A6803CE8E0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_58F36B814CF72CB38BE237A6803CE8E0(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_490DE88C40246713C9EAC496DC2CE433
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_490DE88C40246713C9EAC496DC2CE433(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_AD40BAB948222F7BEFD86B873F806F99
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_AD40BAB948222F7BEFD86B873F806F99(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_0C584F7B4C93FFA14432FFA1E05F9780
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_0C584F7B4C93FFA14432FFA1E05F9780(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_B43F5EAA4E72FE0C33504CB846837F14
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_B43F5EAA4E72FE0C33504CB846837F14(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_2AFC3D0B4E6321BA5B19AEA8BC09BD05
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_2AFC3D0B4E6321BA5B19AEA8BC09BD05(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_E0A21B3F481F7E2CDC47D59187FAC62F
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_E0A21B3F481F7E2CDC47D59187FAC62F(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_988A64CC4FFD9F19189703989322DC45
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TransitionResult_988A64CC4FFD9F19189703989322DC45(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendSpacePlayer_D74BCD7F4DAF3502B1D34D825FF74DCF
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendSpacePlayer_D74BCD7F4DAF3502B1D34D825FF74DCF(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_8E40739140FD9DF6C2D7CFA5E1F52140
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_8E40739140FD9DF6C2D7CFA5E1F52140(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_C9589C66423A1C6FFFE96A90764DD5F3
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_C9589C66423A1C6FFFE96A90764DD5F3(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_905514F640B7A83D3603D8810C5F0B0A
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_905514F640B7A83D3603D8810C5F0B0A(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_81E25EAB490FA9E20B5838AF4F5CFF34
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_81E25EAB490FA9E20B5838AF4F5CFF34(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_78DF447E46A63A7C7B52AEB617B72894
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_78DF447E46A63A7C7B52AEB617B72894(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_9B5022B34B1C77CF3CC7DAA48BB0CEA6
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_9B5022B34B1C77CF3CC7DAA48BB0CEA6(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_7AD1B1A54EDEE61F4B7A04A03AAF7187
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_7AD1B1A54EDEE61F4B7A04A03AAF7187(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_65BD74154FAD49A32205349FAB826370
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_65BD74154FAD49A32205349FAB826370(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.BlueprintUpdateAnimation
	void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_810DFB3041D7203A6A8B7599F0C97875
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_810DFB3041D7203A6A8B7599F0C97875(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.AnimNotify_Death
	void AnimNotify_Death();                                                                                                 // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_3FA229CE41308D358C88C8AB41F9070E
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_3FA229CE41308D358C88C8AB41F9070E(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.BlueprintBeginPlay
	void BlueprintBeginPlay();                                                                                               // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.UpdateComplexity
	void UpdateComplexity();                                                                                                 // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_D43F93C248359E9CC18342B7F1A98C1D
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_D43F93C248359E9CC18342B7F1A98C1D(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_LayeredBoneBlend_99B0270D4A5DA8AC990B20870B06B0BB
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_LayeredBoneBlend_99B0270D4A5DA8AC990B20870B06B0BB(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_8E19B94148392A1A0BA23BBA807A162C
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_8E19B94148392A1A0BA23BBA807A162C(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_89F745DE46931E2F86E080B145F4B1A1
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_89F745DE46931E2F86E080B145F4B1A1(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_D54FCF2C44B0EAE685787AB4F0E5200E
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_TwoWayBlend_D54FCF2C44B0EAE685787AB4F0E5200E(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_24AC7B33461DEF1CADCCC1B0E8F0BC62
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_24AC7B33461DEF1CADCCC1B0E8F0BC62(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.AnimNotify_GetSpikeExtractionShoulder
	void AnimNotify_GetSpikeExtractionShoulder();                                                                            // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendSpacePlayer_518232174B3B7EB6ECBC0BA7BF38F431
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendSpacePlayer_518232174B3B7EB6ECBC0BA7BF38F431(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.AnimNotify_OnDiscardSpike
	void AnimNotify_OnDiscardSpike();                                                                                        // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_519422EF4B6B68A03524C09E03A9827D
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendListByBool_519422EF4B6B68A03524C09E03A9827D(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendSpacePlayer_3F35DBE347904175BBF0AC81F4E14537
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_BlendSpacePlayer_3F35DBE347904175BBF0AC81F4E14537(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_SequencePlayer_5C9A48CB44ACA8528C96259E1801050C
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_SequencePlayer_5C9A48CB44ACA8528C96259E1801050C(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_FC40C8D1437B0C4503DD4294C7F75B1B
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_FC40C8D1437B0C4503DD4294C7F75B1B(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_0DEE68A2443812FD263BF8B9D4A4F023
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AB_Male_TPC_Anim_AnimGraphNode_ModifyBone_0DEE68A2443812FD263BF8B9D4A4F023(); // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/AnimBlueprints/Male/PC/AB_Male_TPC_Anim.AB_Male_TPC_Anim_C.ExecuteUbergraph_AB_Male_TPC_Anim
	void ExecuteUbergraph_AB_Male_TPC_Anim(int32_t EntryPoint);                                                              // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C
/// Size: 0x00F9 (0x0019D0 - 0x001AC9)
class ABP_Male_FPC_C : public AWTLCharacter
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x19D0   (0x0008)  
	UNiagaraComponent*                                 Niagara;                                                    // 0x19D8   (0x0008)  
	USkeletalMeshComponent*                            NiagaraTestMerge;                                           // 0x19E0   (0x0008)  
	UAIPerceptionStimuliSourceComponent*               AIPerceptionStimuliSource;                                  // 0x19E8   (0x0008)  
	UStaticMeshComponent*                              FlashlightBackplate;                                        // 0x19F0   (0x0008)  
	UPhysicalAnimationComponent*                       PhysicalAnimation;                                          // 0x19F8   (0x0008)  
	float                                              EyeBlink_NewTrack_0_314643A648B6C5BD1513ADABC0DC0988;       // 0x1A00   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    EyeBlink__Direction_314643A648B6C5BD1513ADABC0DC0988;       // 0x1A04   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x1A05   (0x0003)  MISSED
	UTimelineComponent*                                EyeBlink;                                                   // 0x1A08   (0x0008)  
	float                                              Timeline_0_NewTrack_0_4F0570FC49EB6A568CBAEE83D70FD335;     // 0x1A10   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    Timeline_0__Direction_4F0570FC49EB6A568CBAEE83D70FD335;     // 0x1A14   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x1A15   (0x0003)  MISSED
	UTimelineComponent*                                Timeline;                                                   // 0x1A18   (0x0008)  
	FName                                              BoneName;                                                   // 0x1A20   (0x0008)  
	char                                               LocalComplesion;                                            // 0x1A28   (0x0001)  
	bool                                               IsLockingRotation;                                          // 0x1A29   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x1A2A   (0x0006)  MISSED
	FSkeletalMeshMergeParams                           Params;                                                     // 0x1A30   (0x0040)  
	UNiagaraComponent*                                 TeleportationEffect;                                        // 0x1A70   (0x0008)  
	TWeakObjectPtr<UFMODEvent*>                        DeathEffectEvent;                                           // 0x1A78   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        CharacterBloodEvent;                                        // 0x1AA0   (0x0028)  
	bool                                               isCanTeleport;                                              // 0x1AC8   (0x0001)  


	/// Functions
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.EyeBlink__FinishedFunc
	void EyeBlink__FinishedFunc();                                                                                           // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.EyeBlink__UpdateFunc
	void EyeBlink__UpdateFunc();                                                                                             // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.Timeline_0__FinishedFunc
	void Timeline_0__FinishedFunc();                                                                                         // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.Timeline_0__UpdateFunc
	void Timeline_0__UpdateFunc();                                                                                           // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.K2_ShowEffectsAfterDeath
	void K2_ShowEffectsAfterDeath();                                                                                         // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.K2_ShowTeleportationDeviceEffect
	void K2_ShowTeleportationDeviceEffect();                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.K2_OnDeath
	void K2_OnDeath();                                                                                                       // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.K2_ShowExplosionEffectsAfterDeath
	void K2_ShowExplosionEffectsAfterDeath();                                                                                // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Male_FPC.BP_Male_FPC_C.ExecuteUbergraph_BP_Male_FPC
	void ExecuteUbergraph_BP_Male_FPC(int32_t EntryPoint);                                                                   // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Blueprints/BP_HUD.BP_HUD_C
/// Size: 0x0008 (0x0017F0 - 0x0017F8)
class ABP_HUD_C : public AWTLHUD
{ 
public:
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x17F0   (0x0008)  
};

/// Class /Game/WTL/FX/Blueprints/CS_PlayerTakeDamage.CS_PlayerTakeDamage_C
/// Size: 0x0000 (0x000180 - 0x000180)
class UCS_PlayerTakeDamage_C : public UMatineeCameraShake
{ 
public:
};

/// Class /Game/WTL/Pickups/Weapon/BP_DefaultWeaponPickup.BP_DefaultWeaponPickup_C
/// Size: 0x0000 (0x000360 - 0x000360)
class ABP_DefaultWeaponPickup_C : public AWTLWeaponPickup
{ 
public:
};

/// Class /Game/WTL/Pickups/Ammo/BP_DefaultAmmoPickup.BP_DefaultAmmoPickup_C
/// Size: 0x0000 (0x000358 - 0x000358)
class ABP_DefaultAmmoPickup_C : public AWTLAmmoPickup
{ 
public:
};

/// Class /Game/WTL/Pickups/Medicine/BP_DefaultMedicinePickup.BP_DefaultMedicinePickup_C
/// Size: 0x0000 (0x000330 - 0x000330)
class ABP_DefaultMedicinePickup_C : public AWTLMedicinePickup
{ 
public:
};

/// Class /Game/WTL/Pickups/Stuff/BP_DefaultStuffPickup.BP_DefaultStuffPickup_C
/// Size: 0x0000 (0x000320 - 0x000320)
class ABP_DefaultStuffPickup_C : public AWTLStuffPickup
{ 
public:
};

/// Class /Game/WTL/Pickups/Clothes/BP_DefaultClothesPickup.BP_DefaultClothesPickup_C
/// Size: 0x0000 (0x000338 - 0x000338)
class ABP_DefaultClothesPickup_C : public AWTLClothesPickup
{ 
public:
};

/// Class /Game/WTL/Pickups/Resource/BP_DefaultResourcePickup.BP_DefaultResourcePickup_C
/// Size: 0x0000 (0x0002F8 - 0x0002F8)
class ABP_DefaultResourcePickup_C : public AWTLResourcePickup
{ 
public:
};

/// Class /Game/WTL/Pickups/Artefact/BP_DefaultArtefactPickup.BP_DefaultArtefactPickup_C
/// Size: 0x0000 (0x000328 - 0x000328)
class ABP_DefaultArtefactPickup_C : public AWTLArtefactPickup
{ 
public:
};

/// Class /Game/WTL/Pickups/CharacterDrop/BP_CharacterDrop.BP_CharacterDrop_C
/// Size: 0x0000 (0x000368 - 0x000368)
class ABP_CharacterDrop_C : public AWTLCharacterDrop
{ 
public:
};

/// Class /Game/WTL/Pickups/EnemyNPCDrop/BP_EnemyNPCDrop.BP_EnemyNPCDrop_C
/// Size: 0x0000 (0x0003D0 - 0x0003D0)
class ABP_EnemyNPCDrop_C : public AWTLEnemyNPCDrop
{ 
public:
};

/// Class /Game/WTL/Blueprints/BP_GameInstance.BP_GameInstance_C
/// Size: 0x0000 (0x0011E8 - 0x0011E8)
class UBP_GameInstance_C : public UWTLGameInstance
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/LoadingScreen/WBP_LoadingScreen_Simple.WBP_LoadingScreen_Simple_C
/// Size: 0x0028 (0x000270 - 0x000298)
class UWBP_LoadingScreen_Simple_C : public UWTLLoadingScreenSimple
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0270   (0x0008)  
	UWidgetAnimation*                                  AnimPressKeyTextBlinking;                                   // 0x0278   (0x0008)  
	UImage*                                            imgBackground;                                              // 0x0280   (0x0008)  
	UTextBlock*                                        tbColon;                                                    // 0x0288   (0x0008)  
	UThrobber*                                         thLoading;                                                  // 0x0290   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/LoadingScreen/WBP_LoadingScreen_Simple.WBP_LoadingScreen_Simple_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/LoadingScreen/WBP_LoadingScreen_Simple.WBP_LoadingScreen_Simple_C.Tick
	void Tick(FGeometry MyGeometry, float InDeltaTime);                                                                      // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/LoadingScreen/WBP_LoadingScreen_Simple.WBP_LoadingScreen_Simple_C.ExecuteUbergraph_WBP_LoadingScreen_Simple
	void ExecuteUbergraph_WBP_LoadingScreen_Simple(int32_t EntryPoint);                                                      // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Blueprints/BP_HUD_MainMenu.BP_HUD_MainMenu_C
/// Size: 0x0008 (0x0008F8 - 0x000900)
class ABP_HUD_MainMenu_C : public AWTLHUDMainMenu
{ 
public:
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x08F8   (0x0008)  
};

/// Class /Game/WTL/Environment/Props/Containers/Container20/Blueprints/BP_Container20Poz4.BP_Container20Poz4_C
/// Size: 0x001C (0x000220 - 0x00023C)
class ABP_Container20Poz4_C : public AActor
{ 
public:
	UStaticMeshComponent*                              StaticMesh;                                                 // 0x0220   (0x0008)  
	FLinearColor                                       PaintColor;                                                 // 0x0228   (0x0010)  
	int32_t                                            Logo;                                                       // 0x0238   (0x0004)  


	/// Functions
	// Function /Game/WTL/Environment/Props/Containers/Container20/Blueprints/BP_Container20Poz4.BP_Container20Poz4_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Environment/Props/Containers/Container20/Blueprints/BP_Container20Poz3.BP_Container20Poz3_C
/// Size: 0x001C (0x000220 - 0x00023C)
class ABP_Container20Poz3_C : public AActor
{ 
public:
	UStaticMeshComponent*                              StaticMesh;                                                 // 0x0220   (0x0008)  
	FLinearColor                                       PaintColor;                                                 // 0x0228   (0x0010)  
	int32_t                                            Logo;                                                       // 0x0238   (0x0004)  


	/// Functions
	// Function /Game/WTL/Environment/Props/Containers/Container20/Blueprints/BP_Container20Poz3.BP_Container20Poz3_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Environment/Props/Containers/Container20/Blueprints/BP_Container20Poz2.BP_Container20Poz2_C
/// Size: 0x001C (0x000220 - 0x00023C)
class ABP_Container20Poz2_C : public AActor
{ 
public:
	UStaticMeshComponent*                              StaticMesh;                                                 // 0x0220   (0x0008)  
	FLinearColor                                       PaintColor;                                                 // 0x0228   (0x0010)  
	int32_t                                            Logo;                                                       // 0x0238   (0x0004)  


	/// Functions
	// Function /Game/WTL/Environment/Props/Containers/Container20/Blueprints/BP_Container20Poz2.BP_Container20Poz2_C.UserConstructionScript
	void UserConstructionScript();                                                                                           // [0x1ad0090] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/Environment/Effects/Birds/Raven_01/Blueprints/BP_BirdFly_001.BP_BirdFly_001_C
/// Size: 0x0088 (0x000220 - 0x0002A8)
class ABP_BirdFly_001_C : public AActor
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0220   (0x0008)  
	USkeletalMeshComponent*                            Bird;                                                       // 0x0228   (0x0008)  
	USplineComponent*                                  Spline;                                                     // 0x0230   (0x0008)  
	USkeletalMeshComponent*                            Bird;                                                       // 0x0238   (0x0008)  
	USplineComponent*                                  Spline;                                                     // 0x0240   (0x0008)  
	USkeletalMeshComponent*                            Bird;                                                       // 0x0248   (0x0008)  
	USplineComponent*                                  Spline;                                                     // 0x0250   (0x0008)  
	USkeletalMeshComponent*                            Bird;                                                       // 0x0258   (0x0008)  
	USplineComponent*                                  Spline;                                                     // 0x0260   (0x0008)  
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0268   (0x0008)  
	UAnimSequence*                                     AnimFly;                                                    // 0x0270   (0x0008)  
	float                                              SpeedRotation;                                              // 0x0278   (0x0004)  
	float                                              SpeedRotation;                                              // 0x027C   (0x0004)  
	float                                              SpeedRotation;                                              // 0x0280   (0x0004)  
	float                                              SpeedRotation;                                              // 0x0284   (0x0004)  
	UCurveVector*                                      Traectory;                                                  // 0x0288   (0x0008)  
	UCurveVector*                                      Traectory;                                                  // 0x0290   (0x0008)  
	UCurveVector*                                      Traectory;                                                  // 0x0298   (0x0008)  
	bool                                               IsFlying;                                                   // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02A1   (0x0003)  MISSED
	float                                              Rate;                                                       // 0x02A4   (0x0004)  


	/// Functions
	// Function /Game/WTL/Environment/Effects/Birds/Raven_01/Blueprints/BP_BirdFly_001.BP_BirdFly_001_C.ReceiveTick
	void ReceiveTick(float DeltaSeconds);                                                                                    // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/Environment/Effects/Birds/Raven_01/Blueprints/BP_BirdFly_001.BP_BirdFly_001_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Environment/Effects/Birds/Raven_01/Blueprints/BP_BirdFly_001.BP_BirdFly_001_C.ExecuteUbergraph_BP_BirdFly_001
	void ExecuteUbergraph_BP_BirdFly_001(int32_t EntryPoint);                                                                // [0x1ad0090] Final|HasDefaults    
};

/// Class /Game/WTL/Characters/Blueprints/PC/BP_Character_MainMenu.BP_Character_MainMenu_C
/// Size: 0x0018 (0x0005A0 - 0x0005B8)
class ABP_Character_MainMenu_C : public AWTLMainMenuCharacter
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x05A0   (0x0008)  
	float                                              EyeBlink_NewTrack_0_2938E1A04E1409EE58A4BB8331E7642D;       // 0x05A8   (0x0004)  
	TEnumAsByte<ETimelineDirection>                    EyeBlink__Direction_2938E1A04E1409EE58A4BB8331E7642D;       // 0x05AC   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x05AD   (0x0003)  MISSED
	UTimelineComponent*                                EyeBlink;                                                   // 0x05B0   (0x0008)  


	/// Functions
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Character_MainMenu.BP_Character_MainMenu_C.EyeBlink__FinishedFunc
	void EyeBlink__FinishedFunc();                                                                                           // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Character_MainMenu.BP_Character_MainMenu_C.EyeBlink__UpdateFunc
	void EyeBlink__UpdateFunc();                                                                                             // [0x1ad0090] BlueprintEvent       
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Character_MainMenu.BP_Character_MainMenu_C.ReceiveBeginPlay
	void ReceiveBeginPlay();                                                                                                 // [0x1ad0090] Event|Protected|BlueprintEvent 
	// Function /Game/WTL/Characters/Blueprints/PC/BP_Character_MainMenu.BP_Character_MainMenu_C.ExecuteUbergraph_BP_Character_MainMenu
	void ExecuteUbergraph_BP_Character_MainMenu(int32_t EntryPoint);                                                         // [0x1ad0090] Final                
};

/// Class /Game/WTL/Blueprints/BP_GameMode_MainMenu.BP_GameMode_MainMenu_C
/// Size: 0x0008 (0x000308 - 0x000310)
class ABP_GameMode_MainMenu_C : public AGameMode
{ 
public:
	USceneComponent*                                   DefaultSceneRoot;                                           // 0x0308   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/Start/WBP_MainMenu_ExitButton.WBP_MainMenu_ExitButton_C
/// Size: 0x0008 (0x000340 - 0x000348)
class UWBP_MainMenu_ExitButton_C : public UWTLCommonButton
{ 
public:
	UImage*                                            Image;                                                      // 0x0340   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_TextButton.WBP_Common_TextButton_C
/// Size: 0x0000 (0x0003F8 - 0x0003F8)
class UWBP_Common_TextButton_C : public UWTLCommonTextButton
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/Start/WBP_MainMenu_Start.WBP_MainMenu_Start_C
/// Size: 0x0040 (0x000378 - 0x0003B8)
class UWBP_MainMenu_Start_C : public UWTLMainMenuStart
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0378   (0x0008)  
	UImage*                                            Image;                                                      // 0x0380   (0x0008)  
	UImage*                                            Image;                                                      // 0x0388   (0x0008)  
	UImage*                                            Image;                                                      // 0x0390   (0x0008)  
	UImage*                                            Image;                                                      // 0x0398   (0x0008)  
	UImage*                                            Image;                                                      // 0x03A0   (0x0008)  
	UImage*                                            imgLogo;                                                    // 0x03A8   (0x0008)  
	UTextBlock*                                        TextBlock;                                                  // 0x03B0   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/Main/Start/WBP_MainMenu_Start.WBP_MainMenu_Start_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/Main/Start/WBP_MainMenu_Start.WBP_MainMenu_Start_C.ExecuteUbergraph_WBP_MainMenu_Start
	void ExecuteUbergraph_WBP_MainMenu_Start(int32_t EntryPoint);                                                            // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_HotkeyButton.WBP_Common_HotkeyButton_C
/// Size: 0x0018 (0x000420 - 0x000438)
class UWBP_Common_HotkeyButton_C : public UWTLCommonHotkeyButton
{ 
public:
	UTextBlock*                                        tbButtonKey;                                                // 0x0420   (0x0008)  
	UTextBlock*                                        tbLeftBracket;                                              // 0x0428   (0x0008)  
	UTextBlock*                                        tbRightBracket;                                             // 0x0430   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/ServerList/WBP_MainMenu_ServerList.WBP_MainMenu_ServerList_C
/// Size: 0x0018 (0x0002E0 - 0x0002F8)
class UWBP_MainMenu_ServerList_C : public UWTLMainMenuServerList
{ 
public:
	UThrobber*                                         thConnectLoader;                                            // 0x02E0   (0x0008)  
	UCircularThrobber*                                 thRefreshLoader;                                            // 0x02E8   (0x0008)  
	UWBP_MainMenu_ServerList_Item_C*                   UI_MainMenu_ServerListItem;                                 // 0x02F0   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/ServerList/WBP_MainMenu_ServerList_Item.WBP_MainMenu_ServerList_Item_C
/// Size: 0x0028 (0x0006B8 - 0x0006E0)
class UWBP_MainMenu_ServerList_Item_C : public UWTLMainMenuServerListItem
{ 
public:
	UImage*                                            Image;                                                      // 0x06B8   (0x0008)  
	UImage*                                            Image;                                                      // 0x06C0   (0x0008)  
	UImage*                                            Image;                                                      // 0x06C8   (0x0008)  
	UImage*                                            imgLastPlayedServer;                                        // 0x06D0   (0x0008)  
	UImage*                                            imgREcommendedServer;                                       // 0x06D8   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterSelect/WBP_MainMenu_CharacterListItem.WBP_MainMenu_CharacterListItem_C
/// Size: 0x0038 (0x0011E8 - 0x001220)
class UWBP_MainMenu_CharacterListItem_C : public UWTLMainMenuCharacterListItem
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x11E8   (0x0008)  
	UWidgetAnimation*                                  EditBtnAttentionAnim;                                       // 0x11F0   (0x0008)  
	UImage*                                            Image;                                                      // 0x11F8   (0x0008)  
	UImage*                                            Image;                                                      // 0x1200   (0x0008)  
	UImage*                                            Image;                                                      // 0x1208   (0x0008)  
	UImage*                                            Image;                                                      // 0x1210   (0x0008)  
	UImage*                                            imgCredits;                                                 // 0x1218   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterSelect/WBP_MainMenu_CharacterListItem.WBP_MainMenu_CharacterListItem_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterSelect/WBP_MainMenu_CharacterListItem.WBP_MainMenu_CharacterListItem_C.ExecuteUbergraph_WBP_MainMenu_CharacterListItem
	void ExecuteUbergraph_WBP_MainMenu_CharacterListItem(int32_t EntryPoint);                                                // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/Common/MessageDialog/WBP_Common_MessageDialog_Button.WBP_Common_MessageDialog_Button_C
/// Size: 0x0018 (0x000448 - 0x000460)
class UWBP_Common_MessageDialog_Button_C : public UWTLCommonMessageDialogButton
{ 
public:
	UTextBlock*                                        tbButtonKey;                                                // 0x0448   (0x0008)  
	UTextBlock*                                        tbLeftBracket;                                              // 0x0450   (0x0008)  
	UTextBlock*                                        tbRightBracket;                                             // 0x0458   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_StoreButton.WBP_Common_StoreButton_C
/// Size: 0x0018 (0x000460 - 0x000478)
class UWBP_Common_StoreButton_C : public UWTLCommonStoreButton
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x0460   (0x0008)  
	UWidgetAnimation*                                  IdleAnim;                                                   // 0x0468   (0x0008)  
	UImage*                                            imgStore;                                                   // 0x0470   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_StoreButton.WBP_Common_StoreButton_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_StoreButton.WBP_Common_StoreButton_C.ExecuteUbergraph_WBP_Common_StoreButton
	void ExecuteUbergraph_WBP_Common_StoreButton(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterSelect/WBP_MainMenu_CharacterSelect.WBP_MainMenu_CharacterSelect_C
/// Size: 0x0040 (0x0003F0 - 0x000430)
class UWBP_MainMenu_CharacterSelect_C : public UWTLMainMenuCharacterSelect
{ 
public:
	UBorder*                                           bMessageBorder;                                             // 0x03F0   (0x0008)  
	UHorizontalBox*                                    hbButtonsBox;                                               // 0x03F8   (0x0008)  
	UImage*                                            Image;                                                      // 0x0400   (0x0008)  
	UImage*                                            Image;                                                      // 0x0408   (0x0008)  
	UWBP_MainMenu_CharacterListItem_C*                 UI_MainMenu_CharacterListItem;                              // 0x0410   (0x0008)  
	UWBP_MainMenu_CharacterListItem_C*                 UI_MainMenu_CharacterListItem_C;                            // 0x0418   (0x0008)  
	UWBP_MainMenu_CharacterListItem_C*                 UI_MainMenu_CharacterListItem_C;                            // 0x0420   (0x0008)  
	UWBP_MainMenu_CharacterListItem_C*                 UI_MainMenu_CharacterListItem_C;                            // 0x0428   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterSelect/WBP_MainMenu_CharacterSelect.WBP_MainMenu_CharacterSelect_C.InitializeBlueprint
	void InitializeBlueprint();                                                                                              // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Game/WTL/UI/Blueprints/Common/ColorPresets/WBP_Common_ColorPresetItem.WBP_Common_ColorPresetItem_C
/// Size: 0x0000 (0x000380 - 0x000380)
class UWBP_Common_ColorPresetItem_C : public UWTLCommonColorPresetItem
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_ZoomOutButton.WBP_MainMenu_ZoomOutButton_C
/// Size: 0x0008 (0x000340 - 0x000348)
class UWBP_MainMenu_ZoomOutButton_C : public UWTLCommonButton
{ 
public:
	UImage*                                            imgZoomOut;                                                 // 0x0340   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_MaterialColorScalar.WBP_MainMenu_MaterialColorScalar_C
/// Size: 0x0000 (0x000340 - 0x000340)
class UWBP_MainMenu_MaterialColorScalar_C : public UWTLMainMenuMaterialColorScalar
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization_MaterialsTabButton.WBP_MainMenu_Customization_MaterialsTabButton_C
/// Size: 0x0008 (0x0012C8 - 0x0012D0)
class UWBP_MainMenu_Customization_MaterialsTabButton_C : public UWTLMainMenuMaterialsTabButton
{ 
public:
	UTextBlock*                                        tbTab;                                                      // 0x12C8   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization_Item.WBP_MainMenu_Customization_Item_C
/// Size: 0x0020 (0x0005C0 - 0x0005E0)
class UWBP_MainMenu_Customization_Item_C : public UWTLMainMenuCustomizationItem
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x05C0   (0x0008)  
	UWidgetAnimation*                                  ShowPurchasedAnim;                                          // 0x05C8   (0x0008)  
	UImage*                                            imgCredits;                                                 // 0x05D0   (0x0008)  
	UImage*                                            imgNoImage;                                                 // 0x05D8   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization_Item.WBP_MainMenu_Customization_Item_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization_Item.WBP_MainMenu_Customization_Item_C.ExecuteUbergraph_WBP_MainMenu_Customization_Item
	void ExecuteUbergraph_WBP_MainMenu_Customization_Item(int32_t EntryPoint);                                               // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization_ColorButton.WBP_MainMenu_Customization_ColorButton_C
/// Size: 0x0000 (0x0002E8 - 0x0002E8)
class UWBP_MainMenu_Customization_ColorButton_C : public UWTLCommonColorButton
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization_ArrowButton.WBP_MainMenu_Customization_ArrowButton_C
/// Size: 0x0000 (0x000340 - 0x000340)
class UWBP_MainMenu_Customization_ArrowButton_C : public UWTLCommonButton
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_BodyPartTabButton.WBP_MainMenu_BodyPartTabButton_C
/// Size: 0x0000 (0x0005D8 - 0x0005D8)
class UWBP_MainMenu_BodyPartTabButton_C : public UWTLMainMenuBodyPartTypeButton
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/Common/Options/Elements/WBP_Options_ParameterSwitcher.WBP_Options_ParameterSwitcher_C
/// Size: 0x0000 (0x000320 - 0x000320)
class UWBP_Options_ParameterSwitcher_C : public UWTLOptionsParameterSwitcher
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/Common/Options/Elements/WBP_Options_ParameterSlider_Percent.WBP_Options_ParameterSlider_Percent_C
/// Size: 0x0000 (0x0002D8 - 0x0002D8)
class UWBP_Options_ParameterSlider_Percent_C : public UWTLOptionsParameterSliderPercent
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/Common/ColorPresets/WBP_Common_ColorPresets.WBP_Common_ColorPresets_C
/// Size: 0x0028 (0x000310 - 0x000338)
class UWBP_Common_ColorPresets_C : public UWTLCommonColorPresets
{ 
public:
	UWBP_Common_ColorPresetItem_C*                     UI_Common_ColorPreset_Item_C;                               // 0x0310   (0x0008)  
	UWBP_Common_ColorPresetItem_C*                     UI_MainMenu_ColorPreset_Item;                               // 0x0318   (0x0008)  
	UWBP_Common_ColorPresetItem_C*                     UI_MainMenu_ColorPreset_Item_C;                             // 0x0320   (0x0008)  
	UWBP_Common_ColorPresetItem_C*                     UI_MainMenu_ColorPreset_Item_C;                             // 0x0328   (0x0008)  
	UWBP_Common_ColorPresetItem_C*                     UI_MainMenu_ColorPreset_Item_C;                             // 0x0330   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_SexButton.WBP_Common_SexButton_C
/// Size: 0x0000 (0x000378 - 0x000378)
class UWBP_Common_SexButton_C : public UWTLCommonSexButton
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/WBP_MainMenu_TextBox.WBP_MainMenu_TextBox_C
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class UWBP_MainMenu_TextBox_C : public UWTLMainMenuTextBox
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterCreate/WBP_MainMenu_PlayerClass.WBP_MainMenu_PlayerClass_C
/// Size: 0x0050 (0x000478 - 0x0004C8)
class UWBP_MainMenu_PlayerClass_C : public UWTLMainMenuPlayerClass
{ 
public:
	UImage*                                            imgFemaleEngineer;                                          // 0x0478   (0x0008)  
	UImage*                                            imgFemaleHunter;                                            // 0x0480   (0x0008)  
	UImage*                                            imgFemaleMercenary;                                         // 0x0488   (0x0008)  
	UImage*                                            imgFemaleMiner;                                             // 0x0490   (0x0008)  
	UImage*                                            imgFemaleNone;                                              // 0x0498   (0x0008)  
	UImage*                                            imgMaleEngineer;                                            // 0x04A0   (0x0008)  
	UImage*                                            imgMaleHunter;                                              // 0x04A8   (0x0008)  
	UImage*                                            imgMaleMercenary;                                           // 0x04B0   (0x0008)  
	UImage*                                            imgMaleMiner;                                               // 0x04B8   (0x0008)  
	UImage*                                            imgMaleNone;                                                // 0x04C0   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/WBP_MainMenu_CharacterNameWarning.WBP_MainMenu_CharacterNameWarning_C
/// Size: 0x0008 (0x000260 - 0x000268)
class UWBP_MainMenu_CharacterNameWarning_C : public UUserWidget
{ 
public:
	UImage*                                            Image;                                                      // 0x0260   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/WBP_MainMenu_CharacterName.WBP_MainMenu_CharacterName_C
/// Size: 0x0018 (0x000348 - 0x000360)
class UWBP_MainMenu_CharacterName_C : public UWTLMainMenuCharacterName
{ 
public:
	UCircularThrobber*                                 CircularThrobber;                                           // 0x0348   (0x0008)  
	UImage*                                            imgNonValid;                                                // 0x0350   (0x0008)  
	UImage*                                            imgValid;                                                   // 0x0358   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Common/Customization/WBP_MainMenu_Customization.WBP_MainMenu_Customization_C
/// Size: 0x00B0 (0x001890 - 0x001940)
class UWBP_MainMenu_Customization_C : public UWTLMainMenuCustomization
{ 
public:
	UHorizontalBox*                                    hbBodyType;                                                 // 0x1890   (0x0008)  
	UWBP_Common_SexButton_C*                           ucSexButtonFemale;                                          // 0x1898   (0x0008)  
	UWBP_Common_SexButton_C*                           ucSexButtonMale;                                            // 0x18A0   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton;                             // 0x18A8   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18B0   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18B8   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18C0   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18C8   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18D0   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18D8   (0x0008)  
	UWBP_MainMenu_BodyPartTabButton_C*                 UI_MainMenu_BodyPart_TabButton_C;                           // 0x18E0   (0x0008)  
	UWBP_MainMenu_Customization_Item_C*                UI_MainMenu_Customization_Item;                             // 0x18E8   (0x0008)  
	UWBP_MainMenu_Customization_Item_C*                UI_MainMenu_Customization_Item_C;                           // 0x18F0   (0x0008)  
	UWBP_MainMenu_Customization_Item_C*                UI_MainMenu_Customization_Item_C;                           // 0x18F8   (0x0008)  
	UWBP_MainMenu_Customization_Item_C*                UI_MainMenu_Customization_Item_C;                           // 0x1900   (0x0008)  
	UWBP_MainMenu_Customization_MaterialsTabButton_C*  UI_MainMenu_Customization_Materials_Tab_Button;             // 0x1908   (0x0008)  
	UWBP_MainMenu_Customization_MaterialsTabButton_C*  UI_MainMenu_Customization_Materials_Tab_Button_C;           // 0x1910   (0x0008)  
	UWBP_MainMenu_Customization_MaterialsTabButton_C*  UI_MainMenu_Customization_Materials_Tab_Button_C;           // 0x1918   (0x0008)  
	UWBP_MainMenu_MaterialColorScalar_C*               UI_MainMenu_Material_Color_Scalar;                          // 0x1920   (0x0008)  
	UWBP_MainMenu_MaterialColorScalar_C*               UI_MainMenu_Material_Color_Scalar_C;                        // 0x1928   (0x0008)  
	UWBP_MainMenu_MaterialColorScalar_C*               UI_MainMenu_Material_Color_Scalar_C;                        // 0x1930   (0x0008)  
	UWBP_MainMenu_MaterialColorScalar_C*               UI_MainMenu_Material_Color_Scalar_C;                        // 0x1938   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/WBP_Common_CharacterRotator.WBP_Common_CharacterRotator_C
/// Size: 0x0000 (0x0002C8 - 0x0002C8)
class UWBP_Common_CharacterRotator_C : public UWTLCommonCharacterRotator
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/CharacterCreate/WBP_MainMenu_CharacterCreate.WBP_MainMenu_CharacterCreate_C
/// Size: 0x0020 (0x0002F0 - 0x000310)
class UWBP_MainMenu_CharacterCreate_C : public UWTLMainMenuCharacterCreate
{ 
public:
	UWBP_MainMenu_PlayerClass_C*                       ucPlayerClassEngineer;                                      // 0x02F0   (0x0008)  
	UWBP_MainMenu_PlayerClass_C*                       ucPlayerClassHunter;                                        // 0x02F8   (0x0008)  
	UWBP_MainMenu_PlayerClass_C*                       ucPlayerClassMercenary;                                     // 0x0300   (0x0008)  
	UWBP_MainMenu_PlayerClass_C*                       ucPlayerClassMiner;                                         // 0x0308   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/ToolTipTexts/WBP_Common_ToolTipText.WBP_Common_ToolTipText_C
/// Size: 0x0000 (0x000268 - 0x000268)
class UWBP_Common_ToolTipText_C : public UWTLCommonToolTipText
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/Common/Options/Elements/WBP_Options_ParameterItem.WBP_Options_ParameterItem_C
/// Size: 0x0000 (0x000268 - 0x000268)
class UWBP_Options_ParameterItem_C : public UWTLOptionsParameterItem
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/Main/WBP_MainMenu_CustomizationEdit.WBP_MainMenu_CustomizationEdit_C
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class UWBP_MainMenu_CustomizationEdit_C : public UWTLMainMenuCustomizationEdit
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_Announcer.WBP_MainMenu_Announcer_C
/// Size: 0x0010 (0x0002D0 - 0x0002E0)
class UWBP_MainMenu_Announcer_C : public UWTLMainMenuAnnouncer
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02D0   (0x0008)  
	UWidgetAnimation*                                  NewAnnouncementAnim;                                        // 0x02D8   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_Announcer.WBP_MainMenu_Announcer_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_Announcer.WBP_MainMenu_Announcer_C.ExecuteUbergraph_WBP_MainMenu_Announcer
	void ExecuteUbergraph_WBP_MainMenu_Announcer(int32_t EntryPoint);                                                        // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_OptionsButton.WBP_MainMenu_OptionsButton_C
/// Size: 0x0008 (0x000340 - 0x000348)
class UWBP_MainMenu_OptionsButton_C : public UWTLCommonButton
{ 
public:
	UImage*                                            imgOptions;                                                 // 0x0340   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/CreditsAmount/WBP_Common_CreditsAmount.WBP_Common_CreditsAmount_C
/// Size: 0x0018 (0x0002E8 - 0x000300)
class UWBP_Common_CreditsAmount_C : public UWTLCommonCreditsAmount
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02E8   (0x0008)  
	UWidgetAnimation*                                  CreditsTopUpAnim;                                           // 0x02F0   (0x0008)  
	UImage*                                            imgCredits;                                                 // 0x02F8   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/Common/CreditsAmount/WBP_Common_CreditsAmount.WBP_Common_CreditsAmount_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/Common/CreditsAmount/WBP_Common_CreditsAmount.WBP_Common_CreditsAmount_C.ExecuteUbergraph_WBP_Common_CreditsAmount
	void ExecuteUbergraph_WBP_Common_CreditsAmount(int32_t EntryPoint);                                                      // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/TopUpCredits/WBP_Common_TopUpCreditsButton_Small.WBP_Common_TopUpCreditsButton_Small_C
/// Size: 0x0008 (0x000340 - 0x000348)
class UWBP_Common_TopUpCreditsButton_Small_C : public UWTLCommonTopUpCreditsSmallButton
{ 
public:
	UImage*                                            Image;                                                      // 0x0340   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/CreditsAmount/WBP_Common_CreditsAmount_WithTopUp.WBP_Common_CreditsAmount_WithTopUp_C
/// Size: 0x0008 (0x000268 - 0x000270)
class UWBP_Common_CreditsAmount_WithTopUp_C : public UWTLCommonCreditsAmountWithTopUp
{ 
public:
	UWBP_Common_TopUpCreditsButton_Small_C*            ucTopUpCreditsSmallButton;                                  // 0x0268   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_PremiumButton.WBP_Common_PremiumButton_C
/// Size: 0x0008 (0x000380 - 0x000388)
class UWBP_Common_PremiumButton_C : public UWTLCommonPremiumButton
{ 
public:
	UImage*                                            imgNotActive;                                               // 0x0380   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/Buttons/WBP_Common_CodeButton.WBP_Common_CodeButton_C
/// Size: 0x0008 (0x000340 - 0x000348)
class UWBP_Common_CodeButton_C : public UWTLCommonButton
{ 
public:
	UImage*                                            Image;                                                      // 0x0340   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_CreditsAmount_WithTopUp.WBP_MainMenu_CreditsAmount_WithTopUp_C
/// Size: 0x0000 (0x000290 - 0x000290)
class UWBP_MainMenu_CreditsAmount_WithTopUp_C : public UWTLMainMenuCreditsAmountWithTopUp
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_ChooseLanguage.WBP_MainMenu_ChooseLanguage_C
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UWBP_MainMenu_ChooseLanguage_C : public UWTLMainMenuChooseLanguage
{ 
public:
	UBorder*                                           bBorder;                                                    // 0x02B8   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_ChooseAccountType.WBP_MainMenu_ChooseAccountType_C
/// Size: 0x0028 (0x000290 - 0x0002B8)
class UWBP_MainMenu_ChooseAccountType_C : public UWTLMainMenuChooseAccountType
{ 
public:
	UBorder*                                           bMessageBorder;                                             // 0x0290   (0x0008)  
	UImage*                                            Image;                                                      // 0x0298   (0x0008)  
	UImage*                                            Image;                                                      // 0x02A0   (0x0008)  
	UTextBlock*                                        tbButton;                                                   // 0x02A8   (0x0008)  
	UTextBlock*                                        TextBlock;                                                  // 0x02B0   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_ServerAuthorization.WBP_MainMenu_ServerAuthorization_C
/// Size: 0x0020 (0x0002B0 - 0x0002D0)
class UWBP_MainMenu_ServerAuthorization_C : public UWTLMainMenuServerAuthorization
{ 
public:
	UBorder*                                           bBorder;                                                    // 0x02B0   (0x0008)  
	UCheckBox*                                         cbSavePassword;                                             // 0x02B8   (0x0008)  
	UTextBlock*                                        tbSavePassword;                                             // 0x02C0   (0x0008)  
	UTextBlock*                                        tbTitle;                                                    // 0x02C8   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/Common/WBP_Common_CountdownSlider.WBP_Common_CountdownSlider_C
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class UWBP_Common_CountdownSlider_C : public UWTLCommonCountdownSlider
{ 
public:
};

/// Class /Game/WTL/UI/Blueprints/Common/Windows/Widgets/WBP_Common_CountdownWindow.WBP_Common_CountdownWindow_C
/// Size: 0x0008 (0x000310 - 0x000318)
class UWBP_Common_CountdownWindow_C : public UWTLCommonCountdownWindow
{ 
public:
	UBorder*                                           bMessageBorder;                                             // 0x0310   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/ErrorNotificator/WBP_MainMenu_ErrorNotificator.WBP_MainMenu_ErrorNotificator_C
/// Size: 0x0008 (0x0002A8 - 0x0002B0)
class UWBP_MainMenu_ErrorNotificator_C : public UWTLCommonNotificator
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02A8   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/ErrorNotificator/WBP_MainMenu_ErrorNotificator.WBP_MainMenu_ErrorNotificator_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/ErrorNotificator/WBP_MainMenu_ErrorNotificator.WBP_MainMenu_ErrorNotificator_C.ExecuteUbergraph_WBP_MainMenu_ErrorNotificator
	void ExecuteUbergraph_WBP_MainMenu_ErrorNotificator(int32_t EntryPoint);                                                 // [0x1ad0090] Final                
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_GameVersionInfo.WBP_MainMenu_GameVersionInfo_C
/// Size: 0x0008 (0x000270 - 0x000278)
class UWBP_MainMenu_GameVersionInfo_C : public UWTLMainMenuGameVersionInfo
{ 
public:
	UTextBlock*                                        tbColon;                                                    // 0x0270   (0x0008)  
};

/// Class /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C
/// Size: 0x0050 (0x0002B8 - 0x000308)
class UWBP_MainMenu_MoviePlayer_C : public UWTLMainMenuMoviePlayer
{ 
public:
	FPointerToUberGraphFrame                           UberGraphFrame;                                             // 0x02B8   (0x0008)  
	UImage*                                            imgBlackScreen;                                             // 0x02C0   (0x0008)  
	UImage*                                            imgMovie;                                                   // 0x02C8   (0x0008)  
	UMediaPlayer*                                      MediaPlayer;                                                // 0x02D0   (0x0008)  
	FMulticastInlineDelegate                           OnTimerExec;                                                // 0x02D8   (0x0010)  
	FMulticastInlineDelegate                           OnMediaClosed;                                              // 0x02E8   (0x0010)  
	FTimerHandle                                       TimerHandle;                                                // 0x02F8   (0x0008)  
	UAudioComponent*                                   AudioComponent;                                             // 0x0300   (0x0008)  


	/// Functions
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.CloseMediaPlayer
	void CloseMediaPlayer();                                                                                                 // [0x1ad0090] Public|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.OnTimerExec_Event
	void OnTimerExec_Event();                                                                                                // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.Tick
	void Tick(FGeometry MyGeometry, float InDeltaTime);                                                                      // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.Construct
	void Construct();                                                                                                        // [0x1ad0090] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.OnMediaClosed_Event
	void OnMediaClosed_Event();                                                                                              // [0x1ad0090] BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.OnPlayMovie
	void OnPlayMovie();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.OnStopMovie
	void OnStopMovie();                                                                                                      // [0x1ad0090] Event|Public|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.ExecuteUbergraph_WBP_MainMenu_MoviePlayer
	void ExecuteUbergraph_WBP_MainMenu_MoviePlayer(int32_t EntryPoint);                                                      // [0x1ad0090] Final|HasDefaults    
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.OnMediaClosed__DelegateSignature
	void OnMediaClosed__DelegateSignature();                                                                                 // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
	// Function /Game/WTL/UI/Blueprints/MainMenu/WBP_MainMenu_MoviePlayer.WBP_MainMenu_MoviePlayer_C.OnTimerExec__DelegateSignature
	void OnTimerExec__DelegateSignature();                                                                                   // [0x1ad0090] Public|Delegate|BlueprintCallable|BlueprintEvent 
};

/// Struct /Script/WTL.WTLPacket
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/WTL.WTLMailPackageRecord
/// Size: 0x0120 (0x000028 - 0x000148)
struct FWTLMailPackageRecord : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	uint64_t                                           FromCharacterID;                                            // 0x0030   (0x0008)  
	FString                                            FromCharacterName;                                          // 0x0038   (0x0010)  
	uint64_t                                           ToCharacterID;                                              // 0x0048   (0x0008)  
	FString                                            ToCharacterName;                                            // 0x0050   (0x0010)  
	FWTLDateTime                                       MailDate;                                                   // 0x0060   (0x0008)  
	EWTLMailPackageDeliveryType                        DeliveryType;                                               // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0069   (0x0007)  MISSED
	FWTLDateTime                                       PlanDeliveryDate;                                           // 0x0070   (0x0008)  
	uint32_t                                           TotalWeight;                                                // 0x0078   (0x0004)  
	uint32_t                                           TotalPrice;                                                 // 0x007C   (0x0004)  
	FString                                            MessageText;                                                // 0x0080   (0x0010)  
	uint32_t                                           MoneyAmount;                                                // 0x0090   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0094   (0x0004)  MISSED
	FWTLStorageContent                                 Items;                                                      // 0x0098   (0x00A8)  
	EWTLMailPackageState                               State;                                                      // 0x0140   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0141   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLStorageContent
/// Size: 0x0080 (0x000028 - 0x0000A8)
struct FWTLStorageContent : FWTLPacket
{ 
	EWTLStorageType                                    StorageType;                                                // 0x0028   (0x0001)  
	EWTLLocationStorageType                            LocationStorageType;                                        // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           StorageID;                                                  // 0x0030   (0x0008)  
	TArray<FWTLWeaponItem>                             WeaponItems;                                                // 0x0038   (0x0010)  
	TArray<FWTLAmmoItem>                               AmmoItems;                                                  // 0x0048   (0x0010)  
	TArray<FWTLMedicineItem>                           MedicineItems;                                              // 0x0058   (0x0010)  
	TArray<FWTLStuffItem>                              StuffItems;                                                 // 0x0068   (0x0010)  
	TArray<FWTLClothesItem>                            ClothesItems;                                               // 0x0078   (0x0010)  
	TArray<FWTLResourceItem>                           ResourceItems;                                              // 0x0088   (0x0010)  
	TArray<FWTLArtefactItem>                           ArtefactItems;                                              // 0x0098   (0x0010)  
};

/// Struct /Script/WTL.WTLItemRecord
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLItemRecord : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLArtefactItem
/// Size: 0x0070 (0x000030 - 0x0000A0)
struct FWTLArtefactItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           ArtefactID;                                                 // 0x0038   (0x0002)  
	EWTLArtefactType                                   Type;                                                       // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x003B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	FWTLDateTime                                       CreationDate;                                               // 0x0060   (0x0008)  
	FString                                            CreatorName;                                                // 0x0068   (0x0010)  
	int32_t                                            Count;                                                      // 0x0078   (0x0004)  
	int32_t                                            Weight;                                                     // 0x007C   (0x0004)  
	int32_t                                            TotalWeight;                                                // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0084   (0x0004)  MISSED
	FWTLDateTime                                       ValidityDate;                                               // 0x0088   (0x0008)  
	uint64_t                                           InteractiveObjectID;                                        // 0x0090   (0x0008)  
	char                                               SlotNumber;                                                 // 0x0098   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLDateTime
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLDateTime
{ 
	int64_t                                            Value;                                                      // 0x0000   (0x0008)  
};

/// Struct /Script/WTL.WTLResourceItem
/// Size: 0x0040 (0x000030 - 0x000070)
struct FWTLResourceItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           ResourceID;                                                 // 0x0038   (0x0002)  
	EWTLResourceType                                   Type;                                                       // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x003B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	int32_t                                            Count;                                                      // 0x0060   (0x0004)  
	int32_t                                            Weight;                                                     // 0x0064   (0x0004)  
	int32_t                                            TotalWeight;                                                // 0x0068   (0x0004)  
	char                                               SlotNumber;                                                 // 0x006C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLClothesItem
/// Size: 0x0080 (0x000030 - 0x0000B0)
struct FWTLClothesItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           ClothesID;                                                  // 0x0038   (0x0002)  
	EWTLClothesType                                    Type;                                                       // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x003B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	EWTLArmorClass                                     ArmorClass;                                                 // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0061   (0x0007)  MISSED
	FWTLDateTime                                       CreationDate;                                               // 0x0068   (0x0008)  
	FString                                            CreatorName;                                                // 0x0070   (0x0010)  
	uint16_t                                           ArmorMin;                                                   // 0x0080   (0x0002)  
	uint16_t                                           ArmorMax;                                                   // 0x0082   (0x0002)  
	int32_t                                            Weight;                                                     // 0x0084   (0x0004)  
	int32_t                                            TotalWeight;                                                // 0x0088   (0x0004)  
	int32_t                                            Condition;                                                  // 0x008C   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x0090   (0x0004)  
	char                                               ModCount;                                                   // 0x0094   (0x0001)  
	char                                               CustomizationScalar;                                        // 0x0095   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0096   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x0097   (0x0001)  MISSED
	uint16_t                                           FrontPlateTypeID;                                           // 0x0098   (0x0002)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x009A   (0x0002)  MISSED
	int32_t                                            FrontPlateCondition;                                        // 0x009C   (0x0004)  
	uint16_t                                           BackPlateTypeID;                                            // 0x00A0   (0x0002)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x00A2   (0x0002)  MISSED
	int32_t                                            BackPlateCondition;                                         // 0x00A4   (0x0004)  
	char                                               SlotNumber;                                                 // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLStuffItem
/// Size: 0x0068 (0x000030 - 0x000098)
struct FWTLStuffItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           StuffID;                                                    // 0x0038   (0x0002)  
	EWTLStuffType                                      Type;                                                       // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x003B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	FWTLDateTime                                       CreationDate;                                               // 0x0060   (0x0008)  
	FString                                            CreatorName;                                                // 0x0068   (0x0010)  
	int32_t                                            Weight;                                                     // 0x0078   (0x0004)  
	int32_t                                            TotalWeight;                                                // 0x007C   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0080   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x0084   (0x0004)  
	int32_t                                            Energy;                                                     // 0x0088   (0x0004)  
	EWTLItemType                                       StorageObjectType;                                          // 0x008C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x008D   (0x0001)  MISSED
	uint16_t                                           StorageObjectTypeID;                                        // 0x008E   (0x0002)  
	char                                               CustomizationScalar;                                        // 0x0090   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0091   (0x0001)  
	char                                               SlotNumber;                                                 // 0x0092   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x0093   (0x0005)  MISSED
};

/// Struct /Script/WTL.WTLMedicineItem
/// Size: 0x0078 (0x000030 - 0x0000A8)
struct FWTLMedicineItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           MedicineID;                                                 // 0x0038   (0x0002)  
	EWTLMedicineType                                   Type;                                                       // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x003B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	int32_t                                            Count;                                                      // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	FWTLDateTime                                       CreationDate;                                               // 0x0068   (0x0008)  
	FString                                            CreatorName;                                                // 0x0070   (0x0010)  
	int32_t                                            Weight;                                                     // 0x0080   (0x0004)  
	int32_t                                            TotalWeight;                                                // 0x0084   (0x0004)  
	FWTLDateTime                                       ValidityDate;                                               // 0x0088   (0x0008)  
	TArray<FWTLCharacterEffectInfluence>               Influences;                                                 // 0x0090   (0x0010)  
	char                                               SlotNumber;                                                 // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterEffectInfluence
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLCharacterEffectInfluence : FWTLPacket
{ 
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              InfluenceAtStart;                                           // 0x002C   (0x0004)  
	float                                              InfluencePerTick;                                           // 0x0030   (0x0004)  
	float                                              Duration;                                                   // 0x0034   (0x0004)  
};

/// Struct /Script/WTL.WTLAmmoItem
/// Size: 0x0068 (0x000030 - 0x000098)
struct FWTLAmmoItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           AmmoID;                                                     // 0x0038   (0x0002)  
	EWTLAmmoType                                       Type;                                                       // 0x003A   (0x0001)  
	EWTLCaliber                                        Caliber;                                                    // 0x003B   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	int32_t                                            Count;                                                      // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	FWTLDateTime                                       CreationDate;                                               // 0x0068   (0x0008)  
	FString                                            CreatorName;                                                // 0x0070   (0x0010)  
	uint16_t                                           DamageMin;                                                  // 0x0080   (0x0002)  
	uint16_t                                           DamageMax;                                                  // 0x0082   (0x0002)  
	uint16_t                                           ArmorPiercingMin;                                           // 0x0084   (0x0002)  
	uint16_t                                           ArmorPiercingMax;                                           // 0x0086   (0x0002)  
	uint16_t                                           Accuracy;                                                   // 0x0088   (0x0002)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x008A   (0x0002)  MISSED
	int32_t                                            Weight;                                                     // 0x008C   (0x0004)  
	int32_t                                            TotalWeight;                                                // 0x0090   (0x0004)  
	char                                               SlotNumber;                                                 // 0x0094   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0095   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLWeaponItem
/// Size: 0x00A8 (0x000030 - 0x0000D8)
struct FWTLWeaponItem : FWTLItemRecord
{ 
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
	uint16_t                                           WeaponID;                                                   // 0x0038   (0x0002)  
	EWTLWeaponType                                     Type;                                                       // 0x003A   (0x0001)  
	EWTLCaliber                                        Caliber;                                                    // 0x003B   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	FString                                            Description;                                                // 0x0050   (0x0010)  
	FWTLDateTime                                       CreationDate;                                               // 0x0060   (0x0008)  
	FString                                            CreatorName;                                                // 0x0068   (0x0010)  
	char                                               MagazineCapacity;                                           // 0x0078   (0x0001)  
	char                                               MagazineAmmoCount;                                          // 0x0079   (0x0001)  
	uint16_t                                           DamageMin;                                                  // 0x007A   (0x0002)  
	uint16_t                                           DamageMax;                                                  // 0x007C   (0x0002)  
	uint16_t                                           Accuracy;                                                   // 0x007E   (0x0002)  
	int32_t                                            TotalWeight;                                                // 0x0080   (0x0004)  
	uint16_t                                           EffectiveRange;                                             // 0x0084   (0x0002)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0086   (0x0002)  MISSED
	int32_t                                            Condition;                                                  // 0x0088   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x008C   (0x0004)  
	char                                               ModCount;                                                   // 0x0090   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0091   (0x0007)  MISSED
	uint64_t                                           CurrentAmmoItemID;                                          // 0x0098   (0x0008)  
	uint16_t                                           MuzzleAttachmentTypeID;                                     // 0x00A0   (0x0002)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x00A2   (0x0002)  MISSED
	int32_t                                            MuzzleAttachmentCondition;                                  // 0x00A4   (0x0004)  
	uint16_t                                           FlashlightAttachmentTypeID;                                 // 0x00A8   (0x0002)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x00AA   (0x0002)  MISSED
	int32_t                                            FlashlightAttachmentCondition;                              // 0x00AC   (0x0004)  
	uint16_t                                           ScopeAttachmentTypeID;                                      // 0x00B0   (0x0002)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x00B2   (0x0002)  MISSED
	int32_t                                            ScopeAttachmentCondition;                                   // 0x00B4   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x00B8   (0x0001)  
	char                                               CustomizationColor;                                         // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData06_5[0x6];                                       // 0x00BA   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x00C0   (0x0010)  
	char                                               SlotNumber;                                                 // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLOperationResult
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLOperationResult
{ 
	int32_t                                            OperationID;                                                // 0x0000   (0x0004)  
	bool                                               Success;                                                    // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	FString                                            ErrorInfo;                                                  // 0x0008   (0x0010)  
	bool                                               Processed;                                                  // 0x0018   (0x0001)  
	char                                               ReplicationState;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLKillStats
/// Size: 0x0240 (0x000000 - 0x000240)
struct FWTLKillStats
{ 
	FString                                            KillerName;                                                 // 0x0000   (0x0010)  
	FTakeHitInfo                                       HitInfo;                                                    // 0x0010   (0x0220)  
	FString                                            VictimName;                                                 // 0x0230   (0x0010)  
};

/// Struct /Script/WTL.TakeHitInfo
/// Size: 0x0220 (0x000000 - 0x000220)
struct FTakeHitInfo
{ 
	float                                              ActualDamage;                                               // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	UClass*                                            DamageTypeClass;                                            // 0x0008   (0x0008)  
	TWeakObjectPtr<AWTLCharacter*>                     PawnInstigator;                                             // 0x0010   (0x0008)  
	TWeakObjectPtr<AActor*>                            DamageCauser;                                               // 0x0018   (0x0008)  
	uint16_t                                           DamageEventClassID;                                         // 0x0020   (0x0002)  
	bool                                               bKilled;                                                    // 0x0022   (0x0001)  
	bool                                               bStealth;                                                   // 0x0023   (0x0001)  
	float                                              WorldTime;                                                  // 0x0024   (0x0004)  
	char                                               EnsureReplicationByte;                                      // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	FDamageEvent                                       GeneralDamageEvent;                                         // 0x0030   (0x0010)  
	FBulletDamageEvent                                 BulletDamageEvent;                                          // 0x0040   (0x00C8)  
	FShrapnelDamageEvent                               ShrapnelDamageEvent;                                        // 0x0108   (0x00C0)  
	FRadialDamageEvent                                 RadialDamageEvent;                                          // 0x01C8   (0x0040)  
	FFallDamageEvent                                   FallDamageEvent;                                            // 0x0208   (0x0018)  
};

/// Struct /Script/WTL.FallDamageEvent
/// Size: 0x0008 (0x000010 - 0x000018)
struct FFallDamageEvent : FDamageEvent
{ 
	float                                              GroundHitVelocity;                                          // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/WTL.ShrapnelDamageEvent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
struct FShrapnelDamageEvent : FPointDamageEvent
{ 
	uint16_t                                           WeaponTypeID;                                               // 0x00B0   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x00B2   (0x0002)  MISSED
	float                                              ImpulseMultiplier;                                          // 0x00B4   (0x0004)  
	bool                                               Critical;                                                   // 0x00B8   (0x0001)  
	EWTLColliderType                                   ColliderType;                                               // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x00BA   (0x0006)  MISSED
};

/// Struct /Script/WTL.BulletDamageEvent
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
struct FBulletDamageEvent : FPointDamageEvent
{ 
	EWTLWeaponType                                     WeaponType;                                                 // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              ArmorPiercingValue;                                         // 0x00B4   (0x0004)  
	float                                              Velocity;                                                   // 0x00B8   (0x0004)  
	float                                              ImpulseMultiplier;                                          // 0x00BC   (0x0004)  
	bool                                               Critical;                                                   // 0x00C0   (0x0001)  
	bool                                               Stealth;                                                    // 0x00C1   (0x0001)  
	EWTLColliderType                                   ColliderType;                                               // 0x00C2   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x00C3   (0x0005)  MISSED
};

/// Struct /Script/WTL.WTLAccountInventoryItem
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLAccountInventoryItem : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	uint64_t                                           StoreItemID;                                                // 0x0030   (0x0008)  
	int32_t                                            Count;                                                      // 0x0038   (0x0004)  
	int32_t                                            Condition;                                                  // 0x003C   (0x0004)  
	bool                                               New;                                                        // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	FString                                            ModificationData;                                           // 0x0048   (0x0010)  
};

/// Struct /Script/WTL.WTLStoreItem
/// Size: 0x00E0 (0x000028 - 0x000108)
struct FWTLStoreItem : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	int32_t                                            CreditsAmount;                                              // 0x0030   (0x0004)  
	int32_t                                            MoneyAmount;                                                // 0x0034   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0039   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x003A   (0x0002)  
	int32_t                                            Count;                                                      // 0x003C   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0040   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0044   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0045   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0046   (0x0002)  MISSED
	FString                                            CustomizationName;                                          // 0x0048   (0x0010)  
	FString                                            ModificationData;                                           // 0x0058   (0x0010)  
	FString                                            Name;                                                       // 0x0068   (0x0010)  
	FString                                            NameRU;                                                     // 0x0078   (0x0010)  
	FString                                            Description;                                                // 0x0088   (0x0010)  
	FString                                            DescriptionRU;                                              // 0x0098   (0x0010)  
	FColor                                             BackgroundColor;                                            // 0x00A8   (0x0004)  
	FColor                                             NameColor;                                                  // 0x00AC   (0x0004)  
	char                                               ItemQuality;                                                // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FString                                            IconURL;                                                    // 0x00B8   (0x0010)  
	FString                                            LargeIconURL;                                               // 0x00C8   (0x0010)  
	FString                                            Tags;                                                       // 0x00D8   (0x0010)  
	int32_t                                            Price;                                                      // 0x00E8   (0x0004)  
	float                                              DiscountPercent;                                            // 0x00EC   (0x0004)  
	char                                               PromotionType;                                              // 0x00F0   (0x0001)  
	bool                                               Hidden;                                                     // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData03_5[0x6];                                       // 0x00F2   (0x0006)  MISSED
	FString                                            BundleDefinition;                                           // 0x00F8   (0x0010)  
};

/// Struct /Script/WTL.WTLInAppPurchaseResult
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLInAppPurchaseResult : FWTLPacket
{ 
	bool                                               Success;                                                    // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	FString                                            Info;                                                       // 0x0030   (0x0010)  
	int32_t                                            CurrentBalance;                                             // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLArenaLeaderboardRecord
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLArenaLeaderboardRecord
{ 
	EWTLFaction                                        Faction;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0008   (0x0008)  
	EWTLCharacterClass                                 CharacterClass;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0011   (0x0007)  MISSED
	FString                                            CharacterName;                                              // 0x0018   (0x0010)  
	char                                               CharacterLevel;                                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            Score;                                                      // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLAirDropItemData
/// Size: 0x0050 (0x000008 - 0x000058)
struct FWTLAirDropItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	TWeakObjectPtr<UClass*>                            BlueprintClass;                                             // 0x0020   (0x0028)  
	TArray<FWTLItemSpawnInfo>                          SpawnItems;                                                 // 0x0048   (0x0010)  
};

/// Struct /Script/WTL.WTLItemSpawnInfo
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLItemSpawnInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0010   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0014   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0018   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x001C   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0020   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0022   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0028   (0x0010)  
	FString                                            ModificationData;                                           // 0x0038   (0x0010)  
	float                                              Chance;                                                     // 0x0048   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<FWTLQuestItemDropChance>                    QuestChances;                                               // 0x0050   (0x0010)  
	bool                                               SpawnOnlyIfDoesNotHaveItem;                                 // 0x0060   (0x0001)  
	bool                                               AddToBlackListAfterSpawn;                                   // 0x0061   (0x0001)  
	bool                                               IgnoreNoPrice;                                              // 0x0062   (0x0001)  
	bool                                               IsSpecialItem;                                              // 0x0063   (0x0001)  
	float                                              MinSpawnDelay;                                              // 0x0064   (0x0004)  
	float                                              MaxSpawnDelay;                                              // 0x0068   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x006C   (0x0004)  MISSED
	FDateTime                                          NextSpawnTime;                                              // 0x0070   (0x0008)  
};

/// Struct /Script/WTL.WTLQuestItemDropChance
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLQuestItemDropChance
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	float                                              Chance;                                                     // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLServerEventInfoCommentRowData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLServerEventInfoCommentRowData : FTableRowBase
{ 
	FText                                              Text;                                                       // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLNoteData
/// Size: 0x0048 (0x000008 - 0x000050)
struct FWTLNoteData : FTableRowBase
{ 
	TWeakObjectPtr<UTexture2D*>                        Image;                                                      // 0x0008   (0x0028)  
	FText                                              Text;                                                       // 0x0030   (0x0018)  
	bool                                               bIsCenterText;                                              // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLGiftCardItemData
/// Size: 0x00E0 (0x000008 - 0x0000E8)
struct FWTLGiftCardItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	EWTLItemType                                       ItemType;                                                   // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0024   (0x0004)  
	float                                              ChanceMultiplier;                                           // 0x0028   (0x0004)  
	float                                              CountMultiplier;                                            // 0x002C   (0x0004)  
	FDateTime                                          StartTime;                                                  // 0x0030   (0x0008)  
	FDateTime                                          EndTime;                                                    // 0x0038   (0x0008)  
	float                                              MinBlackListTimeout;                                        // 0x0040   (0x0004)  
	float                                              MaxBlackListTimeout;                                        // 0x0044   (0x0004)  
	TMap<int32_t, float>                               LocationDropChances;                                        // 0x0048   (0x0050)  
	TMap<int32_t, float>                               MonsterDropChances;                                         // 0x0098   (0x0050)  
};

/// Struct /Script/WTL.WTLSlotMachineSymbolsTextures
/// Size: 0x0010 (0x000008 - 0x000018)
struct FWTLSlotMachineSymbolsTextures : FTableRowBase
{ 
	TArray<FWTLSlotMachineSymbolTexture>               SymbolsTextures;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLSlotMachineSymbolTexture
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLSlotMachineSymbolTexture
{ 
	EWTLSlotMachineSymbol                              Symbol;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FWTLCharacterClassTexture>                  Textures;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterClassTexture
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCharacterClassTexture
{ 
	EWTLCharacterClass                                 Class;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLSlotMachineWinCombinations
/// Size: 0x0010 (0x000008 - 0x000018)
struct FWTLSlotMachineWinCombinations : FTableRowBase
{ 
	TArray<FWTLSlotMachineSymbolWinCombination>        Combination;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLSlotMachineSymbolWinCombination
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLSlotMachineSymbolWinCombination
{ 
	EWTLSlotMachineSymbolCheckType                     CheckType;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<EWTLSlotMachineSymbol>                      Symbols;                                                    // 0x0008   (0x0010)  
	char                                               SymbolsCount;                                               // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              BetMultiplier;                                              // 0x001C   (0x0004)  
	TArray<FWTLSlotMachineItemReward>                  ItemRewards;                                                // 0x0020   (0x0010)  
	TWeakObjectPtr<UFMODEvent*>                        WinSoundEvent;                                              // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLSlotMachineItemReward
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLSlotMachineItemReward
{ 
	EWTLCharacterClass                                 CharacterClass;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Chance;                                                     // 0x0004   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x000C   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0010   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x0014   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0018   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x001C   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0020   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x0024   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0028   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0029   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0030   (0x0010)  
	FString                                            ModificationData;                                           // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLSlotMachineCylinder
/// Size: 0x0010 (0x000008 - 0x000018)
struct FWTLSlotMachineCylinder : FTableRowBase
{ 
	TArray<FWTLSlotMachineSymbolRandRange>             SymbolRandRange;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLSlotMachineSymbolRandRange
/// Size: 0x0003 (0x000000 - 0x000003)
struct FWTLSlotMachineSymbolRandRange
{ 
	EWTLSlotMachineSymbol                              Symbol;                                                     // 0x0000   (0x0001)  
	char                                               MaxValue;                                                   // 0x0001   (0x0001)  
	char                                               Cost;                                                       // 0x0002   (0x0001)  
};

/// Struct /Script/WTL.WTLFishingBaitData
/// Size: 0x0008 (0x000008 - 0x000010)
struct FWTLFishingBaitData : FTableRowBase
{ 
	FWTLItem                                           Item;                                                       // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLItem
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLItem
{ 
	EWTLItemType                                       Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            TypeID;                                                     // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLFishingItemData
/// Size: 0x0048 (0x000008 - 0x000050)
struct FWTLFishingItemData : FTableRowBase
{ 
	int32_t                                            MinCharacterLevel;                                          // 0x0008   (0x0004)  
	float                                              MinBiteTime;                                                // 0x000C   (0x0004)  
	float                                              MaxBiteTime;                                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            DefaultFishActor;                                           // 0x0018   (0x0028)  
	TArray<FWTLFishingTakeItem>                        ItemsLootTable;                                             // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLFishingTakeItem
/// Size: 0x0088 (0x000000 - 0x000088)
struct FWTLFishingTakeItem
{ 
	float                                              DropChance;                                                 // 0x0000   (0x0004)  
	float                                              DifficultyMultiplier;                                       // 0x0004   (0x0004)  
	TWeakObjectPtr<UClass*>                            FishActor;                                                  // 0x0008   (0x0028)  
	int32_t                                            FishingItemConditionDeltaSuccess;                           // 0x0030   (0x0004)  
	int32_t                                            FishingItemConditionDeltaNotSuccess;                        // 0x0034   (0x0004)  
	int32_t                                            ExperienceReward;                                           // 0x0038   (0x0004)  
	int32_t                                            MoneyReward;                                                // 0x003C   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0044   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0048   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x004C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0050   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0054   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0058   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x005C   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0060   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0062   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0068   (0x0010)  
	FString                                            ModificationData;                                           // 0x0078   (0x0010)  
};

/// Struct /Script/WTL.WTLClanLevelItemData
/// Size: 0x0010 (0x000008 - 0x000018)
struct FWTLClanLevelItemData : FTableRowBase
{ 
	int32_t                                            PVPScore;                                                   // 0x0008   (0x0004)  
	int32_t                                            PVEScore;                                                   // 0x000C   (0x0004)  
	int32_t                                            CraftScore;                                                 // 0x0010   (0x0004)  
	int32_t                                            MemberCount;                                                // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLLootBoxItemData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLLootBoxItemData : FTableRowBase
{ 
	EWTLLootBoxType                                    BoxType;                                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            MoneyReward;                                                // 0x000C   (0x0004)  
	TArray<FWTLArenaItemReward>                        ItemRewards;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLArenaItemReward
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLArenaItemReward
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0010   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0014   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0018   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x001C   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0020   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0022   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0028   (0x0010)  
	FString                                            ModificationData;                                           // 0x0038   (0x0010)  
	float                                              Chance;                                                     // 0x0048   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLLocationSpawnItemData
/// Size: 0x0088 (0x000008 - 0x000090)
struct FWTLLocationSpawnItemData : FTableRowBase
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x000C   (0x0004)  
	int32_t                                            Quality;                                                    // 0x0010   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0014   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x0018   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x001C   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0020   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0024   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x0028   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x002C   (0x0001)  
	char                                               CustomizationColor;                                         // 0x002D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002E   (0x0002)  MISSED
	FString                                            CustomizationName;                                          // 0x0030   (0x0010)  
	FString                                            ModificationData;                                           // 0x0040   (0x0010)  
	float                                              Chance;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0054   (0x0004)  MISSED
	FDateTime                                          LastSpawnTime;                                              // 0x0058   (0x0008)  
	float                                              TimeBetweenSpawn;                                           // 0x0060   (0x0004)  
	float                                              MinBlackListTimeout;                                        // 0x0064   (0x0004)  
	float                                              MaxBlackListTimeout;                                        // 0x0068   (0x0004)  
	bool                                               SpawnOnlyInTimePeriod;                                      // 0x006C   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x006D   (0x0003)  MISSED
	FDateTime                                          SpawnPeriodStartTime;                                       // 0x0070   (0x0008)  
	FDateTime                                          SpawnPeriodEndTime;                                         // 0x0078   (0x0008)  
	TArray<FWTLSpawnItemLocationInfo>                  LocationList;                                               // 0x0080   (0x0010)  
};

/// Struct /Script/WTL.WTLSpawnItemLocationInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLSpawnItemLocationInfo
{ 
	int32_t                                            LocationID;                                                 // 0x0000   (0x0004)  
	float                                              ChanceMultiplier;                                           // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLEmotionTypeItemData
/// Size: 0x0068 (0x000008 - 0x000070)
struct FWTLEmotionTypeItemData : FTableRowBase
{ 
	FWTLRadialMenuEmotionInfo                          RadialMenuEmotionInfo;                                      // 0x0008   (0x0058)  
	TArray<FWTLEmotion>                                Emotions;                                                   // 0x0060   (0x0010)  
};

/// Struct /Script/WTL.WTLEmotion
/// Size: 0x0070 (0x000000 - 0x000070)
struct FWTLEmotion
{ 
	FWTLRadialMenuEmotionInfo                          RadialMenuEmotionInfo;                                      // 0x0000   (0x0058)  
	bool                                               BlockCameraRotation;                                        // 0x0058   (0x0001)  
	bool                                               HideUsableItem;                                             // 0x0059   (0x0001)  
	bool                                               IsBlocking;                                                 // 0x005A   (0x0001)  
	bool                                               CanBeInterrupted;                                           // 0x005B   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	UAnimMontage*                                      MaleMontage;                                                // 0x0060   (0x0008)  
	UAnimMontage*                                      FemaleMontage;                                              // 0x0068   (0x0008)  
};

/// Struct /Script/WTL.WTLRadialMenuActionInfo
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLRadialMenuActionInfo
{ 
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0000   (0x0028)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	FString                                            DebugPreviewText;                                           // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLRadialMenuEmotionInfo
/// Size: 0x0008 (0x000050 - 0x000058)
struct FWTLRadialMenuEmotionInfo : FWTLRadialMenuActionInfo
{ 
	bool                                               NeedPremium;                                                // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLTutorialMessageItemData
/// Size: 0x0050 (0x000008 - 0x000058)
struct FWTLTutorialMessageItemData : FTableRowBase
{ 
	EWTLTutorialMessageType                            Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Image;                                                      // 0x0010   (0x0028)  
	FText                                              Text;                                                       // 0x0038   (0x0018)  
	char                                               WarningShowCountLimit;                                      // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterRankItemData
/// Size: 0x0078 (0x000008 - 0x000080)
struct FWTLCharacterRankItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	uint64_t                                           Score;                                                      // 0x0020   (0x0008)  
	uint64_t                                           ScoreToNextRank;                                            // 0x0028   (0x0008)  
	TWeakObjectPtr<UTexture2D*>                        SmallIcon;                                                  // 0x0030   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeIcon;                                                  // 0x0058   (0x0028)  
};

/// Struct /Script/WTL.WTLEnemyNPCItemData
/// Size: 0x0108 (0x000008 - 0x000110)
struct FWTLEnemyNPCItemData : FTableRowBase
{ 
	int32_t                                            GroupId;                                                    // 0x0008   (0x0004)  
	bool                                               bUseCustomizationVariations;                                // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<TWeakObjectPtr>                             HeadVariations;                                             // 0x0010   (0x0010)  
	TArray<TWeakObjectPtr>                             TorsoVariations;                                            // 0x0020   (0x0010)  
	TArray<TWeakObjectPtr>                             LegsVariations;                                             // 0x0030   (0x0010)  
	TArray<TWeakObjectPtr>                             FeetVariations;                                             // 0x0040   (0x0010)  
	bool                                               bUseEquipmentVariations;                                    // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	TArray<int32_t>                                    HeadClothesItemTypeIDVariations;                            // 0x0058   (0x0010)  
	TArray<int32_t>                                    TorsoClothesItemTypeIDVariations;                           // 0x0068   (0x0010)  
	TArray<int32_t>                                    LegsClothesItemTypeIDVariations;                            // 0x0078   (0x0010)  
	TArray<int32_t>                                    FeetClothesItemTypeIDVariations;                            // 0x0088   (0x0010)  
	TArray<FWTLEnemyNPCWeaponItemVariation>            WeaponItemTypeIDVariationsWithAmmo;                         // 0x0098   (0x0010)  
	TArray<int32_t>                                    FrontPlateTypeIDVariations;                                 // 0x00A8   (0x0010)  
	TArray<int32_t>                                    BackPlateTypeIDVariations;                                  // 0x00B8   (0x0010)  
	int32_t                                            MinLevel;                                                   // 0x00C8   (0x0004)  
	int32_t                                            MaxLevel;                                                   // 0x00CC   (0x0004)  
	int32_t                                            Strength;                                                   // 0x00D0   (0x0004)  
	int32_t                                            Dexterity;                                                  // 0x00D4   (0x0004)  
	int32_t                                            Stamina;                                                    // 0x00D8   (0x0004)  
	int32_t                                            Accuracy;                                                   // 0x00DC   (0x0004)  
	int32_t                                            Intelligence;                                               // 0x00E0   (0x0004)  
	int32_t                                            Fortune;                                                    // 0x00E4   (0x0004)  
	float                                              ExperienceToHPRate;                                         // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x00EC   (0x0004)  MISSED
	FTimespan                                          MaxExperienceGainTimeout;                                   // 0x00F0   (0x0008)  
	bool                                               CanDropWeapon;                                              // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x00F9   (0x0007)  MISSED
	TArray<FWTLItemDropInfo>                           ItemsToDrop;                                                // 0x0100   (0x0010)  
};

/// Struct /Script/WTL.WTLItemDropInfo
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLItemDropInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0010   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0014   (0x0004)  
	float                                              NormalChance;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FWTLQuestItemDropChance>                    QuestDropChances;                                           // 0x0020   (0x0010)  
	char                                               MinLevel;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              MinCountDeltaPerLevel;                                      // 0x0034   (0x0004)  
	float                                              MaxCountDeltaPerLevel;                                      // 0x0038   (0x0004)  
	float                                              MinConditionDeltaPerLevel;                                  // 0x003C   (0x0004)  
	float                                              MaxConditionDeltaPerLevel;                                  // 0x0040   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0044   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x0048   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x004C   (0x0001)  
	char                                               CustomizationColor;                                         // 0x004D   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x004E   (0x0002)  MISSED
	FString                                            CustomizationName;                                          // 0x0050   (0x0010)  
	FString                                            ModificationData;                                           // 0x0060   (0x0010)  
	float                                              NormalChanceDeltaPerLevel;                                  // 0x0070   (0x0004)  
	bool                                               DropOnlyIfDoesNotHaveItem;                                  // 0x0074   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLEnemyNPCWeaponItemVariation
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLEnemyNPCWeaponItemVariation
{ 
	uint16_t                                           WeaponItemTypeID;                                           // 0x0000   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<uint16_t>                                   AmmoitemTypeIDVariations;                                   // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLEnemyGroupItemData
/// Size: 0x0040 (0x000008 - 0x000048)
struct FWTLEnemyGroupItemData : FTableRowBase
{ 
	FText                                              GroupName;                                                  // 0x0008   (0x0018)  
	EWTLAITeam                                         Team;                                                       // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0021   (0x0007)  MISSED
	TArray<FText>                                      FirstNameVariations;                                        // 0x0028   (0x0010)  
	TArray<FText>                                      LastNameVariations;                                         // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLCustomWeaponItemData
/// Size: 0x0050 (0x000008 - 0x000058)
struct FWTLCustomWeaponItemData : FTableRowBase
{ 
	int32_t                                            WeaponID;                                                   // 0x0008   (0x0004)  
	char                                               MagazineCapacity;                                           // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            DamageMin;                                                  // 0x0010   (0x0004)  
	int32_t                                            DamageMax;                                                  // 0x0014   (0x0004)  
	int32_t                                            ArmorPiercingMin;                                           // 0x0018   (0x0004)  
	int32_t                                            ArmorPiercingMax;                                           // 0x001C   (0x0004)  
	float                                              CriticalHitChanceMultiplier;                                // 0x0020   (0x0004)  
	int32_t                                            Accuracy;                                                   // 0x0024   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0028   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x002C   (0x0004)  
	int32_t                                            Weight;                                                     // 0x0030   (0x0004)  
	int32_t                                            ModCount;                                                   // 0x0034   (0x0004)  
	FText                                              CustomizationName;                                          // 0x0038   (0x0018)  
	char                                               CustomizationScalar;                                        // 0x0050   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0052   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLCustomizationColorPresetItemData
/// Size: 0x0028 (0x000008 - 0x000030)
struct FWTLCustomizationColorPresetItemData : FTableRowBase
{ 
	EWTLCustomizationColorPresetType                   Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	FLinearColor                                       Color;                                                      // 0x000C   (0x0010)  
	FLinearColor                                       PreviewColor;                                               // 0x001C   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLClanStorageTabImageItemData
/// Size: 0x0088 (0x000008 - 0x000090)
struct FWTLClanStorageTabImageItemData : FTableRowBase
{ 
	FSlateBrush                                        ImageBrush;                                                 // 0x0008   (0x0088)  
};

/// Struct /Script/WTL.WTLRobotCraftItemData
/// Size: 0x0080 (0x000008 - 0x000088)
struct FWTLRobotCraftItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	FText                                              Description;                                                // 0x0020   (0x0018)  
	TWeakObjectPtr<UTexture2D*>                        CraftIcon;                                                  // 0x0038   (0x0028)  
	TArray<FWTLCraftIngredient>                        Ingredients;                                                // 0x0060   (0x0010)  
	FWTLRobotProductionResult                          Result;                                                     // 0x0070   (0x0010)  
	float                                              ProductionTime;                                             // 0x0080   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLRobotProductionResult
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLRobotProductionResult
{ 
	int32_t                                            MonsterID;                                                  // 0x0000   (0x0004)  
	char                                               MinLevel;                                                   // 0x0004   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0005   (0x0001)  
	char                                               Rank;                                                       // 0x0006   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0007   (0x0001)  MISSED
	float                                              MinLifeSpan;                                                // 0x0008   (0x0004)  
	float                                              MaxLifeSpan;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLCraftIngredient
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLCraftIngredient
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	bool                                               ConsumeOnCraft;                                             // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            ConditionDeltaOnCraft;                                      // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLCraftItemData
/// Size: 0x00A8 (0x000008 - 0x0000B0)
struct FWTLCraftItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	FText                                              Description;                                                // 0x0020   (0x0018)  
	TWeakObjectPtr<UTexture2D*>                        CraftIcon;                                                  // 0x0038   (0x0028)  
	EWTLCraftType                                      Type;                                                       // 0x0060   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            PDAModuleID;                                                // 0x0064   (0x0004)  
	int32_t                                            QuestID;                                                    // 0x0068   (0x0004)  
	int32_t                                            CompleteQuestID;                                            // 0x006C   (0x0004)  
	int32_t                                            AchievementID;                                              // 0x0070   (0x0004)  
	int32_t                                            NeedCraftExperience;                                        // 0x0074   (0x0004)  
	int32_t                                            NeedSurvivalExperience;                                     // 0x0078   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FWTLCraftIngredient>                        Ingredients;                                                // 0x0080   (0x0010)  
	TArray<FWTLCraftResult>                            Results;                                                    // 0x0090   (0x0010)  
	float                                              CraftTime;                                                  // 0x00A0   (0x0004)  
	int32_t                                            CraftExperience;                                            // 0x00A4   (0x0004)  
	int32_t                                            SurvivalExperience;                                         // 0x00A8   (0x0004)  
	int32_t                                            Experience;                                                 // 0x00AC   (0x0004)  
};

/// Struct /Script/WTL.WTLCraftResult
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLCraftResult
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	char                                               CustomizationColor;                                         // 0x000C   (0x0001)  
	char                                               CustomizationScalar;                                        // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x000E   (0x0002)  MISSED
	FString                                            CustomizationName;                                          // 0x0010   (0x0010)  
	FWTLCraftPossibleModification                      PossibleModification;                                       // 0x0020   (0x0030)  
};

/// Struct /Script/WTL.WTLCraftPossibleModification
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCraftPossibleModification
{ 
	int32_t                                            MinDamageMinChange;                                         // 0x0000   (0x0004)  
	int32_t                                            MaxDamageMinChange;                                         // 0x0004   (0x0004)  
	int32_t                                            MinDamageMaxChange;                                         // 0x0008   (0x0004)  
	int32_t                                            MaxDamageMaxChange;                                         // 0x000C   (0x0004)  
	int32_t                                            MinConditionDeltaChange;                                    // 0x0010   (0x0004)  
	int32_t                                            MaxConditionDeltaChange;                                    // 0x0014   (0x0004)  
	int32_t                                            MinAccuracyChange;                                          // 0x0018   (0x0004)  
	int32_t                                            MaxAccuracyChange;                                          // 0x001C   (0x0004)  
	int32_t                                            MinArmorMinChange;                                          // 0x0020   (0x0004)  
	int32_t                                            MaxArmorMinChange;                                          // 0x0024   (0x0004)  
	int32_t                                            MinArmorMaxChange;                                          // 0x0028   (0x0004)  
	int32_t                                            MaxArmorMaxChange;                                          // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLInformationDialogItemData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLInformationDialogItemData : FTableRowBase
{ 
	FText                                              Text;                                                       // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLCustomizationScalarOptionItemData
/// Size: 0x0068 (0x000008 - 0x000070)
struct FWTLCustomizationScalarOptionItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	float                                              Price;                                                      // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	TWeakObjectPtr<UTexture*>                          Texture;                                                    // 0x0028   (0x0028)  
	float                                              Roughness;                                                  // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0054   (0x0004)  MISSED
	TArray<FLinearColor>                               DistinctColors;                                             // 0x0058   (0x0010)  
	float                                              ColorAmplifierValue;                                        // 0x0068   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCustomizationColorItemData
/// Size: 0x0010 (0x000008 - 0x000018)
struct FWTLCustomizationColorItemData : FTableRowBase
{ 
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLChatSmileItemData
/// Size: 0x0048 (0x000008 - 0x000050)
struct FWTLChatSmileItemData : FTableRowBase
{ 
	FString                                            ImageStyleName;                                             // 0x0008   (0x0010)  
	TArray<FString>                                    TextAliases;                                                // 0x0018   (0x0010)  
	TWeakObjectPtr<UTexture2D*>                        SmileImage;                                                 // 0x0028   (0x0028)  
};

/// Struct /Script/WTL.WTLSkyLevelPresetItemData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLSkyLevelPresetItemData : FTableRowBase
{ 
	FText                                              CloudyDay;                                                  // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLItemTypeBrushItemData
/// Size: 0x0088 (0x000008 - 0x000090)
struct FWTLItemTypeBrushItemData : FTableRowBase
{ 
	FSlateBrush                                        IconBrush;                                                  // 0x0008   (0x0088)  
};

/// Struct /Script/WTL.WTLPortalItemData
/// Size: 0x0050 (0x000008 - 0x000058)
struct FWTLPortalItemData : FTableRowBase
{ 
	TMap<int32_t, FText>                               LocationDisplayText;                                        // 0x0008   (0x0050)  
};

/// Struct /Script/WTL.WTLSafeZoneItemData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLSafeZoneItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLMapMarkerSubTypeBrushItemData
/// Size: 0x0088 (0x000008 - 0x000090)
struct FWTLMapMarkerSubTypeBrushItemData : FTableRowBase
{ 
	FSlateBrush                                        MarkerSubTypeBrush;                                         // 0x0008   (0x0088)  
};

/// Struct /Script/WTL.WTLMapMarkerBrushItemData
/// Size: 0x0110 (0x000008 - 0x000118)
struct FWTLMapMarkerBrushItemData : FTableRowBase
{ 
	FSlateBrush                                        MarkerBrush;                                                // 0x0008   (0x0088)  
	FSlateBrush                                        MarkerBrushForLegend;                                       // 0x0090   (0x0088)  
};

/// Struct /Script/WTL.WTLClanSkillItemData
/// Size: 0x00A8 (0x000008 - 0x0000B0)
struct FWTLClanSkillItemData : FTableRowBase
{ 
	char                                               MinClanLevel;                                               // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	EWTLSkillType                                      Type;                                                       // 0x0040   (0x0001)  
	char                                               SkillLevel;                                                 // 0x0041   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0042   (0x0006)  MISSED
	FText                                              EffectDescription;                                          // 0x0048   (0x0018)  
	int32_t                                            TechnologyScore;                                            // 0x0060   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	TArray<FWTLSkillDependency>                        Dependencies;                                               // 0x0068   (0x0010)  
	TArray<FWTLClanParameterInfluence>                 Influences;                                                 // 0x0078   (0x0010)  
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0088   (0x0028)  
};

/// Struct /Script/WTL.WTLClanParameterInfluence
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLClanParameterInfluence
{ 
	EWTLClanParameter                                  Parameter;                                                  // 0x0000   (0x0001)  
	EWTLParameterInfluenceType                         InfluenceType;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              Influence;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLSkillDependency
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLSkillDependency : FWTLPacket
{ 
	EWTLSkillDependencyType                            Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0029   (0x0001)  MISSED
	uint16_t                                           SkillID;                                                    // 0x002A   (0x0002)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCharacterSkillItemData
/// Size: 0x0090 (0x000008 - 0x000098)
struct FWTLCharacterSkillItemData : FTableRowBase
{ 
	char                                               MinCharacterLevel;                                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	EWTLSkillType                                      Type;                                                       // 0x0040   (0x0001)  
	EWTLCharacterClass                                 Class;                                                      // 0x0041   (0x0001)  
	bool                                               ClassDefault;                                               // 0x0042   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0043   (0x0001)  MISSED
	int32_t                                            SkillPoints;                                                // 0x0044   (0x0004)  
	TArray<FWTLSkillDependency>                        Dependencies;                                               // 0x0048   (0x0010)  
	TArray<FWTLCharacterParameterInfluence>            Influences;                                                 // 0x0058   (0x0010)  
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0068   (0x0028)  
	int32_t                                            ForgetPrice;                                                // 0x0090   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCharacterParameterInfluence
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLCharacterParameterInfluence
{ 
	EWTLCharacterParameter                             Parameter;                                                  // 0x0000   (0x0001)  
	EWTLParameterInfluenceType                         InfluenceType;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              Influence;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLKitItemData
/// Size: 0x0020 (0x000008 - 0x000028)
struct FWTLKitItemData : FTableRowBase
{ 
	FString                                            Name;                                                       // 0x0008   (0x0010)  
	TArray<FWTLKitItem>                                Items;                                                      // 0x0018   (0x0010)  
};

/// Struct /Script/WTL.WTLKitItem
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLKitItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	int32_t                                            Count;                                                      // 0x0004   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLCharacterStateIndicatorTableRow
/// Size: 0x0048 (0x000008 - 0x000050)
struct FWTLCharacterStateIndicatorTableRow : FTableRowBase
{ 
	EWTLCharacterStateIndicatorNatureType              NatureType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	TWeakObjectPtr<UTexture2D*>                        IconTexturePtr;                                             // 0x0028   (0x0028)  
};

/// Struct /Script/WTL.WTLCharacterEffectsItemData
/// Size: 0x00B0 (0x000008 - 0x0000B8)
struct FWTLCharacterEffectsItemData : FTableRowBase
{ 
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0008   (0x0001)  
	EWTLCharacterEffectNatureType                      NatureType;                                                 // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              EffectCooldownPerSecond;                                    // 0x000C   (0x0004)  
	float                                              MaxVolumesEffectValue;                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	FText                                              Name;                                                       // 0x0018   (0x0018)  
	FLinearColor                                       BorderColor;                                                // 0x0030   (0x0010)  
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0040   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        AddingSound;                                                // 0x0068   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        RemovingSound;                                              // 0x0090   (0x0028)  
};

/// Struct /Script/WTL.WTLQuestItemData
/// Size: 0x01F0 (0x000008 - 0x0001F8)
struct FWTLQuestItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	EWTLQuestType                                      Type;                                                       // 0x0020   (0x0001)  
	bool                                               IsHidden;                                                   // 0x0021   (0x0001)  
	bool                                               CanBeCanceled;                                              // 0x0022   (0x0001)  
	bool                                               CanBePerformedInGroup;                                      // 0x0023   (0x0001)  
	bool                                               CanGiveGiftCards;                                           // 0x0024   (0x0001)  
	char                                               MinCharacterLevel;                                          // 0x0025   (0x0001)  
	char                                               MaxCharacterLevel;                                          // 0x0026   (0x0001)  
	char                                               RecommendedCharacterLevel;                                  // 0x0027   (0x0001)  
	char                                               MinCharacterReputation;                                     // 0x0028   (0x0001)  
	char                                               MaxCharacterReputation;                                     // 0x0029   (0x0001)  
	EWTLCharacterClass                                 CharacterClass;                                             // 0x002A   (0x0001)  
	bool                                               CheckCharacterFaction;                                      // 0x002B   (0x0001)  
	EWTLFaction                                        CharacterFaction;                                           // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	int32_t                                            FactionTechnologiesLevel;                                   // 0x0030   (0x0004)  
	char                                               MinClanLevel;                                               // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	FTimespan                                          CompleteTimeLimit;                                          // 0x0038   (0x0008)  
	FTimespan                                          TakeTimeLimit;                                              // 0x0040   (0x0008)  
	bool                                               AutoCompleteQuest;                                          // 0x0048   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        QuestIcon;                                                  // 0x0050   (0x0028)  
	FText                                              Description;                                                // 0x0078   (0x0018)  
	bool                                               bIsShowItemStartQuestInActiveQuestInfo;                     // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0091   (0x0007)  MISSED
	FText                                              CustomTextRequirement;                                      // 0x0098   (0x0018)  
	bool                                               bIsShowCustomTextRequirementOnlyInActiveQuestInfo;          // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            MoneyRequirement;                                           // 0x00B4   (0x0004)  
	bool                                               DisplayItemRequirementsInHUD;                               // 0x00B8   (0x0001)  
	bool                                               DisplayItemRequirementsInPDA;                               // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData05_5[0x6];                                       // 0x00BA   (0x0006)  MISSED
	TArray<FWTLQuestItemRequirement>                   ItemRequirements;                                           // 0x00C0   (0x0010)  
	TArray<FWTLQuestRequirement>                       QuestRequirements;                                          // 0x00D0   (0x0010)  
	TArray<FWTLMonsterKillRequirement>                 MonsterKillRequirements;                                    // 0x00E0   (0x0010)  
	TArray<FWTLEnemyNPCKillRequirement>                EnemyNPCKillRequirements;                                   // 0x00F0   (0x0010)  
	TArray<FWTLCustomQuestRequirement>                 CustomRequirements;                                         // 0x0100   (0x0010)  
	bool                                               bIsShowCustomRequirements;                                  // 0x0110   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	int32_t                                            ExperienceReward;                                           // 0x0114   (0x0004)  
	bool                                               bIsShowMoneyRewardAfterQuestComplete;                       // 0x0118   (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0119   (0x0003)  MISSED
	int32_t                                            MoneyReward;                                                // 0x011C   (0x0004)  
	bool                                               bIsShowItemRewardsAfterQuestComplete;                       // 0x0120   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0121   (0x0007)  MISSED
	TArray<FWTLQuestItemReward>                        ItemRewards;                                                // 0x0128   (0x0010)  
	bool                                               UseRandomItemReward;                                        // 0x0138   (0x0001)  
	bool                                               bSendItemRewardsByMail;                                     // 0x0139   (0x0001)  
	unsigned char                                      UnknownData09_5[0x6];                                       // 0x013A   (0x0006)  MISSED
	FTimespan                                          SendItemRewardsByMailInterval;                              // 0x0140   (0x0008)  
	TArray<FWTLQuestItemReward>                        ItemRewardsAtStart;                                         // 0x0148   (0x0010)  
	int32_t                                            ReputationReward;                                           // 0x0158   (0x0004)  
	int32_t                                            CompleteAchievementReward;                                  // 0x015C   (0x0004)  
	int32_t                                            FailAchievementReward;                                      // 0x0160   (0x0004)  
	int32_t                                            ClanPVPScoreReward;                                         // 0x0164   (0x0004)  
	int32_t                                            ClanPVEScoreReward;                                         // 0x0168   (0x0004)  
	int32_t                                            ClanCraftScoreReward;                                       // 0x016C   (0x0004)  
	int32_t                                            ClanTechnologyScoreReward;                                  // 0x0170   (0x0004)  
	int32_t                                            CreditsReward;                                              // 0x0174   (0x0004)  
	FText                                              CustomTextReward;                                           // 0x0178   (0x0018)  
	bool                                               bIsHideCustomTextRewardAfterQuestComplete;                  // 0x0190   (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x0191   (0x0007)  MISSED
	TArray<FWTLIdentityItemType>                       WithdrawItemsAfterQuestCompleted;                           // 0x0198   (0x0010)  
	TArray<FWTLMapQuestPoint>                          MapQuestPoints;                                             // 0x01A8   (0x0010)  
	TArray<FWTLMapQuestPoint>                          MapQuestCompletePoints;                                     // 0x01B8   (0x0010)  
	TArray<int32_t>                                    MonsterList;                                                // 0x01C8   (0x0010)  
	TArray<FWTLQuestStateAction>                       QuestStateActionsOnComplete;                                // 0x01D8   (0x0010)  
	TArray<int32_t>                                    DeleteQuestOnCancel;                                        // 0x01E8   (0x0010)  
};

/// Struct /Script/WTL.WTLQuestStateAction
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLQuestStateAction
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	EWTLQuestState                                     State;                                                      // 0x0004   (0x0001)  
	bool                                               SetActive;                                                  // 0x0005   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0006   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLMapQuestPoint
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLMapQuestPoint
{ 
	int32_t                                            LocationID;                                                 // 0x0000   (0x0004)  
	FVector                                            PointLocation;                                              // 0x0004   (0x000C)  
};

/// Struct /Script/WTL.WTLIdentityItemType
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentityItemType : FWTLPacket
{ 
	EWTLItemType                                       Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0029   (0x0001)  MISSED
	uint16_t                                           TypeID;                                                     // 0x002A   (0x0002)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLQuestItemReward
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLQuestItemReward
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	int32_t                                            Condition;                                                  // 0x000C   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0010   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0011   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0012   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0018   (0x0010)  
	FString                                            ModificationData;                                           // 0x0028   (0x0010)  
	bool                                               LockedInInventory;                                          // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCustomQuestRequirement
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLCustomQuestRequirement
{ 
	FText                                              Name;                                                       // 0x0000   (0x0018)  
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0018   (0x0028)  
	bool                                               UseBitMaskForProgress;                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            CountBits;                                                  // 0x0044   (0x0004)  
	int32_t                                            Count;                                                      // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLEnemyNPCKillRequirement
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLEnemyNPCKillRequirement
{ 
	int32_t                                            EnemyNPCID;                                                 // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FText                                              EnemyNPCName;                                               // 0x0008   (0x0018)  
	char                                               MinLevel;                                                   // 0x0020   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0022   (0x0002)  MISSED
	int32_t                                            Count;                                                      // 0x0024   (0x0004)  
};

/// Struct /Script/WTL.WTLMonsterKillRequirement
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLMonsterKillRequirement
{ 
	int32_t                                            MonsterID;                                                  // 0x0000   (0x0004)  
	char                                               MinLevel;                                                   // 0x0004   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0005   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0006   (0x0002)  MISSED
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLQuestRequirement
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLQuestRequirement
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	EWTLQuestState                                     State;                                                      // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLQuestItemRequirement
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLQuestItemRequirement
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	FString                                            CustomizationName;                                          // 0x0008   (0x0010)  
	int32_t                                            Count;                                                      // 0x0018   (0x0004)  
	bool                                               LockedInInventory;                                          // 0x001C   (0x0001)  
	bool                                               ComsumeOnComplete;                                          // 0x001D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x001E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLDialogReplicaItemData
/// Size: 0x00C0 (0x000008 - 0x0000C8)
struct FWTLDialogReplicaItemData : FTableRowBase
{ 
	FText                                              CommonText;                                                 // 0x0008   (0x0018)  
	FText                                              MaleText;                                                   // 0x0020   (0x0018)  
	FText                                              FemaleText;                                                 // 0x0038   (0x0018)  
	TWeakObjectPtr<USoundBase*>                        MaleSound;                                                  // 0x0050   (0x0028)  
	TWeakObjectPtr<USoundBase*>                        FemaleSound;                                                // 0x0078   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ReplicaSound;                                               // 0x00A0   (0x0028)  
};

/// Struct /Script/WTL.WTLAchievementItemData
/// Size: 0x0090 (0x000008 - 0x000098)
struct FWTLAchievementItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	FText                                              Description;                                                // 0x0020   (0x0018)  
	TWeakObjectPtr<UTexture2D*>                        InProgressIcon;                                             // 0x0038   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        EarnedIcon;                                                 // 0x0060   (0x0028)  
	bool                                               Hidden;                                                     // 0x0088   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	int32_t                                            StatisticsParameterID;                                      // 0x008C   (0x0004)  
	int32_t                                            Value;                                                      // 0x0090   (0x0004)  
	float                                              AchievedPercentage;                                         // 0x0094   (0x0004)  
};

/// Struct /Script/WTL.WTLStatisticsParameterItemData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLStatisticsParameterItemData : FTableRowBase
{ 
	FString                                            Name;                                                       // 0x0008   (0x0010)  
	uint64_t                                           MaxValue;                                                   // 0x0018   (0x0008)  
};

/// Struct /Script/WTL.WTLAICharacterItemData
/// Size: 0x0198 (0x000008 - 0x0001A0)
struct FWTLAICharacterItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	char                                               MinLevel;                                                   // 0x0020   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0021   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0022   (0x0002)  MISSED
	float                                              DangerLevelMultiplier;                                      // 0x0024   (0x0004)  
	bool                                               IsRegularAnimal;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              MassInKg;                                                   // 0x002C   (0x0004)  
	TWeakObjectPtr<UClass*>                            BlueprintClass;                                             // 0x0030   (0x0028)  
	float                                              ExperienceToHPRate;                                         // 0x0058   (0x0004)  
	int32_t                                            ExperienceForKill;                                          // 0x005C   (0x0004)  
	FTimespan                                          MaxExperienceGainTimeout;                                   // 0x0060   (0x0008)  
	float                                              Health;                                                     // 0x0068   (0x0004)  
	float                                              HealthPerLevel;                                             // 0x006C   (0x0004)  
	float                                              RegenerateHealthDelay;                                      // 0x0070   (0x0004)  
	float                                              RegenerateHealthRate;                                       // 0x0074   (0x0004)  
	float                                              MinRegenerationDamageTreshold;                              // 0x0078   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FWTLMonsterAttackEffect>                    CausingEffects;                                             // 0x0080   (0x0010)  
	float                                              CloseAttackMinDamage;                                       // 0x0090   (0x0004)  
	float                                              CloseAttackMaxDamage;                                       // 0x0094   (0x0004)  
	float                                              CloseAttackMinDamagePerLevel;                               // 0x0098   (0x0004)  
	float                                              CloseAttackMaxDamagePerLevel;                               // 0x009C   (0x0004)  
	float                                              CloseAttackRadiusPerLevel;                                  // 0x00A0   (0x0004)  
	float                                              CloseAttackMinArmorPiercing;                                // 0x00A4   (0x0004)  
	float                                              CloseAttackMaxArmorPiercing;                                // 0x00A8   (0x0004)  
	float                                              CloseAttackMinArmorPiercingPerLevel;                        // 0x00AC   (0x0004)  
	float                                              CloseAttackMaxArmorPiercingPerLevel;                        // 0x00B0   (0x0004)  
	float                                              CloseAttackEffectPercentPerLevel;                           // 0x00B4   (0x0004)  
	float                                              CloseAttackCriticalDamageMultiplier;                        // 0x00B8   (0x0004)  
	float                                              FarAttackMinDamage;                                         // 0x00BC   (0x0004)  
	float                                              FarAttackMaxDamage;                                         // 0x00C0   (0x0004)  
	float                                              FarAttackMinDamagePerLevel;                                 // 0x00C4   (0x0004)  
	float                                              FarAttackRadiusPerLevel;                                    // 0x00C8   (0x0004)  
	float                                              FarAttackMaxDamagePerLevel;                                 // 0x00CC   (0x0004)  
	float                                              FarAttackMinArmorPiercingPerLevel;                          // 0x00D0   (0x0004)  
	float                                              FarAttackMaxArmorPiercingPerLevel;                          // 0x00D4   (0x0004)  
	float                                              FarAttackCriticalDamageMultiplier;                          // 0x00D8   (0x0004)  
	float                                              HeadArmor;                                                  // 0x00DC   (0x0004)  
	float                                              BodyArmor;                                                  // 0x00E0   (0x0004)  
	float                                              ArmsArmor;                                                  // 0x00E4   (0x0004)  
	float                                              LegsArmor;                                                  // 0x00E8   (0x0004)  
	float                                              FeetArmor;                                                  // 0x00EC   (0x0004)  
	float                                              HeadArmorPerLevel;                                          // 0x00F0   (0x0004)  
	float                                              BodyArmorPerLevel;                                          // 0x00F4   (0x0004)  
	float                                              ArmsArmorPerLevel;                                          // 0x00F8   (0x0004)  
	float                                              LegsArmorPerLevel;                                          // 0x00FC   (0x0004)  
	float                                              FeetArmorPerLevel;                                          // 0x0100   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x0104   (0x0004)  MISSED
	FSlateBrush                                        ObjectiveIconBrush;                                         // 0x0108   (0x0088)  
	TArray<FWTLItemDropInfo>                           ItemsToDrop;                                                // 0x0190   (0x0010)  
};

/// Struct /Script/WTL.WTLMonsterAttackEffect
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLMonsterAttackEffect
{ 
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              MinValue;                                                   // 0x0004   (0x0004)  
	float                                              MaxValue;                                                   // 0x0008   (0x0004)  
	float                                              Chance;                                                     // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLMonsterItemData
/// Size: 0x01F0 (0x000008 - 0x0001F8)
struct FWTLMonsterItemData : FTableRowBase
{ 
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	bool                                               UseSimpleIdentification;                                    // 0x0020   (0x0001)  
	char                                               MinLevel;                                                   // 0x0021   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0022   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0023   (0x0001)  MISSED
	float                                              DangerLevelMultiplier;                                      // 0x0024   (0x0004)  
	bool                                               IsRegularAnimal;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              MassInKg;                                                   // 0x002C   (0x0004)  
	TWeakObjectPtr<UClass*>                            BlueprintClass;                                             // 0x0030   (0x0028)  
	int32_t                                            MasterMonsterID;                                            // 0x0058   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            ControlledBlueprintClass;                                   // 0x0060   (0x0028)  
	int32_t                                            ControlledMonsterStrength;                                  // 0x0088   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FWTLControlledMonsterSpawnItemInfo>         ControlledItemsSpawn;                                       // 0x0090   (0x0010)  
	float                                              ExperienceToHPRate;                                         // 0x00A0   (0x0004)  
	int32_t                                            ExperienceForKill;                                          // 0x00A4   (0x0004)  
	FTimespan                                          MaxExperienceGainTimeout;                                   // 0x00A8   (0x0008)  
	float                                              Health;                                                     // 0x00B0   (0x0004)  
	float                                              HealthPerLevel;                                             // 0x00B4   (0x0004)  
	float                                              RegenerateHealthDelay;                                      // 0x00B8   (0x0004)  
	float                                              RegenerateHealthRate;                                       // 0x00BC   (0x0004)  
	float                                              MinRegenerationDamageTreshold;                              // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<FWTLMonsterAttackEffect>                    CausingEffects;                                             // 0x00C8   (0x0010)  
	float                                              CloseAttackMinDamage;                                       // 0x00D8   (0x0004)  
	float                                              CloseAttackMaxDamage;                                       // 0x00DC   (0x0004)  
	float                                              CloseAttackMinDamagePerLevel;                               // 0x00E0   (0x0004)  
	float                                              CloseAttackMaxDamagePerLevel;                               // 0x00E4   (0x0004)  
	float                                              CloseAttackMinArmorPiercing;                                // 0x00E8   (0x0004)  
	float                                              CloseAttackMaxArmorPiercing;                                // 0x00EC   (0x0004)  
	float                                              CloseAttackMinArmorPiercingPerLevel;                        // 0x00F0   (0x0004)  
	float                                              CloseAttackMaxArmorPiercingPerLevel;                        // 0x00F4   (0x0004)  
	float                                              CloseAttackRadiusPerLevel;                                  // 0x00F8   (0x0004)  
	float                                              CloseAttackEffectPercentPerLevel;                           // 0x00FC   (0x0004)  
	float                                              CloseAttackCriticalDamageMultiplier;                        // 0x0100   (0x0004)  
	float                                              FarAttackMinDamage;                                         // 0x0104   (0x0004)  
	float                                              FarAttackMaxDamage;                                         // 0x0108   (0x0004)  
	float                                              FarAttackMinDamagePerLevel;                                 // 0x010C   (0x0004)  
	float                                              FarAttackMaxDamagePerLevel;                                 // 0x0110   (0x0004)  
	float                                              FarAttackMinArmorPiercingPerLevel;                          // 0x0114   (0x0004)  
	float                                              FarAttackMaxArmorPiercingPerLevel;                          // 0x0118   (0x0004)  
	float                                              FarAttackRadiusPerLevel;                                    // 0x011C   (0x0004)  
	float                                              FarAttackCriticalDamageMultiplier;                          // 0x0120   (0x0004)  
	float                                              HeadArmor;                                                  // 0x0124   (0x0004)  
	float                                              BodyArmor;                                                  // 0x0128   (0x0004)  
	float                                              ArmsArmor;                                                  // 0x012C   (0x0004)  
	float                                              LegsArmor;                                                  // 0x0130   (0x0004)  
	float                                              FeetArmor;                                                  // 0x0134   (0x0004)  
	float                                              HeadArmorPerLevel;                                          // 0x0138   (0x0004)  
	float                                              BodyArmorPerLevel;                                          // 0x013C   (0x0004)  
	float                                              ArmsArmorPerLevel;                                          // 0x0140   (0x0004)  
	float                                              LegsArmorPerLevel;                                          // 0x0144   (0x0004)  
	float                                              FeetArmorPerLevel;                                          // 0x0148   (0x0004)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x014C   (0x0004)  MISSED
	FSlateBrush                                        ObjectiveIconBrush;                                         // 0x0150   (0x0088)  
	int32_t                                            AccountAchievementIDForKill;                                // 0x01D8   (0x0004)  
	int32_t                                            AccountStatisticsParameterID;                               // 0x01DC   (0x0004)  
	int32_t                                            AccountStatisticsParameterDelta;                            // 0x01E0   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x01E4   (0x0004)  MISSED
	TArray<FWTLItemDropInfo>                           ItemsToDrop;                                                // 0x01E8   (0x0010)  
};

/// Struct /Script/WTL.WTLControlledMonsterSpawnItemInfo
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLControlledMonsterSpawnItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	float                                              Chance;                                                     // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLCharacterLevelItemData
/// Size: 0x0010 (0x000008 - 0x000018)
struct FWTLCharacterLevelItemData : FTableRowBase
{ 
	int32_t                                            Experience;                                                 // 0x0008   (0x0004)  
	int32_t                                            ExperienceToNextLevel;                                      // 0x000C   (0x0004)  
	int32_t                                            SkillPoints;                                                // 0x0010   (0x0004)  
	int32_t                                            ParametersPoints;                                           // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLLoadingAdviceItemData
/// Size: 0x0018 (0x000008 - 0x000020)
struct FWTLLoadingAdviceItemData : FTableRowBase
{ 
	FText                                              AdviceText;                                                 // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLLoadingScreenImagesItemData
/// Size: 0x0028 (0x000008 - 0x000030)
struct FWTLLoadingScreenImagesItemData : FTableRowBase
{ 
	FSoftObjectPath                                    Image;                                                      // 0x0008   (0x0018)  
	uint16_t                                           AdviceID;                                                   // 0x0020   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0022   (0x0006)  MISSED
	UTexture2D*                                        ImageTexture;                                               // 0x0028   (0x0008)  
};

/// Struct /Script/WTL.WTLMapItemData
/// Size: 0x0110 (0x000008 - 0x000118)
struct FWTLMapItemData : FTableRowBase
{ 
	FString                                            MapName;                                                    // 0x0008   (0x0010)  
	FString                                            MapPath;                                                    // 0x0018   (0x0010)  
	FText                                              Name;                                                       // 0x0028   (0x0018)  
	int32_t                                            MasterMapID;                                                // 0x0040   (0x0004)  
	FVector                                            MasterMapOffset;                                            // 0x0044   (0x000C)  
	int32_t                                            PDAModuleID;                                                // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0054   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        MapTexture;                                                 // 0x0058   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LocationPreviewTexture;                                     // 0x0080   (0x0028)  
	TWeakObjectPtr<UMaterial*>                         MinimapMaterial;                                            // 0x00A8   (0x0028)  
	float                                              LandscapeSideSize;                                          // 0x00D0   (0x0004)  
	FVector2D                                          WorldCenterOffset;                                          // 0x00D4   (0x0008)  
	float                                              ScaleValue;                                                 // 0x00DC   (0x0004)  
	float                                              ZoomInScaleDeltaRange;                                      // 0x00E0   (0x0004)  
	float                                              ZoomOutScaleDeltaRange;                                     // 0x00E4   (0x0004)  
	float                                              MapOriginalSideSize;                                        // 0x00E8   (0x0004)  
	float                                              MapSideSizeWithBorder;                                      // 0x00EC   (0x0004)  
	FVector2D                                          FirstSectorPosition;                                        // 0x00F0   (0x0008)  
	float                                              SectorSize;                                                 // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x00FC   (0x0004)  MISSED
	FString                                            FirstSectorName;                                            // 0x0100   (0x0010)  
	char                                               PDANetworkSignalMin;                                        // 0x0110   (0x0001)  
	char                                               PDANetworkSignalMax;                                        // 0x0111   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0112   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLCharacterCustomizationItemData
/// Size: 0x02F8 (0x000008 - 0x000300)
struct FWTLCharacterCustomizationItemData : FTableRowBase
{ 
	EWTLCharacterCustomizationPart                     Type;                                                       // 0x0008   (0x0001)  
	EWTLCharacterClass                                 ClassType;                                                  // 0x0009   (0x0001)  
	bool                                               IsDefaultClassObject;                                       // 0x000A   (0x0001)  
	EWTLSex                                            Sex;                                                        // 0x000B   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	TWeakObjectPtr<UTexture2D*>                        ImageTexture;                                               // 0x0028   (0x0028)  
	int32_t                                            StoreItemID;                                                // 0x0050   (0x0004)  
	int32_t                                            SteamID;                                                    // 0x0054   (0x0004)  
	TArray<int32_t>                                    RequiredSteamDLC;                                           // 0x0058   (0x0010)  
	bool                                               NeedLongPants;                                              // 0x0068   (0x0001)  
	bool                                               bIsHairlessHead;                                            // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x006A   (0x0006)  MISSED
	TWeakObjectPtr<USkeletalMesh*>                     SkeletalMesh;                                               // 0x0070   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     SkeletalMeshVariant1;                                       // 0x0098   (0x0028)  
	FName                                              MaterialSlotName0;                                          // 0x00C0   (0x0008)  
	FText                                              MaterialName0;                                              // 0x00C8   (0x0018)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance0_Color0;                                   // 0x00E0   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance0_Color1;                                   // 0x00F0   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance0_Color2;                                   // 0x0100   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance0_Color3;                                   // 0x0110   (0x0010)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance0_ScalarParameter0;                         // 0x0120   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance0_ScalarParameter1;                         // 0x0138   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance0_ScalarParameter2;                         // 0x0150   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance0_ScalarParameter3;                         // 0x0168   (0x0018)  
	FName                                              MaterialSlotName1;                                          // 0x0180   (0x0008)  
	FText                                              MaterialName1;                                              // 0x0188   (0x0018)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance1_Color0;                                   // 0x01A0   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance1_Color1;                                   // 0x01B0   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance1_Color2;                                   // 0x01C0   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance1_Color3;                                   // 0x01D0   (0x0010)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance1_ScalarParameter0;                         // 0x01E0   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance1_ScalarParameter1;                         // 0x01F8   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance1_ScalarParameter2;                         // 0x0210   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance1_ScalarParameter3;                         // 0x0228   (0x0018)  
	FName                                              MaterialSlotName2;                                          // 0x0240   (0x0008)  
	FText                                              MaterialName2;                                              // 0x0248   (0x0018)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance2_Color0;                                   // 0x0260   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance2_Color1;                                   // 0x0270   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance2_Color2;                                   // 0x0280   (0x0010)  
	FWTLCharacterCustomizationColorParameter           MaterialInstance2_Color3;                                   // 0x0290   (0x0010)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance2_ScalarParameter0;                         // 0x02A0   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance2_ScalarParameter1;                         // 0x02B8   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance2_ScalarParameter2;                         // 0x02D0   (0x0018)  
	FWTLCharacterCustomizationScalarParameter          MaterialInstance2_ScalarParameter3;                         // 0x02E8   (0x0018)  
};

/// Struct /Script/WTL.WTLCharacterCustomizationScalarParameter
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLCharacterCustomizationScalarParameter
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	char                                               ScalarValueCount;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterCustomizationColorParameter
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLCharacterCustomizationColorParameter
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.WTLArtefactItemData
/// Size: 0x0230 (0x000008 - 0x000238)
struct FWTLArtefactItemData : FTableRowBase
{ 
	EWTLArtefactType                                   Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0040   (0x0018)  
	int32_t                                            Validity;                                                   // 0x0058   (0x0004)  
	int32_t                                            Weight;                                                     // 0x005C   (0x0004)  
	int32_t                                            NoteID;                                                     // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        ItemViewImage;                                              // 0x0068   (0x0028)  
	FText                                              InformationContent;                                         // 0x0090   (0x0018)  
	bool                                               bIsCenterInformationContent;                                // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              DropChance;                                                 // 0x00AC   (0x0004)  
	EWTLFaction                                        Faction;                                                    // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            FactionTechnologiesLevel;                                   // 0x00B4   (0x0004)  
	TArray<FWTLItemClassRequirement>                   RPGClassRequirements;                                       // 0x00B8   (0x0010)  
	float                                              BasePrice;                                                  // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x00D0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x00F8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x0120   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x0148   (0x0028)  
	TWeakObjectPtr<UStaticMesh*>                       CharacterArtefactPreviewMesh;                               // 0x0170   (0x0028)  
	bool                                               CanBeUnited;                                                // 0x0198   (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x0199   (0x0007)  MISSED
	TArray<FWTLCharacterEffectInfluence>               Influences;                                                 // 0x01A0   (0x0010)  
	EWTLFoodActionType                                 FoodActionType;                                             // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x01B1   (0x0003)  MISSED
	int32_t                                            HungerValue;                                                // 0x01B4   (0x0004)  
	int32_t                                            ThirstValue;                                                // 0x01B8   (0x0004)  
	int32_t                                            HealthValue;                                                // 0x01BC   (0x0004)  
	int32_t                                            StaminaValue;                                               // 0x01C0   (0x0004)  
	int32_t                                            AlcoholValue;                                               // 0x01C4   (0x0004)  
	float                                              PoisonValue;                                                // 0x01C8   (0x0004)  
	float                                              ChemicalsValue;                                             // 0x01CC   (0x0004)  
	float                                              RadiationValue;                                             // 0x01D0   (0x0004)  
	float                                              BleedingValue;                                              // 0x01D4   (0x0004)  
	float                                              WoundedValue;                                               // 0x01D8   (0x0004)  
	unsigned char                                      UnknownData07_5[0x4];                                       // 0x01DC   (0x0004)  MISSED
	TArray<FWTLFishCutItemInfo>                        FishCutItems;                                               // 0x01E0   (0x0010)  
	TArray<FWTLUseItemResult>                          ResultItems;                                                // 0x01F0   (0x0010)  
	bool                                               CanBePlacedOnCommission;                                    // 0x0200   (0x0001)  
	bool                                               bIsItemStartQuest;                                          // 0x0201   (0x0001)  
	unsigned char                                      UnknownData08_5[0x2];                                       // 0x0202   (0x0002)  MISSED
	int32_t                                            QuestIDToStart;                                             // 0x0204   (0x0004)  
	bool                                               CanTransferToSteam;                                         // 0x0208   (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0209   (0x0003)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x020C   (0x0004)  
	TWeakObjectPtr<UFMODEvent*>                        UseSoundEvent;                                              // 0x0210   (0x0028)  
};

/// Struct /Script/WTL.WTLUseItemResult
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLUseItemResult
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	int32_t                                            Count;                                                      // 0x0004   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLFishCutItemInfo
/// Size: 0x0060 (0x000000 - 0x000060)
struct FWTLFishCutItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0010   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0014   (0x0004)  
	float                                              NormalChance;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FWTLQuestItemDropChance>                    QuestDropChances;                                           // 0x0020   (0x0010)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0030   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x0034   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0038   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0039   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x003A   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0040   (0x0010)  
	FString                                            ModificationData;                                           // 0x0050   (0x0010)  
};

/// Struct /Script/WTL.WTLItemClassRequirement
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLItemClassRequirement
{ 
	EWTLCharacterClass                                 Class;                                                      // 0x0000   (0x0001)  
	char                                               Level;                                                      // 0x0001   (0x0001)  
	char                                               Strength;                                                   // 0x0002   (0x0001)  
	char                                               Dexterity;                                                  // 0x0003   (0x0001)  
	char                                               Stamina;                                                    // 0x0004   (0x0001)  
	char                                               Accuracy;                                                   // 0x0005   (0x0001)  
	char                                               Intelligence;                                               // 0x0006   (0x0001)  
	char                                               Fortune;                                                    // 0x0007   (0x0001)  
};

/// Struct /Script/WTL.WTLResourceItemData
/// Size: 0x0120 (0x000008 - 0x000128)
struct FWTLResourceItemData : FTableRowBase
{ 
	EWTLResourceType                                   Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0040   (0x0018)  
	float                                              BasePrice;                                                  // 0x0058   (0x0004)  
	int32_t                                            Weight;                                                     // 0x005C   (0x0004)  
	float                                              DropChance;                                                 // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x0068   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x0090   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x00B8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x00E0   (0x0028)  
	bool                                               CanBeUnited;                                                // 0x0108   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0109   (0x0007)  MISSED
	TArray<FWTLCharacterEffectInfluence>               Influences;                                                 // 0x0110   (0x0010)  
	bool                                               CanBePlacedOnCommission;                                    // 0x0120   (0x0001)  
	bool                                               CanTransferToSteam;                                         // 0x0121   (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x0122   (0x0002)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x0124   (0x0004)  
};

/// Struct /Script/WTL.WTLClothesItemData
/// Size: 0x0250 (0x000008 - 0x000258)
struct FWTLClothesItemData : FTableRowBase
{ 
	EWTLClothesType                                    Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0040   (0x0018)  
	int32_t                                            MasterClothesID;                                            // 0x0058   (0x0004)  
	bool                                               CopyParametersFromMasterClothes;                            // 0x005C   (0x0001)  
	EWTLArmorClass                                     ArmorClass;                                                 // 0x005D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x005E   (0x0002)  MISSED
	int32_t                                            ArmorMin;                                                   // 0x0060   (0x0004)  
	int32_t                                            ArmorMax;                                                   // 0x0064   (0x0004)  
	bool                                               HaveFrontPlate;                                             // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0069   (0x0007)  MISSED
	TArray<int32_t>                                    AcceptableFrontPlates;                                      // 0x0070   (0x0010)  
	bool                                               HaveBackPlate;                                              // 0x0080   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0081   (0x0007)  MISSED
	TArray<int32_t>                                    AcceptableBackPlates;                                       // 0x0088   (0x0010)  
	float                                              MonsterArmorMultiplier;                                     // 0x0098   (0x0004)  
	int32_t                                            Condition;                                                  // 0x009C   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x00A0   (0x0004)  
	int32_t                                            Weight;                                                     // 0x00A4   (0x0004)  
	bool                                               CoverArms;                                                  // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              ArmsArmorMultiplier;                                        // 0x00AC   (0x0004)  
	bool                                               HidesBackpackStraps;                                        // 0x00B0   (0x0001)  
	bool                                               HidesBackpack;                                              // 0x00B1   (0x0001)  
	bool                                               ReplaceBodyPart;                                            // 0x00B2   (0x0001)  
	bool                                               NeedLongPants;                                              // 0x00B3   (0x0001)  
	EWTLClothesTorsoMeshVariant                        TorsoMeshVariant;                                           // 0x00B4   (0x0001)  
	EWTLFaction                                        Faction;                                                    // 0x00B5   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x00B6   (0x0002)  MISSED
	int32_t                                            FactionTechnologiesLevel;                                   // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x00BC   (0x0004)  MISSED
	TArray<FWTLItemClassRequirement>                   RPGClassRequirements;                                       // 0x00C0   (0x0010)  
	float                                              DropChance;                                                 // 0x00D0   (0x0004)  
	int32_t                                            MinRepairExperience;                                        // 0x00D4   (0x0004)  
	float                                              BasePrice;                                                  // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData07_5[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x00E0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x0108   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x0130   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x0158   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleCharacterBodyMesh;                                      // 0x0180   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleCharacterBodyMesh;                                    // 0x01A8   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     MaleCharacterBodyMeshVariant1;                              // 0x01D0   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FemaleCharacterBodyMeshVariant1;                            // 0x01F8   (0x0028)  
	TWeakObjectPtr<UStaticMesh*>                       CharacterClothesPreviewMesh;                                // 0x0220   (0x0028)  
	bool                                               CanBeCustomized;                                            // 0x0248   (0x0001)  
	bool                                               CanBeCamouflaged;                                           // 0x0249   (0x0001)  
	bool                                               CanBePlacedOnCommission;                                    // 0x024A   (0x0001)  
	bool                                               CanBeViewedThroughPreviewMeshesList;                        // 0x024B   (0x0001)  
	float                                              ItemPreviewLightIntensity;                                  // 0x024C   (0x0004)  
	bool                                               CanTransferToSteam;                                         // 0x0250   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0251   (0x0003)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x0254   (0x0004)  
};

/// Struct /Script/WTL.WTLStuffItemData
/// Size: 0x05E0 (0x000008 - 0x0005E8)
struct FWTLStuffItemData : FTableRowBase
{ 
	EWTLStuffType                                      Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0040   (0x0018)  
	int32_t                                            MasterStuffID;                                              // 0x0058   (0x0004)  
	bool                                               CopyParametersFromMasterStuff;                              // 0x005C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x005D   (0x0003)  MISSED
	int32_t                                            Condition;                                                  // 0x0060   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x0064   (0x0004)  
	TArray<int32_t>                                    CanBeRepairedWithItems;                                     // 0x0068   (0x0010)  
	int32_t                                            Weight;                                                     // 0x0078   (0x0004)  
	float                                              DropChance;                                                 // 0x007C   (0x0004)  
	int32_t                                            MinRepairExperience;                                        // 0x0080   (0x0004)  
	bool                                               MustBeenFactionMember;                                      // 0x0084   (0x0001)  
	EWTLFaction                                        Faction;                                                    // 0x0085   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0086   (0x0002)  MISSED
	int32_t                                            FactionTechnologiesLevel;                                   // 0x0088   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FWTLItemClassRequirement>                   RPGClassRequirements;                                       // 0x0090   (0x0010)  
	float                                              BasePrice;                                                  // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            BlueprintClass;                                             // 0x00A8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x00D0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x00F8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x0120   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x0148   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        ScopeFrameTexture;                                          // 0x0170   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        ScopeReticleTexture;                                        // 0x0198   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        ScopeOpticalTrashTexture;                                   // 0x01C0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        ScopeReticleColorMaskTexture;                               // 0x01E8   (0x0028)  
	float                                              ScopeOverlayScale;                                          // 0x0210   (0x0004)  
	bool                                               HasReticleIllumination;                                     // 0x0214   (0x0001)  
	bool                                               ReticleIsAlwaysIlluminated;                                 // 0x0215   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x0216   (0x0002)  MISSED
	FLinearColor                                       ReticleIlluminationColor;                                   // 0x0218   (0x0010)  
	TWeakObjectPtr<UStaticMesh*>                       WeaponAttachmentMesh;                                       // 0x0228   (0x0028)  
	EWTLWeaponAttachmentType                           WeaponAttachmentType;                                       // 0x0250   (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0251   (0x0003)  MISSED
	float                                              WeaponAttachmentZoom;                                       // 0x0254   (0x0004)  
	FVector                                            FlareRelativeOffset;                                        // 0x0258   (0x000C)  
	float                                              WeaponAttachmentRecoilMultiplier;                           // 0x0264   (0x0004)  
	float                                              WeaponAttachmentDamageMultiplier;                           // 0x0268   (0x0004)  
	float                                              WeaponAttachmentAccuracyMultiplier;                         // 0x026C   (0x0004)  
	TMap<uint16_t, FWTLWeaponAttachmentInstallInfo>    WeaponInstallInfo;                                          // 0x0270   (0x0050)  
	int32_t                                            MaxEnergy;                                                  // 0x02C0   (0x0004)  
	int32_t                                            InitialEnergy;                                              // 0x02C4   (0x0004)  
	int32_t                                            EnergyConsumptionPerSecond;                                 // 0x02C8   (0x0004)  
	int32_t                                            EnergyConsumptionPerUse;                                    // 0x02CC   (0x0004)  
	int32_t                                            EnergyRegenerationPerSecond;                                // 0x02D0   (0x0004)  
	float                                              EnergyRegenerationDelay;                                    // 0x02D4   (0x0004)  
	TArray<int32_t>                                    CanBeChargedWithItems;                                      // 0x02D8   (0x0010)  
	int32_t                                            DamageMin;                                                  // 0x02E8   (0x0004)  
	int32_t                                            DamageMax;                                                  // 0x02EC   (0x0004)  
	int32_t                                            ArmorPiercingMin;                                           // 0x02F0   (0x0004)  
	int32_t                                            ArmorPiercingMax;                                           // 0x02F4   (0x0004)  
	float                                              StaminaPerUse;                                              // 0x02F8   (0x0004)  
	float                                              MiningMultiplier;                                           // 0x02FC   (0x0004)  
	TWeakObjectPtr<UStaticMesh*>                       PreviewPointerMesh;                                         // 0x0300   (0x0028)  
	float                                              PlacementAngleLimit;                                        // 0x0328   (0x0004)  
	float                                              PlacementRange;                                             // 0x032C   (0x0004)  
	bool                                               CanBePlacedOnlyOnLandscape;                                 // 0x0330   (0x0001)  
	bool                                               CanBePlacedInSafeZone;                                      // 0x0331   (0x0001)  
	bool                                               CanBePlacedOnlyAtNight;                                     // 0x0332   (0x0001)  
	unsigned char                                      UnknownData07_5[0x1];                                       // 0x0333   (0x0001)  MISSED
	float                                              PlacementTime;                                              // 0x0334   (0x0004)  
	TWeakObjectPtr<UClass*>                            PlacementActorClass;                                        // 0x0338   (0x0028)  
	bool                                               bIsSpecialPlacementStuff;                                   // 0x0360   (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0361   (0x0003)  MISSED
	float                                              PlacementShapeExtendMultiplier;                             // 0x0364   (0x0004)  
	bool                                               bCanBePlacedOnlyInStuffPlacementZone;                       // 0x0368   (0x0001)  
	EWTLWeaponType                                     ModificationWeaponType;                                     // 0x0369   (0x0001)  
	unsigned char                                      UnknownData09_5[0x6];                                       // 0x036A   (0x0006)  MISSED
	FString                                            ModificationData;                                           // 0x0370   (0x0010)  
	bool                                               CanBePlacedOnCommission;                                    // 0x0380   (0x0001)  
	EWTLEquipmentType                                  EquipmentType;                                              // 0x0381   (0x0001)  
	unsigned char                                      UnknownData10_5[0x6];                                       // 0x0382   (0x0006)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        ActivationSoundEvent;                                       // 0x0388   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        DeactivationSoundEvent;                                     // 0x03B0   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     EquipmentMeshMale;                                          // 0x03D8   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     EquipmentMeshFemale;                                        // 0x0400   (0x0028)  
	bool                                               NeedHideGlasses;                                            // 0x0428   (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x0429   (0x0007)  MISSED
	TMap<EWTLCharacterClass, FTransform>               MalePreviewItemTransform;                                   // 0x0430   (0x0050)  
	TMap<EWTLCharacterClass, FTransform>               FemalePreviewItemTransform;                                 // 0x0480   (0x0050)  
	TWeakObjectPtr<UClass*>                            Vehicle;                                                    // 0x04D0   (0x0028)  
	TWeakObjectPtr<UStaticMesh*>                       ItemPreviewMesh;                                            // 0x04F8   (0x0028)  
	float                                              ItemPreviewLightIntensity;                                  // 0x0520   (0x0004)  
	bool                                               CanBeUsedInSafeZone;                                        // 0x0524   (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0525   (0x0003)  MISSED
	TWeakObjectPtr<UClass*>                            Drone;                                                      // 0x0528   (0x0028)  
	int32_t                                            DroneCameraScreenID;                                        // 0x0550   (0x0004)  
	unsigned char                                      UnknownData13_5[0x4];                                       // 0x0554   (0x0004)  MISSED
	TWeakObjectPtr<UStaticMesh*>                       DronePreviewMesh;                                           // 0x0558   (0x0028)  
	TArray<FTransform>                                 DronePreviewOffsets;                                        // 0x0580   (0x0010)  
	TMap<int32_t, int32_t>                             SprayCanWeaponModification;                                 // 0x0590   (0x0050)  
	bool                                               CanTransferToSteam;                                         // 0x05E0   (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x05E1   (0x0003)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x05E4   (0x0004)  
};

/// Struct /Script/WTL.WTLWeaponAttachmentInstallInfo
/// Size: 0x00C0 (0x000000 - 0x0000C0)
struct FWTLWeaponAttachmentInstallInfo
{ 
	FVector                                            AimingOffset;                                               // 0x0000   (0x000C)  
	FVector                                            AimingHandsOffsetMale;                                      // 0x000C   (0x000C)  
	FVector                                            AimingHandsOffsetFemale;                                    // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_5[0xC];                                       // 0x0024   (0x000C)  MISSED
	FTransform                                         AttachmentOffset;                                           // 0x0030   (0x0030)  
	TWeakObjectPtr<UStaticMesh*>                       MountMesh;                                                  // 0x0060   (0x0028)  
	unsigned char                                      UnknownData01_5[0x8];                                       // 0x0088   (0x0008)  MISSED
	FTransform                                         MountOffset;                                                // 0x0090   (0x0030)  
};

/// Struct /Script/WTL.WTLMedicineItemData
/// Size: 0x0180 (0x000008 - 0x000188)
struct FWTLMedicineItemData : FTableRowBase
{ 
	EWTLMedicineType                                   Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FWTLMedicineEffect>                         Effects;                                                    // 0x0010   (0x0010)  
	TArray<FWTLCharacterEffectInfluence>               CharacterEffectsInfluence;                                  // 0x0020   (0x0010)  
	FText                                              Name;                                                       // 0x0030   (0x0018)  
	FText                                              Description;                                                // 0x0048   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0060   (0x0018)  
	int32_t                                            Validity;                                                   // 0x0078   (0x0004)  
	int32_t                                            Weight;                                                     // 0x007C   (0x0004)  
	int32_t                                            ExperienceDeltaPerUse;                                      // 0x0080   (0x0004)  
	float                                              DropChance;                                                 // 0x0084   (0x0004)  
	EWTLFaction                                        Faction;                                                    // 0x0088   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	int32_t                                            FactionTechnologiesLevel;                                   // 0x008C   (0x0004)  
	TArray<FWTLItemClassRequirement>                   RPGClassRequirements;                                       // 0x0090   (0x0010)  
	float                                              BasePrice;                                                  // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x00A8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x00D0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x00F8   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x0120   (0x0028)  
	bool                                               CanBeUnited;                                                // 0x0148   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0149   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        UseSoundEvent;                                              // 0x0150   (0x0028)  
	float                                              TotalDuration;                                              // 0x0178   (0x0004)  
	bool                                               CanBePlacedOnCommission;                                    // 0x017C   (0x0001)  
	bool                                               CanTransferToSteam;                                         // 0x017D   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x017E   (0x0002)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x0180   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0184   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMedicineEffect
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLMedicineEffect
{ 
	EWTLMedicineEffectParameter                        Parameter;                                                  // 0x0000   (0x0001)  
	bool                                               bIsPermanent;                                               // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              MinValue;                                                   // 0x0004   (0x0004)  
	float                                              MaxValue;                                                   // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	UCurveFloat*                                       ValueCurve;                                                 // 0x0010   (0x0008)  
	float                                              Duration;                                                   // 0x0018   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLAmmoItemData
/// Size: 0x01F0 (0x000008 - 0x0001F8)
struct FWTLAmmoItemData : FTableRowBase
{ 
	EWTLAmmoType                                       Type;                                                       // 0x0008   (0x0001)  
	EWTLCaliber                                        Caliber;                                                    // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FString                                            TypeName;                                                   // 0x0028   (0x0010)  
	FText                                              Description;                                                // 0x0038   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0050   (0x0018)  
	int32_t                                            MasterAmmoID;                                               // 0x0068   (0x0004)  
	bool                                               CopyParametersFromMasterAmmo;                               // 0x006C   (0x0001)  
	EWTLFaction                                        Faction;                                                    // 0x006D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x006E   (0x0002)  MISSED
	int32_t                                            FactionTechonologiesLevel;                                  // 0x0070   (0x0004)  
	int32_t                                            DamageMin;                                                  // 0x0074   (0x0004)  
	int32_t                                            DamageMax;                                                  // 0x0078   (0x0004)  
	int32_t                                            ArmorPiercingMin;                                           // 0x007C   (0x0004)  
	int32_t                                            ArmorPiercingMax;                                           // 0x0080   (0x0004)  
	float                                              PVPDamageMultiplier;                                        // 0x0084   (0x0004)  
	float                                              PVEDamageMultiplier;                                        // 0x0088   (0x0004)  
	float                                              RobotDamageMultiplier;                                      // 0x008C   (0x0004)  
	float                                              PVPArmorPiercingMultiplier;                                 // 0x0090   (0x0004)  
	float                                              PVEArmorPiercingMultiplier;                                 // 0x0094   (0x0004)  
	float                                              RobotArmorPiercingMultiplier;                               // 0x0098   (0x0004)  
	int32_t                                            Accuracy;                                                   // 0x009C   (0x0004)  
	int32_t                                            Weight;                                                     // 0x00A0   (0x0004)  
	float                                              InitialVelocity;                                            // 0x00A4   (0x0004)  
	float                                              DestroyVelocity;                                            // 0x00A8   (0x0004)  
	float                                              PhysicsImpulse;                                             // 0x00AC   (0x0004)  
	float                                              RagdollImpulse;                                             // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x00B4   (0x0004)  MISSED
	TArray<FWTLPenetrationCapability>                  PenetrationCapabilities;                                    // 0x00B8   (0x0010)  
	EWTLAmmoProjectileType                             ProjectileType;                                             // 0x00C8   (0x0001)  
	char                                               ProjectileCount;                                            // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData03_5[0x6];                                       // 0x00CA   (0x0006)  MISSED
	TWeakObjectPtr<UClass*>                            ProjectileClass;                                            // 0x00D0   (0x0028)  
	UCurveFloat*                                       VelocityCurve;                                              // 0x00F8   (0x0008)  
	UCurveFloat*                                       GravityCurve;                                               // 0x0100   (0x0008)  
	bool                                               UseReliableHitEvent;                                        // 0x0108   (0x0001)  
	bool                                               UseReliableRicochetEvent;                                   // 0x0109   (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x010A   (0x0002)  MISSED
	float                                              ConditionDeltaMultiplier;                                   // 0x010C   (0x0004)  
	bool                                               SpawnTracer;                                                // 0x0110   (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              SpawnTracerChance;                                          // 0x0114   (0x0004)  
	float                                              SpawnTracerOffset;                                          // 0x0118   (0x0004)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x011C   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            TracerClass;                                                // 0x0120   (0x0028)  
	float                                              BasePrice;                                                  // 0x0148   (0x0004)  
	float                                              DropChance;                                                 // 0x014C   (0x0004)  
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x0150   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x0178   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x01A0   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x01C8   (0x0028)  
	bool                                               CanBeUnited;                                                // 0x01F0   (0x0001)  
	bool                                               CanBePlacedOnCommission;                                    // 0x01F1   (0x0001)  
	bool                                               CanTransferToSteam;                                         // 0x01F2   (0x0001)  
	unsigned char                                      UnknownData07_5[0x1];                                       // 0x01F3   (0x0001)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x01F4   (0x0004)  
};

/// Struct /Script/WTL.WTLPenetrationCapability
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLPenetrationCapability
{ 
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              MaxSize;                                                    // 0x0004   (0x0004)  
	float                                              MinVelocity;                                                // 0x0008   (0x0004)  
	float                                              VelocityPercentDeltaPerUnit;                                // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLWeaponItemData
/// Size: 0x01F8 (0x000008 - 0x000200)
struct FWTLWeaponItemData : FTableRowBase
{ 
	EWTLWeaponType                                     Type;                                                       // 0x0008   (0x0001)  
	EWTLCaliber                                        Caliber;                                                    // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	FText                                              Name;                                                       // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
	FText                                              ShopDescription;                                            // 0x0040   (0x0018)  
	char                                               MagazineCapacity;                                           // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            DamageMin;                                                  // 0x005C   (0x0004)  
	int32_t                                            DamageMax;                                                  // 0x0060   (0x0004)  
	int32_t                                            ArmorPiercingMin;                                           // 0x0064   (0x0004)  
	int32_t                                            ArmorPiercingMax;                                           // 0x0068   (0x0004)  
	float                                              CriticalHitChanceMultiplier;                                // 0x006C   (0x0004)  
	int32_t                                            BaseAmmoID;                                                 // 0x0070   (0x0004)  
	int32_t                                            Accuracy;                                                   // 0x0074   (0x0004)  
	int32_t                                            EffectiveRange;                                             // 0x0078   (0x0004)  
	int32_t                                            Condition;                                                  // 0x007C   (0x0004)  
	int32_t                                            ConditionDelta;                                             // 0x0080   (0x0004)  
	float                                              OpticsConditionDeltaMultiplier;                             // 0x0084   (0x0004)  
	int32_t                                            Weight;                                                     // 0x0088   (0x0004)  
	float                                              DropChance;                                                 // 0x008C   (0x0004)  
	int32_t                                            MinRepairExperience;                                        // 0x0090   (0x0004)  
	EWTLFaction                                        Faction;                                                    // 0x0094   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0095   (0x0003)  MISSED
	int32_t                                            FactionTechonologiesLevel;                                  // 0x0098   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x009C   (0x0004)  MISSED
	TArray<FWTLItemClassRequirement>                   RPGClassRequirements;                                       // 0x00A0   (0x0010)  
	float                                              BasePrice;                                                  // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData04_5[0x4];                                       // 0x00B4   (0x0004)  MISSED
	TWeakObjectPtr<UClass*>                            BlueprintClass;                                             // 0x00B8   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        InventoryIcon;                                              // 0x00E0   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        StoreIcon;                                                  // 0x0108   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeStoreIcon;                                             // 0x0130   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        KillsStatsIcon;                                             // 0x0158   (0x0028)  
	TWeakObjectPtr<UClass*>                            ItemPickupClass;                                            // 0x0180   (0x0028)  
	TWeakObjectPtr<UStaticMesh*>                       CharacterWeaponPreviewMesh;                                 // 0x01A8   (0x0028)  
	TArray<FTransform>                                 CharacterWeaponPreviewOffsets;                              // 0x01D0   (0x0010)  
	bool                                               CanBeCustomized;                                            // 0x01E0   (0x0001)  
	bool                                               CanBePlacedOnCommission;                                    // 0x01E1   (0x0001)  
	bool                                               CanBeViewedThroughPreviewMeshesList;                        // 0x01E2   (0x0001)  
	unsigned char                                      UnknownData05_5[0x1];                                       // 0x01E3   (0x0001)  MISSED
	float                                              ItemPreviewLightIntensity;                                  // 0x01E4   (0x0004)  
	int32_t                                            MasterWeaponID;                                             // 0x01E8   (0x0004)  
	bool                                               CopyParametersFromMasterWeapon;                             // 0x01EC   (0x0001)  
	bool                                               UseWeaponInstallInfoForMasterWeapon;                        // 0x01ED   (0x0001)  
	unsigned char                                      UnknownData06_5[0x2];                                       // 0x01EE   (0x0002)  MISSED
	float                                              ExperienceMultiplier;                                       // 0x01F0   (0x0004)  
	bool                                               IsSteamMarketable;                                          // 0x01F4   (0x0001)  
	bool                                               CanTransferToSteam;                                         // 0x01F5   (0x0001)  
	unsigned char                                      UnknownData07_5[0x2];                                       // 0x01F6   (0x0002)  MISSED
	int32_t                                            SteamMarketID;                                              // 0x01F8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x01FC   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLAICharacterDeathData
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLAICharacterDeathData
{ 
	bool                                               IsBustServer;                                               // 0x0000   (0x0001)  
	char                                               PercentDamage;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	FVector                                            VectorDamage;                                               // 0x0004   (0x000C)  
	float                                              AmmoPhysicsImpulse;                                         // 0x0010   (0x0004)  
	float                                              KillingDamage;                                              // 0x0014   (0x0004)  
	int32_t                                            DirectionDeathID;                                           // 0x0018   (0x0004)  
	char                                               ProjectileCount;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLMonsterAction
/// Size: 0x0110 (0x000000 - 0x000110)
struct FWTLMonsterAction
{ 
	bool                                               bUseParticleSystem;                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UParticleSystem*>                   ParticleSystem;                                             // 0x0008   (0x0028)  
	FVector                                            ParticleSystemLocationOffset;                               // 0x0030   (0x000C)  
	FRotator                                           ParticleSystemRotationOffset;                               // 0x003C   (0x000C)  
	FVector                                            ParticleSystemScale;                                        // 0x0048   (0x000C)  
	FName                                              ParticleSystemSocketName;                                   // 0x0054   (0x0008)  
	bool                                               bAttachParticleSystemToSocket;                              // 0x005C   (0x0001)  
	bool                                               bUseSound;                                                  // 0x005D   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x005E   (0x0002)  MISSED
	TWeakObjectPtr<USoundBase*>                        SoundToPlay;                                                // 0x0060   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SoundEventToPlay;                                           // 0x0088   (0x0028)  
	float                                              SoundVolumeMultiplier;                                      // 0x00B0   (0x0004)  
	FVector                                            SoundLocationOffset;                                        // 0x00B4   (0x000C)  
	FName                                              SoundSocketName;                                            // 0x00C0   (0x0008)  
	bool                                               bAttachSoundToSocket;                                       // 0x00C8   (0x0001)  
	bool                                               bUseCameraShake;                                            // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x00CA   (0x0002)  MISSED
	FVector                                            EpicentreLocationOffset;                                    // 0x00CC   (0x000C)  
	float                                              EpicentreRadius;                                            // 0x00D8   (0x0004)  
	float                                              ShakeStrengthMultiplier;                                    // 0x00DC   (0x0004)  
	FName                                              EpicentreSocketName;                                        // 0x00E0   (0x0008)  
	TWeakObjectPtr<UClass*>                            CameraShakeToPlay;                                          // 0x00E8   (0x0028)  
};

/// Struct /Script/WTL.WTLRadioTeleportPlace
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLRadioTeleportPlace
{ 
	int32_t                                            LocationID;                                                 // 0x0000   (0x0004)  
	int32_t                                            PortalID;                                                   // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLArenaReward
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLArenaReward
{ 
	int32_t                                            Score;                                                      // 0x0000   (0x0004)  
	int32_t                                            LootBoxID;                                                  // 0x0004   (0x0004)  
	int32_t                                            MoneyReward;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLBallisticsProjectileData
/// Size: 0x00A0 (0x000000 - 0x0000A0)
struct FWTLBallisticsProjectileData
{ 
	AWTLCharacter*                                     Character;                                                  // 0x0000   (0x0008)  
	AWTLRangedWeapon*                                  Weapon;                                                     // 0x0008   (0x0008)  
	uint16_t                                           WeaponID;                                                   // 0x0010   (0x0002)  
	unsigned char                                      UnknownData00_5[0xE];                                       // 0x0012   (0x000E)  MISSED
	uint16_t                                           AmmoID;                                                     // 0x0020   (0x0002)  
	unsigned char                                      UnknownData01_5[0xE];                                       // 0x0022   (0x000E)  MISSED
	FTransform                                         SpawnTransform;                                             // 0x0030   (0x0030)  
	FDateTime                                          SpawnTime;                                                  // 0x0060   (0x0008)  
	float                                              ProjectileLifeTime;                                         // 0x0068   (0x0004)  
	FVector                                            PreviousPosition;                                           // 0x006C   (0x000C)  
	FVector                                            CurrentPosition;                                            // 0x0078   (0x000C)  
	float                                              CurrentVelocity;                                            // 0x0084   (0x0004)  
	char                                               HitCount;                                                   // 0x0088   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	float                                              VelocityPenalty;                                            // 0x008C   (0x0004)  
	uint16_t                                           TracerID;                                                   // 0x0090   (0x0002)  
	bool                                               FirstIteration;                                             // 0x0092   (0x0001)  
	bool                                               RemoveFlag;                                                 // 0x0093   (0x0001)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x0094   (0x000C)  MISSED
};

/// Struct /Script/WTL.WTLBallisticsActorPositionData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLBallisticsActorPositionData
{ 
	uint64_t                                           ServerTime;                                                 // 0x0000   (0x0008)  
	FVector                                            Position;                                                   // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/WTL.SkeletalMeshMergeParams
/// Size: 0x0040 (0x000000 - 0x000040)
struct FSkeletalMeshMergeParams
{ 
	TArray<FSkelMeshMergeSectionMapping_BP>            MeshSectionMappings;                                        // 0x0000   (0x0010)  
	TArray<FSkelMeshMergeUVTransformMapping>           UVTransformsPerMesh;                                        // 0x0010   (0x0010)  
	TArray<USkeletalMesh*>                             MeshesToMerge;                                              // 0x0020   (0x0010)  
	int32_t                                            StripTopLODS;                                               // 0x0030   (0x0004)  
	bool                                               bNeedsCpuAccess;                                            // 0x0034:0 (0x0001)  
	bool                                               bSkeletonBefore;                                            // 0x0034:1 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0035   (0x0003)  MISSED
	USkeleton*                                         Skeleton;                                                   // 0x0038   (0x0008)  
};

/// Struct /Script/WTL.SkelMeshMergeUVTransformMapping
/// Size: 0x0010 (0x000000 - 0x000010)
struct FSkelMeshMergeUVTransformMapping
{ 
	TArray<FSkelMeshMergeUVTransform>                  UVTransformsPerMesh;                                        // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.SkelMeshMergeUVTransform
/// Size: 0x0010 (0x000000 - 0x000010)
struct FSkelMeshMergeUVTransform
{ 
	TArray<FTransform>                                 UVTransforms;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.SkelMeshMergeSectionMapping_BP
/// Size: 0x0010 (0x000000 - 0x000010)
struct FSkelMeshMergeSectionMapping_BP
{ 
	TArray<int32_t>                                    SectionIDs;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.WTLMonsterBurst
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLMonsterBurst
{ 
	bool                                               IsBurst;                                                    // 0x0000   (0x0001)  
	char                                               PercentDamageBurst;                                         // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              TakeDamageBurst;                                            // 0x0004   (0x0004)  
	char                                               MinLevelBurst;                                              // 0x0008   (0x0001)  
	char                                               MaxLevelBurst;                                              // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLMaterialSpriteElement
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLMaterialSpriteElement
{ 
	UMaterialInterface*                                Material;                                                   // 0x0000   (0x0008)  
	UCurveFloat*                                       DistanceToOpacityCurve;                                     // 0x0008   (0x0008)  
	bool                                               bSizeIsInScreenSpace;                                       // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              BaseSizeX;                                                  // 0x0014   (0x0004)  
	float                                              BaseSizeY;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	UCurveFloat*                                       DistanceToSizeCurve;                                        // 0x0020   (0x0008)  
};

/// Struct /Script/WTL.WTLDisplayAnimationSet
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLDisplayAnimationSet
{ 
	EWTLDisplayInputType                               InputType;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              InputDirection;                                             // 0x0004   (0x0004)  
	UAnimMontage*                                      ItemMontage;                                                // 0x0008   (0x0008)  
	UAnimMontage*                                      PawnMontage;                                                // 0x0010   (0x0008)  
	float                                              AnimationRate;                                              // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCameraLimits
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLCameraLimits
{ 
	float                                              YawLimit;                                                   // 0x0000   (0x0004)  
	float                                              PitchMinLimit;                                              // 0x0004   (0x0004)  
	float                                              PitchMaxLimit;                                              // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLIngredientItemConsumeInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLIngredientItemConsumeInfo
{ 
	int32_t                                            CraftRecipeID;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0008   (0x0008)  
	FDateTime                                          LastConsumeTime;                                            // 0x0010   (0x0008)  
};

/// Struct /Script/WTL.WTLCharacterAnimInstanceProxy
/// Size: 0x0010 (0x000760 - 0x000770)
struct FWTLCharacterAnimInstanceProxy : FAnimInstanceProxy
{ 
	bool                                               bIsTestPassed;                                              // 0x0760   (0x0001)  
	unsigned char                                      UnknownData00_6[0xF];                                       // 0x0761   (0x000F)  MISSED
};

/// Struct /Script/WTL.WTLMarkerMemoryElement
/// Size: 0x0038 (0x000000 - 0x000038)
struct FWTLMarkerMemoryElement
{ 
	float                                              MemoryValue;                                                // 0x0000   (0x0004)  
	FVector_NetQuantize                                WorldPosition;                                              // 0x0004   (0x000C)  
	unsigned char                                      UnknownData00_5[0x20];                                      // 0x0010   (0x0020)  MISSED
	EWTLMarkerType                                     MarkerType;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLIdentificationMemoryElement
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLIdentificationMemoryElement
{ 
	float                                              MemoryValue;                                                // 0x0000   (0x0004)  
	float                                              LastZDistance;                                              // 0x0004   (0x000C)  
	bool                                               bVisibleInThisFrame;                                        // 0x0010   (0x0001)  
	bool                                               bSkipInThisFrame;                                           // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1E];                                      // 0x0012   (0x001E)  MISSED
};

/// Struct /Script/WTL.WTLIdentificationCache
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLIdentificationCache
{ 
	char                                               IdentificationClassID;                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	AActor*                                            Actor;                                                      // 0x0008   (0x0008)  
	FVector                                            ActorLocation;                                              // 0x0010   (0x000C)  
	FVector                                            IdentificationLocation;                                     // 0x001C   (0x000C)  
	float                                              Distance;                                                   // 0x0028   (0x0004)  
	float                                              Condition;                                                  // 0x002C   (0x0004)  
	float                                              Energy;                                                     // 0x0030   (0x0004)  
	EWTLFaction                                        Faction;                                                    // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	int32_t                                            State;                                                      // 0x0038   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCheckpointState
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLCheckpointState
{ 
	EWTLFaction                                        ControlFaction;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FDateTime                                          LastHackTime;                                               // 0x0008   (0x0008)  
	FDateTime                                          TimeTillNextHack;                                           // 0x0010   (0x0008)  
};

/// Struct /Script/WTL.WTLIntruderInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLIntruderInfo
{ 
	uint64_t                                           CharacterID;                                                // 0x0000   (0x0008)  
	float                                              TimeLeft;                                                   // 0x0008   (0x0004)  
	bool                                               bIsKilled;                                                  // 0x000C   (0x0001)  
	bool                                               bIsLethal;                                                  // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLBackButtonAction
/// Size: 0x0118 (0x000000 - 0x000118)
struct FWTLBackButtonAction
{ 
	EWTLBackButtonActionType                           Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FWTLStoreItem                                      StoreItemData;                                              // 0x0008   (0x0108)  
	UWTLCommonStoreItem*                               StoreItem;                                                  // 0x0110   (0x0008)  
};

/// Struct /Script/WTL.WTLStoreItemTagMatchCount
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLStoreItemTagMatchCount
{ 
	UWTLCommonStoreItem*                               StoreItem;                                                  // 0x0000   (0x0008)  
	int32_t                                            TagMatchCount;                                              // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLDroneMarker
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLDroneMarker
{ 
	unsigned char                                      UnknownData00_1[0xC];                                       // 0x0000   (0x000C)  MISSED
};

/// Struct /Script/WTL.WTLControlledMonsterActionBase
/// Size: 0x0060 (0x000000 - 0x000060)
struct FWTLControlledMonsterActionBase
{ 
	bool                                               ExecutedWithoutAnimation;                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	UAnimSequenceBase*                                 Animation;                                                  // 0x0008   (0x0008)  
	TArray<FWTLNotificationForAction>                  NotificationList;                                           // 0x0010   (0x0010)  
	float                                              Cooldown;                                                   // 0x0020   (0x0004)  
	bool                                               IsInterrupted;                                              // 0x0024   (0x0001)  
	bool                                               IsRotateToSpringArm;                                        // 0x0025   (0x0001)  
	bool                                               IsAdditive;                                                 // 0x0026   (0x0001)  
	bool                                               IsUseServerSideAnimations;                                  // 0x0027   (0x0001)  
	float                                              StaminaCost;                                                // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        AbilityIcon;                                                // 0x0030   (0x0028)  
	FName                                              KeyName;                                                    // 0x0058   (0x0008)  
};

/// Struct /Script/WTL.WTLNotificationForAction
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLNotificationForAction
{ 
	float                                              Timeline;                                                   // 0x0000   (0x0004)  
	FName                                              ActionName;                                                 // 0x0004   (0x0008)  
	bool                                               IsDone;                                                     // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLDeminingCombinations
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLDeminingCombinations
{ 
	float                                              TotalTime;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<char>                                       Combinations;                                               // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLSenseEventInfo
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLSenseEventInfo
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
	AActor*                                            EventInstigator;                                            // 0x0008   (0x0008)  
	FVector                                            Location;                                                   // 0x0010   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	FDateTime                                          Time;                                                       // 0x0020   (0x0008)  
};

/// Struct /Script/WTL.WTLTaggedSenseEventInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLTaggedSenseEventInfo : FWTLSenseEventInfo
{ 
	FString                                            Tag;                                                        // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLFootstepSettings
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLFootstepSettings
{ 
	float                                              WalkFootstepMinInterval;                                    // 0x0000   (0x0004)  
	float                                              SprintFootstepMinInterval;                                  // 0x0004   (0x0004)  
	float                                              CrouchFootstepMinInterval;                                  // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLEnemyCurrentState
/// Size: 0x001E (0x000000 - 0x00001E)
struct FWTLEnemyCurrentState
{ 
	uint16_t                                           EnemyTypeID;                                                // 0x0000   (0x0002)  
	uint16_t                                           HeadClothesItemTypeID;                                      // 0x0002   (0x0002)  
	uint16_t                                           TorsoClothesItemTypeID;                                     // 0x0004   (0x0002)  
	uint16_t                                           LegsClothesItemTypeID;                                      // 0x0006   (0x0002)  
	uint16_t                                           FeetClothesItemTypeID;                                      // 0x0008   (0x0002)  
	uint16_t                                           FrontPlateTypeID;                                           // 0x000A   (0x0002)  
	uint16_t                                           BackPlateTypeID;                                            // 0x000C   (0x0002)  
	uint16_t                                           WeaponItemTypeID;                                           // 0x000E   (0x0002)  
	uint16_t                                           AmmoTypeID;                                                 // 0x0010   (0x0002)  
	char                                               HeadCustomizationIndex;                                     // 0x0012   (0x0001)  
	char                                               TorsoCustomizationIndex;                                    // 0x0013   (0x0001)  
	char                                               LegsCustomizationIndex;                                     // 0x0014   (0x0001)  
	char                                               FeetCustomizationIndex;                                     // 0x0015   (0x0001)  
	uint16_t                                           FirstNameIndex;                                             // 0x0016   (0x0002)  
	uint16_t                                           LastNameIndex;                                              // 0x0018   (0x0002)  
	char                                               Level;                                                      // 0x001A   (0x0001)  
	EWTLAITeam                                         Team;                                                       // 0x001B   (0x0001)  
	char                                               VoiceType;                                                  // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x001D   (0x0001)  MISSED
};

/// Struct /Script/WTL.WTLEnemyNPCSpawnerRecord
/// Size: 0x0038 (0x000000 - 0x000038)
struct FWTLEnemyNPCSpawnerRecord
{ 
	TWeakObjectPtr<UClass*>                            EnemyNPC;                                                   // 0x0000   (0x0028)  
	int32_t                                            MinCount;                                                   // 0x0028   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x002C   (0x0004)  
	char                                               MinLevel;                                                   // 0x0030   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLEventItemReward
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLEventItemReward
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0010   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0014   (0x0004)  
	float                                              Chance;                                                     // 0x0018   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x001C   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x0020   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0024   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0025   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0026   (0x0002)  MISSED
	FString                                            CustomizationName;                                          // 0x0028   (0x0010)  
	FString                                            ModificationData;                                           // 0x0038   (0x0010)  
	int32_t                                            SpecialItemGroup;                                           // 0x0048   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLEventTask
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLEventTask
{ 
	FText                                              Name;                                                       // 0x0000   (0x0018)  
	int32_t                                            NeedValue;                                                  // 0x0018   (0x0004)  
	int32_t                                            CurrentValue;                                               // 0x001C   (0x0004)  
};

/// Struct /Script/WTL.WTLFishingCharacterHistory
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLFishingCharacterHistory
{ 
	uint64_t                                           CharacterID;                                                // 0x0000   (0x0008)  
	int32_t                                            SuccessTakeCount;                                           // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	FDateTime                                          FishingTimeStart;                                           // 0x0010   (0x0008)  
};

/// Struct /Script/WTL.WTLFishingCharacter
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLFishingCharacter
{ 
	AWTLCharacter*                                     Character;                                                  // 0x0000   (0x0008)  
	FWTLItem                                           CurrentBait;                                                // 0x0008   (0x0008)  
	FDateTime                                          NextBiteTime;                                               // 0x0010   (0x0008)  
	int32_t                                            CurrentFishIndex;                                           // 0x0018   (0x0004)  
	char                                               CurrentQTEDifficulty;                                       // 0x001C   (0x0001)  
	char                                               CurrentQTEErrorsCount;                                      // 0x001D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x001E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLFortificationReward
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLFortificationReward
{ 
	int32_t                                            Score;                                                      // 0x0000   (0x0004)  
	int32_t                                            LootBoxID;                                                  // 0x0004   (0x0004)  
	int32_t                                            MoneyReward;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLMarkerInfo
/// Size: 0x0070 (0x000000 - 0x000070)
struct FWTLMarkerInfo
{ 
	EWTLMarkerType                                     Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        MarkerTexture;                                              // 0x0008   (0x0028)  
	FColor                                             IconColor;                                                  // 0x0030   (0x0004)  
	FColor                                             TextColor;                                                  // 0x0034   (0x0004)  
	FVector2D                                          AdditionalScale;                                            // 0x0038   (0x0008)  
	float                                              LifeTime;                                                   // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	TWeakObjectPtr<UCurveFloat*>                       AlphaCurve;                                                 // 0x0048   (0x0028)  
};

/// Struct /Script/WTL.WTLKnifeImpactEffect
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLKnifeImpactEffect
{ 
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UParticleSystem*>                   ParticleSystem;                                             // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SoundEvent;                                                 // 0x0030   (0x0028)  
	TArray<UMaterialInstance*>                         HitDecals;                                                  // 0x0058   (0x0010)  
	FVector                                            HitDecalScale;                                              // 0x0068   (0x000C)  
	float                                              HitDecalLifeSpan;                                           // 0x0074   (0x0004)  
};

/// Struct /Script/WTL.WTLVoiceDataPacket
/// Size: 0x1688 (0x000000 - 0x001688)
struct FWTLVoiceDataPacket
{ 
	FDateTime                                          ReceiveTime;                                                // 0x0000   (0x0008)  
	char                                               Data;                                                       // 0x0008   (0x1680)  
};

/// Struct /Script/WTL.WTLCharacterDamageEffect
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCharacterDamageEffect
{ 
	TWeakObjectPtr<UFMODEvent*>                        SoundEvent;                                                 // 0x0000   (0x0028)  
	float                                              HealthPercent;                                              // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLBulletFlyNearEffect
/// Size: 0x0060 (0x000000 - 0x000060)
struct FWTLBulletFlyNearEffect
{ 
	EWTLCaliber                                        Caliber;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        FlyNearSoundEvent;                                          // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        CharacterFearSoundEvent;                                    // 0x0030   (0x0028)  
	float                                              FringeAmount;                                               // 0x0058   (0x0004)  
	float                                              VingetteAmount;                                             // 0x005C   (0x0004)  
};

/// Struct /Script/WTL.WTLFootstepEffect
/// Size: 0x0080 (0x000000 - 0x000080)
struct FWTLFootstepEffect
{ 
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        SoundEvent;                                                 // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        AlternativeSoundEvent;                                      // 0x0030   (0x0028)  
	TWeakObjectPtr<UParticleSystem*>                   ParticleSystem;                                             // 0x0058   (0x0028)  
};

/// Struct /Script/WTL.WTLBulletImpactEffect
/// Size: 0x0098 (0x000000 - 0x000098)
struct FWTLBulletImpactEffect
{ 
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UParticleSystem*>                   ParticleSystem;                                             // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SoundEvent;                                                 // 0x0030   (0x0028)  
	TArray<UMaterialInstance*>                         HitDecals;                                                  // 0x0058   (0x0010)  
	FVector                                            HitDecalScale;                                              // 0x0068   (0x000C)  
	float                                              HitDecalLifeSpan;                                           // 0x0074   (0x0004)  
	TArray<UMaterialInstance*>                         RicochetDecals;                                             // 0x0078   (0x0010)  
	FVector                                            RicochetDecalScale;                                         // 0x0088   (0x000C)  
	float                                              RicochetDecalLifeSpan;                                      // 0x0094   (0x0004)  
};

/// Struct /Script/WTL.RespawnQueryElement
/// Size: 0x0010 (0x000000 - 0x000010)
struct FRespawnQueryElement
{ 
	FDateTime                                          RespawnTime;                                                // 0x0000   (0x0008)  
	APlayerController*                                 Controller;                                                 // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLLootBoxTypeImage
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLLootBoxTypeImage
{ 
	EWTLLootBoxType                                    Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLCharacterClass
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLCharacterClass
{ 
	EWTLCharacterClass                                 Class;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        FemaleTexture;                                              // 0x0008   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MaleTexture;                                                // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLQuestFactionSetting
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLQuestFactionSetting
{ 
	FSlateColor                                        FactionNameColor;                                           // 0x0000   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        FactionTexture;                                             // 0x0028   (0x0028)  
};

/// Struct /Script/WTL.WTLServerEventTypeColor
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLServerEventTypeColor
{ 
	EWTLServerEventType                                Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       Color;                                                      // 0x0004   (0x0010)  
};

/// Struct /Script/WTL.WTLInteractivePlanSpawnFieldPoint
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLInteractivePlanSpawnFieldPoint
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
};

/// Struct /Script/WTL.WTLHitPointInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLHitPointInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
};

/// Struct /Script/WTL.WTLInteractivePlantSpawnInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLInteractivePlantSpawnInfo
{ 
	int32_t                                            MaxCount;                                                   // 0x0000   (0x0004)  
	float                                              Chance;                                                     // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLPickupSpawnPointScalabilitySettings
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLPickupSpawnPointScalabilitySettings
{ 
	bool                                               bUseScalabilitySettings;                                    // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_4[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            InitialMaxCount;                                            // 0x0004   (0x0004)  
	int32_t                                            InitialCountLimit;                                          // 0x0008   (0x0004)  
	float                                              MaxCountDeltaPerPlayer;                                     // 0x000C   (0x0004)  
	float                                              CountLimitDeltaPerPlayer;                                   // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLLocalizationCacheRecord
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLLocalizationCacheRecord
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            Description;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLJunkMachineBundleData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLJunkMachineBundleData
{ 
	TArray<FWTLJunkMachineItemsData>                   Items;                                                      // 0x0000   (0x0010)  
	float                                              Chance;                                                     // 0x0010   (0x0004)  
	float                                              AdditionalChanceValue;                                      // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLJunkMachineItemsData
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLJunkMachineItemsData
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0010   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x0014   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0018   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x001C   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0020   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0022   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0028   (0x0010)  
	FString                                            ModificationData;                                           // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLDelayedSpawnActorInfo
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLDelayedSpawnActorInfo
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FVector                                            Location;                                                   // 0x0004   (0x000C)  
	TWeakObjectPtr<UClass*>                            ActorToSpawn;                                               // 0x0010   (0x0028)  
	APawn*                                             Instigator;                                                 // 0x0038   (0x0008)  
	AActor*                                            Owner;                                                      // 0x0040   (0x0008)  
};

/// Struct /Script/WTL.WTLDelayedDamageInfo
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLDelayedDamageInfo
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              DamageValue;                                                // 0x0004   (0x0004)  
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	float                                              Radius;                                                     // 0x0014   (0x0004)  
	TArray<AActor*>                                    IgnoredActors;                                              // 0x0018   (0x0010)  
	AWTLPlayerController*                              Instigator;                                                 // 0x0028   (0x0008)  
	TWeakObjectPtr<UClass*>                            ActorToSpawn;                                               // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLChunk
/// Size: 0x0054 (0x000000 - 0x000054)
struct FWTLChunk
{ 
	FIntVector                                         Position;                                                   // 0x0000   (0x000C)  
	int32_t                                            ID;                                                         // 0x000C   (0x0004)  
	int8_t                                             StateUpdate;                                                // 0x0010   (0x0001)  
	int8_t                                             Map;                                                        // 0x0011   (0x0040)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0051   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLMiningSpotResource
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLMiningSpotResource
{ 
	uint16_t                                           ResourceID;                                                 // 0x0000   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              MiningChance;                                               // 0x0004   (0x0004)  
	float                                              CapacityCostPerUnit;                                        // 0x0008   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x000C   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x0010   (0x0004)  
	int32_t                                            MinMiningExperience;                                        // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLMiningZoneItem
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLMiningZoneItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	float                                              NormalMiningChance;                                         // 0x0004   (0x0004)  
	TArray<FWTLQuestMiningChance>                      QuestMiningChances;                                         // 0x0008   (0x0010)  
	float                                              MinSignalPower;                                             // 0x0018   (0x0004)  
	float                                              CapacityCostPerUnit;                                        // 0x001C   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0020   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x0024   (0x0004)  
	bool                                               CanBeDetectedWithNDPDetector;                               // 0x0028   (0x0001)  
	bool                                               CanBeDetectedWithMetalDetector;                             // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLQuestMiningChance
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLQuestMiningChance
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	float                                              Chance;                                                     // 0x0004   (0x0004)  
	bool                                               CompleteQuestOnSuccess;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLMissileWeaponBeamSection
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLMissileWeaponBeamSection
{ 
	int32_t                                            TrajectoryID;                                               // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	UParticleSystemComponent*                          ParticleComponent;                                          // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLMonsterDeathData
/// Size: 0x0024 (0x000000 - 0x000024)
struct FWTLMonsterDeathData
{ 
	bool                                               IsBustServer;                                               // 0x0000   (0x0001)  
	char                                               PercentDamage;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	FVector                                            VectorDamage;                                               // 0x0004   (0x000C)  
	float                                              AmmoPhysicsImpulse;                                         // 0x0010   (0x0004)  
	float                                              KillingDamage;                                              // 0x0014   (0x0004)  
	int32_t                                            DirectionDeathID;                                           // 0x0018   (0x0004)  
	char                                               ProjectileCount;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              LifeSpan;                                                   // 0x0020   (0x0004)  
};

/// Struct /Script/WTL.WTLMonsterActionBase
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLMonsterActionBase
{ 
	UAnimSequenceBase*                                 Animation;                                                  // 0x0000   (0x0008)  
	float                                              Cooldown;                                                   // 0x0008   (0x0004)  
	bool                                               IsBlockingMovement;                                         // 0x000C   (0x0001)  
	bool                                               IsInterrupted;                                              // 0x000D   (0x0001)  
	bool                                               IsAdditive;                                                 // 0x000E   (0x0001)  
	bool                                               IsUseServerSideAnimations;                                  // 0x000F   (0x0001)  
	float                                              StaminaCost;                                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	TWeakObjectPtr<UTexture2D*>                        AbilityIcon;                                                // 0x0018   (0x0028)  
	EWTLControlledActionKeyType                        ActionKey;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLMonstersDataForSpawnBase
/// Size: 0x0038 (0x000000 - 0x000038)
struct FWTLMonstersDataForSpawnBase
{ 
	TArray<UClass*>                                    SpawnClass;                                                 // 0x0000   (0x0010)  
	float                                              LifeTimeMonster;                                            // 0x0010   (0x0004)  
	bool                                               IsRandomSelectionClass;                                     // 0x0014   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	int32_t                                            CountOfActiveMonsters;                                      // 0x0018   (0x0004)  
	float                                              IntervalSpawn;                                              // 0x001C   (0x0004)  
	char                                               MinLevel;                                                   // 0x0020   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0022   (0x0002)  MISSED
	float                                              SpawnRadius;                                                // 0x0024   (0x0004)  
	bool                                               IsLimitMonsterSpawning;                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            MonstersLimit;                                              // 0x002C   (0x0004)  
	float                                              LifeTimeSpawn;                                              // 0x0030   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLNPCFactionClothesInfo
/// Size: 0x0140 (0x000000 - 0x000140)
struct FWTLNPCFactionClothesInfo
{ 
	TWeakObjectPtr<USkeletalMesh*>                     HeadMesh;                                                   // 0x0000   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     HeadSlotMesh;                                               // 0x0028   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     TorsoMesh;                                                  // 0x0050   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     TorsoSlotMesh;                                              // 0x0078   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     LegsMesh;                                                   // 0x00A0   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     LegsSlotMesh;                                               // 0x00C8   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FeetMesh;                                                   // 0x00F0   (0x0028)  
	TWeakObjectPtr<USkeletalMesh*>                     FeetSlotMesh;                                               // 0x0118   (0x0028)  
};

/// Struct /Script/WTL.WTLNPCAnimationInfo
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLNPCAnimationInfo
{ 
	UAnimMontage*                                      Montage;                                                    // 0x0000   (0x0008)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              BlendIn;                                                    // 0x000C   (0x0004)  
	float                                              BlendOut;                                                   // 0x0010   (0x0004)  
	float                                              MinTimeoutToPlayingNextMontage;                             // 0x0014   (0x0004)  
	float                                              MaxTimeoutToPlayingNextMontage;                             // 0x0018   (0x0004)  
	bool                                               NeedToTurnHeadToCharacter;                                  // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLNPCSupply
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLNPCSupply
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	int32_t                                            RequiredQuestStates;                                        // 0x0004   (0x0004)  
	TArray<FWTLNPCSupplyItem>                          Items;                                                      // 0x0008   (0x0010)  
	int32_t                                            SupplyListReplicaID;                                        // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLNPCSupplyItem
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLNPCSupplyItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	float                                              BasePriceMultiplier;                                        // 0x0008   (0x0004)  
	float                                              ExperienceMultiplier;                                       // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLNPCIdleAnimation
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLNPCIdleAnimation
{ 
	UAnimMontage*                                      AnimMontage;                                                // 0x0000   (0x0008)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              Chance;                                                     // 0x000C   (0x0004)  
	float                                              MinChangeDelay;                                             // 0x0010   (0x0004)  
	float                                              MaxChangeDelay;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLQuestReplicas
/// Size: 0x0100 (0x000000 - 0x000100)
struct FWTLQuestReplicas
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	int32_t                                            InfoReplicaID;                                              // 0x0004   (0x0004)  
	int32_t                                            DescriptionReplicaID;                                       // 0x0008   (0x0004)  
	int32_t                                            CharacterReplicaID;                                         // 0x000C   (0x0004)  
	int32_t                                            DescriptionReplicaIDRepeatable;                             // 0x0010   (0x0004)  
	int32_t                                            CharacterReplicaIDRepeatable;                               // 0x0014   (0x0004)  
	int32_t                                            TakeReplicaID;                                              // 0x0018   (0x0004)  
	EWTLNPCReplicaAction                               ActionTakeQuest;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x001D   (0x0003)  MISSED
	int32_t                                            CompleteReplicaID;                                          // 0x0020   (0x0004)  
	EWTLNPCReplicaAction                               ActionCompleteQuest;                                        // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0025   (0x0003)  MISSED
	int32_t                                            CancelReplicaID;                                            // 0x0028   (0x0004)  
	EWTLNPCReplicaAction                               ActionRejectQuest;                                          // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FWTLReplicaNPCTakeCompleteQuest                    ReplicaNPCTakeCompleteQuest;                                // 0x0030   (0x0028)  
	FWTLReplicaGreetingNpcFromStateQuest               ReplicaGreetingNpcFromStateQuest;                           // 0x0058   (0x0048)  
	EWTLNPCReplicaAction                               ActionGreetingCanTakeQuest;                                 // 0x00A0   (0x0001)  
	EWTLNPCReplicaAction                               ActionGreetingQuestInProgress;                              // 0x00A1   (0x0001)  
	EWTLNPCReplicaAction                               ActionGreetingCanCompleteQuest;                             // 0x00A2   (0x0001)  
	EWTLNPCReplicaAction                               ActionGreetingCanReTakeQuest;                               // 0x00A3   (0x0001)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TArray<FWTLQuestDialogReplicaInfo>                 DialogReplicaArray;                                         // 0x00A8   (0x0010)  
	FWTLQuestConditionToExecute                        QuestConditionToExecute;                                    // 0x00B8   (0x0048)  
};

/// Struct /Script/WTL.WTLQuestConditionToExecute
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLQuestConditionToExecute
{ 
	int32_t                                            NeedSlots;                                                  // 0x0000   (0x0004)  
	int32_t                                            NPCReplicaIDSlot;                                           // 0x0004   (0x0004)  
	TArray<int32_t>                                    CharacterReplicaArraySlot;                                  // 0x0008   (0x0010)  
	int32_t                                            NeedWeight;                                                 // 0x0018   (0x0004)  
	int32_t                                            NPCReplicaIDWeight;                                         // 0x001C   (0x0004)  
	TArray<int32_t>                                    CharacterReplicaArrayWeight;                                // 0x0020   (0x0010)  
	int32_t                                            NeedMoney;                                                  // 0x0030   (0x0004)  
	int32_t                                            NPCReplicaIDMoney;                                          // 0x0034   (0x0004)  
	TArray<int32_t>                                    CharacterReplicaArrayMoney;                                 // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLQuestDialogReplicaInfo
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLQuestDialogReplicaInfo
{ 
	int32_t                                            CharacterReplicaID;                                         // 0x0000   (0x0004)  
	int32_t                                            NPCReplicaID;                                               // 0x0004   (0x0004)  
	TArray<int32_t>                                    CharacterReplyReplicaArray;                                 // 0x0008   (0x0010)  
	FString                                            Exec;                                                       // 0x0018   (0x0010)  
};

/// Struct /Script/WTL.WTLReplicaGreetingNpcFromStateQuest
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLReplicaGreetingNpcFromStateQuest
{ 
	int32_t                                            NPCReplicaIDQuestNone;                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    CharacterReplicaIDQuestNone;                                // 0x0008   (0x0010)  
	int32_t                                            NPCReplicaIDQuestInProgress;                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<int32_t>                                    CharacterReplicaIDQuestInProgress;                          // 0x0020   (0x0010)  
	int32_t                                            NPCReplicaIDQuestComplete;                                  // 0x0030   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<int32_t>                                    CharacterReplicaIDQuestComplete;                            // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLReplicaNPCTakeCompleteQuest
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLReplicaNPCTakeCompleteQuest
{ 
	int32_t                                            NPCReplicaIDTakeQuest;                                      // 0x0000   (0x0004)  
	int32_t                                            NPCReplicaIDCompleteQuest;                                  // 0x0004   (0x0004)  
	TArray<int32_t>                                    CharacterReplicaIDTakeQuest;                                // 0x0008   (0x0010)  
	TArray<int32_t>                                    CharacterReplicaIDCompleteQuest;                            // 0x0018   (0x0010)  
};

/// Struct /Script/WTL.WTLSteamItemInfo
/// Size: 0x0070 (0x000000 - 0x000070)
struct FWTLSteamItemInfo
{ 
	uint64_t                                           accountid;                                                  // 0x0000   (0x0008)  
	uint64_t                                           ItemId;                                                     // 0x0008   (0x0008)  
	uint16_t                                           quantity;                                                   // 0x0010   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0012   (0x0006)  MISSED
	uint64_t                                           originalitemid;                                             // 0x0018   (0x0008)  
	uint64_t                                           itemdefid;                                                  // 0x0020   (0x0008)  
	int32_t                                            appid;                                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            acquired;                                                   // 0x0030   (0x0010)  
	FString                                            State;                                                      // 0x0040   (0x0010)  
	FString                                            Origin;                                                     // 0x0050   (0x0010)  
	FString                                            state_changed_timestamp;                                    // 0x0060   (0x0010)  
};

/// Struct /Script/WTL.WTLSteamInventoryRequest
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLSteamInventoryRequest
{ 
	uint64_t                                           SteamID;                                                    // 0x0000   (0x0008)  
	uint64_t                                           RequestID;                                                  // 0x0008   (0x0008)  
	uint64_t                                           ItemId;                                                     // 0x0010   (0x0008)  
	uint64_t                                           itemdefid;                                                  // 0x0018   (0x0008)  
};

/// Struct /Script/WTL.WTLTakeItemInfo
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLTakeItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLReplica
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLReplica
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FText                                              Text;                                                       // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLQuestInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLQuestInfo
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	EWTLCharacterCanTakeCompleteQuest                  CanTakeCompleteQuest;                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLPDACustomization
/// Size: 0x0770 (0x000000 - 0x000770)
struct FWTLPDACustomization
{ 
	UTexture2D*                                        BackgroundImage;                                            // 0x0000   (0x0008)  
	FButtonStyle                                       ButtonUPStyle;                                              // 0x0008   (0x0278)  
	FButtonStyle                                       ButtonDownStyle;                                            // 0x0280   (0x0278)  
	FButtonStyle                                       ButtonCircleStyle;                                          // 0x04F8   (0x0278)  
};

/// Struct /Script/WTL.WTLPDASkillConnectorData
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLPDASkillConnectorData
{ 
	TArray<int32_t>                                    SkillIDs;                                                   // 0x0000   (0x0010)  
	TArray<FName>                                      BorderNames;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLMapCacheData
/// Size: 0x0100 (0x000000 - 0x000100)
struct FWTLMapCacheData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
	TArray<AWTLPortal*>                                m_Portals;                                                  // 0x0008   (0x0010)  
	FDateTime                                          m_PortalsTime;                                              // 0x0018   (0x0008)  
	TArray<AWTLWaterSource*>                           m_WaterSources;                                             // 0x0020   (0x0010)  
	FDateTime                                          m_WaterSourcesTime;                                         // 0x0030   (0x0008)  
	TArray<AWTLNPCActor*>                              m_NPCs;                                                     // 0x0038   (0x0010)  
	FDateTime                                          m_NPCsTime;                                                 // 0x0048   (0x0008)  
	TArray<AWTLFortificationCommandCore*>              m_FortificationCommandCores;                                // 0x0050   (0x0010)  
	FDateTime                                          m_FortificationCommandCoresTime;                            // 0x0060   (0x0008)  
	TArray<AWTLBulletinBoard*>                         m_BulletinBoards;                                           // 0x0068   (0x0010)  
	FDateTime                                          m_BulletinBoardsTime;                                       // 0x0078   (0x0008)  
	TArray<AWTLEventPoint*>                            m_EventPoints;                                              // 0x0080   (0x0010)  
	FDateTime                                          m_EventPointsTime;                                          // 0x0090   (0x0008)  
	TArray<AWTLSafeZone*>                              m_SafeZones;                                                // 0x0098   (0x0010)  
	FDateTime                                          m_SafeZonesTime;                                            // 0x00A8   (0x0008)  
	TArray<FWTLMapCacheMonster>                        m_Monsters;                                                 // 0x00B0   (0x0010)  
	FDateTime                                          m_MonstersTime;                                             // 0x00C0   (0x0008)  
	FVector                                            m_MonstersLocation;                                         // 0x00C8   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x00D4   (0x0004)  MISSED
	TArray<FWTLMapCacheCharacter>                      m_Characters;                                               // 0x00D8   (0x0010)  
	FDateTime                                          m_CharactersTime;                                           // 0x00E8   (0x0008)  
	FVector                                            m_CharactersLocation;                                       // 0x00F0   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMapCacheCharacter
/// Size: 0x0038 (0x000000 - 0x000038)
struct FWTLMapCacheCharacter
{ 
	AWTLCharacter*                                     Character;                                                  // 0x0000   (0x0008)  
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0018   (0x0008)  
	FString                                            CharacterName;                                              // 0x0020   (0x0010)  
	int32_t                                            ClanID;                                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMapCacheMonster
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLMapCacheMonster
{ 
	AWTLMonsterPawn*                                   Monster;                                                    // 0x0000   (0x0008)  
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	float                                              Distance;                                                   // 0x0014   (0x0004)  
	uint16_t                                           MonsterID;                                                  // 0x0018   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLDamageActorInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLDamageActorInfo
{ 
	AActor*                                            Actor;                                                      // 0x0000   (0x0008)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
	bool                                               Critical;                                                   // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLCharacterInventoryDeltaRecord
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLCharacterInventoryDeltaRecord
{ 
	char                                               RecordType;                                                 // 0x0000   (0x0001)  
	EWTLItemType                                       ItemType;                                                   // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<char>                                       ItemData;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterCustomizationPackedRecord
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLCharacterCustomizationPackedRecord
{ 
	EWTLCharacterCustomizationPart                     PartType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           PartID;                                                     // 0x0002   (0x0002)  
	FWTLMaterialPackedParameters                       MaterialParameters0;                                        // 0x0004   (0x0014)  
	FWTLMaterialPackedParameters                       MaterialParameters1;                                        // 0x0018   (0x0014)  
	FWTLMaterialPackedParameters                       MaterialParameters2;                                        // 0x002C   (0x0014)  
};

/// Struct /Script/WTL.WTLMaterialPackedParameters
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLMaterialPackedParameters
{ 
	FColor                                             Color0;                                                     // 0x0000   (0x0004)  
	FColor                                             Color1;                                                     // 0x0004   (0x0004)  
	FColor                                             Color2;                                                     // 0x0008   (0x0004)  
	FColor                                             Color3;                                                     // 0x000C   (0x0004)  
	char                                               Scalar0;                                                    // 0x0010   (0x0001)  
	char                                               Scalar1;                                                    // 0x0011   (0x0001)  
	char                                               Scalar2;                                                    // 0x0012   (0x0001)  
	char                                               Scalar3;                                                    // 0x0013   (0x0001)  
};

/// Struct /Script/WTL.WTLFastAccessSlotItemInfoArray
/// Size: 0x0010 (0x000108 - 0x000118)
struct FWTLFastAccessSlotItemInfoArray : FFastArraySerializer
{ 
	TArray<FWTLFastAccessSlotItemInfo_FastArraySerializerItem> Items;                                              // 0x0108   (0x0010)  
};

/// Struct /Script/WTL.WTLFastAccessSlotItemInfo_FastArraySerializerItem
/// Size: 0x000C (0x00000C - 0x000018)
struct FWTLFastAccessSlotItemInfo_FastArraySerializerItem : FFastArraySerializerItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x000D   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x000E   (0x0002)  
	uint16_t                                           ScopeAttachmentTypeID;                                      // 0x0010   (0x0002)  
	uint16_t                                           FlashlightAttachmentTypeID;                                 // 0x0012   (0x0002)  
	uint16_t                                           MuzzleAttachmentTypeID;                                     // 0x0014   (0x0002)  
	char                                               CustomizationScalar;                                        // 0x0016   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0017   (0x0001)  
};

/// Struct /Script/WTL.WTLCharacterItemExperienceFastArray
/// Size: 0x0010 (0x000108 - 0x000118)
struct FWTLCharacterItemExperienceFastArray : FFastArraySerializer
{ 
	TArray<FWTLCharacterItemExperience_FastArraySerializerItem> Items;                                             // 0x0108   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterItemExperience_FastArraySerializerItem
/// Size: 0x0008 (0x00000C - 0x000014)
struct FWTLCharacterItemExperience_FastArraySerializerItem : FFastArraySerializerItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x000D   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x000E   (0x0002)  
	uint32_t                                           Experience;                                                 // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLCharacterQuestStateArray
/// Size: 0x0010 (0x000108 - 0x000118)
struct FWTLCharacterQuestStateArray : FFastArraySerializer
{ 
	TArray<FWTLCharacterQuestState_FastArraySerializerItem> Items;                                                 // 0x0108   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterQuestState_FastArraySerializerItem
/// Size: 0x001C (0x00000C - 0x000028)
struct FWTLCharacterQuestState_FastArraySerializerItem : FFastArraySerializerItem
{ 
	uint32_t                                           QuestID;                                                    // 0x000C   (0x0004)  
	EWTLQuestState                                     State;                                                      // 0x0010   (0x0001)  
	char                                               Progress1;                                                  // 0x0011   (0x0001)  
	char                                               Progress2;                                                  // 0x0012   (0x0001)  
	char                                               Progress3;                                                  // 0x0013   (0x0001)  
	char                                               Progress4;                                                  // 0x0014   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	FWTLDateTime                                       LastChangeDate;                                             // 0x0018   (0x0008)  
	bool                                               Active;                                                     // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterEffectArray
/// Size: 0x0010 (0x000108 - 0x000118)
struct FWTLCharacterEffectArray : FFastArraySerializer
{ 
	TArray<FWTLCharacterEffect_FastArraySerializerItem> Items;                                                     // 0x0108   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterEffect_FastArraySerializerItem
/// Size: 0x0008 (0x00000C - 0x000014)
struct FWTLCharacterEffect_FastArraySerializerItem : FFastArraySerializerItem
{ 
	EWTLCharacterEffectType                            Type;                                                       // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	float                                              Value;                                                      // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLCharacterMapMarkerArray
/// Size: 0x0010 (0x000108 - 0x000118)
struct FWTLCharacterMapMarkerArray : FFastArraySerializer
{ 
	TArray<FWTLDeprecatedCharacterMapMarker_FastArraySerializerItem> Items;                                        // 0x0108   (0x0010)  
};

/// Struct /Script/WTL.WTLDeprecatedCharacterMapMarker_FastArraySerializerItem
/// Size: 0x002C (0x00000C - 0x000038)
struct FWTLDeprecatedCharacterMapMarker_FastArraySerializerItem : FFastArraySerializerItem
{ 
	uint32_t                                           LocationID;                                                 // 0x000C   (0x0004)  
	char                                               Type;                                                       // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x0014   (0x000C)  
	FString                                            Name;                                                       // 0x0020   (0x0010)  
	bool                                               ShowOnMinimap;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLStimulatorEffect
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLStimulatorEffect
{ 
	TArray<FWTLMedicineEffect>                         MedicineEffects;                                            // 0x0000   (0x0010)  
	TArray<FWTLCharacterEffectInfluence>               CharacterEffects;                                           // 0x0010   (0x0010)  
	float                                              Duration;                                                   // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLPortalStationRequest
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLPortalStationRequest
{ 
	int32_t                                            WayIndex;                                                   // 0x0000   (0x0004)  
	float                                              LifeSpan;                                                   // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLPortalStationWay
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLPortalStationWay
{ 
	int32_t                                            LocationID;                                                 // 0x0000   (0x0004)  
	int32_t                                            PortalID;                                                   // 0x0004   (0x0004)  
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	bool                                               RouteIsAvailable;                                           // 0x0020   (0x0001)  
	char                                               MinCharacterLevel;                                          // 0x0021   (0x0001)  
	char                                               MaxCharacterLevel;                                          // 0x0022   (0x0001)  
	EWTLFaction                                        Faction;                                                    // 0x0023   (0x0001)  
	float                                              EnergyConsumptionMultiplier;                                // 0x0024   (0x0004)  
};

/// Struct /Script/WTL.WTLDedicatedServerMessage
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLDedicatedServerMessage : FWTLPacket
{ 
	uint32_t                                           LocationID;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            MessageType;                                                // 0x0030   (0x0010)  
	FString                                            MessageData;                                                // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLSentMailMessages
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLSentMailMessages : FWTLPacket
{ 
	TArray<FWTLSentMailPackageRecord>                  Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLSentMailPackageRecord
/// Size: 0x0048 (0x000028 - 0x000070)
struct FWTLSentMailPackageRecord : FWTLPacket
{ 
	FString                                            ToCharacterName;                                            // 0x0028   (0x0010)  
	FWTLDateTime                                       MailDate;                                                   // 0x0038   (0x0008)  
	FWTLDateTime                                       FactDeliveryDate;                                           // 0x0040   (0x0008)  
	EWTLMailPackageDeliveryType                        DeliveryType;                                               // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	uint32_t                                           TotalWeight;                                                // 0x004C   (0x0004)  
	uint32_t                                           TotalPrice;                                                 // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            MessageText;                                                // 0x0058   (0x0010)  
	EWTLMailPackageState                               State;                                                      // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLFactionLeaderborData
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLFactionLeaderborData : FWTLPacket
{ 
	EWTLFaction                                        Faction;                                                    // 0x0028   (0x0001)  
	char                                               Type;                                                       // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	TArray<FWTLFactionLeaderborRecord>                 Items;                                                      // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLFactionLeaderborRecord
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLFactionLeaderborRecord : FWTLPacket
{ 
	char                                               Position;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0030   (0x0008)  
	FString                                            Name;                                                       // 0x0038   (0x0010)  
	char                                               Level;                                                      // 0x0048   (0x0001)  
	EWTLCharacterClass                                 CharacterClass;                                             // 0x0049   (0x0001)  
	EWTLSex                                            Sex;                                                        // 0x004A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x004B   (0x0001)  MISSED
	uint16_t                                           ClanID;                                                     // 0x004C   (0x0002)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x004E   (0x0002)  MISSED
	int64_t                                            Score;                                                      // 0x0050   (0x0008)  
	int64_t                                            TotalScore;                                                 // 0x0058   (0x0008)  
};

/// Struct /Script/WTL.WTLEACMessage
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLEACMessage : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLBuyCreditsInfo
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLBuyCreditsInfo : FWTLPacket
{ 
	uint64_t                                           StoreItemID;                                                // 0x0028   (0x0008)  
	FString                                            Language;                                                   // 0x0030   (0x0010)  
	FString                                            Currency;                                                   // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLClanList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLClanList : FWTLPacket
{ 
	TArray<FWTLClanInfo>                               Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLClanInfo
/// Size: 0x0110 (0x000028 - 0x000138)
struct FWTLClanInfo : FWTLPacket
{ 
	uint16_t                                           ID;                                                         // 0x0028   (0x0002)  
	EWTLFaction                                        Faction;                                                    // 0x002A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x002B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	FString                                            Description;                                                // 0x0040   (0x0010)  
	int32_t                                            MemberCount;                                                // 0x0050   (0x0004)  
	int32_t                                            CandidateCount;                                             // 0x0054   (0x0004)  
	FString                                            LeaderName;                                                 // 0x0058   (0x0010)  
	FString                                            StewardName;                                                // 0x0068   (0x0010)  
	float                                              Reputation;                                                 // 0x0078   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x007C   (0x0004)  MISSED
	double                                             Score;                                                      // 0x0080   (0x0008)  
	char                                               Level;                                                      // 0x0088   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	int32_t                                            PVPScore;                                                   // 0x008C   (0x0004)  
	int32_t                                            PVEScore;                                                   // 0x0090   (0x0004)  
	int32_t                                            CraftScore;                                                 // 0x0094   (0x0004)  
	int32_t                                            TechnologyScore;                                            // 0x0098   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x009C   (0x0004)  MISSED
	TArray<char>                                       Skills;                                                     // 0x00A0   (0x0010)  
	unsigned char                                      UnknownData04_6[0x88];                                      // 0x00B0   (0x0088)  MISSED
};

/// Struct /Script/WTL.WTLClanPapameters
/// Size: 0x0088 (0x000000 - 0x000088)
struct FWTLClanPapameters
{ 
	unsigned char                                      UnknownData00_1[0x88];                                      // 0x0000   (0x0088)  MISSED
};

/// Struct /Script/WTL.WTLAccountCreditsChange
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLAccountCreditsChange : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	int32_t                                            CreditsAmount;                                              // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	FString                                            Info;                                                       // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLActivateCodeResult
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLActivateCodeResult : FWTLPacket
{ 
	bool                                               Success;                                                    // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	FString                                            Code;                                                       // 0x0030   (0x0010)  
	int32_t                                            CurrentBalance;                                             // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLInAppBuyResult
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLInAppBuyResult : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	bool                                               Success;                                                    // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FString                                            Info;                                                       // 0x0038   (0x0010)  
	int32_t                                            CurrentBalance;                                             // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	FWTLDateTime                                       PremiumEndTime;                                             // 0x0050   (0x0008)  
	char                                               CharacterSlotCount;                                         // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLStoreItemList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLStoreItemList : FWTLPacket
{ 
	TArray<FWTLStoreItem>                              Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLPutItemToAccountInventoryCommitRequest
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLPutItemToAccountInventoryCommitRequest : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	uint64_t                                           AccountInventoryID;                                         // 0x0030   (0x0008)  
	bool                                               Success;                                                    // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLPutItemToAccountInventoryResult
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLPutItemToAccountInventoryResult : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	uint64_t                                           AccountInventoryID;                                         // 0x0030   (0x0008)  
	EWTLItemType                                       ItemType;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0040   (0x0008)  
	int32_t                                            Count;                                                      // 0x0048   (0x0004)  
	bool                                               Success;                                                    // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLPutItemToAccountInventoryRequest
/// Size: 0x0070 (0x000028 - 0x000098)
struct FWTLPutItemToAccountInventoryRequest : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	EWTLItemType                                       ItemType;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0038   (0x0008)  
	FWTLAccountInventoryItem                           Item;                                                       // 0x0040   (0x0058)  
};

/// Struct /Script/WTL.WTLGetItemFromAccountInventoryResult
/// Size: 0x0068 (0x000028 - 0x000090)
struct FWTLGetItemFromAccountInventoryResult : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	bool                                               Success;                                                    // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FWTLAccountInventoryItem                           Item;                                                       // 0x0038   (0x0058)  
};

/// Struct /Script/WTL.WTLGetItemFromAccountInventoryInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLGetItemFromAccountInventoryInfo : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	uint64_t                                           AccountInventoryID;                                         // 0x0030   (0x0008)  
	int32_t                                            Count;                                                      // 0x0038   (0x0004)  
	bool                                               Success;                                                    // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLAccountInventoryItemList
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLAccountInventoryItemList : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	TArray<FWTLAccountInventoryItem>                   Items;                                                      // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLSteamInventoryItemList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLSteamInventoryItemList : FWTLPacket
{ 
	TArray<FWTLSteamInventoryItemDefinition>           Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLSteamInventoryItemDefinition
/// Size: 0x0040 (0x000028 - 0x000068)
struct FWTLSteamInventoryItemDefinition : FWTLPacket
{ 
	uint64_t                                           itemdefid;                                                  // 0x0028   (0x0008)  
	int32_t                                            MoneyAmount;                                                // 0x0030   (0x0004)  
	int32_t                                            CreditsAmount;                                              // 0x0034   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0039   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x003A   (0x0002)  
	int32_t                                            Count;                                                      // 0x003C   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0040   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0044   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0045   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0046   (0x0002)  MISSED
	FString                                            CustomizationName;                                          // 0x0048   (0x0010)  
	FString                                            ModificationData;                                           // 0x0058   (0x0010)  
};

/// Struct /Script/WTL.WTLClanScoreStatistics
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLClanScoreStatistics : FWTLPacket
{ 
	TArray<FWTLClanScoreStatisticsRecord>              Records;                                                    // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLClanScoreStatisticsRecord
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLClanScoreStatisticsRecord : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	FString                                            CharacterName;                                              // 0x0030   (0x0010)  
	int32_t                                            PVPScore;                                                   // 0x0040   (0x0004)  
	int32_t                                            PVEScore;                                                   // 0x0044   (0x0004)  
	int32_t                                            CraftScore;                                                 // 0x0048   (0x0004)  
	int32_t                                            TechnologyScore;                                            // 0x004C   (0x0004)  
};

/// Struct /Script/WTL.WTLDateTimePeriod
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLDateTimePeriod : FWTLPacket
{ 
	FWTLDateTime                                       Start;                                                      // 0x0028   (0x0008)  
	FWTLDateTime                                       End;                                                        // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLNewCharacterMailMessage
/// Size: 0x0078 (0x000028 - 0x0000A0)
struct FWTLNewCharacterMailMessage : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	FWTLCharacterMailMessage                           Message;                                                    // 0x0030   (0x0070)  
};

/// Struct /Script/WTL.WTLCharacterMailMessage
/// Size: 0x0048 (0x000028 - 0x000070)
struct FWTLCharacterMailMessage : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	bool                                               Read;                                                       // 0x0030   (0x0001)  
	char                                               Priority;                                                   // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	FWTLDateTime                                       Date;                                                       // 0x0038   (0x0008)  
	FString                                            From;                                                       // 0x0040   (0x0010)  
	FString                                            Subject;                                                    // 0x0050   (0x0010)  
	FString                                            Text;                                                       // 0x0060   (0x0010)  
};

/// Struct /Script/WTL.WTLClanActionLogPage
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLClanActionLogPage : FWTLPacket
{ 
	int32_t                                            RecordsPerPage;                                             // 0x0028   (0x0004)  
	int32_t                                            PageIndex;                                                  // 0x002C   (0x0004)  
	TArray<FWTLClanActionLogRecord>                    Records;                                                    // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLClanActionLogRecord
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLClanActionLogRecord : FWTLPacket
{ 
	FWTLDateTime                                       EventDate;                                                  // 0x0028   (0x0008)  
	EWTLClanActionLogRecordType                        Type;                                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0038   (0x0008)  
	FString                                            CharacterName;                                              // 0x0040   (0x0010)  
	uint64_t                                           InstigatorCharacterID;                                      // 0x0050   (0x0008)  
	FString                                            InstigatorCharacterName;                                    // 0x0058   (0x0010)  
	FString                                            Info;                                                       // 0x0068   (0x0010)  
};

/// Struct /Script/WTL.WTLClanScoreLogPage
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLClanScoreLogPage : FWTLPacket
{ 
	int32_t                                            RecordsPerPage;                                             // 0x0028   (0x0004)  
	int32_t                                            PageIndex;                                                  // 0x002C   (0x0004)  
	TArray<FWTLClanScoreLogRecord>                     Records;                                                    // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLClanScoreLogRecord
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLClanScoreLogRecord : FWTLPacket
{ 
	FWTLDateTime                                       EventDate;                                                  // 0x0028   (0x0008)  
	EWTLClanScoreLogRecordType                         Type;                                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            PVPScoreDelta;                                              // 0x0034   (0x0004)  
	int32_t                                            PVEScoreDelta;                                              // 0x0038   (0x0004)  
	int32_t                                            CraftScoreDelta;                                            // 0x003C   (0x0004)  
	int32_t                                            TechnologyScoreDelta;                                       // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0048   (0x0008)  
	FString                                            CharacterName;                                              // 0x0050   (0x0010)  
};

/// Struct /Script/WTL.WTLInAppPurchase
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLInAppPurchase : FWTLPacket
{ 
	TArray<FWTLInAppPurchaseItem>                      Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLInAppPurchaseItem
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLInAppPurchaseItem : FWTLPacket
{ 
	uint64_t                                           StoreItemID;                                                // 0x0028   (0x0008)  
	float                                              Price;                                                      // 0x0030   (0x0004)  
	int32_t                                            Count;                                                      // 0x0034   (0x0004)  
};

/// Struct /Script/WTL.WTLAchievementsPercentageList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLAchievementsPercentageList : FWTLPacket
{ 
	TArray<FWTLAchievementsPercentage>                 Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLAchievementsPercentage
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLAchievementsPercentage : FWTLPacket
{ 
	uint16_t                                           AchievementID;                                              // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	float                                              Percent;                                                    // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLAccountAchievementsAndStats
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLAccountAchievementsAndStats : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	TArray<FWTLIdentity16>                             Achievements;                                               // 0x0030   (0x0010)  
	TArray<FWTLStatisticsValue>                        StatisticsValues;                                           // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLStatisticsValue
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLStatisticsValue : FWTLPacket
{ 
	uint16_t                                           ParameterID;                                                // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           Value;                                                      // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentity16
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentity16 : FWTLPacket
{ 
	uint16_t                                           Value;                                                      // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLAccountAchievementsList
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLAccountAchievementsList : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	TArray<FWTLIdentity16>                             Items;                                                      // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLTriggerAccountAchievementInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLTriggerAccountAchievementInfo : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	uint16_t                                           AchievementID;                                              // 0x0030   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLAccountStatisticsValueDelta
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLAccountStatisticsValueDelta : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	uint16_t                                           ParameterID;                                                // 0x0030   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0032   (0x0002)  MISSED
	uint32_t                                           Delta;                                                      // 0x0034   (0x0004)  
};

/// Struct /Script/WTL.WTLFactionLeaderRecord
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLFactionLeaderRecord : FWTLPacket
{ 
	EWTLFaction                                        Faction;                                                    // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0030   (0x0008)  
	FString                                            CharacterName;                                              // 0x0038   (0x0010)  
	uint16_t                                           ClanID;                                                     // 0x0048   (0x0002)  
	EWTLCharacterClass                                 ClassID;                                                    // 0x004A   (0x0001)  
	char                                               Level;                                                      // 0x004B   (0x0001)  
	char                                               Rank;                                                       // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	uint64_t                                           Score;                                                      // 0x0050   (0x0008)  
};

/// Struct /Script/WTL.WTLCharacterClanInfo
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLCharacterClanInfo : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	FString                                            CharacterName;                                              // 0x0030   (0x0010)  
	uint16_t                                           ClanID;                                                     // 0x0040   (0x0002)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x0042   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x0043   (0x0005)  MISSED
	uint64_t                                           ClanPolicyGroupID;                                          // 0x0048   (0x0008)  
};

/// Struct /Script/WTL.WTLCharacterFactionInfo
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLCharacterFactionInfo : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	EWTLFaction                                        Faction;                                                    // 0x0030   (0x0001)  
	char                                               Reputation;                                                 // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	uint64_t                                           Score;                                                      // 0x0038   (0x0008)  
	char                                               Rank;                                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterCustomizationItemRecord
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLCharacterCustomizationItemRecord : FWTLPacket
{ 
	int32_t                                            ID;                                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	uint64_t                                           StoreItemID;                                                // 0x0030   (0x0008)  
	TArray<FWTLIdentity32>                             RequiredSteamDLC;                                           // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLIdentity32
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentity32 : FWTLPacket
{ 
	uint32_t                                           Value;                                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCharacterContactRecord
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLCharacterContactRecord : FWTLPacket
{ 
	EWTLCharacterContactType                           Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0030   (0x0008)  
	FString                                            CharacterName;                                              // 0x0038   (0x0010)  
	FString                                            Description;                                                // 0x0048   (0x0010)  
};

/// Struct /Script/WTL.WTLCheaterReport
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLCheaterReport : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLAnticheatResponse
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLAnticheatResponse : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLAuthorization
/// Size: 0x0058 (0x000028 - 0x000080)
struct FWTLAuthorization : FWTLPacket
{ 
	uint64_t                                           UserID;                                                     // 0x0028   (0x0008)  
	EWTLPlatform                                       Platform;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FString                                            Login;                                                      // 0x0038   (0x0010)  
	FString                                            Password;                                                   // 0x0048   (0x0010)  
	FWTLVersionInfo                                    Version;                                                    // 0x0058   (0x0008)  
	uint16_t                                           TicketSize;                                                 // 0x0060   (0x0002)  
	unsigned char                                      UnknownData01_5[0xE];                                       // 0x0062   (0x000E)  MISSED
	FString                                            UniqueDeviceID;                                             // 0x0070   (0x0010)  
};

/// Struct /Script/WTL.WTLVersionInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLVersionInfo
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLSteamAchievementTrigger
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLSteamAchievementTrigger : FWTLPacket
{ 
	uint64_t                                           SteamID;                                                    // 0x0028   (0x0008)  
	FString                                            AchievementName;                                            // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLSteamFloatStatChange
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLSteamFloatStatChange : FWTLPacket
{ 
	uint64_t                                           SteamID;                                                    // 0x0028   (0x0008)  
	FString                                            StatName;                                                   // 0x0030   (0x0010)  
	float                                              Value;                                                      // 0x0040   (0x0004)  
	bool                                               bIsDeltaValue;                                              // 0x0044   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLSteamIntStatChange
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLSteamIntStatChange : FWTLPacket
{ 
	uint64_t                                           SteamID;                                                    // 0x0028   (0x0008)  
	FString                                            StatName;                                                   // 0x0030   (0x0010)  
	int32_t                                            Value;                                                      // 0x0040   (0x0004)  
	bool                                               bIsDeltaValue;                                              // 0x0044   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLClanSkillChange
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLClanSkillChange : FWTLPacket
{ 
	uint16_t                                           ClanID;                                                     // 0x0028   (0x0002)  
	char                                               Operation;                                                  // 0x002A   (0x0001)  
	char                                               SkillID;                                                    // 0x002B   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLClanScoreChange
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLClanScoreChange : FWTLPacket
{ 
	uint16_t                                           ClanID;                                                     // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	int32_t                                            PVPScore;                                                   // 0x002C   (0x0004)  
	int32_t                                            PVEScore;                                                   // 0x0030   (0x0004)  
	int32_t                                            CraftScore;                                                 // 0x0034   (0x0004)  
	int32_t                                            TechnologyScore;                                            // 0x0038   (0x0004)  
	char                                               ClanLevel;                                                  // 0x003C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLClanMemberRequestState
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLClanMemberRequestState : FWTLPacket
{ 
	uint16_t                                           ClanID;                                                     // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	FString                                            ClanName;                                                   // 0x0030   (0x0010)  
	FWTLDateTime                                       EventDate;                                                  // 0x0040   (0x0008)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	FString                                            Commentary;                                                 // 0x0050   (0x0010)  
};

/// Struct /Script/WTL.WTLClanMemberRequestList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLClanMemberRequestList : FWTLPacket
{ 
	TArray<FWTLClanMemberRequestInfo>                  Items;                                                      // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLClanMemberRequestInfo
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLClanMemberRequestInfo : FWTLPacket
{ 
	uint16_t                                           ClanID;                                                     // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	FWTLDateTime                                       RequestDate;                                                // 0x0030   (0x0008)  
	uint64_t                                           CharacterID;                                                // 0x0038   (0x0008)  
	FString                                            CharacterName;                                              // 0x0040   (0x0010)  
	char                                               CharacterLevel;                                             // 0x0050   (0x0001)  
	EWTLCharacterClass                                 CharacterClass;                                             // 0x0051   (0x0001)  
	EWTLFaction                                        CharacterFaction;                                           // 0x0052   (0x0001)  
	unsigned char                                      UnknownData01_5[0x5];                                       // 0x0053   (0x0005)  MISSED
	uint64_t                                           CharacterScore;                                             // 0x0058   (0x0008)  
	char                                               CharacterRank;                                              // 0x0060   (0x0001)  
	char                                               CharacterReputation;                                        // 0x0061   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0062   (0x0006)  MISSED
	FString                                            Commentary;                                                 // 0x0068   (0x0010)  
};

/// Struct /Script/WTL.WTLClanPolicyGroup
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLClanPolicyGroup : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	FString                                            Name;                                                       // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLClanRecord
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLClanRecord : FWTLPacket
{ 
	uint16_t                                           ID;                                                         // 0x0028   (0x0002)  
	EWTLFaction                                        Faction;                                                    // 0x002A   (0x0001)  
	unsigned char                                      UnknownData00_5[0x5];                                       // 0x002B   (0x0005)  MISSED
	FString                                            Name;                                                       // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLRemovedClanMember
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLRemovedClanMember : FWTLPacket
{ 
	uint16_t                                           ClanID;                                                     // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0030   (0x0008)  
	int32_t                                            ClanMemberCount;                                            // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLNewClanMember
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLNewClanMember : FWTLPacket
{ 
	uint16_t                                           ClanID;                                                     // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0030   (0x0008)  
	FString                                            CharacterName;                                              // 0x0038   (0x0010)  
	EWTLCharacterClass                                 CharacterClass;                                             // 0x0048   (0x0001)  
	char                                               CharacterLevel;                                             // 0x0049   (0x0001)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x004A   (0x0001)  
	char                                               ClanReputation;                                             // 0x004B   (0x0001)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	uint64_t                                           ClanPolicyGroupID;                                          // 0x0050   (0x0008)  
	int32_t                                            ClanMemberCount;                                            // 0x0058   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLClanMember
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLClanMember : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	EWTLCharacterClass                                 Class;                                                      // 0x0040   (0x0001)  
	char                                               Level;                                                      // 0x0041   (0x0001)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x0042   (0x0001)  
	char                                               ClanReputation;                                             // 0x0043   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	uint64_t                                           ClanPolicyGroupID;                                          // 0x0048   (0x0008)  
};

/// Struct /Script/WTL.WTLServerEventInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLServerEventInfo : FWTLPacket
{ 
	EWTLServerEventType                                Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            TimeLeft;                                                   // 0x002C   (0x0004)  
	FString                                            Comment;                                                    // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLDedicatedServerStatistics
/// Size: 0x0068 (0x000028 - 0x000090)
struct FWTLDedicatedServerStatistics : FWTLPacket
{ 
	uint32_t                                           ConnectionCount;                                            // 0x0028   (0x0004)  
	uint32_t                                           CharactersCount;                                            // 0x002C   (0x0004)  
	uint64_t                                           MonstersSpawned;                                            // 0x0030   (0x0008)  
	uint64_t                                           MonstersKilled;                                             // 0x0038   (0x0008)  
	uint64_t                                           MonstersAlive;                                              // 0x0040   (0x0008)  
	uint64_t                                           ExperienceTotal;                                            // 0x0048   (0x0008)  
	uint64_t                                           ExperienceMaxValue;                                         // 0x0050   (0x0008)  
	uint64_t                                           MoneyProduced;                                              // 0x0058   (0x0008)  
	uint64_t                                           MoneyConsumed;                                              // 0x0060   (0x0008)  
	uint64_t                                           SlotMachinesActivationsCount;                               // 0x0068   (0x0008)  
	uint64_t                                           SlotMachinesBetsMoney;                                      // 0x0070   (0x0008)  
	uint64_t                                           SlotMachinesRewardMoney;                                    // 0x0078   (0x0008)  
	uint64_t                                           SlotMachinesConsumedMoney;                                  // 0x0080   (0x0008)  
	uint64_t                                           SlotMachinesMaxReward;                                      // 0x0088   (0x0008)  
};

/// Struct /Script/WTL.WTLChangeCreditsResult
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLChangeCreditsResult : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	uint32_t                                           CreditsAmount;                                              // 0x0030   (0x0004)  
	uint32_t                                           MoneyAmount;                                                // 0x0034   (0x0004)  
};

/// Struct /Script/WTL.WTLChangeCreditsInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLChangeCreditsInfo : FWTLPacket
{ 
	uint64_t                                           accountid;                                                  // 0x0028   (0x0008)  
	uint64_t                                           CharacterID;                                                // 0x0030   (0x0008)  
	uint32_t                                           CreditsAmount;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLClientMoveToLocationInfo
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLClientMoveToLocationInfo : FWTLPacket
{ 
	uint32_t                                           LocationID;                                                 // 0x0028   (0x0004)  
	uint32_t                                           PortalID;                                                   // 0x002C   (0x0004)  
	FString                                            DedicatedServerAddress;                                     // 0x0030   (0x0010)  
	int32_t                                            DedicatedServerPort;                                        // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMoveToLocationInfo
/// Size: 0x04A8 (0x000028 - 0x0004D0)
struct FWTLMoveToLocationInfo : FWTLPacket
{ 
	uint32_t                                           LocationID;                                                 // 0x0028   (0x0004)  
	uint32_t                                           PortalID;                                                   // 0x002C   (0x0004)  
	FWTLFullCharacterInfo                              CharacterInfo;                                              // 0x0030   (0x04A0)  
};

/// Struct /Script/WTL.WTLCharacterInfo
/// Size: 0x00E8 (0x000028 - 0x000110)
struct FWTLCharacterInfo : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	uint64_t                                           accountid;                                                  // 0x0030   (0x0008)  
	FString                                            Name;                                                       // 0x0038   (0x0010)  
	EWTLSex                                            Sex;                                                        // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	FWTLDateTime                                       CreationDate;                                               // 0x0050   (0x0008)  
	FWTLDateTime                                       LastAccessDate;                                             // 0x0058   (0x0008)  
	char                                               Level;                                                      // 0x0060   (0x0001)  
	EWTLCharacterClass                                 Class;                                                      // 0x0061   (0x0001)  
	uint16_t                                           State;                                                      // 0x0062   (0x0002)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	FString                                            StateDescription;                                           // 0x0068   (0x0010)  
	bool                                               Online;                                                     // 0x0078   (0x0001)  
	char                                               BaseStrength;                                               // 0x0079   (0x0001)  
	char                                               BaseDexterity;                                              // 0x007A   (0x0001)  
	char                                               BaseStamina;                                                // 0x007B   (0x0001)  
	char                                               BaseAccuracy;                                               // 0x007C   (0x0001)  
	char                                               BaseIntelligence;                                           // 0x007D   (0x0001)  
	char                                               BaseFortune;                                                // 0x007E   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x007F   (0x0001)  MISSED
	uint64_t                                           Experience;                                                 // 0x0080   (0x0008)  
	uint16_t                                           TotalSkillPoints;                                           // 0x0088   (0x0002)  
	uint16_t                                           AvailableSkillPoints;                                       // 0x008A   (0x0002)  
	uint32_t                                           WeaponType0Experience;                                      // 0x008C   (0x0004)  
	uint32_t                                           WeaponType1Experience;                                      // 0x0090   (0x0004)  
	uint32_t                                           WeaponType2Experience;                                      // 0x0094   (0x0004)  
	uint32_t                                           WeaponType3Experience;                                      // 0x0098   (0x0004)  
	uint32_t                                           WeaponType4Experience;                                      // 0x009C   (0x0004)  
	uint32_t                                           WeaponType5Experience;                                      // 0x00A0   (0x0004)  
	uint32_t                                           WeaponType6Experience;                                      // 0x00A4   (0x0004)  
	uint32_t                                           WeaponType7Experience;                                      // 0x00A8   (0x0004)  
	uint32_t                                           WeaponType8Experience;                                      // 0x00AC   (0x0004)  
	uint32_t                                           WeaponType9Experience;                                      // 0x00B0   (0x0004)  
	uint32_t                                           MedicExperience;                                            // 0x00B4   (0x0004)  
	uint32_t                                           CraftExperience;                                            // 0x00B8   (0x0004)  
	uint32_t                                           RepairExperience;                                           // 0x00BC   (0x0004)  
	uint32_t                                           ElectronicsExperience;                                      // 0x00C0   (0x0004)  
	uint32_t                                           MiningExperience;                                           // 0x00C4   (0x0004)  
	uint32_t                                           SurvivalExperience;                                         // 0x00C8   (0x0004)  
	uint32_t                                           Balance;                                                    // 0x00CC   (0x0004)  
	char                                               InventorySlotCount;                                         // 0x00D0   (0x0001)  
	EWTLFaction                                        Faction;                                                    // 0x00D1   (0x0001)  
	char                                               Reputation;                                                 // 0x00D2   (0x0001)  
	unsigned char                                      UnknownData03_5[0x5];                                       // 0x00D3   (0x0005)  MISSED
	uint64_t                                           Score;                                                      // 0x00D8   (0x0008)  
	char                                               Rank;                                                       // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x00E1   (0x0001)  MISSED
	uint16_t                                           ClanID;                                                     // 0x00E2   (0x0002)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x00E4   (0x0001)  
	char                                               ClanReputation;                                             // 0x00E5   (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x00E6   (0x0002)  MISSED
	uint64_t                                           ClanPolicyGroupID;                                          // 0x00E8   (0x0008)  
	EWTLPlayerType                                     PlayerType;                                                 // 0x00F0   (0x0001)  
	char                                               BodyType;                                                   // 0x00F1   (0x0001)  
	bool                                               PVPEnabled;                                                 // 0x00F2   (0x0001)  
	unsigned char                                      UnknownData06_5[0x5];                                       // 0x00F3   (0x0005)  MISSED
	FWTLDateTime                                       PVPStateChangeDate;                                         // 0x00F8   (0x0008)  
	FWTLDateTime                                       PremiumEndTime;                                             // 0x0100   (0x0008)  
	EWTLPlatform                                       Platform;                                                   // 0x0108   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLFullCharacterInfo
/// Size: 0x0390 (0x000110 - 0x0004A0)
struct FWTLFullCharacterInfo : FWTLCharacterInfo
{ 
	FWTLCharacterCurrentState                          CurrentState;                                               // 0x0110   (0x0188)  
	TArray<FWTLCharacterItemExperience>                ItemExperience;                                             // 0x0298   (0x0010)  
	FWTLStorageContent                                 Inventory;                                                  // 0x02A8   (0x00A8)  
	TArray<FWTLContactListItem>                        ContactList;                                                // 0x0350   (0x0010)  
	TArray<FWTLIdentity16>                             Skills;                                                     // 0x0360   (0x0010)  
	FWTLCharacterParameters                            Parameters;                                                 // 0x0370   (0x00E0)  
	TArray<FWTLCharacterCustomizationRecord>           CustomizationInfo;                                          // 0x0450   (0x0010)  
	TArray<FWTLCharacterQuestState>                    QuestStates;                                                // 0x0460   (0x0010)  
	TArray<FWTLDeprecatedCharacterMapMarker>           MapMarkers;                                                 // 0x0470   (0x0010)  
	TArray<FWTLCharacterEffect>                        Effects;                                                    // 0x0480   (0x0010)  
	TArray<FWTLCharacterMailMessage>                   Mail;                                                       // 0x0490   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterEffect
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLCharacterEffect : FWTLPacket
{ 
	EWTLCharacterEffectType                            Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              Value;                                                      // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLDeprecatedCharacterMapMarker
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLDeprecatedCharacterMapMarker : FWTLPacket
{ 
	uint32_t                                           LocationID;                                                 // 0x0028   (0x0004)  
	char                                               Type;                                                       // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x0030   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0040   (0x0010)  
	bool                                               ShowOnMinimap;                                              // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterQuestState
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLCharacterQuestState : FWTLPacket
{ 
	uint32_t                                           QuestID;                                                    // 0x0028   (0x0004)  
	EWTLQuestState                                     State;                                                      // 0x002C   (0x0001)  
	char                                               Progress1;                                                  // 0x002D   (0x0001)  
	char                                               Progress2;                                                  // 0x002E   (0x0001)  
	char                                               Progress3;                                                  // 0x002F   (0x0001)  
	char                                               Progress4;                                                  // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FWTLDateTime                                       LastChangeDate;                                             // 0x0038   (0x0008)  
	bool                                               Active;                                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterCustomizationRecord
/// Size: 0x00E0 (0x000028 - 0x000108)
struct FWTLCharacterCustomizationRecord : FWTLPacket
{ 
	EWTLCharacterCustomizationPart                     PartType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	uint32_t                                           PartID;                                                     // 0x002C   (0x0004)  
	FWTLMaterialParameters                             MaterialParameters0;                                        // 0x0030   (0x0048)  
	FWTLMaterialParameters                             MaterialParameters1;                                        // 0x0078   (0x0048)  
	FWTLMaterialParameters                             MaterialParameters2;                                        // 0x00C0   (0x0048)  
};

/// Struct /Script/WTL.WTLMaterialParameters
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLMaterialParameters : FWTLPacket
{ 
	FColor                                             Color0;                                                     // 0x0028   (0x0004)  
	FColor                                             Color1;                                                     // 0x002C   (0x0004)  
	FColor                                             Color2;                                                     // 0x0030   (0x0004)  
	FColor                                             Color3;                                                     // 0x0034   (0x0004)  
	float                                              Scalar0;                                                    // 0x0038   (0x0004)  
	float                                              Scalar1;                                                    // 0x003C   (0x0004)  
	float                                              Scalar2;                                                    // 0x0040   (0x0004)  
	float                                              Scalar3;                                                    // 0x0044   (0x0004)  
};

/// Struct /Script/WTL.WTLCharacterParameters
/// Size: 0x00B8 (0x000028 - 0x0000E0)
struct FWTLCharacterParameters : FWTLPacket
{ 
	float                                              CriticalDamageChanceMultiplier;                             // 0x0028   (0x0004)  
	float                                              AvoidCriticalDamageChanceMultiplier;                        // 0x002C   (0x0004)  
	float                                              ResourceDropChanceMultiplier;                               // 0x0030   (0x0004)  
	float                                              MaxHealthMultiplier;                                        // 0x0034   (0x0004)  
	float                                              MaxStaminaMultiplier;                                       // 0x0038   (0x0004)  
	float                                              TakenDamageAmountMultiplier;                                // 0x003C   (0x0004)  
	float                                              AccuracyMultiplier;                                         // 0x0040   (0x0004)  
	float                                              MovementSpeedMultiplier;                                    // 0x0044   (0x0004)  
	float                                              EnvironmentResistanceMultiplier;                            // 0x0048   (0x0004)  
	float                                              SatietyHealthRegenerationRateMultiplier;                    // 0x004C   (0x0004)  
	float                                              HealingEfficiencyMultiplier;                                // 0x0050   (0x0004)  
	float                                              WeaponHandlingSpeedMultiplier;                              // 0x0054   (0x0004)  
	float                                              DeathLootLossMultiplier;                                    // 0x0058   (0x0004)  
	float                                              UsingItemsExperienceAmountMultiplier;                       // 0x005C   (0x0004)  
	float                                              UsingRepairKitsEfficiencyMultiplier;                        // 0x0060   (0x0004)  
	float                                              SaveLockpicksChanceMultiplier;                              // 0x0064   (0x0004)  
	float                                              iHR_EfficiencyMultiplier;                                   // 0x0068   (0x0004)  
	float                                              AdditionalInventorySlots;                                   // 0x006C   (0x0004)  
	float                                              MaxInventoryWeightMultiplier;                               // 0x0070   (0x0004)  
	float                                              ItemProductionSpeedMultiplier;                              // 0x0074   (0x0004)  
	float                                              AdditionalProductionQueueSlots;                             // 0x0078   (0x0004)  
	float                                              PvP_DamageMultiplier;                                       // 0x007C   (0x0004)  
	float                                              PvP_SlowChanceOnHitMultiplier;                              // 0x0080   (0x0004)  
	float                                              PvP_BleedingChanceOnHitMultiplier;                          // 0x0084   (0x0004)  
	float                                              PvP_KillLootAmountMultiplier;                               // 0x0088   (0x0004)  
	float                                              PvE_EnemyDamageMultiplier;                                  // 0x008C   (0x0004)  
	float                                              PvE_MonsterDamageMultiplier;                                // 0x0090   (0x0004)  
	float                                              PvE_MonsterKillLootAmountMultiplier;                        // 0x0094   (0x0004)  
	float                                              PvE_MonsterKillExperienceAmountMultiplier;                  // 0x0098   (0x0004)  
	float                                              MeleeDamageMultiplier;                                      // 0x009C   (0x0004)  
	float                                              MeleeBleedingChanceMultiplier;                              // 0x00A0   (0x0004)  
	float                                              MeleeCriticalDamageChanceMultiplier;                        // 0x00A4   (0x0004)  
	float                                              PistolDamageMultiplier;                                     // 0x00A8   (0x0004)  
	float                                              PistolAccuracyMultiplier;                                   // 0x00AC   (0x0004)  
	float                                              PistolCriticalDamageChanceMultiplier;                       // 0x00B0   (0x0004)  
	float                                              SubMachineGunDamageMultiplier;                              // 0x00B4   (0x0004)  
	float                                              SubMachineGunAccuracyMultiplier;                            // 0x00B8   (0x0004)  
	float                                              ShotgunDamageMultiplier;                                    // 0x00BC   (0x0004)  
	float                                              RifleDamageMultiplier;                                      // 0x00C0   (0x0004)  
	float                                              RifleAccuracyMultiplier;                                    // 0x00C4   (0x0004)  
	float                                              AssaultRifleDamageMultiplier;                               // 0x00C8   (0x0004)  
	float                                              AssaultRifleAccuracyMultiplier;                             // 0x00CC   (0x0004)  
	float                                              GrenadeLauncherDamageMultiplier;                            // 0x00D0   (0x0004)  
	float                                              ExplosiveDamageMultiplier;                                  // 0x00D4   (0x0004)  
	float                                              ArmorWeightSpeedMultiplier;                                 // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLContactListItem
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLContactListItem : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	FString                                            CharacterName;                                              // 0x0030   (0x0010)  
	bool                                               Online;                                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	FString                                            Location;                                                   // 0x0048   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterItemExperience
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLCharacterItemExperience : FWTLPacket
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0029   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x002A   (0x0002)  
	uint32_t                                           Experience;                                                 // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLCharacterCurrentState
/// Size: 0x0160 (0x000028 - 0x000188)
struct FWTLCharacterCurrentState : FWTLPacket
{ 
	float                                              Health;                                                     // 0x0028   (0x0004)  
	char                                               Strength;                                                   // 0x002C   (0x0001)  
	char                                               Dexterity;                                                  // 0x002D   (0x0001)  
	char                                               Stamina;                                                    // 0x002E   (0x0001)  
	char                                               Accuracy;                                                   // 0x002F   (0x0001)  
	char                                               Intelligence;                                               // 0x0030   (0x0001)  
	char                                               Fortune;                                                    // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0032   (0x0002)  MISSED
	uint32_t                                           LocationID;                                                 // 0x0034   (0x0004)  
	FVector                                            LocationPosition;                                           // 0x0038   (0x000C)  
	EWTLItemType                                       ArmsItemType;                                               // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	uint64_t                                           ArmsItemID;                                                 // 0x0048   (0x0008)  
	EWTLItemType                                       HeadItemType;                                               // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	uint64_t                                           HeadItemID;                                                 // 0x0058   (0x0008)  
	EWTLItemType                                       TorsoItemType;                                              // 0x0060   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0061   (0x0007)  MISSED
	uint64_t                                           TorsoItemID;                                                // 0x0068   (0x0008)  
	EWTLItemType                                       LegsItemType;                                               // 0x0070   (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	uint64_t                                           LegsItemID;                                                 // 0x0078   (0x0008)  
	EWTLItemType                                       FeetItemType;                                               // 0x0080   (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x0081   (0x0007)  MISSED
	uint64_t                                           FeetItemID;                                                 // 0x0088   (0x0008)  
	EWTLItemType                                       EquipmentSlot1ItemType;                                     // 0x0090   (0x0001)  
	unsigned char                                      UnknownData06_5[0x7];                                       // 0x0091   (0x0007)  MISSED
	uint64_t                                           EquipmentSlot1ItemID;                                       // 0x0098   (0x0008)  
	EWTLItemType                                       EquipmentSlot2ItemType;                                     // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x00A1   (0x0007)  MISSED
	uint64_t                                           EquipmentSlot2ItemID;                                       // 0x00A8   (0x0008)  
	EWTLItemType                                       EquipmentSlot3ItemType;                                     // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x00B1   (0x0007)  MISSED
	uint64_t                                           EquipmentSlot3ItemID;                                       // 0x00B8   (0x0008)  
	EWTLItemType                                       EquipmentSlot4ItemType;                                     // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x00C1   (0x0007)  MISSED
	uint64_t                                           EquipmentSlot4ItemID;                                       // 0x00C8   (0x0008)  
	char                                               EquipmentSlotStates;                                        // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x00D1   (0x0007)  MISSED
	TArray<FWTLFastAccessSlot>                         FastAccessSlots;                                            // 0x00D8   (0x0010)  
	int32_t                                            SafeZoneID;                                                 // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData11_5[0x4];                                       // 0x00EC   (0x0004)  MISSED
	TArray<FWTLIdentity32>                             VisitedLocations;                                           // 0x00F0   (0x0010)  
	TArray<FWTLIdentity16>                             PDAModules;                                                 // 0x0100   (0x0010)  
	TArray<FWTLIdentity32>                             VisitedPortals;                                             // 0x0110   (0x0010)  
	char                                               Hunger;                                                     // 0x0120   (0x0001)  
	char                                               Thirst;                                                     // 0x0121   (0x0001)  
	unsigned char                                      UnknownData12_5[0x6];                                       // 0x0122   (0x0006)  MISSED
	FWTLMedicineItemEffect                             MedicineEffect;                                             // 0x0128   (0x0030)  
	FWTLMedicineItemEffect                             StimulatorEffect;                                           // 0x0158   (0x0030)  
};

/// Struct /Script/WTL.WTLMedicineItemEffect
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLMedicineItemEffect : FWTLPacket
{ 
	uint16_t                                           MedicineID;                                                 // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	float                                              Duration;                                                   // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLFastAccessSlot
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLFastAccessSlot : FWTLPacket
{ 
	char                                               SlotNumber;                                                 // 0x0028   (0x0001)  
	EWTLItemType                                       ItemType;                                                   // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLCharacterTravelInfo
/// Size: 0x04D0 (0x000028 - 0x0004F8)
struct FWTLCharacterTravelInfo : FWTLPacket
{ 
	FString                                            TicketUID;                                                  // 0x0028   (0x0010)  
	uint32_t                                           PortalID;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	uint64_t                                           SteamID;                                                    // 0x0040   (0x0008)  
	FWTLFullCharacterInfo                              CharacterInfo;                                              // 0x0048   (0x04A0)  
	TArray<FWTLPrivateStorageContent>                  PrivateStorages;                                            // 0x04E8   (0x0010)  
};

/// Struct /Script/WTL.WTLPrivateStorageContent
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
struct FWTLPrivateStorageContent : FWTLStorageContent
{ 
	uint32_t                                           NPCID;                                                      // 0x00A8   (0x0004)  
	char                                               SlotCount;                                                  // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLArenaLocationStateChange
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLArenaLocationStateChange : FWTLPacket
{ 
	uint32_t                                           ConfederationPlayersCount;                                  // 0x0028   (0x0004)  
	uint32_t                                           BlackSunsetPlayersCount;                                    // 0x002C   (0x0004)  
	uint32_t                                           ConfederationScores;                                        // 0x0030   (0x0004)  
	uint32_t                                           BlackSunsetScores;                                          // 0x0034   (0x0004)  
};

/// Struct /Script/WTL.WTLArenaLocationList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLArenaLocationList : FWTLPacket
{ 
	TArray<FWTLArenaLocationInfo>                      Data;                                                       // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLArenaLocationInfo
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLArenaLocationInfo : FWTLPacket
{ 
	uint32_t                                           ID;                                                         // 0x0028   (0x0004)  
	EWTLLocationType                                   Type;                                                       // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	FString                                            Description;                                                // 0x0040   (0x0010)  
	uint32_t                                           PlayersCount;                                               // 0x0050   (0x0004)  
	uint32_t                                           ConfederationPlayersCount;                                  // 0x0054   (0x0004)  
	uint32_t                                           BlackSunsetPlayersCount;                                    // 0x0058   (0x0004)  
	uint32_t                                           MinPlayersCount;                                            // 0x005C   (0x0004)  
	uint32_t                                           MaxPlayersCount;                                            // 0x0060   (0x0004)  
	uint32_t                                           MatchTime;                                                  // 0x0064   (0x0004)  
	uint32_t                                           MaxMatchTime;                                               // 0x0068   (0x0004)  
	uint32_t                                           ConfederationScores;                                        // 0x006C   (0x0004)  
	uint32_t                                           BlackSunsetScores;                                          // 0x0070   (0x0004)  
	uint32_t                                           ScoresToWin;                                                // 0x0074   (0x0004)  
};

/// Struct /Script/WTL.WTLSetActiveCharacterResult
/// Size: 0x04C8 (0x000028 - 0x0004F0)
struct FWTLSetActiveCharacterResult : FWTLPacket
{ 
	FString                                            DedicatedServerHost;                                        // 0x0028   (0x0010)  
	int32_t                                            DedicatedServerPort;                                        // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            TicketUID;                                                  // 0x0040   (0x0010)  
	FWTLFullCharacterInfo                              CharacterInfo;                                              // 0x0050   (0x04A0)  
};

/// Struct /Script/WTL.WTLClientAuthorizationResult
/// Size: 0x0100 (0x000028 - 0x000128)
struct FWTLClientAuthorizationResult : FWTLPacket
{ 
	uint32_t                                           CreditsToMoneyRate;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            NetUID;                                                     // 0x0030   (0x0010)  
	FWTLAccountInfo                                    AccountInfo;                                                // 0x0040   (0x00B0)  
	FWTLCharacterList                                  CharacterList;                                              // 0x00F0   (0x0038)  
};

/// Struct /Script/WTL.WTLCharacterList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLCharacterList : FWTLPacket
{ 
	TArray<FWTLFullCharacterInfo>                      Data;                                                       // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLAccountInfo
/// Size: 0x0088 (0x000028 - 0x0000B0)
struct FWTLAccountInfo : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	FString                                            Login;                                                      // 0x0030   (0x0010)  
	bool                                               Active;                                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	FWTLDateTime                                       CreationDate;                                               // 0x0048   (0x0008)  
	FWTLDateTime                                       ActivationDate;                                             // 0x0050   (0x0008)  
	FWTLDateTime                                       LastAccessDate;                                             // 0x0058   (0x0008)  
	EWTLSex                                            Sex;                                                        // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0061   (0x0007)  MISSED
	FWTLDateTime                                       BirthDate;                                                  // 0x0068   (0x0008)  
	uint16_t                                           State;                                                      // 0x0070   (0x0002)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0072   (0x0006)  MISSED
	FString                                            StateDescription;                                           // 0x0078   (0x0010)  
	bool                                               Online;                                                     // 0x0088   (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0089   (0x0007)  MISSED
	FString                                            EMail;                                                      // 0x0090   (0x0010)  
	int32_t                                            Balance;                                                    // 0x00A0   (0x0004)  
	char                                               CharacterSlotCount;                                         // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00A5   (0x0003)  MISSED
	FWTLDateTime                                       PremiumEndTime;                                             // 0x00A8   (0x0008)  
};

/// Struct /Script/WTL.WTLStatisticsCharacterParameterList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLStatisticsCharacterParameterList : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLStatisticsCharacterParameter
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLStatisticsCharacterParameter : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLCharacterMainParameters
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLCharacterMainParameters : FWTLPacket
{ 
	int8_t                                             Strength;                                                   // 0x0028   (0x0001)  
	int8_t                                             Dexterity;                                                  // 0x0029   (0x0001)  
	int8_t                                             Stamina;                                                    // 0x002A   (0x0001)  
	int8_t                                             Accuracy;                                                   // 0x002B   (0x0001)  
	int8_t                                             Intelligence;                                               // 0x002C   (0x0001)  
	int8_t                                             Fortune;                                                    // 0x002D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLDoorLockInfo
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLDoorLockInfo : FWTLPacket
{ 
	int64_t                                            BuildingID;                                                 // 0x0028   (0x0008)  
	int64_t                                            BuildingDoorID;                                             // 0x0030   (0x0008)  
	EWTLBuildingDoorLockType                           Type;                                                       // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FString                                            KeyCode;                                                    // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLDoorLockOperationInfo
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLDoorLockOperationInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Struct /Script/WTL.WTLExperienceDelta
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLExperienceDelta : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLSkill
/// Size: 0x0060 (0x000028 - 0x000088)
struct FWTLSkill : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Struct /Script/WTL.WTLSkillEffect
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLSkillEffect : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLUpdateCommissionItemInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLUpdateCommissionItemInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLReturnItemFromCommissionInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLReturnItemFromCommissionInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLPutItemOnCommissionInfo
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLPutItemOnCommissionInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0028   (0x0020)  MISSED
};

/// Struct /Script/WTL.WTLBalanceDelta
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLBalanceDelta : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLShopCommissionItems
/// Size: 0x0078 (0x000028 - 0x0000A0)
struct FWTLShopCommissionItems : FWTLPacket
{ 
	int32_t                                            ShopID;                                                     // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FWTLCommissionWeaponItem>                   WeaponItems;                                                // 0x0030   (0x0010)  
	TArray<FWTLCommissionAmmoItem>                     AmmoItems;                                                  // 0x0040   (0x0010)  
	TArray<FWTLCommissionMedicineItem>                 MedicineItems;                                              // 0x0050   (0x0010)  
	TArray<FWTLCommissionStuffItem>                    StuffItems;                                                 // 0x0060   (0x0010)  
	TArray<FWTLCommissionClothesItem>                  ClothesItems;                                               // 0x0070   (0x0010)  
	TArray<FWTLCommissionResourceItem>                 ResourceItems;                                              // 0x0080   (0x0010)  
	TArray<FWTLCommissionArtefactItem>                 ArtefactItems;                                              // 0x0090   (0x0010)  
};

/// Struct /Script/WTL.WTLCommissionArtefactItem
/// Size: 0x0030 (0x0000A0 - 0x0000D0)
struct FWTLCommissionArtefactItem : FWTLArtefactItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x00A0   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x00A8   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x00B8   (0x0008)  
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x00C0   (0x0008)  
	float                                              CommissionPrice;                                            // 0x00C8   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x00CC   (0x0004)  
};

/// Struct /Script/WTL.WTLCommissionResourceItem
/// Size: 0x0030 (0x000070 - 0x0000A0)
struct FWTLCommissionResourceItem : FWTLResourceItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x0070   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x0078   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x0088   (0x0008)  
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x0090   (0x0008)  
	float                                              CommissionPrice;                                            // 0x0098   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x009C   (0x0004)  
};

/// Struct /Script/WTL.WTLCommissionClothesItem
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
struct FWTLCommissionClothesItem : FWTLClothesItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x00B0   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x00B8   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x00C8   (0x0008)  
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x00D0   (0x0008)  
	float                                              CommissionPrice;                                            // 0x00D8   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x00DC   (0x0004)  
};

/// Struct /Script/WTL.WTLCommissionStuffItem
/// Size: 0x0030 (0x000098 - 0x0000C8)
struct FWTLCommissionStuffItem : FWTLStuffItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x0098   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x00A0   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x00B0   (0x0008)  
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x00B8   (0x0008)  
	float                                              CommissionPrice;                                            // 0x00C0   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x00C4   (0x0004)  
};

/// Struct /Script/WTL.WTLCommissionMedicineItem
/// Size: 0x0030 (0x0000A8 - 0x0000D8)
struct FWTLCommissionMedicineItem : FWTLMedicineItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x00A8   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x00B0   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x00C0   (0x0008)  
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x00C8   (0x0008)  
	float                                              CommissionPrice;                                            // 0x00D0   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x00D4   (0x0004)  
};

/// Struct /Script/WTL.WTLCommissionAmmoItem
/// Size: 0x0038 (0x000098 - 0x0000D0)
struct FWTLCommissionAmmoItem : FWTLAmmoItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x0098   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x00A0   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x00B0   (0x0008)  
	float                                              CommissionPrice;                                            // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x00BC   (0x0004)  MISSED
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x00C0   (0x0008)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCommissionWeaponItem
/// Size: 0x0030 (0x0000D8 - 0x000108)
struct FWTLCommissionWeaponItem : FWTLWeaponItem
{ 
	int64_t                                            CommissionCharacterID;                                      // 0x00D8   (0x0008)  
	FString                                            CommissionCharacterName;                                    // 0x00E0   (0x0010)  
	FWTLDateTime                                       CommissionDate;                                             // 0x00F0   (0x0008)  
	FWTLDateTime                                       CommissionExpireDate;                                       // 0x00F8   (0x0008)  
	float                                              CommissionPrice;                                            // 0x0100   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x0104   (0x0004)  
};

/// Struct /Script/WTL.WTLDedicatedServerAuthorization
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLDedicatedServerAuthorization : FWTLPacket
{ 
	FWTLShortVersionInfo                               ProtocolVersion;                                            // 0x0028   (0x0002)  
	FWTLVersionInfo                                    Version;                                                    // 0x002A   (0x0008)  
	char                                               Type;                                                       // 0x0032   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0033   (0x0001)  MISSED
	int32_t                                            LocationID;                                                 // 0x0034   (0x0004)  
	int32_t                                            Port;                                                       // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            Hash;                                                       // 0x0040   (0x0010)  
	uint32_t                                           MinPlayersCount;                                            // 0x0050   (0x0004)  
	uint32_t                                           MaxPlayersCount;                                            // 0x0054   (0x0004)  
	uint32_t                                           MaxMatchTime;                                               // 0x0058   (0x0004)  
	uint32_t                                           ScoresToWin;                                                // 0x005C   (0x0004)  
};

/// Struct /Script/WTL.WTLShortVersionInfo
/// Size: 0x0002 (0x000000 - 0x000002)
struct FWTLShortVersionInfo
{ 
	unsigned char                                      UnknownData00_1[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLBuyItemFromShopInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLBuyItemFromShopInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLSellItemToShopInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLSellItemToShopInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLShopBuyItem
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLShopBuyItem : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int32_t                                            ShopID;                                                     // 0x0030   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0034   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0035   (0x0001)  MISSED
	int16_t                                            ItemTypeID;                                                 // 0x0036   (0x0002)  
	float                                              Price;                                                      // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLShop
/// Size: 0x0060 (0x000028 - 0x000088)
struct FWTLShop : FWTLPacket
{ 
	int32_t                                            ID;                                                         // 0x0028   (0x0004)  
	int32_t                                            LocationID;                                                 // 0x002C   (0x0004)  
	EWTLShopType                                       Type;                                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x0034   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0050   (0x0010)  
	int32_t                                            Balance;                                                    // 0x0060   (0x0004)  
	char                                               CommissionPercent;                                          // 0x0064   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0065   (0x0003)  MISSED
	int32_t                                            CommissionWeaponItemsCount;                                 // 0x0068   (0x0004)  
	int32_t                                            CommissionAmmoItemsCount;                                   // 0x006C   (0x0004)  
	int32_t                                            CommissionMedicineItemsCount;                               // 0x0070   (0x0004)  
	int32_t                                            CommissionStuffItemsCount;                                  // 0x0074   (0x0004)  
	int32_t                                            CommissionClothesItemsCount;                                // 0x0078   (0x0004)  
	int32_t                                            CommissionResourceItemsCount;                               // 0x007C   (0x0004)  
	int32_t                                            CommissionArtefactItemsCount;                               // 0x0080   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMiningPointStateChange
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLMiningPointStateChange : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLWorldInfo
/// Size: 0x0080 (0x000028 - 0x0000A8)
struct FWTLWorldInfo : FWTLPacket
{ 
	float                                              CurrentTime;                                                // 0x0028   (0x0004)  
	uint16_t                                           TimeScale;                                                  // 0x002C   (0x0002)  
	uint16_t                                           CreditsToMoneyRate;                                         // 0x002E   (0x0002)  
	FWTLWorldConfig                                    Config;                                                     // 0x0030   (0x0058)  
	TArray<FWTLGroup>                                  Groups;                                                     // 0x0088   (0x0010)  
	TArray<FWTLCharacterMuteState>                     CharactersMuteState;                                        // 0x0098   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterMuteState
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLCharacterMuteState : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	bool                                               ChatMuteState;                                              // 0x0030   (0x0001)  
	bool                                               VoiceMuteState;                                             // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	FWTLDateTime                                       MuteEnds;                                                   // 0x0038   (0x0008)  
	FString                                            Description;                                                // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLGroup
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLGroup : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	TArray<FWTLGroupMember>                            Members;                                                    // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLGroupMember
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLGroupMember : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	FString                                            CharacterName;                                              // 0x0030   (0x0010)  
	bool                                               Leader;                                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLWorldConfig
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLWorldConfig : FWTLPacket
{ 
	float                                              ExperienceMultiplier;                                       // 0x0028   (0x0004)  
	float                                              CharacterKillExperienceMultiplier;                          // 0x002C   (0x0004)  
	float                                              MonsterKillExperienceMultiplier;                            // 0x0030   (0x0004)  
	float                                              NPCKillExperienceMultiplier;                                // 0x0034   (0x0004)  
	float                                              QuestExperienceMultiplier;                                  // 0x0038   (0x0004)  
	float                                              ItemTypeExperienceMultiplier;                               // 0x003C   (0x0004)  
	float                                              CharacterDropChanceMultiplier;                              // 0x0040   (0x0004)  
	float                                              CharacterDropCountMultiplier;                               // 0x0044   (0x0004)  
	float                                              MonsterDropChanceMultiplier;                                // 0x0048   (0x0004)  
	float                                              MonsterDropCountMultiplier;                                 // 0x004C   (0x0004)  
	float                                              NPCDropChanceMultiplier;                                    // 0x0050   (0x0004)  
	float                                              NPCDropCountMultiplier;                                     // 0x0054   (0x0004)  
};

/// Struct /Script/WTL.WTLWorldTime
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLWorldTime : FWTLPacket
{ 
	float                                              CurrentTime;                                                // 0x0028   (0x0004)  
	int16_t                                            TimeScale;                                                  // 0x002C   (0x0002)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLGroupInvite
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLGroupInvite : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	uint64_t                                           GroupId;                                                    // 0x0030   (0x0008)  
	uint64_t                                           CharacterID;                                                // 0x0038   (0x0008)  
	uint64_t                                           InviteInstigatorID;                                         // 0x0040   (0x0008)  
	FString                                            InviteInstigatorName;                                       // 0x0048   (0x0010)  
	FString                                            GroupName;                                                  // 0x0058   (0x0010)  
	bool                                               Expired;                                                    // 0x0068   (0x0001)  
	char                                               MembersCount;                                               // 0x0069   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x006A   (0x0006)  MISSED
	FWTLDateTime                                       InviteTime;                                                 // 0x0070   (0x0008)  
};

/// Struct /Script/WTL.WTLLocationInfo
/// Size: 0x00A8 (0x000028 - 0x0000D0)
struct FWTLLocationInfo : FWTLPacket
{ 
	int32_t                                            ID;                                                         // 0x0028   (0x0004)  
	EWTLLocationType                                   Type;                                                       // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	FWTLWeatherInfo                                    WeatherInfo;                                                // 0x0040   (0x0040)  
	TArray<FWTLShortCharacterInfo>                     Characters;                                                 // 0x0080   (0x0010)  
	TArray<FWTLLocationStorage>                        Storages;                                                   // 0x0090   (0x0010)  
	TArray<FWTLCamp>                                   Camps;                                                      // 0x00A0   (0x0010)  
	TArray<FWTLBuilding>                               Buildings;                                                  // 0x00B0   (0x0010)  
	TArray<FWTLMiningPoint>                            MiningPoints;                                               // 0x00C0   (0x0010)  
};

/// Struct /Script/WTL.WTLMiningPoint
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLMiningPoint : FWTLPacket
{ 
	int32_t                                            ID;                                                         // 0x0028   (0x0004)  
	int32_t                                            LocationID;                                                 // 0x002C   (0x0004)  
	EWTLMiningPointType                                Type;                                                       // 0x0030   (0x0001)  
	char                                               SubType;                                                    // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0032   (0x0002)  MISSED
	FVector                                            Position;                                                   // 0x0034   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0040   (0x000C)  
	char                                               ResourcePercent;                                            // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	TArray<FWTLMiningPointResource>                    Resources;                                                  // 0x0050   (0x0010)  
};

/// Struct /Script/WTL.WTLMiningPointResource
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLMiningPointResource : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int32_t                                            LocationMiningPointID;                                      // 0x0030   (0x0004)  
	int16_t                                            ResourceID;                                                 // 0x0034   (0x0002)  
	int16_t                                            Value;                                                      // 0x0036   (0x0002)  
	int16_t                                            MaxValue;                                                   // 0x0038   (0x0002)  
	int16_t                                            ValueIncrement;                                             // 0x003A   (0x0002)  
	int16_t                                            ValueDecrement;                                             // 0x003C   (0x0002)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x003E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLBuilding
/// Size: 0x0080 (0x000028 - 0x0000A8)
struct FWTLBuilding : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int32_t                                            LocationID;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	int64_t                                            CharacterID;                                                // 0x0038   (0x0008)  
	EWTLBuildingType                                   Type;                                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x0044   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0050   (0x000C)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FWTLDateTime                                       CreationDate;                                               // 0x0060   (0x0008)  
	FString                                            Name;                                                       // 0x0068   (0x0010)  
	TArray<FWTLBuildingBlock>                          Blocks;                                                     // 0x0078   (0x0010)  
	TArray<FWTLBuildingDoor>                           Doors;                                                      // 0x0088   (0x0010)  
	TArray<FWTLBuildingWorkbench>                      Workbenches;                                                // 0x0098   (0x0010)  
};

/// Struct /Script/WTL.WTLBuildingWorkbench
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLBuildingWorkbench : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int64_t                                            LocationBuildingID;                                         // 0x0030   (0x0008)  
	int64_t                                            BuildingBlockID;                                            // 0x0038   (0x0008)  
	int64_t                                            LocationStorageID;                                          // 0x0040   (0x0008)  
	char                                               Level;                                                      // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x17];                                      // 0x0049   (0x0017)  MISSED
};

/// Struct /Script/WTL.WTLBuildingDoor
/// Size: 0x0040 (0x000028 - 0x000068)
struct FWTLBuildingDoor : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int64_t                                            LocationBuildingID;                                         // 0x0030   (0x0008)  
	int64_t                                            BuildingBlockID;                                            // 0x0038   (0x0008)  
	bool                                               Closed;                                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	int64_t                                            LockID;                                                     // 0x0048   (0x0008)  
	EWTLBuildingDoorLockType                           LockType;                                                   // 0x0050   (0x0001)  
	bool                                               Locked;                                                     // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x0052   (0x0006)  MISSED
	FString                                            KeyCode;                                                    // 0x0058   (0x0010)  
};

/// Struct /Script/WTL.WTLBuildingBlock
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLBuildingBlock : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int64_t                                            LocationBuildingID;                                         // 0x0030   (0x0008)  
	int64_t                                            CharacterID;                                                // 0x0038   (0x0008)  
	int32_t                                            BlockTypeID;                                                // 0x0040   (0x0004)  
	EWTLBlockType                                      Type;                                                       // 0x0044   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x0048   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0054   (0x000C)  
	EWTLBuildingBlockState                             State;                                                      // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            Condition;                                                  // 0x0064   (0x0004)  
	FWTLDateTime                                       CreationDate;                                               // 0x0068   (0x0008)  
	int64_t                                            InteractiveObjectID;                                        // 0x0070   (0x0008)  
};

/// Struct /Script/WTL.WTLCamp
/// Size: 0x0040 (0x000028 - 0x000068)
struct FWTLCamp : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int32_t                                            LocationID;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	int64_t                                            CharacterID;                                                // 0x0038   (0x0008)  
	FVector                                            Position;                                                   // 0x0040   (0x000C)  
	FVector                                            Rotation;                                                   // 0x004C   (0x000C)  
	FString                                            Name;                                                       // 0x0058   (0x0010)  
};

/// Struct /Script/WTL.WTLLocationStorage
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLLocationStorage : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	int32_t                                            LocationID;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0034   (0x0004)  MISSED
	int64_t                                            LocationBuildingID;                                         // 0x0038   (0x0008)  
	int64_t                                            BuildingBlockID;                                            // 0x0040   (0x0008)  
	EWTLLocationStorageType                            Type;                                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x004C   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0058   (0x000C)  
	bool                                               AutoDestroy;                                                // 0x0064   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0065   (0x0003)  MISSED
	FWTLDateTime                                       AutoDestroyTime;                                            // 0x0068   (0x0008)  
	char                                               SlotCount;                                                  // 0x0070   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLShortCharacterInfo
/// Size: 0x0210 (0x000028 - 0x000238)
struct FWTLShortCharacterInfo : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	EWTLSex                                            Sex;                                                        // 0x0040   (0x0001)  
	char                                               Level;                                                      // 0x0041   (0x0001)  
	EWTLCharacterClass                                 Class;                                                      // 0x0042   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0043   (0x0001)  MISSED
	float                                              Health;                                                     // 0x0044   (0x0004)  
	bool                                               ReadyToGame;                                                // 0x0048   (0x0001)  
	char                                               Strength;                                                   // 0x0049   (0x0001)  
	char                                               Dexterity;                                                  // 0x004A   (0x0001)  
	char                                               Stamina;                                                    // 0x004B   (0x0001)  
	char                                               Accuracy;                                                   // 0x004C   (0x0001)  
	char                                               Intelligence;                                               // 0x004D   (0x0001)  
	char                                               Fortune;                                                    // 0x004E   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x004F   (0x0001)  MISSED
	FWTLCharacterSlotItemInfo                          HeadItem;                                                   // 0x0050   (0x0030)  
	FWTLCharacterSlotItemInfo                          TorsoItem;                                                  // 0x0080   (0x0030)  
	FWTLCharacterSlotItemInfo                          LegsItem;                                                   // 0x00B0   (0x0030)  
	FWTLCharacterSlotItemInfo                          FeetItem;                                                   // 0x00E0   (0x0030)  
	FWTLCharacterSlotItemInfo                          ArmsItem;                                                   // 0x0110   (0x0030)  
	TArray<FWTLFastAccessSlotItemInfo>                 FastAccessSlots;                                            // 0x0140   (0x0010)  
	EWTLFaction                                        Faction;                                                    // 0x0150   (0x0001)  
	char                                               Reputation;                                                 // 0x0151   (0x0001)  
	char                                               Rank;                                                       // 0x0152   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x0153   (0x0001)  MISSED
	uint16_t                                           ClanID;                                                     // 0x0154   (0x0002)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x0156   (0x0001)  
	EWTLPlayerType                                     PlayerType;                                                 // 0x0157   (0x0001)  
	char                                               BodyType;                                                   // 0x0158   (0x0001)  
	bool                                               PVPEnabled;                                                 // 0x0159   (0x0001)  
	unsigned char                                      UnknownData03_5[0x6];                                       // 0x015A   (0x0006)  MISSED
	TArray<FWTLCharacterCustomizationRecord>           CustomizationInfo;                                          // 0x0160   (0x0010)  
	FWTLCharacterEquipmentItemInfo                     EquipmentSlot1;                                             // 0x0170   (0x0030)  
	FWTLCharacterEquipmentItemInfo                     EquipmentSlot2;                                             // 0x01A0   (0x0030)  
	FWTLCharacterEquipmentItemInfo                     EquipmentSlot3;                                             // 0x01D0   (0x0030)  
	FWTLCharacterEquipmentItemInfo                     EquipmentSlot4;                                             // 0x0200   (0x0030)  
	char                                               EquipmentSlotStates;                                        // 0x0230   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0231   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterEquipmentItemInfo
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLCharacterEquipmentItemInfo : FWTLPacket
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0029   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x002A   (0x0002)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLFastAccessSlotItemInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLFastAccessSlotItemInfo : FWTLPacket
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0029   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x002A   (0x0002)  
	uint16_t                                           ScopeAttachmentTypeID;                                      // 0x002C   (0x0002)  
	uint16_t                                           FlashlightAttachmentTypeID;                                 // 0x002E   (0x0002)  
	uint16_t                                           MuzzleAttachmentTypeID;                                     // 0x0030   (0x0002)  
	char                                               CustomizationScalar;                                        // 0x0032   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0033   (0x0001)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCharacterSlotItemInfo
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLCharacterSlotItemInfo : FWTLPacket
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0029   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x002A   (0x0002)  
	char                                               CustomizationScalar;                                        // 0x002C   (0x0001)  
	char                                               CustomizationColor;                                         // 0x002D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLWeatherInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLWeatherInfo : FWTLPacket
{ 
	EWTLWeatherType                                    WeatherType;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              WindStrength;                                               // 0x002C   (0x0004)  
	float                                              WindSpeed;                                                  // 0x0030   (0x0004)  
	float                                              WindMinGustAmount;                                          // 0x0034   (0x0004)  
	float                                              WindMaxGustAmount;                                          // 0x0038   (0x0004)  
	float                                              WindAngle;                                                  // 0x003C   (0x0004)  
};

/// Struct /Script/WTL.WTLInventoryItemDelta
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLInventoryItemDelta : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLCraftItem
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLCraftItem : FWTLPacket
{ 
	int32_t                                            ID;                                                         // 0x0028   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x002D   (0x0001)  MISSED
	int16_t                                            ItemTypeID;                                                 // 0x002E   (0x0002)  
	int32_t                                            ItemCount;                                                  // 0x0030   (0x0004)  
	EWTLCraftType                                      CraftType;                                                  // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	int32_t                                            MinCraftExperience;                                         // 0x0038   (0x0004)  
	int32_t                                            CraftTime;                                                  // 0x003C   (0x0004)  
	TArray<FWTLCraftItemPart>                          Parts;                                                      // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLCraftItemPart
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLCraftItemPart : FWTLPacket
{ 
	int64_t                                            ID;                                                         // 0x0028   (0x0008)  
	uint32_t                                           CraftItemID;                                                // 0x0030   (0x0004)  
	EWTLItemType                                       ItemType;                                                   // 0x0034   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0035   (0x0001)  MISSED
	int16_t                                            ItemTypeID;                                                 // 0x0036   (0x0002)  
	int32_t                                            Count;                                                      // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCraftRequest
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLCraftRequest : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	int64_t                                            CharacterID;                                                // 0x0030   (0x0008)  
	FString                                            CharacterName;                                              // 0x0038   (0x0010)  
	uint64_t                                           CraftItemID;                                                // 0x0048   (0x0008)  
	FWTLDateTime                                       StartTime;                                                  // 0x0050   (0x0008)  
	FWTLDateTime                                       EndTime;                                                    // 0x0058   (0x0008)  
};

/// Struct /Script/WTL.WTLBuildingBlockTypeList
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLBuildingBlockTypeList : FWTLPacket
{ 
	TArray<FWTLBuildingBlockType>                      Data;                                                       // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLBuildingBlockType
/// Size: 0x0048 (0x000028 - 0x000070)
struct FWTLBuildingBlockType : FWTLPacket
{ 
	int32_t                                            ID;                                                         // 0x0028   (0x0004)  
	EWTLBlockType                                      Type;                                                       // 0x002C   (0x0001)  
	char                                               Level;                                                      // 0x002D   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x002E   (0x0002)  MISSED
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	int32_t                                            Durability;                                                 // 0x0040   (0x0004)  
	int32_t                                            BuildDurabilityIncrement;                                   // 0x0044   (0x0004)  
	int32_t                                            RepairDurabilityIncrement;                                  // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	FString                                            PrefabName;                                                 // 0x0050   (0x0010)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLBuildingBlockResourceCostItem
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLBuildingBlockResourceCostItem : FWTLPacket
{ 
	int16_t                                            ResourceID;                                                 // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	FString                                            ResourceName;                                               // 0x0030   (0x0010)  
	int32_t                                            Count;                                                      // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLShortTextInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLShortTextInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLTextInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLTextInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLConsoleCommand
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLConsoleCommand : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0028   (0x0020)  MISSED
};

/// Struct /Script/WTL.WTLVoicePacket
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLVoicePacket : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLVoiceWorldInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLVoiceWorldInfo : FWTLPacket
{ 
	TArray<FWTLVoiceCharacterPosition>                 CharacterPositions;                                         // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLVoiceCharacterPosition
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLVoiceCharacterPosition : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	FVector                                            Position;                                                   // 0x0030   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLChatMessage
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLChatMessage : FWTLPacket
{ 
	int64_t                                            CharacterID;                                                // 0x0028   (0x0008)  
	FString                                            CharacterName;                                              // 0x0030   (0x0010)  
	EWTLChatMessageType                                Type;                                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	FString                                            Text;                                                       // 0x0048   (0x0010)  
};

/// Struct /Script/WTL.WTLChatMessageRequest
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLChatMessageRequest : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Struct /Script/WTL.WTLConnectionCloseInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLConnectionCloseInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLClientErrorInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLClientErrorInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLCharacterDeathInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLCharacterDeathInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLCharacterDamageInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLCharacterDamageInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLMonsterHitCharacterInfo
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLMonsterHitCharacterInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0028   (0x0030)  MISSED
};

/// Struct /Script/WTL.WTLCharacterHitMonsterInfo
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLCharacterHitMonsterInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0028   (0x0030)  MISSED
};

/// Struct /Script/WTL.WTLCharacterHitCharacterInfo
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLCharacterHitCharacterInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0028   (0x0030)  MISSED
};

/// Struct /Script/WTL.WTLCurrentStateChangeInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLCurrentStateChangeInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLBuildingSettings
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLBuildingSettings : FWTLPacket
{ 
	int16_t                                            UpdateInterval;                                             // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLLoadAmmoInWeaponInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLLoadAmmoInWeaponInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLUniteAllItemsInfo
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLUniteAllItemsInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLUniteItemsInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLUniteItemsInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLSplitItemInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLSplitItemInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLMoveItemsInfo
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLMoveItemsInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Struct /Script/WTL.WTLServerShutdownInfo
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLServerShutdownInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLMonsterTransform
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLMonsterTransform : FWTLPacket
{ 
	int64_t                                            MonsterID;                                                  // 0x0028   (0x0008)  
	uint64_t                                           Timestamp;                                                  // 0x0030   (0x0008)  
	FVector                                            Position;                                                   // 0x0038   (0x000C)  
	FVector                                            Velocity;                                                   // 0x0044   (0x000C)  
};

/// Struct /Script/WTL.WTLCharacterTransform
/// Size: 0x0038 (0x000028 - 0x000060)
struct FWTLCharacterTransform : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	uint64_t                                           Timestamp;                                                  // 0x0030   (0x0008)  
	char                                               PingCategory;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	FVector                                            Position;                                                   // 0x003C   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0048   (0x000C)  
	FVector                                            Velocity;                                                   // 0x0054   (0x000C)  
};

/// Struct /Script/WTL.WTLCharacterMapMarker
/// Size: 0x0040 (0x000028 - 0x000068)
struct FWTLCharacterMapMarker : FWTLPacket
{ 
	uint32_t                                           LocationID;                                                 // 0x0028   (0x0004)  
	char                                               Type;                                                       // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FString                                            Color;                                                      // 0x0030   (0x0010)  
	FVector                                            Position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x004C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0050   (0x0010)  
	bool                                               ShowOnMinimap;                                              // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterCustomizationInfo
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLCharacterCustomizationInfo : FWTLPacket
{ 
	uint64_t                                           CharacterID;                                                // 0x0028   (0x0008)  
	EWTLSex                                            Sex;                                                        // 0x0030   (0x0001)  
	char                                               BodyType;                                                   // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	TArray<FWTLCharacterCustomizationRecord>           Parts;                                                      // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLStorageOrder
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLStorageOrder : FWTLPacket
{ 
	EWTLStorageType                                    StorageType;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           StorageID;                                                  // 0x0030   (0x0008)  
	TArray<FWTLStorageSlot>                            Slots;                                                      // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLStorageSlot
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLStorageSlot : FWTLPacket
{ 
	char                                               SlotNumber;                                                 // 0x0028   (0x0001)  
	EWTLItemType                                       ItemType;                                                   // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLBodyPartSlot
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLBodyPartSlot : FWTLPacket
{ 
	EWTLBodyPart                                       BodyPart;                                                   // 0x0028   (0x0001)  
	EWTLItemType                                       ItemType;                                                   // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentityStorage
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLIdentityStorage : FWTLPacket
{ 
	EWTLStorageType                                    Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentityCommissionItem
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLIdentityCommissionItem : FWTLPacket
{ 
	uint32_t                                           ShopID;                                                     // 0x0028   (0x0004)  
	EWTLItemType                                       Type;                                                       // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	uint64_t                                           CommissionID;                                               // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLKeyValueThreeInt64Int64String
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLKeyValueThreeInt64Int64String : FWTLPacket
{ 
	uint64_t                                           Key;                                                        // 0x0028   (0x0008)  
	uint64_t                                           Value1;                                                     // 0x0030   (0x0008)  
	FString                                            Value2;                                                     // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLKeyValuePairInt64String
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLKeyValuePairInt64String : FWTLPacket
{ 
	uint64_t                                           Key;                                                        // 0x0028   (0x0008)  
	FString                                            Value;                                                      // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLKeyValuePairInt16String
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLKeyValuePairInt16String : FWTLPacket
{ 
	uint16_t                                           Key;                                                        // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x002A   (0x0006)  MISSED
	FString                                            Value;                                                      // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLIdentityItem
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLIdentityItem : FWTLPacket
{ 
	EWTLItemType                                       Type;                                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           ID;                                                         // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentityPair8
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentityPair8 : FWTLPacket
{ 
	char                                               Value1;                                                     // 0x0028   (0x0001)  
	char                                               Value2;                                                     // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLIdentity8
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentity8 : FWTLPacket
{ 
	char                                               Value;                                                      // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLIdentityPair16
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentityPair16 : FWTLPacket
{ 
	uint16_t                                           Value1;                                                     // 0x0028   (0x0002)  
	uint16_t                                           Value2;                                                     // 0x002A   (0x0002)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLIdentityPair32
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentityPair32 : FWTLPacket
{ 
	uint32_t                                           Value1;                                                     // 0x0028   (0x0004)  
	uint32_t                                           Value2;                                                     // 0x002C   (0x0004)  
};

/// Struct /Script/WTL.WTLIdentityFour64
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLIdentityFour64 : FWTLPacket
{ 
	uint64_t                                           Value1;                                                     // 0x0028   (0x0008)  
	uint64_t                                           Value2;                                                     // 0x0030   (0x0008)  
	uint64_t                                           Value3;                                                     // 0x0038   (0x0008)  
	uint64_t                                           Value4;                                                     // 0x0040   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentityThree64
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLIdentityThree64 : FWTLPacket
{ 
	uint64_t                                           Value1;                                                     // 0x0028   (0x0008)  
	uint64_t                                           Value2;                                                     // 0x0030   (0x0008)  
	uint64_t                                           Value3;                                                     // 0x0038   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentityPair64
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLIdentityPair64 : FWTLPacket
{ 
	uint64_t                                           Value1;                                                     // 0x0028   (0x0008)  
	uint64_t                                           Value2;                                                     // 0x0030   (0x0008)  
};

/// Struct /Script/WTL.WTLIdentity64
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLIdentity64 : FWTLPacket
{ 
	uint64_t                                           Value;                                                      // 0x0028   (0x0008)  
};

/// Struct /Script/WTL.WTLServerInfo
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLServerInfo : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	FWTLVersionInfo                                    Version;                                                    // 0x0030   (0x0008)  
	FWTLShortVersionInfo                               ProtocolVersion;                                            // 0x0038   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x003A   (0x0006)  MISSED
	FWTLDateTime                                       StartTime;                                                  // 0x0040   (0x0008)  
	int64_t                                            UpTime;                                                     // 0x0048   (0x0008)  
	float                                              WorldTime;                                                  // 0x0050   (0x0004)  
	int16_t                                            TimeScale;                                                  // 0x0054   (0x0002)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLErrorInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLErrorInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLActivateTicketInfo
/// Size: 0x0020 (0x000028 - 0x000048)
struct FWTLActivateTicketInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0028   (0x0020)  MISSED
};

/// Struct /Script/WTL.WTLGameServerShutdownInfo
/// Size: 0x0018 (0x000028 - 0x000040)
struct FWTLGameServerShutdownInfo : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/WTL.WTLGameServerShortInfo
/// Size: 0x0050 (0x000028 - 0x000078)
struct FWTLGameServerShortInfo : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	EWTLGameServerType                                 Type;                                                       // 0x0030   (0x0001)  
	FWTLShortVersionInfo                               ProtocolVersion;                                            // 0x0031   (0x0002)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0033   (0x0001)  MISSED
	FWTLVersionInfo                                    Version;                                                    // 0x0034   (0x0008)  
	FWTLVersionInfo                                    MinClientVersion;                                           // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	FString                                            IPAddress;                                                  // 0x0048   (0x0010)  
	int16_t                                            MainPort;                                                   // 0x0058   (0x0002)  
	int16_t                                            PingPort;                                                   // 0x005A   (0x0002)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0060   (0x0010)  
	int32_t                                            MaxPlayers;                                                 // 0x0070   (0x0004)  
	int32_t                                            PlayersCount;                                               // 0x0074   (0x0004)  
};

/// Struct /Script/WTL.WTLGameServerInfo
/// Size: 0x00A0 (0x000028 - 0x0000C8)
struct FWTLGameServerInfo : FWTLPacket
{ 
	uint64_t                                           ID;                                                         // 0x0028   (0x0008)  
	EWTLGameServerType                                 Type;                                                       // 0x0030   (0x0001)  
	FWTLShortVersionInfo                               ProtocolVersion;                                            // 0x0031   (0x0002)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0033   (0x0001)  MISSED
	FWTLVersionInfo                                    Version;                                                    // 0x0034   (0x0008)  
	FWTLVersionInfo                                    MinClientVersion;                                           // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0044   (0x0004)  MISSED
	FString                                            IPAddress;                                                  // 0x0048   (0x0010)  
	int16_t                                            MainPort;                                                   // 0x0058   (0x0002)  
	int16_t                                            PingPort;                                                   // 0x005A   (0x0002)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0060   (0x0010)  
	FString                                            Description;                                                // 0x0070   (0x0010)  
	unsigned char                                      UnknownData03_5[0x30];                                      // 0x0080   (0x0030)  MISSED
	int32_t                                            MaxPlayers;                                                 // 0x00B0   (0x0004)  
	int32_t                                            PlayersCount;                                               // 0x00B4   (0x0004)  
	FString                                            Hash;                                                       // 0x00B8   (0x0010)  
};

/// Struct /Script/WTL.WTLGameClientInfo
/// Size: 0x0028 (0x000028 - 0x000050)
struct FWTLGameClientInfo : FWTLPacket
{ 
	FWTLShortVersionInfo                               ProtocolVersion;                                            // 0x0028   (0x0002)  
	FWTLVersionInfo                                    Version;                                                    // 0x002A   (0x0008)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	uint64_t                                           accountid;                                                  // 0x0038   (0x0008)  
	FString                                            TicketUID;                                                  // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLClientAuthorizationInfo
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLClientAuthorizationInfo : FWTLPacket
{ 
	FWTLShortVersionInfo                               ProtocolVersion;                                            // 0x0028   (0x0002)  
	FWTLVersionInfo                                    Version;                                                    // 0x002A   (0x0008)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	FString                                            Login;                                                      // 0x0038   (0x0010)  
	FString                                            Password;                                                   // 0x0048   (0x0010)  
};

/// Struct /Script/WTL.WTLConnectionTest
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLConnectionTest : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLPing
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLPing : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLEvent
/// Size: 0x0010 (0x000028 - 0x000038)
struct FWTLEvent : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLEventHeader
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLEventHeader : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLResponse
/// Size: 0x0030 (0x000028 - 0x000058)
struct FWTLResponse : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0028   (0x0030)  MISSED
};

/// Struct /Script/WTL.WTLRequest
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLRequest : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLServerMessageHeader
/// Size: 0x0008 (0x000028 - 0x000030)
struct FWTLServerMessageHeader : FWTLPacket
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/WTL.WTLQuestAchievements
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLQuestAchievements
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FWTLQuestAchievementStaticMesh>             Meshes;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLQuestAchievementStaticMesh
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLQuestAchievementStaticMesh
{ 
	AStaticMeshActor*                                  StaticMesh;                                                 // 0x0000   (0x0008)  
	int32_t                                            QuestStatesForShowMesh;                                     // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLQuestState
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLQuestState
{ 
	int32_t                                            QuestID;                                                    // 0x0000   (0x0004)  
	EWTLQuestState                                     State;                                                      // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	FWTLDateTime                                       LastChangeDate;                                             // 0x0008   (0x0008)  
	bool                                               Active;                                                     // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLRandomMiningPoint
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLRandomMiningPoint
{ 
	FVector                                            Position;                                                   // 0x0000   (0x000C)  
	float                                              Radius;                                                     // 0x000C   (0x0004)  
	float                                              Capacity;                                                   // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLRangedWeaponFireAnimation
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLRangedWeaponFireAnimation
{ 
	float                                              MaxTime;                                                    // 0x0000   (0x0004)  
	float                                              ElapsedTime;                                                // 0x0004   (0x0004)  
	FVector2D                                          LastValue;                                                  // 0x0008   (0x0008)  
	float                                              MultiplierX;                                                // 0x0010   (0x0004)  
	float                                              MultiplierY;                                                // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.InlineTextImageStyleRow
/// Size: 0x0098 (0x000008 - 0x0000A0)
struct FInlineTextImageStyleRow : FTableRowBase
{ 
	FInlineTextImageStyle                              InlineTextImageStyle;                                       // 0x0008   (0x0098)  
};

/// Struct /Script/WTL.HyperlinkTextStyleRow
/// Size: 0x0500 (0x000008 - 0x000508)
struct FHyperlinkTextStyleRow : FTableRowBase
{ 
	FHyperlinkStyle                                    HyperlinkStyle;                                             // 0x0008   (0x0500)  
};

/// Struct /Script/WTL.WTLScriptedEventInfo
/// Size: 0x0004 (0x000000 - 0x000004)
struct FWTLScriptedEventInfo
{ 
	EWTLScriptedEventMethodType                        Method;                                                     // 0x0000   (0x0004)  
};

/// Struct /Script/WTL.WTLAnnounceEventScriptedEventInfo
/// Size: 0x001C (0x000004 - 0x000020)
struct FWTLAnnounceEventScriptedEventInfo : FWTLScriptedEventInfo
{ 
	EWTLServerEventType                                EventType;                                                  // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	FString                                            EventDescription;                                           // 0x0008   (0x0010)  
	float                                              EventDuration;                                              // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLSpawnEnemyScriptedEventInfo
/// Size: 0x005C (0x000004 - 0x000060)
struct FWTLSpawnEnemyScriptedEventInfo : FWTLScriptedEventInfo
{ 
	float                                              LifeSpan;                                                   // 0x0004   (0x0004)  
	uint16_t                                           EnemyId;                                                    // 0x0008   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	FString                                            EnemyAssetClass;                                            // 0x0010   (0x0010)  
	uint16_t                                           Count;                                                      // 0x0020   (0x0002)  
	char                                               MinLevel;                                                   // 0x0022   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0023   (0x0001)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	TArray<FVector>                                    Locations;                                                  // 0x0028   (0x0010)  
	float                                              SpawnRange;                                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FWTLItemDropInfo>                           AdditionalLoot;                                             // 0x0040   (0x0010)  
	FString                                            CustomTag;                                                  // 0x0050   (0x0010)  
};

/// Struct /Script/WTL.WTLSpawnMonsterScriptedEventInfo
/// Size: 0x0044 (0x000004 - 0x000048)
struct FWTLSpawnMonsterScriptedEventInfo : FWTLScriptedEventInfo
{ 
	float                                              LifeSpan;                                                   // 0x0004   (0x0004)  
	uint16_t                                           MonsterID;                                                  // 0x0008   (0x0002)  
	uint16_t                                           Count;                                                      // 0x000A   (0x0002)  
	char                                               MinLevel;                                                   // 0x000C   (0x0001)  
	char                                               MaxLevel;                                                   // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<FVector>                                    Locations;                                                  // 0x0010   (0x0010)  
	float                                              SpawnRange;                                                 // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0024   (0x0004)  MISSED
	TArray<FWTLItemDropInfo>                           AdditionalLoot;                                             // 0x0028   (0x0010)  
	FString                                            CustomTag;                                                  // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLSpawnObjectScriptedEventInfo
/// Size: 0x0034 (0x000004 - 0x000038)
struct FWTLSpawnObjectScriptedEventInfo : FWTLScriptedEventInfo
{ 
	float                                              LifeSpan;                                                   // 0x0004   (0x0004)  
	FString                                            AssetClass;                                                 // 0x0008   (0x0010)  
	TArray<FTransform>                                 Transforms;                                                 // 0x0018   (0x0010)  
	FString                                            CustomTag;                                                  // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLAdditionalLoot
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLAdditionalLoot
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	uint16_t                                           MinCount;                                                   // 0x0004   (0x0002)  
	uint16_t                                           MaxCount;                                                   // 0x0006   (0x0002)  
	uint32_t                                           MinCondition;                                               // 0x0008   (0x0004)  
	uint32_t                                           MaxCondition;                                               // 0x000C   (0x0004)  
	float                                              NormalChance;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            ModificationData;                                           // 0x0018   (0x0010)  
};

/// Struct /Script/WTL.WTLDriverInfo
/// Size: 0x0088 (0x000000 - 0x000088)
struct FWTLDriverInfo
{ 
	unsigned char                                      UnknownData00_1[0x88];                                      // 0x0000   (0x0088)  MISSED
};

/// Struct /Script/WTL.WTLSettings
/// Size: 0x0420 (0x000000 - 0x000420)
struct FWTLSettings
{ 
	FWTLConnectionSettings                             Connection;                                                 // 0x0000   (0x0018)  
	FWTLDedicatedServerSettings                        DedicatedServer;                                            // 0x0018   (0x0108)  
	FWTLReputationSettings                             Reputation;                                                 // 0x0120   (0x0010)  
	FWTLArenaSettings                                  Arena;                                                      // 0x0130   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0134   (0x0004)  MISSED
	FWTLWorldConfig                                    WorldConfig;                                                // 0x0138   (0x0058)  
	FWTLGameSettings                                   Game;                                                       // 0x0190   (0x00D0)  
	FWTLGraphicsSettings                               Graphics;                                                   // 0x0260   (0x0078)  
	FWTLAudioSettings                                  Audio;                                                      // 0x02D8   (0x0024)  
	FWTLControlsSettings                               Controls;                                                   // 0x02FC   (0x0018)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0314   (0x0004)  MISSED
	FWTLInterfaceSettings                              Interface;                                                  // 0x0318   (0x0048)  
	FWTLPostProcessSettings                            PostProcess;                                                // 0x0360   (0x0014)  
	unsigned char                                      UnknownData02_5[0x4];                                       // 0x0374   (0x0004)  MISSED
	FWTLLocalCharacterSettings                         LocalCharacter;                                             // 0x0378   (0x0010)  
	FWTLSecuritySettings                               Security;                                                   // 0x0388   (0x0020)  
	FWTLIdentificationSettings                         Identification;                                             // 0x03A8   (0x0014)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x03BC   (0x0004)  MISSED
	FWTLVOIPSettings                                   VOIP;                                                       // 0x03C0   (0x0018)  
	FWTLFortificationCaptureSettings                   FortificationCaptureSettings;                               // 0x03D8   (0x0034)  
	FWTLGameplaySettings                               Gameplay;                                                   // 0x040C   (0x0008)  
	FWTLGodConsoleSettings                             GodConsole;                                                 // 0x0414   (0x000B)  
	bool                                               IsLoadFromGameUserSettings;                                 // 0x041F   (0x0001)  
};

/// Struct /Script/WTL.WTLGodConsoleSettings
/// Size: 0x000B (0x000000 - 0x00000B)
struct FWTLGodConsoleSettings
{ 
	bool                                               bIsShowFavouritesWeaponsList;                               // 0x0000   (0x0001)  
	bool                                               bIsShowFavouritesAmmosList;                                 // 0x0001   (0x0001)  
	bool                                               bIsShowFavouritesMedicineList;                              // 0x0002   (0x0001)  
	bool                                               bIsShowFavouritesStuffList;                                 // 0x0003   (0x0001)  
	bool                                               bIsShowFavouritesClothesList;                               // 0x0004   (0x0001)  
	bool                                               bIsShowFavouritesResourcesList;                             // 0x0005   (0x0001)  
	bool                                               bIsShowFavouritesArtefactsList;                             // 0x0006   (0x0001)  
	bool                                               bIsShowFavouritesKitsList;                                  // 0x0007   (0x0001)  
	bool                                               bIsShowFavouritesMonstersList;                              // 0x0008   (0x0001)  
	bool                                               bIsShowFavouritesLocationsList;                             // 0x0009   (0x0001)  
	bool                                               bIsShowFavouritesQuestsList;                                // 0x000A   (0x0001)  
};

/// Struct /Script/WTL.WTLGameplaySettings
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLGameplaySettings
{ 
	int32_t                                            PrimeTimeBeginHour;                                         // 0x0000   (0x0004)  
	int32_t                                            PrimeTimeEndHour;                                           // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLFortificationCaptureSettings
/// Size: 0x0034 (0x000000 - 0x000034)
struct FWTLFortificationCaptureSettings
{ 
	int32_t                                            ScoreForCharacterKill;                                      // 0x0000   (0x0004)  
	int32_t                                            ScoreForCharacterResurection;                               // 0x0004   (0x0004)  
	int32_t                                            ScoreForCharacterDeath;                                     // 0x0008   (0x0004)  
	int32_t                                            ScoreForNPCKill;                                            // 0x000C   (0x0004)  
	int32_t                                            ScoreForPointCapture;                                       // 0x0010   (0x0004)  
	int32_t                                            ScoreForPointReconfiguration;                               // 0x0014   (0x0004)  
	int32_t                                            ScoreForPointRestored;                                      // 0x0018   (0x0004)  
	int32_t                                            ScoreForPointJamming;                                       // 0x001C   (0x0004)  
	float                                              ScoreMultiplierForLoose;                                    // 0x0020   (0x0004)  
	int32_t                                            ScoreMultiplierForScanning;                                 // 0x0024   (0x0004)  
	int32_t                                            ScanningPerOneScore;                                        // 0x0028   (0x0004)  
	int32_t                                            JammersScoringIntervalSeconds;                              // 0x002C   (0x0004)  
	int32_t                                            ScoreLimitForCapture;                                       // 0x0030   (0x0004)  
};

/// Struct /Script/WTL.WTLVOIPSettings
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLVOIPSettings
{ 
	int32_t                                            RecordDeviceID;                                             // 0x0000   (0x0004)  
	bool                                               bIsEnabled;                                                 // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	TArray<uint64_t>                                   CharacterBlackList;                                         // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLIdentificationSettings
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLIdentificationSettings
{ 
	bool                                               bIsPlayersIdentificationEnabled;                            // 0x0000   (0x0001)  
	bool                                               bIsMonstersIdentificationEnabled;                           // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            MonstersSimplifiedIdentificationEnableDistance;             // 0x0004   (0x0004)  
	bool                                               bIsNPCIdentificationEnabled;                                // 0x0008   (0x0001)  
	bool                                               bAlwaysShowGroupAndClanMembers;                             // 0x0009   (0x0001)  
	bool                                               bAlwaysShowFriendlyDevices;                                 // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x000B   (0x0001)  MISSED
	int32_t                                            SimplifiedIdentificationEnableDistance;                     // 0x000C   (0x0004)  
	float                                              IdentificationTransparency;                                 // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLSecuritySettings
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLSecuritySettings
{ 
	float                                              StandbyRxTriggerTime;                                       // 0x0000   (0x0004)  
	int32_t                                            StandbyRxAttempts;                                          // 0x0004   (0x0004)  
	float                                              StandbyTxTriggerTime;                                       // 0x0008   (0x0004)  
	int32_t                                            StandbyTxAttempts;                                          // 0x000C   (0x0004)  
	float                                              BadPingTriggerTimeInterval;                                 // 0x0010   (0x0004)  
	int32_t                                            BadPingValue;                                               // 0x0014   (0x0004)  
	float                                              JoinTimeTreshold;                                           // 0x0018   (0x0004)  
	int32_t                                            TimeDiscrepancyDetectionAttemts;                            // 0x001C   (0x0004)  
};

/// Struct /Script/WTL.WTLLocalCharacterSettings
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLLocalCharacterSettings
{ 
	FString                                            Cache;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.WTLPostProcessSettings
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLPostProcessSettings
{ 
	float                                              GammaLevel;                                                 // 0x0000   (0x0004)  
	float                                              Contrast;                                                   // 0x0004   (0x0004)  
	float                                              RedBalance;                                                 // 0x0008   (0x0004)  
	float                                              GreenBalance;                                               // 0x000C   (0x0004)  
	float                                              BlueBalance;                                                // 0x0010   (0x0004)  
};

/// Struct /Script/WTL.WTLInterfaceSettings
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLInterfaceSettings
{ 
	FString                                            PDAInterfaceColor;                                          // 0x0000   (0x0010)  
	bool                                               PDAFirstIndicatorOn;                                        // 0x0010   (0x0001)  
	bool                                               PDASecondIndicatorOn;                                       // 0x0011   (0x0001)  
	bool                                               PDAAchievementsSimplifiedView;                              // 0x0012   (0x0001)  
	bool                                               CrosshairVisibility;                                        // 0x0013   (0x0001)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            CrosshairColor;                                             // 0x0018   (0x0010)  
	bool                                               PlayerStatusVisibility;                                     // 0x0028   (0x0001)  
	bool                                               WeaponInfoVisibility;                                       // 0x0029   (0x0001)  
	bool                                               FastAccessSlotsVisibility;                                  // 0x002A   (0x0001)  
	bool                                               LevelBarVisibility;                                         // 0x002B   (0x0001)  
	bool                                               MinimapVisibility;                                          // 0x002C   (0x0001)  
	bool                                               MinimapTimeVisibility;                                      // 0x002D   (0x0001)  
	bool                                               ShowMinimapLocalTime;                                       // 0x002E   (0x0001)  
	bool                                               FPSCounterVisibility;                                       // 0x002F   (0x0001)  
	bool                                               HighLightQuestItemsOnlyForActiveQuest;                      // 0x0030   (0x0001)  
	bool                                               ShowActiveQuestInfoWhenPDAQuestLogShow;                     // 0x0031   (0x0001)  
	bool                                               HideTextChatArea;                                           // 0x0032   (0x0001)  
	bool                                               CollapseChatAfterMessageSent;                               // 0x0033   (0x0001)  
	bool                                               SelectCommonFilterAfterCollapseChat;                        // 0x0034   (0x0001)  
	bool                                               FilterCensorshipInChat;                                     // 0x0035   (0x0001)  
	bool                                               UseStrongDumbCensorshipFilter;                              // 0x0036   (0x0001)  
	bool                                               ShowDamageIdentification;                                   // 0x0037   (0x0001)  
	bool                                               ShowUnarmedCrosshair;                                       // 0x0038   (0x0001)  
	bool                                               ShowUseHint;                                                // 0x0039   (0x0001)  
	bool                                               ShowCharacterPreviewInInventory;                            // 0x003A   (0x0001)  
	bool                                               ShowDamagePointerWithHiddenHUD;                             // 0x003B   (0x0001)  
	bool                                               HideFastAccessSlotsAfterSomeTime;                           // 0x003C   (0x0001)  
	bool                                               ShowOptionalWarnings;                                       // 0x003D   (0x0001)  
	bool                                               ShowNotEnoughStaminaToJumpWarning;                          // 0x003E   (0x0001)  
	bool                                               ShowNotEnoughStaminaToSprintWarning;                        // 0x003F   (0x0001)  
	bool                                               ShowCannotSprintInventoryOverloadWarning;                   // 0x0040   (0x0001)  
	bool                                               ShowNoNutsInInventoryToThrowWarning;                        // 0x0041   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0042   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLControlsSettings
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLControlsSettings
{ 
	float                                              MouseSensitivity;                                           // 0x0000   (0x0004)  
	float                                              MouseSensitivityInMiniGames;                                // 0x0004   (0x0004)  
	bool                                               MouseInvert;                                                // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              GamepadAimingSensitivity;                                   // 0x000C   (0x0004)  
	bool                                               GamepadAimingInvert;                                        // 0x0010   (0x0001)  
	bool                                               ChangeSensitivityOnAim;                                     // 0x0011   (0x0001)  
	bool                                               AimToggle;                                                  // 0x0012   (0x0001)  
	bool                                               AutomaticallyReloadWeapon;                                  // 0x0013   (0x0001)  
	bool                                               CrouchToggle;                                               // 0x0014   (0x0001)  
	bool                                               SprintToggle;                                               // 0x0015   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0016   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLAudioSettings
/// Size: 0x0024 (0x000000 - 0x000024)
struct FWTLAudioSettings
{ 
	int32_t                                            AudioDriver;                                                // 0x0000   (0x0004)  
	int32_t                                            SpeakerMode;                                                // 0x0004   (0x0004)  
	int32_t                                            AudioQualityLevel;                                          // 0x0008   (0x0004)  
	float                                              MasterVolume;                                               // 0x000C   (0x0004)  
	float                                              MusicVolume;                                                // 0x0010   (0x0004)  
	float                                              EffectsVolume;                                              // 0x0014   (0x0004)  
	float                                              CharacterVoiceVolume;                                       // 0x0018   (0x0004)  
	float                                              SpeechVolume;                                               // 0x001C   (0x0004)  
	float                                              UIVolume;                                                   // 0x0020   (0x0004)  
};

/// Struct /Script/WTL.WTLGraphicsSettings
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLGraphicsSettings
{ 
	FString                                            Renderer;                                                   // 0x0000   (0x0010)  
	int32_t                                            ScreenResolutionX;                                          // 0x0010   (0x0004)  
	int32_t                                            ScreenResolutionY;                                          // 0x0014   (0x0004)  
	int32_t                                            ResolutionScale;                                            // 0x0018   (0x0004)  
	int32_t                                            ScreenMode;                                                 // 0x001C   (0x0004)  
	bool                                               VSync;                                                      // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            TextureStreaming;                                           // 0x0024   (0x0004)  
	int32_t                                            TextureStreamingPoolSize;                                   // 0x0028   (0x0004)  
	int32_t                                            FrameLimit;                                                 // 0x002C   (0x0004)  
	bool                                               FullDynamicLight;                                           // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            FSR2;                                                       // 0x0034   (0x0004)  
	float                                              FSR2Sharpness;                                              // 0x0038   (0x0004)  
	float                                              MotionBlur;                                                 // 0x003C   (0x0004)  
	bool                                               UseContactShadows;                                          // 0x0040   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            MotionBlurQuality;                                          // 0x0044   (0x0004)  
	bool                                               TemporalAA;                                                 // 0x0048   (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            TemporalAAQuality;                                          // 0x004C   (0x0004)  
	float                                              ImageSharpness;                                             // 0x0050   (0x0004)  
	int32_t                                            AntiAliasingQuality;                                        // 0x0054   (0x0004)  
	int32_t                                            ProcessingQuality;                                          // 0x0058   (0x0004)  
	int32_t                                            ShadowQuality;                                              // 0x005C   (0x0004)  
	int32_t                                            TextureQuality;                                             // 0x0060   (0x0004)  
	int32_t                                            ViewDistanceQuality;                                        // 0x0064   (0x0004)  
	int32_t                                            AmbientOcclusionType;                                       // 0x0068   (0x0004)  
	float                                              FOV;                                                        // 0x006C   (0x0004)  
	int32_t                                            CloudsType;                                                 // 0x0070   (0x0004)  
	bool                                               ShowEffectsAfterDeath;                                      // 0x0074   (0x0001)  
	bool                                               ShowWindEffects;                                            // 0x0075   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0076   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLGameSettings
/// Size: 0x00D0 (0x000000 - 0x0000D0)
struct FWTLGameSettings
{ 
	FString                                            Language;                                                   // 0x0000   (0x0010)  
	FString                                            LastLogin;                                                  // 0x0010   (0x0010)  
	bool                                               IsSavePassword;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0021   (0x0007)  MISSED
	FString                                            LastPassword;                                               // 0x0028   (0x0010)  
	FString                                            LastPlayedServerName;                                       // 0x0038   (0x0010)  
	FString                                            LastEmail;                                                  // 0x0048   (0x0010)  
	bool                                               EnableTutorial;                                             // 0x0058   (0x0001)  
	bool                                               TrackVehicleTurnWithCamera;                                 // 0x0059   (0x0001)  
	bool                                               RotateCameraInIdle;                                         // 0x005A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x005B   (0x0001)  MISSED
	float                                              CameraSpeedInIdle;                                          // 0x005C   (0x0004)  
	bool                                               AutomaticallyAcceptMarkers;                                 // 0x0060   (0x0001)  
	bool                                               NVIDIAHighlightsEnabled;                                    // 0x0061   (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0062   (0x0006)  MISSED
	TArray<FString>                                    CharactersTextChatMuteList;                                 // 0x0068   (0x0010)  
	TArray<uint16_t>                                   TutorialMessagesStoredData;                                 // 0x0078   (0x0010)  
	TArray<FWTLTutorialWarningMessageStoredData>       TutorialWarningMessagesStoredData;                          // 0x0088   (0x0010)  
	TArray<FWTLStoreItemInCart>                        StoreItemsInCart;                                           // 0x0098   (0x0010)  
	TArray<FWTLMinimapScaleValue>                      MinimapScaleValues;                                         // 0x00A8   (0x0010)  
	FWTLCustomizationItemsCount                        LastCustomizationItemsCountInStore;                         // 0x00B8   (0x0010)  
	bool                                               CacheAssetsOnStartup;                                       // 0x00C8   (0x0001)  
	bool                                               IsShowCharacterPositionWhenOpenPDAMap;                      // 0x00C9   (0x0001)  
	bool                                               IsHideActiveQuestInfo;                                      // 0x00CA   (0x0001)  
	bool                                               IsHUDHideByUser;                                            // 0x00CB   (0x0001)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCustomizationItemsCount
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLCustomizationItemsCount
{ 
	TArray<FWTLCustomizationItemCount>                 Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.WTLCustomizationItemCount
/// Size: 0x0004 (0x000000 - 0x000004)
struct FWTLCustomizationItemCount
{ 
	EWTLSex                                            Sex;                                                        // 0x0000   (0x0001)  
	EWTLCharacterClass                                 ClassType;                                                  // 0x0001   (0x0001)  
	uint16_t                                           Count;                                                      // 0x0002   (0x0002)  
};

/// Struct /Script/WTL.WTLMinimapScaleValue
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLMinimapScaleValue
{ 
	int32_t                                            LocationID;                                                 // 0x0000   (0x0004)  
	float                                              ScaleValue;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLStoreItemInCart
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLStoreItemInCart
{ 
	uint64_t                                           ID;                                                         // 0x0000   (0x0008)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLTutorialWarningMessageStoredData
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLTutorialWarningMessageStoredData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
	uint16_t                                           ID;                                                         // 0x0010   (0x0002)  
	bool                                               IsDoNotShowAgain;                                           // 0x0012   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0013   (0x0001)  MISSED
	int32_t                                            ShowCount;                                                  // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLArenaSettings
/// Size: 0x0004 (0x000000 - 0x000004)
struct FWTLArenaSettings
{ 
	int32_t                                            MinFactionPlayersToReward;                                  // 0x0000   (0x0004)  
};

/// Struct /Script/WTL.WTLReputationSettings
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLReputationSettings
{ 
	bool                                               Enabled;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              UpdatePeriod;                                               // 0x0004   (0x0004)  
	int32_t                                            MinUpdateValue;                                             // 0x0008   (0x0004)  
	int32_t                                            MaxUpdateValue;                                             // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLDedicatedServerSettings
/// Size: 0x0108 (0x000000 - 0x000108)
struct FWTLDedicatedServerSettings
{ 
	FString                                            Host;                                                       // 0x0000   (0x0010)  
	int32_t                                            MainPort;                                                   // 0x0010   (0x0004)  
	int32_t                                            MinPlayersCount;                                            // 0x0014   (0x0004)  
	int32_t                                            MaxPlayersCount;                                            // 0x0018   (0x0004)  
	int32_t                                            RoundTime;                                                  // 0x001C   (0x0004)  
	int32_t                                            ClientDefaultNetSpeed;                                      // 0x0020   (0x0004)  
	float                                              DefaultPlayerInvulnerableTime;                              // 0x0024   (0x0004)  
	int32_t                                            StatisticsUpdateInterval;                                   // 0x0028   (0x0004)  
	float                                              CharacterDistance;                                          // 0x002C   (0x0004)  
	float                                              MonsterDistance;                                            // 0x0030   (0x0004)  
	float                                              MonsterSleepDistance;                                       // 0x0034   (0x0004)  
	int32_t                                            DroppedItemTTL;                                             // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            DBServer;                                                   // 0x0040   (0x0010)  
	FString                                            DBName;                                                     // 0x0050   (0x0010)  
	FString                                            StatDBName;                                                 // 0x0060   (0x0010)  
	FString                                            DBUserName;                                                 // 0x0070   (0x0010)  
	FString                                            DBPassword;                                                 // 0x0080   (0x0010)  
	EDBDriverType                                      DBDriverType;                                               // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            DBUpdateThreadsCount;                                       // 0x0094   (0x0004)  
	float                                              CharacterAutosaveInterval;                                  // 0x0098   (0x0004)  
	float                                              CharacterAutosaveTimeDelta;                                 // 0x009C   (0x0004)  
	int32_t                                            MaxCharacterLevel;                                          // 0x00A0   (0x0004)  
	int32_t                                            MaxCharacterLevelForPVEMode;                                // 0x00A4   (0x0004)  
	FString                                            ZabbixServer;                                               // 0x00A8   (0x0010)  
	int32_t                                            ZabbixPort;                                                 // 0x00B8   (0x0004)  
	float                                              NetLagTime;                                                 // 0x00BC   (0x0004)  
	float                                              SafeZoneEnterInvulnerableChargeSeconds;                     // 0x00C0   (0x0004)  
	float                                              SafeZoneLeaveInvulnerableCooldownSeconds;                   // 0x00C4   (0x0004)  
	bool                                               CharacterDropEnabled;                                       // 0x00C8   (0x0001)  
	bool                                               IsArenaLocation;                                            // 0x00C9   (0x0001)  
	bool                                               PVPEnabled;                                                 // 0x00CA   (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x00CB   (0x0001)  MISSED
	float                                              GeneralChatDistance;                                        // 0x00CC   (0x0004)  
	int32_t                                            MaxConnectionsToTickPerServerFrame;                         // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_5[0x4];                                       // 0x00D4   (0x0004)  MISSED
	FString                                            SteamAPIKey;                                                // 0x00D8   (0x0010)  
	int32_t                                            TimeToConsumeSteamItem;                                     // 0x00E8   (0x0004)  
	float                                              ClientSideCharacterHitLeeway;                               // 0x00EC   (0x0004)  
	float                                              ClientSideMonsterHitLeeway;                                 // 0x00F0   (0x0004)  
	float                                              ClientSideEnemyNPCHitLeeway;                                // 0x00F4   (0x0004)  
	bool                                               UseReplicationGraph;                                        // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00F9   (0x0003)  MISSED
	float                                              ReplicationGraphCellSize;                                   // 0x00FC   (0x0004)  
	bool                                               BlockMonsterSpawnOnFortificationCapture;                    // 0x0100   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0101   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLConnectionSettings
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLConnectionSettings
{ 
	FString                                            Host;                                                       // 0x0000   (0x0010)  
	int32_t                                            Port;                                                       // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLVoiceSettings
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLVoiceSettings
{ 
	bool                                               Enabled;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Port;                                                       // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLSlotMachineData
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLSlotMachineData
{ 
	TArray<int32_t>                                    IDSlots;                                                    // 0x0000   (0x0010)  
	TArray<int32_t>                                    IDSymbolsSelected;                                          // 0x0010   (0x0010)  
	AWTLCharacter*                                     Character;                                                  // 0x0020   (0x0008)  
	EWTLSlotMachineState                               State;                                                      // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLServerStatistics
/// Size: 0x0150 (0x000000 - 0x000150)
struct FWTLServerStatistics
{ 
	FWTLServerStatisticsMonsters                       Monsters;                                                   // 0x0000   (0x0108)  
	FWTLServerStatisticsExperience                     Experience;                                                 // 0x0108   (0x0010)  
	FWTLServerStatisticsMoney                          Money;                                                      // 0x0118   (0x0010)  
	FWTLServerStatisticsSlotMachines                   SlotMachines;                                               // 0x0128   (0x0028)  
};

/// Struct /Script/WTL.WTLServerStatisticsSlotMachines
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLServerStatisticsSlotMachines
{ 
	uint64_t                                           ActivationsCount;                                           // 0x0000   (0x0008)  
	uint64_t                                           BetsMoney;                                                  // 0x0008   (0x0008)  
	uint64_t                                           RewardMoney;                                                // 0x0010   (0x0008)  
	uint64_t                                           ConsumedMoney;                                              // 0x0018   (0x0008)  
	uint64_t                                           MaxReward;                                                  // 0x0020   (0x0008)  
};

/// Struct /Script/WTL.WTLServerStatisticsMoney
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLServerStatisticsMoney
{ 
	uint64_t                                           TotalProduced;                                              // 0x0000   (0x0008)  
	uint64_t                                           TotalConsumed;                                              // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLServerStatisticsExperience
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLServerStatisticsExperience
{ 
	uint64_t                                           Total;                                                      // 0x0000   (0x0008)  
	uint64_t                                           MaxValue;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLServerStatisticsMonsters
/// Size: 0x0108 (0x000000 - 0x000108)
struct FWTLServerStatisticsMonsters
{ 
	uint64_t                                           Spawned;                                                    // 0x0000   (0x0008)  
	uint64_t                                           Killed;                                                     // 0x0008   (0x0008)  
	uint64_t                                           Alive;                                                      // 0x0010   (0x0008)  
	TMap<int32_t, uint64_t>                            SpawnedByClass;                                             // 0x0018   (0x0050)  
	TMap<int32_t, uint64_t>                            KilledByClass;                                              // 0x0068   (0x0050)  
	TMap<int32_t, uint64_t>                            AliveByClass;                                               // 0x00B8   (0x0050)  
};

/// Struct /Script/WTL.WTLThrowingDeviceBeamSection
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLThrowingDeviceBeamSection
{ 
	int32_t                                            TrajectoryID;                                               // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	UParticleSystemComponent*                          ParticleComponent;                                          // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLDebugSuggestion
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLDebugSuggestion
{ 
	EWTLDebugSuggestionType                            Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            CharacterName;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLSuggestion
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLSuggestion
{ 
	FText                                              Text;                                                       // 0x0000   (0x0018)  
	FText                                              DisplayedText;                                              // 0x0018   (0x0018)  
};

/// Struct /Script/WTL.WTLMonsterSpawnerTaskInfo
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLMonsterSpawnerTaskInfo
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	char                                               MinLevel;                                                   // 0x0004   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0005   (0x0001)  
	char                                               Rank;                                                       // 0x0006   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0007   (0x0001)  MISSED
	float                                              MinLifeSpan;                                                // 0x0008   (0x0004)  
	float                                              MaxLifeSpan;                                                // 0x000C   (0x0004)  
	EWTLFaction                                        Faction;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	FVector                                            Location;                                                   // 0x0014   (0x000C)  
	float                                              Health;                                                     // 0x0020   (0x0004)  
	float                                              Delay;                                                      // 0x0024   (0x0004)  
	float                                              CurrentDelay;                                               // 0x0028   (0x0004)  
	bool                                               Destroy;                                                    // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FString                                            TargetActorName;                                            // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLSellItemsQuestRestrictions
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLSellItemsQuestRestrictions
{ 
	FWTLItem                                           Item;                                                       // 0x0000   (0x0008)  
	EWTLCheckType                                      CheckType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FWTLQuestIDState>                           QuestsToCheck;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLQuestIDState
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLQuestIDState
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	EWTLQuestState                                     State;                                                      // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLQuestItemLockInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLQuestItemLockInfo
{ 
	EWTLItemType                                       Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           TypeID;                                                     // 0x0002   (0x0002)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            CustomizationName;                                          // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLBundleItem
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLBundleItem
{ 
	uint64_t                                           StoreItemID;                                                // 0x0000   (0x0008)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLPremiumItemData
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLPremiumItemData
{ 
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0000   (0x0028)  
	int32_t                                            DaysCount;                                                  // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	FText                                              Name;                                                       // 0x0030   (0x0018)  
	int32_t                                            Price;                                                      // 0x0048   (0x0004)  
	int32_t                                            Discount;                                                   // 0x004C   (0x0004)  
	int32_t                                            DiscountPercent;                                            // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCreditsItemData
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLCreditsItemData
{ 
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0000   (0x0028)  
	uint64_t                                           StoreItemID;                                                // 0x0028   (0x0008)  
	FText                                              Name;                                                       // 0x0030   (0x0018)  
	float                                              USDPrice;                                                   // 0x0048   (0x0004)  
	int32_t                                            RUBPrice;                                                   // 0x004C   (0x0004)  
	int32_t                                            Discount;                                                   // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLComboBoxStringSound
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLComboBoxStringSound
{ 
	EWTLComboBoxStringType                             Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        PressedSoundEvent;                                          // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        SelectionChangeSoundEvent;                                  // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLCheckBoxSound
/// Size: 0x0080 (0x000000 - 0x000080)
struct FWTLCheckBoxSound
{ 
	EWTLCheckBoxType                                   Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        CheckedSoundEvent;                                          // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        UncheckedSoundEvent;                                        // 0x0030   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        HoveredSoundEvent;                                          // 0x0058   (0x0028)  
};

/// Struct /Script/WTL.WTLSwitcherSound
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLSwitcherSound
{ 
	EWTLSwitcherType                                   Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        ButtonPressedSoundEvent;                                    // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        ButtonHoveredSoundEvent;                                    // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLCommonClickedItemSound
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLCommonClickedItemSound
{ 
	EWTLCommonClickedItemType                          Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        MouseButtonDownSoundEvent;                                  // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        HoveredSoundEvent;                                          // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLCommonButtonSound
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLCommonButtonSound
{ 
	EWTLCommonButtonType                               Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UFMODEvent*>                        PressedSoundEvent;                                          // 0x0008   (0x0028)  
	TWeakObjectPtr<UFMODEvent*>                        HoveredSoundEvent;                                          // 0x0030   (0x0028)  
};

/// Struct /Script/WTL.WTLSexTexture
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLSexTexture
{ 
	EWTLSex                                            Sex;                                                        // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLItemRequirement
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLItemRequirement
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	FString                                            CustomizationName;                                          // 0x0008   (0x0010)  
	int32_t                                            Count;                                                      // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLSteamInventoryItem
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLSteamInventoryItem
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLGiveItemInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLGiveItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	int32_t                                            Condition;                                                  // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLBodyPartButtonStyle
/// Size: 0x0280 (0x000000 - 0x000280)
struct FWTLBodyPartButtonStyle
{ 
	EWTLCharacterCustomizationPart                     BodyPartType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FButtonStyle                                       ButtonStyle;                                                // 0x0008   (0x0278)  
};

/// Struct /Script/WTL.WTLItemTypeStoreButtonStyle
/// Size: 0x0280 (0x000000 - 0x000280)
struct FWTLItemTypeStoreButtonStyle
{ 
	EWTLStoreItemType                                  StoreItemType;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FButtonStyle                                       ButtonStyle;                                                // 0x0008   (0x0278)  
};

/// Struct /Script/WTL.WTLEquipmentTypeTexture
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLEquipmentTypeTexture
{ 
	EWTLEquipmentType                                  Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLPrivateLootItemInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLPrivateLootItemInfo
{ 
	uint64_t                                           CharacterID;                                                // 0x0000   (0x0008)  
	EWTLItemType                                       ItemType;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0010   (0x0008)  
};

/// Struct /Script/WTL.WTLEmotionAnimation
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLEmotionAnimation
{ 
	int32_t                                            EmotionTypeID;                                              // 0x0000   (0x0004)  
	int32_t                                            EmotionID;                                                  // 0x0004   (0x0004)  
	bool                                               BlockCameraRotation;                                        // 0x0008   (0x0001)  
	bool                                               HideUsableItem;                                             // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	UAnimMontage*                                      MaleMontage;                                                // 0x0010   (0x0008)  
	UAnimMontage*                                      FemaleMontage;                                              // 0x0018   (0x0008)  
};

/// Struct /Script/WTL.WTLLocationSpawnPickup
/// Size: 0x0090 (0x000000 - 0x000090)
struct FWTLLocationSpawnPickup
{ 
	TWeakObjectPtr<UClass*>                            PickupClass;                                                // 0x0000   (0x0028)  
	int32_t                                            Quality;                                                    // 0x0028   (0x0004)  
	float                                              Chance;                                                     // 0x002C   (0x0004)  
	int32_t                                            MinCount;                                                   // 0x0030   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x0034   (0x0004)  
	int32_t                                            MinCondition;                                               // 0x0038   (0x0004)  
	int32_t                                            MaxCondition;                                               // 0x003C   (0x0004)  
	int32_t                                            MinInteractiveObjectID;                                     // 0x0040   (0x0004)  
	int32_t                                            MaxInteractiveObjectID;                                     // 0x0044   (0x0004)  
	char                                               CustomizationScalar;                                        // 0x0048   (0x0001)  
	char                                               CustomizationColor;                                         // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x004A   (0x0006)  MISSED
	FString                                            CustomizationName;                                          // 0x0050   (0x0010)  
	FString                                            ModificationData;                                           // 0x0060   (0x0010)  
	FDateTime                                          NextSpawnTime;                                              // 0x0070   (0x0008)  
	float                                              MinTimeBetweenSpawn;                                        // 0x0078   (0x0004)  
	float                                              MaxTimeBetweenSpawn;                                        // 0x007C   (0x0004)  
	float                                              MinBlackListTimeout;                                        // 0x0080   (0x0004)  
	float                                              MaxBlackListTimeout;                                        // 0x0084   (0x0004)  
	int32_t                                            MaxInstanceCount;                                           // 0x0088   (0x0004)  
	int32_t                                            CurrentInstanceCount;                                       // 0x008C   (0x0004)  
};

/// Struct /Script/WTL.WTLArenaFactionScore
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLArenaFactionScore
{ 
	EWTLFaction                                        Faction;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Score;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLFactionColor
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLFactionColor
{ 
	EWTLFaction                                        Faction;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       Color;                                                      // 0x0004   (0x0010)  
};

/// Struct /Script/WTL.WTLFactionTexture
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLFactionTexture
{ 
	EWTLFaction                                        Faction;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLCraftObjectProcessRecord
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCraftObjectProcessRecord
{ 
	uint64_t                                           UniqueId;                                                   // 0x0000   (0x0008)  
	uint64_t                                           CharacterID;                                                // 0x0008   (0x0008)  
	FString                                            CharacterName;                                              // 0x0010   (0x0010)  
	int32_t                                            CraftItemID;                                                // 0x0020   (0x0004)  
	float                                              ProductionTime;                                             // 0x0024   (0x0004)  
	float                                              ProductionTimeLeft;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMovementMemoryElement
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLMovementMemoryElement
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	float                                              Delta;                                                      // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0034   (0x000C)  MISSED
};

/// Struct /Script/WTL.WTLQTEState
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLQTEState
{ 
	char                                               NextKeyID;                                                  // 0x0000   (0x0001)  
	char                                               Step;                                                       // 0x0001   (0x0001)  
	char                                               SequenceLength;                                             // 0x0002   (0x0001)  
	char                                               FishingDifficulty;                                          // 0x0003   (0x0001)  
	float                                              FishingSequenceValue;                                       // 0x0004   (0x0004)  
	float                                              FishingSequenceLength;                                      // 0x0008   (0x0004)  
	bool                                               bIsInQTE;                                                   // 0x000C   (0x0001)  
	bool                                               bCanCancel;                                                 // 0x000D   (0x0001)  
	EWTLQTEType                                        Type;                                                       // 0x000E   (0x0001)  
	bool                                               bNeedToHideUsableItem;                                      // 0x000F   (0x0001)  
};

/// Struct /Script/WTL.WTLLowerBodyAnimation
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLLowerBodyAnimation
{ 
	UAnimMontage*                                      MontageLeft;                                                // 0x0000   (0x0008)  
	UAnimMontage*                                      MontageRight;                                               // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLCharacterMedicineEffect
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLCharacterMedicineEffect
{ 
	float                                              TimeLeft;                                                   // 0x0000   (0x0004)  
	int32_t                                            EffectID;                                                   // 0x0004   (0x0004)  
	int16_t                                            MedicineID;                                                 // 0x0008   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x000A   (0x0006)  MISSED
};

/// Struct /Script/WTL.SpeedModifiers
/// Size: 0x0008 (0x000000 - 0x000008)
struct FSpeedModifiers
{ 
	float                                              ReloadSpeedModifier;                                        // 0x0000   (0x0004)  
	float                                              EquipSpeedModifier;                                         // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLMedicineEffectImageInfo
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLMedicineEffectImageInfo
{ 
	EWTLMedicineEffectParameter                        Parameter;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0008   (0x0028)  
	FLinearColor                                       Color;                                                      // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLDebugCharacterClanInfo
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLDebugCharacterClanInfo
{ 
	int32_t                                            ClanID;                                                     // 0x0000   (0x0004)  
	EWTLClanMemberType                                 ClanMemberType;                                             // 0x0004   (0x0001)  
	bool                                               bIsUsed;                                                    // 0x0005   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0006   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLBPIdentityItemType
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLBPIdentityItemType
{ 
	EWTLItemType                                       Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            TypeID;                                                     // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.LipSyncData
/// Size: 0x0024 (0x000000 - 0x000024)
struct FLipSyncData
{ 
	float                                              E;                                                          // 0x0000   (0x0004)  
	float                                              FV;                                                         // 0x0004   (0x0004)  
	float                                              AI;                                                         // 0x0008   (0x0004)  
	float                                              L;                                                          // 0x000C   (0x0004)  
	float                                              O;                                                          // 0x0010   (0x0004)  
	float                                              ETC;                                                        // 0x0014   (0x0004)  
	float                                              U;                                                          // 0x0018   (0x0004)  
	float                                              WQ;                                                         // 0x001C   (0x0004)  
	float                                              MBP;                                                        // 0x0020   (0x0004)  
};

/// Struct /Script/WTL.WTLLanguageInfo
/// Size: 0x0098 (0x000000 - 0x000098)
struct FWTLLanguageInfo
{ 
	FString                                            Culture;                                                    // 0x0000   (0x0010)  
	FSlateBrush                                        Brush;                                                      // 0x0010   (0x0088)  
};

/// Struct /Script/WTL.WTLSteamServerInfo
/// Size: 0x0068 (0x000000 - 0x000068)
struct FWTLSteamServerInfo
{ 
	unsigned char                                      UnknownData00_1[0x68];                                      // 0x0000   (0x0068)  MISSED
};

/// Struct /Script/WTL.WTLCommissionItemTypeCount
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLCommissionItemTypeCount
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Count;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLBarterDeal
/// Size: 0x0180 (0x000000 - 0x000180)
struct FWTLBarterDeal
{ 
	AWTLCharacter*                                     Character1;                                                 // 0x0000   (0x0008)  
	AWTLCharacter*                                     Character2;                                                 // 0x0008   (0x0008)  
	uint64_t                                           CharacterID1;                                               // 0x0010   (0x0008)  
	uint64_t                                           CharacterID2;                                               // 0x0018   (0x0008)  
	FWTLStorageContent                                 CharacterItems1;                                            // 0x0020   (0x00A8)  
	FWTLStorageContent                                 CharacterItems2;                                            // 0x00C8   (0x00A8)  
	int32_t                                            CharacterMoneyAmount1;                                      // 0x0170   (0x0004)  
	int32_t                                            CharacterMoneyAmount2;                                      // 0x0174   (0x0004)  
	bool                                               CharacterReady1;                                            // 0x0178   (0x0001)  
	bool                                               CharacterReady2;                                            // 0x0179   (0x0001)  
	bool                                               CharacterAgreement1;                                        // 0x017A   (0x0001)  
	bool                                               CharacterAgreement2;                                        // 0x017B   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x017C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLBarterDealRequest
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLBarterDealRequest
{ 
	FDateTime                                          RequestDate;                                                // 0x0000   (0x0008)  
	AWTLCharacter*                                     FromCharacter;                                              // 0x0008   (0x0008)  
	uint64_t                                           FromCharacterID;                                            // 0x0010   (0x0008)  
	FString                                            FromCharacterName;                                          // 0x0018   (0x0010)  
	AWTLCharacter*                                     ToCharacter;                                                // 0x0028   (0x0008)  
	uint64_t                                           ToCharacterID;                                              // 0x0030   (0x0008)  
	FString                                            Message;                                                    // 0x0038   (0x0010)  
};

/// Struct /Script/WTL.WTLClanStorageMoneyLogRecord
/// Size: 0x0040 (0x000000 - 0x000040)
struct FWTLClanStorageMoneyLogRecord
{ 
	FWTLDateTime                                       EventDate;                                                  // 0x0000   (0x0008)  
	char                                               TabIndex;                                                   // 0x0008   (0x0001)  
	EWTLClanStorageMoneyOperationType                  OperationType;                                              // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0010   (0x0008)  
	FString                                            CharacterName;                                              // 0x0018   (0x0010)  
	int32_t                                            MoneyAmount;                                                // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0030   (0x0010)  
};

/// Struct /Script/WTL.WTLClanStorageItemLogRecord
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLClanStorageItemLogRecord
{ 
	FWTLDateTime                                       EventDate;                                                  // 0x0000   (0x0008)  
	char                                               TabIndex;                                                   // 0x0008   (0x0001)  
	EWTLClanStorageItemOperationType                   OperationType;                                              // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0010   (0x0008)  
	FString                                            CharacterName;                                              // 0x0018   (0x0010)  
	EWTLItemType                                       ItemType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0030   (0x0008)  
	uint16_t                                           ItemTypeID;                                                 // 0x0038   (0x0002)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x003A   (0x0002)  MISSED
	int32_t                                            Count;                                                      // 0x003C   (0x0004)  
	FString                                            Description;                                                // 0x0040   (0x0010)  
};

/// Struct /Script/WTL.WTLAmmoCaliberStatInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLAmmoCaliberStatInfo
{ 
	int32_t                                            DamageMin;                                                  // 0x0000   (0x0004)  
	int32_t                                            DamageMax;                                                  // 0x0004   (0x0004)  
	int32_t                                            ArmorPiercingMin;                                           // 0x0008   (0x0004)  
	int32_t                                            ArmorPiercingMax;                                           // 0x000C   (0x0004)  
	int32_t                                            AccuracyMin;                                                // 0x0010   (0x0004)  
	int32_t                                            AccuracyMax;                                                // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLWeaponStatInfo
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLWeaponStatInfo
{ 
	int32_t                                            MinDamage;                                                  // 0x0000   (0x0004)  
	int32_t                                            MaxDamage;                                                  // 0x0004   (0x0004)  
	float                                              DPS;                                                        // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLWeaponTypeStatInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLWeaponTypeStatInfo
{ 
	int32_t                                            MinDamage;                                                  // 0x0000   (0x0004)  
	int32_t                                            MaxDamage;                                                  // 0x0004   (0x0004)  
	int32_t                                            MinAccuracy;                                                // 0x0008   (0x0004)  
	int32_t                                            MaxAccuracy;                                                // 0x000C   (0x0004)  
	int32_t                                            MinConditionDelta;                                          // 0x0010   (0x0004)  
	int32_t                                            MaxConditionDelta;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLClanInviteInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLClanInviteInfo
{ 
	uint16_t                                           ClanID;                                                     // 0x0000   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0002   (0x0006)  MISSED
	FString                                            SenderCharacterName;                                        // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLClanIcons
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLClanIcons
{ 
	TWeakObjectPtr<UTexture2D*>                        SmallIcon;                                                  // 0x0000   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        MediumIcon;                                                 // 0x0028   (0x0028)  
	TWeakObjectPtr<UTexture2D*>                        LargeIcon;                                                  // 0x0050   (0x0028)  
};

/// Struct /Script/WTL.WTLCraftObjectState
/// Size: 0x00D0 (0x000000 - 0x0000D0)
struct FWTLCraftObjectState
{ 
	int32_t                                            CraftObjectID;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FWTLStorageContent                                 Content;                                                    // 0x0008   (0x00A8)  
	FMulticastInlineDelegate                           OnStorageContentChanged;                                    // 0x00B0   (0x0010)  
	TArray<FWTLCraftObjectProcess>                     Processes;                                                  // 0x00C0   (0x0010)  
};

/// Struct /Script/WTL.WTLCraftObjectProcess
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLCraftObjectProcess
{ 
	uint64_t                                           UniqueId;                                                   // 0x0000   (0x0008)  
	uint64_t                                           CharacterID;                                                // 0x0008   (0x0008)  
	int32_t                                            CraftItemID;                                                // 0x0010   (0x0004)  
	float                                              ProductionTime;                                             // 0x0014   (0x0004)  
	float                                              ProductionTimeLeft;                                         // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLCommissionListItemData
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCommissionListItemData
{ 
	EWTLItemType                                       Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	uint64_t                                           ID;                                                         // 0x0008   (0x0008)  
	uint16_t                                           TypeID;                                                     // 0x0010   (0x0002)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0012   (0x0002)  MISSED
	int32_t                                            Count;                                                      // 0x0014   (0x0004)  
	int32_t                                            CommissionMinBuyCount;                                      // 0x0018   (0x0004)  
	float                                              CommissionPrice;                                            // 0x001C   (0x0004)  
	FDateTime                                          CommissionDate;                                             // 0x0020   (0x0008)  
	FDateTime                                          CommissionExpireDate;                                       // 0x0028   (0x0008)  
};

/// Struct /Script/WTL.WTLGlobalLevelObjectRecord
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLGlobalLevelObjectRecord
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	EWTLGlobalLevelObjectType                          Type;                                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	int32_t                                            State;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_5[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            StateInfo;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLSlotMachineRecord
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLSlotMachineRecord
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	int32_t                                            Balance;                                                    // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLFortificationObjectRecord
/// Size: 0x00E8 (0x000000 - 0x0000E8)
struct FWTLFortificationObjectRecord
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	EWTLFortificationObjectType                        Type;                                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0008   (0x0008)  
	uint64_t                                           CharacterGroupID;                                           // 0x0010   (0x0008)  
	uint16_t                                           CharacterClanID;                                            // 0x0018   (0x0002)  
	EWTLFaction                                        CharacterFaction;                                           // 0x001A   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x001B   (0x0001)  MISSED
	FVector                                            Position;                                                   // 0x001C   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0028   (0x000C)  
	char                                               SlotCount;                                                  // 0x0034   (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	uint32_t                                           Condition;                                                  // 0x0038   (0x0004)  
	float                                              Energy;                                                     // 0x003C   (0x0004)  
	FWTLStorageContent                                 StorageContent;                                             // 0x0040   (0x00A8)  
};

/// Struct /Script/WTL.WTLLocationFortificationCommandCoreRecord
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLLocationFortificationCommandCoreRecord
{ 
	int32_t                                            CommandCoreID;                                              // 0x0000   (0x0004)  
	float                                              Energy;                                                     // 0x0004   (0x0004)  
	FDateTime                                          LastCaptureTime;                                            // 0x0008   (0x0008)  
	EWTLFaction                                        ControlFaction;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0011   (0x0007)  MISSED
	TArray<FWTLFortificationCaptureScoreRecord>        CaptureScore;                                               // 0x0018   (0x0010)  
};

/// Struct /Script/WTL.WTLFortificationCaptureScoreRecord
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLFortificationCaptureScoreRecord
{ 
	uint64_t                                           CharacterID;                                                // 0x0000   (0x0008)  
	EWTLFaction                                        CharacterFaction;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            KillsCount;                                                 // 0x000C   (0x0004)  
	int32_t                                            DeathsCount;                                                // 0x0010   (0x0004)  
	int32_t                                            Score;                                                      // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLLocationPlaceableStuffRecord
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLLocationPlaceableStuffRecord
{ 
	uint64_t                                           ItemId;                                                     // 0x0000   (0x0008)  
	uint16_t                                           StuffID;                                                    // 0x0008   (0x0002)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x000A   (0x0006)  MISSED
	uint64_t                                           CharacterID;                                                // 0x0010   (0x0008)  
	FString                                            CharacterName;                                              // 0x0018   (0x0010)  
	uint64_t                                           CharacterGroupID;                                           // 0x0028   (0x0008)  
	uint16_t                                           CharacterClanID;                                            // 0x0030   (0x0002)  
	EWTLFaction                                        CharacterFaction;                                           // 0x0032   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0033   (0x0001)  MISSED
	FVector                                            Position;                                                   // 0x0034   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0040   (0x000C)  
	uint32_t                                           Condition;                                                  // 0x004C   (0x0004)  
	float                                              Energy;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLLocationStorageRecord
/// Size: 0x00E8 (0x000000 - 0x0000E8)
struct FWTLLocationStorageRecord
{ 
	uint64_t                                           CharacterID;                                                // 0x0000   (0x0008)  
	FString                                            CharacterName;                                              // 0x0008   (0x0010)  
	uint64_t                                           CharacterGroupID;                                           // 0x0018   (0x0008)  
	uint16_t                                           CharacterClanID;                                            // 0x0020   (0x0002)  
	EWTLFaction                                        CharacterFaction;                                           // 0x0022   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0023   (0x0001)  MISSED
	FVector                                            Position;                                                   // 0x0024   (0x000C)  
	FVector                                            Rotation;                                                   // 0x0030   (0x000C)  
	char                                               SlotCount;                                                  // 0x003C   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	FWTLStorageContent                                 Content;                                                    // 0x0040   (0x00A8)  
};

/// Struct /Script/WTL.WTLClanStorage
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLClanStorage
{ 
	uint64_t                                           ID;                                                         // 0x0000   (0x0008)  
	int32_t                                            NPCID;                                                      // 0x0008   (0x0004)  
	uint16_t                                           ClanID;                                                     // 0x000C   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<FWTLClanStorageTab>                         Tabs;                                                       // 0x0010   (0x0010)  
	FMulticastInlineDelegate                           OnStorageContentChanged;                                    // 0x0020   (0x0010)  
};

/// Struct /Script/WTL.WTLClanStorageTab
/// Size: 0x00F8 (0x000000 - 0x0000F8)
struct FWTLClanStorageTab
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            Description;                                                // 0x0010   (0x0010)  
	char                                               ImageIndex;                                                 // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0021   (0x0007)  MISSED
	uint64_t                                           Money;                                                      // 0x0028   (0x0008)  
	FWTLStorageContent                                 StorageContent;                                             // 0x0030   (0x00A8)  
	TArray<uint64_t>                                   CanPutClanPolicyGroups;                                     // 0x00D8   (0x0010)  
	TArray<uint64_t>                                   CanTakeClanPolicyGroups;                                    // 0x00E8   (0x0010)  
};

/// Struct /Script/WTL.WTLCommissionStorage
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLCommissionStorage
{ 
	int32_t                                            NPCID;                                                      // 0x0000   (0x0004)  
	int32_t                                            Money;                                                      // 0x0004   (0x0004)  
	TArray<FWTLCommissionWeaponItem>                   WeaponItems;                                                // 0x0008   (0x0010)  
	TArray<FWTLCommissionAmmoItem>                     AmmoItems;                                                  // 0x0018   (0x0010)  
	TArray<FWTLCommissionMedicineItem>                 MedicineItems;                                              // 0x0028   (0x0010)  
	TArray<FWTLCommissionStuffItem>                    StuffItems;                                                 // 0x0038   (0x0010)  
	TArray<FWTLCommissionClothesItem>                  ClothesItems;                                               // 0x0048   (0x0010)  
	TArray<FWTLCommissionResourceItem>                 ResourceItems;                                              // 0x0058   (0x0010)  
	TArray<FWTLCommissionArtefactItem>                 ArtefactItems;                                              // 0x0068   (0x0010)  
};

/// Struct /Script/WTL.WTLPrivateStorage
/// Size: 0x00C0 (0x000000 - 0x0000C0)
struct FWTLPrivateStorage
{ 
	int32_t                                            NPCID;                                                      // 0x0000   (0x0004)  
	char                                               SlotCount;                                                  // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	FWTLStorageContent                                 StorageContent;                                             // 0x0008   (0x00A8)  
	FMulticastInlineDelegate                           OnStorageContentChanged;                                    // 0x00B0   (0x0010)  
};

/// Struct /Script/WTL.WTLInteractiveResourceGatherType
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLInteractiveResourceGatherType
{ 
	TArray<FWTLInteractiveResourceGatherItem>          RequireItems;                                               // 0x0000   (0x0010)  
	TArray<FWTLInteractiveResourceResultItem>          ResultItems;                                                // 0x0010   (0x0010)  
	float                                              MinResourceValueToGather;                                   // 0x0020   (0x0004)  
	float                                              MinResourceValueDecrement;                                  // 0x0024   (0x0004)  
	float                                              MaxResourceValueDecrement;                                  // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLInteractiveResourceResultItem
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLInteractiveResourceResultItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	int32_t                                            Count;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.WTLInteractiveResourceGatherItem
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLInteractiveResourceGatherItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	int32_t                                            Count;                                                      // 0x0004   (0x0004)  
	bool                                               ConsumeAfterGather;                                         // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/WTL.WTLWaterContainer
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLWaterContainer
{ 
	EWTLItemType                                       EmptyItemType;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           EmptyItemTypeID;                                            // 0x0002   (0x0002)  
	EWTLItemType                                       FullItemType;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0005   (0x0001)  MISSED
	uint16_t                                           FullItemTypeID;                                             // 0x0006   (0x0002)  
};

/// Struct /Script/WTL.WTLActionTimerWidgetType
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLActionTimerWidgetType
{ 
	EWTLActionTimerWidgetType                          Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLLocalCharactersData
/// Size: 0x0050 (0x000000 - 0x000050)
struct FWTLLocalCharactersData
{ 
	TMap<uint64_t, FWTLLocalCharacterData>             PerCharacterData;                                           // 0x0000   (0x0050)  
};

/// Struct /Script/WTL.WTLLocalCharacterData
/// Size: 0x00A8 (0x000000 - 0x0000A8)
struct FWTLLocalCharacterData
{ 
	bool                                               bIsFlashlightEnabled;                                       // 0x0000   (0x0001)  
	char                                               MonocularZoomModeIndex;                                     // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_5[0x6];                                       // 0x0002   (0x0006)  MISSED
	TMap<uint64_t, char>                               m_WeaponsFireModeMemory;                                    // 0x0008   (0x0050)  
	TMap<uint64_t, char>                               m_StuffsModeMemory;                                         // 0x0058   (0x0050)  
};

/// Struct /Script/WTL.WTLLocationNameWithID
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLLocationNameWithID
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FText                                              Name;                                                       // 0x0008   (0x0018)  
};

/// Struct /Script/WTL.WTLWidgetWithOrder
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLWidgetWithOrder
{ 
	UUserWidget*                                       Widget;                                                     // 0x0000   (0x0008)  
	int32_t                                            Order;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLDaytimeCubemapScenario
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLDaytimeCubemapScenario
{ 
	UTextureCube*                                      SourceCubemap;                                              // 0x0000   (0x0008)  
	UTextureCube*                                      DestinationCubemap;                                         // 0x0008   (0x0008)  
	float                                              FromDayTime;                                                // 0x0010   (0x0004)  
	float                                              ToDayTime;                                                  // 0x0014   (0x0004)  
	EWTLDaytimeCubemapBlendType                        BlendType;                                                  // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLDaytimeCubemap
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLDaytimeCubemap
{ 
	float                                              DayTime;                                                    // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	UTextureCube*                                      Texture;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLCaptureTarget
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLCaptureTarget
{ 
	float                                              DayTime;                                                    // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	UTextureRenderTargetCube*                          Target;                                                     // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLCharacterEffectTypeColor
/// Size: 0x0014 (0x000000 - 0x000014)
struct FWTLCharacterEffectTypeColor
{ 
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       Color;                                                      // 0x0004   (0x0010)  
};

/// Struct /Script/WTL.WTLConsoleScript
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLConsoleScript
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	TArray<FString>                                    Commands;                                                   // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLCustomizationColorIngredient
/// Size: 0x000C (0x000000 - 0x00000C)
struct FWTLCustomizationColorIngredient
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/WTL.WTLShortMovementInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLShortMovementInfo
{ 
	char                                               Yaw;                                                        // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector_NetQuantize                                Location;                                                   // 0x0004   (0x000C)  
};

/// Struct /Script/WTL.WTLUFunctionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLUFunctionInfo
{ 
	UObject*                                           Object;                                                     // 0x0000   (0x0008)  
	FString                                            UFunctionName;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/WTL.WTLCharacterStateIndicatorTextureIdentity
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCharacterStateIndicatorTextureIdentity
{ 
	EWTLCharacterStateIndicatorType                    StateIndicatorType;                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLCharacterEffectTextureIdentity
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLCharacterEffectTextureIdentity
{ 
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Texture;                                                    // 0x0008   (0x0028)  
};

/// Struct /Script/WTL.WTLDefaultClassParameters
/// Size: 0x0006 (0x000000 - 0x000006)
struct FWTLDefaultClassParameters
{ 
	char                                               Strength;                                                   // 0x0000   (0x0001)  
	char                                               Dexterity;                                                  // 0x0001   (0x0001)  
	char                                               Stamina;                                                    // 0x0002   (0x0001)  
	char                                               Accuracy;                                                   // 0x0003   (0x0001)  
	char                                               Intelligence;                                               // 0x0004   (0x0001)  
	char                                               Fortune;                                                    // 0x0005   (0x0001)  
};

/// Struct /Script/WTL.WTLArenaSelectedEquipmentItem
/// Size: 0x0006 (0x000000 - 0x000006)
struct FWTLArenaSelectedEquipmentItem
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	char                                               SlotNumber;                                                 // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0005   (0x0001)  MISSED
};

/// Struct /Script/WTL.WTLVisualItemCount
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLVisualItemCount
{ 
	uint64_t                                           ItemId;                                                     // 0x0000   (0x0008)  
	int32_t                                            ItemCountInNewSlot;                                         // 0x0008   (0x0004)  
	int32_t                                            OldItemCount;                                               // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.WTLSellItemInfo
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLSellItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              ItemName;                                                   // 0x0008   (0x0018)  
	uint64_t                                           ItemId;                                                     // 0x0020   (0x0008)  
	uint16_t                                           ItemTypeID;                                                 // 0x0028   (0x0002)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002A   (0x0002)  MISSED
	int32_t                                            ItemCount;                                                  // 0x002C   (0x0004)  
	int32_t                                            ItemMinBuyCount;                                            // 0x0030   (0x0004)  
	float                                              ItemCommissionPrice;                                        // 0x0034   (0x0004)  
	uint64_t                                           ItemCommissionCharacterID;                                  // 0x0038   (0x0008)  
	int32_t                                            ItemWeight;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLComboBoxSubTypeOption
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLComboBoxSubTypeOption
{ 
	FText                                              SubTypeName;                                                // 0x0000   (0x0018)  
	int16_t                                            SubTypeNumber;                                              // 0x0018   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLExtractItemInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLExtractItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0008   (0x0008)  
	int32_t                                            Count;                                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLSellingItemInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLSellingItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	uint64_t                                           ItemId;                                                     // 0x0008   (0x0008)  
	int32_t                                            Count;                                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLSellItems
/// Size: 0x0070 (0x000000 - 0x000070)
struct FWTLSellItems
{ 
	TArray<FWTLCommissionWeaponItem>                   WeaponItems;                                                // 0x0000   (0x0010)  
	TArray<FWTLCommissionAmmoItem>                     AmmoItems;                                                  // 0x0010   (0x0010)  
	TArray<FWTLCommissionMedicineItem>                 MedicineItems;                                              // 0x0020   (0x0010)  
	TArray<FWTLCommissionStuffItem>                    StuffItems;                                                 // 0x0030   (0x0010)  
	TArray<FWTLCommissionClothesItem>                  ClothesItems;                                               // 0x0040   (0x0010)  
	TArray<FWTLCommissionResourceItem>                 ResourceItems;                                              // 0x0050   (0x0010)  
	TArray<FWTLCommissionArtefactItem>                 ArtefactItems;                                              // 0x0060   (0x0010)  
};

/// Struct /Script/WTL.WTLBuyItemInfo
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLBuyItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0001   (0x0001)  MISSED
	uint16_t                                           ItemTypeID;                                                 // 0x0002   (0x0002)  
	float                                              Price;                                                      // 0x0004   (0x0004)  
	float                                              PriceMultiplier;                                            // 0x0008   (0x0004)  
	int32_t                                            MaxCount;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/WTL.UpdatingReflestionCapture
/// Size: 0x0010 (0x000000 - 0x000010)
struct FUpdatingReflestionCapture
{ 
	AReflectionCapture*                                Object;                                                     // 0x0000   (0x0008)  
	float                                              LastUpdateLevelTime;                                        // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLFastAccessSlotBindPermissions
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLFastAccessSlotBindPermissions
{ 
	TArray<EWTLWeaponType>                             WeaponTypes;                                                // 0x0000   (0x0010)  
	TArray<EWTLMedicineType>                           MedicineTypes;                                              // 0x0010   (0x0010)  
	TArray<EWTLStuffType>                              StuffTypes;                                                 // 0x0020   (0x0010)  
};

/// Struct /Script/WTL.WTLGeneratedSellItemInfo
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLGeneratedSellItemInfo
{ 
	EWTLItemType                                       ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ItemTypeID;                                                 // 0x0004   (0x0004)  
	int32_t                                            Condition;                                                  // 0x0008   (0x0004)  
	float                                              PriceMultiplier;                                            // 0x000C   (0x0004)  
	bool                                               RoundNumberPrice;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            MinBuyCount;                                                // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.WTLCustomQuestRequirementState
/// Size: 0x0048 (0x000000 - 0x000048)
struct FWTLCustomQuestRequirementState
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0010   (0x0028)  
	int32_t                                            NeedCount;                                                  // 0x0038   (0x0004)  
	int32_t                                            CurrentCount;                                               // 0x003C   (0x0004)  
	bool                                               UseBitMaskForProgress;                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLEnemyNPCKillRequirementState
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLEnemyNPCKillRequirementState
{ 
	int32_t                                            EnemyNPCID;                                                 // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            EnemyNPCName;                                               // 0x0008   (0x0010)  
	char                                               MinLevel;                                                   // 0x0018   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x001A   (0x0002)  MISSED
	int32_t                                            NeedCount;                                                  // 0x001C   (0x0004)  
	int32_t                                            CurrentCount;                                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLMonsterKillRequirementState
/// Size: 0x0028 (0x000000 - 0x000028)
struct FWTLMonsterKillRequirementState
{ 
	int32_t                                            MonsterID;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            MonsterName;                                                // 0x0008   (0x0010)  
	char                                               MinLevel;                                                   // 0x0018   (0x0001)  
	char                                               MaxLevel;                                                   // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x001A   (0x0002)  MISSED
	int32_t                                            NeedCount;                                                  // 0x001C   (0x0004)  
	int32_t                                            CurrentCount;                                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLLanguageOption
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLLanguageOption
{ 
	FString                                            LanguageName;                                               // 0x0000   (0x0010)  
	FString                                            LanguagePrefix;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/WTL.WTLOptionsParameter
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLOptionsParameter
{ 
	FText                                              ParameterName;                                              // 0x0000   (0x0018)  
	FString                                            ParameterPrefix;                                            // 0x0018   (0x0010)  
	bool                                               bIsHiddenForUser;                                           // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLRadialMenuEmotionsInfoArray
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLRadialMenuEmotionsInfoArray
{ 
	TArray<FWTLRadialMenuEmotionInfo>                  RadialMenuEmotionsInfo;                                     // 0x0000   (0x0010)  
};

/// Struct /Script/WTL.WTLUseMenuActionInfo
/// Size: 0x0008 (0x000050 - 0x000058)
struct FWTLUseMenuActionInfo : FWTLRadialMenuActionInfo
{ 
	EWTLUseMenuActionType                              Type;                                                       // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLUseMenuButtonInfo
/// Size: 0x0038 (0x000000 - 0x000038)
struct FWTLUseMenuButtonInfo
{ 
	EWTLUseMenuActionType                              ActionType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	UObject*                                           Object;                                                     // 0x0008   (0x0008)  
	FString                                            UFunctionName;                                              // 0x0010   (0x0010)  
	FText                                              CustomButtonDescription;                                    // 0x0020   (0x0018)  
};

/// Struct /Script/WTL.WTLRadialMenuButton
/// Size: 0x0018 (0x000000 - 0x000018)
struct FWTLRadialMenuButton
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x14];                                      // 0x0004   (0x0014)  MISSED
};

/// Struct /Script/WTL.WTLPopupButtonInfo
/// Size: 0x0038 (0x000000 - 0x000038)
struct FWTLPopupButtonInfo
{ 
	FText                                              ButtonName;                                                 // 0x0000   (0x0018)  
	uint64_t                                           ID;                                                         // 0x0018   (0x0008)  
	UObject*                                           Object;                                                     // 0x0020   (0x0008)  
	FString                                            UFunctionName;                                              // 0x0028   (0x0010)  
};

/// Struct /Script/WTL.WTLPopupDialogButtonInfo
/// Size: 0x0030 (0x000000 - 0x000030)
struct FWTLPopupDialogButtonInfo
{ 
	FText                                              Text;                                                       // 0x0000   (0x0018)  
	uint64_t                                           ID;                                                         // 0x0018   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/WTL.WTLMessageDialogButtonInfo
/// Size: 0x0058 (0x000000 - 0x000058)
struct FWTLMessageDialogButtonInfo
{ 
	FText                                              Text;                                                       // 0x0000   (0x0018)  
	unsigned char                                      UnknownData00_5[0x10];                                      // 0x0018   (0x0010)  MISSED
	FSlateColor                                        TextColor;                                                  // 0x0028   (0x0028)  
	bool                                               IsSetTextColor;                                             // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLCharacterStateIndicatorTypeConfig
/// Size: 0x0090 (0x000000 - 0x000090)
struct FWTLCharacterStateIndicatorTypeConfig
{ 
	EWTLCharacterStateIndicatorType                    Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FSlateBrush                                        IconBrush;                                                  // 0x0008   (0x0088)  
};

/// Struct /Script/WTL.WTLCharacterEffectTypeConfig
/// Size: 0x0090 (0x000000 - 0x000090)
struct FWTLCharacterEffectTypeConfig
{ 
	EWTLCharacterEffectType                            Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FSlateBrush                                        IconBrush;                                                  // 0x0008   (0x0088)  
};

/// Struct /Script/WTL.WTLNotificationTypeConfig
/// Size: 0x0068 (0x000000 - 0x000068)
struct FWTLNotificationTypeConfig
{ 
	EWTLHUDNotificationType                            Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<UTexture2D*>                        Icon;                                                       // 0x0008   (0x0028)  
	FLinearColor                                       Color;                                                      // 0x0030   (0x0010)  
	TWeakObjectPtr<UFMODEvent*>                        SoundEvent;                                                 // 0x0040   (0x0028)  
};

/// Struct /Script/WTL.WTLCustomizationPartsLoadPermissions
/// Size: 0x0002 (0x000000 - 0x000002)
struct FWTLCustomizationPartsLoadPermissions
{ 
	EWTLCharacterCustomizationPart                     PartType;                                                   // 0x0000   (0x0001)  
	bool                                               bIsPermissionToLoad;                                        // 0x0001   (0x0001)  
};

/// Struct /Script/WTL.WTLCustomizationRecord
/// Size: 0x0110 (0x000000 - 0x000110)
struct FWTLCustomizationRecord
{ 
	FWTLCharacterCustomizationRecord                   CustomizationRecord;                                        // 0x0000   (0x0108)  
	char                                               MaterialIndex;                                              // 0x0108   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Struct /Script/WTL.WTLHUDVisibleException
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLHUDVisibleException
{ 
	UWTLHUDWidgetBase*                                 FullscreenWidget;                                           // 0x0000   (0x0008)  
	UWTLHUDWidgetBase*                                 ExceptionWidget;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/WTL.WTLHUDFullscreenWidget
/// Size: 0x0010 (0x000000 - 0x000010)
struct FWTLHUDFullscreenWidget
{ 
	UWTLWidgetBase*                                    Widget;                                                     // 0x0000   (0x0008)  
	EWTLInputMode                                      InputMode;                                                  // 0x0008   (0x0001)  
	bool                                               bWasVisible;                                                // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x000A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLInputSetting
/// Size: 0x0098 (0x000000 - 0x000098)
struct FWTLInputSetting
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	FText                                              DisplayName;                                                // 0x0008   (0x0018)  
	FKey                                               MainKey;                                                    // 0x0020   (0x0018)  
	bool                                               bIsMainKeySet;                                              // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FKey                                               AlternateKey;                                               // 0x0040   (0x0018)  
	bool                                               bIsAlternateKeySet;                                         // 0x0058   (0x0001)  
	bool                                               bIsAlternateKeyAllow;                                       // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_5[0x6];                                       // 0x005A   (0x0006)  MISSED
	FKey                                               DefaultMainKey;                                             // 0x0060   (0x0018)  
	FKey                                               DefaultAlternateKey;                                        // 0x0078   (0x0018)  
	float                                              AxisScale;                                                  // 0x0090   (0x0004)  
	EWTLKeyCategory                                    Category;                                                   // 0x0094   (0x0001)  
	bool                                               bIsMouseKeysCanBind;                                        // 0x0095   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0096   (0x0002)  MISSED
};

/// Struct /Script/WTL.WTLMapCanvasMarker
/// Size: 0x0078 (0x000000 - 0x000078)
struct FWTLMapCanvasMarker
{ 
	FWTLMapMarker                                      Marker;                                                     // 0x0000   (0x0070)  
	UWTLCommonMapMarker*                               MarkerWidget;                                               // 0x0070   (0x0008)  
};

/// Struct /Script/WTL.WTLMapMarker
/// Size: 0x0070 (0x000000 - 0x000070)
struct FWTLMapMarker
{ 
	FString                                            MarkerName;                                                 // 0x0000   (0x0010)  
	FString                                            MarkerTime;                                                 // 0x0010   (0x0010)  
	FText                                              ToolTipText;                                                // 0x0020   (0x0018)  
	AActor*                                            MarkerActor;                                                // 0x0038   (0x0008)  
	FVector                                            MarkerLocation;                                             // 0x0040   (0x000C)  
	EWTLMapMarkerType                                  MarkerType;                                                 // 0x004C   (0x0001)  
	char                                               MarkerSubTypeNumber;                                        // 0x004D   (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x004E   (0x0002)  MISSED
	FLinearColor                                       MarkerColor;                                                // 0x0050   (0x0010)  
	char                                               MarkerZOrder;                                               // 0x0060   (0x0001)  
	bool                                               bIsSticking;                                                // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0062   (0x0002)  MISSED
	int32_t                                            MarkerIndex;                                                // 0x0064   (0x0004)  
	float                                              Radius;                                                     // 0x0068   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Struct /Script/WTL.WTLTakenDamageRecord
/// Size: 0x0020 (0x000000 - 0x000020)
struct FWTLTakenDamageRecord
{ 
	FDateTime                                          LastDamageTime;                                             // 0x0000   (0x0008)  
	int32_t                                            HitCount;                                                   // 0x0008   (0x0004)  
	float                                              DamageValue;                                                // 0x000C   (0x0004)  
	uint64_t                                           GroupId;                                                    // 0x0010   (0x0008)  
	uint16_t                                           ClanID;                                                     // 0x0018   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/WTL.WTLWeaponTypeDamageModifier
/// Size: 0x0008 (0x000000 - 0x000008)
struct FWTLWeaponTypeDamageModifier
{ 
	EWTLWeaponType                                     WeaponType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DamageMultiplier;                                           // 0x0004   (0x0004)  
};

/// Struct /Script/WTL.EnergyFieldDamageEvent
/// Size: 0x0008 (0x000010 - 0x000018)
struct FEnergyFieldDamageEvent : FDamageEvent
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/WTL.SuffocationDamageEvent
/// Size: 0x0008 (0x000010 - 0x000018)
struct FSuffocationDamageEvent : FDamageEvent
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/WTL.MonsterDamageEvent
/// Size: 0x0010 (0x000010 - 0x000020)
struct FMonsterDamageEvent : FDamageEvent
{ 
	EWTLColliderType                                   ColliderType;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              ArmorPiercingValue;                                         // 0x0014   (0x0004)  
	bool                                               UseArmor;                                                   // 0x0018   (0x0001)  
	bool                                               Critical;                                                   // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/WTL.MedicineDamageEvent
/// Size: 0x0008 (0x000010 - 0x000018)
struct FMedicineDamageEvent : FDamageEvent
{ 
	int16_t                                            MedicineID;                                                 // 0x0010   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0012   (0x0002)  MISSED
	int32_t                                            EffectID;                                                   // 0x0014   (0x0004)  
};

/// Struct /Script/WTL.CharacterEffectDamageEvent
/// Size: 0x0008 (0x000010 - 0x000018)
struct FCharacterEffectDamageEvent : FDamageEvent
{ 
	EWTLCharacterEffectType                            EffectType;                                                 // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/WTL.SuicideDamageEvent
/// Size: 0x0000 (0x000010 - 0x000010)
struct FSuicideDamageEvent : FDamageEvent
{ 
};

/// Struct /Script/WTL.MeleeDamageEvent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
struct FMeleeDamageEvent : FPointDamageEvent
{ 
	uint16_t                                           WeaponTypeID;                                               // 0x00B0   (0x0002)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x00B2   (0x0002)  MISSED
	float                                              ImpulseMultiplier;                                          // 0x00B4   (0x0004)  
	bool                                               Critical;                                                   // 0x00B8   (0x0001)  
	EWTLColliderType                                   ColliderType;                                               // 0x00B9   (0x0001)  
	bool                                               UseArmor;                                                   // 0x00BA   (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x00BB   (0x0001)  MISSED
	float                                              ArmorPiercingValue;                                         // 0x00BC   (0x0004)  
};

/// Struct /Script/WTL.ItemAnimationSet
/// Size: 0x0018 (0x000000 - 0x000018)
struct FItemAnimationSet
{ 
	UAnimMontage*                                      Item;                                                       // 0x0000   (0x0008)  
	UAnimMontage*                                      PawnMale;                                                   // 0x0008   (0x0008)  
	float                                              ActionDurationWithoutAnimation;                             // 0x0010   (0x0004)  
	float                                              AnimationRate;                                              // 0x0014   (0x0004)  
};

/// Struct /Game/WTL/UI/Blueprints/HUD/Monster/S_HUD_LMI_Data.S_HUD_LMI_Data
/// Size: 0x0040 (0x000000 - 0x000040)
struct FS_HUD_LMI_Data
{ 
	float                                              Weight_9_7643C5FD4758BA5C96CF5D9EE2A58559;                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x0004   (0x0004)  MISSED
	FText                                              Name_19_D93E813D49FD44E1D44E388A16D04B7B;                   // 0x0008   (0x0018)  
	FLinearColor                                       Color1_13_2BB3EBA94ACC550748084A88A1C75724;                 // 0x0020   (0x0010)  
	FLinearColor                                       Color2_15_75FC7891431806D82F3C35A5A7948E60;                 // 0x0030   (0x0010)  
};

/// Struct /Game/WTL/Monsters/New/S_Ability_Chance.S_Ability_Chance
/// Size: 0x0010 (0x000000 - 0x000010)
struct FS_Ability_Chance
{ 
	int32_t                                            ID_11_1655F91B4B5258C8F1E222AD87FBE4F9;                     // 0x0000   (0x0004)  
	float                                              CurrentChance_6_9961F066412F1E7ECA5F2781B60207AE;           // 0x0004   (0x0004)  
	float                                              Cost_7_638521824A9D905345E92B8D89CF4AC7;                    // 0x0008   (0x0004)  
	float                                              RecoverPerSec_8_A02DA65446102BA6B8E760AB5A703681;           // 0x000C   (0x0004)  
};

/// Struct /Game/WTL/Monsters/New/Blueprint/ProjectsX/S_Spore_Outgrowth_Data.S_Spore_Outgrowth_Data
/// Size: 0x0018 (0x000000 - 0x000018)
struct FS_Spore_Outgrowth_Data
{ 
	FVector                                            Location_2_5EBCC32F4403A008D5CB2E9A6CE9566C;                // 0x0000   (0x000C)  
	FRotator                                           Rotation_5_8CA737EC4DF8DBCD0917949DC92673AE;                // 0x000C   (0x000C)  
};

/// Struct /Game/WTL/Monsters/New/Blueprint/DS_WayPoint.DS_WayPoint
/// Size: 0x0014 (0x000000 - 0x000014)
struct FDS_WayPoint
{ 
	FDateTime                                          Time_2_A46589F9483A8DB00274F4A0161990B1;                    // 0x0000   (0x0008)  
	FVector                                            Location_5_92AD53A747AF6C8A81FBD6869F967A5E;                // 0x0008   (0x000C)  
};

/// Struct /Game/WTL/Environment/Weather/ST_WeatherScheme.ST_WeatherScheme
/// Size: 0x0078 (0x000000 - 0x000078)
struct FST_WeatherScheme
{ 
	float                                              CloudDensity_3_379A086D4DFA6191C20DB7A59428ECD5;            // 0x0000   (0x0004)  
	float                                              MoonIntensity_7_154D98184900D4157902F2A3B572C7FA;           // 0x0004   (0x0004)  
	float                                              Saturation_6_B0BEDF37446BAA52764525A933D1D268;              // 0x0008   (0x0004)  
	float                                              OverallIntensity_11_24DAF7B247FA2997FB47C685BB10D287;       // 0x000C   (0x0004)  
	float                                              SunBrightness_13_2566699542EA6AA0BD8640A9D0B34353;          // 0x0010   (0x0004)  
	float                                              SunLightingIntensity_15_5B5E97EF438AC3E63F1CEEAE5884D260;   // 0x0014   (0x0004)  
	float                                              SunIntensityMultiplier_36_BF4E3E8F453067E251F7D9A513101A60; // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_5[0x4];                                       // 0x001C   (0x0004)  MISSED
	UCurveLinearColor*                                 HorizonBaseColorCurve_27_70F23F4944B79D1A5CF720BCB031B796;  // 0x0020   (0x0008)  
	UCurveLinearColor*                                 ZenithBaseColorCurve_28_6077562242BA56F5F17EF8B4D2B2F843;   // 0x0028   (0x0008)  
	UCurveLinearColor*                                 CloudLightColorCurve_29_85BEF7BA4A2300075D6D1AACDB48EA5E;   // 0x0030   (0x0008)  
	UCurveLinearColor*                                 CloudDarkColorCurve_30_9F40C7344D417AC4515E20AC74CF915E;    // 0x0038   (0x0008)  
	UCurveLinearColor*                                 SunColorCurve_31_DA9008094F11BA9741DB55A059D5E7A9;          // 0x0040   (0x0008)  
	float                                              FogDensity_38_F99F0D2B4500323900BBDBB70DD2AC66;             // 0x0048   (0x0004)  
	float                                              FogHeightFalloff_45_524DCC4A4B90EA5F8F9E6BBC1263EA37;       // 0x004C   (0x0004)  
	float                                              FogStartDistance_40_05CC49BF40712380F81A5F9A0CDE5A17;       // 0x0050   (0x0004)  
	float                                              FogCutoffDistance_43_4F93197F41D7D794A4B1188819017667;      // 0x0054   (0x0004)  
	FLinearColor                                       PostProcessSceneColorTint_48_979F9FE6477CA3880EC647ACB5464BEF; // 0x0058   (0x0010)  
	FLinearColor                                       FogColor_51_738E10244157E6FCB3831FB98A95346B;               // 0x0068   (0x0010)  
};

/// Enum /Script/WTL.EWTLMailPackageState
/// Size: 0x05
enum EWTLMailPackageState : uint8_t
{
	EWTLMailPackageState__None                                                       = 0,
	EWTLMailPackageState__Traveling                                                  = 1,
	EWTLMailPackageState__ReadyToPickup                                              = 2,
	EWTLMailPackageState__Delivered                                                  = 3,
	EWTLMailPackageState__EWTLMailPackageState_MAX                                   = 4
};

/// Enum /Script/WTL.EWTLArtefactType
/// Size: 0x18
enum EWTLArtefactType : uint8_t
{
	EWTLArtefactType__None                                                           = 0,
	EWTLArtefactType__Quest                                                          = 1,
	EWTLArtefactType__Food                                                           = 2,
	EWTLArtefactType__StimulatorContainer                                            = 3,
	EWTLArtefactType__Artefact                                                       = 4,
	EWTLArtefactType__Houseware                                                      = 5,
	EWTLArtefactType__Instruments                                                    = 6,
	EWTLArtefactType__Electronics                                                    = 7,
	EWTLArtefactType__Junk                                                           = 8,
	EWTLArtefactType__AmmoComponents                                                 = 9,
	EWTLArtefactType__Document                                                       = 10,
	EWTLArtefactType__SpareParts                                                     = 11,
	EWTLArtefactType__ModificationParts                                              = 12,
	EWTLArtefactType__Money                                                          = 13,
	EWTLArtefactType__FishingBait                                                    = 14,
	EWTLArtefactType__Fish                                                           = 15,
	EWTLArtefactType__Miscellaneous                                                  = 16,
	EWTLArtefactType__EWTLArtefactType_MAX                                           = 17
};

/// Enum /Script/WTL.EWTLResourceType
/// Size: 0x03
enum EWTLResourceType : uint8_t
{
	EWTLResourceType__Base                                                           = 0,
	EWTLResourceType__Complex                                                        = 1,
	EWTLResourceType__EWTLResourceType_MAX                                           = 2
};

/// Enum /Script/WTL.EWTLArmorClass
/// Size: 0x05
enum EWTLArmorClass : uint8_t
{
	EWTLArmorClass__None                                                             = 0,
	EWTLArmorClass__Light                                                            = 1,
	EWTLArmorClass__Medium                                                           = 2,
	EWTLArmorClass__Heavy                                                            = 3,
	EWTLArmorClass__EWTLArmorClass_MAX                                               = 4
};

/// Enum /Script/WTL.EWTLClothesType
/// Size: 0x08
enum EWTLClothesType : uint8_t
{
	EWTLClothesType__None                                                            = 0,
	EWTLClothesType__Boots                                                           = 1,
	EWTLClothesType__Trousers                                                        = 2,
	EWTLClothesType__Jacket                                                          = 3,
	EWTLClothesType__Helmet                                                          = 4,
	EWTLClothesType__ArmorPlate                                                      = 5,
	EWTLClothesType__CustomizationItem                                               = 100,
	EWTLClothesType__EWTLClothesType_MAX                                             = 101
};

/// Enum /Script/WTL.EWTLItemType
/// Size: 0x09
enum EWTLItemType : uint8_t
{
	EWTLItemType__None                                                               = 0,
	EWTLItemType__Weapon                                                             = 1,
	EWTLItemType__Ammo                                                               = 2,
	EWTLItemType__Medicine                                                           = 3,
	EWTLItemType__Stuff                                                              = 4,
	EWTLItemType__Clothes                                                            = 5,
	EWTLItemType__Resource                                                           = 6,
	EWTLItemType__Artefact                                                           = 7,
	EWTLItemType__EWTLItemType_MAX                                                   = 8
};

/// Enum /Script/WTL.EWTLStuffType
/// Size: 0x37
enum EWTLStuffType : uint8_t
{
	EWTLStuffType__None                                                              = 0,
	EWTLStuffType__WeaponRepairKit                                                   = 1,
	EWTLStuffType__AmmoReloadingKit                                                  = 2,
	EWTLStuffType__UnlockingKit                                                      = 3,
	EWTLStuffType__FlashLight                                                        = 4,
	EWTLStuffType__Equipment                                                         = 5,
	EWTLStuffType__Detector                                                          = 6,
	EWTLStuffType__ResourceMiner                                                     = 7,
	EWTLStuffType__BuilderKit                                                        = 8,
	EWTLStuffType__WeaponAttachment                                                  = 9,
	EWTLStuffType__OpticDevice                                                       = 10,
	EWTLStuffType__Battery                                                           = 11,
	EWTLStuffType__Extractor                                                         = 12,
	EWTLStuffType__ArtefactContainerS                                                = 13,
	EWTLStuffType__ArtefactContainerM                                                = 14,
	EWTLStuffType__ArtefactContainerL                                                = 15,
	EWTLStuffType__PDAModule                                                         = 16,
	EWTLStuffType__ClothesRepairKit                                                  = 17,
	EWTLStuffType__PlacementKit                                                      = 18,
	EWTLStuffType__WeaponSprayCan                                                    = 19,
	EWTLStuffType__ClothesSprayCan                                                   = 20,
	EWTLStuffType__WeaponModificationKit                                             = 21,
	EWTLStuffType__ClothesModificationKit                                            = 22,
	EWTLStuffType__EngravingKit                                                      = 23,
	EWTLStuffType__FishingItem                                                       = 24,
	EWTLStuffType__RepairItem                                                        = 25,
	EWTLStuffType__HealingItem                                                       = 26,
	EWTLStuffType__UniversalScaner                                                   = 27,
	EWTLStuffType__EnergyEquipment                                                   = 28,
	EWTLStuffType__ProductionModule                                                  = 29,
	EWTLStuffType__TeleportationDevice                                               = 30,
	EWTLStuffType__Vehicle                                                           = 31,
	EWTLStuffType__Fuel                                                              = 32,
	EWTLStuffType__Drone                                                             = 33,
	EWTLStuffType__ControlledDrone                                                   = 34,
	EWTLStuffType__RadioDevice                                                       = 35,
	EWTLStuffType__EWTLStuffType_MAX                                                 = 36
};

/// Enum /Script/WTL.EWTLCharacterEffectType
/// Size: 0x21
enum EWTLCharacterEffectType : uint8_t
{
	EWTLCharacterEffectType__None                                                    = 0,
	EWTLCharacterEffectType__Radiation                                               = 1,
	EWTLCharacterEffectType__Chemicals                                               = 2,
	EWTLCharacterEffectType__Poison                                                  = 3,
	EWTLCharacterEffectType__Bleeding                                                = 4,
	EWTLCharacterEffectType__Suffocation                                             = 5,
	EWTLCharacterEffectType__Burn                                                    = 6,
	EWTLCharacterEffectType__Wounded                                                 = 7,
	EWTLCharacterEffectType__Immobilization                                          = 8,
	EWTLCharacterEffectType__Consternation                                           = 9,
	EWTLCharacterEffectType__Alcohol                                                 = 101,
	EWTLCharacterEffectType__RadiationProtection                                     = 102,
	EWTLCharacterEffectType__ChemicalsProtection                                     = 103,
	EWTLCharacterEffectType__PoisonProtection                                        = 104,
	EWTLCharacterEffectType__BleedingProtection                                      = 105,
	EWTLCharacterEffectType__Medicine                                                = 200,
	EWTLCharacterEffectType__Stimulator                                              = 201,
	EWTLCharacterEffectType__IntruderState                                           = 252,
	EWTLCharacterEffectType__IntruderStateLethal                                     = 253,
	EWTLCharacterEffectType__Invulnerability                                         = 255,
	EWTLCharacterEffectType__EWTLCharacterEffectType_MAX                             = 256
};

/// Enum /Script/WTL.EWTLMedicineType
/// Size: 0x03
enum EWTLMedicineType : uint8_t
{
	EWTLMedicineType__MedKit                                                         = 0,
	EWTLMedicineType__Stimulator                                                     = 1,
	EWTLMedicineType__EWTLMedicineType_MAX                                           = 2
};

/// Enum /Script/WTL.EWTLCaliber
/// Size: 0x26
enum EWTLCaliber : uint8_t
{
	EWTLCaliber__None                                                                = 0,
	EWTLCaliber__Caliber_22LR                                                        = 1,
	EWTLCaliber__Caliber_9x18PM                                                      = 2,
	EWTLCaliber__Caliber_9x19Parabellum                                              = 3,
	EWTLCaliber__Caliber_7_62x25TT                                                   = 4,
	EWTLCaliber__Caliber_38Special                                                   = 5,
	EWTLCaliber__Caliber_45ACP                                                       = 6,
	EWTLCaliber__Caliber                                                             = 7,
	EWTLCaliber__Caliber                                                             = 8,
	EWTLCaliber__Caliber_5_45x39                                                     = 9,
	EWTLCaliber__Caliber_5_56x45NATO                                                 = 10,
	EWTLCaliber__Caliber_7_62x39                                                     = 11,
	EWTLCaliber__Caliber_308WIN                                                      = 12,
	EWTLCaliber__Caliber_7_62x54                                                     = 13,
	EWTLCaliber__Caliber_9x39                                                        = 14,
	EWTLCaliber__Caliber_7_62x38                                                     = 15,
	EWTLCaliber__Caliber_30_06                                                       = 16,
	EWTLCaliber__Caliber_338LM                                                       = 17,
	EWTLCaliber__Caliber_357Magnum                                                   = 18,
	EWTLCaliber__Caliber_5_7x28                                                      = 19,
	EWTLCaliber__Caliber_43mm                                                        = 20,
	EWTLCaliber__Caliber_44Magnum                                                    = 21,
	EWTLCaliber__Caliber_500SWMagnum                                                 = 22,
	EWTLCaliber__Caliber_40mm                                                        = 23,
	EWTLCaliber__Caliber_76mm                                                        = 24,
	EWTLCaliber__EWTLCaliber_MAX                                                     = 25
};

/// Enum /Script/WTL.EWTLAmmoType
/// Size: 0x04
enum EWTLAmmoType : uint8_t
{
	EWTLAmmoType__Ammo                                                               = 0,
	EWTLAmmoType__Case                                                               = 1,
	EWTLAmmoType__Projectile                                                         = 2,
	EWTLAmmoType__EWTLAmmoType_MAX                                                   = 3
};

/// Enum /Script/WTL.EWTLWeaponType
/// Size: 0x12
enum EWTLWeaponType : uint8_t
{
	EWTLWeaponType__None                                                             = 0,
	EWTLWeaponType__Knife                                                            = 1,
	EWTLWeaponType__Pistol                                                           = 2,
	EWTLWeaponType__Shotgun                                                          = 3,
	EWTLWeaponType__SubMachineGun                                                    = 4,
	EWTLWeaponType__AssaultRifle                                                     = 5,
	EWTLWeaponType__Rifle                                                            = 6,
	EWTLWeaponType__Machinegun                                                       = 7,
	EWTLWeaponType__GrenadeLauncher                                                  = 8,
	EWTLWeaponType__Missile                                                          = 9,
	EWTLWeaponType__Explosive                                                        = 10,
	EWTLWeaponType__EWTLWeaponType_MAX                                               = 11
};

/// Enum /Script/WTL.EWTLLocationStorageType
/// Size: 0x05
enum EWTLLocationStorageType : uint8_t
{
	EWTLLocationStorageType__None                                                    = 0,
	EWTLLocationStorageType__Stash                                                   = 1,
	EWTLLocationStorageType__CraftObject                                             = 2,
	EWTLLocationStorageType__PremiumStash                                            = 3,
	EWTLLocationStorageType__EWTLLocationStorageType_MAX                             = 4
};

/// Enum /Script/WTL.EWTLStorageType
/// Size: 0x10
enum EWTLStorageType : uint8_t
{
	EWTLStorageType__None                                                            = 0,
	EWTLStorageType__Inventory                                                       = 1,
	EWTLStorageType__Commission                                                      = 2,
	EWTLStorageType__CraftObject                                                     = 3,
	EWTLStorageType__LocationStorage                                                 = 4,
	EWTLStorageType__PrivateStorage                                                  = 5,
	EWTLStorageType__ClanStorage                                                     = 6,
	EWTLStorageType__FortificationObject                                             = 7,
	EWTLStorageType__MailPackage                                                     = 8,
	EWTLStorageType__EWTLStorageType_MAX                                             = 9
};

/// Enum /Script/WTL.EWTLMailPackageDeliveryType
/// Size: 0x04
enum EWTLMailPackageDeliveryType : uint8_t
{
	EWTLMailPackageDeliveryType__None                                                = 0,
	EWTLMailPackageDeliveryType__Regular                                             = 1,
	EWTLMailPackageDeliveryType__Fast                                                = 2,
	EWTLMailPackageDeliveryType__EWTLMailPackageDeliveryType_MAX                     = 3
};

/// Enum /Script/WTL.EWTLColliderType
/// Size: 0x07
enum EWTLColliderType : uint8_t
{
	EWTLColliderType__None                                                           = 0,
	EWTLColliderType__Body                                                           = 1,
	EWTLColliderType__Head                                                           = 2,
	EWTLColliderType__Arm                                                            = 3,
	EWTLColliderType__Leg                                                            = 4,
	EWTLColliderType__Foot                                                           = 5,
	EWTLColliderType__EWTLColliderType_MAX                                           = 6
};

/// Enum /Script/WTL.EWTLCharacterClass
/// Size: 0x06
enum EWTLCharacterClass : uint8_t
{
	EWTLCharacterClass__None                                                         = 0,
	EWTLCharacterClass__Miner                                                        = 1,
	EWTLCharacterClass__Hunter                                                       = 2,
	EWTLCharacterClass__Mercenary                                                    = 3,
	EWTLCharacterClass__Engineer                                                     = 4,
	EWTLCharacterClass__EWTLCharacterClass_MAX                                       = 5
};

/// Enum /Script/WTL.EWTLFaction
/// Size: 0x04
enum EWTLFaction : uint8_t
{
	EWTLFaction__None                                                                = 0,
	EWTLFaction__Confederation                                                       = 1,
	EWTLFaction__BlackSunset                                                         = 2,
	EWTLFaction__EWTLFaction_MAX                                                     = 3
};

/// Enum /Script/WTL.EDBConnectionType
/// Size: 0x03
enum EDBConnectionType : uint8_t
{
	EDBConnectionType__TCP                                                           = 0,
	EDBConnectionType__NamedPipe                                                     = 1,
	EDBConnectionType__EDBConnectionType_MAX                                         = 2
};

/// Enum /Script/WTL.EDBDriverType
/// Size: 0x05
enum EDBDriverType : uint8_t
{
	EDBDriverType__None                                                              = 0,
	EDBDriverType__MySQL                                                             = 1,
	EDBDriverType__MySQLDevart                                                       = 2,
	EDBDriverType__MariaDB                                                           = 3,
	EDBDriverType__EDBDriverType_MAX                                                 = 4
};

/// Enum /Script/WTL.EWTLActivatableAnomalyState
/// Size: 0x04
enum EWTLActivatableAnomalyState : uint8_t
{
	EWTLActivatableAnomalyState__Idle                                                = 0,
	EWTLActivatableAnomalyState__BeginActivate                                       = 1,
	EWTLActivatableAnomalyState__Activated                                           = 2,
	EWTLActivatableAnomalyState__EWTLActivatableAnomalyState_MAX                     = 3
};

/// Enum /Script/WTL.EWTLAIStateDeath
/// Size: 0x04
enum EWTLAIStateDeath : uint8_t
{
	EWTLAIStateDeath__None                                                           = 0,
	EWTLAIStateDeath__ToDeath                                                        = 1,
	EWTLAIStateDeath__Death                                                          = 2,
	EWTLAIStateDeath__EWTLAIStateDeath_MAX                                           = 3
};

/// Enum /Script/WTL.EWTLAmbientSoundDayTimeType
/// Size: 0x04
enum EWTLAmbientSoundDayTimeType : uint8_t
{
	EWTLAmbientSoundDayTimeType__AllDay                                              = 0,
	EWTLAmbientSoundDayTimeType__Day                                                 = 1,
	EWTLAmbientSoundDayTimeType__Night                                               = 2,
	EWTLAmbientSoundDayTimeType__EWTLAmbientSoundDayTimeType_MAX                     = 3
};

/// Enum /Script/WTL.EWTLAmbientSoundLocationType
/// Size: 0x03
enum EWTLAmbientSoundLocationType : uint8_t
{
	EWTLAmbientSoundLocationType__Foreground                                         = 0,
	EWTLAmbientSoundLocationType__Underground                                        = 1,
	EWTLAmbientSoundLocationType__EWTLAmbientSoundLocationType_MAX                   = 2
};

/// Enum /Script/WTL.EWTLReloadingNotifyType
/// Size: 0x03
enum EWTLReloadingNotifyType : uint8_t
{
	EWTLReloadingNotifyType__ReloadStart                                             = 0,
	EWTLReloadingNotifyType__ReloadEnd                                               = 1,
	EWTLReloadingNotifyType__EWTLReloadingNotifyType_MAX                             = 2
};

/// Enum /Script/WTL.EWTLAnomalyCheckResult
/// Size: 0x03
enum EWTLAnomalyCheckResult : uint8_t
{
	EWTLAnomalyCheckResult__Result_False                                             = 0,
	EWTLAnomalyCheckResult__Result_True                                              = 1,
	EWTLAnomalyCheckResult__Result_MAX                                               = 2
};

/// Enum /Script/WTL.EWTLAnomalyActionResult
/// Size: 0x03
enum EWTLAnomalyActionResult : uint8_t
{
	EWTLAnomalyActionResult__Failed                                                  = 0,
	EWTLAnomalyActionResult__Success                                                 = 1,
	EWTLAnomalyActionResult__EWTLAnomalyActionResult_MAX                             = 2
};

/// Enum /Script/WTL.EWTLBPLogVerbosity
/// Size: 0x05
enum EWTLBPLogVerbosity : uint8_t
{
	EWTLBPLogVerbosity__Information                                                  = 4,
	EWTLBPLogVerbosity__Warning                                                      = 3,
	EWTLBPLogVerbosity__Error                                                        = 2,
	EWTLBPLogVerbosity__Fatal                                                        = 1,
	EWTLBPLogVerbosity__EWTLBPLogVerbosity_MAX                                       = 5
};

/// Enum /Script/WTL.EWTLBulletHellTraceResultType
/// Size: 0x04
enum EWTLBulletHellTraceResultType : uint8_t
{
	EWTLBulletHellTraceResultType__None                                              = 0,
	EWTLBulletHellTraceResultType__Character                                         = 1,
	EWTLBulletHellTraceResultType__WorldStatic                                       = 2,
	EWTLBulletHellTraceResultType__EWTLBulletHellTraceResultType_MAX                 = 3
};

/// Enum /Script/WTL.EWTLBulletHellAngularType
/// Size: 0x04
enum EWTLBulletHellAngularType : uint8_t
{
	EWTLBulletHellAngularType__Forward                                               = 0,
	EWTLBulletHellAngularType__Reverse                                               = 1,
	EWTLBulletHellAngularType__PingPong                                              = 2,
	EWTLBulletHellAngularType__EWTLBulletHellAngularType_MAX                         = 3
};

/// Enum /Script/WTL.EWTLDisplayInputType
/// Size: 0x08
enum EWTLDisplayInputType : uint8_t
{
	EWTLDisplayInputType__None                                                       = 0,
	EWTLDisplayInputType__InputUp                                                    = 1,
	EWTLDisplayInputType__InputDown                                                  = 2,
	EWTLDisplayInputType__InputRight                                                 = 3,
	EWTLDisplayInputType__InputLeft                                                  = 4,
	EWTLDisplayInputType__ButtonPressed1                                             = 5,
	EWTLDisplayInputType__ButtonPressed2                                             = 6,
	EWTLDisplayInputType__EWTLDisplayInputType_MAX                                   = 7
};

/// Enum /Script/WTL.EWTLCharacterAnimationInstanceMovementState
/// Size: 0x09
enum EWTLCharacterAnimationInstanceMovementState : uint8_t
{
	EWTLCharacterAnimationInstanceMovementState__None                                = 0,
	EWTLCharacterAnimationInstanceMovementState__Stand                               = 1,
	EWTLCharacterAnimationInstanceMovementState__StandWalking                        = 2,
	EWTLCharacterAnimationInstanceMovementState__StandSprinting                      = 3,
	EWTLCharacterAnimationInstanceMovementState__Crouch                              = 4,
	EWTLCharacterAnimationInstanceMovementState__CrouchWalking                       = 5,
	EWTLCharacterAnimationInstanceMovementState__Prone                               = 6,
	EWTLCharacterAnimationInstanceMovementState__ProneWalking                        = 7,
	EWTLCharacterAnimationInstanceMovementState__EWTLCharacterAnimationInstanceMovementState_MAX = 8
};

/// Enum /Script/WTL.EWTLRootMotionControlLockingType
/// Size: 0x05
enum EWTLRootMotionControlLockingType : uint8_t
{
	EWTLRootMotionControlLockingType__None                                           = 0,
	EWTLRootMotionControlLockingType__LockOnlyYaw                                    = 1,
	EWTLRootMotionControlLockingType__LockOnlyPitch                                  = 2,
	EWTLRootMotionControlLockingType__LockAll                                        = 3,
	EWTLRootMotionControlLockingType__EWTLRootMotionControlLockingType_MAX           = 4
};

/// Enum /Script/WTL.EWTLSimplifiedIdentificationType
/// Size: 0x05
enum EWTLSimplifiedIdentificationType : uint8_t
{
	EWTLSimplifiedIdentificationType__None                                           = 0,
	EWTLSimplifiedIdentificationType__OriginalSimplified                             = 1,
	EWTLSimplifiedIdentificationType__HealthbarCombined                              = 2,
	EWTLSimplifiedIdentificationType__CharacterNameOnly                              = 3,
	EWTLSimplifiedIdentificationType__EWTLSimplifiedIdentificationType_MAX           = 4
};

/// Enum /Script/WTL.EWTLLadderMontageType
/// Size: 0x06
enum EWTLLadderMontageType : uint8_t
{
	EWTLLadderMontageType__None                                                      = 0,
	EWTLLadderMontageType__LadderUpStart                                             = 1,
	EWTLLadderMontageType__LadderUpEnd                                               = 2,
	EWTLLadderMontageType__LadderDownStart                                           = 3,
	EWTLLadderMontageType__LadderDownEnd                                             = 4,
	EWTLLadderMontageType__EWTLLadderMontageType_MAX                                 = 5
};

/// Enum /Script/WTL.EWTLCharacterPreviewType
/// Size: 0x05
enum EWTLCharacterPreviewType : uint8_t
{
	EWTLCharacterPreviewType__None                                                   = 0,
	EWTLCharacterPreviewType__CustomizationOnly                                      = 1,
	EWTLCharacterPreviewType__Equipment                                              = 2,
	EWTLCharacterPreviewType__EquipmentWithUsableItem                                = 3,
	EWTLCharacterPreviewType__EWTLCharacterPreviewType_MAX                           = 4
};

/// Enum /Script/WTL.EWTLTurretState
/// Size: 0x05
enum EWTLTurretState : uint8_t
{
	EWTLTurretState__None                                                            = 0,
	EWTLTurretState__Prewarm                                                         = 1,
	EWTLTurretState__Firing                                                          = 2,
	EWTLTurretState__Cooldown                                                        = 3,
	EWTLTurretState__EWTLTurretState_MAX                                             = 4
};

/// Enum /Script/WTL.EWTLConfirmationType
/// Size: 0x05
enum EWTLConfirmationType : uint8_t
{
	EWTLConfirmationType__None                                                       = 0,
	EWTLConfirmationType__DropItemFromInventory                                      = 1,
	EWTLConfirmationType__DestroyItemInInventory                                     = 2,
	EWTLConfirmationType__RemoveStash                                                = 3,
	EWTLConfirmationType__EWTLConfirmationType_MAX                                   = 4
};

/// Enum /Script/WTL.EWTLBackButtonActionType
/// Size: 0x05
enum EWTLBackButtonActionType : uint8_t
{
	EWTLBackButtonActionType__None                                                   = 0,
	EWTLBackButtonActionType__BackToStoreItems                                       = 1,
	EWTLBackButtonActionType__BackToViewItem                                         = 2,
	EWTLBackButtonActionType__BackToCart                                             = 3,
	EWTLBackButtonActionType__EWTLBackButtonActionType_MAX                           = 4
};

/// Enum /Script/WTL.EFontSize
/// Size: 0x04
enum EFontSize : uint8_t
{
	EFontSize__None                                                                  = 0,
	EFontSize__Default                                                               = 16,
	EFontSize__Increased                                                             = 18,
	EFontSize__EFontSize_MAX                                                         = 19
};

/// Enum /Script/WTL.EWTLControlledPawnType
/// Size: 0x03
enum EWTLControlledPawnType : uint8_t
{
	EWTLControlledPawnType__Monster                                                  = 0,
	EWTLControlledPawnType__Robot                                                    = 1,
	EWTLControlledPawnType__EWTLControlledPawnType_MAX                               = 2
};

/// Enum /Script/WTL.EWTLEnemyNPCExclamationType
/// Size: 0x10
enum EWTLEnemyNPCExclamationType : uint8_t
{
	EWTLEnemyNPCExclamationType__None                                                = 0,
	EWTLEnemyNPCExclamationType__Attack                                              = 1,
	EWTLEnemyNPCExclamationType__DamageDone                                          = 2,
	EWTLEnemyNPCExclamationType__Grenade                                             = 3,
	EWTLEnemyNPCExclamationType__Reload                                              = 4,
	EWTLEnemyNPCExclamationType__Warning                                             = 5,
	EWTLEnemyNPCExclamationType__TargetSighted                                       = 6,
	EWTLEnemyNPCExclamationType__TargetListened                                      = 7,
	EWTLEnemyNPCExclamationType__TalkToTarget                                        = 8,
	EWTLEnemyNPCExclamationType__EWTLEnemyNPCExclamationType_MAX                     = 9
};

/// Enum /Script/WTL.EWTLEnemyNPCSpawnType
/// Size: 0x03
enum EWTLEnemyNPCSpawnType : uint8_t
{
	EWTLEnemyNPCSpawnType__Wave                                                      = 0,
	EWTLEnemyNPCSpawnType__ReplanishTheRanks                                         = 1,
	EWTLEnemyNPCSpawnType__EWTLEnemyNPCSpawnType_MAX                                 = 2
};

/// Enum /Script/WTL.EWTLCannotUseRangedWeaponOnClientSideReason
/// Size: 0x03
enum EWTLCannotUseRangedWeaponOnClientSideReason : uint8_t
{
	EWTLCannotUseRangedWeaponOnClientSideReason__None                                = 0,
	EWTLCannotUseRangedWeaponOnClientSideReason__AmmoIsFireworkAndLocationIsUndeground = 1,
	EWTLCannotUseRangedWeaponOnClientSideReason__EWTLCannotUseRangedWeaponOnClientSideReason_MAX = 2
};

/// Enum /Script/WTL.EWTLDroneMovementMode
/// Size: 0x04
enum EWTLDroneMovementMode : uint8_t
{
	EWTLDroneMovementMode__None                                                      = 0,
	EWTLDroneMovementMode__RotateAroundCharacter                                     = 1,
	EWTLDroneMovementMode__FollowCharacterFromAbove                                  = 2,
	EWTLDroneMovementMode__EWTLDroneMovementMode_MAX                                 = 3
};

/// Enum /Script/WTL.EWTLWeaponModificationPartsType
/// Size: 0x05
enum EWTLWeaponModificationPartsType : uint8_t
{
	EWTLWeaponModificationPartsType__None                                            = 0,
	EWTLWeaponModificationPartsType__Damage                                          = 1,
	EWTLWeaponModificationPartsType__Accuracy                                        = 2,
	EWTLWeaponModificationPartsType__Durability                                      = 3,
	EWTLWeaponModificationPartsType__EWTLWeaponModificationPartsType_MAX             = 4
};

/// Enum /Script/WTL.EWTLCannotCraftRecipeInCraftObjectReason
/// Size: 0x04
enum EWTLCannotCraftRecipeInCraftObjectReason : uint8_t
{
	EWTLCannotCraftRecipeInCraftObjectReason__None                                   = 0,
	EWTLCannotCraftRecipeInCraftObjectReason__StorageIsFull                          = 1,
	EWTLCannotCraftRecipeInCraftObjectReason__NotEnoughAvailableSlotsInStorage       = 2,
	EWTLCannotCraftRecipeInCraftObjectReason__EWTLCannotCraftRecipeInCraftObjectReason_MAX = 3
};

/// Enum /Script/WTL.EWTLDebugSuggestionType
/// Size: 0x04
enum EWTLDebugSuggestionType : uint8_t
{
	EWTLDebugSuggestionType__None                                                    = 0,
	EWTLDebugSuggestionType__Account                                                 = 1,
	EWTLDebugSuggestionType__Friend                                                  = 2,
	EWTLDebugSuggestionType__EWTLDebugSuggestionType_MAX                             = 3
};

/// Enum /Script/WTL.EWTLCannotBuyItemReason
/// Size: 0x04
enum EWTLCannotBuyItemReason : uint8_t
{
	EWTLCannotBuyItemReason__None                                                    = 0,
	EWTLCannotBuyItemReason__ItemIsOutOfStock                                        = 1,
	EWTLCannotBuyItemReason__ItemPriceHasBeenChanged                                 = 2,
	EWTLCannotBuyItemReason__EWTLCannotBuyItemReason_MAX                             = 3
};

/// Enum /Script/WTL.EWTLPlayerPawnType
/// Size: 0x05
enum EWTLPlayerPawnType : uint8_t
{
	EWTLPlayerPawnType__NoneOrDead                                                   = 0,
	EWTLPlayerPawnType__Character                                                    = 1,
	EWTLPlayerPawnType__Monster                                                      = 2,
	EWTLPlayerPawnType__Spectator                                                    = 3,
	EWTLPlayerPawnType__EWTLPlayerPawnType_MAX                                       = 4
};

/// Enum /Script/WTL.EWTLAchievementRarity
/// Size: 0x07
enum EWTLAchievementRarity : uint8_t
{
	EWTLAchievementRarity__Common                                                    = 0,
	EWTLAchievementRarity__Rare                                                      = 1,
	EWTLAchievementRarity__VeryRare                                                  = 2,
	EWTLAchievementRarity__UltraRare                                                 = 3,
	EWTLAchievementRarity__IncredibleRare                                            = 4,
	EWTLAchievementRarity__Legendary                                                 = 5,
	EWTLAchievementRarity__EWTLAchievementRarity_MAX                                 = 6
};

/// Enum /Script/WTL.EWTLCharacterStateInVehicle
/// Size: 0x09
enum EWTLCharacterStateInVehicle : uint8_t
{
	EWTLCharacterStateInVehicle__None                                                = 0,
	EWTLCharacterStateInVehicle__Idle                                                = 1,
	EWTLCharacterStateInVehicle__Riding                                              = 2,
	EWTLCharacterStateInVehicle__Reverse                                             = 3,
	EWTLCharacterStateInVehicle__Jump                                                = 4,
	EWTLCharacterStateInVehicle__SlideRight                                          = 5,
	EWTLCharacterStateInVehicle__SlideLeft                                           = 6,
	EWTLCharacterStateInVehicle__Acceleration                                        = 7,
	EWTLCharacterStateInVehicle__EWTLCharacterStateInVehicle_MAX                     = 8
};

/// Enum /Script/WTL.EWTLVehicleState
/// Size: 0x05
enum EWTLVehicleState : uint8_t
{
	EWTLVehicleState__None                                                           = 0,
	EWTLVehicleState__CharacterLanded                                                = 1,
	EWTLVehicleState__CharacterUnlanded                                              = 2,
	EWTLVehicleState__Idle                                                           = 3,
	EWTLVehicleState__EWTLVehicleState_MAX                                           = 4
};

/// Enum /Script/WTL.EWTLCannotTeleportOnFortificationReason
/// Size: 0x06
enum EWTLCannotTeleportOnFortificationReason : uint8_t
{
	EWTLCannotTeleportOnFortificationReason__None                                    = 0,
	EWTLCannotTeleportOnFortificationReason__NotEnoughTeleportationDeviceEnergy      = 1,
	EWTLCannotTeleportOnFortificationReason__ControlFactionNotEqualCharacterFaction  = 2,
	EWTLCannotTeleportOnFortificationReason__CharacterReputationTooLow               = 3,
	EWTLCannotTeleportOnFortificationReason__CommandCoreEnergyNotEnoughForSafeZoneFunctionality = 4,
	EWTLCannotTeleportOnFortificationReason__EWTLCannotTeleportOnFortificationReason_MAX = 5
};

/// Enum /Script/WTL.EWTLCheckType
/// Size: 0x05
enum EWTLCheckType : uint8_t
{
	EWTLCheckType__MustHaveAll                                                       = 0,
	EWTLCheckType__MustHaveOneOf                                                     = 1,
	EWTLCheckType__MustNotHaveAll                                                    = 2,
	EWTLCheckType__MustNotHaveOneOf                                                  = 3,
	EWTLCheckType__EWTLCheckType_MAX                                                 = 4
};

/// Enum /Script/WTL.EWTLCharacterStateIndicatorNatureType
/// Size: 0x05
enum EWTLCharacterStateIndicatorNatureType : uint8_t
{
	EWTLCharacterStateIndicatorNatureType__Neutral                                   = 0,
	EWTLCharacterStateIndicatorNatureType__Positive                                  = 1,
	EWTLCharacterStateIndicatorNatureType__Negative_Average                          = 2,
	EWTLCharacterStateIndicatorNatureType__Negative_Severe                           = 3,
	EWTLCharacterStateIndicatorNatureType__EWTLCharacterStateIndicatorNatureType_MAX = 4
};

/// Enum /Script/WTL.EWTLCharacterEffectNatureType
/// Size: 0x03
enum EWTLCharacterEffectNatureType : uint8_t
{
	EWTLCharacterEffectNatureType__Negative                                          = 0,
	EWTLCharacterEffectNatureType__Positive                                          = 1,
	EWTLCharacterEffectNatureType__EWTLCharacterEffectNatureType_MAX                 = 2
};

/// Enum /Script/WTL.EWTLStoreItemType
/// Size: 0x12
enum EWTLStoreItemType : uint8_t
{
	EWTLStoreItemType__All                                                           = 0,
	EWTLStoreItemType__Weapons                                                       = 1,
	EWTLStoreItemType__Ammo                                                          = 2,
	EWTLStoreItemType__Medicine                                                      = 3,
	EWTLStoreItemType__Equipment                                                     = 4,
	EWTLStoreItemType__ClothesAndArmor                                               = 5,
	EWTLStoreItemType__Resources                                                     = 6,
	EWTLStoreItemType__Other                                                         = 7,
	EWTLStoreItemType__Tokens                                                        = 8,
	EWTLStoreItemType__Bundles                                                       = 9,
	EWTLStoreItemType__NewItems                                                      = 10,
	EWTLStoreItemType__EWTLStoreItemType_MAX                                         = 11
};

/// Enum /Script/WTL.EWTLCountryRegion
/// Size: 0x07
enum EWTLCountryRegion : uint8_t
{
	EWTLCountryRegion__Unknown                                                       = 0,
	EWTLCountryRegion__Asia                                                          = 1,
	EWTLCountryRegion__America                                                       = 2,
	EWTLCountryRegion__Europe                                                        = 3,
	EWTLCountryRegion__CIS                                                           = 4,
	EWTLCountryRegion__Oceania                                                       = 5,
	EWTLCountryRegion__EWTLCountryRegion_MAX                                         = 6
};

/// Enum /Script/WTL.EWTLMicrotransactionType
/// Size: 0x03
enum EWTLMicrotransactionType : uint8_t
{
	EWTLMicrotransactionType__Credits                                                = 0,
	EWTLMicrotransactionType__Premium                                                = 1,
	EWTLMicrotransactionType__EWTLMicrotransactionType_MAX                           = 2
};

/// Enum /Script/WTL.EWTLCannotPutToAccountInventoryReason
/// Size: 0x10
enum EWTLCannotPutToAccountInventoryReason : uint8_t
{
	EWTLCannotPutToAccountInventoryReason__None                                      = 0,
	EWTLCannotPutToAccountInventoryReason__CannotPut                                 = 1,
	EWTLCannotPutToAccountInventoryReason__HaveNoPremium                             = 2,
	EWTLCannotPutToAccountInventoryReason__LoadedWeapon                              = 3,
	EWTLCannotPutToAccountInventoryReason__WeaponWithAttachments                     = 4,
	EWTLCannotPutToAccountInventoryReason__ModifiedWeapon                            = 5,
	EWTLCannotPutToAccountInventoryReason__AmmoLoadedInWeapon                        = 6,
	EWTLCannotPutToAccountInventoryReason__VehicleCurrentInUse                       = 7,
	EWTLCannotPutToAccountInventoryReason__ClothesWithArmorPlates                    = 8,
	EWTLCannotPutToAccountInventoryReason__EWTLCannotPutToAccountInventoryReason_MAX = 9
};

/// Enum /Script/WTL.EWTLCannotTakeFromAccountInventoryReason
/// Size: 0x05
enum EWTLCannotTakeFromAccountInventoryReason : uint8_t
{
	EWTLCannotTakeFromAccountInventoryReason__None                                   = 0,
	EWTLCannotTakeFromAccountInventoryReason__CannotTake                             = 1,
	EWTLCannotTakeFromAccountInventoryReason__LowCharacterLevel                      = 2,
	EWTLCannotTakeFromAccountInventoryReason__NotEnoughAvailableSlotsInInventory     = 3,
	EWTLCannotTakeFromAccountInventoryReason__EWTLCannotTakeFromAccountInventoryReason_MAX = 4
};

/// Enum /Script/WTL.EWTLClanScoreType
/// Size: 0x06
enum EWTLClanScoreType : uint8_t
{
	EWTLClanScoreType__None                                                          = 0,
	EWTLClanScoreType__PVP                                                           = 1,
	EWTLClanScoreType__PVE                                                           = 2,
	EWTLClanScoreType__Craft                                                         = 3,
	EWTLClanScoreType__Technology                                                    = 4,
	EWTLClanScoreType__EWTLClanScoreType_MAX                                         = 5
};

/// Enum /Script/WTL.EWTLSlotMachineSymbolCheckType
/// Size: 0x03
enum EWTLSlotMachineSymbolCheckType : uint8_t
{
	EWTLSlotMachineSymbolCheckType__NotAny                                           = 0,
	EWTLSlotMachineSymbolCheckType__Any                                              = 1,
	EWTLSlotMachineSymbolCheckType__EWTLSlotMachineSymbolCheckType_MAX               = 2
};

/// Enum /Script/WTL.EWTLSlotMachineSymbol
/// Size: 0x08
enum EWTLSlotMachineSymbol : uint8_t
{
	EWTLSlotMachineSymbol__Blank                                                     = 0,
	EWTLSlotMachineSymbol__Cherry                                                    = 1,
	EWTLSlotMachineSymbol__Bar                                                       = 2,
	EWTLSlotMachineSymbol__DoubleBar                                                 = 3,
	EWTLSlotMachineSymbol__TripleBar                                                 = 4,
	EWTLSlotMachineSymbol__Seven                                                     = 5,
	EWTLSlotMachineSymbol__Jackpot                                                   = 6,
	EWTLSlotMachineSymbol__EWTLSlotMachineSymbol_MAX                                 = 7
};

/// Enum /Script/WTL.EWTLComboBoxStringType
/// Size: 0x06
enum EWTLComboBoxStringType : uint8_t
{
	EWTLComboBoxStringType__None                                                     = 0,
	EWTLComboBoxStringType__CommonComboBoxString                                     = 1,
	EWTLComboBoxStringType__StoreComboBoxString                                      = 2,
	EWTLComboBoxStringType__HUDComboBoxString                                        = 3,
	EWTLComboBoxStringType__PDAComboBoxString                                        = 4,
	EWTLComboBoxStringType__EWTLComboBoxStringType_MAX                               = 5
};

/// Enum /Script/WTL.EWTLCheckBoxType
/// Size: 0x05
enum EWTLCheckBoxType : uint8_t
{
	EWTLCheckBoxType__None                                                           = 0,
	EWTLCheckBoxType__CommonCheckBox                                                 = 1,
	EWTLCheckBoxType__HUDCheckBox                                                    = 2,
	EWTLCheckBoxType__PDACheckBox                                                    = 3,
	EWTLCheckBoxType__EWTLCheckBoxType_MAX                                           = 4
};

/// Enum /Script/WTL.EWTLSwitcherType
/// Size: 0x07
enum EWTLSwitcherType : uint8_t
{
	EWTLSwitcherType__None                                                           = 0,
	EWTLSwitcherType__PageSwitcher                                                   = 1,
	EWTLSwitcherType__ParameterSwitcher                                              = 2,
	EWTLSwitcherType__Common_Parameter_PointSpin                                     = 3,
	EWTLSwitcherType__HUD_Parameter_PointSpin                                        = 4,
	EWTLSwitcherType__PDA_Parameter_PointSpin                                        = 5,
	EWTLSwitcherType__EWTLSwitcherType_MAX                                           = 6
};

/// Enum /Script/WTL.EWTLCommonClickedItemType
/// Size: 0x07
enum EWTLCommonClickedItemType : uint8_t
{
	EWTLCommonClickedItemType__None                                                  = 0,
	EWTLCommonClickedItemType__CommonClickedItem                                     = 1,
	EWTLCommonClickedItemType__MainMenuClickedItem                                   = 2,
	EWTLCommonClickedItemType__StoreClickedItem                                      = 3,
	EWTLCommonClickedItemType__HUDClickedItem                                        = 4,
	EWTLCommonClickedItemType__PDAClickedItem                                        = 5,
	EWTLCommonClickedItemType__EWTLCommonClickedItemType_MAX                         = 6
};

/// Enum /Script/WTL.EWTLCommonButtonType
/// Size: 0x12
enum EWTLCommonButtonType : uint8_t
{
	EWTLCommonButtonType__None                                                       = 0,
	EWTLCommonButtonType__CommonButton                                               = 1,
	EWTLCommonButtonType__CommonTabButton                                            = 2,
	EWTLCommonButtonType__CommonTypeButton                                           = 3,
	EWTLCommonButtonType__HUDButton                                                  = 4,
	EWTLCommonButtonType__HUDTabButton                                               = 5,
	EWTLCommonButtonType__HUDPopupMenuButton                                         = 6,
	EWTLCommonButtonType__PDAButton                                                  = 7,
	EWTLCommonButtonType__ColorButton                                                = 8,
	EWTLCommonButtonType__StoreButton                                                = 9,
	EWTLCommonButtonType__ColorPresetButton                                          = 10,
	EWTLCommonButtonType__EWTLCommonButtonType_MAX                                   = 11
};

/// Enum /Script/WTL.EWTLFoodActionType
/// Size: 0x04
enum EWTLFoodActionType : uint8_t
{
	EWTLFoodActionType__None                                                         = 0,
	EWTLFoodActionType__Drink                                                        = 1,
	EWTLFoodActionType__Eat                                                          = 2,
	EWTLFoodActionType__EWTLFoodActionType_MAX                                       = 3
};

/// Enum /Script/WTL.EWTLMessageDialogText
/// Size: 0x03
enum EWTLMessageDialogText : uint8_t
{
	EWTLMessageDialogText__HasNotPurchasedCustomizationItemsErrorText                = 0,
	EWTLMessageDialogText__NotEnoughTokensToBuyWantToPopUpErrorText                  = 1,
	EWTLMessageDialogText__EWTLMessageDialogText_MAX                                 = 2
};

/// Enum /Script/WTL.EWTLLootBoxType
/// Size: 0x07
enum EWTLLootBoxType : uint8_t
{
	EWTLLootBoxType__None                                                            = 0,
	EWTLLootBoxType__Beginner                                                        = 1,
	EWTLLootBoxType__Regular                                                         = 2,
	EWTLLootBoxType__Advanced                                                        = 3,
	EWTLLootBoxType__Special                                                         = 4,
	EWTLLootBoxType__Rare                                                            = 5,
	EWTLLootBoxType__EWTLLootBoxType_MAX                                             = 6
};

/// Enum /Script/WTL.EWTLSocialNetworkType
/// Size: 0x05
enum EWTLSocialNetworkType : uint8_t
{
	EWTLSocialNetworkType__None                                                      = 0,
	EWTLSocialNetworkType__VK                                                        = 1,
	EWTLSocialNetworkType__Facebook                                                  = 2,
	EWTLSocialNetworkType__Twitter                                                   = 3,
	EWTLSocialNetworkType__EWTLSocialNetworkType_MAX                                 = 4
};

/// Enum /Script/WTL.EWTLArenaMatchState
/// Size: 0x05
enum EWTLArenaMatchState : uint8_t
{
	EWTLArenaMatchState__None                                                        = 0,
	EWTLArenaMatchState__WaitingForStart                                             = 1,
	EWTLArenaMatchState__InProgress                                                  = 2,
	EWTLArenaMatchState__Done                                                        = 3,
	EWTLArenaMatchState__EWTLArenaMatchState_MAX                                     = 4
};

/// Enum /Script/WTL.EWTLButtonText
/// Size: 0x44
enum EWTLButtonText : uint8_t
{
	EWTLButtonText__None                                                             = 0,
	EWTLButtonText__OK                                                               = 1,
	EWTLButtonText__Cancel                                                           = 2,
	EWTLButtonText__Yes                                                              = 3,
	EWTLButtonText__No                                                               = 4,
	EWTLButtonText__Apply                                                            = 5,
	EWTLButtonText__Back                                                             = 6,
	EWTLButtonText__TopUp                                                            = 7,
	EWTLButtonText__Send                                                             = 8,
	EWTLButtonText__Take                                                             = 9,
	EWTLButtonText__TakeAll                                                          = 10,
	EWTLButtonText__Update                                                           = 11,
	EWTLButtonText__Log                                                              = 12,
	EWTLButtonText__Settings                                                         = 13,
	EWTLButtonText__Withdraw                                                         = 14,
	EWTLButtonText__Deposit                                                          = 15,
	EWTLButtonText__Details                                                          = 16,
	EWTLButtonText__Open                                                             = 17,
	EWTLButtonText__Close                                                            = 18,
	EWTLButtonText__Receive                                                          = 19,
	EWTLButtonText__Buy                                                              = 20,
	EWTLButtonText__Info                                                             = 21,
	EWTLButtonText__ThreeD                                                           = 22,
	EWTLButtonText__Play                                                             = 23,
	EWTLButtonText__Set                                                              = 24,
	EWTLButtonText__Add                                                              = 25,
	EWTLButtonText__Remove1                                                          = 26,
	EWTLButtonText__Remove2                                                          = 27,
	EWTLButtonText__RemoveAll1                                                       = 28,
	EWTLButtonText__RemoveAll2                                                       = 29,
	EWTLButtonText__Delete                                                           = 30,
	EWTLButtonText__DeleteAll                                                        = 31,
	EWTLButtonText__Edit                                                             = 32,
	EWTLButtonText__Convert                                                          = 33,
	EWTLButtonText__Unite                                                            = 34,
	EWTLButtonText__Read                                                             = 35,
	EWTLButtonText__Create                                                           = 36,
	EWTLButtonText__Rename                                                           = 37,
	EWTLButtonText__Execute                                                          = 38,
	EWTLButtonText__Save                                                             = 39,
	EWTLButtonText__InviteToGroup                                                    = 40,
	EWTLButtonText__Exchange                                                         = 41,
	EWTLButtonText__ClanApplication                                                  = 42,
	EWTLButtonText__EWTLButtonText_MAX                                               = 43
};

/// Enum /Script/WTL.EWTLTutorialMessageType
/// Size: 0x04
enum EWTLTutorialMessageType : uint8_t
{
	EWTLTutorialMessageType__None                                                    = 0,
	EWTLTutorialMessageType__Tutorial                                                = 1,
	EWTLTutorialMessageType__Warning                                                 = 2,
	EWTLTutorialMessageType__EWTLTutorialMessageType_MAX                             = 3
};

/// Enum /Script/WTL.EWTLTutorialMessage
/// Size: 0x19
enum EWTLTutorialMessage : uint8_t
{
	EWTLTutorialMessage__None                                                        = 0,
	EWTLTutorialMessage__ShowPDA                                                     = 1,
	EWTLTutorialMessage__ShowMap                                                     = 2,
	EWTLTutorialMessage__ShowMapLegend                                               = 3,
	EWTLTutorialMessage__EmotionsMenu                                                = 9,
	EWTLTutorialMessage__FirstSkillPoint                                             = 10,
	EWTLTutorialMessage__GasMaskStuffSlot                                            = 16,
	EWTLTutorialMessage__HasSteamInventoryItems                                      = 20,
	EWTLTutorialMessage__PlaceStash                                                  = 21,
	EWTLTutorialMessage__AccountInventoryInStore                                     = 22,
	EWTLTutorialMessage__AccountInventoryInStoreFastAccess                           = 23,
	EWTLTutorialMessage__HungerAffects                                               = 24,
	EWTLTutorialMessage__ThirstAffects                                               = 25,
	EWTLTutorialMessage__Satiety                                                     = 26,
	EWTLTutorialMessage__Exhaustion                                                  = 27,
	EWTLTutorialMessage__DelayedDeathSanatoriumTutorial                              = 28,
	EWTLTutorialMessage__WantToPlacePremiumStash                                     = 29,
	EWTLTutorialMessage__PlacedPremiumStash                                          = 30,
	EWTLTutorialMessage__EWTLTutorialMessage_MAX                                     = 31
};

/// Enum /Script/WTL.EWTLRepairKitState
/// Size: 0x05
enum EWTLRepairKitState : uint8_t
{
	EWTLRepairKitState__None                                                         = 0,
	EWTLRepairKitState__StartRepair                                                  = 1,
	EWTLRepairKitState__StopRepair                                                   = 2,
	EWTLRepairKitState__OutOfEnergy                                                  = 3,
	EWTLRepairKitState__EWTLRepairKitState_MAX                                       = 4
};

/// Enum /Script/WTL.EWTLFortificationNotificationState
/// Size: 0x08
enum EWTLFortificationNotificationState : uint8_t
{
	EWTLFortificationNotificationState__None                                         = 0,
	EWTLFortificationNotificationState__StartLoosingPoint                            = 1,
	EWTLFortificationNotificationState__StartCapturingPoint                          = 2,
	EWTLFortificationNotificationState__PointCaptured                                = 3,
	EWTLFortificationNotificationState__PointSecured                                 = 4,
	EWTLFortificationNotificationState__PointLost                                    = 5,
	EWTLFortificationNotificationState__PointCaptureFailed                           = 6,
	EWTLFortificationNotificationState__EWTLFortificationNotificationState_MAX       = 7
};

/// Enum /Script/WTL.EWTLFortificationPointState
/// Size: 0x05
enum EWTLFortificationPointState : uint8_t
{
	EWTLFortificationPointState__None                                                = 0,
	EWTLFortificationPointState__CaptureStarted                                      = 1,
	EWTLFortificationPointState__Captured                                            = 2,
	EWTLFortificationPointState__Restored                                            = 3,
	EWTLFortificationPointState__EWTLFortificationPointState_MAX                     = 4
};

/// Enum /Script/WTL.EWTLFortificationJammerState
/// Size: 0x06
enum EWTLFortificationJammerState : uint8_t
{
	EWTLFortificationJammerState__None                                               = 0,
	EWTLFortificationJammerState__Connected                                          = 1,
	EWTLFortificationJammerState__ConnectedOutOfEnergy                               = 2,
	EWTLFortificationJammerState__ConnectionRefused                                  = 3,
	EWTLFortificationJammerState__UnableToConnect                                    = 4,
	EWTLFortificationJammerState__EWTLFortificationJammerState_MAX                   = 5
};

/// Enum /Script/WTL.EWTLEquipmentType
/// Size: 0x08
enum EWTLEquipmentType : uint8_t
{
	EWTLEquipmentType__None                                                          = 0,
	EWTLEquipmentType__NightVision                                                   = 1,
	EWTLEquipmentType__NDPDetector                                                   = 2,
	EWTLEquipmentType__MetalDetector                                                 = 3,
	EWTLEquipmentType__RespiratoryProtection                                         = 4,
	EWTLEquipmentType__RadiationDetector                                             = 5,
	EWTLEquipmentType__PersonalEnergyShield                                          = 6,
	EWTLEquipmentType__EWTLEquipmentType_MAX                                         = 7
};

/// Enum /Script/WTL.EWTLAITeam
/// Size: 0x07
enum EWTLAITeam : uint8_t
{
	EWTLAITeam__None                                                                 = 0,
	EWTLAITeam__Vagrants                                                             = 1,
	EWTLAITeam__Monsters                                                             = 2,
	EWTLAITeam__Confederation                                                        = 250,
	EWTLAITeam__BlackSunset                                                          = 251,
	EWTLAITeam__Neutrals                                                             = 255,
	EWTLAITeam__EWTLAITeam_MAX                                                       = 256
};

/// Enum /Script/WTL.EWTLCharacterStunhitDirection
/// Size: 0x10
enum EWTLCharacterStunhitDirection : uint8_t
{
	EWTLCharacterStunhitDirection__None                                              = 0,
	EWTLCharacterStunhitDirection__Right                                             = 1,
	EWTLCharacterStunhitDirection__Left                                              = 2,
	EWTLCharacterStunhitDirection__InPlace                                           = 3,
	EWTLCharacterStunhitDirection__Back                                              = 4,
	EWTLCharacterStunhitDirection__FallDown                                          = 5,
	EWTLCharacterStunhitDirection__SpikeInShoulder                                   = 6,
	EWTLCharacterStunhitDirection__SpikeInStomach                                    = 7,
	EWTLCharacterStunhitDirection__SpikeInHip                                        = 8,
	EWTLCharacterStunhitDirection__EWTLCharacterStunhitDirection_MAX                 = 9
};

/// Enum /Script/WTL.EWTLRenderTargetType
/// Size: 0x03
enum EWTLRenderTargetType : uint8_t
{
	EWTLRenderTargetType__Square                                                     = 0,
	EWTLRenderTargetType__Landscape                                                  = 1,
	EWTLRenderTargetType__EWTLRenderTargetType_MAX                                   = 2
};

/// Enum /Script/WTL.EWTLDialogMessageType
/// Size: 0x04
enum EWTLDialogMessageType : uint8_t
{
	EWTLDialogMessageType__Information                                               = 0,
	EWTLDialogMessageType__Warning                                                   = 1,
	EWTLDialogMessageType__Error                                                     = 2,
	EWTLDialogMessageType__EWTLDialogMessageType_MAX                                 = 3
};

/// Enum /Script/WTL.EWTLNPCType
/// Size: 0x08
enum EWTLNPCType : uint8_t
{
	EWTLNPCType__None                                                                = 0,
	EWTLNPCType__Doctor                                                              = 1,
	EWTLNPCType__Stockman                                                            = 2,
	EWTLNPCType__Gunsmith                                                            = 3,
	EWTLNPCType__Trader                                                              = 4,
	EWTLNPCType__Barman                                                              = 5,
	EWTLNPCType__BlackMarketDealer                                                   = 6,
	EWTLNPCType__EWTLNPCType_MAX                                                     = 7
};

/// Enum /Script/WTL.EWTLReportFormResponseError
/// Size: 0x04
enum EWTLReportFormResponseError : uint8_t
{
	EWTLReportFormResponseError__None                                                = 0,
	EWTLReportFormResponseError__ServerDoesNotResponse                               = 1,
	EWTLReportFormResponseError__ServerRequestError                                  = 2,
	EWTLReportFormResponseError__EWTLReportFormResponseError_MAX                     = 3
};

/// Enum /Script/WTL.EWTLReportFormState
/// Size: 0x05
enum EWTLReportFormState : uint8_t
{
	EWTLReportFormState__FeedbackForm                                                = 0,
	EWTLReportFormState__RequestSending                                              = 1,
	EWTLReportFormState__RequestSuccess                                              = 2,
	EWTLReportFormState__RequestError                                                = 3,
	EWTLReportFormState__EWTLReportFormState_MAX                                     = 4
};

/// Enum /Script/WTL.EWTLUseMenuActionType
/// Size: 0x17
enum EWTLUseMenuActionType : uint8_t
{
	EWTLUseMenuActionType__None                                                      = 0,
	EWTLUseMenuActionType__ShowInformationAboutCharacter                             = 1,
	EWTLUseMenuActionType__SendTextChatMessageToCharacter                            = 2,
	EWTLUseMenuActionType__GiveTokensToCharacter                                     = 3,
	EWTLUseMenuActionType__OfferBarterToCharacter                                    = 4,
	EWTLUseMenuActionType__InviteCharacterToGroup                                    = 5,
	EWTLUseMenuActionType__MuteCharacter                                             = 6,
	EWTLUseMenuActionType__UnmuteCharacter                                           = 7,
	EWTLUseMenuActionType__TextChatMuteCharacter                                     = 8,
	EWTLUseMenuActionType__TextChatUnmuteCharacter                                   = 9,
	EWTLUseMenuActionType__ReportCharacter                                           = 10,
	EWTLUseMenuActionType__CommendCharacter                                          = 11,
	EWTLUseMenuActionType__Pickup                                                    = 12,
	EWTLUseMenuActionType__Charge                                                    = 13,
	EWTLUseMenuActionType__Use                                                       = 14,
	EWTLUseMenuActionType__OpenAmmoBox                                               = 15,
	EWTLUseMenuActionType__EWTLUseMenuActionType_MAX                                 = 16
};

/// Enum /Script/WTL.EWTLTriggerObjectActionType
/// Size: 0x07
enum EWTLTriggerObjectActionType : uint8_t
{
	EWTLTriggerObjectActionType__None                                                = 0,
	EWTLTriggerObjectActionType__Read                                                = 1,
	EWTLTriggerObjectActionType__Inspect                                             = 2,
	EWTLTriggerObjectActionType__InsertBatteries                                     = 3,
	EWTLTriggerObjectActionType__TakeAndRead                                         = 4,
	EWTLTriggerObjectActionType__Take                                                = 5,
	EWTLTriggerObjectActionType__EWTLTriggerObjectActionType_MAX                     = 6
};

/// Enum /Script/WTL.EWTLQTEType
/// Size: 0x09
enum EWTLQTEType : uint8_t
{
	EWTLQTEType__None                                                                = 0,
	EWTLQTEType__Repetative                                                          = 1,
	EWTLQTEType__RepetativeWithDecreasing                                            = 2,
	EWTLQTEType__MachingSequence                                                     = 3,
	EWTLQTEType__RepetativeControlsEnabled                                           = 4,
	EWTLQTEType__RepetativeWithDecreasingControlsEnabled                             = 5,
	EWTLQTEType__MachingSequenceWithDecreasing                                       = 6,
	EWTLQTEType__Fishing                                                             = 7,
	EWTLQTEType__EWTLQTEType_MAX                                                     = 8
};

/// Enum /Script/WTL.EWTLArmorPlateType
/// Size: 0x04
enum EWTLArmorPlateType : uint8_t
{
	EWTLArmorPlateType__None                                                         = 0,
	EWTLArmorPlateType__FrontPlate                                                   = 1,
	EWTLArmorPlateType__BackPlate                                                    = 2,
	EWTLArmorPlateType__EWTLArmorPlateType_MAX                                       = 3
};

/// Enum /Script/WTL.EWTLHUDRequestWindowType
/// Size: 0x06
enum EWTLHUDRequestWindowType : uint8_t
{
	EWTLHUDRequestWindowType__None                                                   = 0,
	EWTLHUDRequestWindowType__GroupInvite                                            = 1,
	EWTLHUDRequestWindowType__ClanInvite                                             = 2,
	EWTLHUDRequestWindowType__BarterOffer                                            = 3,
	EWTLHUDRequestWindowType__MarkerSharing                                          = 4,
	EWTLHUDRequestWindowType__EWTLHUDRequestWindowType_MAX                           = 5
};

/// Enum /Script/WTL.EWTLMoneyTransferWindowWidgetType
/// Size: 0x04
enum EWTLMoneyTransferWindowWidgetType : uint8_t
{
	EWTLMoneyTransferWindowWidgetType__None                                          = 0,
	EWTLMoneyTransferWindowWidgetType__WithdrawFromClanStorage                       = 1,
	EWTLMoneyTransferWindowWidgetType__DepositToClanStorage                          = 2,
	EWTLMoneyTransferWindowWidgetType__EWTLMoneyTransferWindowWidgetType_MAX         = 3
};

/// Enum /Script/WTL.EWTLCommissionAddUpdateWindowType
/// Size: 0x04
enum EWTLCommissionAddUpdateWindowType : uint8_t
{
	EWTLCommissionAddUpdateWindowType__None                                          = 0,
	EWTLCommissionAddUpdateWindowType__Add                                           = 1,
	EWTLCommissionAddUpdateWindowType__Update                                        = 2,
	EWTLCommissionAddUpdateWindowType__EWTLCommissionAddUpdateWindowType_MAX         = 3
};

/// Enum /Script/WTL.EWTLCheatType
/// Size: 0x17
enum EWTLCheatType : uint8_t
{
	EWTLCheatType__None                                                              = 0,
	EWTLCheatType__RX_Throttle                                                       = 1,
	EWTLCheatType__TX_Throttle                                                       = 2,
	EWTLCheatType__BadPing                                                           = 3,
	EWTLCheatType__TimeDiscrepancy                                                   = 4,
	EWTLCheatType__Unrandomizer                                                      = 5,
	EWTLCheatType__ClientValuesHack                                                  = 6,
	EWTLCheatType__SpeedHack                                                         = 7,
	EWTLCheatType__FireMacrosUse                                                     = 8,
	EWTLCheatType__HitOutsideHitbox                                                  = 9,
	EWTLCheatType__FireNotInView                                                     = 10,
	EWTLCheatType__FireWithNoAmmo                                                    = 11,
	EWTLCheatType__FireWithHighRate                                                  = 12,
	EWTLCheatType__CheatSoftwareDetected                                             = 13,
	EWTLCheatType__SuspiciousModule                                                  = 100,
	EWTLCheatType__AnticheatResponseFailed                                           = 200,
	EWTLCheatType__EWTLCheatType_MAX                                                 = 201
};

/// Enum /Script/WTL.EWTLCountdownSliderWidgetFillingType
/// Size: 0x03
enum EWTLCountdownSliderWidgetFillingType : uint8_t
{
	EWTLCountdownSliderWidgetFillingType__Increasing                                 = 0,
	EWTLCountdownSliderWidgetFillingType__Decreasing                                 = 1,
	EWTLCountdownSliderWidgetFillingType__EWTLCountdownSliderWidgetFillingType_MAX   = 2
};

/// Enum /Script/WTL.EWTLActionTimerWidgetType
/// Size: 0x05
enum EWTLActionTimerWidgetType : uint8_t
{
	EWTLActionTimerWidgetType__None                                                  = 0,
	EWTLActionTimerWidgetType__AnomalyResearch                                       = 1,
	EWTLActionTimerWidgetType__SafeZoneLeaveInvulnerableCooldown                     = 2,
	EWTLActionTimerWidgetType__ItemPlacement                                         = 3,
	EWTLActionTimerWidgetType__EWTLActionTimerWidgetType_MAX                         = 4
};

/// Enum /Script/WTL.EWTLWarningTitleWidgetType
/// Size: 0x38
enum EWTLWarningTitleWidgetType : uint8_t
{
	EWTLWarningTitleWidgetType__CannotPickupNotAnyAvailableSlotInInventory           = 0,
	EWTLWarningTitleWidgetType__CannotMoveInventoryOverload                          = 1,
	EWTLWarningTitleWidgetType__CannotSprintInventoryOverload                        = 2,
	EWTLWarningTitleWidgetType__CannotPickupInventoryOverload                        = 3,
	EWTLWarningTitleWidgetType__CannotUseNotCondition                                = 4,
	EWTLWarningTitleWidgetType__CannotUseNotEnergy                                   = 5,
	EWTLWarningTitleWidgetType__WeaponReloadAdvice                                   = 6,
	EWTLWarningTitleWidgetType__CannotUsePortal                                      = 7,
	EWTLWarningTitleWidgetType__CannotInviteToGroupAlreadyIn                         = 8,
	EWTLWarningTitleWidgetType__NotInClan                                            = 9,
	EWTLWarningTitleWidgetType__NotInFaction                                         = 10,
	EWTLWarningTitleWidgetType__CannotUsePlaceableStuff                              = 11,
	EWTLWarningTitleWidgetType__CannotCollectWaterInventoryOverload                  = 12,
	EWTLWarningTitleWidgetType__CannotCollectWaterInventoryWillBeOverloaded          = 13,
	EWTLWarningTitleWidgetType__CannotCollectWaterNotAnyAvailableSlotInInventory     = 14,
	EWTLWarningTitleWidgetType__GunOverheated                                        = 15,
	EWTLWarningTitleWidgetType__NoAmmoForShooting                                    = 16,
	EWTLWarningTitleWidgetType__NoNutsInInventoryToThrow                             = 17,
	EWTLWarningTitleWidgetType__EventJoined                                          = 18,
	EWTLWarningTitleWidgetType__EventLeaved                                          = 19,
	EWTLWarningTitleWidgetType__EventCompleted                                       = 20,
	EWTLWarningTitleWidgetType__EventFailed                                          = 21,
	EWTLWarningTitleWidgetType__FishingRodIsBroken                                   = 22,
	EWTLWarningTitleWidgetType__MustBeInAFishingZoneToUseFishingRod                  = 23,
	EWTLWarningTitleWidgetType__ToUseFishingRodAimAtTheWater                         = 24,
	EWTLWarningTitleWidgetType__TooCloseToUseFishingRod                              = 25,
	EWTLWarningTitleWidgetType__TooFarToUseFishingRod                                = 26,
	EWTLWarningTitleWidgetType__FishDontBite                                         = 27,
	EWTLWarningTitleWidgetType__HaveNotAnyBaitInInventory                            = 28,
	EWTLWarningTitleWidgetType__NotEnoughStaminaToSprint                             = 29,
	EWTLWarningTitleWidgetType__NotEnoughStaminaToJump                               = 30,
	EWTLWarningTitleWidgetType__CannotUseVehicleNotAllowedInLocation                 = 31,
	EWTLWarningTitleWidgetType__CannotUseVehicleIsInSafeZone                         = 32,
	EWTLWarningTitleWidgetType__CannotSpawnVehicleOnUnevenSurface                    = 33,
	EWTLWarningTitleWidgetType__ResourceWasDepletedInSource                          = 34,
	EWTLWarningTitleWidgetType__NoOrNotEnoughRequiredItemsToGatherResourceFromSource = 35,
	EWTLWarningTitleWidgetType__FireWithCurrentLoadedAmmoIsProhibitedInThisLocation  = 36,
	EWTLWarningTitleWidgetType__EWTLWarningTitleWidgetType_MAX                       = 37
};

/// Enum /Script/WTL.EWTLItemSlotActionPermission
/// Size: 0x83
enum EWTLItemSlotActionPermission : uint8_t
{
	EWTLItemSlotActionPermission__AddOnCustomization                                 = 0,
	EWTLItemSlotActionPermission__AddForModification                                 = 1,
	EWTLItemSlotActionPermission__AddWeaponPartToExchange                            = 2,
	EWTLItemSlotActionPermission__RemoveFromCustomization                            = 3,
	EWTLItemSlotActionPermission__RemoveFromModification                             = 4,
	EWTLItemSlotActionPermission__RemoveWeaponPartFromExchange                       = 5,
	EWTLItemSlotActionPermission__OpenExtractor                                      = 6,
	EWTLItemSlotActionPermission__CloseExtractor                                     = 7,
	EWTLItemSlotActionPermission__AddToStimulatorContainerSlot                       = 8,
	EWTLItemSlotActionPermission__RemoveFromStimulatorContainerSlot                  = 9,
	EWTLItemSlotActionPermission__AddOnSale                                          = 10,
	EWTLItemSlotActionPermission__AddOnRepair                                        = 11,
	EWTLItemSlotActionPermission__AddToExtractor                                     = 12,
	EWTLItemSlotActionPermission__AddToBarter                                        = 13,
	EWTLItemSlotActionPermission__AddToSteamInventory                                = 14,
	EWTLItemSlotActionPermission__AddToMailBox                                       = 15,
	EWTLItemSlotActionPermission__AddToUtilization                                   = 16,
	EWTLItemSlotActionPermission__AddToCommission                                    = 17,
	EWTLItemSlotActionPermission__AddToExistingItemOnCommission                      = 18,
	EWTLItemSlotActionPermission__RemoveFromSale                                     = 19,
	EWTLItemSlotActionPermission__RemoveFromRepair                                   = 20,
	EWTLItemSlotActionPermission__RemoveFromExtractor                                = 21,
	EWTLItemSlotActionPermission__RemoveFromBarter                                   = 22,
	EWTLItemSlotActionPermission__RemoveFromSteamInventory                           = 23,
	EWTLItemSlotActionPermission__RemoveFromMailBox                                  = 24,
	EWTLItemSlotActionPermission__RemoveFromUtilization                              = 25,
	EWTLItemSlotActionPermission__PutInStorage                                       = 26,
	EWTLItemSlotActionPermission__TakeFromStorage                                    = 27,
	EWTLItemSlotActionPermission__PutInClanStorage                                   = 28,
	EWTLItemSlotActionPermission__TakeFromClanStorage                                = 29,
	EWTLItemSlotActionPermission__PutToAccountInventory                              = 30,
	EWTLItemSlotActionPermission__TakeFromAccountInventory                           = 31,
	EWTLItemSlotActionPermission__AssignToFastAccess                                 = 32,
	EWTLItemSlotActionPermission__RemoveFromFastAccess                               = 33,
	EWTLItemSlotActionPermission__PlaceItem                                          = 34,
	EWTLItemSlotActionPermission__AttachToWeaponByStuffItem                          = 35,
	EWTLItemSlotActionPermission__AttachStuffItemToWeapon                            = 36,
	EWTLItemSlotActionPermission__RemoveAttachmentFromWeapon                         = 37,
	EWTLItemSlotActionPermission__RemoveAttachmentFromWeaponBySlot                   = 38,
	EWTLItemSlotActionPermission__RemoveAllAttachmentsFromWeapon                     = 39,
	EWTLItemSlotActionPermission__UseItem                                            = 40,
	EWTLItemSlotActionPermission__ChargeEnergySourceItemToStuff                      = 41,
	EWTLItemSlotActionPermission__ChargeStuffItemByEnergySource                      = 42,
	EWTLItemSlotActionPermission__ChangeGasMaskFilterFromFilter                      = 43,
	EWTLItemSlotActionPermission__ChangeGasMaskFilterFromGasMask                     = 44,
	EWTLItemSlotActionPermission__RefuelFuelSourceItemToStuff                        = 45,
	EWTLItemSlotActionPermission__RefuelStuffItemByFuelSource                        = 46,
	EWTLItemSlotActionPermission__PlaceArtefactItemInContainer                       = 47,
	EWTLItemSlotActionPermission__RemoveArtefactItemFromContainer                    = 48,
	EWTLItemSlotActionPermission__InstallPDAModule                                   = 49,
	EWTLItemSlotActionPermission__RepairWeaponByKit                                  = 50,
	EWTLItemSlotActionPermission__RepairClothesByKit                                 = 51,
	EWTLItemSlotActionPermission__ModifyWeaponByKit                                  = 52,
	EWTLItemSlotActionPermission__ModifyClothesByKit                                 = 53,
	EWTLItemSlotActionPermission__PaintWeaponBySprayCan                              = 54,
	EWTLItemSlotActionPermission__PaintClothesBySprayCan                             = 55,
	EWTLItemSlotActionPermission__LoadAmmoToWeapon                                   = 56,
	EWTLItemSlotActionPermission__LoadWeapon                                         = 57,
	EWTLItemSlotActionPermission__UnloadWeapon                                       = 58,
	EWTLItemSlotActionPermission__BreakWeapon                                        = 59,
	EWTLItemSlotActionPermission__InstallArmoredPlate                                = 60,
	EWTLItemSlotActionPermission__RemoveArmoredPlate                                 = 61,
	EWTLItemSlotActionPermission__UseNewPassport                                     = 62,
	EWTLItemSlotActionPermission__UseClassCertificate                                = 63,
	EWTLItemSlotActionPermission__UseGenderChangeCertificate                         = 64,
	EWTLItemSlotActionPermission__DrinkItem                                          = 65,
	EWTLItemSlotActionPermission__EatItem                                            = 66,
	EWTLItemSlotActionPermission__ViewItem                                           = 67,
	EWTLItemSlotActionPermission__ReadItem                                           = 68,
	EWTLItemSlotActionPermission__CutFish                                            = 69,
	EWTLItemSlotActionPermission__EquipClothesItem                                   = 70,
	EWTLItemSlotActionPermission__UnequipClothesItem                                 = 71,
	EWTLItemSlotActionPermission__OpenArmoredPlatesWindow                            = 72,
	EWTLItemSlotActionPermission__RemoveAllArmoredPlates                             = 73,
	EWTLItemSlotActionPermission__EquipStuffItem                                     = 74,
	EWTLItemSlotActionPermission__UnequipStuffItem                                   = 75,
	EWTLItemSlotActionPermission__CombineItem                                        = 76,
	EWTLItemSlotActionPermission__SplitItem                                          = 77,
	EWTLItemSlotActionPermission__DropItem                                           = 78,
	EWTLItemSlotActionPermission__DestroyItem                                        = 79,
	EWTLItemSlotActionPermission__ShowItemInformation                                = 80,
	EWTLItemSlotActionPermission__RepairByRepairDevice                               = 81,
	EWTLItemSlotActionPermission__EWTLItemSlotActionPermission_MAX                   = 82
};

/// Enum /Script/WTL.EWTLMonsterActivityState
/// Size: 0x04
enum EWTLMonsterActivityState : uint8_t
{
	EWTLMonsterActivityState__Normal                                                 = 0,
	EWTLMonsterActivityState__Passive                                                = 1,
	EWTLMonsterActivityState__DeepSleep                                              = 2,
	EWTLMonsterActivityState__EWTLMonsterActivityState_MAX                           = 3
};

/// Enum /Script/WTL.EWTLMonsterActionBase
/// Size: 0x23
enum EWTLMonsterActionBase : uint8_t
{
	EWTLMonsterActionBase__None                                                      = 0,
	EWTLMonsterActionBase__MainAttack                                                = 1,
	EWTLMonsterActionBase__SecondaryAttack                                           = 2,
	EWTLMonsterActionBase__SpecialAbility0                                           = 3,
	EWTLMonsterActionBase__SpecialAbility1                                           = 4,
	EWTLMonsterActionBase__SpecialAbility2                                           = 5,
	EWTLMonsterActionBase__SpecialAbility3                                           = 6,
	EWTLMonsterActionBase__SpecialAbility4                                           = 7,
	EWTLMonsterActionBase__SpecialAbility5                                           = 8,
	EWTLMonsterActionBase__Immobilized                                               = 9,
	EWTLMonsterActionBase__Stunned                                                   = 10,
	EWTLMonsterActionBase__Die                                                       = 11,
	EWTLMonsterActionBase__CustomAction0                                             = 12,
	EWTLMonsterActionBase__CustomAction1                                             = 13,
	EWTLMonsterActionBase__CustomAction2                                             = 14,
	EWTLMonsterActionBase__CustomAction3                                             = 15,
	EWTLMonsterActionBase__CustomAction4                                             = 16,
	EWTLMonsterActionBase__CustomAction5                                             = 17,
	EWTLMonsterActionBase__CustomAction6                                             = 18,
	EWTLMonsterActionBase__CustomAction7                                             = 19,
	EWTLMonsterActionBase__CustomAction8                                             = 20,
	EWTLMonsterActionBase__CustomAction9                                             = 21,
	EWTLMonsterActionBase__EWTLMonsterActionBase_MAX                                 = 22
};

/// Enum /Script/WTL.EWTLMonsterAttachState
/// Size: 0x08
enum EWTLMonsterAttachState : uint8_t
{
	EWTLMonsterAttachState__None                                                     = 0,
	EWTLMonsterAttachState__AttachTo                                                 = 1,
	EWTLMonsterAttachState__Attached                                                 = 2,
	EWTLMonsterAttachState__DetachTo                                                 = 3,
	EWTLMonsterAttachState__Detached                                                 = 4,
	EWTLMonsterAttachState__AttachedForward                                          = 5,
	EWTLMonsterAttachState__AttachedBack                                             = 6,
	EWTLMonsterAttachState__EWTLMonsterAttachState_MAX                               = 7
};

/// Enum /Script/WTL.EWTLMonsterAttackModificator
/// Size: 0x04
enum EWTLMonsterAttackModificator : uint8_t
{
	EWTLMonsterAttackModificator__AllowCritical                                      = 0,
	EWTLMonsterAttackModificator__DisallowCritical                                   = 1,
	EWTLMonsterAttackModificator__AlwaysCritical                                     = 2,
	EWTLMonsterAttackModificator__EWTLMonsterAttackModificator_MAX                   = 3
};

/// Enum /Script/WTL.EWTLMonsterStateFollowTarget
/// Size: 0x12
enum EWTLMonsterStateFollowTarget : uint8_t
{
	EWTLMonsterStateFollowTarget__MoveTo                                             = 0,
	EWTLMonsterStateFollowTarget__Attack                                             = 1,
	EWTLMonsterStateFollowTarget__FarAttack                                          = 2,
	EWTLMonsterStateFollowTarget__Hide                                               = 3,
	EWTLMonsterStateFollowTarget__Attach                                             = 4,
	EWTLMonsterStateFollowTarget__AttachedForward                                    = 5,
	EWTLMonsterStateFollowTarget__Detach                                             = 6,
	EWTLMonsterStateFollowTarget__WithoutStateChange                                 = 7,
	EWTLMonsterStateFollowTarget__AttachedBack                                       = 8,
	EWTLMonsterStateFollowTarget__RandomLocation                                     = 9,
	EWTLMonsterStateFollowTarget__JumpToEnemy                                        = 10,
	EWTLMonsterStateFollowTarget__EWTLMonsterStateFollowTarget_MAX                   = 11
};

/// Enum /Script/WTL.EWTMonsterSecondaryState
/// Size: 0x28
enum EWTMonsterSecondaryState : uint8_t
{
	EWTMonsterSecondaryState__Idle                                                   = 0,
	EWTMonsterSecondaryState__Follow                                                 = 1,
	EWTMonsterSecondaryState__MoveTo                                                 = 2,
	EWTMonsterSecondaryState__Attack                                                 = 3,
	EWTMonsterSecondaryState__MoveToForFarAttack                                     = 4,
	EWTMonsterSecondaryState__FarAttack                                              = 5,
	EWTMonsterSecondaryState__Attach1                                                = 6,
	EWTMonsterSecondaryState__Attach2                                                = 7,
	EWTMonsterSecondaryState__Attach3                                                = 8,
	EWTMonsterSecondaryState__Attach4                                                = 9,
	EWTMonsterSecondaryState__Detach                                                 = 10,
	EWTMonsterSecondaryState__RandomLocation                                         = 11,
	EWTMonsterSecondaryState__JumpToEnemy                                            = 12,
	EWTMonsterSecondaryState__HearingMoveTo                                          = 13,
	EWTMonsterSecondaryState__Hide                                                   = 14,
	EWTMonsterSecondaryState__Stealth                                                = 15,
	EWTMonsterSecondaryState__MovingInStealth                                        = 16,
	EWTMonsterSecondaryState__CustomAction0                                          = 17,
	EWTMonsterSecondaryState__CustomAction1                                          = 18,
	EWTMonsterSecondaryState__CustomAction2                                          = 19,
	EWTMonsterSecondaryState__CustomAction3                                          = 20,
	EWTMonsterSecondaryState__CustomAction4                                          = 21,
	EWTMonsterSecondaryState__CustomAction5                                          = 22,
	EWTMonsterSecondaryState__SpecialAbility0                                        = 23,
	EWTMonsterSecondaryState__SpecialAbility1                                        = 24,
	EWTMonsterSecondaryState__SpecialAbility2                                        = 25,
	EWTMonsterSecondaryState__SpecialAbility3                                        = 26,
	EWTMonsterSecondaryState__EWTMonsterSecondaryState_MAX                           = 27
};

/// Enum /Script/WTL.EWTLMonsterState
/// Size: 0x29
enum EWTLMonsterState : uint8_t
{
	EWTLMonsterState__Idle                                                           = 0,
	EWTLMonsterState__Walk                                                           = 1,
	EWTLMonsterState__AggressUp                                                      = 2,
	EWTLMonsterState__FollowTarget                                                   = 3,
	EWTLMonsterState__Attack                                                         = 4,
	EWTLMonsterState__Escaping                                                       = 5,
	EWTLMonsterState__Jump                                                           = 6,
	EWTLMonsterState__JumpToEnemy                                                    = 7,
	EWTLMonsterState__Teleport                                                       = 8,
	EWTLMonsterState__Fly                                                            = 9,
	EWTLMonsterState__FarAttackToBadCharacter                                        = 10,
	EWTLMonsterState__ToStealth                                                      = 11,
	EWTLMonsterState__InStealth                                                      = 12,
	EWTLMonsterState__StealthMoveTo                                                  = 13,
	EWTLMonsterState__StealthFollowEnemy                                             = 14,
	EWTLMonsterState__FromStealth                                                    = 15,
	EWTLMonsterState__DropItemFromCharacter                                          = 16,
	EWTLMonsterState__CustomAction0                                                  = 17,
	EWTLMonsterState__CustomAction1                                                  = 18,
	EWTLMonsterState__CustomAction2                                                  = 19,
	EWTLMonsterState__CustomAction3                                                  = 20,
	EWTLMonsterState__CustomAction4                                                  = 21,
	EWTLMonsterState__CustomAction5                                                  = 22,
	EWTLMonsterState__GetRandomTarget                                                = 23,
	EWTLMonsterState__PlayMontage                                                    = 24,
	EWTLMonsterState__ToSacrifice                                                    = 25,
	EWTLMonsterState__FindTheVictim                                                  = 26,
	EWTLMonsterState__SpawnMonster                                                   = 27,
	EWTLMonsterState__EWTLMonsterState_MAX                                           = 28
};

/// Enum /Script/WTL.EWTLMonsterActionType
/// Size: 0x33
enum EWTLMonsterActionType : uint8_t
{
	EWTLMonsterActionType__None                                                      = 0,
	EWTLMonsterActionType__MainAttack                                                = 1,
	EWTLMonsterActionType__SecondaryAttack                                           = 2,
	EWTLMonsterActionType__SpecialAbility0                                           = 3,
	EWTLMonsterActionType__SpecialAbility1                                           = 4,
	EWTLMonsterActionType__SpecialAbility2                                           = 5,
	EWTLMonsterActionType__SpecialAbility3                                           = 6,
	EWTLMonsterActionType__SpecialAbility4                                           = 7,
	EWTLMonsterActionType__SpecialAbility5                                           = 8,
	EWTLMonsterActionType__Idle0                                                     = 9,
	EWTLMonsterActionType__Idle1                                                     = 10,
	EWTLMonsterActionType__Idle2                                                     = 11,
	EWTLMonsterActionType__Idle3                                                     = 12,
	EWTLMonsterActionType__Idle4                                                     = 13,
	EWTLMonsterActionType__Idle5                                                     = 14,
	EWTLMonsterActionType__Immobilized                                               = 15,
	EWTLMonsterActionType__Stunned                                                   = 16,
	EWTLMonsterActionType__Die                                                       = 17,
	EWTLMonsterActionType__CustomAction0                                             = 18,
	EWTLMonsterActionType__CustomAction1                                             = 19,
	EWTLMonsterActionType__CustomAction2                                             = 20,
	EWTLMonsterActionType__CustomAction3                                             = 21,
	EWTLMonsterActionType__CustomAction4                                             = 22,
	EWTLMonsterActionType__CustomAction5                                             = 23,
	EWTLMonsterActionType__CustomAction6                                             = 24,
	EWTLMonsterActionType__ToStealth                                                 = 25,
	EWTLMonsterActionType__InStealth                                                 = 26,
	EWTLMonsterActionType__FromStealth                                               = 27,
	EWTLMonsterActionType__Aggression                                                = 28,
	EWTLMonsterActionType__FarAttack0                                                = 29,
	EWTLMonsterActionType__FarAttack1                                                = 30,
	EWTLMonsterActionType__FarAttackToBadEnemy1                                      = 31,
	EWTLMonsterActionType__EWTLMonsterActionType_MAX                                 = 32
};

/// Enum /Script/WTL.EWTLMonsterMovementMode
/// Size: 0x05
enum EWTLMonsterMovementMode : uint8_t
{
	EWTLMonsterMovementMode__None                                                    = 0,
	EWTLMonsterMovementMode__Loaf                                                    = 1,
	EWTLMonsterMovementMode__Walk                                                    = 2,
	EWTLMonsterMovementMode__Sprint                                                  = 3,
	EWTLMonsterMovementMode__EWTLMonsterMovementMode_MAX                             = 4
};

/// Enum /Script/WTL.EWTLPDAWidget
/// Size: 0x19
enum EWTLPDAWidget : uint8_t
{
	EWTLPDAWidget__Menu                                                              = 0,
	EWTLPDAWidget__CharacterInfo                                                     = 1,
	EWTLPDAWidget__CharacterParameters                                               = 2,
	EWTLPDAWidget__CharacterSkills                                                   = 3,
	EWTLPDAWidget__QuestLog                                                          = 4,
	EWTLPDAWidget__Map                                                               = 5,
	EWTLPDAWidget__Mail                                                              = 6,
	EWTLPDAWidget__Group                                                             = 7,
	EWTLPDAWidget__Clan                                                              = 8,
	EWTLPDAWidget__Faction                                                           = 9,
	EWTLPDAWidget__FriendsAndEnemies                                                 = 10,
	EWTLPDAWidget__CraftRecipes                                                      = 11,
	EWTLPDAWidget__Achievements                                                      = 12,
	EWTLPDAWidget__Settings                                                          = 13,
	EWTLPDAWidget__Premium                                                           = 14,
	EWTLPDAWidget__NVIDIA_Highlights                                                 = 15,
	EWTLPDAWidget__SocialNetworkVK                                                   = 16,
	EWTLPDAWidget__SocialNetworkFacebook                                             = 17,
	EWTLPDAWidget__EWTLPDAWidget_MAX                                                 = 18
};

/// Enum /Script/WTL.EWTLCustomizationColorPresetType
/// Size: 0x07
enum EWTLCustomizationColorPresetType : uint8_t
{
	EWTLCustomizationColorPresetType__None                                           = 0,
	EWTLCustomizationColorPresetType__Hair                                           = 1,
	EWTLCustomizationColorPresetType__Skin                                           = 2,
	EWTLCustomizationColorPresetType__Clothes                                        = 3,
	EWTLCustomizationColorPresetType__Feet                                           = 4,
	EWTLCustomizationColorPresetType__Backpack                                       = 5,
	EWTLCustomizationColorPresetType__EWTLCustomizationColorPresetType_MAX           = 6
};

/// Enum /Script/WTL.EWTLMonsterDangerLevel
/// Size: 0x08
enum EWTLMonsterDangerLevel : uint8_t
{
	EWTLMonsterDangerLevel__None                                                     = 0,
	EWTLMonsterDangerLevel__Low                                                      = 1,
	EWTLMonsterDangerLevel__BelowNormal                                              = 2,
	EWTLMonsterDangerLevel__Normal                                                   = 3,
	EWTLMonsterDangerLevel__AboveNormal                                              = 4,
	EWTLMonsterDangerLevel__High                                                     = 5,
	EWTLMonsterDangerLevel__Critical                                                 = 6,
	EWTLMonsterDangerLevel__EWTLMonsterDangerLevel_MAX                               = 7
};

/// Enum /Script/WTL.EWTLMedicineEffectType
/// Size: 0x09
enum EWTLMedicineEffectType : uint8_t
{
	EWTLMedicineEffectType__None                                                     = 0,
	EWTLMedicineEffectType__Strength                                                 = 1,
	EWTLMedicineEffectType__Dexterity                                                = 2,
	EWTLMedicineEffectType__Stamina                                                  = 3,
	EWTLMedicineEffectType__Accuracy                                                 = 4,
	EWTLMedicineEffectType__Intelligence                                             = 5,
	EWTLMedicineEffectType__Fortune                                                  = 6,
	EWTLMedicineEffectType__MaxHealth                                                = 7,
	EWTLMedicineEffectType__EWTLMedicineEffectType_MAX                               = 8
};

/// Enum /Script/WTL.EWTLSuicideState
/// Size: 0x04
enum EWTLSuicideState : uint8_t
{
	EWTLSuicideState__None                                                           = 0,
	EWTLSuicideState__SuicideInProgress                                              = 1,
	EWTLSuicideState__SuicideDone                                                    = 2,
	EWTLSuicideState__EWTLSuicideState_MAX                                           = 3
};

/// Enum /Script/WTL.EWTLWeaponAttachmentType
/// Size: 0x08
enum EWTLWeaponAttachmentType : uint8_t
{
	EWTLWeaponAttachmentType__None                                                   = 0,
	EWTLWeaponAttachmentType__RedDotSight                                            = 1,
	EWTLWeaponAttachmentType__Scope                                                  = 2,
	EWTLWeaponAttachmentType__MuzzleBrake                                            = 3,
	EWTLWeaponAttachmentType__Silencer                                               = 4,
	EWTLWeaponAttachmentType__Flashlight                                             = 5,
	EWTLWeaponAttachmentType__Laser                                                  = 6,
	EWTLWeaponAttachmentType__EWTLWeaponAttachmentType_MAX                           = 7
};

/// Enum /Script/WTL.EWTLWeaponAttachmentSlotType
/// Size: 0x05
enum EWTLWeaponAttachmentSlotType : uint8_t
{
	EWTLWeaponAttachmentSlotType__None                                               = 0,
	EWTLWeaponAttachmentSlotType__Muzzle                                             = 1,
	EWTLWeaponAttachmentSlotType__Flashlight                                         = 2,
	EWTLWeaponAttachmentSlotType__Scope                                              = 3,
	EWTLWeaponAttachmentSlotType__EWTLWeaponAttachmentSlotType_MAX                   = 4
};

/// Enum /Script/WTL.EWTLParameterInfluenceType
/// Size: 0x04
enum EWTLParameterInfluenceType : uint8_t
{
	EWTLParameterInfluenceType__Add                                                  = 0,
	EWTLParameterInfluenceType__Multiply                                             = 1,
	EWTLParameterInfluenceType__Set                                                  = 2,
	EWTLParameterInfluenceType__EWTLParameterInfluenceType_MAX                       = 3
};

/// Enum /Script/WTL.EWTLClanParameter
/// Size: 0x36
enum EWTLClanParameter : uint8_t
{
	EWTLClanParameter__None                                                          = 0,
	EWTLClanParameter__PVPExperienceMultiplier                                       = 1,
	EWTLClanParameter__PVEExperienceMultiplier                                       = 2,
	EWTLClanParameter__PVPDamageMultiplier                                           = 3,
	EWTLClanParameter__PVEDamageMultiplier                                           = 4,
	EWTLClanParameter__ItemExperienceMultiplier                                      = 5,
	EWTLClanParameter__ClanStorageMaxWeightMultiplier                                = 6,
	EWTLClanParameter__InventoryMaxWeightMultiplier                                  = 7,
	EWTLClanParameter__ItemProductionSpeedMultiplier                                 = 8,
	EWTLClanParameter__FactionTechonologiesLevel                                     = 9,
	EWTLClanParameter__MedicineEfficiencyMultiplier                                  = 10,
	EWTLClanParameter__KnifePVPDamageMultiplier                                      = 11,
	EWTLClanParameter__PistolPVPDamageMultiplier                                     = 12,
	EWTLClanParameter__ShotgunPVPDamageMultiplier                                    = 13,
	EWTLClanParameter__SMGPVPDamageMultiplier                                        = 14,
	EWTLClanParameter__AssaultRiflePVPDamageMultiplier                               = 15,
	EWTLClanParameter__RiflePVPDamageMultiplier                                      = 16,
	EWTLClanParameter__MachinegunPVPDamageMultiplier                                 = 17,
	EWTLClanParameter__GrenadeLauncherPVPDamageMultiplier                            = 18,
	EWTLClanParameter__ExplosivePVPDamageMultiplier                                  = 19,
	EWTLClanParameter__KnifePVEDamageMultiplier                                      = 20,
	EWTLClanParameter__PistolPVEDamageMultiplier                                     = 21,
	EWTLClanParameter__ShotgunPVEDamageMultiplier                                    = 22,
	EWTLClanParameter__SMGPVEDamageMultiplier                                        = 23,
	EWTLClanParameter__AssaultRiflePVEDamageMultiplier                               = 24,
	EWTLClanParameter__RiflePVEDamageMultiplier                                      = 25,
	EWTLClanParameter__MachinegunPVEDamageMultiplier                                 = 26,
	EWTLClanParameter__GrenadeLauncherPVEDamageMultiplier                            = 27,
	EWTLClanParameter__ExplosivePVEDamageMultiplier                                  = 28,
	EWTLClanParameter__MovementSpeedMultiplier                                       = 29,
	EWTLClanParameter__MonsterPartsDropChanceMultiplier                              = 30,
	EWTLClanParameter__ResourceDropChanceMultiplier                                  = 31,
	EWTLClanParameter__MiningChanceMultiplier                                        = 32,
	EWTLClanParameter__PVPCriticalChanceMultiplier                                   = 33,
	EWTLClanParameter__PVECriticalChanceMultiplier                                   = 34,
	EWTLClanParameter__EWTLClanParameter_MAX                                         = 35
};

/// Enum /Script/WTL.EWTLCharacterParameter
/// Size: 0x47
enum EWTLCharacterParameter : uint8_t
{
	EWTLCharacterParameter__None                                                     = 0,
	EWTLCharacterParameter__CriticalDamageChance                                     = 1,
	EWTLCharacterParameter__AvoidCriticalDamageChance                                = 2,
	EWTLCharacterParameter__ResourceDropChance                                       = 3,
	EWTLCharacterParameter__MaxHealth                                                = 4,
	EWTLCharacterParameter__MaxStamina                                               = 5,
	EWTLCharacterParameter__TakenDamageAmount                                        = 6,
	EWTLCharacterParameter__Accuracy                                                 = 7,
	EWTLCharacterParameter__MovementSpeed                                            = 8,
	EWTLCharacterParameter__EnvironmentResistance                                    = 9,
	EWTLCharacterParameter__SatietyHealthRegenerationRate                            = 10,
	EWTLCharacterParameter__HealingEfficiency                                        = 11,
	EWTLCharacterParameter__WeaponHandlingSpeed                                      = 12,
	EWTLCharacterParameter__DeathLootLoss                                            = 13,
	EWTLCharacterParameter__UsingItemsExperienceAmount                               = 14,
	EWTLCharacterParameter__UsingRepairKitsEfficiency                                = 15,
	EWTLCharacterParameter__SaveLockpicksChance                                      = 16,
	EWTLCharacterParameter__iHR_Efficiency                                           = 17,
	EWTLCharacterParameter__AdditionalInventorySlots                                 = 18,
	EWTLCharacterParameter__MaxInventoryWeight                                       = 19,
	EWTLCharacterParameter__ItemProductionSpeed                                      = 20,
	EWTLCharacterParameter__AdditionalProductionQueueSlots                           = 21,
	EWTLCharacterParameter__PVP_Damage                                               = 22,
	EWTLCharacterParameter__PVP_SlowChanceOnHit                                      = 23,
	EWTLCharacterParameter__PVP_BleedingChanceOnHit                                  = 24,
	EWTLCharacterParameter__PVP_KillLootAmount                                       = 25,
	EWTLCharacterParameter__PVE_EnemyDamage                                          = 26,
	EWTLCharacterParameter__PVE_MonsterDamage                                        = 27,
	EWTLCharacterParameter__PVE_MonsterKillLootAmount                                = 28,
	EWTLCharacterParameter__PVE_MonsterKillExperienceAmount                          = 29,
	EWTLCharacterParameter__MeleeDamage                                              = 30,
	EWTLCharacterParameter__MeleeBleedingChance                                      = 31,
	EWTLCharacterParameter__MeleeCriticalDamageChance                                = 32,
	EWTLCharacterParameter__PistolDamage                                             = 33,
	EWTLCharacterParameter__PistolAccuracy                                           = 34,
	EWTLCharacterParameter__PistolCriticalDamageChance                               = 35,
	EWTLCharacterParameter__SubMachineGunDamage                                      = 36,
	EWTLCharacterParameter__SubMachineGunAccuracy                                    = 37,
	EWTLCharacterParameter__ShotgunDamage                                            = 38,
	EWTLCharacterParameter__RifleDamage                                              = 39,
	EWTLCharacterParameter__RifleAccuracy                                            = 40,
	EWTLCharacterParameter__AssaultRifleDamage                                       = 41,
	EWTLCharacterParameter__AssaultRifleAccuracy                                     = 42,
	EWTLCharacterParameter__GrenadeLauncherDamage                                    = 43,
	EWTLCharacterParameter__ExplosiveDamage                                          = 44,
	EWTLCharacterParameter__ArmorWeightSpeedMultiplier                               = 45,
	EWTLCharacterParameter__EWTLCharacterParameter_MAX                               = 46
};

/// Enum /Script/WTL.EWTLStateSpeedAIMonster
/// Size: 0x07
enum EWTLStateSpeedAIMonster : uint8_t
{
	EWTLStateSpeedAIMonster__Stop                                                    = 0,
	EWTLStateSpeedAIMonster__Speed01                                                 = 1,
	EWTLStateSpeedAIMonster__Speed03                                                 = 2,
	EWTLStateSpeedAIMonster__Speed05                                                 = 3,
	EWTLStateSpeedAIMonster__Speed07                                                 = 4,
	EWTLStateSpeedAIMonster__Speed1                                                  = 5,
	EWTLStateSpeedAIMonster__EWTLStateSpeedAIMonster_MAX                             = 6
};

/// Enum /Script/WTL.EWTLItemSlotType
/// Size: 0x21
enum EWTLItemSlotType : uint8_t
{
	EWTLItemSlotType__None                                                           = 0,
	EWTLItemSlotType__Inventory                                                      = 1,
	EWTLItemSlotType__Storage                                                        = 2,
	EWTLItemSlotType__FastAccess                                                     = 3,
	EWTLItemSlotType__Armor                                                          = 4,
	EWTLItemSlotType__Buy                                                            = 5,
	EWTLItemSlotType__Repair                                                         = 6,
	EWTLItemSlotType__Extractor                                                      = 7,
	EWTLItemSlotType__Customization                                                  = 8,
	EWTLItemSlotType__StimulatorContainer                                            = 9,
	EWTLItemSlotType__Stuff                                                          = 10,
	EWTLItemSlotType__ClanStorage                                                    = 11,
	EWTLItemSlotType__Barter                                                         = 12,
	EWTLItemSlotType__ArmoredPlate                                                   = 13,
	EWTLItemSlotType__Modification                                                   = 14,
	EWTLItemSlotType__SteamInventory                                                 = 15,
	EWTLItemSlotType__MailBox                                                        = 16,
	EWTLItemSlotType__Utilization                                                    = 17,
	EWTLItemSlotType__WeaponPartForExchange                                          = 18,
	EWTLItemSlotType__AccountInventory                                               = 19,
	EWTLItemSlotType__EWTLItemSlotType_MAX                                           = 20
};

/// Enum /Script/WTL.EWTLSplitWindowType
/// Size: 0x17
enum EWTLSplitWindowType : uint8_t
{
	EWTLSplitWindowType__None                                                        = 0,
	EWTLSplitWindowType__SplitInPlayerInventory                                      = 1,
	EWTLSplitWindowType__TakeFromStorage                                             = 2,
	EWTLSplitWindowType__PutInBuyStorage                                             = 3,
	EWTLSplitWindowType__PutInStorage                                                = 4,
	EWTLSplitWindowType__PutInExtractorStorage                                       = 5,
	EWTLSplitWindowType__TakeFromClanStorage                                         = 6,
	EWTLSplitWindowType__PutInClanStorage                                            = 7,
	EWTLSplitWindowType__PutInBarterStorage                                          = 8,
	EWTLSplitWindowType__PutInSteamInventoryStorage                                  = 9,
	EWTLSplitWindowType__PutInMailBoxStorage                                         = 10,
	EWTLSplitWindowType__DropFromInventory                                           = 11,
	EWTLSplitWindowType__DestroyInInventory                                          = 12,
	EWTLSplitWindowType__TakeFromAccountInventory                                    = 13,
	EWTLSplitWindowType__PutToAccountInventory                                       = 14,
	EWTLSplitWindowType__PutInUtilizationStorage                                     = 15,
	EWTLSplitWindowType__EWTLSplitWindowType_MAX                                     = 16
};

/// Enum /Script/WTL.EWTLFiltersChat
/// Size: 0x16
enum EWTLFiltersChat : uint8_t
{
	EWTLFiltersChat__Common                                                          = 0,
	EWTLFiltersChat__Faction                                                         = 1,
	EWTLFiltersChat__Private                                                         = 2,
	EWTLFiltersChat__Log                                                             = 3,
	EWTLFiltersChat__Server                                                          = 4,
	EWTLFiltersChat__Loot                                                            = 5,
	EWTLFiltersChat__Environment                                                     = 6,
	EWTLFiltersChat__ConsoleCommand                                                  = 7,
	EWTLFiltersChat__Chat                                                            = 8,
	EWTLFiltersChat__GlobalChat                                                      = 9,
	EWTLFiltersChat__Battle                                                          = 10,
	EWTLFiltersChat__Group                                                           = 11,
	EWTLFiltersChat__Clan                                                            = 12,
	EWTLFiltersChat__Warning                                                         = 13,
	EWTLFiltersChat__CollapseChatBox                                                 = 250,
	EWTLFiltersChat__EWTLFiltersChat_MAX                                             = 251
};

/// Enum /Script/WTL.EWTLCharacterStateIndicatorType
/// Size: 0x16
enum EWTLCharacterStateIndicatorType : uint8_t
{
	EWTLCharacterStateIndicatorType__None                                            = 0,
	EWTLCharacterStateIndicatorType__InSafeZone                                      = 1,
	EWTLCharacterStateIndicatorType__MediumOverload                                  = 2,
	EWTLCharacterStateIndicatorType__HeavyOverload                                   = 3,
	EWTLCharacterStateIndicatorType__Invulnerable                                    = 4,
	EWTLCharacterStateIndicatorType__InMobileResurectionPointWorkZone                = 5,
	EWTLCharacterStateIndicatorType__InSafeZoneCannotSpawn                           = 6,
	EWTLCharacterStateIndicatorType__InFortificationScoreZone                        = 7,
	EWTLCharacterStateIndicatorType__AverageHunger                                   = 8,
	EWTLCharacterStateIndicatorType__SevereHunger                                    = 9,
	EWTLCharacterStateIndicatorType__AverageThirst                                   = 10,
	EWTLCharacterStateIndicatorType__SevereThirst                                    = 11,
	EWTLCharacterStateIndicatorType__Satiety                                         = 12,
	EWTLCharacterStateIndicatorType__PhysicalExhaustion                              = 13,
	EWTLCharacterStateIndicatorType__InFishingZone                                   = 14,
	EWTLCharacterStateIndicatorType__EWTLCharacterStateIndicatorType_MAX             = 15
};

/// Enum /Script/WTL.EWTLMedicineEffectParameter
/// Size: 0x10
enum EWTLMedicineEffectParameter : uint8_t
{
	EWTLMedicineEffectParameter__None                                                = 0,
	EWTLMedicineEffectParameter__Health                                              = 1,
	EWTLMedicineEffectParameter__Strength                                            = 2,
	EWTLMedicineEffectParameter__Dexterity                                           = 3,
	EWTLMedicineEffectParameter__Stamina                                             = 4,
	EWTLMedicineEffectParameter__Accuracy                                            = 5,
	EWTLMedicineEffectParameter__Intelligence                                        = 6,
	EWTLMedicineEffectParameter__Fortune                                             = 7,
	EWTLMedicineEffectParameter__StaminaRecovery                                     = 8,
	EWTLMedicineEffectParameter__EWTLMedicineEffectParameter_MAX                     = 9
};

/// Enum /Script/WTL.EWTLCustomMovementMode
/// Size: 0x04
enum EWTLCustomMovementMode : uint8_t
{
	EWTLCustomMovementMode__CUSTOM_None                                              = 0,
	EWTLCustomMovementMode__CUSTOM_LadderClimbing                                    = 1,
	EWTLCustomMovementMode__CUSTOM_VehicleRiding                                     = 2,
	EWTLCustomMovementMode__CUSTOM_MAX                                               = 3
};

/// Enum /Script/WTL.EWTLHUDNotificationType
/// Size: 0x65
enum EWTLHUDNotificationType : uint8_t
{
	EWTLHUDNotificationType__None                                                    = 0,
	EWTLHUDNotificationType__Experience                                              = 1,
	EWTLHUDNotificationType__LevelUp                                                 = 2,
	EWTLHUDNotificationType__BalanceIncrease                                         = 3,
	EWTLHUDNotificationType__BalanceDecrease                                         = 4,
	EWTLHUDNotificationType__InventoryChange                                         = 5,
	EWTLHUDNotificationType__ObjectivesChange                                        = 6,
	EWTLHUDNotificationType__TeamLeadChange                                          = 7,
	EWTLHUDNotificationType__GotItem                                                 = 8,
	EWTLHUDNotificationType__LostItem                                                = 9,
	EWTLHUDNotificationType__Achievement                                             = 10,
	EWTLHUDNotificationType__SafeZoneEnter                                           = 11,
	EWTLHUDNotificationType__SafeZoneLeave                                           = 12,
	EWTLHUDNotificationType__ReputationIncrease                                      = 13,
	EWTLHUDNotificationType__ReputationDecrease                                      = 14,
	EWTLHUDNotificationType__SystemEvent                                             = 15,
	EWTLHUDNotificationType__SystemQuest                                             = 16,
	EWTLHUDNotificationType__ConfederationReputationIncrease                         = 17,
	EWTLHUDNotificationType__ConfederationReputationDecrease                         = 18,
	EWTLHUDNotificationType__BlackSunsetReputationIncrease                           = 19,
	EWTLHUDNotificationType__BlackSunsetReputationDecrease                           = 20,
	EWTLHUDNotificationType__MailMessageReceived                                     = 21,
	EWTLHUDNotificationType__QuestCompleted                                          = 22,
	EWTLHUDNotificationType__QuestFailed                                             = 23,
	EWTLHUDNotificationType__GetGroupInvite                                          = 24,
	EWTLHUDNotificationType__RemoveFromGroup                                         = 25,
	EWTLHUDNotificationType__BecameGroupLeader                                       = 26,
	EWTLHUDNotificationType__InstableNetworkConnection                               = 27,
	EWTLHUDNotificationType__CraftObjectProcessStarted                               = 28,
	EWTLHUDNotificationType__CraftObjectProcessFinished                              = 29,
	EWTLHUDNotificationType__MailPackageArrived                                      = 30,
	EWTLHUDNotificationType__StuffItemAttachedToWeapon                               = 31,
	EWTLHUDNotificationType__PDAModuleInstalled                                      = 32,
	EWTLHUDNotificationType__ItemRepaired                                            = 33,
	EWTLHUDNotificationType__ItemsRepaired                                           = 34,
	EWTLHUDNotificationType__ItemEquipped                                            = 35,
	EWTLHUDNotificationType__OnSendGlobalGroupInviteResponse                         = 36,
	EWTLHUDNotificationType__OnSteamInventoryConsumeItemError                        = 37,
	EWTLHUDNotificationType__JoinedClan                                              = 38,
	EWTLHUDNotificationType__LeftClan                                                = 39,
	EWTLHUDNotificationType__ExcludedFromClan                                        = 40,
	EWTLHUDNotificationType__FactionScoreIncrease                                    = 41,
	EWTLHUDNotificationType__FactionScoreDecrease                                    = 42,
	EWTLHUDNotificationType__FactionRankIncrease                                     = 43,
	EWTLHUDNotificationType__FactionRankDecrease                                     = 44,
	EWTLHUDNotificationType__FortificationStartLoosingPoint                          = 45,
	EWTLHUDNotificationType__FortificationStartCapturingPoint                        = 46,
	EWTLHUDNotificationType__ForticiationPointCaptured                               = 47,
	EWTLHUDNotificationType__FortificationPointSecured                               = 48,
	EWTLHUDNotificationType__FortificationPointLost                                  = 49,
	EWTLHUDNotificationType__FortificationPointCaptureFailed                         = 50,
	EWTLHUDNotificationType__QuestCanBeCompleted                                     = 51,
	EWTLHUDNotificationType__AccountAchievementTrigger                               = 52,
	EWTLHUDNotificationType__NewClanMemberRequest                                    = 53,
	EWTLHUDNotificationType__EnterFishingZone                                        = 54,
	EWTLHUDNotificationType__LeaveFishingZone                                        = 55,
	EWTLHUDNotificationType__ClanLevelUp                                             = 56,
	EWTLHUDNotificationType__AccountBalanceIncrease                                  = 57,
	EWTLHUDNotificationType__AccountBalanceDecrease                                  = 58,
	EWTLHUDNotificationType__TakeQuest                                               = 59,
	EWTLHUDNotificationType__ReceivedMarkerFromPlayer                                = 60,
	EWTLHUDNotificationType__CanNotAcceptMarkerFromPlayer                            = 61,
	EWTLHUDNotificationType__FishingLineBroke                                        = 62,
	EWTLHUDNotificationType__CanNotFishingInThisPlace                                = 63,
	EWTLHUDNotificationType__EWTLHUDNotificationType_MAX                             = 64
};

/// Enum /Script/WTL.EWTLArenaActivationVolumeType
/// Size: 0x05
enum EWTLArenaActivationVolumeType : uint8_t
{
	EWTLArenaActivationVolumeType__None                                              = 0,
	EWTLArenaActivationVolumeType__ActivatePlayerStart                               = 1,
	EWTLArenaActivationVolumeType__ActivatePlayerStartByRating                       = 2,
	EWTLArenaActivationVolumeType__ActivatableObject                                 = 3,
	EWTLArenaActivationVolumeType__EWTLArenaActivationVolumeType_MAX                 = 4
};

/// Enum /Script/WTL.EWTLEventLogRecordType
/// Size: 0x54
enum EWTLEventLogRecordType : uint8_t
{
	EWTLEventLogRecordType__None                                                     = 0,
	EWTLEventLogRecordType__MonsterKilled                                            = 1,
	EWTLEventLogRecordType__CharacterKilled                                          = 2,
	EWTLEventLogRecordType__EnemyNPCKilled                                           = 3,
	EWTLEventLogRecordType__CharacterDied                                            = 4,
	EWTLEventLogRecordType__CharacterSuicide                                         = 5,
	EWTLEventLogRecordType__DamageToMonster                                          = 6,
	EWTLEventLogRecordType__DamageToEnemyNPC                                         = 7,
	EWTLEventLogRecordType__DamageToCharacter                                        = 8,
	EWTLEventLogRecordType__CriticalDamageToMonster                                  = 9,
	EWTLEventLogRecordType__CriticalDamageToEnemyNPC                                 = 10,
	EWTLEventLogRecordType__CriticalDamageToCharacter                                = 11,
	EWTLEventLogRecordType__DamageFromMonster                                        = 12,
	EWTLEventLogRecordType__CriticalDamageFromMonster                                = 13,
	EWTLEventLogRecordType__DamageFromEnemyNPC                                       = 14,
	EWTLEventLogRecordType__CriticalDamageFromEnemyNPC                               = 15,
	EWTLEventLogRecordType__DamageFromCharacter                                      = 16,
	EWTLEventLogRecordType__CriticalDamageFromCharacter                              = 17,
	EWTLEventLogRecordType__DamageFromEnvironment                                    = 18,
	EWTLEventLogRecordType__CharacterEntersLocation                                  = 19,
	EWTLEventLogRecordType__CharacterLeaveLocation                                   = 20,
	EWTLEventLogRecordType__StartMatch                                               = 21,
	EWTLEventLogRecordType__FinishMatch                                              = 22,
	EWTLEventLogRecordType__CharacterEarnsExperience                                 = 23,
	EWTLEventLogRecordType__CharacterLevelUp                                         = 24,
	EWTLEventLogRecordType__CharacterDestroyMonsterSpawnPoint                        = 25,
	EWTLEventLogRecordType__CharacterGotItem                                         = 26,
	EWTLEventLogRecordType__CharacterLostItem                                        = 27,
	EWTLEventLogRecordType__CharacterDepositedItem                                   = 28,
	EWTLEventLogRecordType__CharacterTakeItem                                        = 29,
	EWTLEventLogRecordType__CharacterDropItem                                        = 30,
	EWTLEventLogRecordType__CharacterEarnsScores                                     = 31,
	EWTLEventLogRecordType__FactionEarnsScores                                       = 32,
	EWTLEventLogRecordType__EnemyPositionsSentToTeamSuccess                          = 33,
	EWTLEventLogRecordType__EnemyPositionsSentToTeamError                            = 34,
	EWTLEventLogRecordType__TeamLeadChanged                                          = 35,
	EWTLEventLogRecordType__CapturePointChanged                                      = 36,
	EWTLEventLogRecordType__PointCaptureByTeam                                       = 37,
	EWTLEventLogRecordType__PointCaptureByEnemy                                      = 38,
	EWTLEventLogRecordType__PointCaptureFailed                                       = 39,
	EWTLEventLogRecordType__SafeZoneEnter                                            = 40,
	EWTLEventLogRecordType__SafeZoneLeave                                            = 41,
	EWTLEventLogRecordType__ReputationIncrease                                       = 42,
	EWTLEventLogRecordType__ReputationDecrease                                       = 43,
	EWTLEventLogRecordType__BalanceChange                                            = 44,
	EWTLEventLogRecordType__ConfederationReputationIncrease                          = 45,
	EWTLEventLogRecordType__ConfederationReputationDecrease                          = 46,
	EWTLEventLogRecordType__BlackSunsetReputationIncrease                            = 47,
	EWTLEventLogRecordType__BlackSunsetReputationDecrease                            = 48,
	EWTLEventLogRecordType__InstableNetworkConnection                                = 49,
	EWTLEventLogRecordType__MadeEffectToCharacter                                    = 50,
	EWTLEventLogRecordType__TakeItemFromAccountInventory                             = 51,
	EWTLEventLogRecordType__PutItemToAccountInventory                                = 52,
	EWTLEventLogRecordType__EWTLEventLogRecordType_MAX                               = 53
};

/// Enum /Script/WTL.EWTLMonsterEventType
/// Size: 0x07
enum EWTLMonsterEventType : uint8_t
{
	EWTLMonsterEventType__None                                                       = 0,
	EWTLMonsterEventType__MonsterMakeDamage                                          = 1,
	EWTLMonsterEventType__StopedByDamage                                             = 2,
	EWTLMonsterEventType__RecoverFromDamage                                          = 3,
	EWTLMonsterEventType__Attack                                                     = 4,
	EWTLMonsterEventType__FarAttack                                                  = 5,
	EWTLMonsterEventType__EWTLMonsterEventType_MAX                                   = 6
};

/// Enum /Script/WTL.EWTLMonsterAIStateOfAggression
/// Size: 0x04
enum EWTLMonsterAIStateOfAggression : uint8_t
{
	EWTLMonsterAIStateOfAggression__None                                             = 0,
	EWTLMonsterAIStateOfAggression__Normal                                           = 1,
	EWTLMonsterAIStateOfAggression__Hard                                             = 2,
	EWTLMonsterAIStateOfAggression__EWTLMonsterAIStateOfAggression_MAX               = 3
};

/// Enum /Script/WTL.EWTLMonsterAIStateMoving
/// Size: 0x03
enum EWTLMonsterAIStateMoving : uint8_t
{
	EWTLMonsterAIStateMoving__Stop                                                   = 0,
	EWTLMonsterAIStateMoving__Moving                                                 = 1,
	EWTLMonsterAIStateMoving__EWTLMonsterAIStateMoving_MAX                           = 2
};

/// Enum /Script/WTL.EWTLMonsterAIState
/// Size: 0x11
enum EWTLMonsterAIState : uint8_t
{
	EWTLMonsterAIState__Walk                                                         = 0,
	EWTLMonsterAIState__RateAggressUp                                                = 1,
	EWTLMonsterAIState__FollowTarget                                                 = 2,
	EWTLMonsterAIState__Attack                                                       = 3,
	EWTLMonsterAIState__FarAttack                                                    = 4,
	EWTLMonsterAIState__FindInstigator                                               = 5,
	EWTLMonsterAIState__Escaping                                                     = 6,
	EWTLMonsterAIState__TakeDamageHigh                                               = 7,
	EWTLMonsterAIState__Stealth                                                      = 8,
	EWTLMonsterAIState__Bug                                                          = 250,
	EWTLMonsterAIState__EWTLMonsterAIState_MAX                                       = 251
};

/// Enum /Script/WTL.EWTLMonsterAnimationState
/// Size: 0x10
enum EWTLMonsterAnimationState : uint8_t
{
	EWTLMonsterAnimationState__Movement                                              = 0,
	EWTLMonsterAnimationState__Idle                                                  = 1,
	EWTLMonsterAnimationState__Attack                                                = 2,
	EWTLMonsterAnimationState__FarAttack                                             = 3,
	EWTLMonsterAnimationState__Damage                                                = 4,
	EWTLMonsterAnimationState__RateAggressUp                                         = 5,
	EWTLMonsterAnimationState__TakeDamageHight                                       = 6,
	EWTLMonsterAnimationState__Stealth                                               = 7,
	EWTLMonsterAnimationState__Death                                                 = 200,
	EWTLMonsterAnimationState__EWTLMonsterAnimationState_MAX                         = 201
};

/// Enum /Script/WTL.EWTLMonsterAIStateAnim
/// Size: 0x12
enum EWTLMonsterAIStateAnim : uint8_t
{
	EWTLMonsterAIStateAnim__None                                                     = 0,
	EWTLMonsterAIStateAnim__Movement                                                 = 1,
	EWTLMonsterAIStateAnim__Fly                                                      = 2,
	EWTLMonsterAIStateAnim__Idle                                                     = 3,
	EWTLMonsterAIStateAnim__Attack                                                   = 4,
	EWTLMonsterAIStateAnim__FarAttack                                                = 5,
	EWTLMonsterAIStateAnim__Damage                                                   = 6,
	EWTLMonsterAIStateAnim__RateAggressUp                                            = 7,
	EWTLMonsterAIStateAnim__TakeDamageHigh                                           = 8,
	EWTLMonsterAIStateAnim__Stealth                                                  = 9,
	EWTLMonsterAIStateAnim__Death                                                    = 200,
	EWTLMonsterAIStateAnim__EWTLMonsterAIStateAnim_MAX                               = 201
};

/// Enum /Script/WTL.EWTLUsableItemUseType
/// Size: 0x04
enum EWTLUsableItemUseType : uint8_t
{
	EWTLUsableItemUseType__None                                                      = 0,
	EWTLUsableItemUseType__Main                                                      = 1,
	EWTLUsableItemUseType__Alternative                                               = 2,
	EWTLUsableItemUseType__EWTLUsableItemUseType_MAX                                 = 3
};

/// Enum /Script/WTL.EWTLUsableItemState
/// Size: 0x19
enum EWTLUsableItemState : uint8_t
{
	EWTLUsableItemState__None                                                        = 0,
	EWTLUsableItemState__Idle                                                        = 1,
	EWTLUsableItemState__ReloadedOneRound                                            = 2,
	EWTLUsableItemState__ReloadedFullMagazine                                        = 3,
	EWTLUsableItemState__MissileThrow                                                = 4,
	EWTLUsableItemState__TacticalPlace                                               = 5,
	EWTLUsableItemState__TakeInArms                                                  = 6,
	EWTLUsableItemState__PutToInventory                                              = 7,
	EWTLUsableItemState__MissileReadyToThrow                                         = 8,
	EWTLUsableItemState__MeleeWeaponHit                                              = 9,
	EWTLUsableItemState__ResourceMinerHit                                            = 10,
	EWTLUsableItemState__ResourceMinerZoneUse                                        = 11,
	EWTLUsableItemState__RepairItemUse                                               = 12,
	EWTLUsableItemState__HealingItemUse                                              = 13,
	EWTLUsableItemState__RechargeItem                                                = 14,
	EWTLUsableItemState__DetectorPowerButtonPress                                    = 15,
	EWTLUsableItemState__SetDetectorMode                                             = 16,
	EWTLUsableItemState__StartToUse                                                  = 17,
	EWTLUsableItemState__EWTLUsableItemState_MAX                                     = 18
};

/// Enum /Script/WTL.FSteelTargetState
/// Size: 0x04
enum FSteelTargetState : uint8_t
{
	FSteelTargetState__None                                                          = 0,
	FSteelTargetState__Rised                                                         = 1,
	FSteelTargetState__Droped                                                        = 2,
	FSteelTargetState__FSteelTargetState_MAX                                         = 3
};

/// Enum /Script/WTL.FSteelTargetType
/// Size: 0x05
enum FSteelTargetType : uint8_t
{
	FSteelTargetType__None                                                           = 0,
	FSteelTargetType__AlwaysActive                                                   = 1,
	FSteelTargetType__ActivateByCharacter                                            = 2,
	FSteelTargetType__ActivateByController                                           = 3,
	FSteelTargetType__FSteelTargetType_MAX                                           = 4
};

/// Enum /Script/WTL.EWTLMonsterTakeDamageType
/// Size: 0x05
enum EWTLMonsterTakeDamageType : uint8_t
{
	EWTLMonsterTakeDamageType__None                                                  = 0,
	EWTLMonsterTakeDamageType__Low                                                   = 1,
	EWTLMonsterTakeDamageType__Medium                                                = 2,
	EWTLMonsterTakeDamageType__High                                                  = 3,
	EWTLMonsterTakeDamageType__EWTLMonsterTakeDamageType_MAX                         = 4
};

/// Enum /Script/WTL.EWTLAIStateMoving
/// Size: 0x05
enum EWTLAIStateMoving : uint8_t
{
	EWTLAIStateMoving__Stop                                                          = 0,
	EWTLAIStateMoving__Walk                                                          = 1,
	EWTLAIStateMoving__EasyRun                                                       = 2,
	EWTLAIStateMoving__QuickRun                                                      = 3,
	EWTLAIStateMoving__EWTLAIStateMoving_MAX                                         = 4
};

/// Enum /Script/WTL.EWTLAIStateMonster
/// Size: 0x06
enum EWTLAIStateMonster : uint8_t
{
	EWTLAIStateMonster__Walk                                                         = 0,
	EWTLAIStateMonster__RateAggressUp                                                = 1,
	EWTLAIStateMonster__FollowTarget                                                 = 2,
	EWTLAIStateMonster__FindInstigator                                               = 3,
	EWTLAIStateMonster__Escaping                                                     = 4,
	EWTLAIStateMonster__EWTLAIStateMonster_MAX                                       = 5
};

/// Enum /Script/WTL.EWTLAITypeTakeDamage
/// Size: 0x05
enum EWTLAITypeTakeDamage : uint8_t
{
	EWTLAITypeTakeDamage__None                                                       = 0,
	EWTLAITypeTakeDamage__Low                                                        = 1,
	EWTLAITypeTakeDamage__Medium                                                     = 2,
	EWTLAITypeTakeDamage__High                                                       = 3,
	EWTLAITypeTakeDamage__EWTLAITypeTakeDamage_MAX                                   = 4
};

/// Enum /Script/WTL.EWTLAIStateAnimMonster
/// Size: 0x10
enum EWTLAIStateAnimMonster : uint8_t
{
	EWTLAIStateAnimMonster__Idle                                                     = 0,
	EWTLAIStateAnimMonster__Idle2                                                    = 1,
	EWTLAIStateAnimMonster__Idle3                                                    = 2,
	EWTLAIStateAnimMonster__TakeHighDamage                                           = 3,
	EWTLAIStateAnimMonster__RateAggressUp                                            = 4,
	EWTLAIStateAnimMonster__Movement                                                 = 5,
	EWTLAIStateAnimMonster__Attack1                                                  = 6,
	EWTLAIStateAnimMonster__Attack2                                                  = 7,
	EWTLAIStateAnimMonster__Death                                                    = 8,
	EWTLAIStateAnimMonster__EWTLAIStateAnimMonster_MAX                               = 9
};

/// Enum /Script/WTL.EWTLDetectorMode
/// Size: 0x04
enum EWTLDetectorMode : uint8_t
{
	EWTLDetectorMode__AliveCreaturesSearchMode                                       = 0,
	EWTLDetectorMode__MinesDetectorMode                                              = 1,
	EWTLDetectorMode__PlaceableStuffsSearchMode                                      = 2,
	EWTLDetectorMode__EWTLDetectorMode_MAX                                           = 3
};

/// Enum /Script/WTL.EWTLWeaponState
/// Size: 0x07
enum EWTLWeaponState : uint8_t
{
	EWTLWeaponState__Idle                                                            = 0,
	EWTLWeaponState__Firing                                                          = 1,
	EWTLWeaponState__FireLast                                                        = 2,
	EWTLWeaponState__Reloading                                                       = 3,
	EWTLWeaponState__Equiping                                                        = 4,
	EWTLWeaponState__Empty                                                           = 5,
	EWTLWeaponState__EWTLWeaponState_MAX                                             = 6
};

/// Enum /Script/WTL.EWTLFireMode
/// Size: 0x06
enum EWTLFireMode : uint8_t
{
	EWTLFireMode__None                                                               = 0,
	EWTLFireMode__Single                                                             = 1,
	EWTLFireMode__Burst2                                                             = 2,
	EWTLFireMode__Burst3                                                             = 3,
	EWTLFireMode__Auto                                                               = 4,
	EWTLFireMode__EWTLFireMode_MAX                                                   = 5
};

/// Enum /Script/WTL.EProjectileType
/// Size: 0x04
enum EProjectileType : uint8_t
{
	EProjectileType__None                                                            = 0,
	EProjectileType__Bullet                                                          = 1,
	EProjectileType__Grenade                                                         = 2,
	EProjectileType__EProjectileType_MAX                                             = 3
};

/// Enum /Script/WTL.EWTLBulletType
/// Size: 0x04
enum EWTLBulletType : uint8_t
{
	EWTLBulletType__FMJ                                                              = 0,
	EWTLBulletType__HP                                                               = 1,
	EWTLBulletType__AP                                                               = 2,
	EWTLBulletType__EWTLBulletType_MAX                                               = 3
};

/// Enum /Script/WTL.EWTLCharacterMoveState
/// Size: 0x06
enum EWTLCharacterMoveState : uint8_t
{
	EWTLCharacterMoveState__NotMoving                                                = 0,
	EWTLCharacterMoveState__Prone                                                    = 1,
	EWTLCharacterMoveState__Crouch                                                   = 2,
	EWTLCharacterMoveState__Walk                                                     = 3,
	EWTLCharacterMoveState__Sprint                                                   = 4,
	EWTLCharacterMoveState__EWTLCharacterMoveState_MAX                               = 5
};

/// Enum /Script/WTL.EWTLCharacterPose
/// Size: 0x05
enum EWTLCharacterPose : uint8_t
{
	EWTLCharacterPose__Stand                                                         = 0,
	EWTLCharacterPose__Crouch                                                        = 1,
	EWTLCharacterPose__Prone                                                         = 2,
	EWTLCharacterPose__Swim                                                          = 3,
	EWTLCharacterPose__EWTLCharacterPose_MAX                                         = 4
};

/// Enum /Script/WTL.EWTLHandsState
/// Size: 0x13
enum EWTLHandsState : uint8_t
{
	EWTLHandsState__Empty                                                            = 0,
	EWTLHandsState__Idle                                                             = 1,
	EWTLHandsState__TakingItemInArms                                                 = 2,
	EWTLHandsState__PuttingItemInInventory                                           = 3,
	EWTLHandsState__Reloading                                                        = 4,
	EWTLHandsState__Action                                                           = 5,
	EWTLHandsState__Running                                                          = 6,
	EWTLHandsState__AimingTransition                                                 = 7,
	EWTLHandsState__Jamming                                                          = 8,
	EWTLHandsState__ItemPlacement                                                    = 9,
	EWTLHandsState__ThrowNut                                                         = 10,
	EWTLHandsState__QuickThrow                                                       = 11,
	EWTLHandsState__EWTLHandsState_MAX                                               = 12
};

/// Enum /Script/WTL.EWTLClientMessageType
/// Size: 0x03
enum EWTLClientMessageType : uint8_t
{
	EWTLClientMessageType__Building                                                  = 1,
	EWTLClientMessageType__Mining                                                    = 2,
	EWTLClientMessageType__EWTLClientMessageType_MAX                                 = 3
};

/// Enum /Script/WTL.EWTLKeyCategory
/// Size: 0x09
enum EWTLKeyCategory : uint8_t
{
	EWTLKeyCategory__None                                                            = 0,
	EWTLKeyCategory__Common                                                          = 1,
	EWTLKeyCategory__Movement                                                        = 2,
	EWTLKeyCategory__Actions                                                         = 3,
	EWTLKeyCategory__Slots                                                           = 4,
	EWTLKeyCategory__HUD                                                             = 5,
	EWTLKeyCategory__PDA                                                             = 6,
	EWTLKeyCategory__Communication                                                   = 7,
	EWTLKeyCategory__EWTLKeyCategory_MAX                                             = 8
};

/// Enum /Script/WTL.EWTLInputMode
/// Size: 0x04
enum EWTLInputMode : uint8_t
{
	EWTLInputMode__Game                                                              = 0,
	EWTLInputMode__GameAndUI                                                         = 1,
	EWTLInputMode__UI                                                                = 2,
	EWTLInputMode__EWTLInputMode_MAX                                                 = 3
};

/// Enum /Script/WTL.EWTLMapMarkerType
/// Size: 0x45
enum EWTLMapMarkerType : uint8_t
{
	EWTLMapMarkerType__Player                                                        = 0,
	EWTLMapMarkerType__Enemy                                                         = 1,
	EWTLMapMarkerType__Ally                                                          = 2,
	EWTLMapMarkerType__Monster                                                       = 3,
	EWTLMapMarkerType__QuestMonster                                                  = 4,
	EWTLMapMarkerType__CapturePoint                                                  = 5,
	EWTLMapMarkerType__TeamLead                                                      = 6,
	EWTLMapMarkerType__SafeHouse                                                     = 7,
	EWTLMapMarkerType__MobileStartPoint                                              = 8,
	EWTLMapMarkerType__QuestPoint                                                    = 9,
	EWTLMapMarkerType__CompleteQuestPoint                                            = 10,
	EWTLMapMarkerType__CompleteActiveQuestPoint                                      = 11,
	EWTLMapMarkerType__TakeQuestPoint                                                = 12,
	EWTLMapMarkerType__PlayerKiller                                                  = 13,
	EWTLMapMarkerType__LastDeath                                                     = 14,
	EWTLMapMarkerType__CampfireLocation                                              = 15,
	EWTLMapMarkerType__StashLocation                                                 = 16,
	EWTLMapMarkerType__NPC                                                           = 17,
	EWTLMapMarkerType__Label                                                         = 18,
	EWTLMapMarkerType__Portal                                                        = 19,
	EWTLMapMarkerType__PortalQuestPoint                                              = 20,
	EWTLMapMarkerType__PortalCompleteQuestPoint                                      = 21,
	EWTLMapMarkerType__PortalCompleteActiveQuestPoint                                = 22,
	EWTLMapMarkerType__WaterSource                                                   = 23,
	EWTLMapMarkerType__NPCDoctor                                                     = 24,
	EWTLMapMarkerType__NPCStockman                                                   = 25,
	EWTLMapMarkerType__NPCGunsmith                                                   = 26,
	EWTLMapMarkerType__NPCTrader                                                     = 27,
	EWTLMapMarkerType__FortificationNeutralCaptureInProgress                         = 28,
	EWTLMapMarkerType__FortificationConfederationCaptureInProgress                   = 29,
	EWTLMapMarkerType__FortificationBlackSunsetCaptureInProgress                     = 30,
	EWTLMapMarkerType__FortificationNeutralCanBeCaptured                             = 31,
	EWTLMapMarkerType__FortificationConfederationCanBeCaptured                       = 32,
	EWTLMapMarkerType__FortificationBlackSunsetCanBeCaptured                         = 33,
	EWTLMapMarkerType__FortificationNeutralCannotBeCaptured                          = 34,
	EWTLMapMarkerType__FortificationConfederationCannotBeCaptured                    = 35,
	EWTLMapMarkerType__FortificationBlackSunsetCannotBeCaptured                      = 36,
	EWTLMapMarkerType__EventPointMonsterSpawn                                        = 37,
	EWTLMapMarkerType__EventPointEnvironment                                         = 38,
	EWTLMapMarkerType__EventPointFindItem                                            = 39,
	EWTLMapMarkerType__SafeZoneArea                                                  = 40,
	EWTLMapMarkerType__SafeZoneNeutral                                               = 41,
	EWTLMapMarkerType__SafeZoneConfederation                                         = 42,
	EWTLMapMarkerType__SafeZoneBlackSunset                                           = 43,
	EWTLMapMarkerType__EWTLMapMarkerType_MAX                                         = 44
};

/// Enum /Script/WTL.EWTLEventPointActivationType
/// Size: 0x03
enum EWTLEventPointActivationType : uint8_t
{
	EWTLEventPointActivationType__ByRange                                            = 0,
	EWTLEventPointActivationType__ByVolume                                           = 1,
	EWTLEventPointActivationType__EWTLEventPointActivationType_MAX                   = 2
};

/// Enum /Script/WTL.EWTLEventPointType
/// Size: 0x05
enum EWTLEventPointType : uint8_t
{
	EWTLEventPointType__None                                                         = 0,
	EWTLEventPointType__MonsterSpawn                                                 = 1,
	EWTLEventPointType__Environment                                                  = 2,
	EWTLEventPointType__FindItem                                                     = 3,
	EWTLEventPointType__EWTLEventPointType_MAX                                       = 4
};

/// Enum /Script/WTL.EWTLFishState
/// Size: 0x04
enum EWTLFishState : uint8_t
{
	EWTLFishState__None                                                              = 0,
	EWTLFishState__Pecking                                                           = 1,
	EWTLFishState__Recovering                                                        = 2,
	EWTLFishState__EWTLFishState_MAX                                                 = 3
};

/// Enum /Script/WTL.EWTLFishingMontageType
/// Size: 0x10
enum EWTLFishingMontageType : uint8_t
{
	EWTLFishingMontageType__None                                                     = 0,
	EWTLFishingMontageType__Throwing                                                 = 1,
	EWTLFishingMontageType__ThrowingEnd                                              = 2,
	EWTLFishingMontageType__Peck                                                     = 3,
	EWTLFishingMontageType__PeckEnd                                                  = 4,
	EWTLFishingMontageType__LeftHook                                                 = 5,
	EWTLFishingMontageType__UpHook                                                   = 6,
	EWTLFishingMontageType__RightHook                                                = 7,
	EWTLFishingMontageType__DownHook                                                 = 8,
	EWTLFishingMontageType__EWTLFishingMontageType_MAX                               = 9
};

/// Enum /Script/WTL.EWTLHUDType
/// Size: 0x05
enum EWTLHUDType : uint8_t
{
	EWTLHUDType__None                                                                = 0,
	EWTLHUDType__Character                                                           = 1,
	EWTLHUDType__Spectator                                                           = 2,
	EWTLHUDType__Monster                                                             = 3,
	EWTLHUDType__EWTLHUDType_MAX                                                     = 4
};

/// Enum /Script/WTL.ECannotActionType
/// Size: 0x03
enum ECannotActionType : uint8_t
{
	ECannotActionType__Put                                                           = 0,
	ECannotActionType__Take                                                          = 1,
	ECannotActionType__ECannotActionType_MAX                                         = 2
};

/// Enum /Script/WTL.EWTLAccountInventoryOperationType
/// Size: 0x05
enum EWTLAccountInventoryOperationType : uint8_t
{
	EWTLAccountInventoryOperationType__None                                          = 0,
	EWTLAccountInventoryOperationType__UpdateItems                                   = 1,
	EWTLAccountInventoryOperationType__TakeItem                                      = 2,
	EWTLAccountInventoryOperationType__PutItem                                       = 3,
	EWTLAccountInventoryOperationType__EWTLAccountInventoryOperationType_MAX         = 4
};

/// Enum /Script/WTL.EWTLHumanoidAnimInstanceState
/// Size: 0x06
enum EWTLHumanoidAnimInstanceState : uint8_t
{
	EWTLHumanoidAnimInstanceState__None                                              = 0,
	EWTLHumanoidAnimInstanceState__Walking                                           = 1,
	EWTLHumanoidAnimInstanceState__Crouch                                            = 2,
	EWTLHumanoidAnimInstanceState__CombatWalking                                     = 3,
	EWTLHumanoidAnimInstanceState__CombatCrouch                                      = 4,
	EWTLHumanoidAnimInstanceState__EWTLHumanoidAnimInstanceState_MAX                 = 5
};

/// Enum /Script/WTL.EWTLRequestType
/// Size: 0x05
enum EWTLRequestType : uint8_t
{
	EWTLRequestType__None                                                            = 0,
	EWTLRequestType__PurchaseStoreItems                                              = 1,
	EWTLRequestType__GetAccountInventory                                             = 2,
	EWTLRequestType__GetAccountInventoryAfterPurchaseStoreItems                      = 3,
	EWTLRequestType__EWTLRequestType_MAX                                             = 4
};

/// Enum /Script/WTL.EWTLMonsterAcceleration
/// Size: 0x03
enum EWTLMonsterAcceleration : uint8_t
{
	EWTLMonsterAcceleration__Normal                                                  = 0,
	EWTLMonsterAcceleration__Fast                                                    = 1,
	EWTLMonsterAcceleration__EWTLMonsterAcceleration_MAX                             = 2
};

/// Enum /Script/WTL.EWTLMonsterFindingVisibleCharacterType
/// Size: 0x05
enum EWTLMonsterFindingVisibleCharacterType : uint8_t
{
	EWTLMonsterFindingVisibleCharacterType__Random                                   = 0,
	EWTLMonsterFindingVisibleCharacterType__Near                                     = 1,
	EWTLMonsterFindingVisibleCharacterType__Hamster                                  = 2,
	EWTLMonsterFindingVisibleCharacterType__Stimulus                                 = 3,
	EWTLMonsterFindingVisibleCharacterType__EWTLMonsterFindingVisibleCharacterType_MAX = 4
};

/// Enum /Script/WTL.EWTLMonsterFindingCharacterType
/// Size: 0x09
enum EWTLMonsterFindingCharacterType : uint8_t
{
	EWTLMonsterFindingCharacterType__Random                                          = 0,
	EWTLMonsterFindingCharacterType__MinHealth                                       = 1,
	EWTLMonsterFindingCharacterType__MaxHealth                                       = 2,
	EWTLMonsterFindingCharacterType__MinLevel                                        = 3,
	EWTLMonsterFindingCharacterType__MaxLevel                                        = 4,
	EWTLMonsterFindingCharacterType__MinTotalTakeDamage                              = 5,
	EWTLMonsterFindingCharacterType__MaxTotalTakeDamage                              = 6,
	EWTLMonsterFindingCharacterType__Near                                            = 7,
	EWTLMonsterFindingCharacterType__EWTLMonsterFindingCharacterType_MAX             = 8
};

/// Enum /Script/WTL.EWTLMonsterStateDeath
/// Size: 0x04
enum EWTLMonsterStateDeath : uint8_t
{
	EWTLMonsterStateDeath__None                                                      = 0,
	EWTLMonsterStateDeath__ToDeath                                                   = 1,
	EWTLMonsterStateDeath__Death                                                     = 2,
	EWTLMonsterStateDeath__EWTLMonsterStateDeath_MAX                                 = 3
};

/// Enum /Script/WTL.EWTLControlledActionKeyType
/// Size: 0x13
enum EWTLControlledActionKeyType : uint8_t
{
	EWTLControlledActionKeyType__None                                                = 0,
	EWTLControlledActionKeyType__MainAttack                                          = 1,
	EWTLControlledActionKeyType__SecondaryAttack                                     = 2,
	EWTLControlledActionKeyType__CustomAction0                                       = 3,
	EWTLControlledActionKeyType__CustomAction1                                       = 4,
	EWTLControlledActionKeyType__CustomAction2                                       = 5,
	EWTLControlledActionKeyType__CustomAction3                                       = 6,
	EWTLControlledActionKeyType__CustomAction4                                       = 7,
	EWTLControlledActionKeyType__CustomAction5                                       = 8,
	EWTLControlledActionKeyType__CustomAction6                                       = 9,
	EWTLControlledActionKeyType__CustomAction7                                       = 10,
	EWTLControlledActionKeyType__Die                                                 = 99,
	EWTLControlledActionKeyType__EWTLControlledActionKeyType_MAX                     = 100
};

/// Enum /Script/WTL.EWTLMonsterSpawnerSpawnMethod
/// Size: 0x03
enum EWTLMonsterSpawnerSpawnMethod : uint8_t
{
	EWTLMonsterSpawnerSpawnMethod__Reachable                                         = 0,
	EWTLMonsterSpawnerSpawnMethod__Navigable                                         = 1,
	EWTLMonsterSpawnerSpawnMethod__EWTLMonsterSpawnerSpawnMethod_MAX                 = 2
};

/// Enum /Script/WTL.EWTLWayPointMovingType
/// Size: 0x03
enum EWTLWayPointMovingType : uint8_t
{
	EWTLWayPointMovingType__Sequential                                               = 0,
	EWTLWayPointMovingType__Random                                                   = 1,
	EWTLWayPointMovingType__EWTLWayPointMovingType_MAX                               = 2
};

/// Enum /Script/WTL.EWTLNPCReplicaAction
/// Size: 0x09
enum EWTLNPCReplicaAction : uint8_t
{
	EWTLNPCReplicaAction__None                                                       = 0,
	EWTLNPCReplicaAction__ShowMainDialog                                             = 1,
	EWTLNPCReplicaAction__ShowGreetingDefault                                        = 2,
	EWTLNPCReplicaAction__ShowGreetingDialog                                         = 3,
	EWTLNPCReplicaAction__ShowGreetingAndMainDialog                                  = 4,
	EWTLNPCReplicaAction__ShowTakeQuestDialog                                        = 5,
	EWTLNPCReplicaAction__ShowCompleteQuestDialog                                    = 6,
	EWTLNPCReplicaAction__EndDialog                                                  = 7,
	EWTLNPCReplicaAction__EWTLNPCReplicaAction_MAX                                   = 8
};

/// Enum /Script/WTL.EWTLCharacterCanTakeCompleteQuest
/// Size: 0x05
enum EWTLCharacterCanTakeCompleteQuest : uint8_t
{
	EWTLCharacterCanTakeCompleteQuest__None                                          = 0,
	EWTLCharacterCanTakeCompleteQuest__Take                                          = 1,
	EWTLCharacterCanTakeCompleteQuest__Complete                                      = 2,
	EWTLCharacterCanTakeCompleteQuest__TakeComplete                                  = 3,
	EWTLCharacterCanTakeCompleteQuest__EWTLCharacterCanTakeCompleteQuest_MAX         = 4
};

/// Enum /Script/WTL.EWTLInventoryToSteamConversionErrorCode
/// Size: 0x07
enum EWTLInventoryToSteamConversionErrorCode : uint8_t
{
	EWTLInventoryToSteamConversionErrorCode__None                                    = 0,
	EWTLInventoryToSteamConversionErrorCode__InternalError                           = 1,
	EWTLInventoryToSteamConversionErrorCode__ItemsNotFoundInInventory                = 2,
	EWTLInventoryToSteamConversionErrorCode__ItemsConditionsError                    = 3,
	EWTLInventoryToSteamConversionErrorCode__WrongItemType                           = 4,
	EWTLInventoryToSteamConversionErrorCode__SteamResponseError                      = 5,
	EWTLInventoryToSteamConversionErrorCode__EWTLInventoryToSteamConversionErrorCode_MAX = 6
};

/// Enum /Script/WTL.EWTLNPCReason
/// Size: 0x04
enum EWTLNPCReason : uint8_t
{
	EWTLNPCReason__None                                                              = 0,
	EWTLNPCReason__FullBag                                                           = 1,
	EWTLNPCReason__WeightOverload                                                    = 2,
	EWTLNPCReason__EWTLNPCReason_MAX                                                 = 3
};

/// Enum /Script/WTL.EWTLNPCCheckResult
/// Size: 0x03
enum EWTLNPCCheckResult : uint8_t
{
	EWTLNPCCheckResult__Result_False                                                 = 0,
	EWTLNPCCheckResult__Result_True                                                  = 1,
	EWTLNPCCheckResult__Result_MAX                                                   = 2
};

/// Enum /Script/WTL.EWTLNPCActionResult
/// Size: 0x03
enum EWTLNPCActionResult : uint8_t
{
	EWTLNPCActionResult__Success                                                     = 0,
	EWTLNPCActionResult__Failed                                                      = 1,
	EWTLNPCActionResult__EWTLNPCActionResult_MAX                                     = 2
};

/// Enum /Script/WTL.EWTLNPCAction
/// Size: 0x05
enum EWTLNPCAction : uint8_t
{
	EWTLNPCAction__DoNothing                                                         = 0,
	EWTLNPCAction__SpawnReplica                                                      = 1,
	EWTLNPCAction__GiveExperience                                                    = 2,
	EWTLNPCAction__GiveItem                                                          = 3,
	EWTLNPCAction__EWTLNPCAction_MAX                                                 = 4
};

/// Enum /Script/WTL.EWTLHighlightID
/// Size: 0x09
enum EWTLHighlightID : uint8_t
{
	EWTLHighlightID__None                                                            = 0,
	EWTLHighlightID__BossKill                                                        = 1,
	EWTLHighlightID__Kill                                                            = 11,
	EWTLHighlightID__DoubleKill                                                      = 12,
	EWTLHighlightID__MultiKill                                                       = 13,
	EWTLHighlightID__TrophyKill                                                      = 21,
	EWTLHighlightID__LongDistanceHit                                                 = 31,
	EWTLHighlightID__Jackpot                                                         = 41,
	EWTLHighlightID__EWTLHighlightID_MAX                                             = 42
};

/// Enum /Script/WTL.EWTLClanLogType
/// Size: 0x04
enum EWTLClanLogType : uint8_t
{
	EWTLClanLogType__None                                                            = 0,
	EWTLClanLogType__Score                                                           = 1,
	EWTLClanLogType__Actions                                                         = 2,
	EWTLClanLogType__EWTLClanLogType_MAX                                             = 3
};

/// Enum /Script/WTL.EWTLClanLeaderboardSortType
/// Size: 0x08
enum EWTLClanLeaderboardSortType : uint8_t
{
	EWTLClanLeaderboardSortType__None                                                = 0,
	EWTLClanLeaderboardSortType__MembersCount                                        = 1,
	EWTLClanLeaderboardSortType__PvPScore                                            = 2,
	EWTLClanLeaderboardSortType__PvEScore                                            = 3,
	EWTLClanLeaderboardSortType__CraftScore                                          = 4,
	EWTLClanLeaderboardSortType__Reputation                                          = 5,
	EWTLClanLeaderboardSortType__Rating                                              = 6,
	EWTLClanLeaderboardSortType__EWTLClanLeaderboardSortType_MAX                     = 7
};

/// Enum /Script/WTL.EWTLPDASkillState
/// Size: 0x04
enum EWTLPDASkillState : uint8_t
{
	EWTLPDASkillState__NotAvailable                                                  = 0,
	EWTLPDASkillState__Available                                                     = 1,
	EWTLPDASkillState__Learned                                                       = 2,
	EWTLPDASkillState__EWTLPDASkillState_MAX                                         = 3
};

/// Enum /Script/WTL.EWTLPortalActionResult
/// Size: 0x03
enum EWTLPortalActionResult : uint8_t
{
	EWTLPortalActionResult__Success                                                  = 0,
	EWTLPortalActionResult__Failed                                                   = 1,
	EWTLPortalActionResult__EWTLPortalActionResult_MAX                               = 2
};

/// Enum /Script/WTL.EWTLControlledDroneAbilityType
/// Size: 0x07
enum EWTLControlledDroneAbilityType : uint8_t
{
	EWTLControlledDroneAbilityType__None                                             = 0,
	EWTLControlledDroneAbilityType__GetInfo                                          = 1,
	EWTLControlledDroneAbilityType__SwitchCameraMode                                 = 2,
	EWTLControlledDroneAbilityType__SingleShot                                       = 3,
	EWTLControlledDroneAbilityType__PickUp                                           = 4,
	EWTLControlledDroneAbilityType__SelfDestruction                                  = 5,
	EWTLControlledDroneAbilityType__EWTLControlledDroneAbilityType_MAX               = 6
};

/// Enum /Script/WTL.EWTLMarkerType
/// Size: 0x07
enum EWTLMarkerType : uint8_t
{
	EWTLMarkerType__None                                                             = 0,
	EWTLMarkerType__Enemy                                                            = 1,
	EWTLMarkerType__EnemyNPC                                                         = 2,
	EWTLMarkerType__Friend                                                           = 3,
	EWTLMarkerType__Monster                                                          = 4,
	EWTLMarkerType__Device                                                           = 5,
	EWTLMarkerType__EWTLMarkerType_MAX                                               = 6
};

/// Enum /Script/WTL.EWTLClanActionLogRecordType
/// Size: 0x11
enum EWTLClanActionLogRecordType : uint8_t
{
	EWTLClanActionLogRecordType__None                                                = 0,
	EWTLClanActionLogRecordType__AcceptInvite                                        = 1,
	EWTLClanActionLogRecordType__AcceptRequest                                       = 2,
	EWTLClanActionLogRecordType__SetClanLeadership                                   = 3,
	EWTLClanActionLogRecordType__SetClanMemberType                                   = 4,
	EWTLClanActionLogRecordType__SetClanPolicyGroup                                  = 5,
	EWTLClanActionLogRecordType__ChangeClanDescription                               = 6,
	EWTLClanActionLogRecordType__LeaveClan                                           = 7,
	EWTLClanActionLogRecordType__DismissCharacterFromClan                            = 8,
	EWTLClanActionLogRecordType__UpdateClanTabAccess                                 = 9,
	EWTLClanActionLogRecordType__EWTLClanActionLogRecordType_MAX                     = 10
};

/// Enum /Script/WTL.EWTLClanScoreLogRecordType
/// Size: 0x06
enum EWTLClanScoreLogRecordType : uint8_t
{
	EWTLClanScoreLogRecordType__None                                                 = 0,
	EWTLClanScoreLogRecordType__QuestComplete                                        = 1,
	EWTLClanScoreLogRecordType__TakeClanSkill                                        = 2,
	EWTLClanScoreLogRecordType__ScoreExchange                                        = 3,
	EWTLClanScoreLogRecordType__FortificationCapture                                 = 4,
	EWTLClanScoreLogRecordType__EWTLClanScoreLogRecordType_MAX                       = 5
};

/// Enum /Script/WTL.EWTLPlatform
/// Size: 0x05
enum EWTLPlatform : uint8_t
{
	EWTLPlatform__None                                                               = 0,
	EWTLPlatform__Steam                                                              = 1,
	EWTLPlatform__Abyss                                                              = 2,
	EWTLPlatform__Mailru                                                             = 3,
	EWTLPlatform__EWTLPlatform_MAX                                                   = 4
};

/// Enum /Script/WTL.EWTLCharacterContactType
/// Size: 0x04
enum EWTLCharacterContactType : uint8_t
{
	EWTLCharacterContactType__None                                                   = 0,
	EWTLCharacterContactType__Friend                                                 = 1,
	EWTLCharacterContactType__Enemy                                                  = 2,
	EWTLCharacterContactType__EWTLCharacterContactType_MAX                           = 3
};

/// Enum /Script/WTL.EWTLVoicePacketType
/// Size: 0x07
enum EWTLVoicePacketType : uint8_t
{
	EWTLVoicePacketType__None                                                        = 0,
	EWTLVoicePacketType__ClientIdentity                                              = 1,
	EWTLVoicePacketType__Regular                                                     = 100,
	EWTLVoicePacketType__Private                                                     = 101,
	EWTLVoicePacketType__Group                                                       = 102,
	EWTLVoicePacketType__Clan                                                        = 103,
	EWTLVoicePacketType__EWTLVoicePacketType_MAX                                     = 104
};

/// Enum /Script/WTL.EWTLAccountType
/// Size: 0x04
enum EWTLAccountType : uint8_t
{
	EWTLAccountType__Regular                                                         = 0,
	EWTLAccountType__Tester                                                          = 1,
	EWTLAccountType__Developer                                                       = 250,
	EWTLAccountType__EWTLAccountType_MAX                                             = 251
};

/// Enum /Script/WTL.EWTLClanStorageMoneyOperationType
/// Size: 0x04
enum EWTLClanStorageMoneyOperationType : uint8_t
{
	EWTLClanStorageMoneyOperationType__None                                          = 0,
	EWTLClanStorageMoneyOperationType__PutMoney                                      = 1,
	EWTLClanStorageMoneyOperationType__TakeMoney                                     = 2,
	EWTLClanStorageMoneyOperationType__EWTLClanStorageMoneyOperationType_MAX         = 3
};

/// Enum /Script/WTL.EWTLClanStorageItemOperationType
/// Size: 0x04
enum EWTLClanStorageItemOperationType : uint8_t
{
	EWTLClanStorageItemOperationType__None                                           = 0,
	EWTLClanStorageItemOperationType__PutItem                                        = 1,
	EWTLClanStorageItemOperationType__TakeItem                                       = 2,
	EWTLClanStorageItemOperationType__EWTLClanStorageItemOperationType_MAX           = 3
};

/// Enum /Script/WTL.EWTLServerEventType
/// Size: 0x07
enum EWTLServerEventType : uint8_t
{
	EWTLServerEventType__None                                                        = 0,
	EWTLServerEventType__ServerShutdown                                              = 1,
	EWTLServerEventType__VersionUpdate                                               = 2,
	EWTLServerEventType__Important                                                   = 3,
	EWTLServerEventType__Average                                                     = 4,
	EWTLServerEventType__Quest                                                       = 5,
	EWTLServerEventType__EWTLServerEventType_MAX                                     = 6
};

/// Enum /Script/WTL.EWTLPlayerType
/// Size: 0x04
enum EWTLPlayerType : uint8_t
{
	EWTLPlayerType__Regular                                                          = 0,
	EWTLPlayerType__Moderator                                                        = 100,
	EWTLPlayerType__Administrator                                                    = 200,
	EWTLPlayerType__EWTLPlayerType_MAX                                               = 201
};

/// Enum /Script/WTL.EWTLQuestState
/// Size: 0x06
enum EWTLQuestState : uint8_t
{
	EWTLQuestState__None                                                             = 0,
	EWTLQuestState__InProgress                                                       = 1,
	EWTLQuestState__Canceled                                                         = 2,
	EWTLQuestState__CompletedSuccess                                                 = 3,
	EWTLQuestState__CompletedFailed                                                  = 4,
	EWTLQuestState__EWTLQuestState_MAX                                               = 5
};

/// Enum /Script/WTL.EWTLClanMemberType
/// Size: 0x07
enum EWTLClanMemberType : uint8_t
{
	EWTLClanMemberType__None                                                         = 0,
	EWTLClanMemberType__Leader                                                       = 1,
	EWTLClanMemberType__DeputyLeader                                                 = 2,
	EWTLClanMemberType__Steward                                                      = 10,
	EWTLClanMemberType__Member                                                       = 100,
	EWTLClanMemberType__Candidate                                                    = 200,
	EWTLClanMemberType__EWTLClanMemberType_MAX                                       = 201
};

/// Enum /Script/WTL.EWTLQuestType
/// Size: 0x04
enum EWTLQuestType : uint8_t
{
	EWTLQuestType__None                                                              = 0,
	EWTLQuestType__OneTime                                                           = 1,
	EWTLQuestType__Repeatable                                                        = 2,
	EWTLQuestType__EWTLQuestType_MAX                                                 = 3
};

/// Enum /Script/WTL.EWTLCharacterCustomizationPart
/// Size: 0x09
enum EWTLCharacterCustomizationPart : uint8_t
{
	EWTLCharacterCustomizationPart__None                                             = 0,
	EWTLCharacterCustomizationPart__Head                                             = 1,
	EWTLCharacterCustomizationPart__Torso                                            = 2,
	EWTLCharacterCustomizationPart__Legs                                             = 3,
	EWTLCharacterCustomizationPart__Feet                                             = 4,
	EWTLCharacterCustomizationPart__Glasses                                          = 20,
	EWTLCharacterCustomizationPart__Watches                                          = 21,
	EWTLCharacterCustomizationPart__Backpack                                         = 22,
	EWTLCharacterCustomizationPart__EWTLCharacterCustomizationPart_MAX               = 23
};

/// Enum /Script/WTL.EWTLGameServerStopReason
/// Size: 0x04
enum EWTLGameServerStopReason : uint8_t
{
	EWTLGameServerStopReason__None                                                   = 0,
	EWTLGameServerStopReason__ConnectionLost                                         = 1,
	EWTLGameServerStopReason__Shutdown                                               = 2,
	EWTLGameServerStopReason__EWTLGameServerStopReason_MAX                           = 3
};

/// Enum /Script/WTL.EWTLGameServerType
/// Size: 0x04
enum EWTLGameServerType : uint8_t
{
	EWTLGameServerType__None                                                         = 0,
	EWTLGameServerType__Official                                                     = 1,
	EWTLGameServerType__Community                                                    = 2,
	EWTLGameServerType__EWTLGameServerType_MAX                                       = 3
};

/// Enum /Script/WTL.EWTLCraftType
/// Size: 0x10
enum EWTLCraftType : uint8_t
{
	EWTLCraftType__None                                                              = 0,
	EWTLCraftType__Inventory                                                         = 1,
	EWTLCraftType__CampFire                                                          = 2,
	EWTLCraftType__Furnace                                                           = 3,
	EWTLCraftType__PressMachine                                                      = 4,
	EWTLCraftType__ChemicalStation                                                   = 5,
	EWTLCraftType__AmmoPress                                                         = 6,
	EWTLCraftType__SmallCNCMachine                                                   = 7,
	EWTLCraftType__BigCNCMachine                                                     = 8,
	EWTLCraftType__EWTLCraftType_MAX                                                 = 9
};

/// Enum /Script/WTL.EWTLBuildingDoorLockType
/// Size: 0x04
enum EWTLBuildingDoorLockType : uint8_t
{
	EWTLBuildingDoorLockType__None                                                   = 0,
	EWTLBuildingDoorLockType__KeyLock                                                = 1,
	EWTLBuildingDoorLockType__CodeLock                                               = 2,
	EWTLBuildingDoorLockType__EWTLBuildingDoorLockType_MAX                           = 3
};

/// Enum /Script/WTL.EWTLSkillDependencyType
/// Size: 0x04
enum EWTLSkillDependencyType : uint8_t
{
	EWTLSkillDependencyType__MustHave                                                = 0,
	EWTLSkillDependencyType__MustNotHave                                             = 1,
	EWTLSkillDependencyType__MustHaveOneOf                                           = 2,
	EWTLSkillDependencyType__EWTLSkillDependencyType_MAX                             = 3
};

/// Enum /Script/WTL.EWTLSkillType
/// Size: 0x03
enum EWTLSkillType : uint8_t
{
	EWTLSkillType__Passive                                                           = 0,
	EWTLSkillType__Active                                                            = 1,
	EWTLSkillType__EWTLSkillType_MAX                                                 = 2
};

/// Enum /Script/WTL.EWTLBalanceChangeType
/// Size: 0x03
enum EWTLBalanceChangeType : uint8_t
{
	EWTLBalanceChangeType__Income                                                    = 0,
	EWTLBalanceChangeType__Charge                                                    = 1,
	EWTLBalanceChangeType__EWTLBalanceChangeType_MAX                                 = 2
};

/// Enum /Script/WTL.EWTLAmmoProjectileType
/// Size: 0x04
enum EWTLAmmoProjectileType : uint8_t
{
	EWTLAmmoProjectileType__FMJ                                                      = 0,
	EWTLAmmoProjectileType__HP                                                       = 1,
	EWTLAmmoProjectileType__AP                                                       = 2,
	EWTLAmmoProjectileType__EWTLAmmoProjectileType_MAX                               = 3
};

/// Enum /Script/WTL.EWTLShopType
/// Size: 0x02
enum EWTLShopType : uint8_t
{
	EWTLShopType__System                                                             = 0,
	EWTLShopType__EWTLShopType_MAX                                                   = 1
};

/// Enum /Script/WTL.EWTLMiningPointType
/// Size: 0x03
enum EWTLMiningPointType : uint8_t
{
	EWTLMiningPointType__None                                                        = 0,
	EWTLMiningPointType__Tree                                                        = 1,
	EWTLMiningPointType__EWTLMiningPointType_MAX                                     = 2
};

/// Enum /Script/WTL.EWTLBuildingBlockState
/// Size: 0x04
enum EWTLBuildingBlockState : uint8_t
{
	EWTLBuildingBlockState__Stable                                                   = 0,
	EWTLBuildingBlockState__Building                                                 = 1,
	EWTLBuildingBlockState__Repairing                                                = 2,
	EWTLBuildingBlockState__EWTLBuildingBlockState_MAX                               = 3
};

/// Enum /Script/WTL.EWTLBuildingJointType
/// Size: 0x08
enum EWTLBuildingJointType : uint8_t
{
	EWTLBuildingJointType__None                                                      = 0,
	EWTLBuildingJointType__North                                                     = 1,
	EWTLBuildingJointType__East                                                      = 2,
	EWTLBuildingJointType__South                                                     = 3,
	EWTLBuildingJointType__West                                                      = 4,
	EWTLBuildingJointType__Top                                                       = 5,
	EWTLBuildingJointType__Middle                                                    = 6,
	EWTLBuildingJointType__EWTLBuildingJointType_MAX                                 = 7
};

/// Enum /Script/WTL.EWTLBuildingType
/// Size: 0x03
enum EWTLBuildingType : uint8_t
{
	EWTLBuildingType__None                                                           = 0,
	EWTLBuildingType__House                                                          = 1,
	EWTLBuildingType__EWTLBuildingType_MAX                                           = 2
};

/// Enum /Script/WTL.EWTLBlockType
/// Size: 0x13
enum EWTLBlockType : uint8_t
{
	EWTLBlockType__Base                                                              = 0,
	EWTLBlockType__Wall                                                              = 1,
	EWTLBlockType__WindowBlock                                                       = 2,
	EWTLBlockType__DoorBlock                                                         = 3,
	EWTLBlockType__Pillar                                                            = 4,
	EWTLBlockType__Top                                                               = 5,
	EWTLBlockType__FrontSteps                                                        = 6,
	EWTLBlockType__Stairs                                                            = 7,
	EWTLBlockType__Staircase                                                         = 8,
	EWTLBlockType__StorageBox                                                        = 252,
	EWTLBlockType__Workbench                                                         = 253,
	EWTLBlockType__Empty                                                             = 254,
	EWTLBlockType__EWTLBlockType_MAX                                                 = 255
};

/// Enum /Script/WTL.EWTLBodyPart
/// Size: 0x06
enum EWTLBodyPart : uint8_t
{
	EWTLBodyPart__None                                                               = 0,
	EWTLBodyPart__Head                                                               = 1,
	EWTLBodyPart__Torso                                                              = 2,
	EWTLBodyPart__Legs                                                               = 3,
	EWTLBodyPart__Feet                                                               = 4,
	EWTLBodyPart__EWTLBodyPart_MAX                                                   = 5
};

/// Enum /Script/WTL.EWTLChatMessageType
/// Size: 0x08
enum EWTLChatMessageType : uint8_t
{
	EWTLChatMessageType__Common                                                      = 0,
	EWTLChatMessageType__Private                                                     = 1,
	EWTLChatMessageType__Group                                                       = 2,
	EWTLChatMessageType__Clan                                                        = 3,
	EWTLChatMessageType__Faction                                                     = 4,
	EWTLChatMessageType__Global                                                      = 5,
	EWTLChatMessageType__System                                                      = 250,
	EWTLChatMessageType__EWTLChatMessageType_MAX                                     = 251
};

/// Enum /Script/WTL.EWTLWeatherType
/// Size: 0x05
enum EWTLWeatherType : uint8_t
{
	EWTLWeatherType__Clear                                                           = 0,
	EWTLWeatherType__Cloudy                                                          = 1,
	EWTLWeatherType__Rain                                                            = 2,
	EWTLWeatherType__HeavyRain                                                       = 3,
	EWTLWeatherType__EWTLWeatherType_MAX                                             = 4
};

/// Enum /Script/WTL.EWTLCloudsType
/// Size: 0x07
enum EWTLCloudsType : uint8_t
{
	EWTLCloudsType__Custom                                                           = 0,
	EWTLCloudsType__None                                                             = 1,
	EWTLCloudsType__Few                                                              = 2,
	EWTLCloudsType__Scattered                                                        = 3,
	EWTLCloudsType__Broken                                                           = 4,
	EWTLCloudsType__Overcast                                                         = 5,
	EWTLCloudsType__EWTLCloudsType_MAX                                               = 6
};

/// Enum /Script/WTL.EWTLSex
/// Size: 0x03
enum EWTLSex : uint8_t
{
	EWTLSex__Female                                                                  = 0,
	EWTLSex__Male                                                                    = 1,
	EWTLSex__EWTLSex_MAX                                                             = 2
};

/// Enum /Script/WTL.EWTLConnectionCloseType
/// Size: 0x07
enum EWTLConnectionCloseType : uint8_t
{
	EWTLConnectionCloseType__InvalidPackets                                          = 0,
	EWTLConnectionCloseType__InvalidLogin                                            = 1,
	EWTLConnectionCloseType__ServerConsoleCommand                                    = 2,
	EWTLConnectionCloseType__HighPingValue                                           = 3,
	EWTLConnectionCloseType__CharacterBan                                            = 4,
	EWTLConnectionCloseType__ConnecionClosedByServer                                 = 5,
	EWTLConnectionCloseType__EWTLConnectionCloseType_MAX                             = 6
};

/// Enum /Script/WTL.EWTLAITargetState
/// Size: 0x04
enum EWTLAITargetState : uint8_t
{
	EWTLAITargetState__None                                                          = 0,
	EWTLAITargetState__Warning                                                       = 1,
	EWTLAITargetState__Chasing                                                       = 2,
	EWTLAITargetState__EWTLAITargetState_MAX                                         = 3
};

/// Enum /Script/WTL.EWTLAITargetType
/// Size: 0x05
enum EWTLAITargetType : uint8_t
{
	EWTLAITargetType__None                                                           = 0,
	EWTLAITargetType__Waypoint                                                       = 1,
	EWTLAITargetType__Player                                                         = 2,
	EWTLAITargetType__Monster                                                        = 3,
	EWTLAITargetType__EWTLAITargetType_MAX                                           = 4
};

/// Enum /Script/WTL.EWTLNPCAIClientEventType
/// Size: 0x08
enum EWTLNPCAIClientEventType : uint8_t
{
	EWTLNPCAIClientEventType__None                                                   = 0,
	EWTLNPCAIClientEventType__TargetEnterSightRange                                  = 1,
	EWTLNPCAIClientEventType__TargetLeaveSightRange                                  = 2,
	EWTLNPCAIClientEventType__TargetEnterWarningRange                                = 3,
	EWTLNPCAIClientEventType__TargetLeaveWarningRange                                = 4,
	EWTLNPCAIClientEventType__TargetEnterChaseRange                                  = 5,
	EWTLNPCAIClientEventType__TargetLeaveChaseRange                                  = 6,
	EWTLNPCAIClientEventType__EWTLNPCAIClientEventType_MAX                           = 7
};

/// Enum /Script/WTL.EWTLAIState
/// Size: 0x08
enum EWTLAIState : uint8_t
{
	EWTLAIState__Sleeping                                                            = 0,
	EWTLAIState__Idle                                                                = 1,
	EWTLAIState__WalkingToWaypoint                                                   = 2,
	EWTLAIState__Warning                                                             = 3,
	EWTLAIState__Chasing                                                             = 4,
	EWTLAIState__Escaping                                                            = 100,
	EWTLAIState__Dead                                                                = 200,
	EWTLAIState__EWTLAIState_MAX                                                     = 201
};

/// Enum /Script/WTL.EWTLLocationType
/// Size: 0x04
enum EWTLLocationType : uint8_t
{
	EWTLLocationType__Normal                                                         = 0,
	EWTLLocationType__Underground                                                    = 1,
	EWTLLocationType__ClanHall                                                       = 2,
	EWTLLocationType__EWTLLocationType_MAX                                           = 3
};

/// Enum /Script/WTL.EWTLPlaceType
/// Size: 0x03
enum EWTLPlaceType : uint8_t
{
	EWTLPlaceType__Normal                                                            = 0,
	EWTLPlaceType__Underground                                                       = 1,
	EWTLPlaceType__EWTLPlaceType_MAX                                                 = 2
};

/// Enum /Script/WTL.EWTLQuestCheckResult
/// Size: 0x03
enum EWTLQuestCheckResult : uint8_t
{
	EWTLQuestCheckResult__Result_False                                               = 0,
	EWTLQuestCheckResult__Result_True                                                = 1,
	EWTLQuestCheckResult__Result_MAX                                                 = 2
};

/// Enum /Script/WTL.EWTLObjFAActionResult
/// Size: 0x03
enum EWTLObjFAActionResult : uint8_t
{
	EWTLObjFAActionResult__Success                                                   = 0,
	EWTLObjFAActionResult__Failed                                                    = 1,
	EWTLObjFAActionResult__EWTLObjFAActionResult_MAX                                 = 2
};

/// Enum /Script/WTL.EWTLObjFACheckResult
/// Size: 0x03
enum EWTLObjFACheckResult : uint8_t
{
	EWTLObjFACheckResult__Result_False                                               = 0,
	EWTLObjFACheckResult__Result_True                                                = 1,
	EWTLObjFACheckResult__Result_MAX                                                 = 2
};

/// Enum /Script/WTL.EWTLRainAudioRemoveMethod
/// Size: 0x04
enum EWTLRainAudioRemoveMethod : uint8_t
{
	EWTLRainAudioRemoveMethod__None                                                  = 0,
	EWTLRainAudioRemoveMethod__AlwaysCovered                                         = 1,
	EWTLRainAudioRemoveMethod__RemoveCompletely                                      = 2,
	EWTLRainAudioRemoveMethod__EWTLRainAudioRemoveMethod_MAX                         = 3
};

/// Enum /Script/WTL.EClassRepNodeMapping
/// Size: 0x06
enum EClassRepNodeMapping : uint8_t
{
	EClassRepNodeMapping__NotRouted                                                  = 0,
	EClassRepNodeMapping__RelevantAllConnections                                     = 1,
	EClassRepNodeMapping__Spatialize_Static                                          = 2,
	EClassRepNodeMapping__Spatialize_Dynamic                                         = 3,
	EClassRepNodeMapping__Spatialize_Dormancy                                        = 4,
	EClassRepNodeMapping__EClassRepNodeMapping_MAX                                   = 5
};

/// Enum /Script/WTL.EWTLSafeZoneType
/// Size: 0x03
enum EWTLSafeZoneType : uint8_t
{
	EWTLSafeZoneType__SafeZone                                                       = 0,
	EWTLSafeZoneType__CheckPoint                                                     = 1,
	EWTLSafeZoneType__EWTLSafeZoneType_MAX                                           = 2
};

/// Enum /Script/WTL.EWTLScriptedEventMethodType
/// Size: 0x05
enum EWTLScriptedEventMethodType : uint8_t
{
	EWTLScriptedEventMethodType__SpawnObject                                         = 0,
	EWTLScriptedEventMethodType__SpawnMonster                                        = 1,
	EWTLScriptedEventMethodType__SpawnEnemy                                          = 2,
	EWTLScriptedEventMethodType__AnnounceEvent                                       = 3,
	EWTLScriptedEventMethodType__EWTLScriptedEventMethodType_MAX                     = 4
};

/// Enum /Script/WTL.EWTLSecurityViolationType
/// Size: 0x03
enum EWTLSecurityViolationType : uint8_t
{
	EWTLSecurityViolationType__None                                                  = 0,
	EWTLSecurityViolationType__DriverDetected                                        = 1,
	EWTLSecurityViolationType__EWTLSecurityViolationType_MAX                         = 2
};

/// Enum /Script/WTL.EWTLSlotMachineState
/// Size: 0x04
enum EWTLSlotMachineState : uint8_t
{
	EWTLSlotMachineState__None                                                       = 0,
	EWTLSlotMachineState__StartGame                                                  = 1,
	EWTLSlotMachineState__EndGame                                                    = 3,
	EWTLSlotMachineState__EWTLSlotMachineState_MAX                                   = 4
};

/// Enum /Script/WTL.EWTLClanRelation
/// Size: 0x04
enum EWTLClanRelation : uint8_t
{
	EWTLClanRelation__Neutral                                                        = 0,
	EWTLClanRelation__Friend                                                         = 1,
	EWTLClanRelation__Enemy                                                          = 2,
	EWTLClanRelation__EWTLClanRelation_MAX                                           = 3
};

/// Enum /Script/WTL.EWTLTiltState
/// Size: 0x04
enum EWTLTiltState : uint8_t
{
	EWTLTiltState__None                                                              = 0,
	EWTLTiltState__TiltRight                                                         = 1,
	EWTLTiltState__TiltLeft                                                          = 2,
	EWTLTiltState__EWTLTiltState_MAX                                                 = 3
};

/// Enum /Script/WTL.EWTLTriggerCheckResult
/// Size: 0x03
enum EWTLTriggerCheckResult : uint8_t
{
	EWTLTriggerCheckResult__Result_False                                             = 0,
	EWTLTriggerCheckResult__Result_True                                              = 1,
	EWTLTriggerCheckResult__Result_MAX                                               = 2
};

/// Enum /Script/WTL.EWTLTriggerObjectState
/// Size: 0x03
enum EWTLTriggerObjectState : uint8_t
{
	EWTLTriggerObjectState__Off                                                      = 0,
	EWTLTriggerObjectState__On                                                       = 1,
	EWTLTriggerObjectState__EWTLTriggerObjectState_MAX                               = 2
};

/// Enum /Script/WTL.EWTLTriggerActionResult
/// Size: 0x03
enum EWTLTriggerActionResult : uint8_t
{
	EWTLTriggerActionResult__Failed                                                  = 0,
	EWTLTriggerActionResult__Success                                                 = 1,
	EWTLTriggerActionResult__EWTLTriggerActionResult_MAX                             = 2
};

/// Enum /Script/WTL.EWTLRadialMenuType
/// Size: 0x04
enum EWTLRadialMenuType : uint8_t
{
	EWTLRadialMenuType__None                                                         = 0,
	EWTLRadialMenuType__Use                                                          = 1,
	EWTLRadialMenuType__Emotions                                                     = 2,
	EWTLRadialMenuType__EWTLRadialMenuType_MAX                                       = 3
};

/// Enum /Script/WTL.EWTLBPCheckResult
/// Size: 0x03
enum EWTLBPCheckResult : uint8_t
{
	EWTLBPCheckResult__Result_False                                                  = 0,
	EWTLBPCheckResult__Result_True                                                   = 1,
	EWTLBPCheckResult__Result_MAX                                                    = 2
};

/// Enum /Script/WTL.EWTLBPActionResult
/// Size: 0x03
enum EWTLBPActionResult : uint8_t
{
	EWTLBPActionResult__Failed                                                       = 0,
	EWTLBPActionResult__Success                                                      = 1,
	EWTLBPActionResult__EWTLBPActionResult_MAX                                       = 2
};

/// Enum /Script/WTL.EWTLClothesTorsoMeshVariant
/// Size: 0x05
enum EWTLClothesTorsoMeshVariant : uint8_t
{
	EWTLClothesTorsoMeshVariant__Full                                                = 0,
	EWTLClothesTorsoMeshVariant__FullArms                                            = 1,
	EWTLClothesTorsoMeshVariant__HalfArms                                            = 2,
	EWTLClothesTorsoMeshVariant__HandsOnly                                           = 3,
	EWTLClothesTorsoMeshVariant__EWTLClothesTorsoMeshVariant_MAX                     = 4
};

/// Enum /Script/WTL.EWTLGlobalLevelObjectType
/// Size: 0x03
enum EWTLGlobalLevelObjectType : uint8_t
{
	EWTLGlobalLevelObjectType__None                                                  = 0,
	EWTLGlobalLevelObjectType__Camp                                                  = 1,
	EWTLGlobalLevelObjectType__EWTLGlobalLevelObjectType_MAX                         = 2
};

/// Enum /Script/WTL.EWTLFortificationObjectType
/// Size: 0x03
enum EWTLFortificationObjectType : uint8_t
{
	EWTLFortificationObjectType__None                                                = 0,
	EWTLFortificationObjectType__MachinuGun                                          = 1,
	EWTLFortificationObjectType__EWTLFortificationObjectType_MAX                     = 2
};

/// Enum /Script/WTL.EWTLNPCIdentificationAbility
/// Size: 0x07
enum EWTLNPCIdentificationAbility : uint8_t
{
	EWTLNPCIdentificationAbility__CanTrade                                           = 0,
	EWTLNPCIdentificationAbility__HasStorage                                         = 1,
	EWTLNPCIdentificationAbility__CanTakeQuest                                       = 2,
	EWTLNPCIdentificationAbility__CanCompleteQuest                                   = 3,
	EWTLNPCIdentificationAbility__IsGunsmith                                         = 4,
	EWTLNPCIdentificationAbility__HasComission                                       = 5,
	EWTLNPCIdentificationAbility__EWTLNPCIdentificationAbility_MAX                   = 6
};

/// Enum /Script/WTL.EWTLDaytimeCubemapBlendType
/// Size: 0x03
enum EWTLDaytimeCubemapBlendType : uint8_t
{
	EWTLDaytimeCubemapBlendType__Increment                                           = 0,
	EWTLDaytimeCubemapBlendType__Decrement                                           = 1,
	EWTLDaytimeCubemapBlendType__EWTLDaytimeCubemapBlendType_MAX                     = 2
};

/// Enum /Script/WTL.EWTLEnergyFieldType
/// Size: 0x03
enum EWTLEnergyFieldType : uint8_t
{
	EWTLEnergyFieldType__None                                                        = 0,
	EWTLEnergyFieldType__SafeZone                                                    = 1,
	EWTLEnergyFieldType__EWTLEnergyFieldType_MAX                                     = 2
};

/// Enum /Script/WTL.EWTLSuffocationVolumeType
/// Size: 0x03
enum EWTLSuffocationVolumeType : uint8_t
{
	EWTLSuffocationVolumeType__None                                                  = 0,
	EWTLSuffocationVolumeType__Water                                                 = 1,
	EWTLSuffocationVolumeType__EWTLSuffocationVolumeType_MAX                         = 2
};

/// Enum /Script/WTL.EWTLSuspensionType
/// Size: 0x03
enum EWTLSuspensionType : uint8_t
{
	EWTLSuspensionType__Regular                                                      = 0,
	EWTLSuspensionType__Enduro                                                       = 1,
	EWTLSuspensionType__EWTLSuspensionType_MAX                                       = 2
};

/// Enum /Script/WTL.EWTLVehicleEngineSoundMode
/// Size: 0x03
enum EWTLVehicleEngineSoundMode : uint8_t
{
	EWTLVehicleEngineSoundMode__Simple                                               = 0,
	EWTLVehicleEngineSoundMode__Advanced                                             = 1,
	EWTLVehicleEngineSoundMode__EWTLVehicleEngineSoundMode_MAX                       = 2
};

/// Enum /Game/WTL/UI/Blueprints/HUD/Monster/E_State_HUD_LMI.E_State_HUD_LMI
/// Size: 0x06
enum E_State_HUD_LMI : uint8_t
{
	E_State_HUD_LMI__NewEnumerator5                                                  = 0,
	E_State_HUD_LMI__NewEnumerator6                                                  = 1,
	E_State_HUD_LMI__NewEnumerator0                                                  = 2,
	E_State_HUD_LMI__NewEnumerator1                                                  = 3,
	E_State_HUD_LMI__NewEnumerator2                                                  = 4,
	E_State_HUD_LMI__E_State_HUD_MAX                                                 = 5
};

/// Enum /Game/WTL/Monsters/Components/E_GenerateStatus.E_GenerateStatus
/// Size: 0x04
enum E_GenerateStatus : uint8_t
{
	E_GenerateStatus__NewEnumerator0                                                 = 0,
	E_GenerateStatus__NewEnumerator1                                                 = 1,
	E_GenerateStatus__NewEnumerator2                                                 = 2,
	E_GenerateStatus__E_MAX                                                          = 3
};

/// Enum /Game/WTL/Monsters/New/Blueprint/ProjectsX/E_StateObject.E_StateObject
/// Size: 0x14
enum E_StateObject : uint8_t
{
	E_StateObject__NewEnumerator0                                                    = 0,
	E_StateObject__NewEnumerator1                                                    = 1,
	E_StateObject__NewEnumerator2                                                    = 2,
	E_StateObject__NewEnumerator3                                                    = 3,
	E_StateObject__NewEnumerator4                                                    = 4,
	E_StateObject__NewEnumerator5                                                    = 5,
	E_StateObject__NewEnumerator6                                                    = 6,
	E_StateObject__NewEnumerator7                                                    = 7,
	E_StateObject__NewEnumerator8                                                    = 8,
	E_StateObject__NewEnumerator9                                                    = 9,
	E_StateObject__NewEnumerator10                                                   = 10,
	E_StateObject__NewEnumerator11                                                   = 11,
	E_StateObject__NewEnumerator12                                                   = 12,
	E_StateObject__E_MAX                                                             = 13
};

/// Enum /Game/WTL/Monsters/New/AI/Enums/E_MonsterFollowTarget.E_MonsterFollowTarget
/// Size: 0x12
enum E_MonsterFollowTarget : uint8_t
{
	E_MonsterFollowTarget__NewEnumerator0                                            = 0,
	E_MonsterFollowTarget__NewEnumerator1                                            = 1,
	E_MonsterFollowTarget__NewEnumerator2                                            = 2,
	E_MonsterFollowTarget__NewEnumerator3                                            = 3,
	E_MonsterFollowTarget__NewEnumerator4                                            = 4,
	E_MonsterFollowTarget__NewEnumerator5                                            = 5,
	E_MonsterFollowTarget__NewEnumerator6                                            = 6,
	E_MonsterFollowTarget__NewEnumerator7                                            = 7,
	E_MonsterFollowTarget__NewEnumerator8                                            = 8,
	E_MonsterFollowTarget__NewEnumerator9                                            = 9,
	E_MonsterFollowTarget__NewEnumerator10                                           = 10,
	E_MonsterFollowTarget__E_MAX                                                     = 11
};

/// Enum /Game/WTL/Monsters/New/Blueprint/StrayDog/E_MonsterBiasMode.E_MonsterBiasMode
/// Size: 0x04
enum E_MonsterBiasMode : uint8_t
{
	E_MonsterBiasMode__NewEnumerator0                                                = 0,
	E_MonsterBiasMode__NewEnumerator1                                                = 1,
	E_MonsterBiasMode__NewEnumerator2                                                = 2,
	E_MonsterBiasMode__E_MAX                                                         = 3
};

/// Enum /Game/WTL/Monsters/New/AI/Enums/StateMonster.StateMonster
/// Size: 0x32
enum StateMonster : uint8_t
{
	StateMonster__NewEnumerator8                                                     = 0,
	StateMonster__NewEnumerator1                                                     = 1,
	StateMonster__NewEnumerator2                                                     = 2,
	StateMonster__NewEnumerator3                                                     = 3,
	StateMonster__NewEnumerator5                                                     = 4,
	StateMonster__NewEnumerator7                                                     = 5,
	StateMonster__NewEnumerator9                                                     = 6,
	StateMonster__NewEnumerator10                                                    = 7,
	StateMonster__NewEnumerator11                                                    = 8,
	StateMonster__NewEnumerator12                                                    = 9,
	StateMonster__NewEnumerator13                                                    = 10,
	StateMonster__NewEnumerator14                                                    = 11,
	StateMonster__NewEnumerator15                                                    = 12,
	StateMonster__NewEnumerator16                                                    = 13,
	StateMonster__NewEnumerator17                                                    = 14,
	StateMonster__NewEnumerator19                                                    = 15,
	StateMonster__NewEnumerator20                                                    = 16,
	StateMonster__NewEnumerator21                                                    = 17,
	StateMonster__NewEnumerator22                                                    = 18,
	StateMonster__NewEnumerator23                                                    = 19,
	StateMonster__NewEnumerator24                                                    = 20,
	StateMonster__NewEnumerator25                                                    = 21,
	StateMonster__NewEnumerator26                                                    = 22,
	StateMonster__NewEnumerator28                                                    = 23,
	StateMonster__NewEnumerator29                                                    = 24,
	StateMonster__NewEnumerator30                                                    = 25,
	StateMonster__NewEnumerator32                                                    = 26,
	StateMonster__NewEnumerator33                                                    = 27,
	StateMonster__NewEnumerator34                                                    = 28,
	StateMonster__NewEnumerator35                                                    = 29,
	StateMonster__NewEnumerator36                                                    = 30,
	StateMonster__StateMonster_MAX                                                   = 31
};

/// Enum /Game/WTL/Monsters/New/AI/Enums/E_MoveToBase.E_MoveToBase
/// Size: 0x04
enum E_MoveToBase : uint8_t
{
	E_MoveToBase__NewEnumerator0                                                     = 0,
	E_MoveToBase__NewEnumerator1                                                     = 1,
	E_MoveToBase__NewEnumerator2                                                     = 2,
	E_MoveToBase__E_MAX                                                              = 3
};

